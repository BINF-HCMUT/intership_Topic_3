
week1_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdf0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  0800cf00  0800cf00  0001cf00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3ac  0800d3ac  0002025c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d3ac  0800d3ac  0002025c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d3ac  0800d3ac  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3ac  0800d3ac  0001d3ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3b0  0800d3b0  0001d3b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0800d3b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000754  2000025c  0800d610  0002025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009b0  0800d610  000209b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016cbf  00000000  00000000  00020285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034e0  00000000  00000000  00036f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  0003a428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f8  00000000  00000000  0003b898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1f1  00000000  00000000  0003cb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019273  00000000  00000000  00057d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094d39  00000000  00000000  00070ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105d2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065a4  00000000  00000000  00105d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000025c 	.word	0x2000025c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cee8 	.word	0x0800cee8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000260 	.word	0x20000260
 800014c:	0800cee8 	.word	0x0800cee8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <DHT20_isConnected>:
uint8_t readCMD[3] = {0xAC, 0x33, 0x00};
uint32_t _lastRequest = 0;
uint32_t _lastRead = 0;


uint8_t DHT20_isConnected(){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, DHT20, 1, 100);
 8000d4a:	2364      	movs	r3, #100	; 0x64
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2170      	movs	r1, #112	; 0x70
 8000d50:	480b      	ldr	r0, [pc, #44]	; (8000d80 <DHT20_isConnected+0x3c>)
 8000d52:	f004 f9f7 	bl	8005144 <HAL_I2C_IsDeviceReady>
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!connectDHT=%02X#\r\n", status), 1000);
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4909      	ldr	r1, [pc, #36]	; (8000d84 <DHT20_isConnected+0x40>)
 8000d60:	4809      	ldr	r0, [pc, #36]	; (8000d88 <DHT20_isConnected+0x44>)
 8000d62:	f009 fe49 	bl	800a9f8 <siprintf>
 8000d66:	4603      	mov	r3, r0
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	4906      	ldr	r1, [pc, #24]	; (8000d88 <DHT20_isConnected+0x44>)
 8000d70:	4806      	ldr	r0, [pc, #24]	; (8000d8c <DHT20_isConnected+0x48>)
 8000d72:	f008 fb86 	bl	8009482 <HAL_UART_Transmit>
    return status;
 8000d76:	79fb      	ldrb	r3, [r7, #7]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000350 	.word	0x20000350
 8000d84:	0800cf00 	.word	0x0800cf00
 8000d88:	20000010 	.word	0x20000010
 8000d8c:	20000508 	.word	0x20000508

08000d90 <DHT20_getHumidity>:

uint8_t DHT20_getAddress(){
	return DHT20;
}

float DHT20_getHumidity (){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	return (humidity + humidityOffset);
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <DHT20_getHumidity+0x1c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <DHT20_getHumidity+0x20>)
 8000d9a:	6812      	ldr	r2, [r2, #0]
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fec8 	bl	8000b34 <__addsf3>
 8000da4:	4603      	mov	r3, r0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000278 	.word	0x20000278
 8000db0:	20000280 	.word	0x20000280

08000db4 <DHT20_getTemperature>:

float DHT20_getTemperature(){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	return temperature + temperatureOffset;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <DHT20_getTemperature+0x1c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <DHT20_getTemperature+0x20>)
 8000dbe:	6812      	ldr	r2, [r2, #0]
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff feb6 	bl	8000b34 <__addsf3>
 8000dc8:	4603      	mov	r3, r0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000027c 	.word	0x2000027c
 8000dd4:	20000284 	.word	0x20000284

08000dd8 <DHT20_requestData>:
     return humidityOffset;
}
float DHT20_getTemperatureOffset(){
	return temperatureOffset;
}
uint8_t DHT20_requestData(){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af02      	add	r7, sp, #8
	  HAL_StatusTypeDef ret;
	  ret =  HAL_I2C_Master_Transmit(&hi2c1, DHT20, readCMD, 3, 1000);
 8000dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2303      	movs	r3, #3
 8000de6:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <DHT20_requestData+0x28>)
 8000de8:	2170      	movs	r1, #112	; 0x70
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <DHT20_requestData+0x2c>)
 8000dec:	f003 fe40 	bl	8004a70 <HAL_I2C_Master_Transmit>
 8000df0:	4603      	mov	r3, r0
 8000df2:	71fb      	strb	r3, [r7, #7]
      return ret;
 8000df4:	79fb      	ldrb	r3, [r7, #7]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000000 	.word	0x20000000
 8000e04:	20000350 	.word	0x20000350

08000e08 <DHT20_crc8>:
    	   if(DHT20_resetRegister(0x1E)) count++;
    	   HAL_Delay(20);
       }
}
uint8_t DHT20_crc8(uint8_t *ptr, uint8_t len)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0xFF;
 8000e14:	23ff      	movs	r3, #255	; 0xff
 8000e16:	73fb      	strb	r3, [r7, #15]
	while(len--){
 8000e18:	e01e      	b.n	8000e58 <DHT20_crc8+0x50>
		crc ^= *ptr++;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	1c5a      	adds	r2, r3, #1
 8000e1e:	607a      	str	r2, [r7, #4]
 8000e20:	781a      	ldrb	r2, [r3, #0]
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	4053      	eors	r3, r2
 8000e26:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 0; i< 8; ++i)
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73bb      	strb	r3, [r7, #14]
 8000e2c:	e011      	b.n	8000e52 <DHT20_crc8+0x4a>
		{
			if(crc & 0x80)
 8000e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	da07      	bge.n	8000e46 <DHT20_crc8+0x3e>
			{
				crc <<= 1;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	73fb      	strb	r3, [r7, #15]
				crc ^= 0x31;
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	e002      	b.n	8000e4c <DHT20_crc8+0x44>
			}
			else
			{
				crc <<= 1;
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 0; i< 8; ++i)
 8000e4c:	7bbb      	ldrb	r3, [r7, #14]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	73bb      	strb	r3, [r7, #14]
 8000e52:	7bbb      	ldrb	r3, [r7, #14]
 8000e54:	2b07      	cmp	r3, #7
 8000e56:	d9ea      	bls.n	8000e2e <DHT20_crc8+0x26>
	while(len--){
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	1e5a      	subs	r2, r3, #1
 8000e5c:	70fa      	strb	r2, [r7, #3]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1db      	bne.n	8000e1a <DHT20_crc8+0x12>
			}
		}
	}
	return crc;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
	...

08000e70 <DHT20_Read>:
int DHT20_Read(){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret ;
	if(DHT20_isConnected() != HAL_OK){
 8000e76:	f7ff ff65 	bl	8000d44 <DHT20_isConnected>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d002      	beq.n	8000e86 <DHT20_Read+0x16>
		return DHT20_ERROR_CONNECT;
 8000e80:	f06f 030a 	mvn.w	r3, #10
 8000e84:	e02d      	b.n	8000ee2 <DHT20_Read+0x72>
	}
    uint8_t request_data = DHT20_requestData();
 8000e86:	f7ff ffa7 	bl	8000dd8 <DHT20_requestData>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
    if(request_data == HAL_OK){
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d124      	bne.n	8000ede <DHT20_Read+0x6e>
    	HAL_Delay(1000);
 8000e94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e98:	f002 fbb6 	bl	8003608 <HAL_Delay>
    	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!result=%s#\r\n", "OK"), 1000);
 8000e9c:	4a13      	ldr	r2, [pc, #76]	; (8000eec <DHT20_Read+0x7c>)
 8000e9e:	4914      	ldr	r1, [pc, #80]	; (8000ef0 <DHT20_Read+0x80>)
 8000ea0:	4814      	ldr	r0, [pc, #80]	; (8000ef4 <DHT20_Read+0x84>)
 8000ea2:	f009 fda9 	bl	800a9f8 <siprintf>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	4911      	ldr	r1, [pc, #68]	; (8000ef4 <DHT20_Read+0x84>)
 8000eb0:	4811      	ldr	r0, [pc, #68]	; (8000ef8 <DHT20_Read+0x88>)
 8000eb2:	f008 fae6 	bl	8009482 <HAL_UART_Transmit>
    	ret = HAL_I2C_Master_Receive(&hi2c1, DHT20, buf, 7, 100);
 8000eb6:	2364      	movs	r3, #100	; 0x64
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	2307      	movs	r3, #7
 8000ebc:	4a0f      	ldr	r2, [pc, #60]	; (8000efc <DHT20_Read+0x8c>)
 8000ebe:	2170      	movs	r1, #112	; 0x70
 8000ec0:	480f      	ldr	r0, [pc, #60]	; (8000f00 <DHT20_Read+0x90>)
 8000ec2:	f003 fed3 	bl	8004c6c <HAL_I2C_Master_Receive>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71bb      	strb	r3, [r7, #6]
    	HAL_Delay(100);
 8000eca:	2064      	movs	r0, #100	; 0x64
 8000ecc:	f002 fb9c 	bl	8003608 <HAL_Delay>
    	   if(ret == HAL_OK){
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d103      	bne.n	8000ede <DHT20_Read+0x6e>
    		   return DHT20_Convert();
 8000ed6:	f000 f815 	bl	8000f04 <DHT20_Convert>
 8000eda:	4603      	mov	r3, r0
 8000edc:	e001      	b.n	8000ee2 <DHT20_Read+0x72>
    	   }

    }
    return DHT20_ERROR_BYTES_ALL_ZERO;
 8000ede:	f06f 030c 	mvn.w	r3, #12
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	0800cf14 	.word	0x0800cf14
 8000ef0:	0800cf18 	.word	0x0800cf18
 8000ef4:	20000010 	.word	0x20000010
 8000ef8:	20000508 	.word	0x20000508
 8000efc:	20000288 	.word	0x20000288
 8000f00:	20000350 	.word	0x20000350

08000f04 <DHT20_Convert>:

int DHT20_Convert(){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
	   //  convert temperature
	   uint32_t raw = buf[1];
 8000f0a:	4b56      	ldr	r3, [pc, #344]	; (8001064 <DHT20_Convert+0x160>)
 8000f0c:	785b      	ldrb	r3, [r3, #1]
 8000f0e:	607b      	str	r3, [r7, #4]
	   raw <<= 8;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	607b      	str	r3, [r7, #4]
	   raw += buf[2];
 8000f16:	4b53      	ldr	r3, [pc, #332]	; (8001064 <DHT20_Convert+0x160>)
 8000f18:	789b      	ldrb	r3, [r3, #2]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4413      	add	r3, r2
 8000f20:	607b      	str	r3, [r7, #4]
	   raw <<= 4;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	607b      	str	r3, [r7, #4]
	   raw += (buf[3] >> 4);
 8000f28:	4b4e      	ldr	r3, [pc, #312]	; (8001064 <DHT20_Convert+0x160>)
 8000f2a:	78db      	ldrb	r3, [r3, #3]
 8000f2c:	091b      	lsrs	r3, r3, #4
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	461a      	mov	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	607b      	str	r3, [r7, #4]
	   humidity = raw * 9.5367431640625e-5;   // ==> / 1048576.0 * 100%;
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff fa53 	bl	80003e4 <__aeabi_ui2d>
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	4b49      	ldr	r3, [pc, #292]	; (8001068 <DHT20_Convert+0x164>)
 8000f44:	f7ff fac8 	bl	80004d8 <__aeabi_dmul>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f7ff fd9a 	bl	8000a88 <__aeabi_d2f>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4a45      	ldr	r2, [pc, #276]	; (800106c <DHT20_Convert+0x168>)
 8000f58:	6013      	str	r3, [r2, #0]
	   HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "Humid=%f\r\n", humidity), 1000);
 8000f5a:	4b44      	ldr	r3, [pc, #272]	; (800106c <DHT20_Convert+0x168>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fa62 	bl	8000428 <__aeabi_f2d>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4941      	ldr	r1, [pc, #260]	; (8001070 <DHT20_Convert+0x16c>)
 8000f6a:	4842      	ldr	r0, [pc, #264]	; (8001074 <DHT20_Convert+0x170>)
 8000f6c:	f009 fd44 	bl	800a9f8 <siprintf>
 8000f70:	4603      	mov	r3, r0
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f78:	493e      	ldr	r1, [pc, #248]	; (8001074 <DHT20_Convert+0x170>)
 8000f7a:	483f      	ldr	r0, [pc, #252]	; (8001078 <DHT20_Convert+0x174>)
 8000f7c:	f008 fa81 	bl	8009482 <HAL_UART_Transmit>

		//  convert humidity
	    raw = (buf[3] & 0x0F);
 8000f80:	4b38      	ldr	r3, [pc, #224]	; (8001064 <DHT20_Convert+0x160>)
 8000f82:	78db      	ldrb	r3, [r3, #3]
 8000f84:	f003 030f 	and.w	r3, r3, #15
 8000f88:	607b      	str	r3, [r7, #4]
	    raw <<= 8;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	021b      	lsls	r3, r3, #8
 8000f8e:	607b      	str	r3, [r7, #4]
	    raw += buf[4];
 8000f90:	4b34      	ldr	r3, [pc, #208]	; (8001064 <DHT20_Convert+0x160>)
 8000f92:	791b      	ldrb	r3, [r3, #4]
 8000f94:	461a      	mov	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	607b      	str	r3, [r7, #4]
	    raw <<= 8;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	607b      	str	r3, [r7, #4]
	    raw += buf[5];
 8000fa2:	4b30      	ldr	r3, [pc, #192]	; (8001064 <DHT20_Convert+0x160>)
 8000fa4:	795b      	ldrb	r3, [r3, #5]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4413      	add	r3, r2
 8000fac:	607b      	str	r3, [r7, #4]
	    temperature = raw * 1.9073486328125e-4 - 50;  //  ==> / 1048576.0 * 200 - 50;
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff fa18 	bl	80003e4 <__aeabi_ui2d>
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	4b30      	ldr	r3, [pc, #192]	; (800107c <DHT20_Convert+0x178>)
 8000fba:	f7ff fa8d 	bl	80004d8 <__aeabi_dmul>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <DHT20_Convert+0x17c>)
 8000fcc:	f7ff f8cc 	bl	8000168 <__aeabi_dsub>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f7ff fd56 	bl	8000a88 <__aeabi_d2f>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	4a29      	ldr	r2, [pc, #164]	; (8001084 <DHT20_Convert+0x180>)
 8000fe0:	6013      	str	r3, [r2, #0]
	    HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "temp=%f\r\n", temperature), 1000);
 8000fe2:	4b28      	ldr	r3, [pc, #160]	; (8001084 <DHT20_Convert+0x180>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fa1e 	bl	8000428 <__aeabi_f2d>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4925      	ldr	r1, [pc, #148]	; (8001088 <DHT20_Convert+0x184>)
 8000ff2:	4820      	ldr	r0, [pc, #128]	; (8001074 <DHT20_Convert+0x170>)
 8000ff4:	f009 fd00 	bl	800a9f8 <siprintf>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001000:	491c      	ldr	r1, [pc, #112]	; (8001074 <DHT20_Convert+0x170>)
 8001002:	481d      	ldr	r0, [pc, #116]	; (8001078 <DHT20_Convert+0x174>)
 8001004:	f008 fa3d 	bl	8009482 <HAL_UART_Transmit>

	    // Checksum
	    uint8_t crc = DHT20_crc8(buf, 6);
 8001008:	2106      	movs	r1, #6
 800100a:	4816      	ldr	r0, [pc, #88]	; (8001064 <DHT20_Convert+0x160>)
 800100c:	f7ff fefc 	bl	8000e08 <DHT20_crc8>
 8001010:	4603      	mov	r3, r0
 8001012:	70fb      	strb	r3, [r7, #3]
	    if(crc != buf[6]){
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <DHT20_Convert+0x160>)
 8001016:	799b      	ldrb	r3, [r3, #6]
 8001018:	78fa      	ldrb	r2, [r7, #3]
 800101a:	429a      	cmp	r2, r3
 800101c:	d00f      	beq.n	800103e <DHT20_Convert+0x13a>
	      	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!CRC=%s#\r\n", "NOT OK"), 1000);
 800101e:	4a1b      	ldr	r2, [pc, #108]	; (800108c <DHT20_Convert+0x188>)
 8001020:	491b      	ldr	r1, [pc, #108]	; (8001090 <DHT20_Convert+0x18c>)
 8001022:	4814      	ldr	r0, [pc, #80]	; (8001074 <DHT20_Convert+0x170>)
 8001024:	f009 fce8 	bl	800a9f8 <siprintf>
 8001028:	4603      	mov	r3, r0
 800102a:	b29a      	uxth	r2, r3
 800102c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001030:	4910      	ldr	r1, [pc, #64]	; (8001074 <DHT20_Convert+0x170>)
 8001032:	4811      	ldr	r0, [pc, #68]	; (8001078 <DHT20_Convert+0x174>)
 8001034:	f008 fa25 	bl	8009482 <HAL_UART_Transmit>
	    	return DHT20_ERROR_CHECKSUM;
 8001038:	f06f 0309 	mvn.w	r3, #9
 800103c:	e00d      	b.n	800105a <DHT20_Convert+0x156>
	    }
		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!CRC=%s#\r\n", "OK"), 1000);
 800103e:	4a15      	ldr	r2, [pc, #84]	; (8001094 <DHT20_Convert+0x190>)
 8001040:	4913      	ldr	r1, [pc, #76]	; (8001090 <DHT20_Convert+0x18c>)
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <DHT20_Convert+0x170>)
 8001044:	f009 fcd8 	bl	800a9f8 <siprintf>
 8001048:	4603      	mov	r3, r0
 800104a:	b29a      	uxth	r2, r3
 800104c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001050:	4908      	ldr	r1, [pc, #32]	; (8001074 <DHT20_Convert+0x170>)
 8001052:	4809      	ldr	r0, [pc, #36]	; (8001078 <DHT20_Convert+0x174>)
 8001054:	f008 fa15 	bl	8009482 <HAL_UART_Transmit>
	    return DHT20_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000288 	.word	0x20000288
 8001068:	3f190000 	.word	0x3f190000
 800106c:	20000278 	.word	0x20000278
 8001070:	0800cf28 	.word	0x0800cf28
 8001074:	20000010 	.word	0x20000010
 8001078:	20000508 	.word	0x20000508
 800107c:	3f290000 	.word	0x3f290000
 8001080:	40490000 	.word	0x40490000
 8001084:	2000027c 	.word	0x2000027c
 8001088:	0800cf34 	.word	0x0800cf34
 800108c:	0800cf40 	.word	0x0800cf40
 8001090:	0800cf48 	.word	0x0800cf48
 8001094:	0800cf14 	.word	0x0800cf14

08001098 <lcdSendCmd>:
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, SLAVE_ADDRESS_LCD, 1, 100);
	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!Connect=%02X#\r\n", status), 100);
}

void lcdSendCmd (char cmd)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af02      	add	r7, sp, #8
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f023 030f 	bic.w	r3, r3, #15
 80010a8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	f043 030c 	orr.w	r3, r3, #12
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80010c4:	7bbb      	ldrb	r3, [r7, #14]
 80010c6:	f043 030c 	orr.w	r3, r3, #12
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	f043 0308 	orr.w	r3, r3, #8
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80010d8:	f107 0208 	add.w	r2, r7, #8
 80010dc:	2364      	movs	r3, #100	; 0x64
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2304      	movs	r3, #4
 80010e2:	2142      	movs	r1, #66	; 0x42
 80010e4:	4803      	ldr	r0, [pc, #12]	; (80010f4 <lcdSendCmd+0x5c>)
 80010e6:	f003 fcc3 	bl	8004a70 <HAL_I2C_Master_Transmit>
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000350 	.word	0x20000350

080010f8 <lcdSendData>:
        	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!address=%02X#\r\n", address), 100);
        }
    }
}
void lcdSendData(char data)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f023 030f 	bic.w	r3, r3, #15
 8001108:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	011b      	lsls	r3, r3, #4
 800110e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	f043 030d 	orr.w	r3, r3, #13
 8001116:	b2db      	uxtb	r3, r3
 8001118:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	f043 0309 	orr.w	r3, r3, #9
 8001120:	b2db      	uxtb	r3, r3
 8001122:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001124:	7bbb      	ldrb	r3, [r7, #14]
 8001126:	f043 030d 	orr.w	r3, r3, #13
 800112a:	b2db      	uxtb	r3, r3
 800112c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	f043 0309 	orr.w	r3, r3, #9
 8001134:	b2db      	uxtb	r3, r3
 8001136:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, data_t, 4, 1000);
 8001138:	f107 0208 	add.w	r2, r7, #8
 800113c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2304      	movs	r3, #4
 8001144:	2142      	movs	r1, #66	; 0x42
 8001146:	4803      	ldr	r0, [pc, #12]	; (8001154 <lcdSendData+0x5c>)
 8001148:	f003 fc92 	bl	8004a70 <HAL_I2C_Master_Transmit>
}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000350 	.word	0x20000350

08001158 <lcdSetCursor>:
	lcdSendCmd(LCD_CLEARDISPLAY);
	HAL_Delay(2);
}

void lcdSetCursor(int row, int col)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
    switch (row)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <lcdSetCursor+0x18>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d005      	beq.n	800117a <lcdSetCursor+0x22>
 800116e:	e009      	b.n	8001184 <lcdSetCursor+0x2c>
    {
        case 0:
            col |= 0x80;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001176:	603b      	str	r3, [r7, #0]
            break;
 8001178:	e004      	b.n	8001184 <lcdSetCursor+0x2c>
        case 1:
            col |= 0xC0;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001180:	603b      	str	r3, [r7, #0]
            break;
 8001182:	bf00      	nop
    }

    lcdSendCmd (col);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff85 	bl	8001098 <lcdSendCmd>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <lcdInit>:
	displayControl |= LCD_BLINKON;
	lcdSendCmd(LCD_DISPLAYCONTROL | displayControl);
}

void lcdInit (void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800119a:	2032      	movs	r0, #50	; 0x32
 800119c:	f002 fa34 	bl	8003608 <HAL_Delay>
	lcdSendCmd (0x30);
 80011a0:	2030      	movs	r0, #48	; 0x30
 80011a2:	f7ff ff79 	bl	8001098 <lcdSendCmd>
	HAL_Delay(5);  // wait for >4.1ms
 80011a6:	2005      	movs	r0, #5
 80011a8:	f002 fa2e 	bl	8003608 <HAL_Delay>
	lcdSendCmd (0x30);
 80011ac:	2030      	movs	r0, #48	; 0x30
 80011ae:	f7ff ff73 	bl	8001098 <lcdSendCmd>
	HAL_Delay(1);  // wait for >100us
 80011b2:	2001      	movs	r0, #1
 80011b4:	f002 fa28 	bl	8003608 <HAL_Delay>
	lcdSendCmd (0x30);
 80011b8:	2030      	movs	r0, #48	; 0x30
 80011ba:	f7ff ff6d 	bl	8001098 <lcdSendCmd>
	HAL_Delay(10);
 80011be:	200a      	movs	r0, #10
 80011c0:	f002 fa22 	bl	8003608 <HAL_Delay>
	lcdSendCmd (0x20);  // 4bit mode
 80011c4:	2020      	movs	r0, #32
 80011c6:	f7ff ff67 	bl	8001098 <lcdSendCmd>
	HAL_Delay(10);
 80011ca:	200a      	movs	r0, #10
 80011cc:	f002 fa1c 	bl	8003608 <HAL_Delay>

  // dislay initialisation
	lcdSendCmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80011d0:	2028      	movs	r0, #40	; 0x28
 80011d2:	f7ff ff61 	bl	8001098 <lcdSendCmd>
	HAL_Delay(1);
 80011d6:	2001      	movs	r0, #1
 80011d8:	f002 fa16 	bl	8003608 <HAL_Delay>
	lcdSendCmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80011dc:	2008      	movs	r0, #8
 80011de:	f7ff ff5b 	bl	8001098 <lcdSendCmd>
	HAL_Delay(1);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f002 fa10 	bl	8003608 <HAL_Delay>
	lcdSendCmd (0x01);  // clear display
 80011e8:	2001      	movs	r0, #1
 80011ea:	f7ff ff55 	bl	8001098 <lcdSendCmd>
	HAL_Delay(1);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f002 fa0a 	bl	8003608 <HAL_Delay>
	lcdSendCmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80011f4:	2006      	movs	r0, #6
 80011f6:	f7ff ff4f 	bl	8001098 <lcdSendCmd>
	HAL_Delay(1);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f002 fa04 	bl	8003608 <HAL_Delay>
	lcdSendCmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001200:	200c      	movs	r0, #12
 8001202:	f7ff ff49 	bl	8001098 <lcdSendCmd>
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}

0800120a <lcdSendString>:

void lcdSendString (char *str)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
	while (*str) lcdSendData (*str++);
 8001212:	e006      	b.n	8001222 <lcdSendString+0x18>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff6b 	bl	80010f8 <lcdSendData>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f4      	bne.n	8001214 <lcdSendString+0xa>
}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <lcdSendNumber>:

void lcdSendNumber(float number)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	char buffer[8];
	sprintf(buffer,"%f",number);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff f8f3 	bl	8000428 <__aeabi_f2d>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	f107 0008 	add.w	r0, r7, #8
 800124a:	4906      	ldr	r1, [pc, #24]	; (8001264 <lcdSendNumber+0x30>)
 800124c:	f009 fbd4 	bl	800a9f8 <siprintf>
	lcdSendString(buffer);
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ffd8 	bl	800120a <lcdSendString>
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	0800cf7c 	.word	0x0800cf7c

08001268 <Moisture_readValue>:
#include "main.h"

#define MAX_ADC_VALUE 4095
extern UART_HandleTypeDef huart2;
extern ADC_HandleTypeDef hadc1;
void Moisture_readValue(){
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	ADC_Moisture_Value =  HAL_ADC_GetValue(&hadc1);
 800126c:	480e      	ldr	r0, [pc, #56]	; (80012a8 <Moisture_readValue+0x40>)
 800126e:	f002 fb75 	bl	800395c <HAL_ADC_GetValue>
 8001272:	4603      	mov	r3, r0
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <Moisture_readValue+0x44>)
 8001276:	6013      	str	r3, [r2, #0]
	Moisture_convert();
 8001278:	f000 f820 	bl	80012bc <Moisture_convert>
	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!ADC_Value=%lu\r\n", ADC_Moisture_Value), 1000);
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <Moisture_readValue+0x44>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	490b      	ldr	r1, [pc, #44]	; (80012b0 <Moisture_readValue+0x48>)
 8001284:	480b      	ldr	r0, [pc, #44]	; (80012b4 <Moisture_readValue+0x4c>)
 8001286:	f009 fbb7 	bl	800a9f8 <siprintf>
 800128a:	4603      	mov	r3, r0
 800128c:	b29a      	uxth	r2, r3
 800128e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001292:	4908      	ldr	r1, [pc, #32]	; (80012b4 <Moisture_readValue+0x4c>)
 8001294:	4808      	ldr	r0, [pc, #32]	; (80012b8 <Moisture_readValue+0x50>)
 8001296:	f008 f8f4 	bl	8009482 <HAL_UART_Transmit>
	HAL_Delay(3000);
 800129a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800129e:	f002 f9b3 	bl	8003608 <HAL_Delay>
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000320 	.word	0x20000320
 80012ac:	200002d4 	.word	0x200002d4
 80012b0:	0800cf80 	.word	0x0800cf80
 80012b4:	20000010 	.word	0x20000010
 80012b8:	20000508 	.word	0x20000508

080012bc <Moisture_convert>:
void Moisture_convert(){
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	ADC_Moisture_Value =  (ADC_Moisture_Value*100/MAX_ADC_VALUE);
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <Moisture_convert+0x28>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2264      	movs	r2, #100	; 0x64
 80012c6:	fb03 f202 	mul.w	r2, r3, r2
 80012ca:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <Moisture_convert+0x2c>)
 80012cc:	fba3 1302 	umull	r1, r3, r3, r2
 80012d0:	1ad2      	subs	r2, r2, r3
 80012d2:	0852      	lsrs	r2, r2, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	0adb      	lsrs	r3, r3, #11
 80012d8:	4a02      	ldr	r2, [pc, #8]	; (80012e4 <Moisture_convert+0x28>)
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	200002d4 	.word	0x200002d4
 80012e8:	00100101 	.word	0x00100101

080012ec <getKeyProcess>:
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress3s[N0_OF_BUTTONS];
static int buttonState[N0_OF_BUTTONS] = {BUTTON_IS_RELEASED, BUTTON_IS_RELEASED, BUTTON_IS_RELEASED};
static int button_flag[N0_OF_BUTTONS];
void getKeyProcess(int index){// turn on button_flag
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db07      	blt.n	800130a <getKeyProcess+0x1e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	dc04      	bgt.n	800130a <getKeyProcess+0x1e>
		button_flag[index] = 1;
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <getKeyProcess+0x28>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2101      	movs	r1, #1
 8001306:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	200002b0 	.word	0x200002b0

08001318 <get3sFlag>:
// this function turn on flagForButtonPress3s when button is pressed more than 3s
void get3sFlag(int index){
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	db07      	blt.n	8001336 <get3sFlag+0x1e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b02      	cmp	r3, #2
 800132a:	dc04      	bgt.n	8001336 <get3sFlag+0x1e>
			flagForButtonPress3s[index] = 1;
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <get3sFlag+0x28>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
		}
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	200002a0 	.word	0x200002a0

08001344 <get1sFlag>:
void clear3sFlag(int index){
	if(index >= 0 && index < N0_OF_BUTTONS){
			flagForButtonPress3s[index] = 0;
		}
}
void get1sFlag(int index){
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db07      	blt.n	8001362 <get1sFlag+0x1e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b02      	cmp	r3, #2
 8001356:	dc04      	bgt.n	8001362 <get1sFlag+0x1e>
				flag1s[index] = 1;
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <get1sFlag+0x28>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
			}
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	200002a4 	.word	0x200002a4

08001370 <fsm_input_processing>:
void fsm_input_processing(GPIO_PinState buttonBuffer[], int index){
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
	switch(buttonState[index]){
 800137a:	4a55      	ldr	r2, [pc, #340]	; (80014d0 <fsm_input_processing+0x160>)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001382:	2b02      	cmp	r3, #2
 8001384:	d04f      	beq.n	8001426 <fsm_input_processing+0xb6>
 8001386:	2b02      	cmp	r3, #2
 8001388:	f300 8096 	bgt.w	80014b8 <fsm_input_processing+0x148>
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <fsm_input_processing+0x26>
 8001390:	2b01      	cmp	r3, #1
 8001392:	d039      	beq.n	8001408 <fsm_input_processing+0x98>
			flag1s[index] = 0;
			button_flag[index] = 0;
		}
		break;
	default:
		break;
 8001394:	e090      	b.n	80014b8 <fsm_input_processing+0x148>
		if(counterForButtonPress3s[index] < DURATION_FOR_AUTO_INCREASING){
 8001396:	4a4f      	ldr	r2, [pc, #316]	; (80014d4 <fsm_input_processing+0x164>)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800139e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80013a2:	d220      	bcs.n	80013e6 <fsm_input_processing+0x76>
			counterForButtonPress3s[index]++;
 80013a4:	4a4b      	ldr	r2, [pc, #300]	; (80014d4 <fsm_input_processing+0x164>)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ac:	3301      	adds	r3, #1
 80013ae:	b299      	uxth	r1, r3
 80013b0:	4a48      	ldr	r2, [pc, #288]	; (80014d4 <fsm_input_processing+0x164>)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(counterForButtonPress3s[index] == DURATION_FOR_AUTO_INCREASING){
 80013b8:	4a46      	ldr	r2, [pc, #280]	; (80014d4 <fsm_input_processing+0x164>)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013c0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80013c4:	d10f      	bne.n	80013e6 <fsm_input_processing+0x76>
				buttonState[index] = BUTTON_PRESSED_MORE_THAN_3s;
 80013c6:	4a42      	ldr	r2, [pc, #264]	; (80014d0 <fsm_input_processing+0x160>)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	2102      	movs	r1, #2
 80013cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				counterForButtonPress3s[index] = 0;
 80013d0:	4a40      	ldr	r2, [pc, #256]	; (80014d4 <fsm_input_processing+0x164>)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	2100      	movs	r1, #0
 80013d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				getKeyProcess(index);
 80013da:	6838      	ldr	r0, [r7, #0]
 80013dc:	f7ff ff86 	bl	80012ec <getKeyProcess>
				get3sFlag(index);
 80013e0:	6838      	ldr	r0, [r7, #0]
 80013e2:	f7ff ff99 	bl	8001318 <get3sFlag>
		if(buttonBuffer[index] == BUTTON_RELEASED){
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d164      	bne.n	80014bc <fsm_input_processing+0x14c>
			buttonState[index] = BUTTON_IS_RELEASED;
 80013f2:	4a37      	ldr	r2, [pc, #220]	; (80014d0 <fsm_input_processing+0x160>)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	2101      	movs	r1, #1
 80013f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress3s[index] = 0;
 80013fc:	4a35      	ldr	r2, [pc, #212]	; (80014d4 <fsm_input_processing+0x164>)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	2100      	movs	r1, #0
 8001402:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		break;
 8001406:	e059      	b.n	80014bc <fsm_input_processing+0x14c>
		if(buttonBuffer[index] == BUTTON_PRESSED){
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d155      	bne.n	80014c0 <fsm_input_processing+0x150>
			buttonState[index] = BUTTON_IS_PRESSED;
 8001414:	4a2e      	ldr	r2, [pc, #184]	; (80014d0 <fsm_input_processing+0x160>)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	2100      	movs	r1, #0
 800141a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			getKeyProcess(index);
 800141e:	6838      	ldr	r0, [r7, #0]
 8001420:	f7ff ff64 	bl	80012ec <getKeyProcess>
		break;
 8001424:	e04c      	b.n	80014c0 <fsm_input_processing+0x150>
		if(counterForButtonPress3s[index] < DURATION_FOR_MORE_THAN_3s ){
 8001426:	4a2b      	ldr	r2, [pc, #172]	; (80014d4 <fsm_input_processing+0x164>)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800142e:	2b63      	cmp	r3, #99	; 0x63
 8001430:	d822      	bhi.n	8001478 <fsm_input_processing+0x108>
					counterForButtonPress3s[index]++;
 8001432:	4a28      	ldr	r2, [pc, #160]	; (80014d4 <fsm_input_processing+0x164>)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800143a:	3301      	adds	r3, #1
 800143c:	b299      	uxth	r1, r3
 800143e:	4a25      	ldr	r2, [pc, #148]	; (80014d4 <fsm_input_processing+0x164>)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(counterForButtonPress3s[index] == DURATION_FOR_MORE_THAN_3s){
 8001446:	4a23      	ldr	r2, [pc, #140]	; (80014d4 <fsm_input_processing+0x164>)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800144e:	2b64      	cmp	r3, #100	; 0x64
 8001450:	d112      	bne.n	8001478 <fsm_input_processing+0x108>
						buttonState[index] = BUTTON_PRESSED_MORE_THAN_3s;
 8001452:	4a1f      	ldr	r2, [pc, #124]	; (80014d0 <fsm_input_processing+0x160>)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2102      	movs	r1, #2
 8001458:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						counterForButtonPress3s[index] = 0;
 800145c:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <fsm_input_processing+0x164>)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	2100      	movs	r1, #0
 8001462:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						get1sFlag(index);
 8001466:	6838      	ldr	r0, [r7, #0]
 8001468:	f7ff ff6c 	bl	8001344 <get1sFlag>
						getKeyProcess(index);
 800146c:	6838      	ldr	r0, [r7, #0]
 800146e:	f7ff ff3d 	bl	80012ec <getKeyProcess>
						get3sFlag(index);
 8001472:	6838      	ldr	r0, [r7, #0]
 8001474:	f7ff ff50 	bl	8001318 <get3sFlag>
		if(buttonBuffer[index] == BUTTON_RELEASED){
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d11f      	bne.n	80014c4 <fsm_input_processing+0x154>
			buttonState[index] = BUTTON_IS_RELEASED;
 8001484:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <fsm_input_processing+0x160>)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2101      	movs	r1, #1
 800148a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress3s[index] = 0;
 800148e:	4a11      	ldr	r2, [pc, #68]	; (80014d4 <fsm_input_processing+0x164>)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	2100      	movs	r1, #0
 8001494:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress3s[index] = 0;
 8001498:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <fsm_input_processing+0x168>)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	4413      	add	r3, r2
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
			flag1s[index] = 0;
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <fsm_input_processing+0x16c>)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
			button_flag[index] = 0;
 80014ac:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <fsm_input_processing+0x170>)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	2100      	movs	r1, #0
 80014b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		break;
 80014b6:	e005      	b.n	80014c4 <fsm_input_processing+0x154>
		break;
 80014b8:	bf00      	nop
 80014ba:	e004      	b.n	80014c6 <fsm_input_processing+0x156>
		break;
 80014bc:	bf00      	nop
 80014be:	e002      	b.n	80014c6 <fsm_input_processing+0x156>
		break;
 80014c0:	bf00      	nop
 80014c2:	e000      	b.n	80014c6 <fsm_input_processing+0x156>
		break;
 80014c4:	bf00      	nop
	}
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000004 	.word	0x20000004
 80014d4:	200002a8 	.word	0x200002a8
 80014d8:	200002a0 	.word	0x200002a0
 80014dc:	200002a4 	.word	0x200002a4
 80014e0:	200002b0 	.word	0x200002b0

080014e4 <button_reading>:
void button_reading(void){
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i++){
 80014ea:	2300      	movs	r3, #0
 80014ec:	71fb      	strb	r3, [r7, #7]
 80014ee:	e052      	b.n	8001596 <button_reading+0xb2>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 80014f0:	79fa      	ldrb	r2, [r7, #7]
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	492c      	ldr	r1, [pc, #176]	; (80015a8 <button_reading+0xc4>)
 80014f6:	5c89      	ldrb	r1, [r1, r2]
 80014f8:	4a2c      	ldr	r2, [pc, #176]	; (80015ac <button_reading+0xc8>)
 80014fa:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80014fc:	79fa      	ldrb	r2, [r7, #7]
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	492b      	ldr	r1, [pc, #172]	; (80015b0 <button_reading+0xcc>)
 8001502:	5c89      	ldrb	r1, [r1, r2]
 8001504:	4a28      	ldr	r2, [pc, #160]	; (80015a8 <button_reading+0xc4>)
 8001506:	54d1      	strb	r1, [r2, r3]
		// Chosing Which button is pressed.
		switch(i){
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d01a      	beq.n	8001544 <button_reading+0x60>
 800150e:	2b02      	cmp	r3, #2
 8001510:	dc22      	bgt.n	8001558 <button_reading+0x74>
 8001512:	2b00      	cmp	r3, #0
 8001514:	d002      	beq.n	800151c <button_reading+0x38>
 8001516:	2b01      	cmp	r3, #1
 8001518:	d00a      	beq.n	8001530 <button_reading+0x4c>
			break;
		case 2://  read signal from button0
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
			break;
		default:
			break;
 800151a:	e01d      	b.n	8001558 <button_reading+0x74>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button0_GPIO_Port, Button0_Pin);
 800151c:	79fc      	ldrb	r4, [r7, #7]
 800151e:	2101      	movs	r1, #1
 8001520:	4824      	ldr	r0, [pc, #144]	; (80015b4 <button_reading+0xd0>)
 8001522:	f003 f8fb 	bl	800471c <HAL_GPIO_ReadPin>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <button_reading+0xcc>)
 800152c:	551a      	strb	r2, [r3, r4]
			break;
 800152e:	e014      	b.n	800155a <button_reading+0x76>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8001530:	79fc      	ldrb	r4, [r7, #7]
 8001532:	2102      	movs	r1, #2
 8001534:	481f      	ldr	r0, [pc, #124]	; (80015b4 <button_reading+0xd0>)
 8001536:	f003 f8f1 	bl	800471c <HAL_GPIO_ReadPin>
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <button_reading+0xcc>)
 8001540:	551a      	strb	r2, [r3, r4]
			break;
 8001542:	e00a      	b.n	800155a <button_reading+0x76>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8001544:	79fc      	ldrb	r4, [r7, #7]
 8001546:	2104      	movs	r1, #4
 8001548:	481a      	ldr	r0, [pc, #104]	; (80015b4 <button_reading+0xd0>)
 800154a:	f003 f8e7 	bl	800471c <HAL_GPIO_ReadPin>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <button_reading+0xcc>)
 8001554:	551a      	strb	r2, [r3, r4]
			break;
 8001556:	e000      	b.n	800155a <button_reading+0x76>
			break;
 8001558:	bf00      	nop
		}
		if((debounceButtonBuffer3[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer2[i] == debounceButtonBuffer1[i])){
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	4a13      	ldr	r2, [pc, #76]	; (80015ac <button_reading+0xc8>)
 800155e:	5cd2      	ldrb	r2, [r2, r3]
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	4911      	ldr	r1, [pc, #68]	; (80015a8 <button_reading+0xc4>)
 8001564:	5ccb      	ldrb	r3, [r1, r3]
 8001566:	429a      	cmp	r2, r3
 8001568:	d112      	bne.n	8001590 <button_reading+0xac>
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <button_reading+0xc4>)
 800156e:	5cd2      	ldrb	r2, [r2, r3]
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	490f      	ldr	r1, [pc, #60]	; (80015b0 <button_reading+0xcc>)
 8001574:	5ccb      	ldrb	r3, [r1, r3]
 8001576:	429a      	cmp	r2, r3
 8001578:	d10a      	bne.n	8001590 <button_reading+0xac>
			buttonBuffer[i] = debounceButtonBuffer3[i];
 800157a:	79fa      	ldrb	r2, [r7, #7]
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	490b      	ldr	r1, [pc, #44]	; (80015ac <button_reading+0xc8>)
 8001580:	5c89      	ldrb	r1, [r1, r2]
 8001582:	4a0d      	ldr	r2, [pc, #52]	; (80015b8 <button_reading+0xd4>)
 8001584:	54d1      	strb	r1, [r2, r3]
			fsm_input_processing(buttonBuffer,i);
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	4619      	mov	r1, r3
 800158a:	480b      	ldr	r0, [pc, #44]	; (80015b8 <button_reading+0xd4>)
 800158c:	f7ff fef0 	bl	8001370 <fsm_input_processing>
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i++){
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	3301      	adds	r3, #1
 8001594:	71fb      	strb	r3, [r7, #7]
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d9a9      	bls.n	80014f0 <button_reading+0xc>
		}

	}
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd90      	pop	{r4, r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000298 	.word	0x20000298
 80015ac:	2000029c 	.word	0x2000029c
 80015b0:	20000294 	.word	0x20000294
 80015b4:	40010c00 	.word	0x40010c00
 80015b8:	20000290 	.word	0x20000290

080015bc <is_button_pressed>:


int is_button_pressed(uint8_t index){
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <is_button_pressed+0x14>
 80015cc:	2300      	movs	r3, #0
 80015ce:	e00d      	b.n	80015ec <is_button_pressed+0x30>
	if(button_flag[index] == 1){
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <is_button_pressed+0x3c>)
 80015d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d106      	bne.n	80015ea <is_button_pressed+0x2e>
		//set button flag value = 0
		button_flag[index] = 0;
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	4a06      	ldr	r2, [pc, #24]	; (80015f8 <is_button_pressed+0x3c>)
 80015e0:	2100      	movs	r1, #0
 80015e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <is_button_pressed+0x30>
	}
	return 0;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	200002b0 	.word	0x200002b0

080015fc <ledMode>:
#include <stdio.h>
#include "stm32f1xx_hal_gpio.h"

extern UART_HandleTypeDef huart2;

void ledMode(GPIO_TypeDef *GPIOx, uint16_t pin ){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
	    assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	    /*Check pin parameter*/
	    assert_param(IS_GPIO_PIN(GPIO_PIN[pin]));

	    /* GPIO Ports Clock Enable */
	    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001608:	4b28      	ldr	r3, [pc, #160]	; (80016ac <ledMode+0xb0>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a27      	ldr	r2, [pc, #156]	; (80016ac <ledMode+0xb0>)
 800160e:	f043 0310 	orr.w	r3, r3, #16
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b25      	ldr	r3, [pc, #148]	; (80016ac <ledMode+0xb0>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0310 	and.w	r3, r3, #16
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	697b      	ldr	r3, [r7, #20]
	    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001620:	4b22      	ldr	r3, [pc, #136]	; (80016ac <ledMode+0xb0>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a21      	ldr	r2, [pc, #132]	; (80016ac <ledMode+0xb0>)
 8001626:	f043 0320 	orr.w	r3, r3, #32
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <ledMode+0xb0>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0320 	and.w	r3, r3, #32
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	693b      	ldr	r3, [r7, #16]
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001638:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <ledMode+0xb0>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <ledMode+0xb0>)
 800163e:	f043 0304 	orr.w	r3, r3, #4
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <ledMode+0xb0>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001650:	4b16      	ldr	r3, [pc, #88]	; (80016ac <ledMode+0xb0>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a15      	ldr	r2, [pc, #84]	; (80016ac <ledMode+0xb0>)
 8001656:	f043 0308 	orr.w	r3, r3, #8
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <ledMode+0xb0>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]

	    /*Configure GPIO pin Output Level*/
	    HAL_GPIO_WritePin(GPIOx, GPIO_PIN[pin], RESET);
 8001668:	887b      	ldrh	r3, [r7, #2]
 800166a:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <ledMode+0xb4>)
 800166c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001670:	2200      	movs	r2, #0
 8001672:	4619      	mov	r1, r3
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f003 f868 	bl	800474a <HAL_GPIO_WritePin>

	    /*Configure GPIO pin*/
	    GPIO_InitStruct.Pin = GPIO_PIN[pin]; // Assigns the value of the pin variable to the Pin field in the GPIO_InitStruct structure
 800167a:	887b      	ldrh	r3, [r7, #2]
 800167c:	4a0c      	ldr	r2, [pc, #48]	; (80016b0 <ledMode+0xb4>)
 800167e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001682:	461a      	mov	r2, r3
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <ledMode+0xb8>)
 8001686:	601a      	str	r2, [r3, #0]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;// Sets the mode of the GPIO pin as output with push-pull configuratio
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <ledMode+0xb8>)
 800168a:	2201      	movs	r2, #1
 800168c:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;// Sets the pull state of the GPIO pin to no pull
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <ledMode+0xb8>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;//Sets the speed of the GPIO pin to low-frequency speed
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <ledMode+0xb8>)
 8001696:	2202      	movs	r2, #2
 8001698:	60da      	str	r2, [r3, #12]
	    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);//Initializes and configures the GPIO pin
 800169a:	4906      	ldr	r1, [pc, #24]	; (80016b4 <ledMode+0xb8>)
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f002 feb9 	bl	8004414 <HAL_GPIO_Init>
}
 80016a2:	bf00      	nop
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000
 80016b0:	20000020 	.word	0x20000020
 80016b4:	200002bc 	.word	0x200002bc

080016b8 <pwmMode>:
	  /* DMA1_Channel2_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
	  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);

 }
void pwmMode(TIM_HandleTypeDef *htim, uint8_t indexTim, uint8_t indexChannel, uint32_t prescaler, uint32_t period){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b094      	sub	sp, #80	; 0x50
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	460b      	mov	r3, r1
 80016c4:	72fb      	strb	r3, [r7, #11]
 80016c6:	4613      	mov	r3, r2
 80016c8:	72bb      	strb	r3, [r7, #10]
	if((indexTim < 1 || indexTim > 4) || (indexChannel < 1 || indexChannel > 4)){
 80016ca:	7afb      	ldrb	r3, [r7, #11]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d008      	beq.n	80016e2 <pwmMode+0x2a>
 80016d0:	7afb      	ldrb	r3, [r7, #11]
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d805      	bhi.n	80016e2 <pwmMode+0x2a>
 80016d6:	7abb      	ldrb	r3, [r7, #10]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <pwmMode+0x2a>
 80016dc:	7abb      	ldrb	r3, [r7, #10]
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d901      	bls.n	80016e6 <pwmMode+0x2e>
 	    Error_Handler();
 80016e2:	f000 fea0 	bl	8002426 <Error_Handler>
	}
	indexTim     -= 1;
 80016e6:	7afb      	ldrb	r3, [r7, #11]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	72fb      	strb	r3, [r7, #11]
	indexChannel -=1;
 80016ec:	7abb      	ldrb	r3, [r7, #10]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	72bb      	strb	r3, [r7, #10]

      TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001700:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 	  TIM_OC_InitTypeDef sConfigOC = {0};
 800170a:	f107 0318 	add.w	r3, r7, #24
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]
 800171a:	615a      	str	r2, [r3, #20]
 800171c:	619a      	str	r2, [r3, #24]

      htim->Instance = arrayTim[indexTim];
 800171e:	7afb      	ldrb	r3, [r7, #11]
 8001720:	4aa0      	ldr	r2, [pc, #640]	; (80019a4 <pwmMode+0x2ec>)
 8001722:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	601a      	str	r2, [r3, #0]
      htim->Init.Prescaler = prescaler;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	605a      	str	r2, [r3, #4]
      htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
      htim->Init.Period = period;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800173a:	60da      	str	r2, [r3, #12]
      htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
      htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
      if (HAL_TIM_Base_Init(htim) != HAL_OK)
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f006 fb5b 	bl	8007e04 <HAL_TIM_Base_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <pwmMode+0xa0>
      {
    	  		Error_Handler();
 8001754:	f000 fe67 	bl	8002426 <Error_Handler>
      }
     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175c:	63fb      	str	r3, [r7, #60]	; 0x3c
     if (HAL_TIM_ConfigClockSource(htim, &sClockSourceConfig) != HAL_OK)
 800175e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001762:	4619      	mov	r1, r3
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f007 f91b 	bl	80089a0 <HAL_TIM_ConfigClockSource>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <pwmMode+0xbc>
    	 {
    	  		Error_Handler();
 8001770:	f000 fe59 	bl	8002426 <Error_Handler>
    	 }
    if (HAL_TIM_PWM_Init(htim) != HAL_OK)
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f006 fbe7 	bl	8007f48 <HAL_TIM_PWM_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <pwmMode+0xcc>
    	 {
    	  		Error_Handler();
 8001780:	f000 fe51 	bl	8002426 <Error_Handler>
    	  }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	637b      	str	r3, [r7, #52]	; 0x34
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig) != HAL_OK)
 800178c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001790:	4619      	mov	r1, r3
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f007 fd64 	bl	8009260 <HAL_TIMEx_MasterConfigSynchronization>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <pwmMode+0xea>
    	{
    	  	Error_Handler();
 800179e:	f000 fe42 	bl	8002426 <Error_Handler>
    	}
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a2:	2360      	movs	r3, #96	; 0x60
 80017a4:	61bb      	str	r3, [r7, #24]
    sConfigOC.Pulse = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	62bb      	str	r3, [r7, #40]	; 0x28

       if(arrayTim[indexTim] == TIM3){
 80017b2:	7afb      	ldrb	r3, [r7, #11]
 80017b4:	4a7b      	ldr	r2, [pc, #492]	; (80019a4 <pwmMode+0x2ec>)
 80017b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ba:	4a7b      	ldr	r2, [pc, #492]	; (80019a8 <pwmMode+0x2f0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	f040 80bf 	bne.w	8001940 <pwmMode+0x288>
 		  if (HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, arrayChannel[indexChannel]) != HAL_OK)
 80017c2:	7abb      	ldrb	r3, [r7, #10]
 80017c4:	4a79      	ldr	r2, [pc, #484]	; (80019ac <pwmMode+0x2f4>)
 80017c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017ca:	f107 0318 	add.w	r3, r7, #24
 80017ce:	4619      	mov	r1, r3
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f007 f823 	bl	800881c <HAL_TIM_PWM_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <pwmMode+0x128>
 		 	  {
 		 	    Error_Handler();
 80017dc:	f000 fe23 	bl	8002426 <Error_Handler>
 		 	  }
 	 	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e0:	4b73      	ldr	r3, [pc, #460]	; (80019b0 <pwmMode+0x2f8>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a72      	ldr	r2, [pc, #456]	; (80019b0 <pwmMode+0x2f8>)
 80017e6:	f043 0310 	orr.w	r3, r3, #16
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b70      	ldr	r3, [pc, #448]	; (80019b0 <pwmMode+0x2f8>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	697b      	ldr	r3, [r7, #20]
 	 	  switch (indexChannel) {
 80017f8:	7abb      	ldrb	r3, [r7, #10]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d870      	bhi.n	80018e0 <pwmMode+0x228>
 80017fe:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <pwmMode+0x14c>)
 8001800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001804:	08001815 	.word	0x08001815
 8001808:	08001847 	.word	0x08001847
 800180c:	08001879 	.word	0x08001879
 8001810:	080018ad 	.word	0x080018ad
			case 0: //CH1 GPIO
				if(gpioPWMFlag3 == 0){
 8001814:	4b67      	ldr	r3, [pc, #412]	; (80019b4 <pwmMode+0x2fc>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d103      	bne.n	8001824 <pwmMode+0x16c>
					GPIO_PWM_InitStruct[2].Pin = GPIO_PIN_6;
 800181c:	4b66      	ldr	r3, [pc, #408]	; (80019b8 <pwmMode+0x300>)
 800181e:	2240      	movs	r2, #64	; 0x40
 8001820:	621a      	str	r2, [r3, #32]
 8001822:	e005      	b.n	8001830 <pwmMode+0x178>
				}
				else{
					GPIO_PWM_InitStruct[2].Pin |= GPIO_PIN_6;
 8001824:	4b64      	ldr	r3, [pc, #400]	; (80019b8 <pwmMode+0x300>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800182c:	4a62      	ldr	r2, [pc, #392]	; (80019b8 <pwmMode+0x300>)
 800182e:	6213      	str	r3, [r2, #32]
				}
				gpioPWMFlag3++;
 8001830:	4b60      	ldr	r3, [pc, #384]	; (80019b4 <pwmMode+0x2fc>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	3301      	adds	r3, #1
 8001836:	b2da      	uxtb	r2, r3
 8001838:	4b5e      	ldr	r3, [pc, #376]	; (80019b4 <pwmMode+0x2fc>)
 800183a:	701a      	strb	r2, [r3, #0]
				   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 800183c:	2100      	movs	r1, #0
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f006 fbda 	bl	8007ff8 <HAL_TIM_PWM_Start>
				break;
 8001844:	e04d      	b.n	80018e2 <pwmMode+0x22a>
			case 1://CH2
				if(gpioPWMFlag3 == 0){
 8001846:	4b5b      	ldr	r3, [pc, #364]	; (80019b4 <pwmMode+0x2fc>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d103      	bne.n	8001856 <pwmMode+0x19e>
					GPIO_PWM_InitStruct[2].Pin = GPIO_PIN_7;
 800184e:	4b5a      	ldr	r3, [pc, #360]	; (80019b8 <pwmMode+0x300>)
 8001850:	2280      	movs	r2, #128	; 0x80
 8001852:	621a      	str	r2, [r3, #32]
 8001854:	e005      	b.n	8001862 <pwmMode+0x1aa>
				}
				else{
					GPIO_PWM_InitStruct[2].Pin |= GPIO_PIN_7;
 8001856:	4b58      	ldr	r3, [pc, #352]	; (80019b8 <pwmMode+0x300>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800185e:	4a56      	ldr	r2, [pc, #344]	; (80019b8 <pwmMode+0x300>)
 8001860:	6213      	str	r3, [r2, #32]
				}
					gpioPWMFlag3++;
 8001862:	4b54      	ldr	r3, [pc, #336]	; (80019b4 <pwmMode+0x2fc>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	3301      	adds	r3, #1
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4b52      	ldr	r3, [pc, #328]	; (80019b4 <pwmMode+0x2fc>)
 800186c:	701a      	strb	r2, [r3, #0]
				  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 800186e:	2104      	movs	r1, #4
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f006 fbc1 	bl	8007ff8 <HAL_TIM_PWM_Start>
				break;
 8001876:	e034      	b.n	80018e2 <pwmMode+0x22a>
			case 2:
				if(gpioPWMFlag3 == 0){
 8001878:	4b4e      	ldr	r3, [pc, #312]	; (80019b4 <pwmMode+0x2fc>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d104      	bne.n	800188a <pwmMode+0x1d2>
					GPIO_PWM_InitStruct[2].Pin = GPIO_PIN_8;
 8001880:	4b4d      	ldr	r3, [pc, #308]	; (80019b8 <pwmMode+0x300>)
 8001882:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001886:	621a      	str	r2, [r3, #32]
 8001888:	e005      	b.n	8001896 <pwmMode+0x1de>
				}
				else{
					GPIO_PWM_InitStruct[2].Pin |= GPIO_PIN_8;
 800188a:	4b4b      	ldr	r3, [pc, #300]	; (80019b8 <pwmMode+0x300>)
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001892:	4a49      	ldr	r2, [pc, #292]	; (80019b8 <pwmMode+0x300>)
 8001894:	6213      	str	r3, [r2, #32]
				}
					gpioPWMFlag3++;
 8001896:	4b47      	ldr	r3, [pc, #284]	; (80019b4 <pwmMode+0x2fc>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4b45      	ldr	r3, [pc, #276]	; (80019b4 <pwmMode+0x2fc>)
 80018a0:	701a      	strb	r2, [r3, #0]
				  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 80018a2:	2108      	movs	r1, #8
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f006 fba7 	bl	8007ff8 <HAL_TIM_PWM_Start>
				break;
 80018aa:	e01a      	b.n	80018e2 <pwmMode+0x22a>
			case 3:
				if(gpioPWMFlag3 == 0){
 80018ac:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <pwmMode+0x2fc>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d104      	bne.n	80018be <pwmMode+0x206>
					GPIO_PWM_InitStruct[2].Pin = GPIO_PIN_9;
 80018b4:	4b40      	ldr	r3, [pc, #256]	; (80019b8 <pwmMode+0x300>)
 80018b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ba:	621a      	str	r2, [r3, #32]
 80018bc:	e005      	b.n	80018ca <pwmMode+0x212>
				}
				else{
					GPIO_PWM_InitStruct[2].Pin |= GPIO_PIN_9;
 80018be:	4b3e      	ldr	r3, [pc, #248]	; (80019b8 <pwmMode+0x300>)
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018c6:	4a3c      	ldr	r2, [pc, #240]	; (80019b8 <pwmMode+0x300>)
 80018c8:	6213      	str	r3, [r2, #32]
				}
				  gpioPWMFlag3++;
 80018ca:	4b3a      	ldr	r3, [pc, #232]	; (80019b4 <pwmMode+0x2fc>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4b38      	ldr	r3, [pc, #224]	; (80019b4 <pwmMode+0x2fc>)
 80018d4:	701a      	strb	r2, [r3, #0]
				  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 80018d6:	210c      	movs	r1, #12
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f006 fb8d 	bl	8007ff8 <HAL_TIM_PWM_Start>
				break;
 80018de:	e000      	b.n	80018e2 <pwmMode+0x22a>
			default:
				break;
 80018e0:	bf00      	nop
		}
 	 	GPIO_PWM_InitStruct[2].Mode = GPIO_MODE_AF_PP;
 80018e2:	4b35      	ldr	r3, [pc, #212]	; (80019b8 <pwmMode+0x300>)
 80018e4:	2202      	movs	r2, #2
 80018e6:	625a      	str	r2, [r3, #36]	; 0x24
 	 	GPIO_PWM_InitStruct[2].Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	4b33      	ldr	r3, [pc, #204]	; (80019b8 <pwmMode+0x300>)
 80018ea:	2202      	movs	r2, #2
 80018ec:	62da      	str	r2, [r3, #44]	; 0x2c
 	 	HAL_GPIO_Init(GPIOC, &GPIO_PWM_InitStruct[2]);
 80018ee:	4933      	ldr	r1, [pc, #204]	; (80019bc <pwmMode+0x304>)
 80018f0:	4833      	ldr	r0, [pc, #204]	; (80019c0 <pwmMode+0x308>)
 80018f2:	f002 fd8f 	bl	8004414 <HAL_GPIO_Init>
 	 	__HAL_AFIO_REMAP_TIM3_ENABLE();
 80018f6:	4b33      	ldr	r3, [pc, #204]	; (80019c4 <pwmMode+0x30c>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018fe:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001906:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800190a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800190c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800190e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001914:	4a2b      	ldr	r2, [pc, #172]	; (80019c4 <pwmMode+0x30c>)
 8001916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001918:	6053      	str	r3, [r2, #4]

  		  HAL_TIM_Base_Start_IT(htim);
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f006 fac2 	bl	8007ea4 <HAL_TIM_Base_Start_IT>
  		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "GPIO_PWM=%04X\r\n", GPIO_PWM_InitStruct[2].Pin), 1000);
 8001920:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <pwmMode+0x300>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	461a      	mov	r2, r3
 8001926:	4928      	ldr	r1, [pc, #160]	; (80019c8 <pwmMode+0x310>)
 8001928:	4828      	ldr	r0, [pc, #160]	; (80019cc <pwmMode+0x314>)
 800192a:	f009 f865 	bl	800a9f8 <siprintf>
 800192e:	4603      	mov	r3, r0
 8001930:	b29a      	uxth	r2, r3
 8001932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001936:	4925      	ldr	r1, [pc, #148]	; (80019cc <pwmMode+0x314>)
 8001938:	4825      	ldr	r0, [pc, #148]	; (80019d0 <pwmMode+0x318>)
 800193a:	f007 fda2 	bl	8009482 <HAL_UART_Transmit>
 	 	 	GPIO_PWM_InitStruct[3].Speed = GPIO_SPEED_FREQ_LOW;
 	 	 	HAL_GPIO_Init(GPIOB, &GPIO_PWM_InitStruct[3]);
 	  		HAL_TIM_Base_Start_IT(htim);
 	  		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "GPIO_PWM=%04X\r\n", GPIO_PWM_InitStruct[3].Pin), 1000);
 	  }
}
 800193e:	e0cc      	b.n	8001ada <pwmMode+0x422>
 	  else if(arrayTim[indexTim] == TIM3){
 8001940:	7afb      	ldrb	r3, [r7, #11]
 8001942:	4a18      	ldr	r2, [pc, #96]	; (80019a4 <pwmMode+0x2ec>)
 8001944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001948:	4a17      	ldr	r2, [pc, #92]	; (80019a8 <pwmMode+0x2f0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	f040 80c5 	bne.w	8001ada <pwmMode+0x422>
 		  if (HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, arrayChannel[indexChannel]) != HAL_OK)
 8001950:	7abb      	ldrb	r3, [r7, #10]
 8001952:	4a16      	ldr	r2, [pc, #88]	; (80019ac <pwmMode+0x2f4>)
 8001954:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001958:	f107 0318 	add.w	r3, r7, #24
 800195c:	4619      	mov	r1, r3
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f006 ff5c 	bl	800881c <HAL_TIM_PWM_ConfigChannel>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <pwmMode+0x2b6>
 		 	    Error_Handler();
 800196a:	f000 fd5c 	bl	8002426 <Error_Handler>
 	 	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <pwmMode+0x2f8>)
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	4a0f      	ldr	r2, [pc, #60]	; (80019b0 <pwmMode+0x2f8>)
 8001974:	f043 0308 	orr.w	r3, r3, #8
 8001978:	6193      	str	r3, [r2, #24]
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <pwmMode+0x2f8>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]
 	 	  switch (indexChannel) {
 8001986:	7abb      	ldrb	r3, [r7, #10]
 8001988:	2b03      	cmp	r3, #3
 800198a:	f200 8089 	bhi.w	8001aa0 <pwmMode+0x3e8>
 800198e:	a201      	add	r2, pc, #4	; (adr r2, 8001994 <pwmMode+0x2dc>)
 8001990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001994:	080019d5 	.word	0x080019d5
 8001998:	08001a07 	.word	0x08001a07
 800199c:	08001a39 	.word	0x08001a39
 80019a0:	08001a6d 	.word	0x08001a6d
 80019a4:	20000040 	.word	0x20000040
 80019a8:	40000400 	.word	0x40000400
 80019ac:	20000050 	.word	0x20000050
 80019b0:	40021000 	.word	0x40021000
 80019b4:	200002d8 	.word	0x200002d8
 80019b8:	200002dc 	.word	0x200002dc
 80019bc:	200002fc 	.word	0x200002fc
 80019c0:	40011000 	.word	0x40011000
 80019c4:	40010000 	.word	0x40010000
 80019c8:	0800cf94 	.word	0x0800cf94
 80019cc:	20000010 	.word	0x20000010
 80019d0:	20000508 	.word	0x20000508
				if(gpioPWMFlag4 == 0){
 80019d4:	4b43      	ldr	r3, [pc, #268]	; (8001ae4 <pwmMode+0x42c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d103      	bne.n	80019e4 <pwmMode+0x32c>
					GPIO_PWM_InitStruct[3].Pin = GPIO_PIN_6;
 80019dc:	4b42      	ldr	r3, [pc, #264]	; (8001ae8 <pwmMode+0x430>)
 80019de:	2240      	movs	r2, #64	; 0x40
 80019e0:	631a      	str	r2, [r3, #48]	; 0x30
 80019e2:	e005      	b.n	80019f0 <pwmMode+0x338>
					GPIO_PWM_InitStruct[3].Pin |= GPIO_PIN_6;
 80019e4:	4b40      	ldr	r3, [pc, #256]	; (8001ae8 <pwmMode+0x430>)
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ec:	4a3e      	ldr	r2, [pc, #248]	; (8001ae8 <pwmMode+0x430>)
 80019ee:	6313      	str	r3, [r2, #48]	; 0x30
				   gpioPWMFlag4++;
 80019f0:	4b3c      	ldr	r3, [pc, #240]	; (8001ae4 <pwmMode+0x42c>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	3301      	adds	r3, #1
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4b3a      	ldr	r3, [pc, #232]	; (8001ae4 <pwmMode+0x42c>)
 80019fa:	701a      	strb	r2, [r3, #0]
				   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 80019fc:	2100      	movs	r1, #0
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f006 fafa 	bl	8007ff8 <HAL_TIM_PWM_Start>
				break;
 8001a04:	e04d      	b.n	8001aa2 <pwmMode+0x3ea>
				if(gpioPWMFlag4 == 0){
 8001a06:	4b37      	ldr	r3, [pc, #220]	; (8001ae4 <pwmMode+0x42c>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d103      	bne.n	8001a16 <pwmMode+0x35e>
					GPIO_PWM_InitStruct[3].Pin = GPIO_PIN_7;
 8001a0e:	4b36      	ldr	r3, [pc, #216]	; (8001ae8 <pwmMode+0x430>)
 8001a10:	2280      	movs	r2, #128	; 0x80
 8001a12:	631a      	str	r2, [r3, #48]	; 0x30
 8001a14:	e005      	b.n	8001a22 <pwmMode+0x36a>
					GPIO_PWM_InitStruct[3].Pin |= GPIO_PIN_7;
 8001a16:	4b34      	ldr	r3, [pc, #208]	; (8001ae8 <pwmMode+0x430>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a1e:	4a32      	ldr	r2, [pc, #200]	; (8001ae8 <pwmMode+0x430>)
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
				   gpioPWMFlag4++;
 8001a22:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <pwmMode+0x42c>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	3301      	adds	r3, #1
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ae4 <pwmMode+0x42c>)
 8001a2c:	701a      	strb	r2, [r3, #0]
				   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 8001a2e:	2104      	movs	r1, #4
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f006 fae1 	bl	8007ff8 <HAL_TIM_PWM_Start>
				break;
 8001a36:	e034      	b.n	8001aa2 <pwmMode+0x3ea>
				if(gpioPWMFlag4 == 0){
 8001a38:	4b2a      	ldr	r3, [pc, #168]	; (8001ae4 <pwmMode+0x42c>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d104      	bne.n	8001a4a <pwmMode+0x392>
						GPIO_PWM_InitStruct[3].Pin = GPIO_PIN_8;
 8001a40:	4b29      	ldr	r3, [pc, #164]	; (8001ae8 <pwmMode+0x430>)
 8001a42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a46:	631a      	str	r2, [r3, #48]	; 0x30
 8001a48:	e005      	b.n	8001a56 <pwmMode+0x39e>
						GPIO_PWM_InitStruct[3].Pin |= GPIO_PIN_8;
 8001a4a:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <pwmMode+0x430>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a52:	4a25      	ldr	r2, [pc, #148]	; (8001ae8 <pwmMode+0x430>)
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
				   gpioPWMFlag4++;
 8001a56:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <pwmMode+0x42c>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <pwmMode+0x42c>)
 8001a60:	701a      	strb	r2, [r3, #0]
				   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8001a62:	2108      	movs	r1, #8
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f006 fac7 	bl	8007ff8 <HAL_TIM_PWM_Start>
				break;
 8001a6a:	e01a      	b.n	8001aa2 <pwmMode+0x3ea>
				if(gpioPWMFlag4 == 0){
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <pwmMode+0x42c>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d104      	bne.n	8001a7e <pwmMode+0x3c6>
						GPIO_PWM_InitStruct[3].Pin = GPIO_PIN_9;
 8001a74:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <pwmMode+0x430>)
 8001a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a7a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a7c:	e005      	b.n	8001a8a <pwmMode+0x3d2>
						GPIO_PWM_InitStruct[3].Pin |= GPIO_PIN_9;
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <pwmMode+0x430>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a86:	4a18      	ldr	r2, [pc, #96]	; (8001ae8 <pwmMode+0x430>)
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
				   gpioPWMFlag4++;
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <pwmMode+0x42c>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <pwmMode+0x42c>)
 8001a94:	701a      	strb	r2, [r3, #0]
				   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 8001a96:	210c      	movs	r1, #12
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f006 faad 	bl	8007ff8 <HAL_TIM_PWM_Start>
				break;
 8001a9e:	e000      	b.n	8001aa2 <pwmMode+0x3ea>
				break;
 8001aa0:	bf00      	nop
 	 	 	GPIO_PWM_InitStruct[3].Mode = GPIO_MODE_AF_PP;
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <pwmMode+0x430>)
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	635a      	str	r2, [r3, #52]	; 0x34
 	 	 	GPIO_PWM_InitStruct[3].Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <pwmMode+0x430>)
 8001aaa:	2202      	movs	r2, #2
 8001aac:	63da      	str	r2, [r3, #60]	; 0x3c
 	 	 	HAL_GPIO_Init(GPIOB, &GPIO_PWM_InitStruct[3]);
 8001aae:	490f      	ldr	r1, [pc, #60]	; (8001aec <pwmMode+0x434>)
 8001ab0:	480f      	ldr	r0, [pc, #60]	; (8001af0 <pwmMode+0x438>)
 8001ab2:	f002 fcaf 	bl	8004414 <HAL_GPIO_Init>
 	  		HAL_TIM_Base_Start_IT(htim);
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f006 f9f4 	bl	8007ea4 <HAL_TIM_Base_Start_IT>
 	  		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "GPIO_PWM=%04X\r\n", GPIO_PWM_InitStruct[3].Pin), 1000);
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <pwmMode+0x430>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	490c      	ldr	r1, [pc, #48]	; (8001af4 <pwmMode+0x43c>)
 8001ac4:	480c      	ldr	r0, [pc, #48]	; (8001af8 <pwmMode+0x440>)
 8001ac6:	f008 ff97 	bl	800a9f8 <siprintf>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad2:	4909      	ldr	r1, [pc, #36]	; (8001af8 <pwmMode+0x440>)
 8001ad4:	4809      	ldr	r0, [pc, #36]	; (8001afc <pwmMode+0x444>)
 8001ad6:	f007 fcd4 	bl	8009482 <HAL_UART_Transmit>
}
 8001ada:	bf00      	nop
 8001adc:	3750      	adds	r7, #80	; 0x50
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200002d9 	.word	0x200002d9
 8001ae8:	200002dc 	.word	0x200002dc
 8001aec:	2000030c 	.word	0x2000030c
 8001af0:	40010c00 	.word	0x40010c00
 8001af4:	0800cf94 	.word	0x0800cf94
 8001af8:	20000010 	.word	0x20000010
 8001afc:	20000508 	.word	0x20000508

08001b00 <ADC_MspInit>:
void ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0310 	add.w	r3, r7, #16
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <ADC_MspInit+0x54>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d115      	bne.n	8001b4c <ADC_MspInit+0x4c>
  {
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b20:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <ADC_MspInit+0x58>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4a0c      	ldr	r2, [pc, #48]	; (8001b58 <ADC_MspInit+0x58>)
 8001b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2a:	6193      	str	r3, [r2, #24]
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <ADC_MspInit+0x58>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]
//    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b40:	f107 0310 	add.w	r3, r7, #16
 8001b44:	4619      	mov	r1, r3
 8001b46:	4805      	ldr	r0, [pc, #20]	; (8001b5c <ADC_MspInit+0x5c>)
 8001b48:	f002 fc64 	bl	8004414 <HAL_GPIO_Init>
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	3720      	adds	r7, #32
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40012400 	.word	0x40012400
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40010800 	.word	0x40010800

08001b60 <ADC_Config>:
void ADC_Config(ADC_HandleTypeDef *hadc, uint8_t index){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	70fb      	strb	r3, [r7, #3]
	 /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  ADC_ChannelConfTypeDef sConfig = {0};
 8001b6c:	f107 030c 	add.w	r3, r7, #12
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]

	  /* USER CODE END ADC1_Init 1 */

	  /** Common config
	  */
	  hadc->Instance = ADC1;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <ADC_Config+0x90>)
 8001b7c:	601a      	str	r2, [r3, #0]
	  hadc->Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
	  hadc->Init.ContinuousConvMode = ENABLE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	731a      	strb	r2, [r3, #12]
	  hadc->Init.DiscontinuousConvMode = DISABLE;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	751a      	strb	r2, [r3, #20]
	  hadc->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001b96:	61da      	str	r2, [r3, #28]
	  hadc->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	605a      	str	r2, [r3, #4]
	  hadc->Init.NbrOfConversion = 1;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	611a      	str	r2, [r3, #16]
	  if (HAL_ADC_Init(hadc) != HAL_OK)
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f001 fd53 	bl	8003650 <HAL_ADC_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <ADC_Config+0x54>
	  {
	    Error_Handler();
 8001bb0:	f000 fc39 	bl	8002426 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	613b      	str	r3, [r7, #16]
	  sConfig.SamplingTime = adcSamplingTime[index];
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <ADC_Config+0x94>)
 8001bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc4:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8001bc6:	f107 030c 	add.w	r3, r7, #12
 8001bca:	4619      	mov	r1, r3
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f001 fed1 	bl	8003974 <HAL_ADC_ConfigChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <ADC_Config+0x7c>
	  {
	    Error_Handler();
 8001bd8:	f000 fc25 	bl	8002426 <Error_Handler>
	  }
	  ADC_MspInit(hadc);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff8f 	bl	8001b00 <ADC_MspInit>
	  HAL_ADC_Start(hadc);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f001 fe0c 	bl	8003800 <HAL_ADC_Start>
}
 8001be8:	bf00      	nop
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40012400 	.word	0x40012400
 8001bf4:	20000060 	.word	0x20000060

08001bf8 <fsmNeopixelRgbLed>:
 */

#include "fsmLedRgb.h"
uint8_t index = 0;

void fsmNeopixelRgbLed(){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
	switch (neopixelStatus) {
 8001bfc:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <fsmNeopixelRgbLed+0x154>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	f200 8098 	bhi.w	8001d36 <fsmNeopixelRgbLed+0x13e>
 8001c06:	a201      	add	r2, pc, #4	; (adr r2, 8001c0c <fsmNeopixelRgbLed+0x14>)
 8001c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0c:	08001c1d 	.word	0x08001c1d
 8001c10:	08001c7f 	.word	0x08001c7f
 8001c14:	08001ce9 	.word	0x08001ce9
 8001c18:	08001d1b 	.word	0x08001d1b
		case neopixelInit:
			NeoPixel_hslColor(120, 255, 127);
 8001c1c:	227f      	movs	r2, #127	; 0x7f
 8001c1e:	21ff      	movs	r1, #255	; 0xff
 8001c20:	2078      	movs	r0, #120	; 0x78
 8001c22:	f000 fea1 	bl	8002968 <NeoPixel_hslColor>
			if(is_button_pressed(0) == 1){
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff fcc8 	bl	80015bc <is_button_pressed>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d109      	bne.n	8001c46 <fsmNeopixelRgbLed+0x4e>
				    NeoPixel_hslColor(120, 255, 127);
 8001c32:	227f      	movs	r2, #127	; 0x7f
 8001c34:	21ff      	movs	r1, #255	; 0xff
 8001c36:	2078      	movs	r0, #120	; 0x78
 8001c38:	f000 fe96 	bl	8002968 <NeoPixel_hslColor>
				    NeoPixel_led_set_RGB(0);
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f000 fc57 	bl	80024f0 <NeoPixel_led_set_RGB>
				    NeoPixel_led_render();
 8001c42:	f000 fcb5 	bl	80025b0 <NeoPixel_led_render>
			}
			if(is_button_pressed(1) == 1){
 8001c46:	2001      	movs	r0, #1
 8001c48:	f7ff fcb8 	bl	80015bc <is_button_pressed>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d173      	bne.n	8001d3a <fsmNeopixelRgbLed+0x142>
				NeoPixel_clear_all_led();
 8001c52:	f000 fc01 	bl	8002458 <NeoPixel_clear_all_led>
				 NeoPixel_hslColor(120, 255, 127);
 8001c56:	227f      	movs	r2, #127	; 0x7f
 8001c58:	21ff      	movs	r1, #255	; 0xff
 8001c5a:	2078      	movs	r0, #120	; 0x78
 8001c5c:	f000 fe84 	bl	8002968 <NeoPixel_hslColor>
				NeoPixel_led_set_RGB(index++);
 8001c60:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <fsmNeopixelRgbLed+0x158>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	1c5a      	adds	r2, r3, #1
 8001c66:	b2d1      	uxtb	r1, r2
 8001c68:	4a39      	ldr	r2, [pc, #228]	; (8001d50 <fsmNeopixelRgbLed+0x158>)
 8001c6a:	7011      	strb	r1, [r2, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 fc3f 	bl	80024f0 <NeoPixel_led_set_RGB>
			    NeoPixel_led_render();
 8001c72:	f000 fc9d 	bl	80025b0 <NeoPixel_led_render>
			    neopixelStatus = neopixelSingleLed;
 8001c76:	4b35      	ldr	r3, [pc, #212]	; (8001d4c <fsmNeopixelRgbLed+0x154>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]
			}
			break;
 8001c7c:	e05d      	b.n	8001d3a <fsmNeopixelRgbLed+0x142>
		case neopixelSingleLed:
			if(is_button_pressed(0) == 1){
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f7ff fc9c 	bl	80015bc <is_button_pressed>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d118      	bne.n	8001cbc <fsmNeopixelRgbLed+0xc4>
				if(index >=4) index = 0;
 8001c8a:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <fsmNeopixelRgbLed+0x158>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d902      	bls.n	8001c98 <fsmNeopixelRgbLed+0xa0>
 8001c92:	4b2f      	ldr	r3, [pc, #188]	; (8001d50 <fsmNeopixelRgbLed+0x158>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
				NeoPixel_clear_all_led();
 8001c98:	f000 fbde 	bl	8002458 <NeoPixel_clear_all_led>
				NeoPixel_hslColor(120, 255, 127);
 8001c9c:	227f      	movs	r2, #127	; 0x7f
 8001c9e:	21ff      	movs	r1, #255	; 0xff
 8001ca0:	2078      	movs	r0, #120	; 0x78
 8001ca2:	f000 fe61 	bl	8002968 <NeoPixel_hslColor>
				NeoPixel_led_set_RGB(index++);
 8001ca6:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <fsmNeopixelRgbLed+0x158>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	b2d1      	uxtb	r1, r2
 8001cae:	4a28      	ldr	r2, [pc, #160]	; (8001d50 <fsmNeopixelRgbLed+0x158>)
 8001cb0:	7011      	strb	r1, [r2, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fc1c 	bl	80024f0 <NeoPixel_led_set_RGB>
			    NeoPixel_led_render();
 8001cb8:	f000 fc7a 	bl	80025b0 <NeoPixel_led_render>
			}
			if(is_button_pressed(1) == 1){
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f7ff fc7d 	bl	80015bc <is_button_pressed>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d13a      	bne.n	8001d3e <fsmNeopixelRgbLed+0x146>
				index = 0;
 8001cc8:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <fsmNeopixelRgbLed+0x158>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
				NeoPixel_clear_all_led();
 8001cce:	f000 fbc3 	bl	8002458 <NeoPixel_clear_all_led>
				NeoPixel_hslColor(120, 255, 127);
 8001cd2:	227f      	movs	r2, #127	; 0x7f
 8001cd4:	21ff      	movs	r1, #255	; 0xff
 8001cd6:	2078      	movs	r0, #120	; 0x78
 8001cd8:	f000 fe46 	bl	8002968 <NeoPixel_hslColor>
				NeoPixel_toggleLed();
 8001cdc:	f000 fbea 	bl	80024b4 <NeoPixel_toggleLed>
				neopixelStatus = neopixelAllLed;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <fsmNeopixelRgbLed+0x154>)
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	601a      	str	r2, [r3, #0]
			}
			break;
 8001ce6:	e02a      	b.n	8001d3e <fsmNeopixelRgbLed+0x146>
		case neopixelAllLed:
			if(is_button_pressed(2) == 1){
 8001ce8:	2002      	movs	r0, #2
 8001cea:	f7ff fc67 	bl	80015bc <is_button_pressed>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <fsmNeopixelRgbLed+0x100>
				NeoPixel_toggleLed();
 8001cf4:	f000 fbde 	bl	80024b4 <NeoPixel_toggleLed>
			}
			if(is_button_pressed(1) == 1){
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f7ff fc5f 	bl	80015bc <is_button_pressed>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d11e      	bne.n	8001d42 <fsmNeopixelRgbLed+0x14a>
				NeoPixel_clear_all_led();
 8001d04:	f000 fba8 	bl	8002458 <NeoPixel_clear_all_led>
				HAL_Delay(100);
 8001d08:	2064      	movs	r0, #100	; 0x64
 8001d0a:	f001 fc7d 	bl	8003608 <HAL_Delay>
				NeoPixel_set_led_cycle();
 8001d0e:	f000 fdfb 	bl	8002908 <NeoPixel_set_led_cycle>
				neopixelStatus = neopixelCycleLed;
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <fsmNeopixelRgbLed+0x154>)
 8001d14:	2203      	movs	r2, #3
 8001d16:	601a      	str	r2, [r3, #0]
			}
			break;
 8001d18:	e013      	b.n	8001d42 <fsmNeopixelRgbLed+0x14a>
		case neopixelCycleLed:
			NeoPixel_set_led_cycle();
 8001d1a:	f000 fdf5 	bl	8002908 <NeoPixel_set_led_cycle>
			if(is_button_pressed(1) == 1){
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f7ff fc4c 	bl	80015bc <is_button_pressed>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d10d      	bne.n	8001d46 <fsmNeopixelRgbLed+0x14e>
				NeoPixel_clear_all_led();
 8001d2a:	f000 fb95 	bl	8002458 <NeoPixel_clear_all_led>
				neopixelStatus = neopixelInit;
 8001d2e:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <fsmNeopixelRgbLed+0x154>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
			}
			break;
 8001d34:	e007      	b.n	8001d46 <fsmNeopixelRgbLed+0x14e>
		default:
			break;
 8001d36:	bf00      	nop
 8001d38:	e006      	b.n	8001d48 <fsmNeopixelRgbLed+0x150>
			break;
 8001d3a:	bf00      	nop
 8001d3c:	e004      	b.n	8001d48 <fsmNeopixelRgbLed+0x150>
			break;
 8001d3e:	bf00      	nop
 8001d40:	e002      	b.n	8001d48 <fsmNeopixelRgbLed+0x150>
			break;
 8001d42:	bf00      	nop
 8001d44:	e000      	b.n	8001d48 <fsmNeopixelRgbLed+0x150>
			break;
 8001d46:	bf00      	nop
	}
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	2000031c 	.word	0x2000031c
 8001d50:	200002cc 	.word	0x200002cc

08001d54 <func1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void func1(){
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
	fsmNeopixelRgbLed();
 8001d58:	f7ff ff4e 	bl	8001bf8 <fsmNeopixelRgbLed>
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <func2>:
void func2(){
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
	 Moisture_readValue();
 8001d64:	f7ff fa80 	bl	8001268 <Moisture_readValue>
}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_UART_RxCpltCallback>:
//		  NeoPixel_led_set_all_RGB();
//	}
//}
uint8_t buffer[MAX_BUFFER_SIZE];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	if( huart -> Instance == USART2 ) {
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a13      	ldr	r2, [pc, #76]	; (8001dc8 <HAL_UART_RxCpltCallback+0x5c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d11f      	bne.n	8001dbe <HAL_UART_RxCpltCallback+0x52>
		buffer[index_buffer++] = temp;
 8001d7e:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <HAL_UART_RxCpltCallback+0x60>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	b2d1      	uxtb	r1, r2
 8001d86:	4a11      	ldr	r2, [pc, #68]	; (8001dcc <HAL_UART_RxCpltCallback+0x60>)
 8001d88:	7011      	strb	r1, [r2, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <HAL_UART_RxCpltCallback+0x64>)
 8001d8e:	7819      	ldrb	r1, [r3, #0]
 8001d90:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <HAL_UART_RxCpltCallback+0x68>)
 8001d92:	5499      	strb	r1, [r3, r2]
		if(index_buffer == 30) index_buffer = 0;
 8001d94:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <HAL_UART_RxCpltCallback+0x60>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b1e      	cmp	r3, #30
 8001d9a:	d102      	bne.n	8001da2 <HAL_UART_RxCpltCallback+0x36>
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_UART_RxCpltCallback+0x60>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 8001da2:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <HAL_UART_RxCpltCallback+0x6c>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit (&huart2, &temp, 1, 50) ;
 8001da8:	2332      	movs	r3, #50	; 0x32
 8001daa:	2201      	movs	r2, #1
 8001dac:	4908      	ldr	r1, [pc, #32]	; (8001dd0 <HAL_UART_RxCpltCallback+0x64>)
 8001dae:	480b      	ldr	r0, [pc, #44]	; (8001ddc <HAL_UART_RxCpltCallback+0x70>)
 8001db0:	f007 fb67 	bl	8009482 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, & temp, 1);
 8001db4:	2201      	movs	r2, #1
 8001db6:	4906      	ldr	r1, [pc, #24]	; (8001dd0 <HAL_UART_RxCpltCallback+0x64>)
 8001db8:	4808      	ldr	r0, [pc, #32]	; (8001ddc <HAL_UART_RxCpltCallback+0x70>)
 8001dba:	f007 fbe5 	bl	8009588 <HAL_UART_Receive_IT>
	}
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40004400 	.word	0x40004400
 8001dcc:	200002ce 	.word	0x200002ce
 8001dd0:	200002cd 	.word	0x200002cd
 8001dd4:	20000550 	.word	0x20000550
 8001dd8:	200002cf 	.word	0x200002cf
 8001ddc:	20000508 	.word	0x20000508

08001de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001de6:	f001 fbad 	bl	8003544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dea:	f000 f8a5 	bl	8001f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dee:	f000 fa8b 	bl	8002308 <MX_GPIO_Init>
  MX_DMA_Init();
 8001df2:	f000 fa6b 	bl	80022cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001df6:	f000 fa3f 	bl	8002278 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001dfa:	f000 f9c7 	bl	800218c <MX_TIM2_Init>
//  MX_ADC1_Init();
  MX_I2C1_Init();
 8001dfe:	f000 f8f7 	bl	8001ff0 <MX_I2C1_Init>
//  MX_TIM4_Init();
//  MX_TIM3_Init();
  MX_TIM1_Init();
 8001e02:	f000 f923 	bl	800204c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  pwmMode(&htim3, 3, 1, 0, 89);
 8001e06:	2359      	movs	r3, #89	; 0x59
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	2103      	movs	r1, #3
 8001e10:	483d      	ldr	r0, [pc, #244]	; (8001f08 <main+0x128>)
 8001e12:	f7ff fc51 	bl	80016b8 <pwmMode>
  pwmMode(&htim3, 3, 2, 0, 89);
 8001e16:	2359      	movs	r3, #89	; 0x59
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	2103      	movs	r1, #3
 8001e20:	4839      	ldr	r0, [pc, #228]	; (8001f08 <main+0x128>)
 8001e22:	f7ff fc49 	bl	80016b8 <pwmMode>
  pwmMode(&htim4, 4, 1, 0, 89);
 8001e26:	2359      	movs	r3, #89	; 0x59
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	2104      	movs	r1, #4
 8001e30:	4836      	ldr	r0, [pc, #216]	; (8001f0c <main+0x12c>)
 8001e32:	f7ff fc41 	bl	80016b8 <pwmMode>
  pwmMode(&htim4, 4, 2, 0, 89);
 8001e36:	2359      	movs	r3, #89	; 0x59
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	2104      	movs	r1, #4
 8001e40:	4832      	ldr	r0, [pc, #200]	; (8001f0c <main+0x12c>)
 8001e42:	f7ff fc39 	bl	80016b8 <pwmMode>

  ADC_Config(&hadc1, 7);
 8001e46:	2107      	movs	r1, #7
 8001e48:	4831      	ldr	r0, [pc, #196]	; (8001f10 <main+0x130>)
 8001e4a:	f7ff fe89 	bl	8001b60 <ADC_Config>
  HAL_TIM_Base_Start_IT(&htim2);
 8001e4e:	4831      	ldr	r0, [pc, #196]	; (8001f14 <main+0x134>)
 8001e50:	f006 f828 	bl	8007ea4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8001e54:	4830      	ldr	r0, [pc, #192]	; (8001f18 <main+0x138>)
 8001e56:	f006 f825 	bl	8007ea4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	482e      	ldr	r0, [pc, #184]	; (8001f18 <main+0x138>)
 8001e5e:	f006 f8cb 	bl	8007ff8 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8001e62:	2201      	movs	r2, #1
 8001e64:	492d      	ldr	r1, [pc, #180]	; (8001f1c <main+0x13c>)
 8001e66:	482e      	ldr	r0, [pc, #184]	; (8001f20 <main+0x140>)
 8001e68:	f007 fb8e 	bl	8009588 <HAL_UART_Receive_IT>
  SCH_Init();
 8001e6c:	f000 fe5a 	bl	8002b24 <SCH_Init>
  SCH_Add_Task(func1, 223, 20);
 8001e70:	2214      	movs	r2, #20
 8001e72:	21df      	movs	r1, #223	; 0xdf
 8001e74:	482b      	ldr	r0, [pc, #172]	; (8001f24 <main+0x144>)
 8001e76:	f000 fedb 	bl	8002c30 <SCH_Add_Task>
  SCH_Add_Task(func2, 25, 4000);
 8001e7a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001e7e:	2119      	movs	r1, #25
 8001e80:	4829      	ldr	r0, [pc, #164]	; (8001f28 <main+0x148>)
 8001e82:	f000 fed5 	bl	8002c30 <SCH_Add_Task>
  DHT20_Read();
 8001e86:	f7fe fff3 	bl	8000e70 <DHT20_Read>
  lcdInit();
 8001e8a:	f7ff f984 	bl	8001196 <lcdInit>
  lcdSetCursor(1, 1);
 8001e8e:	2101      	movs	r1, #1
 8001e90:	2001      	movs	r0, #1
 8001e92:	f7ff f961 	bl	8001158 <lcdSetCursor>
  lcdSendNumber(DHT20_getHumidity());
 8001e96:	f7fe ff7b 	bl	8000d90 <DHT20_getHumidity>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff f9c9 	bl	8001234 <lcdSendNumber>
  HAL_Delay(10);
 8001ea2:	200a      	movs	r0, #10
 8001ea4:	f001 fbb0 	bl	8003608 <HAL_Delay>
  lcdSetCursor(0, 1);
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f7ff f954 	bl	8001158 <lcdSetCursor>
  lcdSendNumber(DHT20_getTemperature());
 8001eb0:	f7fe ff80 	bl	8000db4 <DHT20_getTemperature>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f9bc 	bl	8001234 <lcdSendNumber>
  NeoPixel_status = 0;
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <main+0x14c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
  neopixelStatus = neopixelInit;
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <main+0x150>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
	NeoPixel_clear_all_led();
 8001ec8:	f000 fac6 	bl	8002458 <NeoPixel_clear_all_led>
	HAL_Delay(10);
 8001ecc:	200a      	movs	r0, #10
 8001ece:	f001 fb9b 	bl	8003608 <HAL_Delay>
  uint8_t high = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	71fb      	strb	r3, [r7, #7]
  uint8_t low = 1;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	71bb      	strb	r3, [r7, #6]
  ledMode(GPIOA, 10);
 8001eda:	210a      	movs	r1, #10
 8001edc:	4815      	ldr	r0, [pc, #84]	; (8001f34 <main+0x154>)
 8001ede:	f7ff fb8d 	bl	80015fc <ledMode>
  while (1)
  {
	  //branch newTestDMA
//	  fsmNeopixelRgbLed();
//	  NeoPixel_set_led_cycle();
      SCH_Dispatch_Tasks();
 8001ee2:	f000 ff07 	bl	8002cf4 <SCH_Dispatch_Tasks>
//      if( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET){
//    	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
//      }
       __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 100);
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <main+0x128>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2264      	movs	r2, #100	; 0x64
 8001eec:	639a      	str	r2, [r3, #56]	; 0x38
       __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 50);
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <main+0x128>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2232      	movs	r2, #50	; 0x32
 8001ef4:	635a      	str	r2, [r3, #52]	; 0x34
       __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 100);
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <main+0x12c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2264      	movs	r2, #100	; 0x64
 8001efc:	639a      	str	r2, [r3, #56]	; 0x38
       __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 50);
 8001efe:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <main+0x12c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2232      	movs	r2, #50	; 0x32
 8001f04:	635a      	str	r2, [r3, #52]	; 0x34
      SCH_Dispatch_Tasks();
 8001f06:	e7ec      	b.n	8001ee2 <main+0x102>
 8001f08:	20000434 	.word	0x20000434
 8001f0c:	2000047c 	.word	0x2000047c
 8001f10:	20000320 	.word	0x20000320
 8001f14:	200003ec 	.word	0x200003ec
 8001f18:	200003a4 	.word	0x200003a4
 8001f1c:	200002cd 	.word	0x200002cd
 8001f20:	20000508 	.word	0x20000508
 8001f24:	08001d55 	.word	0x08001d55
 8001f28:	08001d61 	.word	0x08001d61
 8001f2c:	200002d0 	.word	0x200002d0
 8001f30:	2000031c 	.word	0x2000031c
 8001f34:	40010800 	.word	0x40010800

08001f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b094      	sub	sp, #80	; 0x50
 8001f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f42:	2228      	movs	r2, #40	; 0x28
 8001f44:	2100      	movs	r1, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f008 f8ee 	bl	800a128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f76:	2301      	movs	r3, #1
 8001f78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f84:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f005 fa72 	bl	8007478 <HAL_RCC_OscConfig>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001f9a:	f000 fa44 	bl	8002426 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f9e:	230f      	movs	r3, #15
 8001fa0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2102      	movs	r1, #2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f005 fcde 	bl	800797c <HAL_RCC_ClockConfig>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001fc6:	f000 fa2e 	bl	8002426 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fd2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f005 fe5e 	bl	8007c98 <HAL_RCCEx_PeriphCLKConfig>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001fe2:	f000 fa20 	bl	8002426 <Error_Handler>
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	3750      	adds	r7, #80	; 0x50
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <MX_I2C1_Init+0x50>)
 8001ff6:	4a13      	ldr	r2, [pc, #76]	; (8002044 <MX_I2C1_Init+0x54>)
 8001ff8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <MX_I2C1_Init+0x50>)
 8001ffc:	4a12      	ldr	r2, [pc, #72]	; (8002048 <MX_I2C1_Init+0x58>)
 8001ffe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <MX_I2C1_Init+0x50>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <MX_I2C1_Init+0x50>)
 8002008:	2200      	movs	r2, #0
 800200a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <MX_I2C1_Init+0x50>)
 800200e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002012:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <MX_I2C1_Init+0x50>)
 8002016:	2200      	movs	r2, #0
 8002018:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <MX_I2C1_Init+0x50>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002020:	4b07      	ldr	r3, [pc, #28]	; (8002040 <MX_I2C1_Init+0x50>)
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <MX_I2C1_Init+0x50>)
 8002028:	2200      	movs	r2, #0
 800202a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800202c:	4804      	ldr	r0, [pc, #16]	; (8002040 <MX_I2C1_Init+0x50>)
 800202e:	f002 fbc7 	bl	80047c0 <HAL_I2C_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002038:	f000 f9f5 	bl	8002426 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000350 	.word	0x20000350
 8002044:	40005400 	.word	0x40005400
 8002048:	000186a0 	.word	0x000186a0

0800204c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b096      	sub	sp, #88	; 0x58
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002052:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002060:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800206a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]
 8002078:	611a      	str	r2, [r3, #16]
 800207a:	615a      	str	r2, [r3, #20]
 800207c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	2220      	movs	r2, #32
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f008 f84f 	bl	800a128 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800208a:	4b3e      	ldr	r3, [pc, #248]	; (8002184 <MX_TIM1_Init+0x138>)
 800208c:	4a3e      	ldr	r2, [pc, #248]	; (8002188 <MX_TIM1_Init+0x13c>)
 800208e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002090:	4b3c      	ldr	r3, [pc, #240]	; (8002184 <MX_TIM1_Init+0x138>)
 8002092:	2200      	movs	r2, #0
 8002094:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002096:	4b3b      	ldr	r3, [pc, #236]	; (8002184 <MX_TIM1_Init+0x138>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 89;
 800209c:	4b39      	ldr	r3, [pc, #228]	; (8002184 <MX_TIM1_Init+0x138>)
 800209e:	2259      	movs	r2, #89	; 0x59
 80020a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a2:	4b38      	ldr	r3, [pc, #224]	; (8002184 <MX_TIM1_Init+0x138>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020a8:	4b36      	ldr	r3, [pc, #216]	; (8002184 <MX_TIM1_Init+0x138>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ae:	4b35      	ldr	r3, [pc, #212]	; (8002184 <MX_TIM1_Init+0x138>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020b4:	4833      	ldr	r0, [pc, #204]	; (8002184 <MX_TIM1_Init+0x138>)
 80020b6:	f005 fea5 	bl	8007e04 <HAL_TIM_Base_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80020c0:	f000 f9b1 	bl	8002426 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020ce:	4619      	mov	r1, r3
 80020d0:	482c      	ldr	r0, [pc, #176]	; (8002184 <MX_TIM1_Init+0x138>)
 80020d2:	f006 fc65 	bl	80089a0 <HAL_TIM_ConfigClockSource>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80020dc:	f000 f9a3 	bl	8002426 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020e0:	4828      	ldr	r0, [pc, #160]	; (8002184 <MX_TIM1_Init+0x138>)
 80020e2:	f005 ff31 	bl	8007f48 <HAL_TIM_PWM_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80020ec:	f000 f99b 	bl	8002426 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f0:	2300      	movs	r3, #0
 80020f2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020fc:	4619      	mov	r1, r3
 80020fe:	4821      	ldr	r0, [pc, #132]	; (8002184 <MX_TIM1_Init+0x138>)
 8002100:	f007 f8ae 	bl	8009260 <HAL_TIMEx_MasterConfigSynchronization>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800210a:	f000 f98c 	bl	8002426 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800210e:	2360      	movs	r3, #96	; 0x60
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002116:	2300      	movs	r3, #0
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800211a:	2300      	movs	r3, #0
 800211c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800212a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212e:	2200      	movs	r2, #0
 8002130:	4619      	mov	r1, r3
 8002132:	4814      	ldr	r0, [pc, #80]	; (8002184 <MX_TIM1_Init+0x138>)
 8002134:	f006 fb72 	bl	800881c <HAL_TIM_PWM_ConfigChannel>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800213e:	f000 f972 	bl	8002426 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002156:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800215a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	4619      	mov	r1, r3
 8002164:	4807      	ldr	r0, [pc, #28]	; (8002184 <MX_TIM1_Init+0x138>)
 8002166:	f007 f8d9 	bl	800931c <HAL_TIMEx_ConfigBreakDeadTime>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002170:	f000 f959 	bl	8002426 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002174:	4803      	ldr	r0, [pc, #12]	; (8002184 <MX_TIM1_Init+0x138>)
 8002176:	f000 ffa9 	bl	80030cc <HAL_TIM_MspPostInit>

}
 800217a:	bf00      	nop
 800217c:	3758      	adds	r7, #88	; 0x58
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200003a4 	.word	0x200003a4
 8002188:	40012c00 	.word	0x40012c00

0800218c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08e      	sub	sp, #56	; 0x38
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a0:	f107 0320 	add.w	r3, r7, #32
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
 80021b8:	615a      	str	r2, [r3, #20]
 80021ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021bc:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <MX_TIM2_Init+0xe8>)
 80021be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80021c4:	4b2b      	ldr	r3, [pc, #172]	; (8002274 <MX_TIM2_Init+0xe8>)
 80021c6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80021ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021cc:	4b29      	ldr	r3, [pc, #164]	; (8002274 <MX_TIM2_Init+0xe8>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80021d2:	4b28      	ldr	r3, [pc, #160]	; (8002274 <MX_TIM2_Init+0xe8>)
 80021d4:	2209      	movs	r2, #9
 80021d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d8:	4b26      	ldr	r3, [pc, #152]	; (8002274 <MX_TIM2_Init+0xe8>)
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021de:	4b25      	ldr	r3, [pc, #148]	; (8002274 <MX_TIM2_Init+0xe8>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021e4:	4823      	ldr	r0, [pc, #140]	; (8002274 <MX_TIM2_Init+0xe8>)
 80021e6:	f005 fe0d 	bl	8007e04 <HAL_TIM_Base_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80021f0:	f000 f919 	bl	8002426 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021fe:	4619      	mov	r1, r3
 8002200:	481c      	ldr	r0, [pc, #112]	; (8002274 <MX_TIM2_Init+0xe8>)
 8002202:	f006 fbcd 	bl	80089a0 <HAL_TIM_ConfigClockSource>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800220c:	f000 f90b 	bl	8002426 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002210:	4818      	ldr	r0, [pc, #96]	; (8002274 <MX_TIM2_Init+0xe8>)
 8002212:	f005 fe99 	bl	8007f48 <HAL_TIM_PWM_Init>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800221c:	f000 f903 	bl	8002426 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002220:	2300      	movs	r3, #0
 8002222:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002228:	f107 0320 	add.w	r3, r7, #32
 800222c:	4619      	mov	r1, r3
 800222e:	4811      	ldr	r0, [pc, #68]	; (8002274 <MX_TIM2_Init+0xe8>)
 8002230:	f007 f816 	bl	8009260 <HAL_TIMEx_MasterConfigSynchronization>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800223a:	f000 f8f4 	bl	8002426 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800223e:	2360      	movs	r3, #96	; 0x60
 8002240:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	2200      	movs	r2, #0
 8002252:	4619      	mov	r1, r3
 8002254:	4807      	ldr	r0, [pc, #28]	; (8002274 <MX_TIM2_Init+0xe8>)
 8002256:	f006 fae1 	bl	800881c <HAL_TIM_PWM_ConfigChannel>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002260:	f000 f8e1 	bl	8002426 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002264:	4803      	ldr	r0, [pc, #12]	; (8002274 <MX_TIM2_Init+0xe8>)
 8002266:	f000 ff31 	bl	80030cc <HAL_TIM_MspPostInit>

}
 800226a:	bf00      	nop
 800226c:	3738      	adds	r7, #56	; 0x38
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200003ec 	.word	0x200003ec

08002278 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <MX_USART2_UART_Init+0x4c>)
 800227e:	4a12      	ldr	r2, [pc, #72]	; (80022c8 <MX_USART2_UART_Init+0x50>)
 8002280:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002282:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <MX_USART2_UART_Init+0x4c>)
 8002284:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002288:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <MX_USART2_UART_Init+0x4c>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <MX_USART2_UART_Init+0x4c>)
 8002292:	2200      	movs	r2, #0
 8002294:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <MX_USART2_UART_Init+0x4c>)
 8002298:	2200      	movs	r2, #0
 800229a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800229c:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <MX_USART2_UART_Init+0x4c>)
 800229e:	220c      	movs	r2, #12
 80022a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <MX_USART2_UART_Init+0x4c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <MX_USART2_UART_Init+0x4c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022ae:	4805      	ldr	r0, [pc, #20]	; (80022c4 <MX_USART2_UART_Init+0x4c>)
 80022b0:	f007 f897 	bl	80093e2 <HAL_UART_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022ba:	f000 f8b4 	bl	8002426 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000508 	.word	0x20000508
 80022c8:	40004400 	.word	0x40004400

080022cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <MX_DMA_Init+0x38>)
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	4a0b      	ldr	r2, [pc, #44]	; (8002304 <MX_DMA_Init+0x38>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6153      	str	r3, [r2, #20]
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <MX_DMA_Init+0x38>)
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	200c      	movs	r0, #12
 80022f0:	f001 fdab 	bl	8003e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80022f4:	200c      	movs	r0, #12
 80022f6:	f001 fdc4 	bl	8003e82 <HAL_NVIC_EnableIRQ>

}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000

08002308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230e:	f107 0310 	add.w	r3, r7, #16
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	609a      	str	r2, [r3, #8]
 800231a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800231c:	4b33      	ldr	r3, [pc, #204]	; (80023ec <MX_GPIO_Init+0xe4>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	4a32      	ldr	r2, [pc, #200]	; (80023ec <MX_GPIO_Init+0xe4>)
 8002322:	f043 0310 	orr.w	r3, r3, #16
 8002326:	6193      	str	r3, [r2, #24]
 8002328:	4b30      	ldr	r3, [pc, #192]	; (80023ec <MX_GPIO_Init+0xe4>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002334:	4b2d      	ldr	r3, [pc, #180]	; (80023ec <MX_GPIO_Init+0xe4>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	4a2c      	ldr	r2, [pc, #176]	; (80023ec <MX_GPIO_Init+0xe4>)
 800233a:	f043 0320 	orr.w	r3, r3, #32
 800233e:	6193      	str	r3, [r2, #24]
 8002340:	4b2a      	ldr	r3, [pc, #168]	; (80023ec <MX_GPIO_Init+0xe4>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800234c:	4b27      	ldr	r3, [pc, #156]	; (80023ec <MX_GPIO_Init+0xe4>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	4a26      	ldr	r2, [pc, #152]	; (80023ec <MX_GPIO_Init+0xe4>)
 8002352:	f043 0304 	orr.w	r3, r3, #4
 8002356:	6193      	str	r3, [r2, #24]
 8002358:	4b24      	ldr	r3, [pc, #144]	; (80023ec <MX_GPIO_Init+0xe4>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002364:	4b21      	ldr	r3, [pc, #132]	; (80023ec <MX_GPIO_Init+0xe4>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	4a20      	ldr	r2, [pc, #128]	; (80023ec <MX_GPIO_Init+0xe4>)
 800236a:	f043 0308 	orr.w	r3, r3, #8
 800236e:	6193      	str	r3, [r2, #24]
 8002370:	4b1e      	ldr	r3, [pc, #120]	; (80023ec <MX_GPIO_Init+0xe4>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	603b      	str	r3, [r7, #0]
 800237a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800237c:	2200      	movs	r2, #0
 800237e:	21e0      	movs	r1, #224	; 0xe0
 8002380:	481b      	ldr	r0, [pc, #108]	; (80023f0 <MX_GPIO_Init+0xe8>)
 8002382:	f002 f9e2 	bl	800474a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002386:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800238a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <MX_GPIO_Init+0xec>)
 800238e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002394:	f107 0310 	add.w	r3, r7, #16
 8002398:	4619      	mov	r1, r3
 800239a:	4817      	ldr	r0, [pc, #92]	; (80023f8 <MX_GPIO_Init+0xf0>)
 800239c:	f002 f83a 	bl	8004414 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin;
 80023a0:	23e0      	movs	r3, #224	; 0xe0
 80023a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a4:	2301      	movs	r3, #1
 80023a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2302      	movs	r3, #2
 80023ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b0:	f107 0310 	add.w	r3, r7, #16
 80023b4:	4619      	mov	r1, r3
 80023b6:	480e      	ldr	r0, [pc, #56]	; (80023f0 <MX_GPIO_Init+0xe8>)
 80023b8:	f002 f82c 	bl	8004414 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button0_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button0_Pin|Button1_Pin|Button2_Pin;
 80023bc:	2307      	movs	r3, #7
 80023be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023c4:	2301      	movs	r3, #1
 80023c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c8:	f107 0310 	add.w	r3, r7, #16
 80023cc:	4619      	mov	r1, r3
 80023ce:	480b      	ldr	r0, [pc, #44]	; (80023fc <MX_GPIO_Init+0xf4>)
 80023d0:	f002 f820 	bl	8004414 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2100      	movs	r1, #0
 80023d8:	2028      	movs	r0, #40	; 0x28
 80023da:	f001 fd36 	bl	8003e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023de:	2028      	movs	r0, #40	; 0x28
 80023e0:	f001 fd4f 	bl	8003e82 <HAL_NVIC_EnableIRQ>

}
 80023e4:	bf00      	nop
 80023e6:	3720      	adds	r7, #32
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40010800 	.word	0x40010800
 80023f4:	10110000 	.word	0x10110000
 80023f8:	40011000 	.word	0x40011000
 80023fc:	40010c00 	.word	0x40010c00

08002400 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002410:	d101      	bne.n	8002416 <HAL_TIM_PeriodElapsedCallback+0x16>
		button_reading();
 8002412:	f7ff f867 	bl	80014e4 <button_reading>
	}
	timerRun();
 8002416:	f001 f82d 	bl	8003474 <timerRun>
	SCH_Update();
 800241a:	f000 fb99 	bl	8002b50 <SCH_Update>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800242a:	b672      	cpsid	i
}
 800242c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800242e:	e7fe      	b.n	800242e <Error_Handler+0x8>

08002430 <scale8>:
uint8_t b;

uint8_t angle = 0;
const uint8_t angle_difference = 11;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	460a      	mov	r2, r1
 800243a:	71fb      	strb	r3, [r7, #7]
 800243c:	4613      	mov	r3, r2
 800243e:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	79ba      	ldrb	r2, [r7, #6]
 8002444:	fb02 f303 	mul.w	r3, r2, r3
 8002448:	121b      	asrs	r3, r3, #8
 800244a:	b2db      	uxtb	r3, r3
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr
	...

08002458 <NeoPixel_clear_all_led>:

void NeoPixel_clear_all_led(){
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
	   for (uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 800245e:	2300      	movs	r3, #0
 8002460:	607b      	str	r3, [r7, #4]
 8002462:	e019      	b.n	8002498 <NeoPixel_clear_all_led+0x40>
	        rgb_arr[4 * i] = 0;          // G = 0
	        rgb_arr[4 * i + 1] = 0;      // R = 0
	        rgb_arr[4 * i + 2] = 0;      // B = 0
	        rgb_arr[4 * i + 3] = 0;      // Reserved = 0
	#else // WS2812B
	        rgb_arr[3 * i] = 0;          // G = 0
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	4a10      	ldr	r2, [pc, #64]	; (80024b0 <NeoPixel_clear_all_led+0x58>)
 800246e:	2100      	movs	r1, #0
 8002470:	54d1      	strb	r1, [r2, r3]
	        rgb_arr[3 * i + 1] = 0;      // R = 0
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4413      	add	r3, r2
 800247a:	3301      	adds	r3, #1
 800247c:	4a0c      	ldr	r2, [pc, #48]	; (80024b0 <NeoPixel_clear_all_led+0x58>)
 800247e:	2100      	movs	r1, #0
 8002480:	54d1      	strb	r1, [r2, r3]
	        rgb_arr[3 * i + 2] = 0;      // B = 0
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	4413      	add	r3, r2
 800248a:	3302      	adds	r3, #2
 800248c:	4a08      	ldr	r2, [pc, #32]	; (80024b0 <NeoPixel_clear_all_led+0x58>)
 800248e:	2100      	movs	r1, #0
 8002490:	54d1      	strb	r1, [r2, r3]
	   for (uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3301      	adds	r3, #1
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b07      	cmp	r3, #7
 800249c:	d9e2      	bls.n	8002464 <NeoPixel_clear_all_led+0xc>
	#endif // End SK6812 WS2812B case differentiation
	    }
	    NeoPixel_led_render(); // Ghi dữ liệu mới vào LED
 800249e:	f000 f887 	bl	80025b0 <NeoPixel_led_render>
		HAL_Delay(200);
 80024a2:	20c8      	movs	r0, #200	; 0xc8
 80024a4:	f001 f8b0 	bl	8003608 <HAL_Delay>
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000570 	.word	0x20000570

080024b4 <NeoPixel_toggleLed>:

void NeoPixel_toggleLed(){
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
	if(NeoPixel_status == 0){
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <NeoPixel_toggleLed+0x38>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d102      	bne.n	80024c6 <NeoPixel_toggleLed+0x12>
		 NeoPixel_clear_all_led();
 80024c0:	f7ff ffca 	bl	8002458 <NeoPixel_clear_all_led>
 80024c4:	e006      	b.n	80024d4 <NeoPixel_toggleLed+0x20>
	}
	else{
		 NeoPixel_hslColor(120, 255, 127);
 80024c6:	227f      	movs	r2, #127	; 0x7f
 80024c8:	21ff      	movs	r1, #255	; 0xff
 80024ca:	2078      	movs	r0, #120	; 0x78
 80024cc:	f000 fa4c 	bl	8002968 <NeoPixel_hslColor>
		 NeoPixel_led_set_all_RGB();
 80024d0:	f000 f856 	bl	8002580 <NeoPixel_led_set_all_RGB>
	}
	NeoPixel_status =  !NeoPixel_status;
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <NeoPixel_toggleLed+0x38>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	4b01      	ldr	r3, [pc, #4]	; (80024ec <NeoPixel_toggleLed+0x38>)
 80024e6:	701a      	strb	r2, [r3, #0]
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200002d0 	.word	0x200002d0

080024f0 <NeoPixel_led_set_RGB>:
// Set a single color (RGB) to index
void NeoPixel_led_set_RGB(uint8_t index) {
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
	r = (NeoPixel_RGB_Color >> 16) & 0xFF;
 80024fa:	4b1c      	ldr	r3, [pc, #112]	; (800256c <NeoPixel_led_set_RGB+0x7c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	0c1b      	lsrs	r3, r3, #16
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <NeoPixel_led_set_RGB+0x80>)
 8002504:	701a      	strb	r2, [r3, #0]
	g = (NeoPixel_RGB_Color >> 8) & 0xFF;
 8002506:	4b19      	ldr	r3, [pc, #100]	; (800256c <NeoPixel_led_set_RGB+0x7c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4b19      	ldr	r3, [pc, #100]	; (8002574 <NeoPixel_led_set_RGB+0x84>)
 8002510:	701a      	strb	r2, [r3, #0]
	b =  NeoPixel_RGB_Color & 0xFF;
 8002512:	4b16      	ldr	r3, [pc, #88]	; (800256c <NeoPixel_led_set_RGB+0x7c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b2da      	uxtb	r2, r3
 8002518:	4b17      	ldr	r3, [pc, #92]	; (8002578 <NeoPixel_led_set_RGB+0x88>)
 800251a:	701a      	strb	r2, [r3, #0]
  rgb_arr[4 * index] = scale8(g, 0xB0); // g;
  rgb_arr[4 * index + 1] = r;
  rgb_arr[4 * index + 2] = scale8(b, 0xF0); // b;
  rgb_arr[4 * index + 3] = 0;
#else // WS2812B
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 800251c:	4b15      	ldr	r3, [pc, #84]	; (8002574 <NeoPixel_led_set_RGB+0x84>)
 800251e:	7818      	ldrb	r0, [r3, #0]
 8002520:	79fa      	ldrb	r2, [r7, #7]
 8002522:	4613      	mov	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	189c      	adds	r4, r3, r2
 8002528:	21b0      	movs	r1, #176	; 0xb0
 800252a:	f7ff ff81 	bl	8002430 <scale8>
 800252e:	4603      	mov	r3, r0
 8002530:	461a      	mov	r2, r3
 8002532:	4b12      	ldr	r3, [pc, #72]	; (800257c <NeoPixel_led_set_RGB+0x8c>)
 8002534:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 8002536:	79fa      	ldrb	r2, [r7, #7]
 8002538:	4613      	mov	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4413      	add	r3, r2
 800253e:	3301      	adds	r3, #1
 8002540:	4a0b      	ldr	r2, [pc, #44]	; (8002570 <NeoPixel_led_set_RGB+0x80>)
 8002542:	7811      	ldrb	r1, [r2, #0]
 8002544:	4a0d      	ldr	r2, [pc, #52]	; (800257c <NeoPixel_led_set_RGB+0x8c>)
 8002546:	54d1      	strb	r1, [r2, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <NeoPixel_led_set_RGB+0x88>)
 800254a:	7818      	ldrb	r0, [r3, #0]
 800254c:	79fa      	ldrb	r2, [r7, #7]
 800254e:	4613      	mov	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	1c9c      	adds	r4, r3, #2
 8002556:	21f0      	movs	r1, #240	; 0xf0
 8002558:	f7ff ff6a 	bl	8002430 <scale8>
 800255c:	4603      	mov	r3, r0
 800255e:	461a      	mov	r2, r3
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <NeoPixel_led_set_RGB+0x8c>)
 8002562:	551a      	strb	r2, [r3, r4]
#endif // End SK6812 WS2812B case differentiation
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	bd90      	pop	{r4, r7, pc}
 800256c:	2000001c 	.word	0x2000001c
 8002570:	200005bc 	.word	0x200005bc
 8002574:	200005bd 	.word	0x200005bd
 8002578:	200005be 	.word	0x200005be
 800257c:	20000570 	.word	0x20000570

08002580 <NeoPixel_led_set_all_RGB>:

// Set all colors to RGB
void NeoPixel_led_set_all_RGB() {
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 8002586:	2300      	movs	r3, #0
 8002588:	607b      	str	r3, [r7, #4]
 800258a:	e007      	b.n	800259c <NeoPixel_led_set_all_RGB+0x1c>
	  NeoPixel_led_set_RGB(i);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ffad 	bl	80024f0 <NeoPixel_led_set_RGB>
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3301      	adds	r3, #1
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b07      	cmp	r3, #7
 80025a0:	d9f4      	bls.n	800258c <NeoPixel_led_set_all_RGB+0xc>
  }
	NeoPixel_led_render();
 80025a2:	f000 f805 	bl	80025b0 <NeoPixel_led_render>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <NeoPixel_led_render>:

// Shuttle the data to the LEDs!
void NeoPixel_led_render() {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim1_ch1.State != HAL_DMA_STATE_READY) {
 80025b6:	4b4d      	ldr	r3, [pc, #308]	; (80026ec <NeoPixel_led_render+0x13c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d105      	bne.n	80025ca <NeoPixel_led_render+0x1a>
 80025be:	4b4c      	ldr	r3, [pc, #304]	; (80026f0 <NeoPixel_led_render+0x140>)
 80025c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d014      	beq.n	80025f4 <NeoPixel_led_render+0x44>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	71fb      	strb	r3, [r7, #7]
 80025ce:	e006      	b.n	80025de <NeoPixel_led_render+0x2e>
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	4a48      	ldr	r2, [pc, #288]	; (80026f4 <NeoPixel_led_render+0x144>)
 80025d4:	2100      	movs	r1, #0
 80025d6:	54d1      	strb	r1, [r2, r3]
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	3301      	adds	r3, #1
 80025dc:	71fb      	strb	r3, [r7, #7]
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	2b2f      	cmp	r3, #47	; 0x2f
 80025e2:	d9f5      	bls.n	80025d0 <NeoPixel_led_render+0x20>
    wr_buf_p = 0;
 80025e4:	4b41      	ldr	r3, [pc, #260]	; (80026ec <NeoPixel_led_render+0x13c>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80025ea:	2100      	movs	r1, #0
 80025ec:	4842      	ldr	r0, [pc, #264]	; (80026f8 <NeoPixel_led_render+0x148>)
 80025ee:	f005 ff47 	bl	8008480 <HAL_TIM_PWM_Stop_DMA>
    return;
 80025f2:	e078      	b.n	80026e6 <NeoPixel_led_render+0x136>
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
    wr_buf[i + 48] = PWM_LO << (((rgb_arr[6] << i) & 0x80) > 0);
    wr_buf[i + 56] = PWM_LO << (((rgb_arr[7] << i) & 0x80) > 0);
  }
#else // WS2812B
  for(uint_fast8_t i = 0; i < 8; ++i) {
 80025f4:	2300      	movs	r3, #0
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	e069      	b.n	80026ce <NeoPixel_led_render+0x11e>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 80025fa:	4b40      	ldr	r3, [pc, #256]	; (80026fc <NeoPixel_led_render+0x14c>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260a:	2b00      	cmp	r3, #0
 800260c:	dd01      	ble.n	8002612 <NeoPixel_led_render+0x62>
 800260e:	213a      	movs	r1, #58	; 0x3a
 8002610:	e000      	b.n	8002614 <NeoPixel_led_render+0x64>
 8002612:	211d      	movs	r1, #29
 8002614:	4a37      	ldr	r2, [pc, #220]	; (80026f4 <NeoPixel_led_render+0x144>)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	4413      	add	r3, r2
 800261a:	460a      	mov	r2, r1
 800261c:	701a      	strb	r2, [r3, #0]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 800261e:	4b37      	ldr	r3, [pc, #220]	; (80026fc <NeoPixel_led_render+0x14c>)
 8002620:	785b      	ldrb	r3, [r3, #1]
 8002622:	461a      	mov	r2, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262e:	2b00      	cmp	r3, #0
 8002630:	dd01      	ble.n	8002636 <NeoPixel_led_render+0x86>
 8002632:	213a      	movs	r1, #58	; 0x3a
 8002634:	e000      	b.n	8002638 <NeoPixel_led_render+0x88>
 8002636:	211d      	movs	r1, #29
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	3308      	adds	r3, #8
 800263c:	4a2d      	ldr	r2, [pc, #180]	; (80026f4 <NeoPixel_led_render+0x144>)
 800263e:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 8002640:	4b2e      	ldr	r3, [pc, #184]	; (80026fc <NeoPixel_led_render+0x14c>)
 8002642:	789b      	ldrb	r3, [r3, #2]
 8002644:	461a      	mov	r2, r3
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002650:	2b00      	cmp	r3, #0
 8002652:	dd01      	ble.n	8002658 <NeoPixel_led_render+0xa8>
 8002654:	213a      	movs	r1, #58	; 0x3a
 8002656:	e000      	b.n	800265a <NeoPixel_led_render+0xaa>
 8002658:	211d      	movs	r1, #29
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	3310      	adds	r3, #16
 800265e:	4a25      	ldr	r2, [pc, #148]	; (80026f4 <NeoPixel_led_render+0x144>)
 8002660:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 8002662:	4b26      	ldr	r3, [pc, #152]	; (80026fc <NeoPixel_led_render+0x14c>)
 8002664:	78db      	ldrb	r3, [r3, #3]
 8002666:	461a      	mov	r2, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002672:	2b00      	cmp	r3, #0
 8002674:	dd01      	ble.n	800267a <NeoPixel_led_render+0xca>
 8002676:	213a      	movs	r1, #58	; 0x3a
 8002678:	e000      	b.n	800267c <NeoPixel_led_render+0xcc>
 800267a:	211d      	movs	r1, #29
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	3318      	adds	r3, #24
 8002680:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <NeoPixel_led_render+0x144>)
 8002682:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 8002684:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <NeoPixel_led_render+0x14c>)
 8002686:	791b      	ldrb	r3, [r3, #4]
 8002688:	461a      	mov	r2, r3
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002694:	2b00      	cmp	r3, #0
 8002696:	dd01      	ble.n	800269c <NeoPixel_led_render+0xec>
 8002698:	213a      	movs	r1, #58	; 0x3a
 800269a:	e000      	b.n	800269e <NeoPixel_led_render+0xee>
 800269c:	211d      	movs	r1, #29
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	3320      	adds	r3, #32
 80026a2:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <NeoPixel_led_render+0x144>)
 80026a4:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <NeoPixel_led_render+0x14c>)
 80026a8:	795b      	ldrb	r3, [r3, #5]
 80026aa:	461a      	mov	r2, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	dd01      	ble.n	80026be <NeoPixel_led_render+0x10e>
 80026ba:	213a      	movs	r1, #58	; 0x3a
 80026bc:	e000      	b.n	80026c0 <NeoPixel_led_render+0x110>
 80026be:	211d      	movs	r1, #29
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	3328      	adds	r3, #40	; 0x28
 80026c4:	4a0b      	ldr	r2, [pc, #44]	; (80026f4 <NeoPixel_led_render+0x144>)
 80026c6:	54d1      	strb	r1, [r2, r3]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	3301      	adds	r3, #1
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b07      	cmp	r3, #7
 80026d2:	d992      	bls.n	80025fa <NeoPixel_led_render+0x4a>
//	dmaState = HAL_DMA_GetState(&hdma_tim1_ch1);
//	if(newStatus == HAL_OK){
//		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "newstatus=%02X#\r\n", newStatus), 1000);
//		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "dmaState=%02X#\r\n", dmaState), 1000);
//	}
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)wr_buf, WR_BUF_LEN);
 80026d4:	2330      	movs	r3, #48	; 0x30
 80026d6:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <NeoPixel_led_render+0x144>)
 80026d8:	2100      	movs	r1, #0
 80026da:	4807      	ldr	r0, [pc, #28]	; (80026f8 <NeoPixel_led_render+0x148>)
 80026dc:	f005 fd2e 	bl	800813c <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 80026e0:	4b02      	ldr	r3, [pc, #8]	; (80026ec <NeoPixel_led_render+0x13c>)
 80026e2:	2202      	movs	r2, #2
 80026e4:	601a      	str	r2, [r3, #0]
}
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	200005b8 	.word	0x200005b8
 80026f0:	200004c4 	.word	0x200004c4
 80026f4:	20000588 	.word	0x20000588
 80026f8:	200003a4 	.word	0x200003a4
 80026fc:	20000570 	.word	0x20000570

08002700 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8002708:	4b39      	ldr	r3, [pc, #228]	; (80027f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b07      	cmp	r3, #7
 800270e:	d853      	bhi.n	80027b8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb8>
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	e047      	b.n	80027a6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa6>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8002716:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4613      	mov	r3, r2
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	4413      	add	r3, r2
 8002720:	4a34      	ldr	r2, [pc, #208]	; (80027f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8002722:	5cd3      	ldrb	r3, [r2, r3]
 8002724:	461a      	mov	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002730:	2b00      	cmp	r3, #0
 8002732:	dd01      	ble.n	8002738 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 8002734:	213a      	movs	r1, #58	; 0x3a
 8002736:	e000      	b.n	800273a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8002738:	211d      	movs	r1, #29
 800273a:	4a2f      	ldr	r2, [pc, #188]	; (80027f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4413      	add	r3, r2
 8002740:	460a      	mov	r2, r1
 8002742:	701a      	strb	r2, [r3, #0]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8002744:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4613      	mov	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4413      	add	r3, r2
 800274e:	3301      	adds	r3, #1
 8002750:	4a28      	ldr	r2, [pc, #160]	; (80027f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8002752:	5cd3      	ldrb	r3, [r2, r3]
 8002754:	461a      	mov	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002760:	2b00      	cmp	r3, #0
 8002762:	dd01      	ble.n	8002768 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 8002764:	213a      	movs	r1, #58	; 0x3a
 8002766:	e000      	b.n	800276a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x6a>
 8002768:	211d      	movs	r1, #29
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	3308      	adds	r3, #8
 800276e:	4a22      	ldr	r2, [pc, #136]	; (80027f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8002770:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8002772:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	4613      	mov	r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4413      	add	r3, r2
 800277c:	3302      	adds	r3, #2
 800277e:	4a1d      	ldr	r2, [pc, #116]	; (80027f4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8002780:	5cd3      	ldrb	r3, [r2, r3]
 8002782:	461a      	mov	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278e:	2b00      	cmp	r3, #0
 8002790:	dd01      	ble.n	8002796 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 8002792:	213a      	movs	r1, #58	; 0x3a
 8002794:	e000      	b.n	8002798 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 8002796:	211d      	movs	r1, #29
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3310      	adds	r3, #16
 800279c:	4a16      	ldr	r2, [pc, #88]	; (80027f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 800279e:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	3301      	adds	r3, #1
 80027a4:	60fb      	str	r3, [r7, #12]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b07      	cmp	r3, #7
 80027aa:	d9b4      	bls.n	8002716 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 80027ac:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3301      	adds	r3, #1
 80027b2:	4a0f      	ldr	r2, [pc, #60]	; (80027f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80027b4:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 80027b6:	e015      	b.n	80027e4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80027b8:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b09      	cmp	r3, #9
 80027be:	d811      	bhi.n	80027e4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	72fb      	strb	r3, [r7, #11]
 80027c4:	e006      	b.n	80027d4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd4>
 80027c6:	7afb      	ldrb	r3, [r7, #11]
 80027c8:	4a0b      	ldr	r2, [pc, #44]	; (80027f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80027ca:	2100      	movs	r1, #0
 80027cc:	54d1      	strb	r1, [r2, r3]
 80027ce:	7afb      	ldrb	r3, [r7, #11]
 80027d0:	3301      	adds	r3, #1
 80027d2:	72fb      	strb	r3, [r7, #11]
 80027d4:	7afb      	ldrb	r3, [r7, #11]
 80027d6:	2b17      	cmp	r3, #23
 80027d8:	d9f5      	bls.n	80027c6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc6>
    wr_buf_p++;
 80027da:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	3301      	adds	r3, #1
 80027e0:	4a03      	ldr	r2, [pc, #12]	; (80027f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80027e2:	6013      	str	r3, [r2, #0]
}
 80027e4:	bf00      	nop
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	200005b8 	.word	0x200005b8
 80027f4:	20000570 	.word	0x20000570
 80027f8:	20000588 	.word	0x20000588

080027fc <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8002804:	4b3c      	ldr	r3, [pc, #240]	; (80028f8 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b07      	cmp	r3, #7
 800280a:	d852      	bhi.n	80028b2 <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 800280c:	2300      	movs	r3, #0
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	e046      	b.n	80028a0 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8002812:	4b39      	ldr	r3, [pc, #228]	; (80028f8 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	4613      	mov	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	4a37      	ldr	r2, [pc, #220]	; (80028fc <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 800281e:	5cd3      	ldrb	r3, [r2, r3]
 8002820:	461a      	mov	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282c:	2b00      	cmp	r3, #0
 800282e:	dd01      	ble.n	8002834 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8002830:	213a      	movs	r1, #58	; 0x3a
 8002832:	e000      	b.n	8002836 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8002834:	211d      	movs	r1, #29
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	3318      	adds	r3, #24
 800283a:	4a31      	ldr	r2, [pc, #196]	; (8002900 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800283c:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 800283e:	4b2e      	ldr	r3, [pc, #184]	; (80028f8 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	3301      	adds	r3, #1
 800284a:	4a2c      	ldr	r2, [pc, #176]	; (80028fc <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 800284c:	5cd3      	ldrb	r3, [r2, r3]
 800284e:	461a      	mov	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285a:	2b00      	cmp	r3, #0
 800285c:	dd01      	ble.n	8002862 <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 800285e:	213a      	movs	r1, #58	; 0x3a
 8002860:	e000      	b.n	8002864 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8002862:	211d      	movs	r1, #29
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	3320      	adds	r3, #32
 8002868:	4a25      	ldr	r2, [pc, #148]	; (8002900 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800286a:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 800286c:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4613      	mov	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	3302      	adds	r3, #2
 8002878:	4a20      	ldr	r2, [pc, #128]	; (80028fc <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 800287a:	5cd3      	ldrb	r3, [r2, r3]
 800287c:	461a      	mov	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002888:	2b00      	cmp	r3, #0
 800288a:	dd01      	ble.n	8002890 <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 800288c:	213a      	movs	r1, #58	; 0x3a
 800288e:	e000      	b.n	8002892 <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 8002890:	211d      	movs	r1, #29
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	3328      	adds	r3, #40	; 0x28
 8002896:	4a1a      	ldr	r2, [pc, #104]	; (8002900 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002898:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	3301      	adds	r3, #1
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b07      	cmp	r3, #7
 80028a4:	d9b5      	bls.n	8002812 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 80028a6:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3301      	adds	r3, #1
 80028ac:	4a12      	ldr	r2, [pc, #72]	; (80028f8 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80028ae:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
  }
}
 80028b0:	e01d      	b.n	80028ee <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80028b2:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b09      	cmp	r3, #9
 80028b8:	d812      	bhi.n	80028e0 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80028ba:	2318      	movs	r3, #24
 80028bc:	72fb      	strb	r3, [r7, #11]
 80028be:	e006      	b.n	80028ce <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 80028c0:	7afb      	ldrb	r3, [r7, #11]
 80028c2:	4a0f      	ldr	r2, [pc, #60]	; (8002900 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80028c4:	2100      	movs	r1, #0
 80028c6:	54d1      	strb	r1, [r2, r3]
 80028c8:	7afb      	ldrb	r3, [r7, #11]
 80028ca:	3301      	adds	r3, #1
 80028cc:	72fb      	strb	r3, [r7, #11]
 80028ce:	7afb      	ldrb	r3, [r7, #11]
 80028d0:	2b2f      	cmp	r3, #47	; 0x2f
 80028d2:	d9f5      	bls.n	80028c0 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>
    ++wr_buf_p;
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	4a07      	ldr	r2, [pc, #28]	; (80028f8 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80028dc:	6013      	str	r3, [r2, #0]
}
 80028de:	e006      	b.n	80028ee <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
    wr_buf_p = 0;
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80028e6:	2100      	movs	r1, #0
 80028e8:	4806      	ldr	r0, [pc, #24]	; (8002904 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80028ea:	f005 fdc9 	bl	8008480 <HAL_TIM_PWM_Stop_DMA>
}
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	200005b8 	.word	0x200005b8
 80028fc:	20000570 	.word	0x20000570
 8002900:	20000588 	.word	0x20000588
 8002904:	200003a4 	.word	0x200003a4

08002908 <NeoPixel_set_led_cycle>:

void NeoPixel_set_led_cycle(){
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_LED; i++) {
 800290e:	2300      	movs	r3, #0
 8002910:	71fb      	strb	r3, [r7, #7]
 8002912:	e014      	b.n	800293e <NeoPixel_set_led_cycle+0x36>
		 NeoPixel_hslColor(angle + (i * angle_difference), 255, 127);
 8002914:	220b      	movs	r2, #11
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	fb02 f303 	mul.w	r3, r2, r3
 800291c:	b2da      	uxtb	r2, r3
 800291e:	4b11      	ldr	r3, [pc, #68]	; (8002964 <NeoPixel_set_led_cycle+0x5c>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	4413      	add	r3, r2
 8002924:	b2db      	uxtb	r3, r3
 8002926:	227f      	movs	r2, #127	; 0x7f
 8002928:	21ff      	movs	r1, #255	; 0xff
 800292a:	4618      	mov	r0, r3
 800292c:	f000 f81c 	bl	8002968 <NeoPixel_hslColor>
		 NeoPixel_led_set_RGB(i);
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff fddc 	bl	80024f0 <NeoPixel_led_set_RGB>
	for(uint8_t i = 0; i < MAX_LED; i++) {
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	3301      	adds	r3, #1
 800293c:	71fb      	strb	r3, [r7, #7]
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d9e7      	bls.n	8002914 <NeoPixel_set_led_cycle+0xc>
	}
	++angle;
 8002944:	4b07      	ldr	r3, [pc, #28]	; (8002964 <NeoPixel_set_led_cycle+0x5c>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	b2da      	uxtb	r2, r3
 800294c:	4b05      	ldr	r3, [pc, #20]	; (8002964 <NeoPixel_set_led_cycle+0x5c>)
 800294e:	701a      	strb	r2, [r3, #0]
	NeoPixel_led_render();
 8002950:	f7ff fe2e 	bl	80025b0 <NeoPixel_led_render>
	HAL_Delay(10);
 8002954:	200a      	movs	r0, #10
 8002956:	f000 fe57 	bl	8003608 <HAL_Delay>
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200005bf 	.word	0x200005bf

08002968 <NeoPixel_hslColor>:

void  NeoPixel_hslColor(uint8_t h, uint8_t s, uint8_t l){
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
 8002972:	460b      	mov	r3, r1
 8002974:	71bb      	strb	r3, [r7, #6]
 8002976:	4613      	mov	r3, r2
 8002978:	717b      	strb	r3, [r7, #5]
	NeoPixel_hsl_to_rgb(h, s, l);
 800297a:	797a      	ldrb	r2, [r7, #5]
 800297c:	79b9      	ldrb	r1, [r7, #6]
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	4618      	mov	r0, r3
 8002982:	f000 f805 	bl	8002990 <NeoPixel_hsl_to_rgb>
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <NeoPixel_hsl_to_rgb>:
void NeoPixel_hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	71fb      	strb	r3, [r7, #7]
 800299a:	460b      	mov	r3, r1
 800299c:	71bb      	strb	r3, [r7, #6]
 800299e:	4613      	mov	r3, r2
 80029a0:	717b      	strb	r3, [r7, #5]
	if(l == 0) return;
 80029a2:	797b      	ldrb	r3, [r7, #5]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80b6 	beq.w	8002b16 <NeoPixel_hsl_to_rgb+0x186>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 80029aa:	797b      	ldrb	r3, [r7, #5]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3301      	adds	r3, #1
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 80029b4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	db09      	blt.n	80029d0 <NeoPixel_hsl_to_rgb+0x40>
 80029bc:	89bb      	ldrh	r3, [r7, #12]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	79ba      	ldrb	r2, [r7, #6]
 80029c4:	fb02 f303 	mul.w	r3, r2, r3
 80029c8:	121b      	asrs	r3, r3, #8
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	74fb      	strb	r3, [r7, #19]
 80029ce:	e00a      	b.n	80029e6 <NeoPixel_hsl_to_rgb+0x56>
	else            c = (512 - (l1 << 1)) * s >> 8;
 80029d0:	89bb      	ldrh	r3, [r7, #12]
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80029da:	79ba      	ldrb	r2, [r7, #6]
 80029dc:	fb02 f303 	mul.w	r3, r2, r3
 80029e0:	121b      	asrs	r3, r3, #8
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	0052      	lsls	r2, r2, #1
 80029ee:	4413      	add	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 80029f6:	897b      	ldrh	r3, [r7, #10]
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 80029fe:	7d3b      	ldrb	r3, [r7, #20]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3301      	adds	r3, #1
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8002a0a:	897b      	ldrh	r3, [r7, #10]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d109      	bne.n	8002a2a <NeoPixel_hsl_to_rgb+0x9a>
 8002a16:	89fb      	ldrh	r3, [r7, #14]
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	7cfa      	ldrb	r2, [r7, #19]
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	121b      	asrs	r3, r3, #8
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	74bb      	strb	r3, [r7, #18]
 8002a28:	e00a      	b.n	8002a40 <NeoPixel_hsl_to_rgb+0xb0>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8002a2a:	89fb      	ldrh	r3, [r7, #14]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002a32:	7cfa      	ldrb	r2, [r7, #19]
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	121b      	asrs	r3, r3, #8
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	74bb      	strb	r3, [r7, #18]

	 m = l - (c >> 1);
 8002a40:	7cfb      	ldrb	r3, [r7, #19]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	085b      	lsrs	r3, r3, #1
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	797a      	ldrb	r2, [r7, #5]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	747b      	strb	r3, [r7, #17]
	 switch(H >> 8) {       // High byte = sextant of colorwheel
 8002a50:	897b      	ldrh	r3, [r7, #10]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	0a1b      	lsrs	r3, r3, #8
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d83a      	bhi.n	8002ad2 <NeoPixel_hsl_to_rgb+0x142>
 8002a5c:	a201      	add	r2, pc, #4	; (adr r2, 8002a64 <NeoPixel_hsl_to_rgb+0xd4>)
 8002a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a62:	bf00      	nop
 8002a64:	08002a79 	.word	0x08002a79
 8002a68:	08002a8b 	.word	0x08002a8b
 8002a6c:	08002a9d 	.word	0x08002a9d
 8002a70:	08002aaf 	.word	0x08002aaf
 8002a74:	08002ac1 	.word	0x08002ac1
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8002a78:	7cfb      	ldrb	r3, [r7, #19]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	75fb      	strb	r3, [r7, #23]
 8002a7e:	7cbb      	ldrb	r3, [r7, #18]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	75bb      	strb	r3, [r7, #22]
 8002a84:	2300      	movs	r3, #0
 8002a86:	757b      	strb	r3, [r7, #21]
 8002a88:	e02c      	b.n	8002ae4 <NeoPixel_hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8002a8a:	7cbb      	ldrb	r3, [r7, #18]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	75fb      	strb	r3, [r7, #23]
 8002a90:	7cfb      	ldrb	r3, [r7, #19]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	75bb      	strb	r3, [r7, #22]
 8002a96:	2300      	movs	r3, #0
 8002a98:	757b      	strb	r3, [r7, #21]
 8002a9a:	e023      	b.n	8002ae4 <NeoPixel_hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	75fb      	strb	r3, [r7, #23]
 8002aa0:	7cfb      	ldrb	r3, [r7, #19]
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	75bb      	strb	r3, [r7, #22]
 8002aa6:	7cbb      	ldrb	r3, [r7, #18]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	757b      	strb	r3, [r7, #21]
 8002aac:	e01a      	b.n	8002ae4 <NeoPixel_hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 8002aae:	2300      	movs	r3, #0
 8002ab0:	75fb      	strb	r3, [r7, #23]
 8002ab2:	7cbb      	ldrb	r3, [r7, #18]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	75bb      	strb	r3, [r7, #22]
 8002ab8:	7cfb      	ldrb	r3, [r7, #19]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	757b      	strb	r3, [r7, #21]
 8002abe:	e011      	b.n	8002ae4 <NeoPixel_hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 8002ac0:	7cbb      	ldrb	r3, [r7, #18]
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	75fb      	strb	r3, [r7, #23]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	75bb      	strb	r3, [r7, #22]
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	757b      	strb	r3, [r7, #21]
 8002ad0:	e008      	b.n	8002ae4 <NeoPixel_hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 8002ad2:	7cfb      	ldrb	r3, [r7, #19]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	75fb      	strb	r3, [r7, #23]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	75bb      	strb	r3, [r7, #22]
 8002adc:	7cbb      	ldrb	r3, [r7, #18]
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	757b      	strb	r3, [r7, #21]
 8002ae2:	bf00      	nop
	}
     NeoPixel_RGB_Color = (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	7c7b      	ldrb	r3, [r7, #17]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	041a      	lsls	r2, r3, #16
 8002af2:	7dbb      	ldrb	r3, [r7, #22]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	4619      	mov	r1, r3
 8002af8:	7c7b      	ldrb	r3, [r7, #17]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	440b      	add	r3, r1
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	431a      	orrs	r2, r3
 8002b02:	7d7b      	ldrb	r3, [r7, #21]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	4619      	mov	r1, r3
 8002b08:	7c7b      	ldrb	r3, [r7, #17]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	440b      	add	r3, r1
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	4a03      	ldr	r2, [pc, #12]	; (8002b20 <NeoPixel_hsl_to_rgb+0x190>)
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	e000      	b.n	8002b18 <NeoPixel_hsl_to_rgb+0x188>
	if(l == 0) return;
 8002b16:	bf00      	nop
}
 8002b18:	371c      	adds	r7, #28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	2000001c 	.word	0x2000001c

08002b24 <SCH_Init>:

sTask SCH_tasks_G[SCH_MAX_TASKS];

sTask* head = NULL;

void SCH_Init(void){
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
    unsigned char i;
    for (i = 0; i < SCH_MAX_TASKS; i++) {
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	71fb      	strb	r3, [r7, #7]
 8002b2e:	e006      	b.n	8002b3e <SCH_Init+0x1a>
        SCH_Delete_Task(i);
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 f92a 	bl	8002d8c <SCH_Delete_Task>
    for (i = 0; i < SCH_MAX_TASKS; i++) {
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	71fb      	strb	r3, [r7, #7]
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	2b27      	cmp	r3, #39	; 0x27
 8002b42:	d9f5      	bls.n	8002b30 <SCH_Init+0xc>
    }
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <SCH_Update>:
void SCH_Update(void){
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
	 unsigned char Index;
	    // NOTE: calculations are in *TICKS* (not milliseconds)
	    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8002b56:	2300      	movs	r3, #0
 8002b58:	71fb      	strb	r3, [r7, #7]
 8002b5a:	e05d      	b.n	8002c18 <SCH_Update+0xc8>
	        // Check if there is a task at this location
	        if (SCH_tasks_G[Index].pTask){
 8002b5c:	79fa      	ldrb	r2, [r7, #7]
 8002b5e:	4933      	ldr	r1, [pc, #204]	; (8002c2c <SCH_Update+0xdc>)
 8002b60:	4613      	mov	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4413      	add	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d050      	beq.n	8002c12 <SCH_Update+0xc2>
	            if (SCH_tasks_G[Index].Delay == 0) {
 8002b70:	79fa      	ldrb	r2, [r7, #7]
 8002b72:	492e      	ldr	r1, [pc, #184]	; (8002c2c <SCH_Update+0xdc>)
 8002b74:	4613      	mov	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4413      	add	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	440b      	add	r3, r1
 8002b7e:	3304      	adds	r3, #4
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d132      	bne.n	8002bec <SCH_Update+0x9c>
	                // The task is due to run
	                // Inc. the 'RunMe' flag
	                SCH_tasks_G[Index].RunMe += 1;
 8002b86:	79fa      	ldrb	r2, [r7, #7]
 8002b88:	4928      	ldr	r1, [pc, #160]	; (8002c2c <SCH_Update+0xdc>)
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	4413      	add	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	440b      	add	r3, r1
 8002b94:	330c      	adds	r3, #12
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	79fa      	ldrb	r2, [r7, #7]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	b2d8      	uxtb	r0, r3
 8002b9e:	4923      	ldr	r1, [pc, #140]	; (8002c2c <SCH_Update+0xdc>)
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	440b      	add	r3, r1
 8002baa:	330c      	adds	r3, #12
 8002bac:	4602      	mov	r2, r0
 8002bae:	701a      	strb	r2, [r3, #0]
	                if (SCH_tasks_G[Index].Period) {
 8002bb0:	79fa      	ldrb	r2, [r7, #7]
 8002bb2:	491e      	ldr	r1, [pc, #120]	; (8002c2c <SCH_Update+0xdc>)
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4413      	add	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	440b      	add	r3, r1
 8002bbe:	3308      	adds	r3, #8
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d025      	beq.n	8002c12 <SCH_Update+0xc2>
	                    // Schedule periodic tasks to run again
	                    SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8002bc6:	79f9      	ldrb	r1, [r7, #7]
 8002bc8:	79fa      	ldrb	r2, [r7, #7]
 8002bca:	4818      	ldr	r0, [pc, #96]	; (8002c2c <SCH_Update+0xdc>)
 8002bcc:	460b      	mov	r3, r1
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	440b      	add	r3, r1
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4403      	add	r3, r0
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	6819      	ldr	r1, [r3, #0]
 8002bda:	4814      	ldr	r0, [pc, #80]	; (8002c2c <SCH_Update+0xdc>)
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4403      	add	r3, r0
 8002be6:	3304      	adds	r3, #4
 8002be8:	6019      	str	r1, [r3, #0]
 8002bea:	e012      	b.n	8002c12 <SCH_Update+0xc2>
	                }
	            } else {
	                // Not yet ready to run: just decrement the delay
	                SCH_tasks_G[Index].Delay -= 1;
 8002bec:	79fa      	ldrb	r2, [r7, #7]
 8002bee:	490f      	ldr	r1, [pc, #60]	; (8002c2c <SCH_Update+0xdc>)
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	440b      	add	r3, r1
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	79fa      	ldrb	r2, [r7, #7]
 8002c00:	1e59      	subs	r1, r3, #1
 8002c02:	480a      	ldr	r0, [pc, #40]	; (8002c2c <SCH_Update+0xdc>)
 8002c04:	4613      	mov	r3, r2
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4403      	add	r3, r0
 8002c0e:	3304      	adds	r3, #4
 8002c10:	6019      	str	r1, [r3, #0]
	    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	3301      	adds	r3, #1
 8002c16:	71fb      	strb	r3, [r7, #7]
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	2b27      	cmp	r3, #39	; 0x27
 8002c1c:	d99e      	bls.n	8002b5c <SCH_Update+0xc>
/* O(1)
 * 	if(head != NULL){
		head->Delay--;
	}
 * */
}
 8002c1e:	bf00      	nop
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	200005c0 	.word	0x200005c0

08002c30 <SCH_Add_Task>:

unsigned char SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
	 	unsigned char Index = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	75fb      	strb	r3, [r7, #23]
	    // First find a gap in the array (if there is one)
	    while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8002c40:	e002      	b.n	8002c48 <SCH_Add_Task+0x18>
	    {
	       Index++;
 8002c42:	7dfb      	ldrb	r3, [r7, #23]
 8002c44:	3301      	adds	r3, #1
 8002c46:	75fb      	strb	r3, [r7, #23]
	    while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8002c48:	7dfa      	ldrb	r2, [r7, #23]
 8002c4a:	4928      	ldr	r1, [pc, #160]	; (8002cec <SCH_Add_Task+0xbc>)
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	440b      	add	r3, r1
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <SCH_Add_Task+0x32>
 8002c5c:	7dfb      	ldrb	r3, [r7, #23]
 8002c5e:	2b27      	cmp	r3, #39	; 0x27
 8002c60:	d9ef      	bls.n	8002c42 <SCH_Add_Task+0x12>
	    }
	    // Have we reached the end of the list?
	    if (Index == SCH_MAX_TASKS)
 8002c62:	7dfb      	ldrb	r3, [r7, #23]
 8002c64:	2b28      	cmp	r3, #40	; 0x28
 8002c66:	d101      	bne.n	8002c6c <SCH_Add_Task+0x3c>
	    {
	        return SCH_MAX_TASKS;
 8002c68:	2328      	movs	r3, #40	; 0x28
 8002c6a:	e039      	b.n	8002ce0 <SCH_Add_Task+0xb0>
	    }
	    // If we're here, there is a space in the task array
	    SCH_tasks_G[Index].pTask = pFunction;
 8002c6c:	7dfa      	ldrb	r2, [r7, #23]
 8002c6e:	491f      	ldr	r1, [pc, #124]	; (8002cec <SCH_Add_Task+0xbc>)
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	601a      	str	r2, [r3, #0]
	    SCH_tasks_G[Index].Delay = DELAY/TICK;
 8002c7e:	7dfa      	ldrb	r2, [r7, #23]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	491b      	ldr	r1, [pc, #108]	; (8002cf0 <SCH_Add_Task+0xc0>)
 8002c84:	fba1 1303 	umull	r1, r3, r1, r3
 8002c88:	08d9      	lsrs	r1, r3, #3
 8002c8a:	4818      	ldr	r0, [pc, #96]	; (8002cec <SCH_Add_Task+0xbc>)
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	4413      	add	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4403      	add	r3, r0
 8002c96:	3304      	adds	r3, #4
 8002c98:	6019      	str	r1, [r3, #0]
	    SCH_tasks_G[Index].Period = PERIOD/TICK;
 8002c9a:	7dfa      	ldrb	r2, [r7, #23]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4914      	ldr	r1, [pc, #80]	; (8002cf0 <SCH_Add_Task+0xc0>)
 8002ca0:	fba1 1303 	umull	r1, r3, r1, r3
 8002ca4:	08d9      	lsrs	r1, r3, #3
 8002ca6:	4811      	ldr	r0, [pc, #68]	; (8002cec <SCH_Add_Task+0xbc>)
 8002ca8:	4613      	mov	r3, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4403      	add	r3, r0
 8002cb2:	3308      	adds	r3, #8
 8002cb4:	6019      	str	r1, [r3, #0]
	    SCH_tasks_G[Index].RunMe = 0;
 8002cb6:	7dfa      	ldrb	r2, [r7, #23]
 8002cb8:	490c      	ldr	r1, [pc, #48]	; (8002cec <SCH_Add_Task+0xbc>)
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	440b      	add	r3, r1
 8002cc4:	330c      	adds	r3, #12
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	701a      	strb	r2, [r3, #0]
	    SCH_tasks_G[Index].TaskID = Index;
 8002cca:	7dfa      	ldrb	r2, [r7, #23]
 8002ccc:	7df9      	ldrb	r1, [r7, #23]
 8002cce:	4807      	ldr	r0, [pc, #28]	; (8002cec <SCH_Add_Task+0xbc>)
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4403      	add	r3, r0
 8002cda:	3314      	adds	r3, #20
 8002cdc:	6019      	str	r1, [r3, #0]
	    // return position of task (to allow later deletion)
	    return Index;
 8002cde:	7dfb      	ldrb	r3, [r7, #23]
		 }
	 }
	 return index;
	 * */

}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	371c      	adds	r7, #28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	200005c0 	.word	0x200005c0
 8002cf0:	cccccccd 	.word	0xcccccccd

08002cf4 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
    unsigned char Index;
    // Dispatches (runs) the next task (if one is ready)
    for (Index = 0; Index < SCH_MAX_TASKS; Index++){
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	71fb      	strb	r3, [r7, #7]
 8002cfe:	e03a      	b.n	8002d76 <SCH_Dispatch_Tasks+0x82>
        if (SCH_tasks_G[Index].RunMe > 0) {
 8002d00:	79fa      	ldrb	r2, [r7, #7]
 8002d02:	4921      	ldr	r1, [pc, #132]	; (8002d88 <SCH_Dispatch_Tasks+0x94>)
 8002d04:	4613      	mov	r3, r2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	4413      	add	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	440b      	add	r3, r1
 8002d0e:	330c      	adds	r3, #12
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d02c      	beq.n	8002d70 <SCH_Dispatch_Tasks+0x7c>
            (*SCH_tasks_G[Index].pTask)(); // Run the task
 8002d16:	79fa      	ldrb	r2, [r7, #7]
 8002d18:	491b      	ldr	r1, [pc, #108]	; (8002d88 <SCH_Dispatch_Tasks+0x94>)
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	4413      	add	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	440b      	add	r3, r1
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4798      	blx	r3
            SCH_tasks_G[Index].RunMe -= 1; // Reset / reduce RunMe flag
 8002d28:	79fa      	ldrb	r2, [r7, #7]
 8002d2a:	4917      	ldr	r1, [pc, #92]	; (8002d88 <SCH_Dispatch_Tasks+0x94>)
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	440b      	add	r3, r1
 8002d36:	330c      	adds	r3, #12
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	79fa      	ldrb	r2, [r7, #7]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b2d8      	uxtb	r0, r3
 8002d40:	4911      	ldr	r1, [pc, #68]	; (8002d88 <SCH_Dispatch_Tasks+0x94>)
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	440b      	add	r3, r1
 8002d4c:	330c      	adds	r3, #12
 8002d4e:	4602      	mov	r2, r0
 8002d50:	701a      	strb	r2, [r3, #0]
            // Periodic tasks will automatically run again
            // - if this is a 'one shot' task, remove it from the array
            if (SCH_tasks_G[Index].Period == 0)
 8002d52:	79fa      	ldrb	r2, [r7, #7]
 8002d54:	490c      	ldr	r1, [pc, #48]	; (8002d88 <SCH_Dispatch_Tasks+0x94>)
 8002d56:	4613      	mov	r3, r2
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	4413      	add	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	440b      	add	r3, r1
 8002d60:	3308      	adds	r3, #8
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d103      	bne.n	8002d70 <SCH_Dispatch_Tasks+0x7c>
            {
                SCH_Delete_Task(Index);
 8002d68:	79fb      	ldrb	r3, [r7, #7]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 f80e 	bl	8002d8c <SCH_Delete_Task>
    for (Index = 0; Index < SCH_MAX_TASKS; Index++){
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	3301      	adds	r3, #1
 8002d74:	71fb      	strb	r3, [r7, #7]
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	2b27      	cmp	r3, #39	; 0x27
 8002d7a:	d9c1      	bls.n	8002d00 <SCH_Dispatch_Tasks+0xc>
		head = head->pNext;
		SCH_Delete_Task(del_index);
	}
	*/

}
 8002d7c:	bf00      	nop
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	200005c0 	.word	0x200005c0

08002d8c <SCH_Delete_Task>:
void SCH_Delete_Task(const unsigned char TASK_INDEX){
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	71fb      	strb	r3, [r7, #7]
	if(SCH_tasks_G[TASK_INDEX].pTask == 0){
 8002d96:	79fa      	ldrb	r2, [r7, #7]
 8002d98:	491f      	ldr	r1, [pc, #124]	; (8002e18 <SCH_Delete_Task+0x8c>)
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	440b      	add	r3, r1
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d031      	beq.n	8002e0e <SCH_Delete_Task+0x82>
		return ;
	}
	else{
	    SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 8002daa:	79fa      	ldrb	r2, [r7, #7]
 8002dac:	491a      	ldr	r1, [pc, #104]	; (8002e18 <SCH_Delete_Task+0x8c>)
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	440b      	add	r3, r1
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
	    SCH_tasks_G[TASK_INDEX].Delay = 0;
 8002dbc:	79fa      	ldrb	r2, [r7, #7]
 8002dbe:	4916      	ldr	r1, [pc, #88]	; (8002e18 <SCH_Delete_Task+0x8c>)
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	440b      	add	r3, r1
 8002dca:	3304      	adds	r3, #4
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
	    SCH_tasks_G[TASK_INDEX].Period = 0;
 8002dd0:	79fa      	ldrb	r2, [r7, #7]
 8002dd2:	4911      	ldr	r1, [pc, #68]	; (8002e18 <SCH_Delete_Task+0x8c>)
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	440b      	add	r3, r1
 8002dde:	3308      	adds	r3, #8
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
	    SCH_tasks_G[TASK_INDEX].pNext = 0;
 8002de4:	79fa      	ldrb	r2, [r7, #7]
 8002de6:	490c      	ldr	r1, [pc, #48]	; (8002e18 <SCH_Delete_Task+0x8c>)
 8002de8:	4613      	mov	r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	4413      	add	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	440b      	add	r3, r1
 8002df2:	3310      	adds	r3, #16
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
	    SCH_tasks_G[TASK_INDEX].TaskID = 0;
 8002df8:	79fa      	ldrb	r2, [r7, #7]
 8002dfa:	4907      	ldr	r1, [pc, #28]	; (8002e18 <SCH_Delete_Task+0x8c>)
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	440b      	add	r3, r1
 8002e06:	3314      	adds	r3, #20
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	e000      	b.n	8002e10 <SCH_Delete_Task+0x84>
		return ;
 8002e0e:	bf00      	nop
	}
}
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr
 8002e18:	200005c0 	.word	0x200005c0

08002e1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e22:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <HAL_MspInit+0x5c>)
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	4a14      	ldr	r2, [pc, #80]	; (8002e78 <HAL_MspInit+0x5c>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6193      	str	r3, [r2, #24]
 8002e2e:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <HAL_MspInit+0x5c>)
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	60bb      	str	r3, [r7, #8]
 8002e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e3a:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <HAL_MspInit+0x5c>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	4a0e      	ldr	r2, [pc, #56]	; (8002e78 <HAL_MspInit+0x5c>)
 8002e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e44:	61d3      	str	r3, [r2, #28]
 8002e46:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <HAL_MspInit+0x5c>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	607b      	str	r3, [r7, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e52:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <HAL_MspInit+0x60>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	4a04      	ldr	r2, [pc, #16]	; (8002e7c <HAL_MspInit+0x60>)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40010000 	.word	0x40010000

08002e80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e88:	f107 0310 	add.w	r3, r7, #16
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a14      	ldr	r2, [pc, #80]	; (8002eec <HAL_ADC_MspInit+0x6c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d121      	bne.n	8002ee4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ea0:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <HAL_ADC_MspInit+0x70>)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	4a12      	ldr	r2, [pc, #72]	; (8002ef0 <HAL_ADC_MspInit+0x70>)
 8002ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eaa:	6193      	str	r3, [r2, #24]
 8002eac:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <HAL_ADC_MspInit+0x70>)
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <HAL_ADC_MspInit+0x70>)
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	4a0c      	ldr	r2, [pc, #48]	; (8002ef0 <HAL_ADC_MspInit+0x70>)
 8002ebe:	f043 0310 	orr.w	r3, r3, #16
 8002ec2:	6193      	str	r3, [r2, #24]
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <HAL_ADC_MspInit+0x70>)
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ed0:	2308      	movs	r3, #8
 8002ed2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed8:	f107 0310 	add.w	r3, r7, #16
 8002edc:	4619      	mov	r1, r3
 8002ede:	4805      	ldr	r0, [pc, #20]	; (8002ef4 <HAL_ADC_MspInit+0x74>)
 8002ee0:	f001 fa98 	bl	8004414 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ee4:	bf00      	nop
 8002ee6:	3720      	adds	r7, #32
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40012400 	.word	0x40012400
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40011000 	.word	0x40011000

08002ef8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08a      	sub	sp, #40	; 0x28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f00:	f107 0314 	add.w	r3, r7, #20
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a25      	ldr	r2, [pc, #148]	; (8002fa8 <HAL_I2C_MspInit+0xb0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d142      	bne.n	8002f9e <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f18:	4b24      	ldr	r3, [pc, #144]	; (8002fac <HAL_I2C_MspInit+0xb4>)
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	4a23      	ldr	r2, [pc, #140]	; (8002fac <HAL_I2C_MspInit+0xb4>)
 8002f1e:	f043 0308 	orr.w	r3, r3, #8
 8002f22:	6193      	str	r3, [r2, #24]
 8002f24:	4b21      	ldr	r3, [pc, #132]	; (8002fac <HAL_I2C_MspInit+0xb4>)
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f30:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f36:	2312      	movs	r3, #18
 8002f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3e:	f107 0314 	add.w	r3, r7, #20
 8002f42:	4619      	mov	r1, r3
 8002f44:	481a      	ldr	r0, [pc, #104]	; (8002fb0 <HAL_I2C_MspInit+0xb8>)
 8002f46:	f001 fa65 	bl	8004414 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002f4a:	4b1a      	ldr	r3, [pc, #104]	; (8002fb4 <HAL_I2C_MspInit+0xbc>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	f043 0302 	orr.w	r3, r3, #2
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f60:	4a14      	ldr	r2, [pc, #80]	; (8002fb4 <HAL_I2C_MspInit+0xbc>)
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f66:	4b11      	ldr	r3, [pc, #68]	; (8002fac <HAL_I2C_MspInit+0xb4>)
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	4a10      	ldr	r2, [pc, #64]	; (8002fac <HAL_I2C_MspInit+0xb4>)
 8002f6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f70:	61d3      	str	r3, [r2, #28]
 8002f72:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <HAL_I2C_MspInit+0xb4>)
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2100      	movs	r1, #0
 8002f82:	201f      	movs	r0, #31
 8002f84:	f000 ff61 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002f88:	201f      	movs	r0, #31
 8002f8a:	f000 ff7a 	bl	8003e82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2100      	movs	r1, #0
 8002f92:	2020      	movs	r0, #32
 8002f94:	f000 ff59 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002f98:	2020      	movs	r0, #32
 8002f9a:	f000 ff72 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f9e:	bf00      	nop
 8002fa0:	3728      	adds	r7, #40	; 0x28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40005400 	.word	0x40005400
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40010c00 	.word	0x40010c00
 8002fb4:	40010000 	.word	0x40010000

08002fb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a3b      	ldr	r2, [pc, #236]	; (80030b4 <HAL_TIM_Base_MspInit+0xfc>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d133      	bne.n	8003032 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fca:	4b3b      	ldr	r3, [pc, #236]	; (80030b8 <HAL_TIM_Base_MspInit+0x100>)
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	4a3a      	ldr	r2, [pc, #232]	; (80030b8 <HAL_TIM_Base_MspInit+0x100>)
 8002fd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fd4:	6193      	str	r3, [r2, #24]
 8002fd6:	4b38      	ldr	r3, [pc, #224]	; (80030b8 <HAL_TIM_Base_MspInit+0x100>)
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8002fe2:	4b36      	ldr	r3, [pc, #216]	; (80030bc <HAL_TIM_Base_MspInit+0x104>)
 8002fe4:	4a36      	ldr	r2, [pc, #216]	; (80030c0 <HAL_TIM_Base_MspInit+0x108>)
 8002fe6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fe8:	4b34      	ldr	r3, [pc, #208]	; (80030bc <HAL_TIM_Base_MspInit+0x104>)
 8002fea:	2210      	movs	r2, #16
 8002fec:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fee:	4b33      	ldr	r3, [pc, #204]	; (80030bc <HAL_TIM_Base_MspInit+0x104>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002ff4:	4b31      	ldr	r3, [pc, #196]	; (80030bc <HAL_TIM_Base_MspInit+0x104>)
 8002ff6:	2280      	movs	r2, #128	; 0x80
 8002ff8:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ffa:	4b30      	ldr	r3, [pc, #192]	; (80030bc <HAL_TIM_Base_MspInit+0x104>)
 8002ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003000:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003002:	4b2e      	ldr	r3, [pc, #184]	; (80030bc <HAL_TIM_Base_MspInit+0x104>)
 8003004:	2200      	movs	r2, #0
 8003006:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8003008:	4b2c      	ldr	r3, [pc, #176]	; (80030bc <HAL_TIM_Base_MspInit+0x104>)
 800300a:	2220      	movs	r2, #32
 800300c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800300e:	4b2b      	ldr	r3, [pc, #172]	; (80030bc <HAL_TIM_Base_MspInit+0x104>)
 8003010:	2200      	movs	r2, #0
 8003012:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003014:	4829      	ldr	r0, [pc, #164]	; (80030bc <HAL_TIM_Base_MspInit+0x104>)
 8003016:	f000 ff4f 	bl	8003eb8 <HAL_DMA_Init>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 8003020:	f7ff fa01 	bl	8002426 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a25      	ldr	r2, [pc, #148]	; (80030bc <HAL_TIM_Base_MspInit+0x104>)
 8003028:	625a      	str	r2, [r3, #36]	; 0x24
 800302a:	4a24      	ldr	r2, [pc, #144]	; (80030bc <HAL_TIM_Base_MspInit+0x104>)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003030:	e03c      	b.n	80030ac <HAL_TIM_Base_MspInit+0xf4>
  else if(htim_base->Instance==TIM2)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303a:	d114      	bne.n	8003066 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800303c:	4b1e      	ldr	r3, [pc, #120]	; (80030b8 <HAL_TIM_Base_MspInit+0x100>)
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	4a1d      	ldr	r2, [pc, #116]	; (80030b8 <HAL_TIM_Base_MspInit+0x100>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	61d3      	str	r3, [r2, #28]
 8003048:	4b1b      	ldr	r3, [pc, #108]	; (80030b8 <HAL_TIM_Base_MspInit+0x100>)
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003054:	2200      	movs	r2, #0
 8003056:	2100      	movs	r1, #0
 8003058:	201c      	movs	r0, #28
 800305a:	f000 fef6 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800305e:	201c      	movs	r0, #28
 8003060:	f000 ff0f 	bl	8003e82 <HAL_NVIC_EnableIRQ>
}
 8003064:	e022      	b.n	80030ac <HAL_TIM_Base_MspInit+0xf4>
  else if(htim_base->Instance==TIM3)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a16      	ldr	r2, [pc, #88]	; (80030c4 <HAL_TIM_Base_MspInit+0x10c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d10c      	bne.n	800308a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003070:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <HAL_TIM_Base_MspInit+0x100>)
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	4a10      	ldr	r2, [pc, #64]	; (80030b8 <HAL_TIM_Base_MspInit+0x100>)
 8003076:	f043 0302 	orr.w	r3, r3, #2
 800307a:	61d3      	str	r3, [r2, #28]
 800307c:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <HAL_TIM_Base_MspInit+0x100>)
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	68fb      	ldr	r3, [r7, #12]
}
 8003088:	e010      	b.n	80030ac <HAL_TIM_Base_MspInit+0xf4>
  else if(htim_base->Instance==TIM4)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a0e      	ldr	r2, [pc, #56]	; (80030c8 <HAL_TIM_Base_MspInit+0x110>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d10b      	bne.n	80030ac <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003094:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <HAL_TIM_Base_MspInit+0x100>)
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <HAL_TIM_Base_MspInit+0x100>)
 800309a:	f043 0304 	orr.w	r3, r3, #4
 800309e:	61d3      	str	r3, [r2, #28]
 80030a0:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_TIM_Base_MspInit+0x100>)
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	68bb      	ldr	r3, [r7, #8]
}
 80030ac:	bf00      	nop
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40012c00 	.word	0x40012c00
 80030b8:	40021000 	.word	0x40021000
 80030bc:	200004c4 	.word	0x200004c4
 80030c0:	4002001c 	.word	0x4002001c
 80030c4:	40000400 	.word	0x40000400
 80030c8:	40000800 	.word	0x40000800

080030cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08a      	sub	sp, #40	; 0x28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d4:	f107 0314 	add.w	r3, r7, #20
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a28      	ldr	r2, [pc, #160]	; (8003188 <HAL_TIM_MspPostInit+0xbc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d119      	bne.n	8003120 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ec:	4b27      	ldr	r3, [pc, #156]	; (800318c <HAL_TIM_MspPostInit+0xc0>)
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	4a26      	ldr	r2, [pc, #152]	; (800318c <HAL_TIM_MspPostInit+0xc0>)
 80030f2:	f043 0304 	orr.w	r3, r3, #4
 80030f6:	6193      	str	r3, [r2, #24]
 80030f8:	4b24      	ldr	r3, [pc, #144]	; (800318c <HAL_TIM_MspPostInit+0xc0>)
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003104:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310a:	2302      	movs	r3, #2
 800310c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310e:	2302      	movs	r3, #2
 8003110:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003112:	f107 0314 	add.w	r3, r7, #20
 8003116:	4619      	mov	r1, r3
 8003118:	481d      	ldr	r0, [pc, #116]	; (8003190 <HAL_TIM_MspPostInit+0xc4>)
 800311a:	f001 f97b 	bl	8004414 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800311e:	e02f      	b.n	8003180 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003128:	d12a      	bne.n	8003180 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800312a:	4b18      	ldr	r3, [pc, #96]	; (800318c <HAL_TIM_MspPostInit+0xc0>)
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	4a17      	ldr	r2, [pc, #92]	; (800318c <HAL_TIM_MspPostInit+0xc0>)
 8003130:	f043 0304 	orr.w	r3, r3, #4
 8003134:	6193      	str	r3, [r2, #24]
 8003136:	4b15      	ldr	r3, [pc, #84]	; (800318c <HAL_TIM_MspPostInit+0xc0>)
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003148:	2302      	movs	r3, #2
 800314a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314c:	2302      	movs	r3, #2
 800314e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003150:	f107 0314 	add.w	r3, r7, #20
 8003154:	4619      	mov	r1, r3
 8003156:	480e      	ldr	r0, [pc, #56]	; (8003190 <HAL_TIM_MspPostInit+0xc4>)
 8003158:	f001 f95c 	bl	8004414 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800315c:	4b0d      	ldr	r3, [pc, #52]	; (8003194 <HAL_TIM_MspPostInit+0xc8>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
 800317a:	4a06      	ldr	r2, [pc, #24]	; (8003194 <HAL_TIM_MspPostInit+0xc8>)
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	6053      	str	r3, [r2, #4]
}
 8003180:	bf00      	nop
 8003182:	3728      	adds	r7, #40	; 0x28
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40012c00 	.word	0x40012c00
 800318c:	40021000 	.word	0x40021000
 8003190:	40010800 	.word	0x40010800
 8003194:	40010000 	.word	0x40010000

08003198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a0:	f107 0310 	add.w	r3, r7, #16
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	605a      	str	r2, [r3, #4]
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a19      	ldr	r2, [pc, #100]	; (8003218 <HAL_UART_MspInit+0x80>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d12b      	bne.n	8003210 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031b8:	4b18      	ldr	r3, [pc, #96]	; (800321c <HAL_UART_MspInit+0x84>)
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	4a17      	ldr	r2, [pc, #92]	; (800321c <HAL_UART_MspInit+0x84>)
 80031be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c2:	61d3      	str	r3, [r2, #28]
 80031c4:	4b15      	ldr	r3, [pc, #84]	; (800321c <HAL_UART_MspInit+0x84>)
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d0:	4b12      	ldr	r3, [pc, #72]	; (800321c <HAL_UART_MspInit+0x84>)
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	4a11      	ldr	r2, [pc, #68]	; (800321c <HAL_UART_MspInit+0x84>)
 80031d6:	f043 0304 	orr.w	r3, r3, #4
 80031da:	6193      	str	r3, [r2, #24]
 80031dc:	4b0f      	ldr	r3, [pc, #60]	; (800321c <HAL_UART_MspInit+0x84>)
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80031e8:	230c      	movs	r3, #12
 80031ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ec:	2302      	movs	r3, #2
 80031ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f0:	2302      	movs	r3, #2
 80031f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f4:	f107 0310 	add.w	r3, r7, #16
 80031f8:	4619      	mov	r1, r3
 80031fa:	4809      	ldr	r0, [pc, #36]	; (8003220 <HAL_UART_MspInit+0x88>)
 80031fc:	f001 f90a 	bl	8004414 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003200:	2200      	movs	r2, #0
 8003202:	2100      	movs	r1, #0
 8003204:	2026      	movs	r0, #38	; 0x26
 8003206:	f000 fe20 	bl	8003e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800320a:	2026      	movs	r0, #38	; 0x26
 800320c:	f000 fe39 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003210:	bf00      	nop
 8003212:	3720      	adds	r7, #32
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40004400 	.word	0x40004400
 800321c:	40021000 	.word	0x40021000
 8003220:	40010800 	.word	0x40010800

08003224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003228:	e7fe      	b.n	8003228 <NMI_Handler+0x4>

0800322a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800322a:	b480      	push	{r7}
 800322c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800322e:	e7fe      	b.n	800322e <HardFault_Handler+0x4>

08003230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003234:	e7fe      	b.n	8003234 <MemManage_Handler+0x4>

08003236 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003236:	b480      	push	{r7}
 8003238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800323a:	e7fe      	b.n	800323a <BusFault_Handler+0x4>

0800323c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003240:	e7fe      	b.n	8003240 <UsageFault_Handler+0x4>

08003242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003242:	b480      	push	{r7}
 8003244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003246:	bf00      	nop
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800324e:	b480      	push	{r7}
 8003250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr

0800325a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800325a:	b480      	push	{r7}
 800325c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800325e:	bf00      	nop
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr

08003266 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800326a:	f000 f9b1 	bl	80035d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003278:	4802      	ldr	r0, [pc, #8]	; (8003284 <DMA1_Channel2_IRQHandler+0x10>)
 800327a:	f000 ff8b 	bl	8004194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	200004c4 	.word	0x200004c4

08003288 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800328c:	4802      	ldr	r0, [pc, #8]	; (8003298 <TIM2_IRQHandler+0x10>)
 800328e:	f005 f9bd 	bl	800860c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	200003ec 	.word	0x200003ec

0800329c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80032a0:	4802      	ldr	r0, [pc, #8]	; (80032ac <I2C1_EV_IRQHandler+0x10>)
 80032a2:	f002 f87d 	bl	80053a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000350 	.word	0x20000350

080032b0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80032b4:	4802      	ldr	r0, [pc, #8]	; (80032c0 <I2C1_ER_IRQHandler+0x10>)
 80032b6:	f002 f9e4 	bl	8005682 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000350 	.word	0x20000350

080032c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80032c8:	4802      	ldr	r0, [pc, #8]	; (80032d4 <USART2_IRQHandler+0x10>)
 80032ca:	f006 f983 	bl	80095d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80032ce:	bf00      	nop
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20000508 	.word	0x20000508

080032d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80032dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80032e0:	f001 fa4c 	bl	800477c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80032e4:	bf00      	nop
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return 1;
 80032ec:	2301      	movs	r3, #1
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr

080032f6 <_kill>:

int _kill(int pid, int sig)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
 80032fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003300:	f006 fee8 	bl	800a0d4 <__errno>
 8003304:	4603      	mov	r3, r0
 8003306:	2216      	movs	r2, #22
 8003308:	601a      	str	r2, [r3, #0]
  return -1;
 800330a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <_exit>:

void _exit (int status)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b082      	sub	sp, #8
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800331e:	f04f 31ff 	mov.w	r1, #4294967295
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff ffe7 	bl	80032f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003328:	e7fe      	b.n	8003328 <_exit+0x12>

0800332a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b086      	sub	sp, #24
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	e00a      	b.n	8003352 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800333c:	f3af 8000 	nop.w
 8003340:	4601      	mov	r1, r0
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	60ba      	str	r2, [r7, #8]
 8003348:	b2ca      	uxtb	r2, r1
 800334a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	3301      	adds	r3, #1
 8003350:	617b      	str	r3, [r7, #20]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	429a      	cmp	r2, r3
 8003358:	dbf0      	blt.n	800333c <_read+0x12>
  }

  return len;
 800335a:	687b      	ldr	r3, [r7, #4]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	e009      	b.n	800338a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	60ba      	str	r2, [r7, #8]
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	3301      	adds	r3, #1
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	429a      	cmp	r2, r3
 8003390:	dbf1      	blt.n	8003376 <_write+0x12>
  }
  return len;
 8003392:	687b      	ldr	r3, [r7, #4]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <_close>:

int _close(int file)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr

080033b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033c2:	605a      	str	r2, [r3, #4]
  return 0;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr

080033d0 <_isatty>:

int _isatty(int file)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033d8:	2301      	movs	r3, #1
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr

080033e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr

080033fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003404:	4a14      	ldr	r2, [pc, #80]	; (8003458 <_sbrk+0x5c>)
 8003406:	4b15      	ldr	r3, [pc, #84]	; (800345c <_sbrk+0x60>)
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003410:	4b13      	ldr	r3, [pc, #76]	; (8003460 <_sbrk+0x64>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d102      	bne.n	800341e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003418:	4b11      	ldr	r3, [pc, #68]	; (8003460 <_sbrk+0x64>)
 800341a:	4a12      	ldr	r2, [pc, #72]	; (8003464 <_sbrk+0x68>)
 800341c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800341e:	4b10      	ldr	r3, [pc, #64]	; (8003460 <_sbrk+0x64>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4413      	add	r3, r2
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	429a      	cmp	r2, r3
 800342a:	d207      	bcs.n	800343c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800342c:	f006 fe52 	bl	800a0d4 <__errno>
 8003430:	4603      	mov	r3, r0
 8003432:	220c      	movs	r2, #12
 8003434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003436:	f04f 33ff 	mov.w	r3, #4294967295
 800343a:	e009      	b.n	8003450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800343c:	4b08      	ldr	r3, [pc, #32]	; (8003460 <_sbrk+0x64>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003442:	4b07      	ldr	r3, [pc, #28]	; (8003460 <_sbrk+0x64>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4413      	add	r3, r2
 800344a:	4a05      	ldr	r2, [pc, #20]	; (8003460 <_sbrk+0x64>)
 800344c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800344e:	68fb      	ldr	r3, [r7, #12]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	20005000 	.word	0x20005000
 800345c:	00000400 	.word	0x00000400
 8003460:	20000980 	.word	0x20000980
 8003464:	200009b0 	.word	0x200009b0

08003468 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800346c:	bf00      	nop
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <timerRun>:
void setTimer3 (int duration) {
	timer3_counter = duration/Timer_Cycle;
	timer3_flag = 0;
}

void timerRun(){
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8003478:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <timerRun+0x6c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	dd0b      	ble.n	8003498 <timerRun+0x24>
		timer1_counter--;
 8003480:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <timerRun+0x6c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3b01      	subs	r3, #1
 8003486:	4a16      	ldr	r2, [pc, #88]	; (80034e0 <timerRun+0x6c>)
 8003488:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 800348a:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <timerRun+0x6c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	dc02      	bgt.n	8003498 <timerRun+0x24>
			timer1_flag = 1;
 8003492:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <timerRun+0x70>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 8003498:	4b13      	ldr	r3, [pc, #76]	; (80034e8 <timerRun+0x74>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	dd0b      	ble.n	80034b8 <timerRun+0x44>
		timer2_counter--;
 80034a0:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <timerRun+0x74>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	4a10      	ldr	r2, [pc, #64]	; (80034e8 <timerRun+0x74>)
 80034a8:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 80034aa:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <timerRun+0x74>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	dc02      	bgt.n	80034b8 <timerRun+0x44>
			timer2_flag = 1;
 80034b2:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <timerRun+0x78>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 80034b8:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <timerRun+0x7c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	dd0b      	ble.n	80034d8 <timerRun+0x64>
		timer3_counter--;
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <timerRun+0x7c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3b01      	subs	r3, #1
 80034c6:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <timerRun+0x7c>)
 80034c8:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 80034ca:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <timerRun+0x7c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	dc02      	bgt.n	80034d8 <timerRun+0x64>
			timer3_flag = 1;
 80034d2:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <timerRun+0x80>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80034d8:	bf00      	nop
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr
 80034e0:	20000984 	.word	0x20000984
 80034e4:	20000990 	.word	0x20000990
 80034e8:	20000988 	.word	0x20000988
 80034ec:	20000994 	.word	0x20000994
 80034f0:	2000098c 	.word	0x2000098c
 80034f4:	20000998 	.word	0x20000998

080034f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034f8:	f7ff ffb6 	bl	8003468 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034fc:	480b      	ldr	r0, [pc, #44]	; (800352c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80034fe:	490c      	ldr	r1, [pc, #48]	; (8003530 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003500:	4a0c      	ldr	r2, [pc, #48]	; (8003534 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003504:	e002      	b.n	800350c <LoopCopyDataInit>

08003506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800350a:	3304      	adds	r3, #4

0800350c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800350c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800350e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003510:	d3f9      	bcc.n	8003506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003512:	4a09      	ldr	r2, [pc, #36]	; (8003538 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003514:	4c09      	ldr	r4, [pc, #36]	; (800353c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003518:	e001      	b.n	800351e <LoopFillZerobss>

0800351a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800351a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800351c:	3204      	adds	r2, #4

0800351e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800351e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003520:	d3fb      	bcc.n	800351a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003522:	f006 fddd 	bl	800a0e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003526:	f7fe fc5b 	bl	8001de0 <main>
  bx lr
 800352a:	4770      	bx	lr
  ldr r0, =_sdata
 800352c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003530:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8003534:	0800d3b4 	.word	0x0800d3b4
  ldr r2, =_sbss
 8003538:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 800353c:	200009b0 	.word	0x200009b0

08003540 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003540:	e7fe      	b.n	8003540 <ADC1_2_IRQHandler>
	...

08003544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003548:	4b08      	ldr	r3, [pc, #32]	; (800356c <HAL_Init+0x28>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a07      	ldr	r2, [pc, #28]	; (800356c <HAL_Init+0x28>)
 800354e:	f043 0310 	orr.w	r3, r3, #16
 8003552:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003554:	2003      	movs	r0, #3
 8003556:	f000 fc6d 	bl	8003e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800355a:	2000      	movs	r0, #0
 800355c:	f000 f808 	bl	8003570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003560:	f7ff fc5c 	bl	8002e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40022000 	.word	0x40022000

08003570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003578:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <HAL_InitTick+0x54>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <HAL_InitTick+0x58>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	4619      	mov	r1, r3
 8003582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003586:	fbb3 f3f1 	udiv	r3, r3, r1
 800358a:	fbb2 f3f3 	udiv	r3, r2, r3
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fc85 	bl	8003e9e <HAL_SYSTICK_Config>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e00e      	b.n	80035bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b0f      	cmp	r3, #15
 80035a2:	d80a      	bhi.n	80035ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035a4:	2200      	movs	r2, #0
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ac:	f000 fc4d 	bl	8003e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035b0:	4a06      	ldr	r2, [pc, #24]	; (80035cc <HAL_InitTick+0x5c>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	e000      	b.n	80035bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	20000080 	.word	0x20000080
 80035c8:	20000088 	.word	0x20000088
 80035cc:	20000084 	.word	0x20000084

080035d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035d4:	4b05      	ldr	r3, [pc, #20]	; (80035ec <HAL_IncTick+0x1c>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	461a      	mov	r2, r3
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_IncTick+0x20>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4413      	add	r3, r2
 80035e0:	4a03      	ldr	r2, [pc, #12]	; (80035f0 <HAL_IncTick+0x20>)
 80035e2:	6013      	str	r3, [r2, #0]
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr
 80035ec:	20000088 	.word	0x20000088
 80035f0:	2000099c 	.word	0x2000099c

080035f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return uwTick;
 80035f8:	4b02      	ldr	r3, [pc, #8]	; (8003604 <HAL_GetTick+0x10>)
 80035fa:	681b      	ldr	r3, [r3, #0]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr
 8003604:	2000099c 	.word	0x2000099c

08003608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003610:	f7ff fff0 	bl	80035f4 <HAL_GetTick>
 8003614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003620:	d005      	beq.n	800362e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <HAL_Delay+0x44>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4413      	add	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800362e:	bf00      	nop
 8003630:	f7ff ffe0 	bl	80035f4 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	429a      	cmp	r2, r3
 800363e:	d8f7      	bhi.n	8003630 <HAL_Delay+0x28>
  {
  }
}
 8003640:	bf00      	nop
 8003642:	bf00      	nop
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000088 	.word	0x20000088

08003650 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003660:	2300      	movs	r3, #0
 8003662:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e0be      	b.n	80037f0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	2b00      	cmp	r3, #0
 800367e:	d109      	bne.n	8003694 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff fbf6 	bl	8002e80 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fabf 	bl	8003c18 <ADC_ConversionStop_Disable>
 800369a:	4603      	mov	r3, r0
 800369c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	f003 0310 	and.w	r3, r3, #16
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f040 8099 	bne.w	80037de <HAL_ADC_Init+0x18e>
 80036ac:	7dfb      	ldrb	r3, [r7, #23]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f040 8095 	bne.w	80037de <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036bc:	f023 0302 	bic.w	r3, r3, #2
 80036c0:	f043 0202 	orr.w	r2, r3, #2
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80036d0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	7b1b      	ldrb	r3, [r3, #12]
 80036d6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80036d8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e8:	d003      	beq.n	80036f2 <HAL_ADC_Init+0xa2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d102      	bne.n	80036f8 <HAL_ADC_Init+0xa8>
 80036f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036f6:	e000      	b.n	80036fa <HAL_ADC_Init+0xaa>
 80036f8:	2300      	movs	r3, #0
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	7d1b      	ldrb	r3, [r3, #20]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d119      	bne.n	800373c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	7b1b      	ldrb	r3, [r3, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d109      	bne.n	8003724 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	3b01      	subs	r3, #1
 8003716:	035a      	lsls	r2, r3, #13
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	e00b      	b.n	800373c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003728:	f043 0220 	orr.w	r2, r3, #32
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	f043 0201 	orr.w	r2, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	430a      	orrs	r2, r1
 800374e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	4b28      	ldr	r3, [pc, #160]	; (80037f8 <HAL_ADC_Init+0x1a8>)
 8003758:	4013      	ands	r3, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	68b9      	ldr	r1, [r7, #8]
 8003760:	430b      	orrs	r3, r1
 8003762:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376c:	d003      	beq.n	8003776 <HAL_ADC_Init+0x126>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d104      	bne.n	8003780 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	3b01      	subs	r3, #1
 800377c:	051b      	lsls	r3, r3, #20
 800377e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	430a      	orrs	r2, r1
 8003792:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	4b18      	ldr	r3, [pc, #96]	; (80037fc <HAL_ADC_Init+0x1ac>)
 800379c:	4013      	ands	r3, r2
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d10b      	bne.n	80037bc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	f023 0303 	bic.w	r3, r3, #3
 80037b2:	f043 0201 	orr.w	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80037ba:	e018      	b.n	80037ee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c0:	f023 0312 	bic.w	r3, r3, #18
 80037c4:	f043 0210 	orr.w	r2, r3, #16
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	f043 0201 	orr.w	r2, r3, #1
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80037dc:	e007      	b.n	80037ee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	f043 0210 	orr.w	r2, r3, #16
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	ffe1f7fd 	.word	0xffe1f7fd
 80037fc:	ff1f0efe 	.word	0xff1f0efe

08003800 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_ADC_Start+0x1a>
 8003816:	2302      	movs	r3, #2
 8003818:	e098      	b.n	800394c <HAL_ADC_Start+0x14c>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f99e 	bl	8003b64 <ADC_Enable>
 8003828:	4603      	mov	r3, r0
 800382a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	2b00      	cmp	r3, #0
 8003830:	f040 8087 	bne.w	8003942 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a41      	ldr	r2, [pc, #260]	; (8003954 <HAL_ADC_Start+0x154>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d105      	bne.n	800385e <HAL_ADC_Start+0x5e>
 8003852:	4b41      	ldr	r3, [pc, #260]	; (8003958 <HAL_ADC_Start+0x158>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d115      	bne.n	800388a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003862:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003874:	2b00      	cmp	r3, #0
 8003876:	d026      	beq.n	80038c6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003880:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003888:	e01d      	b.n	80038c6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a2f      	ldr	r2, [pc, #188]	; (8003958 <HAL_ADC_Start+0x158>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d004      	beq.n	80038aa <HAL_ADC_Start+0xaa>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a2b      	ldr	r2, [pc, #172]	; (8003954 <HAL_ADC_Start+0x154>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d10d      	bne.n	80038c6 <HAL_ADC_Start+0xc6>
 80038aa:	4b2b      	ldr	r3, [pc, #172]	; (8003958 <HAL_ADC_Start+0x158>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d007      	beq.n	80038c6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d006      	beq.n	80038e0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d6:	f023 0206 	bic.w	r2, r3, #6
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80038de:	e002      	b.n	80038e6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f06f 0202 	mvn.w	r2, #2
 80038f6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003902:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003906:	d113      	bne.n	8003930 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800390c:	4a11      	ldr	r2, [pc, #68]	; (8003954 <HAL_ADC_Start+0x154>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d105      	bne.n	800391e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003912:	4b11      	ldr	r3, [pc, #68]	; (8003958 <HAL_ADC_Start+0x158>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800391a:	2b00      	cmp	r3, #0
 800391c:	d108      	bne.n	8003930 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800392c:	609a      	str	r2, [r3, #8]
 800392e:	e00c      	b.n	800394a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800393e:	609a      	str	r2, [r3, #8]
 8003940:	e003      	b.n	800394a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800394a:	7bfb      	ldrb	r3, [r7, #15]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40012800 	.word	0x40012800
 8003958:	40012400 	.word	0x40012400

0800395c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr

08003974 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x20>
 8003990:	2302      	movs	r3, #2
 8003992:	e0dc      	b.n	8003b4e <HAL_ADC_ConfigChannel+0x1da>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b06      	cmp	r3, #6
 80039a2:	d81c      	bhi.n	80039de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	3b05      	subs	r3, #5
 80039b6:	221f      	movs	r2, #31
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	4019      	ands	r1, r3
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	3b05      	subs	r3, #5
 80039d0:	fa00 f203 	lsl.w	r2, r0, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	635a      	str	r2, [r3, #52]	; 0x34
 80039dc:	e03c      	b.n	8003a58 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b0c      	cmp	r3, #12
 80039e4:	d81c      	bhi.n	8003a20 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	3b23      	subs	r3, #35	; 0x23
 80039f8:	221f      	movs	r2, #31
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	4019      	ands	r1, r3
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	6818      	ldr	r0, [r3, #0]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	3b23      	subs	r3, #35	; 0x23
 8003a12:	fa00 f203 	lsl.w	r2, r0, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a1e:	e01b      	b.n	8003a58 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	3b41      	subs	r3, #65	; 0x41
 8003a32:	221f      	movs	r2, #31
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	4019      	ands	r1, r3
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	3b41      	subs	r3, #65	; 0x41
 8003a4c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b09      	cmp	r3, #9
 8003a5e:	d91c      	bls.n	8003a9a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68d9      	ldr	r1, [r3, #12]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	4413      	add	r3, r2
 8003a70:	3b1e      	subs	r3, #30
 8003a72:	2207      	movs	r2, #7
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	43db      	mvns	r3, r3
 8003a7a:	4019      	ands	r1, r3
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	6898      	ldr	r0, [r3, #8]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	4613      	mov	r3, r2
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	4413      	add	r3, r2
 8003a8a:	3b1e      	subs	r3, #30
 8003a8c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	60da      	str	r2, [r3, #12]
 8003a98:	e019      	b.n	8003ace <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6919      	ldr	r1, [r3, #16]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	4413      	add	r3, r2
 8003aaa:	2207      	movs	r2, #7
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	4019      	ands	r1, r3
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	6898      	ldr	r0, [r3, #8]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	4413      	add	r3, r2
 8003ac2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b10      	cmp	r3, #16
 8003ad4:	d003      	beq.n	8003ade <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003ada:	2b11      	cmp	r3, #17
 8003adc:	d132      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1d      	ldr	r2, [pc, #116]	; (8003b58 <HAL_ADC_ConfigChannel+0x1e4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d125      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d126      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003b04:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b10      	cmp	r3, #16
 8003b0c:	d11a      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b0e:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <HAL_ADC_ConfigChannel+0x1e8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a13      	ldr	r2, [pc, #76]	; (8003b60 <HAL_ADC_ConfigChannel+0x1ec>)
 8003b14:	fba2 2303 	umull	r2, r3, r2, r3
 8003b18:	0c9a      	lsrs	r2, r3, #18
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b24:	e002      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f9      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x1b2>
 8003b32:	e007      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b38:	f043 0220 	orr.w	r2, r3, #32
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr
 8003b58:	40012400 	.word	0x40012400
 8003b5c:	20000080 	.word	0x20000080
 8003b60:	431bde83 	.word	0x431bde83

08003b64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d040      	beq.n	8003c04 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0201 	orr.w	r2, r2, #1
 8003b90:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b92:	4b1f      	ldr	r3, [pc, #124]	; (8003c10 <ADC_Enable+0xac>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a1f      	ldr	r2, [pc, #124]	; (8003c14 <ADC_Enable+0xb0>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	0c9b      	lsrs	r3, r3, #18
 8003b9e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003ba0:	e002      	b.n	8003ba8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f9      	bne.n	8003ba2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bae:	f7ff fd21 	bl	80035f4 <HAL_GetTick>
 8003bb2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003bb4:	e01f      	b.n	8003bf6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bb6:	f7ff fd1d 	bl	80035f4 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d918      	bls.n	8003bf6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d011      	beq.n	8003bf6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	f043 0210 	orr.w	r2, r3, #16
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	f043 0201 	orr.w	r2, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e007      	b.n	8003c06 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d1d8      	bne.n	8003bb6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000080 	.word	0x20000080
 8003c14:	431bde83 	.word	0x431bde83

08003c18 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d12e      	bne.n	8003c90 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0201 	bic.w	r2, r2, #1
 8003c40:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c42:	f7ff fcd7 	bl	80035f4 <HAL_GetTick>
 8003c46:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c48:	e01b      	b.n	8003c82 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c4a:	f7ff fcd3 	bl	80035f4 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d914      	bls.n	8003c82 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d10d      	bne.n	8003c82 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	f043 0210 	orr.w	r2, r3, #16
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c76:	f043 0201 	orr.w	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e007      	b.n	8003c92 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d0dc      	beq.n	8003c4a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cb8:	4013      	ands	r3, r2
 8003cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cce:	4a04      	ldr	r2, [pc, #16]	; (8003ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	60d3      	str	r3, [r2, #12]
}
 8003cd4:	bf00      	nop
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	e000ed00 	.word	0xe000ed00

08003ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ce8:	4b04      	ldr	r3, [pc, #16]	; (8003cfc <__NVIC_GetPriorityGrouping+0x18>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	0a1b      	lsrs	r3, r3, #8
 8003cee:	f003 0307 	and.w	r3, r3, #7
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	e000ed00 	.word	0xe000ed00

08003d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	db0b      	blt.n	8003d2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	f003 021f 	and.w	r2, r3, #31
 8003d18:	4906      	ldr	r1, [pc, #24]	; (8003d34 <__NVIC_EnableIRQ+0x34>)
 8003d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	2001      	movs	r0, #1
 8003d22:	fa00 f202 	lsl.w	r2, r0, r2
 8003d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr
 8003d34:	e000e100 	.word	0xe000e100

08003d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	6039      	str	r1, [r7, #0]
 8003d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	db0a      	blt.n	8003d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	490c      	ldr	r1, [pc, #48]	; (8003d84 <__NVIC_SetPriority+0x4c>)
 8003d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d56:	0112      	lsls	r2, r2, #4
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d60:	e00a      	b.n	8003d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	4908      	ldr	r1, [pc, #32]	; (8003d88 <__NVIC_SetPriority+0x50>)
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	3b04      	subs	r3, #4
 8003d70:	0112      	lsls	r2, r2, #4
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	440b      	add	r3, r1
 8003d76:	761a      	strb	r2, [r3, #24]
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	e000e100 	.word	0xe000e100
 8003d88:	e000ed00 	.word	0xe000ed00

08003d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b089      	sub	sp, #36	; 0x24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f1c3 0307 	rsb	r3, r3, #7
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	bf28      	it	cs
 8003daa:	2304      	movcs	r3, #4
 8003dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3304      	adds	r3, #4
 8003db2:	2b06      	cmp	r3, #6
 8003db4:	d902      	bls.n	8003dbc <NVIC_EncodePriority+0x30>
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3b03      	subs	r3, #3
 8003dba:	e000      	b.n	8003dbe <NVIC_EncodePriority+0x32>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43da      	mvns	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	401a      	ands	r2, r3
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	fa01 f303 	lsl.w	r3, r1, r3
 8003dde:	43d9      	mvns	r1, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de4:	4313      	orrs	r3, r2
         );
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3724      	adds	r7, #36	; 0x24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr

08003df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e00:	d301      	bcc.n	8003e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e02:	2301      	movs	r3, #1
 8003e04:	e00f      	b.n	8003e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e06:	4a0a      	ldr	r2, [pc, #40]	; (8003e30 <SysTick_Config+0x40>)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e0e:	210f      	movs	r1, #15
 8003e10:	f04f 30ff 	mov.w	r0, #4294967295
 8003e14:	f7ff ff90 	bl	8003d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e18:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <SysTick_Config+0x40>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e1e:	4b04      	ldr	r3, [pc, #16]	; (8003e30 <SysTick_Config+0x40>)
 8003e20:	2207      	movs	r2, #7
 8003e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	e000e010 	.word	0xe000e010

08003e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ff2d 	bl	8003c9c <__NVIC_SetPriorityGrouping>
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b086      	sub	sp, #24
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	4603      	mov	r3, r0
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	607a      	str	r2, [r7, #4]
 8003e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e5c:	f7ff ff42 	bl	8003ce4 <__NVIC_GetPriorityGrouping>
 8003e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	6978      	ldr	r0, [r7, #20]
 8003e68:	f7ff ff90 	bl	8003d8c <NVIC_EncodePriority>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e72:	4611      	mov	r1, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff ff5f 	bl	8003d38 <__NVIC_SetPriority>
}
 8003e7a:	bf00      	nop
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	4603      	mov	r3, r0
 8003e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff ff35 	bl	8003d00 <__NVIC_EnableIRQ>
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff ffa2 	bl	8003df0 <SysTick_Config>
 8003eac:	4603      	mov	r3, r0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e043      	b.n	8003f56 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	4b22      	ldr	r3, [pc, #136]	; (8003f60 <HAL_DMA_Init+0xa8>)
 8003ed6:	4413      	add	r3, r2
 8003ed8:	4a22      	ldr	r2, [pc, #136]	; (8003f64 <HAL_DMA_Init+0xac>)
 8003eda:	fba2 2303 	umull	r2, r3, r2, r3
 8003ede:	091b      	lsrs	r3, r3, #4
 8003ee0:	009a      	lsls	r2, r3, #2
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a1f      	ldr	r2, [pc, #124]	; (8003f68 <HAL_DMA_Init+0xb0>)
 8003eea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f02:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003f06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr
 8003f60:	bffdfff8 	.word	0xbffdfff8
 8003f64:	cccccccd 	.word	0xcccccccd
 8003f68:	40020000 	.word	0x40020000

08003f6c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d101      	bne.n	8003f8c <HAL_DMA_Start_IT+0x20>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	e04b      	b.n	8004024 <HAL_DMA_Start_IT+0xb8>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d13a      	bne.n	8004016 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0201 	bic.w	r2, r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f9f8 	bl	80043ba <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d008      	beq.n	8003fe4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 020e 	orr.w	r2, r2, #14
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	e00f      	b.n	8004004 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0204 	bic.w	r2, r2, #4
 8003ff2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 020a 	orr.w	r2, r2, #10
 8004002:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	e005      	b.n	8004022 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800401e:	2302      	movs	r3, #2
 8004020:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004022:	7dfb      	ldrb	r3, [r7, #23]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004034:	2300      	movs	r3, #0
 8004036:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d008      	beq.n	8004056 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2204      	movs	r2, #4
 8004048:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e020      	b.n	8004098 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 020e 	bic.w	r2, r2, #14
 8004064:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0201 	bic.w	r2, r2, #1
 8004074:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407e:	2101      	movs	r1, #1
 8004080:	fa01 f202 	lsl.w	r2, r1, r2
 8004084:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004096:	7bfb      	ldrb	r3, [r7, #15]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr
	...

080040a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d005      	beq.n	80040c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2204      	movs	r2, #4
 80040c0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	73fb      	strb	r3, [r7, #15]
 80040c6:	e051      	b.n	800416c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 020e 	bic.w	r2, r2, #14
 80040d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a22      	ldr	r2, [pc, #136]	; (8004178 <HAL_DMA_Abort_IT+0xd4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d029      	beq.n	8004146 <HAL_DMA_Abort_IT+0xa2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a21      	ldr	r2, [pc, #132]	; (800417c <HAL_DMA_Abort_IT+0xd8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d022      	beq.n	8004142 <HAL_DMA_Abort_IT+0x9e>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1f      	ldr	r2, [pc, #124]	; (8004180 <HAL_DMA_Abort_IT+0xdc>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d01a      	beq.n	800413c <HAL_DMA_Abort_IT+0x98>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1e      	ldr	r2, [pc, #120]	; (8004184 <HAL_DMA_Abort_IT+0xe0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d012      	beq.n	8004136 <HAL_DMA_Abort_IT+0x92>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a1c      	ldr	r2, [pc, #112]	; (8004188 <HAL_DMA_Abort_IT+0xe4>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00a      	beq.n	8004130 <HAL_DMA_Abort_IT+0x8c>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a1b      	ldr	r2, [pc, #108]	; (800418c <HAL_DMA_Abort_IT+0xe8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d102      	bne.n	800412a <HAL_DMA_Abort_IT+0x86>
 8004124:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004128:	e00e      	b.n	8004148 <HAL_DMA_Abort_IT+0xa4>
 800412a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800412e:	e00b      	b.n	8004148 <HAL_DMA_Abort_IT+0xa4>
 8004130:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004134:	e008      	b.n	8004148 <HAL_DMA_Abort_IT+0xa4>
 8004136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800413a:	e005      	b.n	8004148 <HAL_DMA_Abort_IT+0xa4>
 800413c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004140:	e002      	b.n	8004148 <HAL_DMA_Abort_IT+0xa4>
 8004142:	2310      	movs	r3, #16
 8004144:	e000      	b.n	8004148 <HAL_DMA_Abort_IT+0xa4>
 8004146:	2301      	movs	r3, #1
 8004148:	4a11      	ldr	r2, [pc, #68]	; (8004190 <HAL_DMA_Abort_IT+0xec>)
 800414a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	4798      	blx	r3
    } 
  }
  return status;
 800416c:	7bfb      	ldrb	r3, [r7, #15]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40020008 	.word	0x40020008
 800417c:	4002001c 	.word	0x4002001c
 8004180:	40020030 	.word	0x40020030
 8004184:	40020044 	.word	0x40020044
 8004188:	40020058 	.word	0x40020058
 800418c:	4002006c 	.word	0x4002006c
 8004190:	40020000 	.word	0x40020000

08004194 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	2204      	movs	r2, #4
 80041b2:	409a      	lsls	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d04f      	beq.n	800425c <HAL_DMA_IRQHandler+0xc8>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d04a      	beq.n	800425c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0320 	and.w	r3, r3, #32
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d107      	bne.n	80041e4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0204 	bic.w	r2, r2, #4
 80041e2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a66      	ldr	r2, [pc, #408]	; (8004384 <HAL_DMA_IRQHandler+0x1f0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d029      	beq.n	8004242 <HAL_DMA_IRQHandler+0xae>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a65      	ldr	r2, [pc, #404]	; (8004388 <HAL_DMA_IRQHandler+0x1f4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d022      	beq.n	800423e <HAL_DMA_IRQHandler+0xaa>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a63      	ldr	r2, [pc, #396]	; (800438c <HAL_DMA_IRQHandler+0x1f8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d01a      	beq.n	8004238 <HAL_DMA_IRQHandler+0xa4>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a62      	ldr	r2, [pc, #392]	; (8004390 <HAL_DMA_IRQHandler+0x1fc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d012      	beq.n	8004232 <HAL_DMA_IRQHandler+0x9e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a60      	ldr	r2, [pc, #384]	; (8004394 <HAL_DMA_IRQHandler+0x200>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00a      	beq.n	800422c <HAL_DMA_IRQHandler+0x98>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a5f      	ldr	r2, [pc, #380]	; (8004398 <HAL_DMA_IRQHandler+0x204>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d102      	bne.n	8004226 <HAL_DMA_IRQHandler+0x92>
 8004220:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004224:	e00e      	b.n	8004244 <HAL_DMA_IRQHandler+0xb0>
 8004226:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800422a:	e00b      	b.n	8004244 <HAL_DMA_IRQHandler+0xb0>
 800422c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004230:	e008      	b.n	8004244 <HAL_DMA_IRQHandler+0xb0>
 8004232:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004236:	e005      	b.n	8004244 <HAL_DMA_IRQHandler+0xb0>
 8004238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800423c:	e002      	b.n	8004244 <HAL_DMA_IRQHandler+0xb0>
 800423e:	2340      	movs	r3, #64	; 0x40
 8004240:	e000      	b.n	8004244 <HAL_DMA_IRQHandler+0xb0>
 8004242:	2304      	movs	r3, #4
 8004244:	4a55      	ldr	r2, [pc, #340]	; (800439c <HAL_DMA_IRQHandler+0x208>)
 8004246:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 8094 	beq.w	800437a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800425a:	e08e      	b.n	800437a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	2202      	movs	r2, #2
 8004262:	409a      	lsls	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4013      	ands	r3, r2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d056      	beq.n	800431a <HAL_DMA_IRQHandler+0x186>
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d051      	beq.n	800431a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0320 	and.w	r3, r3, #32
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10b      	bne.n	800429c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 020a 	bic.w	r2, r2, #10
 8004292:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a38      	ldr	r2, [pc, #224]	; (8004384 <HAL_DMA_IRQHandler+0x1f0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d029      	beq.n	80042fa <HAL_DMA_IRQHandler+0x166>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a37      	ldr	r2, [pc, #220]	; (8004388 <HAL_DMA_IRQHandler+0x1f4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d022      	beq.n	80042f6 <HAL_DMA_IRQHandler+0x162>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a35      	ldr	r2, [pc, #212]	; (800438c <HAL_DMA_IRQHandler+0x1f8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d01a      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x15c>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a34      	ldr	r2, [pc, #208]	; (8004390 <HAL_DMA_IRQHandler+0x1fc>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d012      	beq.n	80042ea <HAL_DMA_IRQHandler+0x156>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a32      	ldr	r2, [pc, #200]	; (8004394 <HAL_DMA_IRQHandler+0x200>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00a      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x150>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a31      	ldr	r2, [pc, #196]	; (8004398 <HAL_DMA_IRQHandler+0x204>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d102      	bne.n	80042de <HAL_DMA_IRQHandler+0x14a>
 80042d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80042dc:	e00e      	b.n	80042fc <HAL_DMA_IRQHandler+0x168>
 80042de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042e2:	e00b      	b.n	80042fc <HAL_DMA_IRQHandler+0x168>
 80042e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042e8:	e008      	b.n	80042fc <HAL_DMA_IRQHandler+0x168>
 80042ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042ee:	e005      	b.n	80042fc <HAL_DMA_IRQHandler+0x168>
 80042f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042f4:	e002      	b.n	80042fc <HAL_DMA_IRQHandler+0x168>
 80042f6:	2320      	movs	r3, #32
 80042f8:	e000      	b.n	80042fc <HAL_DMA_IRQHandler+0x168>
 80042fa:	2302      	movs	r3, #2
 80042fc:	4a27      	ldr	r2, [pc, #156]	; (800439c <HAL_DMA_IRQHandler+0x208>)
 80042fe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	2b00      	cmp	r3, #0
 800430e:	d034      	beq.n	800437a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004318:	e02f      	b.n	800437a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	2208      	movs	r2, #8
 8004320:	409a      	lsls	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4013      	ands	r3, r2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d028      	beq.n	800437c <HAL_DMA_IRQHandler+0x1e8>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b00      	cmp	r3, #0
 8004332:	d023      	beq.n	800437c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 020e 	bic.w	r2, r2, #14
 8004342:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434c:	2101      	movs	r1, #1
 800434e:	fa01 f202 	lsl.w	r2, r1, r2
 8004352:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	2b00      	cmp	r3, #0
 8004370:	d004      	beq.n	800437c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	4798      	blx	r3
    }
  }
  return;
 800437a:	bf00      	nop
 800437c:	bf00      	nop
}
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40020008 	.word	0x40020008
 8004388:	4002001c 	.word	0x4002001c
 800438c:	40020030 	.word	0x40020030
 8004390:	40020044 	.word	0x40020044
 8004394:	40020058 	.word	0x40020058
 8004398:	4002006c 	.word	0x4002006c
 800439c:	40020000 	.word	0x40020000

080043a0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043ae:	b2db      	uxtb	r3, r3
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	4770      	bx	lr

080043ba <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b085      	sub	sp, #20
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	607a      	str	r2, [r7, #4]
 80043c6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d0:	2101      	movs	r1, #1
 80043d2:	fa01 f202 	lsl.w	r2, r1, r2
 80043d6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b10      	cmp	r3, #16
 80043e6:	d108      	bne.n	80043fa <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043f8:	e007      	b.n	800440a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	60da      	str	r2, [r3, #12]
}
 800440a:	bf00      	nop
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004414:	b480      	push	{r7}
 8004416:	b08b      	sub	sp, #44	; 0x2c
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800441e:	2300      	movs	r3, #0
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004422:	2300      	movs	r3, #0
 8004424:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004426:	e169      	b.n	80046fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004428:	2201      	movs	r2, #1
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	4013      	ands	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	429a      	cmp	r2, r3
 8004442:	f040 8158 	bne.w	80046f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	4a9a      	ldr	r2, [pc, #616]	; (80046b4 <HAL_GPIO_Init+0x2a0>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d05e      	beq.n	800450e <HAL_GPIO_Init+0xfa>
 8004450:	4a98      	ldr	r2, [pc, #608]	; (80046b4 <HAL_GPIO_Init+0x2a0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d875      	bhi.n	8004542 <HAL_GPIO_Init+0x12e>
 8004456:	4a98      	ldr	r2, [pc, #608]	; (80046b8 <HAL_GPIO_Init+0x2a4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d058      	beq.n	800450e <HAL_GPIO_Init+0xfa>
 800445c:	4a96      	ldr	r2, [pc, #600]	; (80046b8 <HAL_GPIO_Init+0x2a4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d86f      	bhi.n	8004542 <HAL_GPIO_Init+0x12e>
 8004462:	4a96      	ldr	r2, [pc, #600]	; (80046bc <HAL_GPIO_Init+0x2a8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d052      	beq.n	800450e <HAL_GPIO_Init+0xfa>
 8004468:	4a94      	ldr	r2, [pc, #592]	; (80046bc <HAL_GPIO_Init+0x2a8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d869      	bhi.n	8004542 <HAL_GPIO_Init+0x12e>
 800446e:	4a94      	ldr	r2, [pc, #592]	; (80046c0 <HAL_GPIO_Init+0x2ac>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d04c      	beq.n	800450e <HAL_GPIO_Init+0xfa>
 8004474:	4a92      	ldr	r2, [pc, #584]	; (80046c0 <HAL_GPIO_Init+0x2ac>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d863      	bhi.n	8004542 <HAL_GPIO_Init+0x12e>
 800447a:	4a92      	ldr	r2, [pc, #584]	; (80046c4 <HAL_GPIO_Init+0x2b0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d046      	beq.n	800450e <HAL_GPIO_Init+0xfa>
 8004480:	4a90      	ldr	r2, [pc, #576]	; (80046c4 <HAL_GPIO_Init+0x2b0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d85d      	bhi.n	8004542 <HAL_GPIO_Init+0x12e>
 8004486:	2b12      	cmp	r3, #18
 8004488:	d82a      	bhi.n	80044e0 <HAL_GPIO_Init+0xcc>
 800448a:	2b12      	cmp	r3, #18
 800448c:	d859      	bhi.n	8004542 <HAL_GPIO_Init+0x12e>
 800448e:	a201      	add	r2, pc, #4	; (adr r2, 8004494 <HAL_GPIO_Init+0x80>)
 8004490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004494:	0800450f 	.word	0x0800450f
 8004498:	080044e9 	.word	0x080044e9
 800449c:	080044fb 	.word	0x080044fb
 80044a0:	0800453d 	.word	0x0800453d
 80044a4:	08004543 	.word	0x08004543
 80044a8:	08004543 	.word	0x08004543
 80044ac:	08004543 	.word	0x08004543
 80044b0:	08004543 	.word	0x08004543
 80044b4:	08004543 	.word	0x08004543
 80044b8:	08004543 	.word	0x08004543
 80044bc:	08004543 	.word	0x08004543
 80044c0:	08004543 	.word	0x08004543
 80044c4:	08004543 	.word	0x08004543
 80044c8:	08004543 	.word	0x08004543
 80044cc:	08004543 	.word	0x08004543
 80044d0:	08004543 	.word	0x08004543
 80044d4:	08004543 	.word	0x08004543
 80044d8:	080044f1 	.word	0x080044f1
 80044dc:	08004505 	.word	0x08004505
 80044e0:	4a79      	ldr	r2, [pc, #484]	; (80046c8 <HAL_GPIO_Init+0x2b4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d013      	beq.n	800450e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80044e6:	e02c      	b.n	8004542 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	623b      	str	r3, [r7, #32]
          break;
 80044ee:	e029      	b.n	8004544 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	3304      	adds	r3, #4
 80044f6:	623b      	str	r3, [r7, #32]
          break;
 80044f8:	e024      	b.n	8004544 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	3308      	adds	r3, #8
 8004500:	623b      	str	r3, [r7, #32]
          break;
 8004502:	e01f      	b.n	8004544 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	330c      	adds	r3, #12
 800450a:	623b      	str	r3, [r7, #32]
          break;
 800450c:	e01a      	b.n	8004544 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d102      	bne.n	800451c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004516:	2304      	movs	r3, #4
 8004518:	623b      	str	r3, [r7, #32]
          break;
 800451a:	e013      	b.n	8004544 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d105      	bne.n	8004530 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004524:	2308      	movs	r3, #8
 8004526:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	611a      	str	r2, [r3, #16]
          break;
 800452e:	e009      	b.n	8004544 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004530:	2308      	movs	r3, #8
 8004532:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	69fa      	ldr	r2, [r7, #28]
 8004538:	615a      	str	r2, [r3, #20]
          break;
 800453a:	e003      	b.n	8004544 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800453c:	2300      	movs	r3, #0
 800453e:	623b      	str	r3, [r7, #32]
          break;
 8004540:	e000      	b.n	8004544 <HAL_GPIO_Init+0x130>
          break;
 8004542:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2bff      	cmp	r3, #255	; 0xff
 8004548:	d801      	bhi.n	800454e <HAL_GPIO_Init+0x13a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	e001      	b.n	8004552 <HAL_GPIO_Init+0x13e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3304      	adds	r3, #4
 8004552:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2bff      	cmp	r3, #255	; 0xff
 8004558:	d802      	bhi.n	8004560 <HAL_GPIO_Init+0x14c>
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	e002      	b.n	8004566 <HAL_GPIO_Init+0x152>
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	3b08      	subs	r3, #8
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	210f      	movs	r1, #15
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	fa01 f303 	lsl.w	r3, r1, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	401a      	ands	r2, r3
 8004578:	6a39      	ldr	r1, [r7, #32]
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	fa01 f303 	lsl.w	r3, r1, r3
 8004580:	431a      	orrs	r2, r3
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 80b1 	beq.w	80046f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004594:	4b4d      	ldr	r3, [pc, #308]	; (80046cc <HAL_GPIO_Init+0x2b8>)
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	4a4c      	ldr	r2, [pc, #304]	; (80046cc <HAL_GPIO_Init+0x2b8>)
 800459a:	f043 0301 	orr.w	r3, r3, #1
 800459e:	6193      	str	r3, [r2, #24]
 80045a0:	4b4a      	ldr	r3, [pc, #296]	; (80046cc <HAL_GPIO_Init+0x2b8>)
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80045ac:	4a48      	ldr	r2, [pc, #288]	; (80046d0 <HAL_GPIO_Init+0x2bc>)
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	089b      	lsrs	r3, r3, #2
 80045b2:	3302      	adds	r3, #2
 80045b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	220f      	movs	r2, #15
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4013      	ands	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a40      	ldr	r2, [pc, #256]	; (80046d4 <HAL_GPIO_Init+0x2c0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d013      	beq.n	8004600 <HAL_GPIO_Init+0x1ec>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a3f      	ldr	r2, [pc, #252]	; (80046d8 <HAL_GPIO_Init+0x2c4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00d      	beq.n	80045fc <HAL_GPIO_Init+0x1e8>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a3e      	ldr	r2, [pc, #248]	; (80046dc <HAL_GPIO_Init+0x2c8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d007      	beq.n	80045f8 <HAL_GPIO_Init+0x1e4>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a3d      	ldr	r2, [pc, #244]	; (80046e0 <HAL_GPIO_Init+0x2cc>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d101      	bne.n	80045f4 <HAL_GPIO_Init+0x1e0>
 80045f0:	2303      	movs	r3, #3
 80045f2:	e006      	b.n	8004602 <HAL_GPIO_Init+0x1ee>
 80045f4:	2304      	movs	r3, #4
 80045f6:	e004      	b.n	8004602 <HAL_GPIO_Init+0x1ee>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e002      	b.n	8004602 <HAL_GPIO_Init+0x1ee>
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <HAL_GPIO_Init+0x1ee>
 8004600:	2300      	movs	r3, #0
 8004602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004604:	f002 0203 	and.w	r2, r2, #3
 8004608:	0092      	lsls	r2, r2, #2
 800460a:	4093      	lsls	r3, r2
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004612:	492f      	ldr	r1, [pc, #188]	; (80046d0 <HAL_GPIO_Init+0x2bc>)
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	089b      	lsrs	r3, r3, #2
 8004618:	3302      	adds	r3, #2
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d006      	beq.n	800463a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800462c:	4b2d      	ldr	r3, [pc, #180]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	492c      	ldr	r1, [pc, #176]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	4313      	orrs	r3, r2
 8004636:	608b      	str	r3, [r1, #8]
 8004638:	e006      	b.n	8004648 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800463a:	4b2a      	ldr	r3, [pc, #168]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	43db      	mvns	r3, r3
 8004642:	4928      	ldr	r1, [pc, #160]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 8004644:	4013      	ands	r3, r2
 8004646:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d006      	beq.n	8004662 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004654:	4b23      	ldr	r3, [pc, #140]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	4922      	ldr	r1, [pc, #136]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	4313      	orrs	r3, r2
 800465e:	60cb      	str	r3, [r1, #12]
 8004660:	e006      	b.n	8004670 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004662:	4b20      	ldr	r3, [pc, #128]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	43db      	mvns	r3, r3
 800466a:	491e      	ldr	r1, [pc, #120]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 800466c:	4013      	ands	r3, r2
 800466e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d006      	beq.n	800468a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800467c:	4b19      	ldr	r3, [pc, #100]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	4918      	ldr	r1, [pc, #96]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	4313      	orrs	r3, r2
 8004686:	604b      	str	r3, [r1, #4]
 8004688:	e006      	b.n	8004698 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800468a:	4b16      	ldr	r3, [pc, #88]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	43db      	mvns	r3, r3
 8004692:	4914      	ldr	r1, [pc, #80]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 8004694:	4013      	ands	r3, r2
 8004696:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d021      	beq.n	80046e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80046a4:	4b0f      	ldr	r3, [pc, #60]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	490e      	ldr	r1, [pc, #56]	; (80046e4 <HAL_GPIO_Init+0x2d0>)
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	600b      	str	r3, [r1, #0]
 80046b0:	e021      	b.n	80046f6 <HAL_GPIO_Init+0x2e2>
 80046b2:	bf00      	nop
 80046b4:	10320000 	.word	0x10320000
 80046b8:	10310000 	.word	0x10310000
 80046bc:	10220000 	.word	0x10220000
 80046c0:	10210000 	.word	0x10210000
 80046c4:	10120000 	.word	0x10120000
 80046c8:	10110000 	.word	0x10110000
 80046cc:	40021000 	.word	0x40021000
 80046d0:	40010000 	.word	0x40010000
 80046d4:	40010800 	.word	0x40010800
 80046d8:	40010c00 	.word	0x40010c00
 80046dc:	40011000 	.word	0x40011000
 80046e0:	40011400 	.word	0x40011400
 80046e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80046e8:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <HAL_GPIO_Init+0x304>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	43db      	mvns	r3, r3
 80046f0:	4909      	ldr	r1, [pc, #36]	; (8004718 <HAL_GPIO_Init+0x304>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	3301      	adds	r3, #1
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	fa22 f303 	lsr.w	r3, r2, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	f47f ae8e 	bne.w	8004428 <HAL_GPIO_Init+0x14>
  }
}
 800470c:	bf00      	nop
 800470e:	bf00      	nop
 8004710:	372c      	adds	r7, #44	; 0x2c
 8004712:	46bd      	mov	sp, r7
 8004714:	bc80      	pop	{r7}
 8004716:	4770      	bx	lr
 8004718:	40010400 	.word	0x40010400

0800471c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	887b      	ldrh	r3, [r7, #2]
 800472e:	4013      	ands	r3, r2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004734:	2301      	movs	r3, #1
 8004736:	73fb      	strb	r3, [r7, #15]
 8004738:	e001      	b.n	800473e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800473a:	2300      	movs	r3, #0
 800473c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800473e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	bc80      	pop	{r7}
 8004748:	4770      	bx	lr

0800474a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	460b      	mov	r3, r1
 8004754:	807b      	strh	r3, [r7, #2]
 8004756:	4613      	mov	r3, r2
 8004758:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800475a:	787b      	ldrb	r3, [r7, #1]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004760:	887a      	ldrh	r2, [r7, #2]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004766:	e003      	b.n	8004770 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004768:	887b      	ldrh	r3, [r7, #2]
 800476a:	041a      	lsls	r2, r3, #16
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	611a      	str	r2, [r3, #16]
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	bc80      	pop	{r7}
 8004778:	4770      	bx	lr
	...

0800477c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	4603      	mov	r3, r0
 8004784:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004786:	4b08      	ldr	r3, [pc, #32]	; (80047a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004788:	695a      	ldr	r2, [r3, #20]
 800478a:	88fb      	ldrh	r3, [r7, #6]
 800478c:	4013      	ands	r3, r2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d006      	beq.n	80047a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004792:	4a05      	ldr	r2, [pc, #20]	; (80047a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004794:	88fb      	ldrh	r3, [r7, #6]
 8004796:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004798:	88fb      	ldrh	r3, [r7, #6]
 800479a:	4618      	mov	r0, r3
 800479c:	f000 f806 	bl	80047ac <HAL_GPIO_EXTI_Callback>
  }
}
 80047a0:	bf00      	nop
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40010400 	.word	0x40010400

080047ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	4603      	mov	r3, r0
 80047b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bc80      	pop	{r7}
 80047be:	4770      	bx	lr

080047c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e12b      	b.n	8004a2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fe fb86 	bl	8002ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2224      	movs	r2, #36	; 0x24
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004812:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004822:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004824:	f003 f9f2 	bl	8007c0c <HAL_RCC_GetPCLK1Freq>
 8004828:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	4a81      	ldr	r2, [pc, #516]	; (8004a34 <HAL_I2C_Init+0x274>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d807      	bhi.n	8004844 <HAL_I2C_Init+0x84>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4a80      	ldr	r2, [pc, #512]	; (8004a38 <HAL_I2C_Init+0x278>)
 8004838:	4293      	cmp	r3, r2
 800483a:	bf94      	ite	ls
 800483c:	2301      	movls	r3, #1
 800483e:	2300      	movhi	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	e006      	b.n	8004852 <HAL_I2C_Init+0x92>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4a7d      	ldr	r2, [pc, #500]	; (8004a3c <HAL_I2C_Init+0x27c>)
 8004848:	4293      	cmp	r3, r2
 800484a:	bf94      	ite	ls
 800484c:	2301      	movls	r3, #1
 800484e:	2300      	movhi	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e0e7      	b.n	8004a2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4a78      	ldr	r2, [pc, #480]	; (8004a40 <HAL_I2C_Init+0x280>)
 800485e:	fba2 2303 	umull	r2, r3, r2, r3
 8004862:	0c9b      	lsrs	r3, r3, #18
 8004864:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	4a6a      	ldr	r2, [pc, #424]	; (8004a34 <HAL_I2C_Init+0x274>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d802      	bhi.n	8004894 <HAL_I2C_Init+0xd4>
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	3301      	adds	r3, #1
 8004892:	e009      	b.n	80048a8 <HAL_I2C_Init+0xe8>
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800489a:	fb02 f303 	mul.w	r3, r2, r3
 800489e:	4a69      	ldr	r2, [pc, #420]	; (8004a44 <HAL_I2C_Init+0x284>)
 80048a0:	fba2 2303 	umull	r2, r3, r2, r3
 80048a4:	099b      	lsrs	r3, r3, #6
 80048a6:	3301      	adds	r3, #1
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	430b      	orrs	r3, r1
 80048ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	495c      	ldr	r1, [pc, #368]	; (8004a34 <HAL_I2C_Init+0x274>)
 80048c4:	428b      	cmp	r3, r1
 80048c6:	d819      	bhi.n	80048fc <HAL_I2C_Init+0x13c>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	1e59      	subs	r1, r3, #1
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80048d6:	1c59      	adds	r1, r3, #1
 80048d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80048dc:	400b      	ands	r3, r1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_I2C_Init+0x138>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	1e59      	subs	r1, r3, #1
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80048f0:	3301      	adds	r3, #1
 80048f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f6:	e051      	b.n	800499c <HAL_I2C_Init+0x1dc>
 80048f8:	2304      	movs	r3, #4
 80048fa:	e04f      	b.n	800499c <HAL_I2C_Init+0x1dc>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d111      	bne.n	8004928 <HAL_I2C_Init+0x168>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	1e58      	subs	r0, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6859      	ldr	r1, [r3, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	440b      	add	r3, r1
 8004912:	fbb0 f3f3 	udiv	r3, r0, r3
 8004916:	3301      	adds	r3, #1
 8004918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800491c:	2b00      	cmp	r3, #0
 800491e:	bf0c      	ite	eq
 8004920:	2301      	moveq	r3, #1
 8004922:	2300      	movne	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	e012      	b.n	800494e <HAL_I2C_Init+0x18e>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	1e58      	subs	r0, r3, #1
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6859      	ldr	r1, [r3, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	440b      	add	r3, r1
 8004936:	0099      	lsls	r1, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	fbb0 f3f3 	udiv	r3, r0, r3
 800493e:	3301      	adds	r3, #1
 8004940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004944:	2b00      	cmp	r3, #0
 8004946:	bf0c      	ite	eq
 8004948:	2301      	moveq	r3, #1
 800494a:	2300      	movne	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_I2C_Init+0x196>
 8004952:	2301      	movs	r3, #1
 8004954:	e022      	b.n	800499c <HAL_I2C_Init+0x1dc>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10e      	bne.n	800497c <HAL_I2C_Init+0x1bc>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	1e58      	subs	r0, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6859      	ldr	r1, [r3, #4]
 8004966:	460b      	mov	r3, r1
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	440b      	add	r3, r1
 800496c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004970:	3301      	adds	r3, #1
 8004972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800497a:	e00f      	b.n	800499c <HAL_I2C_Init+0x1dc>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	1e58      	subs	r0, r3, #1
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6859      	ldr	r1, [r3, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	0099      	lsls	r1, r3, #2
 800498c:	440b      	add	r3, r1
 800498e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004992:	3301      	adds	r3, #1
 8004994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004998:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	6809      	ldr	r1, [r1, #0]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69da      	ldr	r2, [r3, #28]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6911      	ldr	r1, [r2, #16]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	68d2      	ldr	r2, [r2, #12]
 80049d6:	4311      	orrs	r1, r2
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6812      	ldr	r2, [r2, #0]
 80049dc:	430b      	orrs	r3, r1
 80049de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695a      	ldr	r2, [r3, #20]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0201 	orr.w	r2, r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	000186a0 	.word	0x000186a0
 8004a38:	001e847f 	.word	0x001e847f
 8004a3c:	003d08ff 	.word	0x003d08ff
 8004a40:	431bde83 	.word	0x431bde83
 8004a44:	10624dd3 	.word	0x10624dd3

08004a48 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5a:	2b80      	cmp	r3, #128	; 0x80
 8004a5c:	d103      	bne.n	8004a66 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2200      	movs	r2, #0
 8004a64:	611a      	str	r2, [r3, #16]
  }
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bc80      	pop	{r7}
 8004a6e:	4770      	bx	lr

08004a70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	607a      	str	r2, [r7, #4]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	817b      	strh	r3, [r7, #10]
 8004a80:	4613      	mov	r3, r2
 8004a82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a84:	f7fe fdb6 	bl	80035f4 <HAL_GetTick>
 8004a88:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b20      	cmp	r3, #32
 8004a94:	f040 80e0 	bne.w	8004c58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	2319      	movs	r3, #25
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	4970      	ldr	r1, [pc, #448]	; (8004c64 <HAL_I2C_Master_Transmit+0x1f4>)
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f002 fa66 	bl	8006f74 <I2C_WaitOnFlagUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e0d3      	b.n	8004c5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <HAL_I2C_Master_Transmit+0x50>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e0cc      	b.n	8004c5a <HAL_I2C_Master_Transmit+0x1ea>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d007      	beq.n	8004ae6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f042 0201 	orr.w	r2, r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004af4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2221      	movs	r2, #33	; 0x21
 8004afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2210      	movs	r2, #16
 8004b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	893a      	ldrh	r2, [r7, #8]
 8004b16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4a50      	ldr	r2, [pc, #320]	; (8004c68 <HAL_I2C_Master_Transmit+0x1f8>)
 8004b26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b28:	8979      	ldrh	r1, [r7, #10]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	6a3a      	ldr	r2, [r7, #32]
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f002 f828 	bl	8006b84 <I2C_MasterRequestWrite>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e08d      	b.n	8004c5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3e:	2300      	movs	r3, #0
 8004b40:	613b      	str	r3, [r7, #16]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	613b      	str	r3, [r7, #16]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	613b      	str	r3, [r7, #16]
 8004b52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004b54:	e066      	b.n	8004c24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	6a39      	ldr	r1, [r7, #32]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f002 fb24 	bl	80071a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00d      	beq.n	8004b82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d107      	bne.n	8004b7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e06b      	b.n	8004c5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	781a      	ldrb	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d11b      	bne.n	8004bf8 <HAL_I2C_Master_Transmit+0x188>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d017      	beq.n	8004bf8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	781a      	ldrb	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	6a39      	ldr	r1, [r7, #32]
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f002 fb1b 	bl	8007238 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00d      	beq.n	8004c24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d107      	bne.n	8004c20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e01a      	b.n	8004c5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d194      	bne.n	8004b56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	e000      	b.n	8004c5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004c58:	2302      	movs	r3, #2
  }
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	00100002 	.word	0x00100002
 8004c68:	ffff0000 	.word	0xffff0000

08004c6c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b08c      	sub	sp, #48	; 0x30
 8004c70:	af02      	add	r7, sp, #8
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	607a      	str	r2, [r7, #4]
 8004c76:	461a      	mov	r2, r3
 8004c78:	460b      	mov	r3, r1
 8004c7a:	817b      	strh	r3, [r7, #10]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c84:	f7fe fcb6 	bl	80035f4 <HAL_GetTick>
 8004c88:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b20      	cmp	r3, #32
 8004c94:	f040 824b 	bne.w	800512e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	2319      	movs	r3, #25
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	497f      	ldr	r1, [pc, #508]	; (8004ea0 <HAL_I2C_Master_Receive+0x234>)
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f002 f966 	bl	8006f74 <I2C_WaitOnFlagUntilTimeout>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e23e      	b.n	8005130 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_I2C_Master_Receive+0x54>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e237      	b.n	8005130 <HAL_I2C_Master_Receive+0x4c4>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d007      	beq.n	8004ce6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f042 0201 	orr.w	r2, r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cf4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2222      	movs	r2, #34	; 0x22
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2210      	movs	r2, #16
 8004d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	893a      	ldrh	r2, [r7, #8]
 8004d16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4a5f      	ldr	r2, [pc, #380]	; (8004ea4 <HAL_I2C_Master_Receive+0x238>)
 8004d26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d28:	8979      	ldrh	r1, [r7, #10]
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f001 ffaa 	bl	8006c88 <I2C_MasterRequestRead>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e1f8      	b.n	8005130 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d113      	bne.n	8004d6e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d46:	2300      	movs	r3, #0
 8004d48:	61fb      	str	r3, [r7, #28]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	61fb      	str	r3, [r7, #28]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	61fb      	str	r3, [r7, #28]
 8004d5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	e1cc      	b.n	8005108 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d11e      	bne.n	8004db4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d86:	b672      	cpsid	i
}
 8004d88:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61bb      	str	r3, [r7, #24]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004db0:	b662      	cpsie	i
}
 8004db2:	e035      	b.n	8004e20 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d11e      	bne.n	8004dfa <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004dcc:	b672      	cpsid	i
}
 8004dce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004df6:	b662      	cpsie	i
}
 8004df8:	e012      	b.n	8004e20 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	613b      	str	r3, [r7, #16]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	613b      	str	r3, [r7, #16]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	613b      	str	r3, [r7, #16]
 8004e1e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004e20:	e172      	b.n	8005108 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	f200 811f 	bhi.w	800506a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d123      	bne.n	8004e7c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f002 fa77 	bl	800732c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e173      	b.n	8005130 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e7a:	e145      	b.n	8005108 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d152      	bne.n	8004f2a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	4906      	ldr	r1, [pc, #24]	; (8004ea8 <HAL_I2C_Master_Receive+0x23c>)
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f002 f870 	bl	8006f74 <I2C_WaitOnFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d008      	beq.n	8004eac <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e148      	b.n	8005130 <HAL_I2C_Master_Receive+0x4c4>
 8004e9e:	bf00      	nop
 8004ea0:	00100002 	.word	0x00100002
 8004ea4:	ffff0000 	.word	0xffff0000
 8004ea8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004eac:	b672      	cpsid	i
}
 8004eae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ebe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004ef2:	b662      	cpsie	i
}
 8004ef4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	691a      	ldr	r2, [r3, #16]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f28:	e0ee      	b.n	8005108 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	2200      	movs	r2, #0
 8004f32:	4981      	ldr	r1, [pc, #516]	; (8005138 <HAL_I2C_Master_Receive+0x4cc>)
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f002 f81d 	bl	8006f74 <I2C_WaitOnFlagUntilTimeout>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e0f5      	b.n	8005130 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f54:	b672      	cpsid	i
}
 8004f56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691a      	ldr	r2, [r3, #16]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f8a:	4b6c      	ldr	r3, [pc, #432]	; (800513c <HAL_I2C_Master_Receive+0x4d0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	08db      	lsrs	r3, r3, #3
 8004f90:	4a6b      	ldr	r2, [pc, #428]	; (8005140 <HAL_I2C_Master_Receive+0x4d4>)
 8004f92:	fba2 2303 	umull	r2, r3, r2, r3
 8004f96:	0a1a      	lsrs	r2, r3, #8
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	00da      	lsls	r2, r3, #3
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d118      	bne.n	8004fe2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f043 0220 	orr.w	r2, r3, #32
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004fd2:	b662      	cpsie	i
}
 8004fd4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e0a6      	b.n	8005130 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d1d9      	bne.n	8004fa4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ffe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691a      	ldr	r2, [r3, #16]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501c:	3b01      	subs	r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005032:	b662      	cpsie	i
}
 8005034:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	691a      	ldr	r2, [r3, #16]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005052:	3b01      	subs	r3, #1
 8005054:	b29a      	uxth	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505e:	b29b      	uxth	r3, r3
 8005060:	3b01      	subs	r3, #1
 8005062:	b29a      	uxth	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005068:	e04e      	b.n	8005108 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800506a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f002 f95c 	bl	800732c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e058      	b.n	8005130 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	691a      	ldr	r2, [r3, #16]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	b2d2      	uxtb	r2, r2
 800508a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d124      	bne.n	8005108 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d107      	bne.n	80050d6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	1c5a      	adds	r2, r3, #1
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3b01      	subs	r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510c:	2b00      	cmp	r3, #0
 800510e:	f47f ae88 	bne.w	8004e22 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2220      	movs	r2, #32
 8005116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	e000      	b.n	8005130 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800512e:	2302      	movs	r3, #2
  }
}
 8005130:	4618      	mov	r0, r3
 8005132:	3728      	adds	r7, #40	; 0x28
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	00010004 	.word	0x00010004
 800513c:	20000080 	.word	0x20000080
 8005140:	14f8b589 	.word	0x14f8b589

08005144 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08a      	sub	sp, #40	; 0x28
 8005148:	af02      	add	r7, sp, #8
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	607a      	str	r2, [r7, #4]
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	460b      	mov	r3, r1
 8005152:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005154:	f7fe fa4e 	bl	80035f4 <HAL_GetTick>
 8005158:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b20      	cmp	r3, #32
 8005168:	f040 8111 	bne.w	800538e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	2319      	movs	r3, #25
 8005172:	2201      	movs	r2, #1
 8005174:	4988      	ldr	r1, [pc, #544]	; (8005398 <HAL_I2C_IsDeviceReady+0x254>)
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f001 fefc 	bl	8006f74 <I2C_WaitOnFlagUntilTimeout>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005182:	2302      	movs	r3, #2
 8005184:	e104      	b.n	8005390 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_I2C_IsDeviceReady+0x50>
 8005190:	2302      	movs	r3, #2
 8005192:	e0fd      	b.n	8005390 <HAL_I2C_IsDeviceReady+0x24c>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d007      	beq.n	80051ba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0201 	orr.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2224      	movs	r2, #36	; 0x24
 80051ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4a70      	ldr	r2, [pc, #448]	; (800539c <HAL_I2C_IsDeviceReady+0x258>)
 80051dc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f001 feba 	bl	8006f74 <I2C_WaitOnFlagUntilTimeout>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00d      	beq.n	8005222 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005214:	d103      	bne.n	800521e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800521c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e0b6      	b.n	8005390 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005222:	897b      	ldrh	r3, [r7, #10]
 8005224:	b2db      	uxtb	r3, r3
 8005226:	461a      	mov	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005230:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005232:	f7fe f9df 	bl	80035f4 <HAL_GetTick>
 8005236:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b02      	cmp	r3, #2
 8005244:	bf0c      	ite	eq
 8005246:	2301      	moveq	r3, #1
 8005248:	2300      	movne	r3, #0
 800524a:	b2db      	uxtb	r3, r3
 800524c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800525c:	bf0c      	ite	eq
 800525e:	2301      	moveq	r3, #1
 8005260:	2300      	movne	r3, #0
 8005262:	b2db      	uxtb	r3, r3
 8005264:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005266:	e025      	b.n	80052b4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005268:	f7fe f9c4 	bl	80035f4 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	429a      	cmp	r2, r3
 8005276:	d302      	bcc.n	800527e <HAL_I2C_IsDeviceReady+0x13a>
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d103      	bne.n	8005286 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	22a0      	movs	r2, #160	; 0xa0
 8005282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b02      	cmp	r3, #2
 8005292:	bf0c      	ite	eq
 8005294:	2301      	moveq	r3, #1
 8005296:	2300      	movne	r3, #0
 8005298:	b2db      	uxtb	r3, r3
 800529a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052aa:	bf0c      	ite	eq
 80052ac:	2301      	moveq	r3, #1
 80052ae:	2300      	movne	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2ba0      	cmp	r3, #160	; 0xa0
 80052be:	d005      	beq.n	80052cc <HAL_I2C_IsDeviceReady+0x188>
 80052c0:	7dfb      	ldrb	r3, [r7, #23]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d102      	bne.n	80052cc <HAL_I2C_IsDeviceReady+0x188>
 80052c6:	7dbb      	ldrb	r3, [r7, #22]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0cd      	beq.n	8005268 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d129      	bne.n	8005336 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052f2:	2300      	movs	r3, #0
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	613b      	str	r3, [r7, #16]
 8005306:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	2319      	movs	r3, #25
 800530e:	2201      	movs	r2, #1
 8005310:	4921      	ldr	r1, [pc, #132]	; (8005398 <HAL_I2C_IsDeviceReady+0x254>)
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f001 fe2e 	bl	8006f74 <I2C_WaitOnFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e036      	b.n	8005390 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2220      	movs	r2, #32
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	e02c      	b.n	8005390 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005344:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800534e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	2319      	movs	r3, #25
 8005356:	2201      	movs	r2, #1
 8005358:	490f      	ldr	r1, [pc, #60]	; (8005398 <HAL_I2C_IsDeviceReady+0x254>)
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f001 fe0a 	bl	8006f74 <I2C_WaitOnFlagUntilTimeout>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e012      	b.n	8005390 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	3301      	adds	r3, #1
 800536e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	429a      	cmp	r2, r3
 8005376:	f4ff af32 	bcc.w	80051de <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2220      	movs	r2, #32
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800538e:	2302      	movs	r3, #2
  }
}
 8005390:	4618      	mov	r0, r3
 8005392:	3720      	adds	r7, #32
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	00100002 	.word	0x00100002
 800539c:	ffff0000 	.word	0xffff0000

080053a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053c0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	d003      	beq.n	80053d8 <HAL_I2C_EV_IRQHandler+0x38>
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
 80053d2:	2b40      	cmp	r3, #64	; 0x40
 80053d4:	f040 80c1 	bne.w	800555a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10d      	bne.n	800540e <HAL_I2C_EV_IRQHandler+0x6e>
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80053f8:	d003      	beq.n	8005402 <HAL_I2C_EV_IRQHandler+0x62>
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005400:	d101      	bne.n	8005406 <HAL_I2C_EV_IRQHandler+0x66>
 8005402:	2301      	movs	r3, #1
 8005404:	e000      	b.n	8005408 <HAL_I2C_EV_IRQHandler+0x68>
 8005406:	2300      	movs	r3, #0
 8005408:	2b01      	cmp	r3, #1
 800540a:	f000 8132 	beq.w	8005672 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00c      	beq.n	8005432 <HAL_I2C_EV_IRQHandler+0x92>
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	0a5b      	lsrs	r3, r3, #9
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b00      	cmp	r3, #0
 8005422:	d006      	beq.n	8005432 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f002 f80c 	bl	8007442 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fd85 	bl	8005f3a <I2C_Master_SB>
 8005430:	e092      	b.n	8005558 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	08db      	lsrs	r3, r3, #3
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d009      	beq.n	8005452 <HAL_I2C_EV_IRQHandler+0xb2>
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	0a5b      	lsrs	r3, r3, #9
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fdfa 	bl	8006044 <I2C_Master_ADD10>
 8005450:	e082      	b.n	8005558 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	085b      	lsrs	r3, r3, #1
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d009      	beq.n	8005472 <HAL_I2C_EV_IRQHandler+0xd2>
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	0a5b      	lsrs	r3, r3, #9
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fe13 	bl	8006096 <I2C_Master_ADDR>
 8005470:	e072      	b.n	8005558 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	089b      	lsrs	r3, r3, #2
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d03b      	beq.n	80054f6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800548c:	f000 80f3 	beq.w	8005676 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	09db      	lsrs	r3, r3, #7
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00f      	beq.n	80054bc <HAL_I2C_EV_IRQHandler+0x11c>
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	0a9b      	lsrs	r3, r3, #10
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d009      	beq.n	80054bc <HAL_I2C_EV_IRQHandler+0x11c>
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	089b      	lsrs	r3, r3, #2
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d103      	bne.n	80054bc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f9f1 	bl	800589c <I2C_MasterTransmit_TXE>
 80054ba:	e04d      	b.n	8005558 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	089b      	lsrs	r3, r3, #2
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 80d6 	beq.w	8005676 <HAL_I2C_EV_IRQHandler+0x2d6>
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	0a5b      	lsrs	r3, r3, #9
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 80cf 	beq.w	8005676 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80054d8:	7bbb      	ldrb	r3, [r7, #14]
 80054da:	2b21      	cmp	r3, #33	; 0x21
 80054dc:	d103      	bne.n	80054e6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fa78 	bl	80059d4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054e4:	e0c7      	b.n	8005676 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	2b40      	cmp	r3, #64	; 0x40
 80054ea:	f040 80c4 	bne.w	8005676 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fae6 	bl	8005ac0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054f4:	e0bf      	b.n	8005676 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005504:	f000 80b7 	beq.w	8005676 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	099b      	lsrs	r3, r3, #6
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00f      	beq.n	8005534 <HAL_I2C_EV_IRQHandler+0x194>
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	0a9b      	lsrs	r3, r3, #10
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d009      	beq.n	8005534 <HAL_I2C_EV_IRQHandler+0x194>
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	089b      	lsrs	r3, r3, #2
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b00      	cmp	r3, #0
 800552a:	d103      	bne.n	8005534 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fb5f 	bl	8005bf0 <I2C_MasterReceive_RXNE>
 8005532:	e011      	b.n	8005558 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	089b      	lsrs	r3, r3, #2
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 809a 	beq.w	8005676 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	0a5b      	lsrs	r3, r3, #9
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 8093 	beq.w	8005676 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fc08 	bl	8005d66 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005556:	e08e      	b.n	8005676 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005558:	e08d      	b.n	8005676 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	d004      	beq.n	800556c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	61fb      	str	r3, [r7, #28]
 800556a:	e007      	b.n	800557c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	085b      	lsrs	r3, r3, #1
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d012      	beq.n	80055ae <HAL_I2C_EV_IRQHandler+0x20e>
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	0a5b      	lsrs	r3, r3, #9
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00c      	beq.n	80055ae <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80055a4:	69b9      	ldr	r1, [r7, #24]
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 ffcc 	bl	8006544 <I2C_Slave_ADDR>
 80055ac:	e066      	b.n	800567c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	091b      	lsrs	r3, r3, #4
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d009      	beq.n	80055ce <HAL_I2C_EV_IRQHandler+0x22e>
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	0a5b      	lsrs	r3, r3, #9
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f001 f806 	bl	80065d8 <I2C_Slave_STOPF>
 80055cc:	e056      	b.n	800567c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80055ce:	7bbb      	ldrb	r3, [r7, #14]
 80055d0:	2b21      	cmp	r3, #33	; 0x21
 80055d2:	d002      	beq.n	80055da <HAL_I2C_EV_IRQHandler+0x23a>
 80055d4:	7bbb      	ldrb	r3, [r7, #14]
 80055d6:	2b29      	cmp	r3, #41	; 0x29
 80055d8:	d125      	bne.n	8005626 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	09db      	lsrs	r3, r3, #7
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00f      	beq.n	8005606 <HAL_I2C_EV_IRQHandler+0x266>
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	0a9b      	lsrs	r3, r3, #10
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d009      	beq.n	8005606 <HAL_I2C_EV_IRQHandler+0x266>
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	089b      	lsrs	r3, r3, #2
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d103      	bne.n	8005606 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fee4 	bl	80063cc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005604:	e039      	b.n	800567a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	089b      	lsrs	r3, r3, #2
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d033      	beq.n	800567a <HAL_I2C_EV_IRQHandler+0x2da>
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	0a5b      	lsrs	r3, r3, #9
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d02d      	beq.n	800567a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 ff11 	bl	8006446 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005624:	e029      	b.n	800567a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	099b      	lsrs	r3, r3, #6
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00f      	beq.n	8005652 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	0a9b      	lsrs	r3, r3, #10
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d009      	beq.n	8005652 <HAL_I2C_EV_IRQHandler+0x2b2>
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	089b      	lsrs	r3, r3, #2
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d103      	bne.n	8005652 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 ff1b 	bl	8006486 <I2C_SlaveReceive_RXNE>
 8005650:	e014      	b.n	800567c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	089b      	lsrs	r3, r3, #2
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00e      	beq.n	800567c <HAL_I2C_EV_IRQHandler+0x2dc>
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	0a5b      	lsrs	r3, r3, #9
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d008      	beq.n	800567c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 ff49 	bl	8006502 <I2C_SlaveReceive_BTF>
 8005670:	e004      	b.n	800567c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005672:	bf00      	nop
 8005674:	e002      	b.n	800567c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005676:	bf00      	nop
 8005678:	e000      	b.n	800567c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800567a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800567c:	3720      	adds	r7, #32
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b08a      	sub	sp, #40	; 0x28
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800569a:	2300      	movs	r3, #0
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056a4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	0a1b      	lsrs	r3, r3, #8
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d016      	beq.n	80056e0 <HAL_I2C_ER_IRQHandler+0x5e>
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	0a1b      	lsrs	r3, r3, #8
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d010      	beq.n	80056e0 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	f043 0301 	orr.w	r3, r3, #1
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056ce:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056de:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	0a5b      	lsrs	r3, r3, #9
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00e      	beq.n	800570a <HAL_I2C_ER_IRQHandler+0x88>
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	0a1b      	lsrs	r3, r3, #8
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d008      	beq.n	800570a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	f043 0302 	orr.w	r3, r3, #2
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005708:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	0a9b      	lsrs	r3, r3, #10
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d03f      	beq.n	8005796 <HAL_I2C_ER_IRQHandler+0x114>
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	0a1b      	lsrs	r3, r3, #8
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d039      	beq.n	8005796 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8005722:	7efb      	ldrb	r3, [r7, #27]
 8005724:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572a:	b29b      	uxth	r3, r3
 800572c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005734:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800573c:	7ebb      	ldrb	r3, [r7, #26]
 800573e:	2b20      	cmp	r3, #32
 8005740:	d112      	bne.n	8005768 <HAL_I2C_ER_IRQHandler+0xe6>
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10f      	bne.n	8005768 <HAL_I2C_ER_IRQHandler+0xe6>
 8005748:	7cfb      	ldrb	r3, [r7, #19]
 800574a:	2b21      	cmp	r3, #33	; 0x21
 800574c:	d008      	beq.n	8005760 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800574e:	7cfb      	ldrb	r3, [r7, #19]
 8005750:	2b29      	cmp	r3, #41	; 0x29
 8005752:	d005      	beq.n	8005760 <HAL_I2C_ER_IRQHandler+0xde>
 8005754:	7cfb      	ldrb	r3, [r7, #19]
 8005756:	2b28      	cmp	r3, #40	; 0x28
 8005758:	d106      	bne.n	8005768 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b21      	cmp	r3, #33	; 0x21
 800575e:	d103      	bne.n	8005768 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f001 f869 	bl	8006838 <I2C_Slave_AF>
 8005766:	e016      	b.n	8005796 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005770:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	f043 0304 	orr.w	r3, r3, #4
 8005778:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800577a:	7efb      	ldrb	r3, [r7, #27]
 800577c:	2b10      	cmp	r3, #16
 800577e:	d002      	beq.n	8005786 <HAL_I2C_ER_IRQHandler+0x104>
 8005780:	7efb      	ldrb	r3, [r7, #27]
 8005782:	2b40      	cmp	r3, #64	; 0x40
 8005784:	d107      	bne.n	8005796 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005794:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	0adb      	lsrs	r3, r3, #11
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00e      	beq.n	80057c0 <HAL_I2C_ER_IRQHandler+0x13e>
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	0a1b      	lsrs	r3, r3, #8
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d008      	beq.n	80057c0 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	f043 0308 	orr.w	r3, r3, #8
 80057b4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80057be:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d008      	beq.n	80057d8 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f001 f8a4 	bl	8006920 <I2C_ITError>
  }
}
 80057d8:	bf00      	nop
 80057da:	3728      	adds	r7, #40	; 0x28
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bc80      	pop	{r7}
 80057f0:	4770      	bx	lr

080057f2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80057fa:	bf00      	nop
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	bc80      	pop	{r7}
 8005802:	4770      	bx	lr

08005804 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	bc80      	pop	{r7}
 8005814:	4770      	bx	lr

08005816 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	bc80      	pop	{r7}
 8005826:	4770      	bx	lr

08005828 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	70fb      	strb	r3, [r7, #3]
 8005834:	4613      	mov	r3, r2
 8005836:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	bc80      	pop	{r7}
 8005840:	4770      	bx	lr

08005842 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	bc80      	pop	{r7}
 8005864:	4770      	bx	lr

08005866 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr

08005878 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	bc80      	pop	{r7}
 8005888:	4770      	bx	lr

0800588a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr

0800589c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d150      	bne.n	8005964 <I2C_MasterTransmit_TXE+0xc8>
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	2b21      	cmp	r3, #33	; 0x21
 80058c6:	d14d      	bne.n	8005964 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2b08      	cmp	r3, #8
 80058cc:	d01d      	beq.n	800590a <I2C_MasterTransmit_TXE+0x6e>
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b20      	cmp	r3, #32
 80058d2:	d01a      	beq.n	800590a <I2C_MasterTransmit_TXE+0x6e>
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058da:	d016      	beq.n	800590a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058ea:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2211      	movs	r2, #17
 80058f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2220      	movs	r2, #32
 80058fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7ff ff6c 	bl	80057e0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005908:	e060      	b.n	80059cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005918:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005928:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b40      	cmp	r3, #64	; 0x40
 8005942:	d107      	bne.n	8005954 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7ff ff81 	bl	8005854 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005952:	e03b      	b.n	80059cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff ff3f 	bl	80057e0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005962:	e033      	b.n	80059cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	2b21      	cmp	r3, #33	; 0x21
 8005968:	d005      	beq.n	8005976 <I2C_MasterTransmit_TXE+0xda>
 800596a:	7bbb      	ldrb	r3, [r7, #14]
 800596c:	2b40      	cmp	r3, #64	; 0x40
 800596e:	d12d      	bne.n	80059cc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005970:	7bfb      	ldrb	r3, [r7, #15]
 8005972:	2b22      	cmp	r3, #34	; 0x22
 8005974:	d12a      	bne.n	80059cc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597a:	b29b      	uxth	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	d108      	bne.n	8005992 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800598e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005990:	e01c      	b.n	80059cc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b40      	cmp	r3, #64	; 0x40
 800599c:	d103      	bne.n	80059a6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f88e 	bl	8005ac0 <I2C_MemoryTransmit_TXE_BTF>
}
 80059a4:	e012      	b.n	80059cc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	781a      	ldrb	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80059ca:	e7ff      	b.n	80059cc <I2C_MasterTransmit_TXE+0x130>
 80059cc:	bf00      	nop
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b21      	cmp	r3, #33	; 0x21
 80059ec:	d164      	bne.n	8005ab8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d012      	beq.n	8005a1e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	781a      	ldrb	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005a1c:	e04c      	b.n	8005ab8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d01d      	beq.n	8005a60 <I2C_MasterTransmit_BTF+0x8c>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2b20      	cmp	r3, #32
 8005a28:	d01a      	beq.n	8005a60 <I2C_MasterTransmit_BTF+0x8c>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a30:	d016      	beq.n	8005a60 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a40:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2211      	movs	r2, #17
 8005a46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7ff fec1 	bl	80057e0 <HAL_I2C_MasterTxCpltCallback>
}
 8005a5e:	e02b      	b.n	8005ab8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a6e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a7e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b40      	cmp	r3, #64	; 0x40
 8005a98:	d107      	bne.n	8005aaa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7ff fed6 	bl	8005854 <HAL_I2C_MemTxCpltCallback>
}
 8005aa8:	e006      	b.n	8005ab8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7ff fe94 	bl	80057e0 <HAL_I2C_MasterTxCpltCallback>
}
 8005ab8:	bf00      	nop
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ace:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d11d      	bne.n	8005b14 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d10b      	bne.n	8005af8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af0:	1c9a      	adds	r2, r3, #2
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005af6:	e077      	b.n	8005be8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	121b      	asrs	r3, r3, #8
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005b12:	e069      	b.n	8005be8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d10b      	bne.n	8005b34 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005b32:	e059      	b.n	8005be8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d152      	bne.n	8005be2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
 8005b3e:	2b22      	cmp	r3, #34	; 0x22
 8005b40:	d10d      	bne.n	8005b5e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b50:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005b5c:	e044      	b.n	8005be8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d015      	beq.n	8005b94 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
 8005b6a:	2b21      	cmp	r3, #33	; 0x21
 8005b6c:	d112      	bne.n	8005b94 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	781a      	ldrb	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	1c5a      	adds	r2, r3, #1
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005b92:	e029      	b.n	8005be8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d124      	bne.n	8005be8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	2b21      	cmp	r3, #33	; 0x21
 8005ba2:	d121      	bne.n	8005be8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bb2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bc2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7ff fe3a 	bl	8005854 <HAL_I2C_MemTxCpltCallback>
}
 8005be0:	e002      	b.n	8005be8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fe ff30 	bl	8004a48 <I2C_Flush_DR>
}
 8005be8:	bf00      	nop
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b22      	cmp	r3, #34	; 0x22
 8005c02:	f040 80ac 	bne.w	8005d5e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b03      	cmp	r3, #3
 8005c12:	d921      	bls.n	8005c58 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	691a      	ldr	r2, [r3, #16]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	f040 808c 	bne.w	8005d5e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c54:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005c56:	e082      	b.n	8005d5e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d075      	beq.n	8005d4c <I2C_MasterReceive_RXNE+0x15c>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d002      	beq.n	8005c6c <I2C_MasterReceive_RXNE+0x7c>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d16f      	bne.n	8005d4c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f001 fb2b 	bl	80072c8 <I2C_WaitOnSTOPRequestThroughIT>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d142      	bne.n	8005cfe <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c86:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c96:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	691a      	ldr	r2, [r3, #16]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b40      	cmp	r3, #64	; 0x40
 8005cd0:	d10a      	bne.n	8005ce8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7ff fdc0 	bl	8005866 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005ce6:	e03a      	b.n	8005d5e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2212      	movs	r2, #18
 8005cf4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7ff fd7b 	bl	80057f2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005cfc:	e02f      	b.n	8005d5e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d0c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	691a      	ldr	r2, [r3, #16]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	b2d2      	uxtb	r2, r2
 8005d1a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff fd97 	bl	8005878 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005d4a:	e008      	b.n	8005d5e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d5a:	605a      	str	r2, [r3, #4]
}
 8005d5c:	e7ff      	b.n	8005d5e <I2C_MasterReceive_RXNE+0x16e>
 8005d5e:	bf00      	nop
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d72:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	2b04      	cmp	r3, #4
 8005d7c:	d11b      	bne.n	8005db6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d8c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	691a      	ldr	r2, [r3, #16]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005db4:	e0bd      	b.n	8005f32 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d129      	bne.n	8005e14 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dce:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d00a      	beq.n	8005dec <I2C_MasterReceive_BTF+0x86>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d007      	beq.n	8005dec <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691a      	ldr	r2, [r3, #16]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005e12:	e08e      	b.n	8005f32 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d176      	bne.n	8005f0c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d002      	beq.n	8005e2a <I2C_MasterReceive_BTF+0xc4>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2b10      	cmp	r3, #16
 8005e28:	d108      	bne.n	8005e3c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	e019      	b.n	8005e70 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d002      	beq.n	8005e48 <I2C_MasterReceive_BTF+0xe2>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d108      	bne.n	8005e5a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	e00a      	b.n	8005e70 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2b10      	cmp	r3, #16
 8005e5e:	d007      	beq.n	8005e70 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e6e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	691a      	ldr	r2, [r3, #16]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	b2d2      	uxtb	r2, r2
 8005e7c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	1c5a      	adds	r2, r3, #1
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	691a      	ldr	r2, [r3, #16]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	b2d2      	uxtb	r2, r2
 8005ea2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005eca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b40      	cmp	r3, #64	; 0x40
 8005ede:	d10a      	bne.n	8005ef6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7ff fcb9 	bl	8005866 <HAL_I2C_MemRxCpltCallback>
}
 8005ef4:	e01d      	b.n	8005f32 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2212      	movs	r2, #18
 8005f02:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f7ff fc74 	bl	80057f2 <HAL_I2C_MasterRxCpltCallback>
}
 8005f0a:	e012      	b.n	8005f32 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	691a      	ldr	r2, [r3, #16]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	b2d2      	uxtb	r2, r2
 8005f18:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005f32:	bf00      	nop
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b40      	cmp	r3, #64	; 0x40
 8005f4c:	d117      	bne.n	8005f7e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d109      	bne.n	8005f6a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f66:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005f68:	e067      	b.n	800603a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	f043 0301 	orr.w	r3, r3, #1
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	611a      	str	r2, [r3, #16]
}
 8005f7c:	e05d      	b.n	800603a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f86:	d133      	bne.n	8005ff0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b21      	cmp	r3, #33	; 0x21
 8005f92:	d109      	bne.n	8005fa8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fa4:	611a      	str	r2, [r3, #16]
 8005fa6:	e008      	b.n	8005fba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	f043 0301 	orr.w	r3, r3, #1
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d004      	beq.n	8005fcc <I2C_Master_SB+0x92>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d108      	bne.n	8005fde <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d032      	beq.n	800603a <I2C_Master_SB+0x100>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d02d      	beq.n	800603a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fec:	605a      	str	r2, [r3, #4]
}
 8005fee:	e024      	b.n	800603a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10e      	bne.n	8006016 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	11db      	asrs	r3, r3, #7
 8006000:	b2db      	uxtb	r3, r3
 8006002:	f003 0306 	and.w	r3, r3, #6
 8006006:	b2db      	uxtb	r3, r3
 8006008:	f063 030f 	orn	r3, r3, #15
 800600c:	b2da      	uxtb	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	611a      	str	r2, [r3, #16]
}
 8006014:	e011      	b.n	800603a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800601a:	2b01      	cmp	r3, #1
 800601c:	d10d      	bne.n	800603a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006022:	b29b      	uxth	r3, r3
 8006024:	11db      	asrs	r3, r3, #7
 8006026:	b2db      	uxtb	r3, r3
 8006028:	f003 0306 	and.w	r3, r3, #6
 800602c:	b2db      	uxtb	r3, r3
 800602e:	f063 030e 	orn	r3, r3, #14
 8006032:	b2da      	uxtb	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	611a      	str	r2, [r3, #16]
}
 800603a:	bf00      	nop
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	bc80      	pop	{r7}
 8006042:	4770      	bx	lr

08006044 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006050:	b2da      	uxtb	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605c:	2b00      	cmp	r3, #0
 800605e:	d004      	beq.n	800606a <I2C_Master_ADD10+0x26>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006066:	2b00      	cmp	r3, #0
 8006068:	d108      	bne.n	800607c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00c      	beq.n	800608c <I2C_Master_ADD10+0x48>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006078:	2b00      	cmp	r3, #0
 800607a:	d007      	beq.n	800608c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800608a:	605a      	str	r2, [r3, #4]
  }
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	bc80      	pop	{r7}
 8006094:	4770      	bx	lr

08006096 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006096:	b480      	push	{r7}
 8006098:	b091      	sub	sp, #68	; 0x44
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ac:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b22      	cmp	r3, #34	; 0x22
 80060be:	f040 8174 	bne.w	80063aa <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10f      	bne.n	80060ea <I2C_Master_ADDR+0x54>
 80060ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80060ce:	2b40      	cmp	r3, #64	; 0x40
 80060d0:	d10b      	bne.n	80060ea <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060d2:	2300      	movs	r3, #0
 80060d4:	633b      	str	r3, [r7, #48]	; 0x30
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	633b      	str	r3, [r7, #48]	; 0x30
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	633b      	str	r3, [r7, #48]	; 0x30
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	e16b      	b.n	80063c2 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d11d      	bne.n	800612e <I2C_Master_ADDR+0x98>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80060fa:	d118      	bne.n	800612e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060fc:	2300      	movs	r3, #0
 80060fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006110:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006120:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	651a      	str	r2, [r3, #80]	; 0x50
 800612c:	e149      	b.n	80063c2 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006132:	b29b      	uxth	r3, r3
 8006134:	2b00      	cmp	r3, #0
 8006136:	d113      	bne.n	8006160 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006138:	2300      	movs	r3, #0
 800613a:	62bb      	str	r3, [r7, #40]	; 0x28
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	62bb      	str	r3, [r7, #40]	; 0x28
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	62bb      	str	r3, [r7, #40]	; 0x28
 800614c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	e120      	b.n	80063a2 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006164:	b29b      	uxth	r3, r3
 8006166:	2b01      	cmp	r3, #1
 8006168:	f040 808a 	bne.w	8006280 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800616c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006172:	d137      	bne.n	80061e4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006182:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800618e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006192:	d113      	bne.n	80061bc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061a2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061a4:	2300      	movs	r3, #0
 80061a6:	627b      	str	r3, [r7, #36]	; 0x24
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	e0f2      	b.n	80063a2 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061bc:	2300      	movs	r3, #0
 80061be:	623b      	str	r3, [r7, #32]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	623b      	str	r3, [r7, #32]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	623b      	str	r3, [r7, #32]
 80061d0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061e0:	601a      	str	r2, [r3, #0]
 80061e2:	e0de      	b.n	80063a2 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80061e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e6:	2b08      	cmp	r3, #8
 80061e8:	d02e      	beq.n	8006248 <I2C_Master_ADDR+0x1b2>
 80061ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ec:	2b20      	cmp	r3, #32
 80061ee:	d02b      	beq.n	8006248 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80061f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f2:	2b12      	cmp	r3, #18
 80061f4:	d102      	bne.n	80061fc <I2C_Master_ADDR+0x166>
 80061f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d125      	bne.n	8006248 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d00e      	beq.n	8006220 <I2C_Master_ADDR+0x18a>
 8006202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006204:	2b02      	cmp	r3, #2
 8006206:	d00b      	beq.n	8006220 <I2C_Master_ADDR+0x18a>
 8006208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620a:	2b10      	cmp	r3, #16
 800620c:	d008      	beq.n	8006220 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	e007      	b.n	8006230 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800622e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006230:	2300      	movs	r3, #0
 8006232:	61fb      	str	r3, [r7, #28]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	61fb      	str	r3, [r7, #28]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	61fb      	str	r3, [r7, #28]
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	e0ac      	b.n	80063a2 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006256:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006258:	2300      	movs	r3, #0
 800625a:	61bb      	str	r3, [r7, #24]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	61bb      	str	r3, [r7, #24]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	61bb      	str	r3, [r7, #24]
 800626c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	e090      	b.n	80063a2 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006284:	b29b      	uxth	r3, r3
 8006286:	2b02      	cmp	r3, #2
 8006288:	d158      	bne.n	800633c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800628a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628c:	2b04      	cmp	r3, #4
 800628e:	d021      	beq.n	80062d4 <I2C_Master_ADDR+0x23e>
 8006290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006292:	2b02      	cmp	r3, #2
 8006294:	d01e      	beq.n	80062d4 <I2C_Master_ADDR+0x23e>
 8006296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006298:	2b10      	cmp	r3, #16
 800629a:	d01b      	beq.n	80062d4 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062aa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ac:	2300      	movs	r3, #0
 80062ae:	617b      	str	r3, [r7, #20]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	e012      	b.n	80062fa <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062e2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062e4:	2300      	movs	r3, #0
 80062e6:	613b      	str	r3, [r7, #16]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	613b      	str	r3, [r7, #16]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	613b      	str	r3, [r7, #16]
 80062f8:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006308:	d14b      	bne.n	80063a2 <I2C_Master_ADDR+0x30c>
 800630a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006310:	d00b      	beq.n	800632a <I2C_Master_ADDR+0x294>
 8006312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006314:	2b01      	cmp	r3, #1
 8006316:	d008      	beq.n	800632a <I2C_Master_ADDR+0x294>
 8006318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631a:	2b08      	cmp	r3, #8
 800631c:	d005      	beq.n	800632a <I2C_Master_ADDR+0x294>
 800631e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006320:	2b10      	cmp	r3, #16
 8006322:	d002      	beq.n	800632a <I2C_Master_ADDR+0x294>
 8006324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006326:	2b20      	cmp	r3, #32
 8006328:	d13b      	bne.n	80063a2 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006338:	605a      	str	r2, [r3, #4]
 800633a:	e032      	b.n	80063a2 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800634a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800635a:	d117      	bne.n	800638c <I2C_Master_ADDR+0x2f6>
 800635c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006362:	d00b      	beq.n	800637c <I2C_Master_ADDR+0x2e6>
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	2b01      	cmp	r3, #1
 8006368:	d008      	beq.n	800637c <I2C_Master_ADDR+0x2e6>
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	2b08      	cmp	r3, #8
 800636e:	d005      	beq.n	800637c <I2C_Master_ADDR+0x2e6>
 8006370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006372:	2b10      	cmp	r3, #16
 8006374:	d002      	beq.n	800637c <I2C_Master_ADDR+0x2e6>
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	2b20      	cmp	r3, #32
 800637a:	d107      	bne.n	800638c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800638a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800638c:	2300      	movs	r3, #0
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	60fb      	str	r3, [r7, #12]
 80063a0:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80063a8:	e00b      	b.n	80063c2 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063aa:	2300      	movs	r3, #0
 80063ac:	60bb      	str	r3, [r7, #8]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	60bb      	str	r3, [r7, #8]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	60bb      	str	r3, [r7, #8]
 80063be:	68bb      	ldr	r3, [r7, #8]
}
 80063c0:	e7ff      	b.n	80063c2 <I2C_Master_ADDR+0x32c>
 80063c2:	bf00      	nop
 80063c4:	3744      	adds	r7, #68	; 0x44
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bc80      	pop	{r7}
 80063ca:	4770      	bx	lr

080063cc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d02b      	beq.n	800643e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	781a      	ldrb	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006400:	b29b      	uxth	r3, r3
 8006402:	3b01      	subs	r3, #1
 8006404:	b29a      	uxth	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640e:	b29b      	uxth	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d114      	bne.n	800643e <I2C_SlaveTransmit_TXE+0x72>
 8006414:	7bfb      	ldrb	r3, [r7, #15]
 8006416:	2b29      	cmp	r3, #41	; 0x29
 8006418:	d111      	bne.n	800643e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006428:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2221      	movs	r2, #33	; 0x21
 800642e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2228      	movs	r2, #40	; 0x28
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7ff f9e3 	bl	8005804 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800643e:	bf00      	nop
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006452:	b29b      	uxth	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d011      	beq.n	800647c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	781a      	ldrb	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006472:	b29b      	uxth	r3, r3
 8006474:	3b01      	subs	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	bc80      	pop	{r7}
 8006484:	4770      	bx	lr

08006486 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006494:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800649a:	b29b      	uxth	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d02c      	beq.n	80064fa <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	691a      	ldr	r2, [r3, #16]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	b2d2      	uxtb	r2, r2
 80064ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064bc:	b29b      	uxth	r3, r3
 80064be:	3b01      	subs	r3, #1
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d114      	bne.n	80064fa <I2C_SlaveReceive_RXNE+0x74>
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
 80064d2:	2b2a      	cmp	r3, #42	; 0x2a
 80064d4:	d111      	bne.n	80064fa <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2222      	movs	r2, #34	; 0x22
 80064ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2228      	movs	r2, #40	; 0x28
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff f98e 	bl	8005816 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80064fa:	bf00      	nop
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006502:	b480      	push	{r7}
 8006504:	b083      	sub	sp, #12
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650e:	b29b      	uxth	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d012      	beq.n	800653a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691a      	ldr	r2, [r3, #16]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	b2d2      	uxtb	r2, r2
 8006520:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006530:	b29b      	uxth	r3, r3
 8006532:	3b01      	subs	r3, #1
 8006534:	b29a      	uxth	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	bc80      	pop	{r7}
 8006542:	4770      	bx	lr

08006544 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800654e:	2300      	movs	r3, #0
 8006550:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006558:	b2db      	uxtb	r3, r3
 800655a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800655e:	2b28      	cmp	r3, #40	; 0x28
 8006560:	d127      	bne.n	80065b2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006570:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	089b      	lsrs	r3, r3, #2
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800657e:	2301      	movs	r3, #1
 8006580:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	09db      	lsrs	r3, r3, #7
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d103      	bne.n	8006596 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	81bb      	strh	r3, [r7, #12]
 8006594:	e002      	b.n	800659c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80065a4:	89ba      	ldrh	r2, [r7, #12]
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
 80065a8:	4619      	mov	r1, r3
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7ff f93c 	bl	8005828 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80065b0:	e00e      	b.n	80065d0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065b2:	2300      	movs	r3, #0
 80065b4:	60bb      	str	r3, [r7, #8]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	60bb      	str	r3, [r7, #8]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	60bb      	str	r3, [r7, #8]
 80065c6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80065d0:	bf00      	nop
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065f6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80065f8:	2300      	movs	r3, #0
 80065fa:	60bb      	str	r3, [r7, #8]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	60bb      	str	r3, [r7, #8]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f042 0201 	orr.w	r2, r2, #1
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006624:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006634:	d172      	bne.n	800671c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	2b22      	cmp	r3, #34	; 0x22
 800663a:	d002      	beq.n	8006642 <I2C_Slave_STOPF+0x6a>
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	2b2a      	cmp	r3, #42	; 0x2a
 8006640:	d135      	bne.n	80066ae <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	b29a      	uxth	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006654:	b29b      	uxth	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d005      	beq.n	8006666 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665e:	f043 0204 	orr.w	r2, r3, #4
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006674:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	4618      	mov	r0, r3
 800667c:	f7fd fe90 	bl	80043a0 <HAL_DMA_GetState>
 8006680:	4603      	mov	r3, r0
 8006682:	2b01      	cmp	r3, #1
 8006684:	d049      	beq.n	800671a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668a:	4a69      	ldr	r2, [pc, #420]	; (8006830 <I2C_Slave_STOPF+0x258>)
 800668c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006692:	4618      	mov	r0, r3
 8006694:	f7fd fd06 	bl	80040a4 <HAL_DMA_Abort_IT>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d03d      	beq.n	800671a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066a8:	4610      	mov	r0, r2
 80066aa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80066ac:	e035      	b.n	800671a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d005      	beq.n	80066d2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	f043 0204 	orr.w	r2, r3, #4
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fd fe5a 	bl	80043a0 <HAL_DMA_GetState>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d014      	beq.n	800671c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f6:	4a4e      	ldr	r2, [pc, #312]	; (8006830 <I2C_Slave_STOPF+0x258>)
 80066f8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fd fcd0 	bl	80040a4 <HAL_DMA_Abort_IT>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d008      	beq.n	800671c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006714:	4610      	mov	r0, r2
 8006716:	4798      	blx	r3
 8006718:	e000      	b.n	800671c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800671a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006720:	b29b      	uxth	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d03e      	beq.n	80067a4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b04      	cmp	r3, #4
 8006732:	d112      	bne.n	800675a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691a      	ldr	r2, [r3, #16]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29a      	uxth	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006764:	2b40      	cmp	r3, #64	; 0x40
 8006766:	d112      	bne.n	800678e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	691a      	ldr	r2, [r3, #16]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	b2d2      	uxtb	r2, r2
 8006774:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006784:	b29b      	uxth	r3, r3
 8006786:	3b01      	subs	r3, #1
 8006788:	b29a      	uxth	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006792:	b29b      	uxth	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	d005      	beq.n	80067a4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679c:	f043 0204 	orr.w	r2, r3, #4
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f8b7 	bl	8006920 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80067b2:	e039      	b.n	8006828 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	2b2a      	cmp	r3, #42	; 0x2a
 80067b8:	d109      	bne.n	80067ce <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2228      	movs	r2, #40	; 0x28
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7ff f824 	bl	8005816 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b28      	cmp	r3, #40	; 0x28
 80067d8:	d111      	bne.n	80067fe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a15      	ldr	r2, [pc, #84]	; (8006834 <I2C_Slave_STOPF+0x25c>)
 80067de:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2220      	movs	r2, #32
 80067ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7ff f823 	bl	8005842 <HAL_I2C_ListenCpltCallback>
}
 80067fc:	e014      	b.n	8006828 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	2b22      	cmp	r3, #34	; 0x22
 8006804:	d002      	beq.n	800680c <I2C_Slave_STOPF+0x234>
 8006806:	7bfb      	ldrb	r3, [r7, #15]
 8006808:	2b22      	cmp	r3, #34	; 0x22
 800680a:	d10d      	bne.n	8006828 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2220      	movs	r2, #32
 8006816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7fe fff7 	bl	8005816 <HAL_I2C_SlaveRxCpltCallback>
}
 8006828:	bf00      	nop
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	08006e25 	.word	0x08006e25
 8006834:	ffff0000 	.word	0xffff0000

08006838 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006846:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2b08      	cmp	r3, #8
 8006852:	d002      	beq.n	800685a <I2C_Slave_AF+0x22>
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2b20      	cmp	r3, #32
 8006858:	d129      	bne.n	80068ae <I2C_Slave_AF+0x76>
 800685a:	7bfb      	ldrb	r3, [r7, #15]
 800685c:	2b28      	cmp	r3, #40	; 0x28
 800685e:	d126      	bne.n	80068ae <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a2e      	ldr	r2, [pc, #184]	; (800691c <I2C_Slave_AF+0xe4>)
 8006864:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006874:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800687e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800688e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2220      	movs	r2, #32
 800689a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fe ffcb 	bl	8005842 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80068ac:	e031      	b.n	8006912 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	2b21      	cmp	r3, #33	; 0x21
 80068b2:	d129      	bne.n	8006908 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a19      	ldr	r2, [pc, #100]	; (800691c <I2C_Slave_AF+0xe4>)
 80068b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2221      	movs	r2, #33	; 0x21
 80068be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2220      	movs	r2, #32
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068de:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068e8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068f8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7fe f8a4 	bl	8004a48 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7fe ff7f 	bl	8005804 <HAL_I2C_SlaveTxCpltCallback>
}
 8006906:	e004      	b.n	8006912 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006910:	615a      	str	r2, [r3, #20]
}
 8006912:	bf00      	nop
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	ffff0000 	.word	0xffff0000

08006920 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800692e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006936:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006938:	7bbb      	ldrb	r3, [r7, #14]
 800693a:	2b10      	cmp	r3, #16
 800693c:	d002      	beq.n	8006944 <I2C_ITError+0x24>
 800693e:	7bbb      	ldrb	r3, [r7, #14]
 8006940:	2b40      	cmp	r3, #64	; 0x40
 8006942:	d10a      	bne.n	800695a <I2C_ITError+0x3a>
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	2b22      	cmp	r3, #34	; 0x22
 8006948:	d107      	bne.n	800695a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006958:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800695a:	7bfb      	ldrb	r3, [r7, #15]
 800695c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006960:	2b28      	cmp	r3, #40	; 0x28
 8006962:	d107      	bne.n	8006974 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2228      	movs	r2, #40	; 0x28
 800696e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006972:	e015      	b.n	80069a0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800697e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006982:	d00a      	beq.n	800699a <I2C_ITError+0x7a>
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	2b60      	cmp	r3, #96	; 0x60
 8006988:	d007      	beq.n	800699a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2220      	movs	r2, #32
 800698e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ae:	d162      	bne.n	8006a76 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069be:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d020      	beq.n	8006a10 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d2:	4a6a      	ldr	r2, [pc, #424]	; (8006b7c <I2C_ITError+0x25c>)
 80069d4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fd fb62 	bl	80040a4 <HAL_DMA_Abort_IT>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 8089 	beq.w	8006afa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 0201 	bic.w	r2, r2, #1
 80069f6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2220      	movs	r2, #32
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	4798      	blx	r3
 8006a0e:	e074      	b.n	8006afa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a14:	4a59      	ldr	r2, [pc, #356]	; (8006b7c <I2C_ITError+0x25c>)
 8006a16:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7fd fb41 	bl	80040a4 <HAL_DMA_Abort_IT>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d068      	beq.n	8006afa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a32:	2b40      	cmp	r3, #64	; 0x40
 8006a34:	d10b      	bne.n	8006a4e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	691a      	ldr	r2, [r3, #16]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a40:	b2d2      	uxtb	r2, r2
 8006a42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	1c5a      	adds	r2, r3, #1
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0201 	bic.w	r2, r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a70:	4610      	mov	r0, r2
 8006a72:	4798      	blx	r3
 8006a74:	e041      	b.n	8006afa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b60      	cmp	r3, #96	; 0x60
 8006a80:	d125      	bne.n	8006ace <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2220      	movs	r2, #32
 8006a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9a:	2b40      	cmp	r3, #64	; 0x40
 8006a9c:	d10b      	bne.n	8006ab6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	691a      	ldr	r2, [r3, #16]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	b2d2      	uxtb	r2, r2
 8006aaa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab0:	1c5a      	adds	r2, r3, #1
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0201 	bic.w	r2, r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7fe fedf 	bl	800588a <HAL_I2C_AbortCpltCallback>
 8006acc:	e015      	b.n	8006afa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad8:	2b40      	cmp	r3, #64	; 0x40
 8006ada:	d10b      	bne.n	8006af4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	691a      	ldr	r2, [r3, #16]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae6:	b2d2      	uxtb	r2, r2
 8006ae8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aee:	1c5a      	adds	r2, r3, #1
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7fe febf 	bl	8005878 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10e      	bne.n	8006b28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d109      	bne.n	8006b28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d104      	bne.n	8006b28 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d007      	beq.n	8006b38 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685a      	ldr	r2, [r3, #4]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b36:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b3e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	d113      	bne.n	8006b74 <I2C_ITError+0x254>
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
 8006b4e:	2b28      	cmp	r3, #40	; 0x28
 8006b50:	d110      	bne.n	8006b74 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a0a      	ldr	r2, [pc, #40]	; (8006b80 <I2C_ITError+0x260>)
 8006b56:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2220      	movs	r2, #32
 8006b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7fe fe67 	bl	8005842 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b74:	bf00      	nop
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	08006e25 	.word	0x08006e25
 8006b80:	ffff0000 	.word	0xffff0000

08006b84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af02      	add	r7, sp, #8
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	607a      	str	r2, [r7, #4]
 8006b8e:	603b      	str	r3, [r7, #0]
 8006b90:	460b      	mov	r3, r1
 8006b92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2b08      	cmp	r3, #8
 8006b9e:	d006      	beq.n	8006bae <I2C_MasterRequestWrite+0x2a>
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d003      	beq.n	8006bae <I2C_MasterRequestWrite+0x2a>
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006bac:	d108      	bne.n	8006bc0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	e00b      	b.n	8006bd8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc4:	2b12      	cmp	r3, #18
 8006bc6:	d107      	bne.n	8006bd8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bd6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f000 f9c5 	bl	8006f74 <I2C_WaitOnFlagUntilTimeout>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00d      	beq.n	8006c0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bfe:	d103      	bne.n	8006c08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e035      	b.n	8006c78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c14:	d108      	bne.n	8006c28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c16:	897b      	ldrh	r3, [r7, #10]
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c24:	611a      	str	r2, [r3, #16]
 8006c26:	e01b      	b.n	8006c60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006c28:	897b      	ldrh	r3, [r7, #10]
 8006c2a:	11db      	asrs	r3, r3, #7
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	f003 0306 	and.w	r3, r3, #6
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	f063 030f 	orn	r3, r3, #15
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	490e      	ldr	r1, [pc, #56]	; (8006c80 <I2C_MasterRequestWrite+0xfc>)
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 fa0e 	bl	8007068 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e010      	b.n	8006c78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006c56:	897b      	ldrh	r3, [r7, #10]
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	4907      	ldr	r1, [pc, #28]	; (8006c84 <I2C_MasterRequestWrite+0x100>)
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 f9fe 	bl	8007068 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e000      	b.n	8006c78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3718      	adds	r7, #24
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	00010008 	.word	0x00010008
 8006c84:	00010002 	.word	0x00010002

08006c88 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b088      	sub	sp, #32
 8006c8c:	af02      	add	r7, sp, #8
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	607a      	str	r2, [r7, #4]
 8006c92:	603b      	str	r3, [r7, #0]
 8006c94:	460b      	mov	r3, r1
 8006c96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d006      	beq.n	8006cc2 <I2C_MasterRequestRead+0x3a>
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d003      	beq.n	8006cc2 <I2C_MasterRequestRead+0x3a>
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006cc0:	d108      	bne.n	8006cd4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	e00b      	b.n	8006cec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd8:	2b11      	cmp	r3, #17
 8006cda:	d107      	bne.n	8006cec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 f93b 	bl	8006f74 <I2C_WaitOnFlagUntilTimeout>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00d      	beq.n	8006d20 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d12:	d103      	bne.n	8006d1c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e079      	b.n	8006e14 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d28:	d108      	bne.n	8006d3c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d2a:	897b      	ldrh	r3, [r7, #10]
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	f043 0301 	orr.w	r3, r3, #1
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	611a      	str	r2, [r3, #16]
 8006d3a:	e05f      	b.n	8006dfc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006d3c:	897b      	ldrh	r3, [r7, #10]
 8006d3e:	11db      	asrs	r3, r3, #7
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	f003 0306 	and.w	r3, r3, #6
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	f063 030f 	orn	r3, r3, #15
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	4930      	ldr	r1, [pc, #192]	; (8006e1c <I2C_MasterRequestRead+0x194>)
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 f984 	bl	8007068 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e054      	b.n	8006e14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006d6a:	897b      	ldrh	r3, [r7, #10]
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	4929      	ldr	r1, [pc, #164]	; (8006e20 <I2C_MasterRequestRead+0x198>)
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f000 f974 	bl	8007068 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e044      	b.n	8006e14 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	613b      	str	r3, [r7, #16]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	613b      	str	r3, [r7, #16]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	613b      	str	r3, [r7, #16]
 8006d9e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f000 f8d9 	bl	8006f74 <I2C_WaitOnFlagUntilTimeout>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00d      	beq.n	8006de4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dd6:	d103      	bne.n	8006de0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dde:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e017      	b.n	8006e14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006de4:	897b      	ldrh	r3, [r7, #10]
 8006de6:	11db      	asrs	r3, r3, #7
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	f003 0306 	and.w	r3, r3, #6
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	f063 030e 	orn	r3, r3, #14
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	4907      	ldr	r1, [pc, #28]	; (8006e20 <I2C_MasterRequestRead+0x198>)
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f000 f930 	bl	8007068 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e000      	b.n	8006e14 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3718      	adds	r7, #24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	00010008 	.word	0x00010008
 8006e20:	00010002 	.word	0x00010002

08006e24 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e3c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006e3e:	4b4b      	ldr	r3, [pc, #300]	; (8006f6c <I2C_DMAAbort+0x148>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	08db      	lsrs	r3, r3, #3
 8006e44:	4a4a      	ldr	r2, [pc, #296]	; (8006f70 <I2C_DMAAbort+0x14c>)
 8006e46:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4a:	0a1a      	lsrs	r2, r3, #8
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	00da      	lsls	r2, r3, #3
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d106      	bne.n	8006e6c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e62:	f043 0220 	orr.w	r2, r3, #32
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006e6a:	e00a      	b.n	8006e82 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e80:	d0ea      	beq.n	8006e58 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8e:	2200      	movs	r2, #0
 8006e90:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eb0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d003      	beq.n	8006ec8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d003      	beq.n	8006ed8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 0201 	bic.w	r2, r2, #1
 8006ee6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b60      	cmp	r3, #96	; 0x60
 8006ef2:	d10e      	bne.n	8006f12 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	2200      	movs	r2, #0
 8006f08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006f0a:	6978      	ldr	r0, [r7, #20]
 8006f0c:	f7fe fcbd 	bl	800588a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f10:	e027      	b.n	8006f62 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f12:	7cfb      	ldrb	r3, [r7, #19]
 8006f14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f18:	2b28      	cmp	r3, #40	; 0x28
 8006f1a:	d117      	bne.n	8006f4c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f042 0201 	orr.w	r2, r2, #1
 8006f2a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f3a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	2228      	movs	r2, #40	; 0x28
 8006f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f4a:	e007      	b.n	8006f5c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006f5c:	6978      	ldr	r0, [r7, #20]
 8006f5e:	f7fe fc8b 	bl	8005878 <HAL_I2C_ErrorCallback>
}
 8006f62:	bf00      	nop
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	20000080 	.word	0x20000080
 8006f70:	14f8b589 	.word	0x14f8b589

08006f74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	4613      	mov	r3, r2
 8006f82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f84:	e048      	b.n	8007018 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8c:	d044      	beq.n	8007018 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f8e:	f7fc fb31 	bl	80035f4 <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d302      	bcc.n	8006fa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d139      	bne.n	8007018 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	0c1b      	lsrs	r3, r3, #16
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d10d      	bne.n	8006fca <I2C_WaitOnFlagUntilTimeout+0x56>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	43da      	mvns	r2, r3
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	4013      	ands	r3, r2
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	bf0c      	ite	eq
 8006fc0:	2301      	moveq	r3, #1
 8006fc2:	2300      	movne	r3, #0
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	e00c      	b.n	8006fe4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	43da      	mvns	r2, r3
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	bf0c      	ite	eq
 8006fdc:	2301      	moveq	r3, #1
 8006fde:	2300      	movne	r3, #0
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	79fb      	ldrb	r3, [r7, #7]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d116      	bne.n	8007018 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007004:	f043 0220 	orr.w	r2, r3, #32
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e023      	b.n	8007060 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	0c1b      	lsrs	r3, r3, #16
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b01      	cmp	r3, #1
 8007020:	d10d      	bne.n	800703e <I2C_WaitOnFlagUntilTimeout+0xca>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	43da      	mvns	r2, r3
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	4013      	ands	r3, r2
 800702e:	b29b      	uxth	r3, r3
 8007030:	2b00      	cmp	r3, #0
 8007032:	bf0c      	ite	eq
 8007034:	2301      	moveq	r3, #1
 8007036:	2300      	movne	r3, #0
 8007038:	b2db      	uxtb	r3, r3
 800703a:	461a      	mov	r2, r3
 800703c:	e00c      	b.n	8007058 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	43da      	mvns	r2, r3
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	4013      	ands	r3, r2
 800704a:	b29b      	uxth	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	bf0c      	ite	eq
 8007050:	2301      	moveq	r3, #1
 8007052:	2300      	movne	r3, #0
 8007054:	b2db      	uxtb	r3, r3
 8007056:	461a      	mov	r2, r3
 8007058:	79fb      	ldrb	r3, [r7, #7]
 800705a:	429a      	cmp	r2, r3
 800705c:	d093      	beq.n	8006f86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
 8007074:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007076:	e071      	b.n	800715c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007086:	d123      	bne.n	80070d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007096:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070bc:	f043 0204 	orr.w	r2, r3, #4
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e067      	b.n	80071a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d6:	d041      	beq.n	800715c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070d8:	f7fc fa8c 	bl	80035f4 <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d302      	bcc.n	80070ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d136      	bne.n	800715c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	0c1b      	lsrs	r3, r3, #16
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d10c      	bne.n	8007112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	43da      	mvns	r2, r3
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	4013      	ands	r3, r2
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	bf14      	ite	ne
 800710a:	2301      	movne	r3, #1
 800710c:	2300      	moveq	r3, #0
 800710e:	b2db      	uxtb	r3, r3
 8007110:	e00b      	b.n	800712a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	43da      	mvns	r2, r3
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	4013      	ands	r3, r2
 800711e:	b29b      	uxth	r3, r3
 8007120:	2b00      	cmp	r3, #0
 8007122:	bf14      	ite	ne
 8007124:	2301      	movne	r3, #1
 8007126:	2300      	moveq	r3, #0
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d016      	beq.n	800715c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2220      	movs	r2, #32
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007148:	f043 0220 	orr.w	r2, r3, #32
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e021      	b.n	80071a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	0c1b      	lsrs	r3, r3, #16
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b01      	cmp	r3, #1
 8007164:	d10c      	bne.n	8007180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	43da      	mvns	r2, r3
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	4013      	ands	r3, r2
 8007172:	b29b      	uxth	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	bf14      	ite	ne
 8007178:	2301      	movne	r3, #1
 800717a:	2300      	moveq	r3, #0
 800717c:	b2db      	uxtb	r3, r3
 800717e:	e00b      	b.n	8007198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	43da      	mvns	r2, r3
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	4013      	ands	r3, r2
 800718c:	b29b      	uxth	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	bf14      	ite	ne
 8007192:	2301      	movne	r3, #1
 8007194:	2300      	moveq	r3, #0
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	f47f af6d 	bne.w	8007078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071b4:	e034      	b.n	8007220 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 f915 	bl	80073e6 <I2C_IsAcknowledgeFailed>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e034      	b.n	8007230 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071cc:	d028      	beq.n	8007220 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ce:	f7fc fa11 	bl	80035f4 <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d302      	bcc.n	80071e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d11d      	bne.n	8007220 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ee:	2b80      	cmp	r3, #128	; 0x80
 80071f0:	d016      	beq.n	8007220 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2220      	movs	r2, #32
 80071fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720c:	f043 0220 	orr.w	r2, r3, #32
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e007      	b.n	8007230 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800722a:	2b80      	cmp	r3, #128	; 0x80
 800722c:	d1c3      	bne.n	80071b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007244:	e034      	b.n	80072b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f000 f8cd 	bl	80073e6 <I2C_IsAcknowledgeFailed>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e034      	b.n	80072c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725c:	d028      	beq.n	80072b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800725e:	f7fc f9c9 	bl	80035f4 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	429a      	cmp	r2, r3
 800726c:	d302      	bcc.n	8007274 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d11d      	bne.n	80072b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	f003 0304 	and.w	r3, r3, #4
 800727e:	2b04      	cmp	r3, #4
 8007280:	d016      	beq.n	80072b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2220      	movs	r2, #32
 800728c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729c:	f043 0220 	orr.w	r2, r3, #32
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e007      	b.n	80072c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	f003 0304 	and.w	r3, r3, #4
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	d1c3      	bne.n	8007246 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072d0:	2300      	movs	r3, #0
 80072d2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80072d4:	4b13      	ldr	r3, [pc, #76]	; (8007324 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	08db      	lsrs	r3, r3, #3
 80072da:	4a13      	ldr	r2, [pc, #76]	; (8007328 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80072dc:	fba2 2303 	umull	r2, r3, r2, r3
 80072e0:	0a1a      	lsrs	r2, r3, #8
 80072e2:	4613      	mov	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3b01      	subs	r3, #1
 80072ee:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d107      	bne.n	8007306 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	f043 0220 	orr.w	r2, r3, #32
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e008      	b.n	8007318 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007314:	d0e9      	beq.n	80072ea <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	bc80      	pop	{r7}
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	20000080 	.word	0x20000080
 8007328:	14f8b589 	.word	0x14f8b589

0800732c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007338:	e049      	b.n	80073ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	f003 0310 	and.w	r3, r3, #16
 8007344:	2b10      	cmp	r3, #16
 8007346:	d119      	bne.n	800737c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f06f 0210 	mvn.w	r2, #16
 8007350:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2220      	movs	r2, #32
 800735c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e030      	b.n	80073de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800737c:	f7fc f93a 	bl	80035f4 <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	429a      	cmp	r2, r3
 800738a:	d302      	bcc.n	8007392 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d11d      	bne.n	80073ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739c:	2b40      	cmp	r3, #64	; 0x40
 800739e:	d016      	beq.n	80073ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ba:	f043 0220 	orr.w	r2, r3, #32
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e007      	b.n	80073de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d8:	2b40      	cmp	r3, #64	; 0x40
 80073da:	d1ae      	bne.n	800733a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	695b      	ldr	r3, [r3, #20]
 80073f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073fc:	d11b      	bne.n	8007436 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007406:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2220      	movs	r2, #32
 8007412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007422:	f043 0204 	orr.w	r2, r3, #4
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e000      	b.n	8007438 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	bc80      	pop	{r7}
 8007440:	4770      	bx	lr

08007442 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007442:	b480      	push	{r7}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007452:	d103      	bne.n	800745c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800745a:	e007      	b.n	800746c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007464:	d102      	bne.n	800746c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2208      	movs	r2, #8
 800746a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	bc80      	pop	{r7}
 8007474:	4770      	bx	lr
	...

08007478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e272      	b.n	8007970 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b00      	cmp	r3, #0
 8007494:	f000 8087 	beq.w	80075a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007498:	4b92      	ldr	r3, [pc, #584]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f003 030c 	and.w	r3, r3, #12
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d00c      	beq.n	80074be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80074a4:	4b8f      	ldr	r3, [pc, #572]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	f003 030c 	and.w	r3, r3, #12
 80074ac:	2b08      	cmp	r3, #8
 80074ae:	d112      	bne.n	80074d6 <HAL_RCC_OscConfig+0x5e>
 80074b0:	4b8c      	ldr	r3, [pc, #560]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074bc:	d10b      	bne.n	80074d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074be:	4b89      	ldr	r3, [pc, #548]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d06c      	beq.n	80075a4 <HAL_RCC_OscConfig+0x12c>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d168      	bne.n	80075a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e24c      	b.n	8007970 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074de:	d106      	bne.n	80074ee <HAL_RCC_OscConfig+0x76>
 80074e0:	4b80      	ldr	r3, [pc, #512]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a7f      	ldr	r2, [pc, #508]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 80074e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074ea:	6013      	str	r3, [r2, #0]
 80074ec:	e02e      	b.n	800754c <HAL_RCC_OscConfig+0xd4>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10c      	bne.n	8007510 <HAL_RCC_OscConfig+0x98>
 80074f6:	4b7b      	ldr	r3, [pc, #492]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a7a      	ldr	r2, [pc, #488]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 80074fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007500:	6013      	str	r3, [r2, #0]
 8007502:	4b78      	ldr	r3, [pc, #480]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a77      	ldr	r2, [pc, #476]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 8007508:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800750c:	6013      	str	r3, [r2, #0]
 800750e:	e01d      	b.n	800754c <HAL_RCC_OscConfig+0xd4>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007518:	d10c      	bne.n	8007534 <HAL_RCC_OscConfig+0xbc>
 800751a:	4b72      	ldr	r3, [pc, #456]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a71      	ldr	r2, [pc, #452]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 8007520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007524:	6013      	str	r3, [r2, #0]
 8007526:	4b6f      	ldr	r3, [pc, #444]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a6e      	ldr	r2, [pc, #440]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 800752c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007530:	6013      	str	r3, [r2, #0]
 8007532:	e00b      	b.n	800754c <HAL_RCC_OscConfig+0xd4>
 8007534:	4b6b      	ldr	r3, [pc, #428]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a6a      	ldr	r2, [pc, #424]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 800753a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800753e:	6013      	str	r3, [r2, #0]
 8007540:	4b68      	ldr	r3, [pc, #416]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a67      	ldr	r2, [pc, #412]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 8007546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800754a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d013      	beq.n	800757c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007554:	f7fc f84e 	bl	80035f4 <HAL_GetTick>
 8007558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800755a:	e008      	b.n	800756e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800755c:	f7fc f84a 	bl	80035f4 <HAL_GetTick>
 8007560:	4602      	mov	r2, r0
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	2b64      	cmp	r3, #100	; 0x64
 8007568:	d901      	bls.n	800756e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e200      	b.n	8007970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800756e:	4b5d      	ldr	r3, [pc, #372]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d0f0      	beq.n	800755c <HAL_RCC_OscConfig+0xe4>
 800757a:	e014      	b.n	80075a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800757c:	f7fc f83a 	bl	80035f4 <HAL_GetTick>
 8007580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007582:	e008      	b.n	8007596 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007584:	f7fc f836 	bl	80035f4 <HAL_GetTick>
 8007588:	4602      	mov	r2, r0
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	2b64      	cmp	r3, #100	; 0x64
 8007590:	d901      	bls.n	8007596 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e1ec      	b.n	8007970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007596:	4b53      	ldr	r3, [pc, #332]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1f0      	bne.n	8007584 <HAL_RCC_OscConfig+0x10c>
 80075a2:	e000      	b.n	80075a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d063      	beq.n	800767a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80075b2:	4b4c      	ldr	r3, [pc, #304]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f003 030c 	and.w	r3, r3, #12
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00b      	beq.n	80075d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80075be:	4b49      	ldr	r3, [pc, #292]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f003 030c 	and.w	r3, r3, #12
 80075c6:	2b08      	cmp	r3, #8
 80075c8:	d11c      	bne.n	8007604 <HAL_RCC_OscConfig+0x18c>
 80075ca:	4b46      	ldr	r3, [pc, #280]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d116      	bne.n	8007604 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075d6:	4b43      	ldr	r3, [pc, #268]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0302 	and.w	r3, r3, #2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d005      	beq.n	80075ee <HAL_RCC_OscConfig+0x176>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d001      	beq.n	80075ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e1c0      	b.n	8007970 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075ee:	4b3d      	ldr	r3, [pc, #244]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	00db      	lsls	r3, r3, #3
 80075fc:	4939      	ldr	r1, [pc, #228]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007602:	e03a      	b.n	800767a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d020      	beq.n	800764e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800760c:	4b36      	ldr	r3, [pc, #216]	; (80076e8 <HAL_RCC_OscConfig+0x270>)
 800760e:	2201      	movs	r2, #1
 8007610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007612:	f7fb ffef 	bl	80035f4 <HAL_GetTick>
 8007616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007618:	e008      	b.n	800762c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800761a:	f7fb ffeb 	bl	80035f4 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	2b02      	cmp	r3, #2
 8007626:	d901      	bls.n	800762c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	e1a1      	b.n	8007970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800762c:	4b2d      	ldr	r3, [pc, #180]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0302 	and.w	r3, r3, #2
 8007634:	2b00      	cmp	r3, #0
 8007636:	d0f0      	beq.n	800761a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007638:	4b2a      	ldr	r3, [pc, #168]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	695b      	ldr	r3, [r3, #20]
 8007644:	00db      	lsls	r3, r3, #3
 8007646:	4927      	ldr	r1, [pc, #156]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 8007648:	4313      	orrs	r3, r2
 800764a:	600b      	str	r3, [r1, #0]
 800764c:	e015      	b.n	800767a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800764e:	4b26      	ldr	r3, [pc, #152]	; (80076e8 <HAL_RCC_OscConfig+0x270>)
 8007650:	2200      	movs	r2, #0
 8007652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007654:	f7fb ffce 	bl	80035f4 <HAL_GetTick>
 8007658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800765a:	e008      	b.n	800766e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800765c:	f7fb ffca 	bl	80035f4 <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b02      	cmp	r3, #2
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e180      	b.n	8007970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800766e:	4b1d      	ldr	r3, [pc, #116]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1f0      	bne.n	800765c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0308 	and.w	r3, r3, #8
 8007682:	2b00      	cmp	r3, #0
 8007684:	d03a      	beq.n	80076fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d019      	beq.n	80076c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800768e:	4b17      	ldr	r3, [pc, #92]	; (80076ec <HAL_RCC_OscConfig+0x274>)
 8007690:	2201      	movs	r2, #1
 8007692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007694:	f7fb ffae 	bl	80035f4 <HAL_GetTick>
 8007698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800769a:	e008      	b.n	80076ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800769c:	f7fb ffaa 	bl	80035f4 <HAL_GetTick>
 80076a0:	4602      	mov	r2, r0
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d901      	bls.n	80076ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e160      	b.n	8007970 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076ae:	4b0d      	ldr	r3, [pc, #52]	; (80076e4 <HAL_RCC_OscConfig+0x26c>)
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d0f0      	beq.n	800769c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80076ba:	2001      	movs	r0, #1
 80076bc:	f000 face 	bl	8007c5c <RCC_Delay>
 80076c0:	e01c      	b.n	80076fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076c2:	4b0a      	ldr	r3, [pc, #40]	; (80076ec <HAL_RCC_OscConfig+0x274>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076c8:	f7fb ff94 	bl	80035f4 <HAL_GetTick>
 80076cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076ce:	e00f      	b.n	80076f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076d0:	f7fb ff90 	bl	80035f4 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d908      	bls.n	80076f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e146      	b.n	8007970 <HAL_RCC_OscConfig+0x4f8>
 80076e2:	bf00      	nop
 80076e4:	40021000 	.word	0x40021000
 80076e8:	42420000 	.word	0x42420000
 80076ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076f0:	4b92      	ldr	r3, [pc, #584]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 80076f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1e9      	bne.n	80076d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 80a6 	beq.w	8007856 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800770a:	2300      	movs	r3, #0
 800770c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800770e:	4b8b      	ldr	r3, [pc, #556]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d10d      	bne.n	8007736 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800771a:	4b88      	ldr	r3, [pc, #544]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	4a87      	ldr	r2, [pc, #540]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 8007720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007724:	61d3      	str	r3, [r2, #28]
 8007726:	4b85      	ldr	r3, [pc, #532]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 8007728:	69db      	ldr	r3, [r3, #28]
 800772a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800772e:	60bb      	str	r3, [r7, #8]
 8007730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007732:	2301      	movs	r3, #1
 8007734:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007736:	4b82      	ldr	r3, [pc, #520]	; (8007940 <HAL_RCC_OscConfig+0x4c8>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800773e:	2b00      	cmp	r3, #0
 8007740:	d118      	bne.n	8007774 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007742:	4b7f      	ldr	r3, [pc, #508]	; (8007940 <HAL_RCC_OscConfig+0x4c8>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a7e      	ldr	r2, [pc, #504]	; (8007940 <HAL_RCC_OscConfig+0x4c8>)
 8007748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800774c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800774e:	f7fb ff51 	bl	80035f4 <HAL_GetTick>
 8007752:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007754:	e008      	b.n	8007768 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007756:	f7fb ff4d 	bl	80035f4 <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	2b64      	cmp	r3, #100	; 0x64
 8007762:	d901      	bls.n	8007768 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e103      	b.n	8007970 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007768:	4b75      	ldr	r3, [pc, #468]	; (8007940 <HAL_RCC_OscConfig+0x4c8>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007770:	2b00      	cmp	r3, #0
 8007772:	d0f0      	beq.n	8007756 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d106      	bne.n	800778a <HAL_RCC_OscConfig+0x312>
 800777c:	4b6f      	ldr	r3, [pc, #444]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 800777e:	6a1b      	ldr	r3, [r3, #32]
 8007780:	4a6e      	ldr	r2, [pc, #440]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 8007782:	f043 0301 	orr.w	r3, r3, #1
 8007786:	6213      	str	r3, [r2, #32]
 8007788:	e02d      	b.n	80077e6 <HAL_RCC_OscConfig+0x36e>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10c      	bne.n	80077ac <HAL_RCC_OscConfig+0x334>
 8007792:	4b6a      	ldr	r3, [pc, #424]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	4a69      	ldr	r2, [pc, #420]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 8007798:	f023 0301 	bic.w	r3, r3, #1
 800779c:	6213      	str	r3, [r2, #32]
 800779e:	4b67      	ldr	r3, [pc, #412]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	4a66      	ldr	r2, [pc, #408]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 80077a4:	f023 0304 	bic.w	r3, r3, #4
 80077a8:	6213      	str	r3, [r2, #32]
 80077aa:	e01c      	b.n	80077e6 <HAL_RCC_OscConfig+0x36e>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	2b05      	cmp	r3, #5
 80077b2:	d10c      	bne.n	80077ce <HAL_RCC_OscConfig+0x356>
 80077b4:	4b61      	ldr	r3, [pc, #388]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	4a60      	ldr	r2, [pc, #384]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 80077ba:	f043 0304 	orr.w	r3, r3, #4
 80077be:	6213      	str	r3, [r2, #32]
 80077c0:	4b5e      	ldr	r3, [pc, #376]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 80077c2:	6a1b      	ldr	r3, [r3, #32]
 80077c4:	4a5d      	ldr	r2, [pc, #372]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 80077c6:	f043 0301 	orr.w	r3, r3, #1
 80077ca:	6213      	str	r3, [r2, #32]
 80077cc:	e00b      	b.n	80077e6 <HAL_RCC_OscConfig+0x36e>
 80077ce:	4b5b      	ldr	r3, [pc, #364]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	4a5a      	ldr	r2, [pc, #360]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 80077d4:	f023 0301 	bic.w	r3, r3, #1
 80077d8:	6213      	str	r3, [r2, #32]
 80077da:	4b58      	ldr	r3, [pc, #352]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	4a57      	ldr	r2, [pc, #348]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 80077e0:	f023 0304 	bic.w	r3, r3, #4
 80077e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d015      	beq.n	800781a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077ee:	f7fb ff01 	bl	80035f4 <HAL_GetTick>
 80077f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077f4:	e00a      	b.n	800780c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077f6:	f7fb fefd 	bl	80035f4 <HAL_GetTick>
 80077fa:	4602      	mov	r2, r0
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	f241 3288 	movw	r2, #5000	; 0x1388
 8007804:	4293      	cmp	r3, r2
 8007806:	d901      	bls.n	800780c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e0b1      	b.n	8007970 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800780c:	4b4b      	ldr	r3, [pc, #300]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b00      	cmp	r3, #0
 8007816:	d0ee      	beq.n	80077f6 <HAL_RCC_OscConfig+0x37e>
 8007818:	e014      	b.n	8007844 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800781a:	f7fb feeb 	bl	80035f4 <HAL_GetTick>
 800781e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007820:	e00a      	b.n	8007838 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007822:	f7fb fee7 	bl	80035f4 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007830:	4293      	cmp	r3, r2
 8007832:	d901      	bls.n	8007838 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e09b      	b.n	8007970 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007838:	4b40      	ldr	r3, [pc, #256]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 800783a:	6a1b      	ldr	r3, [r3, #32]
 800783c:	f003 0302 	and.w	r3, r3, #2
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1ee      	bne.n	8007822 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007844:	7dfb      	ldrb	r3, [r7, #23]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d105      	bne.n	8007856 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800784a:	4b3c      	ldr	r3, [pc, #240]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	4a3b      	ldr	r2, [pc, #236]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 8007850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007854:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 8087 	beq.w	800796e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007860:	4b36      	ldr	r3, [pc, #216]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f003 030c 	and.w	r3, r3, #12
 8007868:	2b08      	cmp	r3, #8
 800786a:	d061      	beq.n	8007930 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	2b02      	cmp	r3, #2
 8007872:	d146      	bne.n	8007902 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007874:	4b33      	ldr	r3, [pc, #204]	; (8007944 <HAL_RCC_OscConfig+0x4cc>)
 8007876:	2200      	movs	r2, #0
 8007878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800787a:	f7fb febb 	bl	80035f4 <HAL_GetTick>
 800787e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007880:	e008      	b.n	8007894 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007882:	f7fb feb7 	bl	80035f4 <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2b02      	cmp	r3, #2
 800788e:	d901      	bls.n	8007894 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e06d      	b.n	8007970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007894:	4b29      	ldr	r3, [pc, #164]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1f0      	bne.n	8007882 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078a8:	d108      	bne.n	80078bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80078aa:	4b24      	ldr	r3, [pc, #144]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	4921      	ldr	r1, [pc, #132]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80078bc:	4b1f      	ldr	r3, [pc, #124]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a19      	ldr	r1, [r3, #32]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078cc:	430b      	orrs	r3, r1
 80078ce:	491b      	ldr	r1, [pc, #108]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078d4:	4b1b      	ldr	r3, [pc, #108]	; (8007944 <HAL_RCC_OscConfig+0x4cc>)
 80078d6:	2201      	movs	r2, #1
 80078d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078da:	f7fb fe8b 	bl	80035f4 <HAL_GetTick>
 80078de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80078e0:	e008      	b.n	80078f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078e2:	f7fb fe87 	bl	80035f4 <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d901      	bls.n	80078f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e03d      	b.n	8007970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80078f4:	4b11      	ldr	r3, [pc, #68]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d0f0      	beq.n	80078e2 <HAL_RCC_OscConfig+0x46a>
 8007900:	e035      	b.n	800796e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007902:	4b10      	ldr	r3, [pc, #64]	; (8007944 <HAL_RCC_OscConfig+0x4cc>)
 8007904:	2200      	movs	r2, #0
 8007906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007908:	f7fb fe74 	bl	80035f4 <HAL_GetTick>
 800790c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800790e:	e008      	b.n	8007922 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007910:	f7fb fe70 	bl	80035f4 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b02      	cmp	r3, #2
 800791c:	d901      	bls.n	8007922 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e026      	b.n	8007970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007922:	4b06      	ldr	r3, [pc, #24]	; (800793c <HAL_RCC_OscConfig+0x4c4>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1f0      	bne.n	8007910 <HAL_RCC_OscConfig+0x498>
 800792e:	e01e      	b.n	800796e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	69db      	ldr	r3, [r3, #28]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d107      	bne.n	8007948 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e019      	b.n	8007970 <HAL_RCC_OscConfig+0x4f8>
 800793c:	40021000 	.word	0x40021000
 8007940:	40007000 	.word	0x40007000
 8007944:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007948:	4b0b      	ldr	r3, [pc, #44]	; (8007978 <HAL_RCC_OscConfig+0x500>)
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a1b      	ldr	r3, [r3, #32]
 8007958:	429a      	cmp	r2, r3
 800795a:	d106      	bne.n	800796a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007966:	429a      	cmp	r2, r3
 8007968:	d001      	beq.n	800796e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e000      	b.n	8007970 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3718      	adds	r7, #24
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	40021000 	.word	0x40021000

0800797c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d101      	bne.n	8007990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	e0d0      	b.n	8007b32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007990:	4b6a      	ldr	r3, [pc, #424]	; (8007b3c <HAL_RCC_ClockConfig+0x1c0>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0307 	and.w	r3, r3, #7
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	429a      	cmp	r2, r3
 800799c:	d910      	bls.n	80079c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800799e:	4b67      	ldr	r3, [pc, #412]	; (8007b3c <HAL_RCC_ClockConfig+0x1c0>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f023 0207 	bic.w	r2, r3, #7
 80079a6:	4965      	ldr	r1, [pc, #404]	; (8007b3c <HAL_RCC_ClockConfig+0x1c0>)
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079ae:	4b63      	ldr	r3, [pc, #396]	; (8007b3c <HAL_RCC_ClockConfig+0x1c0>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 0307 	and.w	r3, r3, #7
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d001      	beq.n	80079c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e0b8      	b.n	8007b32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0302 	and.w	r3, r3, #2
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d020      	beq.n	8007a0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0304 	and.w	r3, r3, #4
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d005      	beq.n	80079e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80079d8:	4b59      	ldr	r3, [pc, #356]	; (8007b40 <HAL_RCC_ClockConfig+0x1c4>)
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	4a58      	ldr	r2, [pc, #352]	; (8007b40 <HAL_RCC_ClockConfig+0x1c4>)
 80079de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80079e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0308 	and.w	r3, r3, #8
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d005      	beq.n	80079fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079f0:	4b53      	ldr	r3, [pc, #332]	; (8007b40 <HAL_RCC_ClockConfig+0x1c4>)
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	4a52      	ldr	r2, [pc, #328]	; (8007b40 <HAL_RCC_ClockConfig+0x1c4>)
 80079f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80079fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079fc:	4b50      	ldr	r3, [pc, #320]	; (8007b40 <HAL_RCC_ClockConfig+0x1c4>)
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	494d      	ldr	r1, [pc, #308]	; (8007b40 <HAL_RCC_ClockConfig+0x1c4>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d040      	beq.n	8007a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d107      	bne.n	8007a32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a22:	4b47      	ldr	r3, [pc, #284]	; (8007b40 <HAL_RCC_ClockConfig+0x1c4>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d115      	bne.n	8007a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e07f      	b.n	8007b32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d107      	bne.n	8007a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a3a:	4b41      	ldr	r3, [pc, #260]	; (8007b40 <HAL_RCC_ClockConfig+0x1c4>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d109      	bne.n	8007a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e073      	b.n	8007b32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a4a:	4b3d      	ldr	r3, [pc, #244]	; (8007b40 <HAL_RCC_ClockConfig+0x1c4>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0302 	and.w	r3, r3, #2
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e06b      	b.n	8007b32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a5a:	4b39      	ldr	r3, [pc, #228]	; (8007b40 <HAL_RCC_ClockConfig+0x1c4>)
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	f023 0203 	bic.w	r2, r3, #3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	4936      	ldr	r1, [pc, #216]	; (8007b40 <HAL_RCC_ClockConfig+0x1c4>)
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a6c:	f7fb fdc2 	bl	80035f4 <HAL_GetTick>
 8007a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a72:	e00a      	b.n	8007a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a74:	f7fb fdbe 	bl	80035f4 <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d901      	bls.n	8007a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e053      	b.n	8007b32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a8a:	4b2d      	ldr	r3, [pc, #180]	; (8007b40 <HAL_RCC_ClockConfig+0x1c4>)
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f003 020c 	and.w	r2, r3, #12
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d1eb      	bne.n	8007a74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a9c:	4b27      	ldr	r3, [pc, #156]	; (8007b3c <HAL_RCC_ClockConfig+0x1c0>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0307 	and.w	r3, r3, #7
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d210      	bcs.n	8007acc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aaa:	4b24      	ldr	r3, [pc, #144]	; (8007b3c <HAL_RCC_ClockConfig+0x1c0>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f023 0207 	bic.w	r2, r3, #7
 8007ab2:	4922      	ldr	r1, [pc, #136]	; (8007b3c <HAL_RCC_ClockConfig+0x1c0>)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aba:	4b20      	ldr	r3, [pc, #128]	; (8007b3c <HAL_RCC_ClockConfig+0x1c0>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0307 	and.w	r3, r3, #7
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d001      	beq.n	8007acc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e032      	b.n	8007b32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d008      	beq.n	8007aea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ad8:	4b19      	ldr	r3, [pc, #100]	; (8007b40 <HAL_RCC_ClockConfig+0x1c4>)
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	4916      	ldr	r1, [pc, #88]	; (8007b40 <HAL_RCC_ClockConfig+0x1c4>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0308 	and.w	r3, r3, #8
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d009      	beq.n	8007b0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007af6:	4b12      	ldr	r3, [pc, #72]	; (8007b40 <HAL_RCC_ClockConfig+0x1c4>)
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	490e      	ldr	r1, [pc, #56]	; (8007b40 <HAL_RCC_ClockConfig+0x1c4>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007b0a:	f000 f821 	bl	8007b50 <HAL_RCC_GetSysClockFreq>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	4b0b      	ldr	r3, [pc, #44]	; (8007b40 <HAL_RCC_ClockConfig+0x1c4>)
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	091b      	lsrs	r3, r3, #4
 8007b16:	f003 030f 	and.w	r3, r3, #15
 8007b1a:	490a      	ldr	r1, [pc, #40]	; (8007b44 <HAL_RCC_ClockConfig+0x1c8>)
 8007b1c:	5ccb      	ldrb	r3, [r1, r3]
 8007b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b22:	4a09      	ldr	r2, [pc, #36]	; (8007b48 <HAL_RCC_ClockConfig+0x1cc>)
 8007b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007b26:	4b09      	ldr	r3, [pc, #36]	; (8007b4c <HAL_RCC_ClockConfig+0x1d0>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fb fd20 	bl	8003570 <HAL_InitTick>

  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	40022000 	.word	0x40022000
 8007b40:	40021000 	.word	0x40021000
 8007b44:	0800cfa4 	.word	0x0800cfa4
 8007b48:	20000080 	.word	0x20000080
 8007b4c:	20000084 	.word	0x20000084

08007b50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	60fb      	str	r3, [r7, #12]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60bb      	str	r3, [r7, #8]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	617b      	str	r3, [r7, #20]
 8007b62:	2300      	movs	r3, #0
 8007b64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007b66:	2300      	movs	r3, #0
 8007b68:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007b6a:	4b1e      	ldr	r3, [pc, #120]	; (8007be4 <HAL_RCC_GetSysClockFreq+0x94>)
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f003 030c 	and.w	r3, r3, #12
 8007b76:	2b04      	cmp	r3, #4
 8007b78:	d002      	beq.n	8007b80 <HAL_RCC_GetSysClockFreq+0x30>
 8007b7a:	2b08      	cmp	r3, #8
 8007b7c:	d003      	beq.n	8007b86 <HAL_RCC_GetSysClockFreq+0x36>
 8007b7e:	e027      	b.n	8007bd0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007b80:	4b19      	ldr	r3, [pc, #100]	; (8007be8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007b82:	613b      	str	r3, [r7, #16]
      break;
 8007b84:	e027      	b.n	8007bd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	0c9b      	lsrs	r3, r3, #18
 8007b8a:	f003 030f 	and.w	r3, r3, #15
 8007b8e:	4a17      	ldr	r2, [pc, #92]	; (8007bec <HAL_RCC_GetSysClockFreq+0x9c>)
 8007b90:	5cd3      	ldrb	r3, [r2, r3]
 8007b92:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d010      	beq.n	8007bc0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007b9e:	4b11      	ldr	r3, [pc, #68]	; (8007be4 <HAL_RCC_GetSysClockFreq+0x94>)
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	0c5b      	lsrs	r3, r3, #17
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	4a11      	ldr	r2, [pc, #68]	; (8007bf0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007baa:	5cd3      	ldrb	r3, [r2, r3]
 8007bac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a0d      	ldr	r2, [pc, #52]	; (8007be8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007bb2:	fb03 f202 	mul.w	r2, r3, r2
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bbc:	617b      	str	r3, [r7, #20]
 8007bbe:	e004      	b.n	8007bca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a0c      	ldr	r2, [pc, #48]	; (8007bf4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007bc4:	fb02 f303 	mul.w	r3, r2, r3
 8007bc8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	613b      	str	r3, [r7, #16]
      break;
 8007bce:	e002      	b.n	8007bd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007bd0:	4b05      	ldr	r3, [pc, #20]	; (8007be8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007bd2:	613b      	str	r3, [r7, #16]
      break;
 8007bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007bd6:	693b      	ldr	r3, [r7, #16]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	371c      	adds	r7, #28
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bc80      	pop	{r7}
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	40021000 	.word	0x40021000
 8007be8:	007a1200 	.word	0x007a1200
 8007bec:	0800cfbc 	.word	0x0800cfbc
 8007bf0:	0800cfcc 	.word	0x0800cfcc
 8007bf4:	003d0900 	.word	0x003d0900

08007bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007bfc:	4b02      	ldr	r3, [pc, #8]	; (8007c08 <HAL_RCC_GetHCLKFreq+0x10>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bc80      	pop	{r7}
 8007c06:	4770      	bx	lr
 8007c08:	20000080 	.word	0x20000080

08007c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007c10:	f7ff fff2 	bl	8007bf8 <HAL_RCC_GetHCLKFreq>
 8007c14:	4602      	mov	r2, r0
 8007c16:	4b05      	ldr	r3, [pc, #20]	; (8007c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	0a1b      	lsrs	r3, r3, #8
 8007c1c:	f003 0307 	and.w	r3, r3, #7
 8007c20:	4903      	ldr	r1, [pc, #12]	; (8007c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c22:	5ccb      	ldrb	r3, [r1, r3]
 8007c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	40021000 	.word	0x40021000
 8007c30:	0800cfb4 	.word	0x0800cfb4

08007c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007c38:	f7ff ffde 	bl	8007bf8 <HAL_RCC_GetHCLKFreq>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	4b05      	ldr	r3, [pc, #20]	; (8007c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	0adb      	lsrs	r3, r3, #11
 8007c44:	f003 0307 	and.w	r3, r3, #7
 8007c48:	4903      	ldr	r1, [pc, #12]	; (8007c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c4a:	5ccb      	ldrb	r3, [r1, r3]
 8007c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	40021000 	.word	0x40021000
 8007c58:	0800cfb4 	.word	0x0800cfb4

08007c5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007c64:	4b0a      	ldr	r3, [pc, #40]	; (8007c90 <RCC_Delay+0x34>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a0a      	ldr	r2, [pc, #40]	; (8007c94 <RCC_Delay+0x38>)
 8007c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c6e:	0a5b      	lsrs	r3, r3, #9
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	fb02 f303 	mul.w	r3, r2, r3
 8007c76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007c78:	bf00      	nop
  }
  while (Delay --);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	1e5a      	subs	r2, r3, #1
 8007c7e:	60fa      	str	r2, [r7, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1f9      	bne.n	8007c78 <RCC_Delay+0x1c>
}
 8007c84:	bf00      	nop
 8007c86:	bf00      	nop
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bc80      	pop	{r7}
 8007c8e:	4770      	bx	lr
 8007c90:	20000080 	.word	0x20000080
 8007c94:	10624dd3 	.word	0x10624dd3

08007c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	613b      	str	r3, [r7, #16]
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d07d      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cb8:	4b4f      	ldr	r3, [pc, #316]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cba:	69db      	ldr	r3, [r3, #28]
 8007cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10d      	bne.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cc4:	4b4c      	ldr	r3, [pc, #304]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cc6:	69db      	ldr	r3, [r3, #28]
 8007cc8:	4a4b      	ldr	r2, [pc, #300]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cce:	61d3      	str	r3, [r2, #28]
 8007cd0:	4b49      	ldr	r3, [pc, #292]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cd2:	69db      	ldr	r3, [r3, #28]
 8007cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cd8:	60bb      	str	r3, [r7, #8]
 8007cda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ce0:	4b46      	ldr	r3, [pc, #280]	; (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d118      	bne.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007cec:	4b43      	ldr	r3, [pc, #268]	; (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a42      	ldr	r2, [pc, #264]	; (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cf6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cf8:	f7fb fc7c 	bl	80035f4 <HAL_GetTick>
 8007cfc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cfe:	e008      	b.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d00:	f7fb fc78 	bl	80035f4 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	2b64      	cmp	r3, #100	; 0x64
 8007d0c:	d901      	bls.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e06d      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d12:	4b3a      	ldr	r3, [pc, #232]	; (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0f0      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d1e:	4b36      	ldr	r3, [pc, #216]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d26:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d02e      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d027      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d3c:	4b2e      	ldr	r3, [pc, #184]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d3e:	6a1b      	ldr	r3, [r3, #32]
 8007d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d44:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d46:	4b2e      	ldr	r3, [pc, #184]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007d48:	2201      	movs	r2, #1
 8007d4a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d4c:	4b2c      	ldr	r3, [pc, #176]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007d52:	4a29      	ldr	r2, [pc, #164]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d014      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d62:	f7fb fc47 	bl	80035f4 <HAL_GetTick>
 8007d66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d68:	e00a      	b.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d6a:	f7fb fc43 	bl	80035f4 <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d901      	bls.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e036      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d80:	4b1d      	ldr	r3, [pc, #116]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	f003 0302 	and.w	r3, r3, #2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d0ee      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d8c:	4b1a      	ldr	r3, [pc, #104]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d8e:	6a1b      	ldr	r3, [r3, #32]
 8007d90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	4917      	ldr	r1, [pc, #92]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d105      	bne.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007da4:	4b14      	ldr	r3, [pc, #80]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	4a13      	ldr	r2, [pc, #76]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0302 	and.w	r3, r3, #2
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d008      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007dbc:	4b0e      	ldr	r3, [pc, #56]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	490b      	ldr	r1, [pc, #44]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0310 	and.w	r3, r3, #16
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d008      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007dda:	4b07      	ldr	r3, [pc, #28]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	4904      	ldr	r1, [pc, #16]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007de8:	4313      	orrs	r3, r2
 8007dea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	40021000 	.word	0x40021000
 8007dfc:	40007000 	.word	0x40007000
 8007e00:	42420440 	.word	0x42420440

08007e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e041      	b.n	8007e9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d106      	bne.n	8007e30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7fb f8c4 	bl	8002fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2202      	movs	r2, #2
 8007e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3304      	adds	r3, #4
 8007e40:	4619      	mov	r1, r3
 8007e42:	4610      	mov	r0, r2
 8007e44:	f000 ff68 	bl	8008d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
	...

08007ea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d001      	beq.n	8007ebc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e03a      	b.n	8007f32 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68da      	ldr	r2, [r3, #12]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f042 0201 	orr.w	r2, r2, #1
 8007ed2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a18      	ldr	r2, [pc, #96]	; (8007f3c <HAL_TIM_Base_Start_IT+0x98>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d00e      	beq.n	8007efc <HAL_TIM_Base_Start_IT+0x58>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ee6:	d009      	beq.n	8007efc <HAL_TIM_Base_Start_IT+0x58>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a14      	ldr	r2, [pc, #80]	; (8007f40 <HAL_TIM_Base_Start_IT+0x9c>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d004      	beq.n	8007efc <HAL_TIM_Base_Start_IT+0x58>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a13      	ldr	r2, [pc, #76]	; (8007f44 <HAL_TIM_Base_Start_IT+0xa0>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d111      	bne.n	8007f20 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f003 0307 	and.w	r3, r3, #7
 8007f06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2b06      	cmp	r3, #6
 8007f0c:	d010      	beq.n	8007f30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f042 0201 	orr.w	r2, r2, #1
 8007f1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f1e:	e007      	b.n	8007f30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f042 0201 	orr.w	r2, r2, #1
 8007f2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bc80      	pop	{r7}
 8007f3a:	4770      	bx	lr
 8007f3c:	40012c00 	.word	0x40012c00
 8007f40:	40000400 	.word	0x40000400
 8007f44:	40000800 	.word	0x40000800

08007f48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e041      	b.n	8007fde <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d106      	bne.n	8007f74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f839 	bl	8007fe6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	3304      	adds	r3, #4
 8007f84:	4619      	mov	r1, r3
 8007f86:	4610      	mov	r0, r2
 8007f88:	f000 fec6 	bl	8008d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b083      	sub	sp, #12
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007fee:	bf00      	nop
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bc80      	pop	{r7}
 8007ff6:	4770      	bx	lr

08007ff8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d109      	bne.n	800801c <HAL_TIM_PWM_Start+0x24>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800800e:	b2db      	uxtb	r3, r3
 8008010:	2b01      	cmp	r3, #1
 8008012:	bf14      	ite	ne
 8008014:	2301      	movne	r3, #1
 8008016:	2300      	moveq	r3, #0
 8008018:	b2db      	uxtb	r3, r3
 800801a:	e022      	b.n	8008062 <HAL_TIM_PWM_Start+0x6a>
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2b04      	cmp	r3, #4
 8008020:	d109      	bne.n	8008036 <HAL_TIM_PWM_Start+0x3e>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b01      	cmp	r3, #1
 800802c:	bf14      	ite	ne
 800802e:	2301      	movne	r3, #1
 8008030:	2300      	moveq	r3, #0
 8008032:	b2db      	uxtb	r3, r3
 8008034:	e015      	b.n	8008062 <HAL_TIM_PWM_Start+0x6a>
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2b08      	cmp	r3, #8
 800803a:	d109      	bne.n	8008050 <HAL_TIM_PWM_Start+0x58>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008042:	b2db      	uxtb	r3, r3
 8008044:	2b01      	cmp	r3, #1
 8008046:	bf14      	ite	ne
 8008048:	2301      	movne	r3, #1
 800804a:	2300      	moveq	r3, #0
 800804c:	b2db      	uxtb	r3, r3
 800804e:	e008      	b.n	8008062 <HAL_TIM_PWM_Start+0x6a>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b01      	cmp	r3, #1
 800805a:	bf14      	ite	ne
 800805c:	2301      	movne	r3, #1
 800805e:	2300      	moveq	r3, #0
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e05e      	b.n	8008128 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d104      	bne.n	800807a <HAL_TIM_PWM_Start+0x82>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2202      	movs	r2, #2
 8008074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008078:	e013      	b.n	80080a2 <HAL_TIM_PWM_Start+0xaa>
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	2b04      	cmp	r3, #4
 800807e:	d104      	bne.n	800808a <HAL_TIM_PWM_Start+0x92>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2202      	movs	r2, #2
 8008084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008088:	e00b      	b.n	80080a2 <HAL_TIM_PWM_Start+0xaa>
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	2b08      	cmp	r3, #8
 800808e:	d104      	bne.n	800809a <HAL_TIM_PWM_Start+0xa2>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2202      	movs	r2, #2
 8008094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008098:	e003      	b.n	80080a2 <HAL_TIM_PWM_Start+0xaa>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2202      	movs	r2, #2
 800809e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2201      	movs	r2, #1
 80080a8:	6839      	ldr	r1, [r7, #0]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f001 f8b4 	bl	8009218 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a1e      	ldr	r2, [pc, #120]	; (8008130 <HAL_TIM_PWM_Start+0x138>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d107      	bne.n	80080ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a18      	ldr	r2, [pc, #96]	; (8008130 <HAL_TIM_PWM_Start+0x138>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d00e      	beq.n	80080f2 <HAL_TIM_PWM_Start+0xfa>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080dc:	d009      	beq.n	80080f2 <HAL_TIM_PWM_Start+0xfa>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a14      	ldr	r2, [pc, #80]	; (8008134 <HAL_TIM_PWM_Start+0x13c>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d004      	beq.n	80080f2 <HAL_TIM_PWM_Start+0xfa>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a12      	ldr	r2, [pc, #72]	; (8008138 <HAL_TIM_PWM_Start+0x140>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d111      	bne.n	8008116 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f003 0307 	and.w	r3, r3, #7
 80080fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b06      	cmp	r3, #6
 8008102:	d010      	beq.n	8008126 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f042 0201 	orr.w	r2, r2, #1
 8008112:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008114:	e007      	b.n	8008126 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f042 0201 	orr.w	r2, r2, #1
 8008124:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	40012c00 	.word	0x40012c00
 8008134:	40000400 	.word	0x40000400
 8008138:	40000800 	.word	0x40000800

0800813c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]
 8008148:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d109      	bne.n	8008168 <HAL_TIM_PWM_Start_DMA+0x2c>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b02      	cmp	r3, #2
 800815e:	bf0c      	ite	eq
 8008160:	2301      	moveq	r3, #1
 8008162:	2300      	movne	r3, #0
 8008164:	b2db      	uxtb	r3, r3
 8008166:	e022      	b.n	80081ae <HAL_TIM_PWM_Start_DMA+0x72>
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	2b04      	cmp	r3, #4
 800816c:	d109      	bne.n	8008182 <HAL_TIM_PWM_Start_DMA+0x46>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b02      	cmp	r3, #2
 8008178:	bf0c      	ite	eq
 800817a:	2301      	moveq	r3, #1
 800817c:	2300      	movne	r3, #0
 800817e:	b2db      	uxtb	r3, r3
 8008180:	e015      	b.n	80081ae <HAL_TIM_PWM_Start_DMA+0x72>
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	2b08      	cmp	r3, #8
 8008186:	d109      	bne.n	800819c <HAL_TIM_PWM_Start_DMA+0x60>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b02      	cmp	r3, #2
 8008192:	bf0c      	ite	eq
 8008194:	2301      	moveq	r3, #1
 8008196:	2300      	movne	r3, #0
 8008198:	b2db      	uxtb	r3, r3
 800819a:	e008      	b.n	80081ae <HAL_TIM_PWM_Start_DMA+0x72>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	bf0c      	ite	eq
 80081a8:	2301      	moveq	r3, #1
 80081aa:	2300      	movne	r3, #0
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d001      	beq.n	80081b6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80081b2:	2302      	movs	r3, #2
 80081b4:	e153      	b.n	800845e <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d109      	bne.n	80081d0 <HAL_TIM_PWM_Start_DMA+0x94>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	bf0c      	ite	eq
 80081c8:	2301      	moveq	r3, #1
 80081ca:	2300      	movne	r3, #0
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	e022      	b.n	8008216 <HAL_TIM_PWM_Start_DMA+0xda>
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d109      	bne.n	80081ea <HAL_TIM_PWM_Start_DMA+0xae>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b01      	cmp	r3, #1
 80081e0:	bf0c      	ite	eq
 80081e2:	2301      	moveq	r3, #1
 80081e4:	2300      	movne	r3, #0
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	e015      	b.n	8008216 <HAL_TIM_PWM_Start_DMA+0xda>
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	2b08      	cmp	r3, #8
 80081ee:	d109      	bne.n	8008204 <HAL_TIM_PWM_Start_DMA+0xc8>
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	bf0c      	ite	eq
 80081fc:	2301      	moveq	r3, #1
 80081fe:	2300      	movne	r3, #0
 8008200:	b2db      	uxtb	r3, r3
 8008202:	e008      	b.n	8008216 <HAL_TIM_PWM_Start_DMA+0xda>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b01      	cmp	r3, #1
 800820e:	bf0c      	ite	eq
 8008210:	2301      	moveq	r3, #1
 8008212:	2300      	movne	r3, #0
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	d024      	beq.n	8008264 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d002      	beq.n	8008226 <HAL_TIM_PWM_Start_DMA+0xea>
 8008220:	887b      	ldrh	r3, [r7, #2]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d101      	bne.n	800822a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e119      	b.n	800845e <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d104      	bne.n	800823a <HAL_TIM_PWM_Start_DMA+0xfe>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2202      	movs	r2, #2
 8008234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008238:	e016      	b.n	8008268 <HAL_TIM_PWM_Start_DMA+0x12c>
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	2b04      	cmp	r3, #4
 800823e:	d104      	bne.n	800824a <HAL_TIM_PWM_Start_DMA+0x10e>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008248:	e00e      	b.n	8008268 <HAL_TIM_PWM_Start_DMA+0x12c>
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	2b08      	cmp	r3, #8
 800824e:	d104      	bne.n	800825a <HAL_TIM_PWM_Start_DMA+0x11e>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2202      	movs	r2, #2
 8008254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008258:	e006      	b.n	8008268 <HAL_TIM_PWM_Start_DMA+0x12c>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2202      	movs	r2, #2
 800825e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008262:	e001      	b.n	8008268 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e0fa      	b.n	800845e <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	2b0c      	cmp	r3, #12
 800826c:	f200 80ae 	bhi.w	80083cc <HAL_TIM_PWM_Start_DMA+0x290>
 8008270:	a201      	add	r2, pc, #4	; (adr r2, 8008278 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8008272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008276:	bf00      	nop
 8008278:	080082ad 	.word	0x080082ad
 800827c:	080083cd 	.word	0x080083cd
 8008280:	080083cd 	.word	0x080083cd
 8008284:	080083cd 	.word	0x080083cd
 8008288:	080082f5 	.word	0x080082f5
 800828c:	080083cd 	.word	0x080083cd
 8008290:	080083cd 	.word	0x080083cd
 8008294:	080083cd 	.word	0x080083cd
 8008298:	0800833d 	.word	0x0800833d
 800829c:	080083cd 	.word	0x080083cd
 80082a0:	080083cd 	.word	0x080083cd
 80082a4:	080083cd 	.word	0x080083cd
 80082a8:	08008385 	.word	0x08008385
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	4a6d      	ldr	r2, [pc, #436]	; (8008468 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80082b2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b8:	4a6c      	ldr	r2, [pc, #432]	; (800846c <HAL_TIM_PWM_Start_DMA+0x330>)
 80082ba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	4a6b      	ldr	r2, [pc, #428]	; (8008470 <HAL_TIM_PWM_Start_DMA+0x334>)
 80082c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80082c8:	6879      	ldr	r1, [r7, #4]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	3334      	adds	r3, #52	; 0x34
 80082d0:	461a      	mov	r2, r3
 80082d2:	887b      	ldrh	r3, [r7, #2]
 80082d4:	f7fb fe4a 	bl	8003f6c <HAL_DMA_Start_IT>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d001      	beq.n	80082e2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e0bd      	b.n	800845e <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68da      	ldr	r2, [r3, #12]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082f0:	60da      	str	r2, [r3, #12]
      break;
 80082f2:	e06e      	b.n	80083d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f8:	4a5b      	ldr	r2, [pc, #364]	; (8008468 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80082fa:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008300:	4a5a      	ldr	r2, [pc, #360]	; (800846c <HAL_TIM_PWM_Start_DMA+0x330>)
 8008302:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008308:	4a59      	ldr	r2, [pc, #356]	; (8008470 <HAL_TIM_PWM_Start_DMA+0x334>)
 800830a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008310:	6879      	ldr	r1, [r7, #4]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3338      	adds	r3, #56	; 0x38
 8008318:	461a      	mov	r2, r3
 800831a:	887b      	ldrh	r3, [r7, #2]
 800831c:	f7fb fe26 	bl	8003f6c <HAL_DMA_Start_IT>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d001      	beq.n	800832a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e099      	b.n	800845e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68da      	ldr	r2, [r3, #12]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008338:	60da      	str	r2, [r3, #12]
      break;
 800833a:	e04a      	b.n	80083d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008340:	4a49      	ldr	r2, [pc, #292]	; (8008468 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8008342:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008348:	4a48      	ldr	r2, [pc, #288]	; (800846c <HAL_TIM_PWM_Start_DMA+0x330>)
 800834a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008350:	4a47      	ldr	r2, [pc, #284]	; (8008470 <HAL_TIM_PWM_Start_DMA+0x334>)
 8008352:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008358:	6879      	ldr	r1, [r7, #4]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	333c      	adds	r3, #60	; 0x3c
 8008360:	461a      	mov	r2, r3
 8008362:	887b      	ldrh	r3, [r7, #2]
 8008364:	f7fb fe02 	bl	8003f6c <HAL_DMA_Start_IT>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d001      	beq.n	8008372 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e075      	b.n	800845e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68da      	ldr	r2, [r3, #12]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008380:	60da      	str	r2, [r3, #12]
      break;
 8008382:	e026      	b.n	80083d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008388:	4a37      	ldr	r2, [pc, #220]	; (8008468 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800838a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008390:	4a36      	ldr	r2, [pc, #216]	; (800846c <HAL_TIM_PWM_Start_DMA+0x330>)
 8008392:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008398:	4a35      	ldr	r2, [pc, #212]	; (8008470 <HAL_TIM_PWM_Start_DMA+0x334>)
 800839a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80083a0:	6879      	ldr	r1, [r7, #4]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	3340      	adds	r3, #64	; 0x40
 80083a8:	461a      	mov	r2, r3
 80083aa:	887b      	ldrh	r3, [r7, #2]
 80083ac:	f7fb fdde 	bl	8003f6c <HAL_DMA_Start_IT>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e051      	b.n	800845e <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68da      	ldr	r2, [r3, #12]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80083c8:	60da      	str	r2, [r3, #12]
      break;
 80083ca:	e002      	b.n	80083d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	75fb      	strb	r3, [r7, #23]
      break;
 80083d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80083d2:	7dfb      	ldrb	r3, [r7, #23]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d141      	bne.n	800845c <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2201      	movs	r2, #1
 80083de:	68b9      	ldr	r1, [r7, #8]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f000 ff19 	bl	8009218 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a22      	ldr	r2, [pc, #136]	; (8008474 <HAL_TIM_PWM_Start_DMA+0x338>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d107      	bne.n	8008400 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083fe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a1b      	ldr	r2, [pc, #108]	; (8008474 <HAL_TIM_PWM_Start_DMA+0x338>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d00e      	beq.n	8008428 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008412:	d009      	beq.n	8008428 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a17      	ldr	r2, [pc, #92]	; (8008478 <HAL_TIM_PWM_Start_DMA+0x33c>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d004      	beq.n	8008428 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a16      	ldr	r2, [pc, #88]	; (800847c <HAL_TIM_PWM_Start_DMA+0x340>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d111      	bne.n	800844c <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	f003 0307 	and.w	r3, r3, #7
 8008432:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	2b06      	cmp	r3, #6
 8008438:	d010      	beq.n	800845c <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f042 0201 	orr.w	r2, r2, #1
 8008448:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800844a:	e007      	b.n	800845c <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f042 0201 	orr.w	r2, r2, #1
 800845a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800845c:	7dfb      	ldrb	r3, [r7, #23]
}
 800845e:	4618      	mov	r0, r3
 8008460:	3718      	adds	r7, #24
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	08008c09 	.word	0x08008c09
 800846c:	08008cb1 	.word	0x08008cb1
 8008470:	08008b77 	.word	0x08008b77
 8008474:	40012c00 	.word	0x40012c00
 8008478:	40000400 	.word	0x40000400
 800847c:	40000800 	.word	0x40000800

08008480 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	2b0c      	cmp	r3, #12
 8008492:	d855      	bhi.n	8008540 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008494:	a201      	add	r2, pc, #4	; (adr r2, 800849c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849a:	bf00      	nop
 800849c:	080084d1 	.word	0x080084d1
 80084a0:	08008541 	.word	0x08008541
 80084a4:	08008541 	.word	0x08008541
 80084a8:	08008541 	.word	0x08008541
 80084ac:	080084ed 	.word	0x080084ed
 80084b0:	08008541 	.word	0x08008541
 80084b4:	08008541 	.word	0x08008541
 80084b8:	08008541 	.word	0x08008541
 80084bc:	08008509 	.word	0x08008509
 80084c0:	08008541 	.word	0x08008541
 80084c4:	08008541 	.word	0x08008541
 80084c8:	08008541 	.word	0x08008541
 80084cc:	08008525 	.word	0x08008525
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68da      	ldr	r2, [r3, #12]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80084de:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fb fddd 	bl	80040a4 <HAL_DMA_Abort_IT>
      break;
 80084ea:	e02c      	b.n	8008546 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68da      	ldr	r2, [r3, #12]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084fa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008500:	4618      	mov	r0, r3
 8008502:	f7fb fdcf 	bl	80040a4 <HAL_DMA_Abort_IT>
      break;
 8008506:	e01e      	b.n	8008546 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	68da      	ldr	r2, [r3, #12]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008516:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851c:	4618      	mov	r0, r3
 800851e:	f7fb fdc1 	bl	80040a4 <HAL_DMA_Abort_IT>
      break;
 8008522:	e010      	b.n	8008546 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68da      	ldr	r2, [r3, #12]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008532:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008538:	4618      	mov	r0, r3
 800853a:	f7fb fdb3 	bl	80040a4 <HAL_DMA_Abort_IT>
      break;
 800853e:	e002      	b.n	8008546 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	73fb      	strb	r3, [r7, #15]
      break;
 8008544:	bf00      	nop
  }

  if (status == HAL_OK)
 8008546:	7bfb      	ldrb	r3, [r7, #15]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d157      	bne.n	80085fc <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2200      	movs	r2, #0
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	4618      	mov	r0, r3
 8008556:	f000 fe5f 	bl	8009218 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a2a      	ldr	r2, [pc, #168]	; (8008608 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d117      	bne.n	8008594 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6a1a      	ldr	r2, [r3, #32]
 800856a:	f241 1311 	movw	r3, #4369	; 0x1111
 800856e:	4013      	ands	r3, r2
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10f      	bne.n	8008594 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6a1a      	ldr	r2, [r3, #32]
 800857a:	f240 4344 	movw	r3, #1092	; 0x444
 800857e:	4013      	ands	r3, r2
 8008580:	2b00      	cmp	r3, #0
 8008582:	d107      	bne.n	8008594 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008592:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6a1a      	ldr	r2, [r3, #32]
 800859a:	f241 1311 	movw	r3, #4369	; 0x1111
 800859e:	4013      	ands	r3, r2
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10f      	bne.n	80085c4 <HAL_TIM_PWM_Stop_DMA+0x144>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6a1a      	ldr	r2, [r3, #32]
 80085aa:	f240 4344 	movw	r3, #1092	; 0x444
 80085ae:	4013      	ands	r3, r2
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d107      	bne.n	80085c4 <HAL_TIM_PWM_Stop_DMA+0x144>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0201 	bic.w	r2, r2, #1
 80085c2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d104      	bne.n	80085d4 <HAL_TIM_PWM_Stop_DMA+0x154>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085d2:	e013      	b.n	80085fc <HAL_TIM_PWM_Stop_DMA+0x17c>
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	2b04      	cmp	r3, #4
 80085d8:	d104      	bne.n	80085e4 <HAL_TIM_PWM_Stop_DMA+0x164>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085e2:	e00b      	b.n	80085fc <HAL_TIM_PWM_Stop_DMA+0x17c>
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	2b08      	cmp	r3, #8
 80085e8:	d104      	bne.n	80085f4 <HAL_TIM_PWM_Stop_DMA+0x174>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085f2:	e003      	b.n	80085fc <HAL_TIM_PWM_Stop_DMA+0x17c>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	40012c00 	.word	0x40012c00

0800860c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	f003 0302 	and.w	r3, r3, #2
 800861e:	2b02      	cmp	r3, #2
 8008620:	d122      	bne.n	8008668 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	f003 0302 	and.w	r3, r3, #2
 800862c:	2b02      	cmp	r3, #2
 800862e:	d11b      	bne.n	8008668 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f06f 0202 	mvn.w	r2, #2
 8008638:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2201      	movs	r2, #1
 800863e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	f003 0303 	and.w	r3, r3, #3
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fa76 	bl	8008b40 <HAL_TIM_IC_CaptureCallback>
 8008654:	e005      	b.n	8008662 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fa69 	bl	8008b2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f7fa f8cd 	bl	80027fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	f003 0304 	and.w	r3, r3, #4
 8008672:	2b04      	cmp	r3, #4
 8008674:	d122      	bne.n	80086bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	f003 0304 	and.w	r3, r3, #4
 8008680:	2b04      	cmp	r3, #4
 8008682:	d11b      	bne.n	80086bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f06f 0204 	mvn.w	r2, #4
 800868c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2202      	movs	r2, #2
 8008692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d003      	beq.n	80086aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fa4c 	bl	8008b40 <HAL_TIM_IC_CaptureCallback>
 80086a8:	e005      	b.n	80086b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fa3f 	bl	8008b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7fa f8a3 	bl	80027fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	f003 0308 	and.w	r3, r3, #8
 80086c6:	2b08      	cmp	r3, #8
 80086c8:	d122      	bne.n	8008710 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	f003 0308 	and.w	r3, r3, #8
 80086d4:	2b08      	cmp	r3, #8
 80086d6:	d11b      	bne.n	8008710 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f06f 0208 	mvn.w	r2, #8
 80086e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2204      	movs	r2, #4
 80086e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	69db      	ldr	r3, [r3, #28]
 80086ee:	f003 0303 	and.w	r3, r3, #3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d003      	beq.n	80086fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fa22 	bl	8008b40 <HAL_TIM_IC_CaptureCallback>
 80086fc:	e005      	b.n	800870a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fa15 	bl	8008b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7fa f879 	bl	80027fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	f003 0310 	and.w	r3, r3, #16
 800871a:	2b10      	cmp	r3, #16
 800871c:	d122      	bne.n	8008764 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	f003 0310 	and.w	r3, r3, #16
 8008728:	2b10      	cmp	r3, #16
 800872a:	d11b      	bne.n	8008764 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f06f 0210 	mvn.w	r2, #16
 8008734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2208      	movs	r2, #8
 800873a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	69db      	ldr	r3, [r3, #28]
 8008742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008746:	2b00      	cmp	r3, #0
 8008748:	d003      	beq.n	8008752 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f9f8 	bl	8008b40 <HAL_TIM_IC_CaptureCallback>
 8008750:	e005      	b.n	800875e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f9eb 	bl	8008b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f7fa f84f 	bl	80027fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	2b01      	cmp	r3, #1
 8008770:	d10e      	bne.n	8008790 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f003 0301 	and.w	r3, r3, #1
 800877c:	2b01      	cmp	r3, #1
 800877e:	d107      	bne.n	8008790 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f06f 0201 	mvn.w	r2, #1
 8008788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7f9 fe38 	bl	8002400 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800879a:	2b80      	cmp	r3, #128	; 0x80
 800879c:	d10e      	bne.n	80087bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087a8:	2b80      	cmp	r3, #128	; 0x80
 80087aa:	d107      	bne.n	80087bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80087b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fe0a 	bl	80093d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c6:	2b40      	cmp	r3, #64	; 0x40
 80087c8:	d10e      	bne.n	80087e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d4:	2b40      	cmp	r3, #64	; 0x40
 80087d6:	d107      	bne.n	80087e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f9b5 	bl	8008b52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	f003 0320 	and.w	r3, r3, #32
 80087f2:	2b20      	cmp	r3, #32
 80087f4:	d10e      	bne.n	8008814 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f003 0320 	and.w	r3, r3, #32
 8008800:	2b20      	cmp	r3, #32
 8008802:	d107      	bne.n	8008814 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f06f 0220 	mvn.w	r2, #32
 800880c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fdd5 	bl	80093be <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008814:	bf00      	nop
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b086      	sub	sp, #24
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008828:	2300      	movs	r3, #0
 800882a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008832:	2b01      	cmp	r3, #1
 8008834:	d101      	bne.n	800883a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008836:	2302      	movs	r3, #2
 8008838:	e0ae      	b.n	8008998 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b0c      	cmp	r3, #12
 8008846:	f200 809f 	bhi.w	8008988 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800884a:	a201      	add	r2, pc, #4	; (adr r2, 8008850 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800884c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008850:	08008885 	.word	0x08008885
 8008854:	08008989 	.word	0x08008989
 8008858:	08008989 	.word	0x08008989
 800885c:	08008989 	.word	0x08008989
 8008860:	080088c5 	.word	0x080088c5
 8008864:	08008989 	.word	0x08008989
 8008868:	08008989 	.word	0x08008989
 800886c:	08008989 	.word	0x08008989
 8008870:	08008907 	.word	0x08008907
 8008874:	08008989 	.word	0x08008989
 8008878:	08008989 	.word	0x08008989
 800887c:	08008989 	.word	0x08008989
 8008880:	08008947 	.word	0x08008947
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68b9      	ldr	r1, [r7, #8]
 800888a:	4618      	mov	r0, r3
 800888c:	f000 faa6 	bl	8008ddc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	699a      	ldr	r2, [r3, #24]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f042 0208 	orr.w	r2, r2, #8
 800889e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	699a      	ldr	r2, [r3, #24]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f022 0204 	bic.w	r2, r2, #4
 80088ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6999      	ldr	r1, [r3, #24]
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	691a      	ldr	r2, [r3, #16]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	430a      	orrs	r2, r1
 80088c0:	619a      	str	r2, [r3, #24]
      break;
 80088c2:	e064      	b.n	800898e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68b9      	ldr	r1, [r7, #8]
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 faec 	bl	8008ea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	699a      	ldr	r2, [r3, #24]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	699a      	ldr	r2, [r3, #24]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	6999      	ldr	r1, [r3, #24]
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	021a      	lsls	r2, r3, #8
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	430a      	orrs	r2, r1
 8008902:	619a      	str	r2, [r3, #24]
      break;
 8008904:	e043      	b.n	800898e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	68b9      	ldr	r1, [r7, #8]
 800890c:	4618      	mov	r0, r3
 800890e:	f000 fb35 	bl	8008f7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	69da      	ldr	r2, [r3, #28]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f042 0208 	orr.w	r2, r2, #8
 8008920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	69da      	ldr	r2, [r3, #28]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f022 0204 	bic.w	r2, r2, #4
 8008930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	69d9      	ldr	r1, [r3, #28]
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	691a      	ldr	r2, [r3, #16]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	430a      	orrs	r2, r1
 8008942:	61da      	str	r2, [r3, #28]
      break;
 8008944:	e023      	b.n	800898e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68b9      	ldr	r1, [r7, #8]
 800894c:	4618      	mov	r0, r3
 800894e:	f000 fb7f 	bl	8009050 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	69da      	ldr	r2, [r3, #28]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	69da      	ldr	r2, [r3, #28]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	69d9      	ldr	r1, [r3, #28]
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	021a      	lsls	r2, r3, #8
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	430a      	orrs	r2, r1
 8008984:	61da      	str	r2, [r3, #28]
      break;
 8008986:	e002      	b.n	800898e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	75fb      	strb	r3, [r7, #23]
      break;
 800898c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008996:	7dfb      	ldrb	r3, [r7, #23]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3718      	adds	r7, #24
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d101      	bne.n	80089bc <HAL_TIM_ConfigClockSource+0x1c>
 80089b8:	2302      	movs	r3, #2
 80089ba:	e0b4      	b.n	8008b26 <HAL_TIM_ConfigClockSource+0x186>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2202      	movs	r2, #2
 80089c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80089da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089f4:	d03e      	beq.n	8008a74 <HAL_TIM_ConfigClockSource+0xd4>
 80089f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089fa:	f200 8087 	bhi.w	8008b0c <HAL_TIM_ConfigClockSource+0x16c>
 80089fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a02:	f000 8086 	beq.w	8008b12 <HAL_TIM_ConfigClockSource+0x172>
 8008a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a0a:	d87f      	bhi.n	8008b0c <HAL_TIM_ConfigClockSource+0x16c>
 8008a0c:	2b70      	cmp	r3, #112	; 0x70
 8008a0e:	d01a      	beq.n	8008a46 <HAL_TIM_ConfigClockSource+0xa6>
 8008a10:	2b70      	cmp	r3, #112	; 0x70
 8008a12:	d87b      	bhi.n	8008b0c <HAL_TIM_ConfigClockSource+0x16c>
 8008a14:	2b60      	cmp	r3, #96	; 0x60
 8008a16:	d050      	beq.n	8008aba <HAL_TIM_ConfigClockSource+0x11a>
 8008a18:	2b60      	cmp	r3, #96	; 0x60
 8008a1a:	d877      	bhi.n	8008b0c <HAL_TIM_ConfigClockSource+0x16c>
 8008a1c:	2b50      	cmp	r3, #80	; 0x50
 8008a1e:	d03c      	beq.n	8008a9a <HAL_TIM_ConfigClockSource+0xfa>
 8008a20:	2b50      	cmp	r3, #80	; 0x50
 8008a22:	d873      	bhi.n	8008b0c <HAL_TIM_ConfigClockSource+0x16c>
 8008a24:	2b40      	cmp	r3, #64	; 0x40
 8008a26:	d058      	beq.n	8008ada <HAL_TIM_ConfigClockSource+0x13a>
 8008a28:	2b40      	cmp	r3, #64	; 0x40
 8008a2a:	d86f      	bhi.n	8008b0c <HAL_TIM_ConfigClockSource+0x16c>
 8008a2c:	2b30      	cmp	r3, #48	; 0x30
 8008a2e:	d064      	beq.n	8008afa <HAL_TIM_ConfigClockSource+0x15a>
 8008a30:	2b30      	cmp	r3, #48	; 0x30
 8008a32:	d86b      	bhi.n	8008b0c <HAL_TIM_ConfigClockSource+0x16c>
 8008a34:	2b20      	cmp	r3, #32
 8008a36:	d060      	beq.n	8008afa <HAL_TIM_ConfigClockSource+0x15a>
 8008a38:	2b20      	cmp	r3, #32
 8008a3a:	d867      	bhi.n	8008b0c <HAL_TIM_ConfigClockSource+0x16c>
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d05c      	beq.n	8008afa <HAL_TIM_ConfigClockSource+0x15a>
 8008a40:	2b10      	cmp	r3, #16
 8008a42:	d05a      	beq.n	8008afa <HAL_TIM_ConfigClockSource+0x15a>
 8008a44:	e062      	b.n	8008b0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6818      	ldr	r0, [r3, #0]
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	6899      	ldr	r1, [r3, #8]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	685a      	ldr	r2, [r3, #4]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	f000 fbc0 	bl	80091da <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008a68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	609a      	str	r2, [r3, #8]
      break;
 8008a72:	e04f      	b.n	8008b14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6818      	ldr	r0, [r3, #0]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	6899      	ldr	r1, [r3, #8]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	685a      	ldr	r2, [r3, #4]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	f000 fba9 	bl	80091da <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	689a      	ldr	r2, [r3, #8]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a96:	609a      	str	r2, [r3, #8]
      break;
 8008a98:	e03c      	b.n	8008b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6818      	ldr	r0, [r3, #0]
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	6859      	ldr	r1, [r3, #4]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	f000 fb20 	bl	80090ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2150      	movs	r1, #80	; 0x50
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 fb77 	bl	80091a6 <TIM_ITRx_SetConfig>
      break;
 8008ab8:	e02c      	b.n	8008b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6818      	ldr	r0, [r3, #0]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	6859      	ldr	r1, [r3, #4]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	f000 fb3e 	bl	8009148 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2160      	movs	r1, #96	; 0x60
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f000 fb67 	bl	80091a6 <TIM_ITRx_SetConfig>
      break;
 8008ad8:	e01c      	b.n	8008b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6818      	ldr	r0, [r3, #0]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	6859      	ldr	r1, [r3, #4]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	f000 fb00 	bl	80090ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2140      	movs	r1, #64	; 0x40
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 fb57 	bl	80091a6 <TIM_ITRx_SetConfig>
      break;
 8008af8:	e00c      	b.n	8008b14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4619      	mov	r1, r3
 8008b04:	4610      	mov	r0, r2
 8008b06:	f000 fb4e 	bl	80091a6 <TIM_ITRx_SetConfig>
      break;
 8008b0a:	e003      	b.n	8008b14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b10:	e000      	b.n	8008b14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b2e:	b480      	push	{r7}
 8008b30:	b083      	sub	sp, #12
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b36:	bf00      	nop
 8008b38:	370c      	adds	r7, #12
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bc80      	pop	{r7}
 8008b3e:	4770      	bx	lr

08008b40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bc80      	pop	{r7}
 8008b50:	4770      	bx	lr

08008b52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b083      	sub	sp, #12
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b5a:	bf00      	nop
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bc80      	pop	{r7}
 8008b62:	4770      	bx	lr

08008b64 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bc80      	pop	{r7}
 8008b74:	4770      	bx	lr

08008b76 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b084      	sub	sp, #16
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b82:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d107      	bne.n	8008b9e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2201      	movs	r2, #1
 8008b92:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b9c:	e02a      	b.n	8008bf4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d107      	bne.n	8008bb8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2202      	movs	r2, #2
 8008bac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bb6:	e01d      	b.n	8008bf4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d107      	bne.n	8008bd2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2204      	movs	r2, #4
 8008bc6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bd0:	e010      	b.n	8008bf4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d107      	bne.n	8008bec <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2208      	movs	r2, #8
 8008be0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008bea:	e003      	b.n	8008bf4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f7ff ffb5 	bl	8008b64 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	771a      	strb	r2, [r3, #28]
}
 8008c00:	bf00      	nop
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c14:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d10b      	bne.n	8008c38 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2201      	movs	r2, #1
 8008c24:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d136      	bne.n	8008c9c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c36:	e031      	b.n	8008c9c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d10b      	bne.n	8008c5a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2202      	movs	r2, #2
 8008c46:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d125      	bne.n	8008c9c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c58:	e020      	b.n	8008c9c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d10b      	bne.n	8008c7c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2204      	movs	r2, #4
 8008c68:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	699b      	ldr	r3, [r3, #24]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d114      	bne.n	8008c9c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c7a:	e00f      	b.n	8008c9c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d10a      	bne.n	8008c9c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2208      	movs	r2, #8
 8008c8a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	699b      	ldr	r3, [r3, #24]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d103      	bne.n	8008c9c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f7f9 fdad 	bl	80027fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	771a      	strb	r2, [r3, #28]
}
 8008ca8:	bf00      	nop
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d103      	bne.n	8008cd0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	771a      	strb	r2, [r3, #28]
 8008cce:	e019      	b.n	8008d04 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d103      	bne.n	8008ce2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2202      	movs	r2, #2
 8008cde:	771a      	strb	r2, [r3, #28]
 8008ce0:	e010      	b.n	8008d04 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d103      	bne.n	8008cf4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2204      	movs	r2, #4
 8008cf0:	771a      	strb	r2, [r3, #28]
 8008cf2:	e007      	b.n	8008d04 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d102      	bne.n	8008d04 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2208      	movs	r2, #8
 8008d02:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008d04:	68f8      	ldr	r0, [r7, #12]
 8008d06:	f7f9 fcfb 	bl	8002700 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	771a      	strb	r2, [r3, #28]
}
 8008d10:	bf00      	nop
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a29      	ldr	r2, [pc, #164]	; (8008dd0 <TIM_Base_SetConfig+0xb8>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d00b      	beq.n	8008d48 <TIM_Base_SetConfig+0x30>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d36:	d007      	beq.n	8008d48 <TIM_Base_SetConfig+0x30>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a26      	ldr	r2, [pc, #152]	; (8008dd4 <TIM_Base_SetConfig+0xbc>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d003      	beq.n	8008d48 <TIM_Base_SetConfig+0x30>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a25      	ldr	r2, [pc, #148]	; (8008dd8 <TIM_Base_SetConfig+0xc0>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d108      	bne.n	8008d5a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a1c      	ldr	r2, [pc, #112]	; (8008dd0 <TIM_Base_SetConfig+0xb8>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d00b      	beq.n	8008d7a <TIM_Base_SetConfig+0x62>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d68:	d007      	beq.n	8008d7a <TIM_Base_SetConfig+0x62>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a19      	ldr	r2, [pc, #100]	; (8008dd4 <TIM_Base_SetConfig+0xbc>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d003      	beq.n	8008d7a <TIM_Base_SetConfig+0x62>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a18      	ldr	r2, [pc, #96]	; (8008dd8 <TIM_Base_SetConfig+0xc0>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d108      	bne.n	8008d8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	695b      	ldr	r3, [r3, #20]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	689a      	ldr	r2, [r3, #8]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a07      	ldr	r2, [pc, #28]	; (8008dd0 <TIM_Base_SetConfig+0xb8>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d103      	bne.n	8008dc0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	691a      	ldr	r2, [r3, #16]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	615a      	str	r2, [r3, #20]
}
 8008dc6:	bf00      	nop
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bc80      	pop	{r7}
 8008dce:	4770      	bx	lr
 8008dd0:	40012c00 	.word	0x40012c00
 8008dd4:	40000400 	.word	0x40000400
 8008dd8:	40000800 	.word	0x40000800

08008ddc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b087      	sub	sp, #28
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a1b      	ldr	r3, [r3, #32]
 8008df0:	f023 0201 	bic.w	r2, r3, #1
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f023 0303 	bic.w	r3, r3, #3
 8008e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f023 0302 	bic.w	r3, r3, #2
 8008e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a1c      	ldr	r2, [pc, #112]	; (8008ea4 <TIM_OC1_SetConfig+0xc8>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d10c      	bne.n	8008e52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	f023 0308 	bic.w	r3, r3, #8
 8008e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	697a      	ldr	r2, [r7, #20]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	f023 0304 	bic.w	r3, r3, #4
 8008e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a13      	ldr	r2, [pc, #76]	; (8008ea4 <TIM_OC1_SetConfig+0xc8>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d111      	bne.n	8008e7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	695b      	ldr	r3, [r3, #20]
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	693a      	ldr	r2, [r7, #16]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	685a      	ldr	r2, [r3, #4]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	697a      	ldr	r2, [r7, #20]
 8008e96:	621a      	str	r2, [r3, #32]
}
 8008e98:	bf00      	nop
 8008e9a:	371c      	adds	r7, #28
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bc80      	pop	{r7}
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	40012c00 	.word	0x40012c00

08008ea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b087      	sub	sp, #28
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a1b      	ldr	r3, [r3, #32]
 8008ebc:	f023 0210 	bic.w	r2, r3, #16
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	021b      	lsls	r3, r3, #8
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f023 0320 	bic.w	r3, r3, #32
 8008ef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	011b      	lsls	r3, r3, #4
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a1d      	ldr	r2, [pc, #116]	; (8008f78 <TIM_OC2_SetConfig+0xd0>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d10d      	bne.n	8008f24 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	011b      	lsls	r3, r3, #4
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a14      	ldr	r2, [pc, #80]	; (8008f78 <TIM_OC2_SetConfig+0xd0>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d113      	bne.n	8008f54 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	695b      	ldr	r3, [r3, #20]
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	685a      	ldr	r2, [r3, #4]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	621a      	str	r2, [r3, #32]
}
 8008f6e:	bf00      	nop
 8008f70:	371c      	adds	r7, #28
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bc80      	pop	{r7}
 8008f76:	4770      	bx	lr
 8008f78:	40012c00 	.word	0x40012c00

08008f7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b087      	sub	sp, #28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a1b      	ldr	r3, [r3, #32]
 8008f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a1b      	ldr	r3, [r3, #32]
 8008f90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f023 0303 	bic.w	r3, r3, #3
 8008fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	021b      	lsls	r3, r3, #8
 8008fcc:	697a      	ldr	r2, [r7, #20]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4a1d      	ldr	r2, [pc, #116]	; (800904c <TIM_OC3_SetConfig+0xd0>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d10d      	bne.n	8008ff6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fe0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	021b      	lsls	r3, r3, #8
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4a14      	ldr	r2, [pc, #80]	; (800904c <TIM_OC3_SetConfig+0xd0>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d113      	bne.n	8009026 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800900c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	011b      	lsls	r3, r3, #4
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	4313      	orrs	r3, r2
 8009018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	011b      	lsls	r3, r3, #4
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	4313      	orrs	r3, r2
 8009024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	697a      	ldr	r2, [r7, #20]
 800903e:	621a      	str	r2, [r3, #32]
}
 8009040:	bf00      	nop
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	bc80      	pop	{r7}
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	40012c00 	.word	0x40012c00

08009050 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009050:	b480      	push	{r7}
 8009052:	b087      	sub	sp, #28
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a1b      	ldr	r3, [r3, #32]
 800905e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a1b      	ldr	r3, [r3, #32]
 8009064:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	69db      	ldr	r3, [r3, #28]
 8009076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800907e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	021b      	lsls	r3, r3, #8
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	4313      	orrs	r3, r2
 8009092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800909a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	031b      	lsls	r3, r3, #12
 80090a2:	693a      	ldr	r2, [r7, #16]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a0f      	ldr	r2, [pc, #60]	; (80090e8 <TIM_OC4_SetConfig+0x98>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d109      	bne.n	80090c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	695b      	ldr	r3, [r3, #20]
 80090bc:	019b      	lsls	r3, r3, #6
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	697a      	ldr	r2, [r7, #20]
 80090c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	685a      	ldr	r2, [r3, #4]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	693a      	ldr	r2, [r7, #16]
 80090dc:	621a      	str	r2, [r3, #32]
}
 80090de:	bf00      	nop
 80090e0:	371c      	adds	r7, #28
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bc80      	pop	{r7}
 80090e6:	4770      	bx	lr
 80090e8:	40012c00 	.word	0x40012c00

080090ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b087      	sub	sp, #28
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6a1b      	ldr	r3, [r3, #32]
 80090fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6a1b      	ldr	r3, [r3, #32]
 8009102:	f023 0201 	bic.w	r2, r3, #1
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	699b      	ldr	r3, [r3, #24]
 800910e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	011b      	lsls	r3, r3, #4
 800911c:	693a      	ldr	r2, [r7, #16]
 800911e:	4313      	orrs	r3, r2
 8009120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	f023 030a 	bic.w	r3, r3, #10
 8009128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800912a:	697a      	ldr	r2, [r7, #20]
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	4313      	orrs	r3, r2
 8009130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	697a      	ldr	r2, [r7, #20]
 800913c:	621a      	str	r2, [r3, #32]
}
 800913e:	bf00      	nop
 8009140:	371c      	adds	r7, #28
 8009142:	46bd      	mov	sp, r7
 8009144:	bc80      	pop	{r7}
 8009146:	4770      	bx	lr

08009148 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009148:	b480      	push	{r7}
 800914a:	b087      	sub	sp, #28
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6a1b      	ldr	r3, [r3, #32]
 8009158:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6a1b      	ldr	r3, [r3, #32]
 800915e:	f023 0210 	bic.w	r2, r3, #16
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	699b      	ldr	r3, [r3, #24]
 800916a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	031b      	lsls	r3, r3, #12
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	4313      	orrs	r3, r2
 800917c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009184:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	011b      	lsls	r3, r3, #4
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	4313      	orrs	r3, r2
 800918e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	693a      	ldr	r2, [r7, #16]
 8009194:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	697a      	ldr	r2, [r7, #20]
 800919a:	621a      	str	r2, [r3, #32]
}
 800919c:	bf00      	nop
 800919e:	371c      	adds	r7, #28
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bc80      	pop	{r7}
 80091a4:	4770      	bx	lr

080091a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091a6:	b480      	push	{r7}
 80091a8:	b085      	sub	sp, #20
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
 80091ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80091be:	683a      	ldr	r2, [r7, #0]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	f043 0307 	orr.w	r3, r3, #7
 80091c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	609a      	str	r2, [r3, #8]
}
 80091d0:	bf00      	nop
 80091d2:	3714      	adds	r7, #20
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bc80      	pop	{r7}
 80091d8:	4770      	bx	lr

080091da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80091da:	b480      	push	{r7}
 80091dc:	b087      	sub	sp, #28
 80091de:	af00      	add	r7, sp, #0
 80091e0:	60f8      	str	r0, [r7, #12]
 80091e2:	60b9      	str	r1, [r7, #8]
 80091e4:	607a      	str	r2, [r7, #4]
 80091e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	021a      	lsls	r2, r3, #8
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	431a      	orrs	r2, r3
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	4313      	orrs	r3, r2
 8009202:	697a      	ldr	r2, [r7, #20]
 8009204:	4313      	orrs	r3, r2
 8009206:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	609a      	str	r2, [r3, #8]
}
 800920e:	bf00      	nop
 8009210:	371c      	adds	r7, #28
 8009212:	46bd      	mov	sp, r7
 8009214:	bc80      	pop	{r7}
 8009216:	4770      	bx	lr

08009218 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009218:	b480      	push	{r7}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	f003 031f 	and.w	r3, r3, #31
 800922a:	2201      	movs	r2, #1
 800922c:	fa02 f303 	lsl.w	r3, r2, r3
 8009230:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6a1a      	ldr	r2, [r3, #32]
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	43db      	mvns	r3, r3
 800923a:	401a      	ands	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6a1a      	ldr	r2, [r3, #32]
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f003 031f 	and.w	r3, r3, #31
 800924a:	6879      	ldr	r1, [r7, #4]
 800924c:	fa01 f303 	lsl.w	r3, r1, r3
 8009250:	431a      	orrs	r2, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	621a      	str	r2, [r3, #32]
}
 8009256:	bf00      	nop
 8009258:	371c      	adds	r7, #28
 800925a:	46bd      	mov	sp, r7
 800925c:	bc80      	pop	{r7}
 800925e:	4770      	bx	lr

08009260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009270:	2b01      	cmp	r3, #1
 8009272:	d101      	bne.n	8009278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009274:	2302      	movs	r3, #2
 8009276:	e046      	b.n	8009306 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2202      	movs	r2, #2
 8009284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800929e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a16      	ldr	r2, [pc, #88]	; (8009310 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d00e      	beq.n	80092da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092c4:	d009      	beq.n	80092da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a12      	ldr	r2, [pc, #72]	; (8009314 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d004      	beq.n	80092da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a10      	ldr	r2, [pc, #64]	; (8009318 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d10c      	bne.n	80092f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	4313      	orrs	r3, r2
 80092ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	bc80      	pop	{r7}
 800930e:	4770      	bx	lr
 8009310:	40012c00 	.word	0x40012c00
 8009314:	40000400 	.word	0x40000400
 8009318:	40000800 	.word	0x40000800

0800931c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009326:	2300      	movs	r3, #0
 8009328:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009330:	2b01      	cmp	r3, #1
 8009332:	d101      	bne.n	8009338 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009334:	2302      	movs	r3, #2
 8009336:	e03d      	b.n	80093b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	4313      	orrs	r3, r2
 800934c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	4313      	orrs	r3, r2
 800935a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	4313      	orrs	r3, r2
 8009368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4313      	orrs	r3, r2
 8009376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	4313      	orrs	r3, r2
 8009384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	695b      	ldr	r3, [r3, #20]
 8009390:	4313      	orrs	r3, r2
 8009392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	69db      	ldr	r3, [r3, #28]
 800939e:	4313      	orrs	r3, r2
 80093a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3714      	adds	r7, #20
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bc80      	pop	{r7}
 80093bc:	4770      	bx	lr

080093be <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093be:	b480      	push	{r7}
 80093c0:	b083      	sub	sp, #12
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093c6:	bf00      	nop
 80093c8:	370c      	adds	r7, #12
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bc80      	pop	{r7}
 80093ce:	4770      	bx	lr

080093d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	bc80      	pop	{r7}
 80093e0:	4770      	bx	lr

080093e2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b082      	sub	sp, #8
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e042      	b.n	800947a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d106      	bne.n	800940e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f7f9 fec5 	bl	8003198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2224      	movs	r2, #36	; 0x24
 8009412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68da      	ldr	r2, [r3, #12]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009424:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fdc6 	bl	8009fb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	691a      	ldr	r2, [r3, #16]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800943a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	695a      	ldr	r2, [r3, #20]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800944a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68da      	ldr	r2, [r3, #12]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800945a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2220      	movs	r2, #32
 8009466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2220      	movs	r2, #32
 800946e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b08a      	sub	sp, #40	; 0x28
 8009486:	af02      	add	r7, sp, #8
 8009488:	60f8      	str	r0, [r7, #12]
 800948a:	60b9      	str	r1, [r7, #8]
 800948c:	603b      	str	r3, [r7, #0]
 800948e:	4613      	mov	r3, r2
 8009490:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009492:	2300      	movs	r3, #0
 8009494:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800949c:	b2db      	uxtb	r3, r3
 800949e:	2b20      	cmp	r3, #32
 80094a0:	d16d      	bne.n	800957e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d002      	beq.n	80094ae <HAL_UART_Transmit+0x2c>
 80094a8:	88fb      	ldrh	r3, [r7, #6]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d101      	bne.n	80094b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	e066      	b.n	8009580 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2221      	movs	r2, #33	; 0x21
 80094bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80094c0:	f7fa f898 	bl	80035f4 <HAL_GetTick>
 80094c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	88fa      	ldrh	r2, [r7, #6]
 80094ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	88fa      	ldrh	r2, [r7, #6]
 80094d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094da:	d108      	bne.n	80094ee <HAL_UART_Transmit+0x6c>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d104      	bne.n	80094ee <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80094e4:	2300      	movs	r3, #0
 80094e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	61bb      	str	r3, [r7, #24]
 80094ec:	e003      	b.n	80094f6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80094f2:	2300      	movs	r3, #0
 80094f4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80094f6:	e02a      	b.n	800954e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	2200      	movs	r2, #0
 8009500:	2180      	movs	r1, #128	; 0x80
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f000 fb15 	bl	8009b32 <UART_WaitOnFlagUntilTimeout>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d001      	beq.n	8009512 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e036      	b.n	8009580 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10b      	bne.n	8009530 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	461a      	mov	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009526:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	3302      	adds	r3, #2
 800952c:	61bb      	str	r3, [r7, #24]
 800952e:	e007      	b.n	8009540 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	781a      	ldrb	r2, [r3, #0]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	3301      	adds	r3, #1
 800953e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009544:	b29b      	uxth	r3, r3
 8009546:	3b01      	subs	r3, #1
 8009548:	b29a      	uxth	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009552:	b29b      	uxth	r3, r3
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1cf      	bne.n	80094f8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	2200      	movs	r2, #0
 8009560:	2140      	movs	r1, #64	; 0x40
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f000 fae5 	bl	8009b32 <UART_WaitOnFlagUntilTimeout>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800956e:	2303      	movs	r3, #3
 8009570:	e006      	b.n	8009580 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2220      	movs	r2, #32
 8009576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800957a:	2300      	movs	r3, #0
 800957c:	e000      	b.n	8009580 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800957e:	2302      	movs	r3, #2
  }
}
 8009580:	4618      	mov	r0, r3
 8009582:	3720      	adds	r7, #32
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	4613      	mov	r3, r2
 8009594:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800959c:	b2db      	uxtb	r3, r3
 800959e:	2b20      	cmp	r3, #32
 80095a0:	d112      	bne.n	80095c8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d002      	beq.n	80095ae <HAL_UART_Receive_IT+0x26>
 80095a8:	88fb      	ldrh	r3, [r7, #6]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d101      	bne.n	80095b2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e00b      	b.n	80095ca <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80095b8:	88fb      	ldrh	r3, [r7, #6]
 80095ba:	461a      	mov	r2, r3
 80095bc:	68b9      	ldr	r1, [r7, #8]
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f000 fb25 	bl	8009c0e <UART_Start_Receive_IT>
 80095c4:	4603      	mov	r3, r0
 80095c6:	e000      	b.n	80095ca <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80095c8:	2302      	movs	r3, #2
  }
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
	...

080095d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b0ba      	sub	sp, #232	; 0xe8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	695b      	ldr	r3, [r3, #20]
 80095f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80095fa:	2300      	movs	r3, #0
 80095fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009600:	2300      	movs	r3, #0
 8009602:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800960a:	f003 030f 	and.w	r3, r3, #15
 800960e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009612:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009616:	2b00      	cmp	r3, #0
 8009618:	d10f      	bne.n	800963a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800961a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800961e:	f003 0320 	and.w	r3, r3, #32
 8009622:	2b00      	cmp	r3, #0
 8009624:	d009      	beq.n	800963a <HAL_UART_IRQHandler+0x66>
 8009626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800962a:	f003 0320 	and.w	r3, r3, #32
 800962e:	2b00      	cmp	r3, #0
 8009630:	d003      	beq.n	800963a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 fc01 	bl	8009e3a <UART_Receive_IT>
      return;
 8009638:	e25b      	b.n	8009af2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800963a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800963e:	2b00      	cmp	r3, #0
 8009640:	f000 80de 	beq.w	8009800 <HAL_UART_IRQHandler+0x22c>
 8009644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009648:	f003 0301 	and.w	r3, r3, #1
 800964c:	2b00      	cmp	r3, #0
 800964e:	d106      	bne.n	800965e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009654:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009658:	2b00      	cmp	r3, #0
 800965a:	f000 80d1 	beq.w	8009800 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800965e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00b      	beq.n	8009682 <HAL_UART_IRQHandler+0xae>
 800966a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800966e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009672:	2b00      	cmp	r3, #0
 8009674:	d005      	beq.n	8009682 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800967a:	f043 0201 	orr.w	r2, r3, #1
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009686:	f003 0304 	and.w	r3, r3, #4
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00b      	beq.n	80096a6 <HAL_UART_IRQHandler+0xd2>
 800968e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009692:	f003 0301 	and.w	r3, r3, #1
 8009696:	2b00      	cmp	r3, #0
 8009698:	d005      	beq.n	80096a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800969e:	f043 0202 	orr.w	r2, r3, #2
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80096a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096aa:	f003 0302 	and.w	r3, r3, #2
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00b      	beq.n	80096ca <HAL_UART_IRQHandler+0xf6>
 80096b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096b6:	f003 0301 	and.w	r3, r3, #1
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d005      	beq.n	80096ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c2:	f043 0204 	orr.w	r2, r3, #4
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80096ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ce:	f003 0308 	and.w	r3, r3, #8
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d011      	beq.n	80096fa <HAL_UART_IRQHandler+0x126>
 80096d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096da:	f003 0320 	and.w	r3, r3, #32
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d105      	bne.n	80096ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80096e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d005      	beq.n	80096fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f2:	f043 0208 	orr.w	r2, r3, #8
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f000 81f2 	beq.w	8009ae8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009708:	f003 0320 	and.w	r3, r3, #32
 800970c:	2b00      	cmp	r3, #0
 800970e:	d008      	beq.n	8009722 <HAL_UART_IRQHandler+0x14e>
 8009710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009714:	f003 0320 	and.w	r3, r3, #32
 8009718:	2b00      	cmp	r3, #0
 800971a:	d002      	beq.n	8009722 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fb8c 	bl	8009e3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	695b      	ldr	r3, [r3, #20]
 8009728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800972c:	2b00      	cmp	r3, #0
 800972e:	bf14      	ite	ne
 8009730:	2301      	movne	r3, #1
 8009732:	2300      	moveq	r3, #0
 8009734:	b2db      	uxtb	r3, r3
 8009736:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800973e:	f003 0308 	and.w	r3, r3, #8
 8009742:	2b00      	cmp	r3, #0
 8009744:	d103      	bne.n	800974e <HAL_UART_IRQHandler+0x17a>
 8009746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800974a:	2b00      	cmp	r3, #0
 800974c:	d04f      	beq.n	80097ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 fa96 	bl	8009c80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800975e:	2b00      	cmp	r3, #0
 8009760:	d041      	beq.n	80097e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	3314      	adds	r3, #20
 8009768:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009770:	e853 3f00 	ldrex	r3, [r3]
 8009774:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009778:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800977c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009780:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	3314      	adds	r3, #20
 800978a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800978e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009792:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009796:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800979a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800979e:	e841 2300 	strex	r3, r2, [r1]
 80097a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80097a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1d9      	bne.n	8009762 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d013      	beq.n	80097de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ba:	4a7e      	ldr	r2, [pc, #504]	; (80099b4 <HAL_UART_IRQHandler+0x3e0>)
 80097bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7fa fc6e 	bl	80040a4 <HAL_DMA_Abort_IT>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d016      	beq.n	80097fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80097d8:	4610      	mov	r0, r2
 80097da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097dc:	e00e      	b.n	80097fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 f993 	bl	8009b0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097e4:	e00a      	b.n	80097fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f98f 	bl	8009b0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097ec:	e006      	b.n	80097fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f98b 	bl	8009b0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80097fa:	e175      	b.n	8009ae8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097fc:	bf00      	nop
    return;
 80097fe:	e173      	b.n	8009ae8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009804:	2b01      	cmp	r3, #1
 8009806:	f040 814f 	bne.w	8009aa8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800980a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800980e:	f003 0310 	and.w	r3, r3, #16
 8009812:	2b00      	cmp	r3, #0
 8009814:	f000 8148 	beq.w	8009aa8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800981c:	f003 0310 	and.w	r3, r3, #16
 8009820:	2b00      	cmp	r3, #0
 8009822:	f000 8141 	beq.w	8009aa8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009826:	2300      	movs	r3, #0
 8009828:	60bb      	str	r3, [r7, #8]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	60bb      	str	r3, [r7, #8]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	60bb      	str	r3, [r7, #8]
 800983a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	695b      	ldr	r3, [r3, #20]
 8009842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009846:	2b00      	cmp	r3, #0
 8009848:	f000 80b6 	beq.w	80099b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009858:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800985c:	2b00      	cmp	r3, #0
 800985e:	f000 8145 	beq.w	8009aec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009866:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800986a:	429a      	cmp	r2, r3
 800986c:	f080 813e 	bcs.w	8009aec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009876:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	2b20      	cmp	r3, #32
 8009880:	f000 8088 	beq.w	8009994 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	330c      	adds	r3, #12
 800988a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009892:	e853 3f00 	ldrex	r3, [r3]
 8009896:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800989a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800989e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	330c      	adds	r3, #12
 80098ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80098b0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80098b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80098bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80098c0:	e841 2300 	strex	r3, r2, [r1]
 80098c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80098c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1d9      	bne.n	8009884 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	3314      	adds	r3, #20
 80098d6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098da:	e853 3f00 	ldrex	r3, [r3]
 80098de:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80098e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098e2:	f023 0301 	bic.w	r3, r3, #1
 80098e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	3314      	adds	r3, #20
 80098f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80098f4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80098f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80098fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009900:	e841 2300 	strex	r3, r2, [r1]
 8009904:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009906:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009908:	2b00      	cmp	r3, #0
 800990a:	d1e1      	bne.n	80098d0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	3314      	adds	r3, #20
 8009912:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009914:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009916:	e853 3f00 	ldrex	r3, [r3]
 800991a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800991c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800991e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009922:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	3314      	adds	r3, #20
 800992c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009930:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009932:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009934:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009936:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009938:	e841 2300 	strex	r3, r2, [r1]
 800993c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800993e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009940:	2b00      	cmp	r3, #0
 8009942:	d1e3      	bne.n	800990c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2220      	movs	r2, #32
 8009948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	330c      	adds	r3, #12
 8009958:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800995c:	e853 3f00 	ldrex	r3, [r3]
 8009960:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009964:	f023 0310 	bic.w	r3, r3, #16
 8009968:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	330c      	adds	r3, #12
 8009972:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009976:	65ba      	str	r2, [r7, #88]	; 0x58
 8009978:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800997c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800997e:	e841 2300 	strex	r3, r2, [r1]
 8009982:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1e3      	bne.n	8009952 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800998e:	4618      	mov	r0, r3
 8009990:	f7fa fb4c 	bl	800402c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2202      	movs	r2, #2
 8009998:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	1ad3      	subs	r3, r2, r3
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	4619      	mov	r1, r3
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f8b6 	bl	8009b1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80099b0:	e09c      	b.n	8009aec <HAL_UART_IRQHandler+0x518>
 80099b2:	bf00      	nop
 80099b4:	08009d45 	.word	0x08009d45
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	1ad3      	subs	r3, r2, r3
 80099c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f000 808e 	beq.w	8009af0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80099d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f000 8089 	beq.w	8009af0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	330c      	adds	r3, #12
 80099e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e8:	e853 3f00 	ldrex	r3, [r3]
 80099ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80099ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	330c      	adds	r3, #12
 80099fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009a02:	647a      	str	r2, [r7, #68]	; 0x44
 8009a04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a0a:	e841 2300 	strex	r3, r2, [r1]
 8009a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1e3      	bne.n	80099de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	3314      	adds	r3, #20
 8009a1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a20:	e853 3f00 	ldrex	r3, [r3]
 8009a24:	623b      	str	r3, [r7, #32]
   return(result);
 8009a26:	6a3b      	ldr	r3, [r7, #32]
 8009a28:	f023 0301 	bic.w	r3, r3, #1
 8009a2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	3314      	adds	r3, #20
 8009a36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009a3a:	633a      	str	r2, [r7, #48]	; 0x30
 8009a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a42:	e841 2300 	strex	r3, r2, [r1]
 8009a46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1e3      	bne.n	8009a16 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2220      	movs	r2, #32
 8009a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	330c      	adds	r3, #12
 8009a62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	e853 3f00 	ldrex	r3, [r3]
 8009a6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f023 0310 	bic.w	r3, r3, #16
 8009a72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	330c      	adds	r3, #12
 8009a7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009a80:	61fa      	str	r2, [r7, #28]
 8009a82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a84:	69b9      	ldr	r1, [r7, #24]
 8009a86:	69fa      	ldr	r2, [r7, #28]
 8009a88:	e841 2300 	strex	r3, r2, [r1]
 8009a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1e3      	bne.n	8009a5c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2202      	movs	r2, #2
 8009a98:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 f83b 	bl	8009b1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009aa6:	e023      	b.n	8009af0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d009      	beq.n	8009ac8 <HAL_UART_IRQHandler+0x4f4>
 8009ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d003      	beq.n	8009ac8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 f953 	bl	8009d6c <UART_Transmit_IT>
    return;
 8009ac6:	e014      	b.n	8009af2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00e      	beq.n	8009af2 <HAL_UART_IRQHandler+0x51e>
 8009ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d008      	beq.n	8009af2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f992 	bl	8009e0a <UART_EndTransmit_IT>
    return;
 8009ae6:	e004      	b.n	8009af2 <HAL_UART_IRQHandler+0x51e>
    return;
 8009ae8:	bf00      	nop
 8009aea:	e002      	b.n	8009af2 <HAL_UART_IRQHandler+0x51e>
      return;
 8009aec:	bf00      	nop
 8009aee:	e000      	b.n	8009af2 <HAL_UART_IRQHandler+0x51e>
      return;
 8009af0:	bf00      	nop
  }
}
 8009af2:	37e8      	adds	r7, #232	; 0xe8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009b00:	bf00      	nop
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bc80      	pop	{r7}
 8009b08:	4770      	bx	lr

08009b0a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b0a:	b480      	push	{r7}
 8009b0c:	b083      	sub	sp, #12
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009b12:	bf00      	nop
 8009b14:	370c      	adds	r7, #12
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bc80      	pop	{r7}
 8009b1a:	4770      	bx	lr

08009b1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	460b      	mov	r3, r1
 8009b26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b28:	bf00      	nop
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bc80      	pop	{r7}
 8009b30:	4770      	bx	lr

08009b32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b090      	sub	sp, #64	; 0x40
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	60f8      	str	r0, [r7, #12]
 8009b3a:	60b9      	str	r1, [r7, #8]
 8009b3c:	603b      	str	r3, [r7, #0]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b42:	e050      	b.n	8009be6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b4a:	d04c      	beq.n	8009be6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d007      	beq.n	8009b62 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b52:	f7f9 fd4f 	bl	80035f4 <HAL_GetTick>
 8009b56:	4602      	mov	r2, r0
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d241      	bcs.n	8009be6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	330c      	adds	r3, #12
 8009b68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6c:	e853 3f00 	ldrex	r3, [r3]
 8009b70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	330c      	adds	r3, #12
 8009b80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b82:	637a      	str	r2, [r7, #52]	; 0x34
 8009b84:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b8a:	e841 2300 	strex	r3, r2, [r1]
 8009b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1e5      	bne.n	8009b62 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	3314      	adds	r3, #20
 8009b9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	e853 3f00 	ldrex	r3, [r3]
 8009ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	f023 0301 	bic.w	r3, r3, #1
 8009bac:	63bb      	str	r3, [r7, #56]	; 0x38
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	3314      	adds	r3, #20
 8009bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bb6:	623a      	str	r2, [r7, #32]
 8009bb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bba:	69f9      	ldr	r1, [r7, #28]
 8009bbc:	6a3a      	ldr	r2, [r7, #32]
 8009bbe:	e841 2300 	strex	r3, r2, [r1]
 8009bc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1e5      	bne.n	8009b96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2220      	movs	r2, #32
 8009bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2220      	movs	r2, #32
 8009bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8009be2:	2303      	movs	r3, #3
 8009be4:	e00f      	b.n	8009c06 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	4013      	ands	r3, r2
 8009bf0:	68ba      	ldr	r2, [r7, #8]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	bf0c      	ite	eq
 8009bf6:	2301      	moveq	r3, #1
 8009bf8:	2300      	movne	r3, #0
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	79fb      	ldrb	r3, [r7, #7]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d09f      	beq.n	8009b44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3740      	adds	r7, #64	; 0x40
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c0e:	b480      	push	{r7}
 8009c10:	b085      	sub	sp, #20
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	60f8      	str	r0, [r7, #12]
 8009c16:	60b9      	str	r1, [r7, #8]
 8009c18:	4613      	mov	r3, r2
 8009c1a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	68ba      	ldr	r2, [r7, #8]
 8009c20:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	88fa      	ldrh	r2, [r7, #6]
 8009c26:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	88fa      	ldrh	r2, [r7, #6]
 8009c2c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2200      	movs	r2, #0
 8009c32:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2222      	movs	r2, #34	; 0x22
 8009c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d007      	beq.n	8009c54 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68da      	ldr	r2, [r3, #12]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c52:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	695a      	ldr	r2, [r3, #20]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f042 0201 	orr.w	r2, r2, #1
 8009c62:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68da      	ldr	r2, [r3, #12]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f042 0220 	orr.w	r2, r2, #32
 8009c72:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009c74:	2300      	movs	r3, #0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3714      	adds	r7, #20
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bc80      	pop	{r7}
 8009c7e:	4770      	bx	lr

08009c80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b095      	sub	sp, #84	; 0x54
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	330c      	adds	r3, #12
 8009c8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c92:	e853 3f00 	ldrex	r3, [r3]
 8009c96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	330c      	adds	r3, #12
 8009ca6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ca8:	643a      	str	r2, [r7, #64]	; 0x40
 8009caa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009cae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009cb0:	e841 2300 	strex	r3, r2, [r1]
 8009cb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1e5      	bne.n	8009c88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	3314      	adds	r3, #20
 8009cc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc4:	6a3b      	ldr	r3, [r7, #32]
 8009cc6:	e853 3f00 	ldrex	r3, [r3]
 8009cca:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ccc:	69fb      	ldr	r3, [r7, #28]
 8009cce:	f023 0301 	bic.w	r3, r3, #1
 8009cd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	3314      	adds	r3, #20
 8009cda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009cde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ce4:	e841 2300 	strex	r3, r2, [r1]
 8009ce8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d1e5      	bne.n	8009cbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d119      	bne.n	8009d2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	330c      	adds	r3, #12
 8009cfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	e853 3f00 	ldrex	r3, [r3]
 8009d06:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	f023 0310 	bic.w	r3, r3, #16
 8009d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	330c      	adds	r3, #12
 8009d16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d18:	61ba      	str	r2, [r7, #24]
 8009d1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1c:	6979      	ldr	r1, [r7, #20]
 8009d1e:	69ba      	ldr	r2, [r7, #24]
 8009d20:	e841 2300 	strex	r3, r2, [r1]
 8009d24:	613b      	str	r3, [r7, #16]
   return(result);
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1e5      	bne.n	8009cf8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2220      	movs	r2, #32
 8009d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009d3a:	bf00      	nop
 8009d3c:	3754      	adds	r7, #84	; 0x54
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bc80      	pop	{r7}
 8009d42:	4770      	bx	lr

08009d44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2200      	movs	r2, #0
 8009d56:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f7ff fed3 	bl	8009b0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d64:	bf00      	nop
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	2b21      	cmp	r3, #33	; 0x21
 8009d7e:	d13e      	bne.n	8009dfe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d88:	d114      	bne.n	8009db4 <UART_Transmit_IT+0x48>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	691b      	ldr	r3, [r3, #16]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d110      	bne.n	8009db4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6a1b      	ldr	r3, [r3, #32]
 8009d96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	881b      	ldrh	r3, [r3, #0]
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009da6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6a1b      	ldr	r3, [r3, #32]
 8009dac:	1c9a      	adds	r2, r3, #2
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	621a      	str	r2, [r3, #32]
 8009db2:	e008      	b.n	8009dc6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6a1b      	ldr	r3, [r3, #32]
 8009db8:	1c59      	adds	r1, r3, #1
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	6211      	str	r1, [r2, #32]
 8009dbe:	781a      	ldrb	r2, [r3, #0]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10f      	bne.n	8009dfa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	68da      	ldr	r2, [r3, #12]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009de8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68da      	ldr	r2, [r3, #12]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009df8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	e000      	b.n	8009e00 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009dfe:	2302      	movs	r3, #2
  }
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bc80      	pop	{r7}
 8009e08:	4770      	bx	lr

08009e0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b082      	sub	sp, #8
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68da      	ldr	r2, [r3, #12]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2220      	movs	r2, #32
 8009e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f7ff fe64 	bl	8009af8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b08c      	sub	sp, #48	; 0x30
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	2b22      	cmp	r3, #34	; 0x22
 8009e4c:	f040 80ae 	bne.w	8009fac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e58:	d117      	bne.n	8009e8a <UART_Receive_IT+0x50>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d113      	bne.n	8009e8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009e62:	2300      	movs	r3, #0
 8009e64:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e6a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e82:	1c9a      	adds	r2, r3, #2
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	629a      	str	r2, [r3, #40]	; 0x28
 8009e88:	e026      	b.n	8009ed8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009e90:	2300      	movs	r3, #0
 8009e92:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e9c:	d007      	beq.n	8009eae <UART_Receive_IT+0x74>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d10a      	bne.n	8009ebc <UART_Receive_IT+0x82>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d106      	bne.n	8009ebc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	b2da      	uxtb	r2, r3
 8009eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb8:	701a      	strb	r2, [r3, #0]
 8009eba:	e008      	b.n	8009ece <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ec8:	b2da      	uxtb	r2, r3
 8009eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ecc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed2:	1c5a      	adds	r2, r3, #1
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d15d      	bne.n	8009fa8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68da      	ldr	r2, [r3, #12]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f022 0220 	bic.w	r2, r2, #32
 8009efa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68da      	ldr	r2, [r3, #12]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	695a      	ldr	r2, [r3, #20]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f022 0201 	bic.w	r2, r2, #1
 8009f1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2220      	movs	r2, #32
 8009f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d135      	bne.n	8009f9e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	330c      	adds	r3, #12
 8009f3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	e853 3f00 	ldrex	r3, [r3]
 8009f46:	613b      	str	r3, [r7, #16]
   return(result);
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	f023 0310 	bic.w	r3, r3, #16
 8009f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	330c      	adds	r3, #12
 8009f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f58:	623a      	str	r2, [r7, #32]
 8009f5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5c:	69f9      	ldr	r1, [r7, #28]
 8009f5e:	6a3a      	ldr	r2, [r7, #32]
 8009f60:	e841 2300 	strex	r3, r2, [r1]
 8009f64:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d1e5      	bne.n	8009f38 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f003 0310 	and.w	r3, r3, #16
 8009f76:	2b10      	cmp	r3, #16
 8009f78:	d10a      	bne.n	8009f90 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	60fb      	str	r3, [r7, #12]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	60fb      	str	r3, [r7, #12]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	60fb      	str	r3, [r7, #12]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f94:	4619      	mov	r1, r3
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7ff fdc0 	bl	8009b1c <HAL_UARTEx_RxEventCallback>
 8009f9c:	e002      	b.n	8009fa4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7f7 fee4 	bl	8001d6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	e002      	b.n	8009fae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	e000      	b.n	8009fae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009fac:	2302      	movs	r3, #2
  }
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3730      	adds	r7, #48	; 0x30
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
	...

08009fb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	68da      	ldr	r2, [r3, #12]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	430a      	orrs	r2, r1
 8009fd4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	689a      	ldr	r2, [r3, #8]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	431a      	orrs	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	695b      	ldr	r3, [r3, #20]
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009ff2:	f023 030c 	bic.w	r3, r3, #12
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	6812      	ldr	r2, [r2, #0]
 8009ffa:	68b9      	ldr	r1, [r7, #8]
 8009ffc:	430b      	orrs	r3, r1
 8009ffe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	695b      	ldr	r3, [r3, #20]
 800a006:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	699a      	ldr	r2, [r3, #24]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	430a      	orrs	r2, r1
 800a014:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a2c      	ldr	r2, [pc, #176]	; (800a0cc <UART_SetConfig+0x114>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d103      	bne.n	800a028 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a020:	f7fd fe08 	bl	8007c34 <HAL_RCC_GetPCLK2Freq>
 800a024:	60f8      	str	r0, [r7, #12]
 800a026:	e002      	b.n	800a02e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a028:	f7fd fdf0 	bl	8007c0c <HAL_RCC_GetPCLK1Freq>
 800a02c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	4613      	mov	r3, r2
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	4413      	add	r3, r2
 800a036:	009a      	lsls	r2, r3, #2
 800a038:	441a      	add	r2, r3
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	fbb2 f3f3 	udiv	r3, r2, r3
 800a044:	4a22      	ldr	r2, [pc, #136]	; (800a0d0 <UART_SetConfig+0x118>)
 800a046:	fba2 2303 	umull	r2, r3, r2, r3
 800a04a:	095b      	lsrs	r3, r3, #5
 800a04c:	0119      	lsls	r1, r3, #4
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	4613      	mov	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4413      	add	r3, r2
 800a056:	009a      	lsls	r2, r3, #2
 800a058:	441a      	add	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	fbb2 f2f3 	udiv	r2, r2, r3
 800a064:	4b1a      	ldr	r3, [pc, #104]	; (800a0d0 <UART_SetConfig+0x118>)
 800a066:	fba3 0302 	umull	r0, r3, r3, r2
 800a06a:	095b      	lsrs	r3, r3, #5
 800a06c:	2064      	movs	r0, #100	; 0x64
 800a06e:	fb00 f303 	mul.w	r3, r0, r3
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	011b      	lsls	r3, r3, #4
 800a076:	3332      	adds	r3, #50	; 0x32
 800a078:	4a15      	ldr	r2, [pc, #84]	; (800a0d0 <UART_SetConfig+0x118>)
 800a07a:	fba2 2303 	umull	r2, r3, r2, r3
 800a07e:	095b      	lsrs	r3, r3, #5
 800a080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a084:	4419      	add	r1, r3
 800a086:	68fa      	ldr	r2, [r7, #12]
 800a088:	4613      	mov	r3, r2
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4413      	add	r3, r2
 800a08e:	009a      	lsls	r2, r3, #2
 800a090:	441a      	add	r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	fbb2 f2f3 	udiv	r2, r2, r3
 800a09c:	4b0c      	ldr	r3, [pc, #48]	; (800a0d0 <UART_SetConfig+0x118>)
 800a09e:	fba3 0302 	umull	r0, r3, r3, r2
 800a0a2:	095b      	lsrs	r3, r3, #5
 800a0a4:	2064      	movs	r0, #100	; 0x64
 800a0a6:	fb00 f303 	mul.w	r3, r0, r3
 800a0aa:	1ad3      	subs	r3, r2, r3
 800a0ac:	011b      	lsls	r3, r3, #4
 800a0ae:	3332      	adds	r3, #50	; 0x32
 800a0b0:	4a07      	ldr	r2, [pc, #28]	; (800a0d0 <UART_SetConfig+0x118>)
 800a0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b6:	095b      	lsrs	r3, r3, #5
 800a0b8:	f003 020f 	and.w	r2, r3, #15
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	440a      	add	r2, r1
 800a0c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a0c4:	bf00      	nop
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	40013800 	.word	0x40013800
 800a0d0:	51eb851f 	.word	0x51eb851f

0800a0d4 <__errno>:
 800a0d4:	4b01      	ldr	r3, [pc, #4]	; (800a0dc <__errno+0x8>)
 800a0d6:	6818      	ldr	r0, [r3, #0]
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	2000008c 	.word	0x2000008c

0800a0e0 <__libc_init_array>:
 800a0e0:	b570      	push	{r4, r5, r6, lr}
 800a0e2:	2600      	movs	r6, #0
 800a0e4:	4d0c      	ldr	r5, [pc, #48]	; (800a118 <__libc_init_array+0x38>)
 800a0e6:	4c0d      	ldr	r4, [pc, #52]	; (800a11c <__libc_init_array+0x3c>)
 800a0e8:	1b64      	subs	r4, r4, r5
 800a0ea:	10a4      	asrs	r4, r4, #2
 800a0ec:	42a6      	cmp	r6, r4
 800a0ee:	d109      	bne.n	800a104 <__libc_init_array+0x24>
 800a0f0:	f002 fefa 	bl	800cee8 <_init>
 800a0f4:	2600      	movs	r6, #0
 800a0f6:	4d0a      	ldr	r5, [pc, #40]	; (800a120 <__libc_init_array+0x40>)
 800a0f8:	4c0a      	ldr	r4, [pc, #40]	; (800a124 <__libc_init_array+0x44>)
 800a0fa:	1b64      	subs	r4, r4, r5
 800a0fc:	10a4      	asrs	r4, r4, #2
 800a0fe:	42a6      	cmp	r6, r4
 800a100:	d105      	bne.n	800a10e <__libc_init_array+0x2e>
 800a102:	bd70      	pop	{r4, r5, r6, pc}
 800a104:	f855 3b04 	ldr.w	r3, [r5], #4
 800a108:	4798      	blx	r3
 800a10a:	3601      	adds	r6, #1
 800a10c:	e7ee      	b.n	800a0ec <__libc_init_array+0xc>
 800a10e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a112:	4798      	blx	r3
 800a114:	3601      	adds	r6, #1
 800a116:	e7f2      	b.n	800a0fe <__libc_init_array+0x1e>
 800a118:	0800d3ac 	.word	0x0800d3ac
 800a11c:	0800d3ac 	.word	0x0800d3ac
 800a120:	0800d3ac 	.word	0x0800d3ac
 800a124:	0800d3b0 	.word	0x0800d3b0

0800a128 <memset>:
 800a128:	4603      	mov	r3, r0
 800a12a:	4402      	add	r2, r0
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d100      	bne.n	800a132 <memset+0xa>
 800a130:	4770      	bx	lr
 800a132:	f803 1b01 	strb.w	r1, [r3], #1
 800a136:	e7f9      	b.n	800a12c <memset+0x4>

0800a138 <__cvt>:
 800a138:	2b00      	cmp	r3, #0
 800a13a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a13e:	461f      	mov	r7, r3
 800a140:	bfbb      	ittet	lt
 800a142:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a146:	461f      	movlt	r7, r3
 800a148:	2300      	movge	r3, #0
 800a14a:	232d      	movlt	r3, #45	; 0x2d
 800a14c:	b088      	sub	sp, #32
 800a14e:	4614      	mov	r4, r2
 800a150:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a152:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a154:	7013      	strb	r3, [r2, #0]
 800a156:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a158:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800a15c:	f023 0820 	bic.w	r8, r3, #32
 800a160:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a164:	d005      	beq.n	800a172 <__cvt+0x3a>
 800a166:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a16a:	d100      	bne.n	800a16e <__cvt+0x36>
 800a16c:	3501      	adds	r5, #1
 800a16e:	2302      	movs	r3, #2
 800a170:	e000      	b.n	800a174 <__cvt+0x3c>
 800a172:	2303      	movs	r3, #3
 800a174:	aa07      	add	r2, sp, #28
 800a176:	9204      	str	r2, [sp, #16]
 800a178:	aa06      	add	r2, sp, #24
 800a17a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a17e:	e9cd 3500 	strd	r3, r5, [sp]
 800a182:	4622      	mov	r2, r4
 800a184:	463b      	mov	r3, r7
 800a186:	f000 fce3 	bl	800ab50 <_dtoa_r>
 800a18a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a18e:	4606      	mov	r6, r0
 800a190:	d102      	bne.n	800a198 <__cvt+0x60>
 800a192:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a194:	07db      	lsls	r3, r3, #31
 800a196:	d522      	bpl.n	800a1de <__cvt+0xa6>
 800a198:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a19c:	eb06 0905 	add.w	r9, r6, r5
 800a1a0:	d110      	bne.n	800a1c4 <__cvt+0x8c>
 800a1a2:	7833      	ldrb	r3, [r6, #0]
 800a1a4:	2b30      	cmp	r3, #48	; 0x30
 800a1a6:	d10a      	bne.n	800a1be <__cvt+0x86>
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	4639      	mov	r1, r7
 800a1b0:	f7f6 fbfa 	bl	80009a8 <__aeabi_dcmpeq>
 800a1b4:	b918      	cbnz	r0, 800a1be <__cvt+0x86>
 800a1b6:	f1c5 0501 	rsb	r5, r5, #1
 800a1ba:	f8ca 5000 	str.w	r5, [sl]
 800a1be:	f8da 3000 	ldr.w	r3, [sl]
 800a1c2:	4499      	add	r9, r3
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	4639      	mov	r1, r7
 800a1cc:	f7f6 fbec 	bl	80009a8 <__aeabi_dcmpeq>
 800a1d0:	b108      	cbz	r0, 800a1d6 <__cvt+0x9e>
 800a1d2:	f8cd 901c 	str.w	r9, [sp, #28]
 800a1d6:	2230      	movs	r2, #48	; 0x30
 800a1d8:	9b07      	ldr	r3, [sp, #28]
 800a1da:	454b      	cmp	r3, r9
 800a1dc:	d307      	bcc.n	800a1ee <__cvt+0xb6>
 800a1de:	4630      	mov	r0, r6
 800a1e0:	9b07      	ldr	r3, [sp, #28]
 800a1e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a1e4:	1b9b      	subs	r3, r3, r6
 800a1e6:	6013      	str	r3, [r2, #0]
 800a1e8:	b008      	add	sp, #32
 800a1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ee:	1c59      	adds	r1, r3, #1
 800a1f0:	9107      	str	r1, [sp, #28]
 800a1f2:	701a      	strb	r2, [r3, #0]
 800a1f4:	e7f0      	b.n	800a1d8 <__cvt+0xa0>

0800a1f6 <__exponent>:
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1fa:	2900      	cmp	r1, #0
 800a1fc:	f803 2b02 	strb.w	r2, [r3], #2
 800a200:	bfb6      	itet	lt
 800a202:	222d      	movlt	r2, #45	; 0x2d
 800a204:	222b      	movge	r2, #43	; 0x2b
 800a206:	4249      	neglt	r1, r1
 800a208:	2909      	cmp	r1, #9
 800a20a:	7042      	strb	r2, [r0, #1]
 800a20c:	dd2b      	ble.n	800a266 <__exponent+0x70>
 800a20e:	f10d 0407 	add.w	r4, sp, #7
 800a212:	46a4      	mov	ip, r4
 800a214:	270a      	movs	r7, #10
 800a216:	fb91 f6f7 	sdiv	r6, r1, r7
 800a21a:	460a      	mov	r2, r1
 800a21c:	46a6      	mov	lr, r4
 800a21e:	fb07 1516 	mls	r5, r7, r6, r1
 800a222:	2a63      	cmp	r2, #99	; 0x63
 800a224:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800a228:	4631      	mov	r1, r6
 800a22a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a22e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a232:	dcf0      	bgt.n	800a216 <__exponent+0x20>
 800a234:	3130      	adds	r1, #48	; 0x30
 800a236:	f1ae 0502 	sub.w	r5, lr, #2
 800a23a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a23e:	4629      	mov	r1, r5
 800a240:	1c44      	adds	r4, r0, #1
 800a242:	4561      	cmp	r1, ip
 800a244:	d30a      	bcc.n	800a25c <__exponent+0x66>
 800a246:	f10d 0209 	add.w	r2, sp, #9
 800a24a:	eba2 020e 	sub.w	r2, r2, lr
 800a24e:	4565      	cmp	r5, ip
 800a250:	bf88      	it	hi
 800a252:	2200      	movhi	r2, #0
 800a254:	4413      	add	r3, r2
 800a256:	1a18      	subs	r0, r3, r0
 800a258:	b003      	add	sp, #12
 800a25a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a25c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a260:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a264:	e7ed      	b.n	800a242 <__exponent+0x4c>
 800a266:	2330      	movs	r3, #48	; 0x30
 800a268:	3130      	adds	r1, #48	; 0x30
 800a26a:	7083      	strb	r3, [r0, #2]
 800a26c:	70c1      	strb	r1, [r0, #3]
 800a26e:	1d03      	adds	r3, r0, #4
 800a270:	e7f1      	b.n	800a256 <__exponent+0x60>
	...

0800a274 <_printf_float>:
 800a274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a278:	b091      	sub	sp, #68	; 0x44
 800a27a:	460c      	mov	r4, r1
 800a27c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a280:	4616      	mov	r6, r2
 800a282:	461f      	mov	r7, r3
 800a284:	4605      	mov	r5, r0
 800a286:	f001 fa51 	bl	800b72c <_localeconv_r>
 800a28a:	6803      	ldr	r3, [r0, #0]
 800a28c:	4618      	mov	r0, r3
 800a28e:	9309      	str	r3, [sp, #36]	; 0x24
 800a290:	f7f5 ff5e 	bl	8000150 <strlen>
 800a294:	2300      	movs	r3, #0
 800a296:	930e      	str	r3, [sp, #56]	; 0x38
 800a298:	f8d8 3000 	ldr.w	r3, [r8]
 800a29c:	900a      	str	r0, [sp, #40]	; 0x28
 800a29e:	3307      	adds	r3, #7
 800a2a0:	f023 0307 	bic.w	r3, r3, #7
 800a2a4:	f103 0208 	add.w	r2, r3, #8
 800a2a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a2ac:	f8d4 b000 	ldr.w	fp, [r4]
 800a2b0:	f8c8 2000 	str.w	r2, [r8]
 800a2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a2bc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800a2c0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a2c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ca:	4640      	mov	r0, r8
 800a2cc:	4b9c      	ldr	r3, [pc, #624]	; (800a540 <_printf_float+0x2cc>)
 800a2ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2d0:	f7f6 fb9c 	bl	8000a0c <__aeabi_dcmpun>
 800a2d4:	bb70      	cbnz	r0, 800a334 <_printf_float+0xc0>
 800a2d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2da:	4640      	mov	r0, r8
 800a2dc:	4b98      	ldr	r3, [pc, #608]	; (800a540 <_printf_float+0x2cc>)
 800a2de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2e0:	f7f6 fb76 	bl	80009d0 <__aeabi_dcmple>
 800a2e4:	bb30      	cbnz	r0, 800a334 <_printf_float+0xc0>
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	4640      	mov	r0, r8
 800a2ec:	4651      	mov	r1, sl
 800a2ee:	f7f6 fb65 	bl	80009bc <__aeabi_dcmplt>
 800a2f2:	b110      	cbz	r0, 800a2fa <_printf_float+0x86>
 800a2f4:	232d      	movs	r3, #45	; 0x2d
 800a2f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2fa:	4b92      	ldr	r3, [pc, #584]	; (800a544 <_printf_float+0x2d0>)
 800a2fc:	4892      	ldr	r0, [pc, #584]	; (800a548 <_printf_float+0x2d4>)
 800a2fe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a302:	bf94      	ite	ls
 800a304:	4698      	movls	r8, r3
 800a306:	4680      	movhi	r8, r0
 800a308:	2303      	movs	r3, #3
 800a30a:	f04f 0a00 	mov.w	sl, #0
 800a30e:	6123      	str	r3, [r4, #16]
 800a310:	f02b 0304 	bic.w	r3, fp, #4
 800a314:	6023      	str	r3, [r4, #0]
 800a316:	4633      	mov	r3, r6
 800a318:	4621      	mov	r1, r4
 800a31a:	4628      	mov	r0, r5
 800a31c:	9700      	str	r7, [sp, #0]
 800a31e:	aa0f      	add	r2, sp, #60	; 0x3c
 800a320:	f000 f9d4 	bl	800a6cc <_printf_common>
 800a324:	3001      	adds	r0, #1
 800a326:	f040 8090 	bne.w	800a44a <_printf_float+0x1d6>
 800a32a:	f04f 30ff 	mov.w	r0, #4294967295
 800a32e:	b011      	add	sp, #68	; 0x44
 800a330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a334:	4642      	mov	r2, r8
 800a336:	4653      	mov	r3, sl
 800a338:	4640      	mov	r0, r8
 800a33a:	4651      	mov	r1, sl
 800a33c:	f7f6 fb66 	bl	8000a0c <__aeabi_dcmpun>
 800a340:	b148      	cbz	r0, 800a356 <_printf_float+0xe2>
 800a342:	f1ba 0f00 	cmp.w	sl, #0
 800a346:	bfb8      	it	lt
 800a348:	232d      	movlt	r3, #45	; 0x2d
 800a34a:	4880      	ldr	r0, [pc, #512]	; (800a54c <_printf_float+0x2d8>)
 800a34c:	bfb8      	it	lt
 800a34e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a352:	4b7f      	ldr	r3, [pc, #508]	; (800a550 <_printf_float+0x2dc>)
 800a354:	e7d3      	b.n	800a2fe <_printf_float+0x8a>
 800a356:	6863      	ldr	r3, [r4, #4]
 800a358:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a35c:	1c5a      	adds	r2, r3, #1
 800a35e:	d142      	bne.n	800a3e6 <_printf_float+0x172>
 800a360:	2306      	movs	r3, #6
 800a362:	6063      	str	r3, [r4, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	9206      	str	r2, [sp, #24]
 800a368:	aa0e      	add	r2, sp, #56	; 0x38
 800a36a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800a36e:	aa0d      	add	r2, sp, #52	; 0x34
 800a370:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800a374:	9203      	str	r2, [sp, #12]
 800a376:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a37a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a37e:	6023      	str	r3, [r4, #0]
 800a380:	6863      	ldr	r3, [r4, #4]
 800a382:	4642      	mov	r2, r8
 800a384:	9300      	str	r3, [sp, #0]
 800a386:	4628      	mov	r0, r5
 800a388:	4653      	mov	r3, sl
 800a38a:	910b      	str	r1, [sp, #44]	; 0x2c
 800a38c:	f7ff fed4 	bl	800a138 <__cvt>
 800a390:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a392:	4680      	mov	r8, r0
 800a394:	2947      	cmp	r1, #71	; 0x47
 800a396:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a398:	d108      	bne.n	800a3ac <_printf_float+0x138>
 800a39a:	1cc8      	adds	r0, r1, #3
 800a39c:	db02      	blt.n	800a3a4 <_printf_float+0x130>
 800a39e:	6863      	ldr	r3, [r4, #4]
 800a3a0:	4299      	cmp	r1, r3
 800a3a2:	dd40      	ble.n	800a426 <_printf_float+0x1b2>
 800a3a4:	f1a9 0902 	sub.w	r9, r9, #2
 800a3a8:	fa5f f989 	uxtb.w	r9, r9
 800a3ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a3b0:	d81f      	bhi.n	800a3f2 <_printf_float+0x17e>
 800a3b2:	464a      	mov	r2, r9
 800a3b4:	3901      	subs	r1, #1
 800a3b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a3ba:	910d      	str	r1, [sp, #52]	; 0x34
 800a3bc:	f7ff ff1b 	bl	800a1f6 <__exponent>
 800a3c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3c2:	4682      	mov	sl, r0
 800a3c4:	1813      	adds	r3, r2, r0
 800a3c6:	2a01      	cmp	r2, #1
 800a3c8:	6123      	str	r3, [r4, #16]
 800a3ca:	dc02      	bgt.n	800a3d2 <_printf_float+0x15e>
 800a3cc:	6822      	ldr	r2, [r4, #0]
 800a3ce:	07d2      	lsls	r2, r2, #31
 800a3d0:	d501      	bpl.n	800a3d6 <_printf_float+0x162>
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	6123      	str	r3, [r4, #16]
 800a3d6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d09b      	beq.n	800a316 <_printf_float+0xa2>
 800a3de:	232d      	movs	r3, #45	; 0x2d
 800a3e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3e4:	e797      	b.n	800a316 <_printf_float+0xa2>
 800a3e6:	2947      	cmp	r1, #71	; 0x47
 800a3e8:	d1bc      	bne.n	800a364 <_printf_float+0xf0>
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d1ba      	bne.n	800a364 <_printf_float+0xf0>
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e7b7      	b.n	800a362 <_printf_float+0xee>
 800a3f2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a3f6:	d118      	bne.n	800a42a <_printf_float+0x1b6>
 800a3f8:	2900      	cmp	r1, #0
 800a3fa:	6863      	ldr	r3, [r4, #4]
 800a3fc:	dd0b      	ble.n	800a416 <_printf_float+0x1a2>
 800a3fe:	6121      	str	r1, [r4, #16]
 800a400:	b913      	cbnz	r3, 800a408 <_printf_float+0x194>
 800a402:	6822      	ldr	r2, [r4, #0]
 800a404:	07d0      	lsls	r0, r2, #31
 800a406:	d502      	bpl.n	800a40e <_printf_float+0x19a>
 800a408:	3301      	adds	r3, #1
 800a40a:	440b      	add	r3, r1
 800a40c:	6123      	str	r3, [r4, #16]
 800a40e:	f04f 0a00 	mov.w	sl, #0
 800a412:	65a1      	str	r1, [r4, #88]	; 0x58
 800a414:	e7df      	b.n	800a3d6 <_printf_float+0x162>
 800a416:	b913      	cbnz	r3, 800a41e <_printf_float+0x1aa>
 800a418:	6822      	ldr	r2, [r4, #0]
 800a41a:	07d2      	lsls	r2, r2, #31
 800a41c:	d501      	bpl.n	800a422 <_printf_float+0x1ae>
 800a41e:	3302      	adds	r3, #2
 800a420:	e7f4      	b.n	800a40c <_printf_float+0x198>
 800a422:	2301      	movs	r3, #1
 800a424:	e7f2      	b.n	800a40c <_printf_float+0x198>
 800a426:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a42a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a42c:	4299      	cmp	r1, r3
 800a42e:	db05      	blt.n	800a43c <_printf_float+0x1c8>
 800a430:	6823      	ldr	r3, [r4, #0]
 800a432:	6121      	str	r1, [r4, #16]
 800a434:	07d8      	lsls	r0, r3, #31
 800a436:	d5ea      	bpl.n	800a40e <_printf_float+0x19a>
 800a438:	1c4b      	adds	r3, r1, #1
 800a43a:	e7e7      	b.n	800a40c <_printf_float+0x198>
 800a43c:	2900      	cmp	r1, #0
 800a43e:	bfcc      	ite	gt
 800a440:	2201      	movgt	r2, #1
 800a442:	f1c1 0202 	rsble	r2, r1, #2
 800a446:	4413      	add	r3, r2
 800a448:	e7e0      	b.n	800a40c <_printf_float+0x198>
 800a44a:	6823      	ldr	r3, [r4, #0]
 800a44c:	055a      	lsls	r2, r3, #21
 800a44e:	d407      	bmi.n	800a460 <_printf_float+0x1ec>
 800a450:	6923      	ldr	r3, [r4, #16]
 800a452:	4642      	mov	r2, r8
 800a454:	4631      	mov	r1, r6
 800a456:	4628      	mov	r0, r5
 800a458:	47b8      	blx	r7
 800a45a:	3001      	adds	r0, #1
 800a45c:	d12b      	bne.n	800a4b6 <_printf_float+0x242>
 800a45e:	e764      	b.n	800a32a <_printf_float+0xb6>
 800a460:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a464:	f240 80dd 	bls.w	800a622 <_printf_float+0x3ae>
 800a468:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a46c:	2200      	movs	r2, #0
 800a46e:	2300      	movs	r3, #0
 800a470:	f7f6 fa9a 	bl	80009a8 <__aeabi_dcmpeq>
 800a474:	2800      	cmp	r0, #0
 800a476:	d033      	beq.n	800a4e0 <_printf_float+0x26c>
 800a478:	2301      	movs	r3, #1
 800a47a:	4631      	mov	r1, r6
 800a47c:	4628      	mov	r0, r5
 800a47e:	4a35      	ldr	r2, [pc, #212]	; (800a554 <_printf_float+0x2e0>)
 800a480:	47b8      	blx	r7
 800a482:	3001      	adds	r0, #1
 800a484:	f43f af51 	beq.w	800a32a <_printf_float+0xb6>
 800a488:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a48c:	429a      	cmp	r2, r3
 800a48e:	db02      	blt.n	800a496 <_printf_float+0x222>
 800a490:	6823      	ldr	r3, [r4, #0]
 800a492:	07d8      	lsls	r0, r3, #31
 800a494:	d50f      	bpl.n	800a4b6 <_printf_float+0x242>
 800a496:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a49a:	4631      	mov	r1, r6
 800a49c:	4628      	mov	r0, r5
 800a49e:	47b8      	blx	r7
 800a4a0:	3001      	adds	r0, #1
 800a4a2:	f43f af42 	beq.w	800a32a <_printf_float+0xb6>
 800a4a6:	f04f 0800 	mov.w	r8, #0
 800a4aa:	f104 091a 	add.w	r9, r4, #26
 800a4ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	4543      	cmp	r3, r8
 800a4b4:	dc09      	bgt.n	800a4ca <_printf_float+0x256>
 800a4b6:	6823      	ldr	r3, [r4, #0]
 800a4b8:	079b      	lsls	r3, r3, #30
 800a4ba:	f100 8102 	bmi.w	800a6c2 <_printf_float+0x44e>
 800a4be:	68e0      	ldr	r0, [r4, #12]
 800a4c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4c2:	4298      	cmp	r0, r3
 800a4c4:	bfb8      	it	lt
 800a4c6:	4618      	movlt	r0, r3
 800a4c8:	e731      	b.n	800a32e <_printf_float+0xba>
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	464a      	mov	r2, r9
 800a4ce:	4631      	mov	r1, r6
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	47b8      	blx	r7
 800a4d4:	3001      	adds	r0, #1
 800a4d6:	f43f af28 	beq.w	800a32a <_printf_float+0xb6>
 800a4da:	f108 0801 	add.w	r8, r8, #1
 800a4de:	e7e6      	b.n	800a4ae <_printf_float+0x23a>
 800a4e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	dc38      	bgt.n	800a558 <_printf_float+0x2e4>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	4631      	mov	r1, r6
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	4a19      	ldr	r2, [pc, #100]	; (800a554 <_printf_float+0x2e0>)
 800a4ee:	47b8      	blx	r7
 800a4f0:	3001      	adds	r0, #1
 800a4f2:	f43f af1a 	beq.w	800a32a <_printf_float+0xb6>
 800a4f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	d102      	bne.n	800a504 <_printf_float+0x290>
 800a4fe:	6823      	ldr	r3, [r4, #0]
 800a500:	07d9      	lsls	r1, r3, #31
 800a502:	d5d8      	bpl.n	800a4b6 <_printf_float+0x242>
 800a504:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a508:	4631      	mov	r1, r6
 800a50a:	4628      	mov	r0, r5
 800a50c:	47b8      	blx	r7
 800a50e:	3001      	adds	r0, #1
 800a510:	f43f af0b 	beq.w	800a32a <_printf_float+0xb6>
 800a514:	f04f 0900 	mov.w	r9, #0
 800a518:	f104 0a1a 	add.w	sl, r4, #26
 800a51c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a51e:	425b      	negs	r3, r3
 800a520:	454b      	cmp	r3, r9
 800a522:	dc01      	bgt.n	800a528 <_printf_float+0x2b4>
 800a524:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a526:	e794      	b.n	800a452 <_printf_float+0x1de>
 800a528:	2301      	movs	r3, #1
 800a52a:	4652      	mov	r2, sl
 800a52c:	4631      	mov	r1, r6
 800a52e:	4628      	mov	r0, r5
 800a530:	47b8      	blx	r7
 800a532:	3001      	adds	r0, #1
 800a534:	f43f aef9 	beq.w	800a32a <_printf_float+0xb6>
 800a538:	f109 0901 	add.w	r9, r9, #1
 800a53c:	e7ee      	b.n	800a51c <_printf_float+0x2a8>
 800a53e:	bf00      	nop
 800a540:	7fefffff 	.word	0x7fefffff
 800a544:	0800cfd4 	.word	0x0800cfd4
 800a548:	0800cfd8 	.word	0x0800cfd8
 800a54c:	0800cfe0 	.word	0x0800cfe0
 800a550:	0800cfdc 	.word	0x0800cfdc
 800a554:	0800cfe4 	.word	0x0800cfe4
 800a558:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a55a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a55c:	429a      	cmp	r2, r3
 800a55e:	bfa8      	it	ge
 800a560:	461a      	movge	r2, r3
 800a562:	2a00      	cmp	r2, #0
 800a564:	4691      	mov	r9, r2
 800a566:	dc37      	bgt.n	800a5d8 <_printf_float+0x364>
 800a568:	f04f 0b00 	mov.w	fp, #0
 800a56c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a570:	f104 021a 	add.w	r2, r4, #26
 800a574:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a578:	ebaa 0309 	sub.w	r3, sl, r9
 800a57c:	455b      	cmp	r3, fp
 800a57e:	dc33      	bgt.n	800a5e8 <_printf_float+0x374>
 800a580:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a584:	429a      	cmp	r2, r3
 800a586:	db3b      	blt.n	800a600 <_printf_float+0x38c>
 800a588:	6823      	ldr	r3, [r4, #0]
 800a58a:	07da      	lsls	r2, r3, #31
 800a58c:	d438      	bmi.n	800a600 <_printf_float+0x38c>
 800a58e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a590:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a592:	eba3 020a 	sub.w	r2, r3, sl
 800a596:	eba3 0901 	sub.w	r9, r3, r1
 800a59a:	4591      	cmp	r9, r2
 800a59c:	bfa8      	it	ge
 800a59e:	4691      	movge	r9, r2
 800a5a0:	f1b9 0f00 	cmp.w	r9, #0
 800a5a4:	dc34      	bgt.n	800a610 <_printf_float+0x39c>
 800a5a6:	f04f 0800 	mov.w	r8, #0
 800a5aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5ae:	f104 0a1a 	add.w	sl, r4, #26
 800a5b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a5b6:	1a9b      	subs	r3, r3, r2
 800a5b8:	eba3 0309 	sub.w	r3, r3, r9
 800a5bc:	4543      	cmp	r3, r8
 800a5be:	f77f af7a 	ble.w	800a4b6 <_printf_float+0x242>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	4652      	mov	r2, sl
 800a5c6:	4631      	mov	r1, r6
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	47b8      	blx	r7
 800a5cc:	3001      	adds	r0, #1
 800a5ce:	f43f aeac 	beq.w	800a32a <_printf_float+0xb6>
 800a5d2:	f108 0801 	add.w	r8, r8, #1
 800a5d6:	e7ec      	b.n	800a5b2 <_printf_float+0x33e>
 800a5d8:	4613      	mov	r3, r2
 800a5da:	4631      	mov	r1, r6
 800a5dc:	4642      	mov	r2, r8
 800a5de:	4628      	mov	r0, r5
 800a5e0:	47b8      	blx	r7
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	d1c0      	bne.n	800a568 <_printf_float+0x2f4>
 800a5e6:	e6a0      	b.n	800a32a <_printf_float+0xb6>
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	4631      	mov	r1, r6
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	920b      	str	r2, [sp, #44]	; 0x2c
 800a5f0:	47b8      	blx	r7
 800a5f2:	3001      	adds	r0, #1
 800a5f4:	f43f ae99 	beq.w	800a32a <_printf_float+0xb6>
 800a5f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a5fa:	f10b 0b01 	add.w	fp, fp, #1
 800a5fe:	e7b9      	b.n	800a574 <_printf_float+0x300>
 800a600:	4631      	mov	r1, r6
 800a602:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a606:	4628      	mov	r0, r5
 800a608:	47b8      	blx	r7
 800a60a:	3001      	adds	r0, #1
 800a60c:	d1bf      	bne.n	800a58e <_printf_float+0x31a>
 800a60e:	e68c      	b.n	800a32a <_printf_float+0xb6>
 800a610:	464b      	mov	r3, r9
 800a612:	4631      	mov	r1, r6
 800a614:	4628      	mov	r0, r5
 800a616:	eb08 020a 	add.w	r2, r8, sl
 800a61a:	47b8      	blx	r7
 800a61c:	3001      	adds	r0, #1
 800a61e:	d1c2      	bne.n	800a5a6 <_printf_float+0x332>
 800a620:	e683      	b.n	800a32a <_printf_float+0xb6>
 800a622:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a624:	2a01      	cmp	r2, #1
 800a626:	dc01      	bgt.n	800a62c <_printf_float+0x3b8>
 800a628:	07db      	lsls	r3, r3, #31
 800a62a:	d537      	bpl.n	800a69c <_printf_float+0x428>
 800a62c:	2301      	movs	r3, #1
 800a62e:	4642      	mov	r2, r8
 800a630:	4631      	mov	r1, r6
 800a632:	4628      	mov	r0, r5
 800a634:	47b8      	blx	r7
 800a636:	3001      	adds	r0, #1
 800a638:	f43f ae77 	beq.w	800a32a <_printf_float+0xb6>
 800a63c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a640:	4631      	mov	r1, r6
 800a642:	4628      	mov	r0, r5
 800a644:	47b8      	blx	r7
 800a646:	3001      	adds	r0, #1
 800a648:	f43f ae6f 	beq.w	800a32a <_printf_float+0xb6>
 800a64c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a650:	2200      	movs	r2, #0
 800a652:	2300      	movs	r3, #0
 800a654:	f7f6 f9a8 	bl	80009a8 <__aeabi_dcmpeq>
 800a658:	b9d8      	cbnz	r0, 800a692 <_printf_float+0x41e>
 800a65a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a65c:	f108 0201 	add.w	r2, r8, #1
 800a660:	3b01      	subs	r3, #1
 800a662:	4631      	mov	r1, r6
 800a664:	4628      	mov	r0, r5
 800a666:	47b8      	blx	r7
 800a668:	3001      	adds	r0, #1
 800a66a:	d10e      	bne.n	800a68a <_printf_float+0x416>
 800a66c:	e65d      	b.n	800a32a <_printf_float+0xb6>
 800a66e:	2301      	movs	r3, #1
 800a670:	464a      	mov	r2, r9
 800a672:	4631      	mov	r1, r6
 800a674:	4628      	mov	r0, r5
 800a676:	47b8      	blx	r7
 800a678:	3001      	adds	r0, #1
 800a67a:	f43f ae56 	beq.w	800a32a <_printf_float+0xb6>
 800a67e:	f108 0801 	add.w	r8, r8, #1
 800a682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a684:	3b01      	subs	r3, #1
 800a686:	4543      	cmp	r3, r8
 800a688:	dcf1      	bgt.n	800a66e <_printf_float+0x3fa>
 800a68a:	4653      	mov	r3, sl
 800a68c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a690:	e6e0      	b.n	800a454 <_printf_float+0x1e0>
 800a692:	f04f 0800 	mov.w	r8, #0
 800a696:	f104 091a 	add.w	r9, r4, #26
 800a69a:	e7f2      	b.n	800a682 <_printf_float+0x40e>
 800a69c:	2301      	movs	r3, #1
 800a69e:	4642      	mov	r2, r8
 800a6a0:	e7df      	b.n	800a662 <_printf_float+0x3ee>
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	464a      	mov	r2, r9
 800a6a6:	4631      	mov	r1, r6
 800a6a8:	4628      	mov	r0, r5
 800a6aa:	47b8      	blx	r7
 800a6ac:	3001      	adds	r0, #1
 800a6ae:	f43f ae3c 	beq.w	800a32a <_printf_float+0xb6>
 800a6b2:	f108 0801 	add.w	r8, r8, #1
 800a6b6:	68e3      	ldr	r3, [r4, #12]
 800a6b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a6ba:	1a5b      	subs	r3, r3, r1
 800a6bc:	4543      	cmp	r3, r8
 800a6be:	dcf0      	bgt.n	800a6a2 <_printf_float+0x42e>
 800a6c0:	e6fd      	b.n	800a4be <_printf_float+0x24a>
 800a6c2:	f04f 0800 	mov.w	r8, #0
 800a6c6:	f104 0919 	add.w	r9, r4, #25
 800a6ca:	e7f4      	b.n	800a6b6 <_printf_float+0x442>

0800a6cc <_printf_common>:
 800a6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d0:	4616      	mov	r6, r2
 800a6d2:	4699      	mov	r9, r3
 800a6d4:	688a      	ldr	r2, [r1, #8]
 800a6d6:	690b      	ldr	r3, [r1, #16]
 800a6d8:	4607      	mov	r7, r0
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	bfb8      	it	lt
 800a6de:	4613      	movlt	r3, r2
 800a6e0:	6033      	str	r3, [r6, #0]
 800a6e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6e6:	460c      	mov	r4, r1
 800a6e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6ec:	b10a      	cbz	r2, 800a6f2 <_printf_common+0x26>
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	6033      	str	r3, [r6, #0]
 800a6f2:	6823      	ldr	r3, [r4, #0]
 800a6f4:	0699      	lsls	r1, r3, #26
 800a6f6:	bf42      	ittt	mi
 800a6f8:	6833      	ldrmi	r3, [r6, #0]
 800a6fa:	3302      	addmi	r3, #2
 800a6fc:	6033      	strmi	r3, [r6, #0]
 800a6fe:	6825      	ldr	r5, [r4, #0]
 800a700:	f015 0506 	ands.w	r5, r5, #6
 800a704:	d106      	bne.n	800a714 <_printf_common+0x48>
 800a706:	f104 0a19 	add.w	sl, r4, #25
 800a70a:	68e3      	ldr	r3, [r4, #12]
 800a70c:	6832      	ldr	r2, [r6, #0]
 800a70e:	1a9b      	subs	r3, r3, r2
 800a710:	42ab      	cmp	r3, r5
 800a712:	dc28      	bgt.n	800a766 <_printf_common+0x9a>
 800a714:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a718:	1e13      	subs	r3, r2, #0
 800a71a:	6822      	ldr	r2, [r4, #0]
 800a71c:	bf18      	it	ne
 800a71e:	2301      	movne	r3, #1
 800a720:	0692      	lsls	r2, r2, #26
 800a722:	d42d      	bmi.n	800a780 <_printf_common+0xb4>
 800a724:	4649      	mov	r1, r9
 800a726:	4638      	mov	r0, r7
 800a728:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a72c:	47c0      	blx	r8
 800a72e:	3001      	adds	r0, #1
 800a730:	d020      	beq.n	800a774 <_printf_common+0xa8>
 800a732:	6823      	ldr	r3, [r4, #0]
 800a734:	68e5      	ldr	r5, [r4, #12]
 800a736:	f003 0306 	and.w	r3, r3, #6
 800a73a:	2b04      	cmp	r3, #4
 800a73c:	bf18      	it	ne
 800a73e:	2500      	movne	r5, #0
 800a740:	6832      	ldr	r2, [r6, #0]
 800a742:	f04f 0600 	mov.w	r6, #0
 800a746:	68a3      	ldr	r3, [r4, #8]
 800a748:	bf08      	it	eq
 800a74a:	1aad      	subeq	r5, r5, r2
 800a74c:	6922      	ldr	r2, [r4, #16]
 800a74e:	bf08      	it	eq
 800a750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a754:	4293      	cmp	r3, r2
 800a756:	bfc4      	itt	gt
 800a758:	1a9b      	subgt	r3, r3, r2
 800a75a:	18ed      	addgt	r5, r5, r3
 800a75c:	341a      	adds	r4, #26
 800a75e:	42b5      	cmp	r5, r6
 800a760:	d11a      	bne.n	800a798 <_printf_common+0xcc>
 800a762:	2000      	movs	r0, #0
 800a764:	e008      	b.n	800a778 <_printf_common+0xac>
 800a766:	2301      	movs	r3, #1
 800a768:	4652      	mov	r2, sl
 800a76a:	4649      	mov	r1, r9
 800a76c:	4638      	mov	r0, r7
 800a76e:	47c0      	blx	r8
 800a770:	3001      	adds	r0, #1
 800a772:	d103      	bne.n	800a77c <_printf_common+0xb0>
 800a774:	f04f 30ff 	mov.w	r0, #4294967295
 800a778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a77c:	3501      	adds	r5, #1
 800a77e:	e7c4      	b.n	800a70a <_printf_common+0x3e>
 800a780:	2030      	movs	r0, #48	; 0x30
 800a782:	18e1      	adds	r1, r4, r3
 800a784:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a788:	1c5a      	adds	r2, r3, #1
 800a78a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a78e:	4422      	add	r2, r4
 800a790:	3302      	adds	r3, #2
 800a792:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a796:	e7c5      	b.n	800a724 <_printf_common+0x58>
 800a798:	2301      	movs	r3, #1
 800a79a:	4622      	mov	r2, r4
 800a79c:	4649      	mov	r1, r9
 800a79e:	4638      	mov	r0, r7
 800a7a0:	47c0      	blx	r8
 800a7a2:	3001      	adds	r0, #1
 800a7a4:	d0e6      	beq.n	800a774 <_printf_common+0xa8>
 800a7a6:	3601      	adds	r6, #1
 800a7a8:	e7d9      	b.n	800a75e <_printf_common+0x92>
	...

0800a7ac <_printf_i>:
 800a7ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7b0:	7e0f      	ldrb	r7, [r1, #24]
 800a7b2:	4691      	mov	r9, r2
 800a7b4:	2f78      	cmp	r7, #120	; 0x78
 800a7b6:	4680      	mov	r8, r0
 800a7b8:	460c      	mov	r4, r1
 800a7ba:	469a      	mov	sl, r3
 800a7bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a7c2:	d807      	bhi.n	800a7d4 <_printf_i+0x28>
 800a7c4:	2f62      	cmp	r7, #98	; 0x62
 800a7c6:	d80a      	bhi.n	800a7de <_printf_i+0x32>
 800a7c8:	2f00      	cmp	r7, #0
 800a7ca:	f000 80d9 	beq.w	800a980 <_printf_i+0x1d4>
 800a7ce:	2f58      	cmp	r7, #88	; 0x58
 800a7d0:	f000 80a4 	beq.w	800a91c <_printf_i+0x170>
 800a7d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7dc:	e03a      	b.n	800a854 <_printf_i+0xa8>
 800a7de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7e2:	2b15      	cmp	r3, #21
 800a7e4:	d8f6      	bhi.n	800a7d4 <_printf_i+0x28>
 800a7e6:	a101      	add	r1, pc, #4	; (adr r1, 800a7ec <_printf_i+0x40>)
 800a7e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7ec:	0800a845 	.word	0x0800a845
 800a7f0:	0800a859 	.word	0x0800a859
 800a7f4:	0800a7d5 	.word	0x0800a7d5
 800a7f8:	0800a7d5 	.word	0x0800a7d5
 800a7fc:	0800a7d5 	.word	0x0800a7d5
 800a800:	0800a7d5 	.word	0x0800a7d5
 800a804:	0800a859 	.word	0x0800a859
 800a808:	0800a7d5 	.word	0x0800a7d5
 800a80c:	0800a7d5 	.word	0x0800a7d5
 800a810:	0800a7d5 	.word	0x0800a7d5
 800a814:	0800a7d5 	.word	0x0800a7d5
 800a818:	0800a967 	.word	0x0800a967
 800a81c:	0800a889 	.word	0x0800a889
 800a820:	0800a949 	.word	0x0800a949
 800a824:	0800a7d5 	.word	0x0800a7d5
 800a828:	0800a7d5 	.word	0x0800a7d5
 800a82c:	0800a989 	.word	0x0800a989
 800a830:	0800a7d5 	.word	0x0800a7d5
 800a834:	0800a889 	.word	0x0800a889
 800a838:	0800a7d5 	.word	0x0800a7d5
 800a83c:	0800a7d5 	.word	0x0800a7d5
 800a840:	0800a951 	.word	0x0800a951
 800a844:	682b      	ldr	r3, [r5, #0]
 800a846:	1d1a      	adds	r2, r3, #4
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	602a      	str	r2, [r5, #0]
 800a84c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a850:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a854:	2301      	movs	r3, #1
 800a856:	e0a4      	b.n	800a9a2 <_printf_i+0x1f6>
 800a858:	6820      	ldr	r0, [r4, #0]
 800a85a:	6829      	ldr	r1, [r5, #0]
 800a85c:	0606      	lsls	r6, r0, #24
 800a85e:	f101 0304 	add.w	r3, r1, #4
 800a862:	d50a      	bpl.n	800a87a <_printf_i+0xce>
 800a864:	680e      	ldr	r6, [r1, #0]
 800a866:	602b      	str	r3, [r5, #0]
 800a868:	2e00      	cmp	r6, #0
 800a86a:	da03      	bge.n	800a874 <_printf_i+0xc8>
 800a86c:	232d      	movs	r3, #45	; 0x2d
 800a86e:	4276      	negs	r6, r6
 800a870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a874:	230a      	movs	r3, #10
 800a876:	485e      	ldr	r0, [pc, #376]	; (800a9f0 <_printf_i+0x244>)
 800a878:	e019      	b.n	800a8ae <_printf_i+0x102>
 800a87a:	680e      	ldr	r6, [r1, #0]
 800a87c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a880:	602b      	str	r3, [r5, #0]
 800a882:	bf18      	it	ne
 800a884:	b236      	sxthne	r6, r6
 800a886:	e7ef      	b.n	800a868 <_printf_i+0xbc>
 800a888:	682b      	ldr	r3, [r5, #0]
 800a88a:	6820      	ldr	r0, [r4, #0]
 800a88c:	1d19      	adds	r1, r3, #4
 800a88e:	6029      	str	r1, [r5, #0]
 800a890:	0601      	lsls	r1, r0, #24
 800a892:	d501      	bpl.n	800a898 <_printf_i+0xec>
 800a894:	681e      	ldr	r6, [r3, #0]
 800a896:	e002      	b.n	800a89e <_printf_i+0xf2>
 800a898:	0646      	lsls	r6, r0, #25
 800a89a:	d5fb      	bpl.n	800a894 <_printf_i+0xe8>
 800a89c:	881e      	ldrh	r6, [r3, #0]
 800a89e:	2f6f      	cmp	r7, #111	; 0x6f
 800a8a0:	bf0c      	ite	eq
 800a8a2:	2308      	moveq	r3, #8
 800a8a4:	230a      	movne	r3, #10
 800a8a6:	4852      	ldr	r0, [pc, #328]	; (800a9f0 <_printf_i+0x244>)
 800a8a8:	2100      	movs	r1, #0
 800a8aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a8ae:	6865      	ldr	r5, [r4, #4]
 800a8b0:	2d00      	cmp	r5, #0
 800a8b2:	bfa8      	it	ge
 800a8b4:	6821      	ldrge	r1, [r4, #0]
 800a8b6:	60a5      	str	r5, [r4, #8]
 800a8b8:	bfa4      	itt	ge
 800a8ba:	f021 0104 	bicge.w	r1, r1, #4
 800a8be:	6021      	strge	r1, [r4, #0]
 800a8c0:	b90e      	cbnz	r6, 800a8c6 <_printf_i+0x11a>
 800a8c2:	2d00      	cmp	r5, #0
 800a8c4:	d04d      	beq.n	800a962 <_printf_i+0x1b6>
 800a8c6:	4615      	mov	r5, r2
 800a8c8:	fbb6 f1f3 	udiv	r1, r6, r3
 800a8cc:	fb03 6711 	mls	r7, r3, r1, r6
 800a8d0:	5dc7      	ldrb	r7, [r0, r7]
 800a8d2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a8d6:	4637      	mov	r7, r6
 800a8d8:	42bb      	cmp	r3, r7
 800a8da:	460e      	mov	r6, r1
 800a8dc:	d9f4      	bls.n	800a8c8 <_printf_i+0x11c>
 800a8de:	2b08      	cmp	r3, #8
 800a8e0:	d10b      	bne.n	800a8fa <_printf_i+0x14e>
 800a8e2:	6823      	ldr	r3, [r4, #0]
 800a8e4:	07de      	lsls	r6, r3, #31
 800a8e6:	d508      	bpl.n	800a8fa <_printf_i+0x14e>
 800a8e8:	6923      	ldr	r3, [r4, #16]
 800a8ea:	6861      	ldr	r1, [r4, #4]
 800a8ec:	4299      	cmp	r1, r3
 800a8ee:	bfde      	ittt	le
 800a8f0:	2330      	movle	r3, #48	; 0x30
 800a8f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a8fa:	1b52      	subs	r2, r2, r5
 800a8fc:	6122      	str	r2, [r4, #16]
 800a8fe:	464b      	mov	r3, r9
 800a900:	4621      	mov	r1, r4
 800a902:	4640      	mov	r0, r8
 800a904:	f8cd a000 	str.w	sl, [sp]
 800a908:	aa03      	add	r2, sp, #12
 800a90a:	f7ff fedf 	bl	800a6cc <_printf_common>
 800a90e:	3001      	adds	r0, #1
 800a910:	d14c      	bne.n	800a9ac <_printf_i+0x200>
 800a912:	f04f 30ff 	mov.w	r0, #4294967295
 800a916:	b004      	add	sp, #16
 800a918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a91c:	4834      	ldr	r0, [pc, #208]	; (800a9f0 <_printf_i+0x244>)
 800a91e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a922:	6829      	ldr	r1, [r5, #0]
 800a924:	6823      	ldr	r3, [r4, #0]
 800a926:	f851 6b04 	ldr.w	r6, [r1], #4
 800a92a:	6029      	str	r1, [r5, #0]
 800a92c:	061d      	lsls	r5, r3, #24
 800a92e:	d514      	bpl.n	800a95a <_printf_i+0x1ae>
 800a930:	07df      	lsls	r7, r3, #31
 800a932:	bf44      	itt	mi
 800a934:	f043 0320 	orrmi.w	r3, r3, #32
 800a938:	6023      	strmi	r3, [r4, #0]
 800a93a:	b91e      	cbnz	r6, 800a944 <_printf_i+0x198>
 800a93c:	6823      	ldr	r3, [r4, #0]
 800a93e:	f023 0320 	bic.w	r3, r3, #32
 800a942:	6023      	str	r3, [r4, #0]
 800a944:	2310      	movs	r3, #16
 800a946:	e7af      	b.n	800a8a8 <_printf_i+0xfc>
 800a948:	6823      	ldr	r3, [r4, #0]
 800a94a:	f043 0320 	orr.w	r3, r3, #32
 800a94e:	6023      	str	r3, [r4, #0]
 800a950:	2378      	movs	r3, #120	; 0x78
 800a952:	4828      	ldr	r0, [pc, #160]	; (800a9f4 <_printf_i+0x248>)
 800a954:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a958:	e7e3      	b.n	800a922 <_printf_i+0x176>
 800a95a:	0659      	lsls	r1, r3, #25
 800a95c:	bf48      	it	mi
 800a95e:	b2b6      	uxthmi	r6, r6
 800a960:	e7e6      	b.n	800a930 <_printf_i+0x184>
 800a962:	4615      	mov	r5, r2
 800a964:	e7bb      	b.n	800a8de <_printf_i+0x132>
 800a966:	682b      	ldr	r3, [r5, #0]
 800a968:	6826      	ldr	r6, [r4, #0]
 800a96a:	1d18      	adds	r0, r3, #4
 800a96c:	6961      	ldr	r1, [r4, #20]
 800a96e:	6028      	str	r0, [r5, #0]
 800a970:	0635      	lsls	r5, r6, #24
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	d501      	bpl.n	800a97a <_printf_i+0x1ce>
 800a976:	6019      	str	r1, [r3, #0]
 800a978:	e002      	b.n	800a980 <_printf_i+0x1d4>
 800a97a:	0670      	lsls	r0, r6, #25
 800a97c:	d5fb      	bpl.n	800a976 <_printf_i+0x1ca>
 800a97e:	8019      	strh	r1, [r3, #0]
 800a980:	2300      	movs	r3, #0
 800a982:	4615      	mov	r5, r2
 800a984:	6123      	str	r3, [r4, #16]
 800a986:	e7ba      	b.n	800a8fe <_printf_i+0x152>
 800a988:	682b      	ldr	r3, [r5, #0]
 800a98a:	2100      	movs	r1, #0
 800a98c:	1d1a      	adds	r2, r3, #4
 800a98e:	602a      	str	r2, [r5, #0]
 800a990:	681d      	ldr	r5, [r3, #0]
 800a992:	6862      	ldr	r2, [r4, #4]
 800a994:	4628      	mov	r0, r5
 800a996:	f000 fed5 	bl	800b744 <memchr>
 800a99a:	b108      	cbz	r0, 800a9a0 <_printf_i+0x1f4>
 800a99c:	1b40      	subs	r0, r0, r5
 800a99e:	6060      	str	r0, [r4, #4]
 800a9a0:	6863      	ldr	r3, [r4, #4]
 800a9a2:	6123      	str	r3, [r4, #16]
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9aa:	e7a8      	b.n	800a8fe <_printf_i+0x152>
 800a9ac:	462a      	mov	r2, r5
 800a9ae:	4649      	mov	r1, r9
 800a9b0:	4640      	mov	r0, r8
 800a9b2:	6923      	ldr	r3, [r4, #16]
 800a9b4:	47d0      	blx	sl
 800a9b6:	3001      	adds	r0, #1
 800a9b8:	d0ab      	beq.n	800a912 <_printf_i+0x166>
 800a9ba:	6823      	ldr	r3, [r4, #0]
 800a9bc:	079b      	lsls	r3, r3, #30
 800a9be:	d413      	bmi.n	800a9e8 <_printf_i+0x23c>
 800a9c0:	68e0      	ldr	r0, [r4, #12]
 800a9c2:	9b03      	ldr	r3, [sp, #12]
 800a9c4:	4298      	cmp	r0, r3
 800a9c6:	bfb8      	it	lt
 800a9c8:	4618      	movlt	r0, r3
 800a9ca:	e7a4      	b.n	800a916 <_printf_i+0x16a>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	4632      	mov	r2, r6
 800a9d0:	4649      	mov	r1, r9
 800a9d2:	4640      	mov	r0, r8
 800a9d4:	47d0      	blx	sl
 800a9d6:	3001      	adds	r0, #1
 800a9d8:	d09b      	beq.n	800a912 <_printf_i+0x166>
 800a9da:	3501      	adds	r5, #1
 800a9dc:	68e3      	ldr	r3, [r4, #12]
 800a9de:	9903      	ldr	r1, [sp, #12]
 800a9e0:	1a5b      	subs	r3, r3, r1
 800a9e2:	42ab      	cmp	r3, r5
 800a9e4:	dcf2      	bgt.n	800a9cc <_printf_i+0x220>
 800a9e6:	e7eb      	b.n	800a9c0 <_printf_i+0x214>
 800a9e8:	2500      	movs	r5, #0
 800a9ea:	f104 0619 	add.w	r6, r4, #25
 800a9ee:	e7f5      	b.n	800a9dc <_printf_i+0x230>
 800a9f0:	0800cfe6 	.word	0x0800cfe6
 800a9f4:	0800cff7 	.word	0x0800cff7

0800a9f8 <siprintf>:
 800a9f8:	b40e      	push	{r1, r2, r3}
 800a9fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a9fe:	b500      	push	{lr}
 800aa00:	b09c      	sub	sp, #112	; 0x70
 800aa02:	ab1d      	add	r3, sp, #116	; 0x74
 800aa04:	9002      	str	r0, [sp, #8]
 800aa06:	9006      	str	r0, [sp, #24]
 800aa08:	9107      	str	r1, [sp, #28]
 800aa0a:	9104      	str	r1, [sp, #16]
 800aa0c:	4808      	ldr	r0, [pc, #32]	; (800aa30 <siprintf+0x38>)
 800aa0e:	4909      	ldr	r1, [pc, #36]	; (800aa34 <siprintf+0x3c>)
 800aa10:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa14:	9105      	str	r1, [sp, #20]
 800aa16:	6800      	ldr	r0, [r0, #0]
 800aa18:	a902      	add	r1, sp, #8
 800aa1a:	9301      	str	r3, [sp, #4]
 800aa1c:	f001 fb7c 	bl	800c118 <_svfiprintf_r>
 800aa20:	2200      	movs	r2, #0
 800aa22:	9b02      	ldr	r3, [sp, #8]
 800aa24:	701a      	strb	r2, [r3, #0]
 800aa26:	b01c      	add	sp, #112	; 0x70
 800aa28:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa2c:	b003      	add	sp, #12
 800aa2e:	4770      	bx	lr
 800aa30:	2000008c 	.word	0x2000008c
 800aa34:	ffff0208 	.word	0xffff0208

0800aa38 <quorem>:
 800aa38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3c:	6903      	ldr	r3, [r0, #16]
 800aa3e:	690c      	ldr	r4, [r1, #16]
 800aa40:	4607      	mov	r7, r0
 800aa42:	42a3      	cmp	r3, r4
 800aa44:	f2c0 8082 	blt.w	800ab4c <quorem+0x114>
 800aa48:	3c01      	subs	r4, #1
 800aa4a:	f100 0514 	add.w	r5, r0, #20
 800aa4e:	f101 0814 	add.w	r8, r1, #20
 800aa52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa56:	9301      	str	r3, [sp, #4]
 800aa58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa60:	3301      	adds	r3, #1
 800aa62:	429a      	cmp	r2, r3
 800aa64:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aa6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa70:	d331      	bcc.n	800aad6 <quorem+0x9e>
 800aa72:	f04f 0e00 	mov.w	lr, #0
 800aa76:	4640      	mov	r0, r8
 800aa78:	46ac      	mov	ip, r5
 800aa7a:	46f2      	mov	sl, lr
 800aa7c:	f850 2b04 	ldr.w	r2, [r0], #4
 800aa80:	b293      	uxth	r3, r2
 800aa82:	fb06 e303 	mla	r3, r6, r3, lr
 800aa86:	0c12      	lsrs	r2, r2, #16
 800aa88:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	fb06 e202 	mla	r2, r6, r2, lr
 800aa92:	ebaa 0303 	sub.w	r3, sl, r3
 800aa96:	f8dc a000 	ldr.w	sl, [ip]
 800aa9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aa9e:	fa1f fa8a 	uxth.w	sl, sl
 800aaa2:	4453      	add	r3, sl
 800aaa4:	f8dc a000 	ldr.w	sl, [ip]
 800aaa8:	b292      	uxth	r2, r2
 800aaaa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800aaae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aab8:	4581      	cmp	r9, r0
 800aaba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aabe:	f84c 3b04 	str.w	r3, [ip], #4
 800aac2:	d2db      	bcs.n	800aa7c <quorem+0x44>
 800aac4:	f855 300b 	ldr.w	r3, [r5, fp]
 800aac8:	b92b      	cbnz	r3, 800aad6 <quorem+0x9e>
 800aaca:	9b01      	ldr	r3, [sp, #4]
 800aacc:	3b04      	subs	r3, #4
 800aace:	429d      	cmp	r5, r3
 800aad0:	461a      	mov	r2, r3
 800aad2:	d32f      	bcc.n	800ab34 <quorem+0xfc>
 800aad4:	613c      	str	r4, [r7, #16]
 800aad6:	4638      	mov	r0, r7
 800aad8:	f001 f8ce 	bl	800bc78 <__mcmp>
 800aadc:	2800      	cmp	r0, #0
 800aade:	db25      	blt.n	800ab2c <quorem+0xf4>
 800aae0:	4628      	mov	r0, r5
 800aae2:	f04f 0c00 	mov.w	ip, #0
 800aae6:	3601      	adds	r6, #1
 800aae8:	f858 1b04 	ldr.w	r1, [r8], #4
 800aaec:	f8d0 e000 	ldr.w	lr, [r0]
 800aaf0:	b28b      	uxth	r3, r1
 800aaf2:	ebac 0303 	sub.w	r3, ip, r3
 800aaf6:	fa1f f28e 	uxth.w	r2, lr
 800aafa:	4413      	add	r3, r2
 800aafc:	0c0a      	lsrs	r2, r1, #16
 800aafe:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ab02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab0c:	45c1      	cmp	r9, r8
 800ab0e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ab12:	f840 3b04 	str.w	r3, [r0], #4
 800ab16:	d2e7      	bcs.n	800aae8 <quorem+0xb0>
 800ab18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab20:	b922      	cbnz	r2, 800ab2c <quorem+0xf4>
 800ab22:	3b04      	subs	r3, #4
 800ab24:	429d      	cmp	r5, r3
 800ab26:	461a      	mov	r2, r3
 800ab28:	d30a      	bcc.n	800ab40 <quorem+0x108>
 800ab2a:	613c      	str	r4, [r7, #16]
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	b003      	add	sp, #12
 800ab30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab34:	6812      	ldr	r2, [r2, #0]
 800ab36:	3b04      	subs	r3, #4
 800ab38:	2a00      	cmp	r2, #0
 800ab3a:	d1cb      	bne.n	800aad4 <quorem+0x9c>
 800ab3c:	3c01      	subs	r4, #1
 800ab3e:	e7c6      	b.n	800aace <quorem+0x96>
 800ab40:	6812      	ldr	r2, [r2, #0]
 800ab42:	3b04      	subs	r3, #4
 800ab44:	2a00      	cmp	r2, #0
 800ab46:	d1f0      	bne.n	800ab2a <quorem+0xf2>
 800ab48:	3c01      	subs	r4, #1
 800ab4a:	e7eb      	b.n	800ab24 <quorem+0xec>
 800ab4c:	2000      	movs	r0, #0
 800ab4e:	e7ee      	b.n	800ab2e <quorem+0xf6>

0800ab50 <_dtoa_r>:
 800ab50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab54:	4616      	mov	r6, r2
 800ab56:	461f      	mov	r7, r3
 800ab58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ab5a:	b099      	sub	sp, #100	; 0x64
 800ab5c:	4605      	mov	r5, r0
 800ab5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ab62:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ab66:	b974      	cbnz	r4, 800ab86 <_dtoa_r+0x36>
 800ab68:	2010      	movs	r0, #16
 800ab6a:	f000 fde3 	bl	800b734 <malloc>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	6268      	str	r0, [r5, #36]	; 0x24
 800ab72:	b920      	cbnz	r0, 800ab7e <_dtoa_r+0x2e>
 800ab74:	21ea      	movs	r1, #234	; 0xea
 800ab76:	4ba8      	ldr	r3, [pc, #672]	; (800ae18 <_dtoa_r+0x2c8>)
 800ab78:	48a8      	ldr	r0, [pc, #672]	; (800ae1c <_dtoa_r+0x2cc>)
 800ab7a:	f001 fbdd 	bl	800c338 <__assert_func>
 800ab7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab82:	6004      	str	r4, [r0, #0]
 800ab84:	60c4      	str	r4, [r0, #12]
 800ab86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab88:	6819      	ldr	r1, [r3, #0]
 800ab8a:	b151      	cbz	r1, 800aba2 <_dtoa_r+0x52>
 800ab8c:	685a      	ldr	r2, [r3, #4]
 800ab8e:	2301      	movs	r3, #1
 800ab90:	4093      	lsls	r3, r2
 800ab92:	604a      	str	r2, [r1, #4]
 800ab94:	608b      	str	r3, [r1, #8]
 800ab96:	4628      	mov	r0, r5
 800ab98:	f000 fe30 	bl	800b7fc <_Bfree>
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aba0:	601a      	str	r2, [r3, #0]
 800aba2:	1e3b      	subs	r3, r7, #0
 800aba4:	bfaf      	iteee	ge
 800aba6:	2300      	movge	r3, #0
 800aba8:	2201      	movlt	r2, #1
 800abaa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800abae:	9305      	strlt	r3, [sp, #20]
 800abb0:	bfa8      	it	ge
 800abb2:	f8c8 3000 	strge.w	r3, [r8]
 800abb6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800abba:	4b99      	ldr	r3, [pc, #612]	; (800ae20 <_dtoa_r+0x2d0>)
 800abbc:	bfb8      	it	lt
 800abbe:	f8c8 2000 	strlt.w	r2, [r8]
 800abc2:	ea33 0309 	bics.w	r3, r3, r9
 800abc6:	d119      	bne.n	800abfc <_dtoa_r+0xac>
 800abc8:	f242 730f 	movw	r3, #9999	; 0x270f
 800abcc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800abce:	6013      	str	r3, [r2, #0]
 800abd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abd4:	4333      	orrs	r3, r6
 800abd6:	f000 857f 	beq.w	800b6d8 <_dtoa_r+0xb88>
 800abda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800abdc:	b953      	cbnz	r3, 800abf4 <_dtoa_r+0xa4>
 800abde:	4b91      	ldr	r3, [pc, #580]	; (800ae24 <_dtoa_r+0x2d4>)
 800abe0:	e022      	b.n	800ac28 <_dtoa_r+0xd8>
 800abe2:	4b91      	ldr	r3, [pc, #580]	; (800ae28 <_dtoa_r+0x2d8>)
 800abe4:	9303      	str	r3, [sp, #12]
 800abe6:	3308      	adds	r3, #8
 800abe8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800abea:	6013      	str	r3, [r2, #0]
 800abec:	9803      	ldr	r0, [sp, #12]
 800abee:	b019      	add	sp, #100	; 0x64
 800abf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf4:	4b8b      	ldr	r3, [pc, #556]	; (800ae24 <_dtoa_r+0x2d4>)
 800abf6:	9303      	str	r3, [sp, #12]
 800abf8:	3303      	adds	r3, #3
 800abfa:	e7f5      	b.n	800abe8 <_dtoa_r+0x98>
 800abfc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ac00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800ac04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac08:	2200      	movs	r2, #0
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	f7f5 fecc 	bl	80009a8 <__aeabi_dcmpeq>
 800ac10:	4680      	mov	r8, r0
 800ac12:	b158      	cbz	r0, 800ac2c <_dtoa_r+0xdc>
 800ac14:	2301      	movs	r3, #1
 800ac16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ac18:	6013      	str	r3, [r2, #0]
 800ac1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f000 8558 	beq.w	800b6d2 <_dtoa_r+0xb82>
 800ac22:	4882      	ldr	r0, [pc, #520]	; (800ae2c <_dtoa_r+0x2dc>)
 800ac24:	6018      	str	r0, [r3, #0]
 800ac26:	1e43      	subs	r3, r0, #1
 800ac28:	9303      	str	r3, [sp, #12]
 800ac2a:	e7df      	b.n	800abec <_dtoa_r+0x9c>
 800ac2c:	ab16      	add	r3, sp, #88	; 0x58
 800ac2e:	9301      	str	r3, [sp, #4]
 800ac30:	ab17      	add	r3, sp, #92	; 0x5c
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	4628      	mov	r0, r5
 800ac36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ac3a:	f001 f8c5 	bl	800bdc8 <__d2b>
 800ac3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ac42:	4683      	mov	fp, r0
 800ac44:	2c00      	cmp	r4, #0
 800ac46:	d07f      	beq.n	800ad48 <_dtoa_r+0x1f8>
 800ac48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac4e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ac52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800ac5a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ac5e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800ac62:	2200      	movs	r2, #0
 800ac64:	4b72      	ldr	r3, [pc, #456]	; (800ae30 <_dtoa_r+0x2e0>)
 800ac66:	f7f5 fa7f 	bl	8000168 <__aeabi_dsub>
 800ac6a:	a365      	add	r3, pc, #404	; (adr r3, 800ae00 <_dtoa_r+0x2b0>)
 800ac6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac70:	f7f5 fc32 	bl	80004d8 <__aeabi_dmul>
 800ac74:	a364      	add	r3, pc, #400	; (adr r3, 800ae08 <_dtoa_r+0x2b8>)
 800ac76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7a:	f7f5 fa77 	bl	800016c <__adddf3>
 800ac7e:	4606      	mov	r6, r0
 800ac80:	4620      	mov	r0, r4
 800ac82:	460f      	mov	r7, r1
 800ac84:	f7f5 fbbe 	bl	8000404 <__aeabi_i2d>
 800ac88:	a361      	add	r3, pc, #388	; (adr r3, 800ae10 <_dtoa_r+0x2c0>)
 800ac8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8e:	f7f5 fc23 	bl	80004d8 <__aeabi_dmul>
 800ac92:	4602      	mov	r2, r0
 800ac94:	460b      	mov	r3, r1
 800ac96:	4630      	mov	r0, r6
 800ac98:	4639      	mov	r1, r7
 800ac9a:	f7f5 fa67 	bl	800016c <__adddf3>
 800ac9e:	4606      	mov	r6, r0
 800aca0:	460f      	mov	r7, r1
 800aca2:	f7f5 fec9 	bl	8000a38 <__aeabi_d2iz>
 800aca6:	2200      	movs	r2, #0
 800aca8:	4682      	mov	sl, r0
 800acaa:	2300      	movs	r3, #0
 800acac:	4630      	mov	r0, r6
 800acae:	4639      	mov	r1, r7
 800acb0:	f7f5 fe84 	bl	80009bc <__aeabi_dcmplt>
 800acb4:	b148      	cbz	r0, 800acca <_dtoa_r+0x17a>
 800acb6:	4650      	mov	r0, sl
 800acb8:	f7f5 fba4 	bl	8000404 <__aeabi_i2d>
 800acbc:	4632      	mov	r2, r6
 800acbe:	463b      	mov	r3, r7
 800acc0:	f7f5 fe72 	bl	80009a8 <__aeabi_dcmpeq>
 800acc4:	b908      	cbnz	r0, 800acca <_dtoa_r+0x17a>
 800acc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800acca:	f1ba 0f16 	cmp.w	sl, #22
 800acce:	d858      	bhi.n	800ad82 <_dtoa_r+0x232>
 800acd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800acd4:	4b57      	ldr	r3, [pc, #348]	; (800ae34 <_dtoa_r+0x2e4>)
 800acd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800acda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acde:	f7f5 fe6d 	bl	80009bc <__aeabi_dcmplt>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	d04f      	beq.n	800ad86 <_dtoa_r+0x236>
 800ace6:	2300      	movs	r3, #0
 800ace8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800acec:	930f      	str	r3, [sp, #60]	; 0x3c
 800acee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800acf0:	1b1c      	subs	r4, r3, r4
 800acf2:	1e63      	subs	r3, r4, #1
 800acf4:	9309      	str	r3, [sp, #36]	; 0x24
 800acf6:	bf49      	itett	mi
 800acf8:	f1c4 0301 	rsbmi	r3, r4, #1
 800acfc:	2300      	movpl	r3, #0
 800acfe:	9306      	strmi	r3, [sp, #24]
 800ad00:	2300      	movmi	r3, #0
 800ad02:	bf54      	ite	pl
 800ad04:	9306      	strpl	r3, [sp, #24]
 800ad06:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ad08:	f1ba 0f00 	cmp.w	sl, #0
 800ad0c:	db3d      	blt.n	800ad8a <_dtoa_r+0x23a>
 800ad0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad10:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ad14:	4453      	add	r3, sl
 800ad16:	9309      	str	r3, [sp, #36]	; 0x24
 800ad18:	2300      	movs	r3, #0
 800ad1a:	930a      	str	r3, [sp, #40]	; 0x28
 800ad1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad1e:	2b09      	cmp	r3, #9
 800ad20:	f200 808c 	bhi.w	800ae3c <_dtoa_r+0x2ec>
 800ad24:	2b05      	cmp	r3, #5
 800ad26:	bfc4      	itt	gt
 800ad28:	3b04      	subgt	r3, #4
 800ad2a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ad2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad2e:	bfc8      	it	gt
 800ad30:	2400      	movgt	r4, #0
 800ad32:	f1a3 0302 	sub.w	r3, r3, #2
 800ad36:	bfd8      	it	le
 800ad38:	2401      	movle	r4, #1
 800ad3a:	2b03      	cmp	r3, #3
 800ad3c:	f200 808a 	bhi.w	800ae54 <_dtoa_r+0x304>
 800ad40:	e8df f003 	tbb	[pc, r3]
 800ad44:	5b4d4f2d 	.word	0x5b4d4f2d
 800ad48:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ad4c:	441c      	add	r4, r3
 800ad4e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ad52:	2b20      	cmp	r3, #32
 800ad54:	bfc3      	ittte	gt
 800ad56:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ad5a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ad5e:	fa09 f303 	lslgt.w	r3, r9, r3
 800ad62:	f1c3 0320 	rsble	r3, r3, #32
 800ad66:	bfc6      	itte	gt
 800ad68:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ad6c:	4318      	orrgt	r0, r3
 800ad6e:	fa06 f003 	lslle.w	r0, r6, r3
 800ad72:	f7f5 fb37 	bl	80003e4 <__aeabi_ui2d>
 800ad76:	2301      	movs	r3, #1
 800ad78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ad7c:	3c01      	subs	r4, #1
 800ad7e:	9313      	str	r3, [sp, #76]	; 0x4c
 800ad80:	e76f      	b.n	800ac62 <_dtoa_r+0x112>
 800ad82:	2301      	movs	r3, #1
 800ad84:	e7b2      	b.n	800acec <_dtoa_r+0x19c>
 800ad86:	900f      	str	r0, [sp, #60]	; 0x3c
 800ad88:	e7b1      	b.n	800acee <_dtoa_r+0x19e>
 800ad8a:	9b06      	ldr	r3, [sp, #24]
 800ad8c:	eba3 030a 	sub.w	r3, r3, sl
 800ad90:	9306      	str	r3, [sp, #24]
 800ad92:	f1ca 0300 	rsb	r3, sl, #0
 800ad96:	930a      	str	r3, [sp, #40]	; 0x28
 800ad98:	2300      	movs	r3, #0
 800ad9a:	930e      	str	r3, [sp, #56]	; 0x38
 800ad9c:	e7be      	b.n	800ad1c <_dtoa_r+0x1cc>
 800ad9e:	2300      	movs	r3, #0
 800ada0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ada2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	dc58      	bgt.n	800ae5a <_dtoa_r+0x30a>
 800ada8:	f04f 0901 	mov.w	r9, #1
 800adac:	464b      	mov	r3, r9
 800adae:	f8cd 9020 	str.w	r9, [sp, #32]
 800adb2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800adb6:	2200      	movs	r2, #0
 800adb8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800adba:	6042      	str	r2, [r0, #4]
 800adbc:	2204      	movs	r2, #4
 800adbe:	f102 0614 	add.w	r6, r2, #20
 800adc2:	429e      	cmp	r6, r3
 800adc4:	6841      	ldr	r1, [r0, #4]
 800adc6:	d94e      	bls.n	800ae66 <_dtoa_r+0x316>
 800adc8:	4628      	mov	r0, r5
 800adca:	f000 fcd7 	bl	800b77c <_Balloc>
 800adce:	9003      	str	r0, [sp, #12]
 800add0:	2800      	cmp	r0, #0
 800add2:	d14c      	bne.n	800ae6e <_dtoa_r+0x31e>
 800add4:	4602      	mov	r2, r0
 800add6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800adda:	4b17      	ldr	r3, [pc, #92]	; (800ae38 <_dtoa_r+0x2e8>)
 800addc:	e6cc      	b.n	800ab78 <_dtoa_r+0x28>
 800adde:	2301      	movs	r3, #1
 800ade0:	e7de      	b.n	800ada0 <_dtoa_r+0x250>
 800ade2:	2300      	movs	r3, #0
 800ade4:	930b      	str	r3, [sp, #44]	; 0x2c
 800ade6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ade8:	eb0a 0903 	add.w	r9, sl, r3
 800adec:	f109 0301 	add.w	r3, r9, #1
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	9308      	str	r3, [sp, #32]
 800adf4:	bfb8      	it	lt
 800adf6:	2301      	movlt	r3, #1
 800adf8:	e7dd      	b.n	800adb6 <_dtoa_r+0x266>
 800adfa:	2301      	movs	r3, #1
 800adfc:	e7f2      	b.n	800ade4 <_dtoa_r+0x294>
 800adfe:	bf00      	nop
 800ae00:	636f4361 	.word	0x636f4361
 800ae04:	3fd287a7 	.word	0x3fd287a7
 800ae08:	8b60c8b3 	.word	0x8b60c8b3
 800ae0c:	3fc68a28 	.word	0x3fc68a28
 800ae10:	509f79fb 	.word	0x509f79fb
 800ae14:	3fd34413 	.word	0x3fd34413
 800ae18:	0800d015 	.word	0x0800d015
 800ae1c:	0800d02c 	.word	0x0800d02c
 800ae20:	7ff00000 	.word	0x7ff00000
 800ae24:	0800d011 	.word	0x0800d011
 800ae28:	0800d008 	.word	0x0800d008
 800ae2c:	0800cfe5 	.word	0x0800cfe5
 800ae30:	3ff80000 	.word	0x3ff80000
 800ae34:	0800d120 	.word	0x0800d120
 800ae38:	0800d087 	.word	0x0800d087
 800ae3c:	2401      	movs	r4, #1
 800ae3e:	2300      	movs	r3, #0
 800ae40:	940b      	str	r4, [sp, #44]	; 0x2c
 800ae42:	9322      	str	r3, [sp, #136]	; 0x88
 800ae44:	f04f 39ff 	mov.w	r9, #4294967295
 800ae48:	2200      	movs	r2, #0
 800ae4a:	2312      	movs	r3, #18
 800ae4c:	f8cd 9020 	str.w	r9, [sp, #32]
 800ae50:	9223      	str	r2, [sp, #140]	; 0x8c
 800ae52:	e7b0      	b.n	800adb6 <_dtoa_r+0x266>
 800ae54:	2301      	movs	r3, #1
 800ae56:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae58:	e7f4      	b.n	800ae44 <_dtoa_r+0x2f4>
 800ae5a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800ae5e:	464b      	mov	r3, r9
 800ae60:	f8cd 9020 	str.w	r9, [sp, #32]
 800ae64:	e7a7      	b.n	800adb6 <_dtoa_r+0x266>
 800ae66:	3101      	adds	r1, #1
 800ae68:	6041      	str	r1, [r0, #4]
 800ae6a:	0052      	lsls	r2, r2, #1
 800ae6c:	e7a7      	b.n	800adbe <_dtoa_r+0x26e>
 800ae6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ae70:	9a03      	ldr	r2, [sp, #12]
 800ae72:	601a      	str	r2, [r3, #0]
 800ae74:	9b08      	ldr	r3, [sp, #32]
 800ae76:	2b0e      	cmp	r3, #14
 800ae78:	f200 80a8 	bhi.w	800afcc <_dtoa_r+0x47c>
 800ae7c:	2c00      	cmp	r4, #0
 800ae7e:	f000 80a5 	beq.w	800afcc <_dtoa_r+0x47c>
 800ae82:	f1ba 0f00 	cmp.w	sl, #0
 800ae86:	dd34      	ble.n	800aef2 <_dtoa_r+0x3a2>
 800ae88:	4a9a      	ldr	r2, [pc, #616]	; (800b0f4 <_dtoa_r+0x5a4>)
 800ae8a:	f00a 030f 	and.w	r3, sl, #15
 800ae8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ae92:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ae96:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ae9e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800aea2:	d016      	beq.n	800aed2 <_dtoa_r+0x382>
 800aea4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aea8:	4b93      	ldr	r3, [pc, #588]	; (800b0f8 <_dtoa_r+0x5a8>)
 800aeaa:	2703      	movs	r7, #3
 800aeac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aeb0:	f7f5 fc3c 	bl	800072c <__aeabi_ddiv>
 800aeb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aeb8:	f004 040f 	and.w	r4, r4, #15
 800aebc:	4e8e      	ldr	r6, [pc, #568]	; (800b0f8 <_dtoa_r+0x5a8>)
 800aebe:	b954      	cbnz	r4, 800aed6 <_dtoa_r+0x386>
 800aec0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aec4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aec8:	f7f5 fc30 	bl	800072c <__aeabi_ddiv>
 800aecc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aed0:	e029      	b.n	800af26 <_dtoa_r+0x3d6>
 800aed2:	2702      	movs	r7, #2
 800aed4:	e7f2      	b.n	800aebc <_dtoa_r+0x36c>
 800aed6:	07e1      	lsls	r1, r4, #31
 800aed8:	d508      	bpl.n	800aeec <_dtoa_r+0x39c>
 800aeda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aede:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aee2:	f7f5 faf9 	bl	80004d8 <__aeabi_dmul>
 800aee6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aeea:	3701      	adds	r7, #1
 800aeec:	1064      	asrs	r4, r4, #1
 800aeee:	3608      	adds	r6, #8
 800aef0:	e7e5      	b.n	800aebe <_dtoa_r+0x36e>
 800aef2:	f000 80a5 	beq.w	800b040 <_dtoa_r+0x4f0>
 800aef6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aefa:	f1ca 0400 	rsb	r4, sl, #0
 800aefe:	4b7d      	ldr	r3, [pc, #500]	; (800b0f4 <_dtoa_r+0x5a4>)
 800af00:	f004 020f 	and.w	r2, r4, #15
 800af04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0c:	f7f5 fae4 	bl	80004d8 <__aeabi_dmul>
 800af10:	2702      	movs	r7, #2
 800af12:	2300      	movs	r3, #0
 800af14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af18:	4e77      	ldr	r6, [pc, #476]	; (800b0f8 <_dtoa_r+0x5a8>)
 800af1a:	1124      	asrs	r4, r4, #4
 800af1c:	2c00      	cmp	r4, #0
 800af1e:	f040 8084 	bne.w	800b02a <_dtoa_r+0x4da>
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1d2      	bne.n	800aecc <_dtoa_r+0x37c>
 800af26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f000 808b 	beq.w	800b044 <_dtoa_r+0x4f4>
 800af2e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800af32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800af36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af3a:	2200      	movs	r2, #0
 800af3c:	4b6f      	ldr	r3, [pc, #444]	; (800b0fc <_dtoa_r+0x5ac>)
 800af3e:	f7f5 fd3d 	bl	80009bc <__aeabi_dcmplt>
 800af42:	2800      	cmp	r0, #0
 800af44:	d07e      	beq.n	800b044 <_dtoa_r+0x4f4>
 800af46:	9b08      	ldr	r3, [sp, #32]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d07b      	beq.n	800b044 <_dtoa_r+0x4f4>
 800af4c:	f1b9 0f00 	cmp.w	r9, #0
 800af50:	dd38      	ble.n	800afc4 <_dtoa_r+0x474>
 800af52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af56:	2200      	movs	r2, #0
 800af58:	4b69      	ldr	r3, [pc, #420]	; (800b100 <_dtoa_r+0x5b0>)
 800af5a:	f7f5 fabd 	bl	80004d8 <__aeabi_dmul>
 800af5e:	464c      	mov	r4, r9
 800af60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af64:	f10a 38ff 	add.w	r8, sl, #4294967295
 800af68:	3701      	adds	r7, #1
 800af6a:	4638      	mov	r0, r7
 800af6c:	f7f5 fa4a 	bl	8000404 <__aeabi_i2d>
 800af70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af74:	f7f5 fab0 	bl	80004d8 <__aeabi_dmul>
 800af78:	2200      	movs	r2, #0
 800af7a:	4b62      	ldr	r3, [pc, #392]	; (800b104 <_dtoa_r+0x5b4>)
 800af7c:	f7f5 f8f6 	bl	800016c <__adddf3>
 800af80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800af84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800af88:	9611      	str	r6, [sp, #68]	; 0x44
 800af8a:	2c00      	cmp	r4, #0
 800af8c:	d15d      	bne.n	800b04a <_dtoa_r+0x4fa>
 800af8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af92:	2200      	movs	r2, #0
 800af94:	4b5c      	ldr	r3, [pc, #368]	; (800b108 <_dtoa_r+0x5b8>)
 800af96:	f7f5 f8e7 	bl	8000168 <__aeabi_dsub>
 800af9a:	4602      	mov	r2, r0
 800af9c:	460b      	mov	r3, r1
 800af9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800afa2:	4633      	mov	r3, r6
 800afa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800afa6:	f7f5 fd27 	bl	80009f8 <__aeabi_dcmpgt>
 800afaa:	2800      	cmp	r0, #0
 800afac:	f040 829c 	bne.w	800b4e8 <_dtoa_r+0x998>
 800afb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800afb6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800afba:	f7f5 fcff 	bl	80009bc <__aeabi_dcmplt>
 800afbe:	2800      	cmp	r0, #0
 800afc0:	f040 8290 	bne.w	800b4e4 <_dtoa_r+0x994>
 800afc4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800afc8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800afcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f2c0 8152 	blt.w	800b278 <_dtoa_r+0x728>
 800afd4:	f1ba 0f0e 	cmp.w	sl, #14
 800afd8:	f300 814e 	bgt.w	800b278 <_dtoa_r+0x728>
 800afdc:	4b45      	ldr	r3, [pc, #276]	; (800b0f4 <_dtoa_r+0x5a4>)
 800afde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800afe2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800afe6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800afea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800afec:	2b00      	cmp	r3, #0
 800afee:	f280 80db 	bge.w	800b1a8 <_dtoa_r+0x658>
 800aff2:	9b08      	ldr	r3, [sp, #32]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	f300 80d7 	bgt.w	800b1a8 <_dtoa_r+0x658>
 800affa:	f040 8272 	bne.w	800b4e2 <_dtoa_r+0x992>
 800affe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b002:	2200      	movs	r2, #0
 800b004:	4b40      	ldr	r3, [pc, #256]	; (800b108 <_dtoa_r+0x5b8>)
 800b006:	f7f5 fa67 	bl	80004d8 <__aeabi_dmul>
 800b00a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b00e:	f7f5 fce9 	bl	80009e4 <__aeabi_dcmpge>
 800b012:	9c08      	ldr	r4, [sp, #32]
 800b014:	4626      	mov	r6, r4
 800b016:	2800      	cmp	r0, #0
 800b018:	f040 8248 	bne.w	800b4ac <_dtoa_r+0x95c>
 800b01c:	2331      	movs	r3, #49	; 0x31
 800b01e:	9f03      	ldr	r7, [sp, #12]
 800b020:	f10a 0a01 	add.w	sl, sl, #1
 800b024:	f807 3b01 	strb.w	r3, [r7], #1
 800b028:	e244      	b.n	800b4b4 <_dtoa_r+0x964>
 800b02a:	07e2      	lsls	r2, r4, #31
 800b02c:	d505      	bpl.n	800b03a <_dtoa_r+0x4ea>
 800b02e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b032:	f7f5 fa51 	bl	80004d8 <__aeabi_dmul>
 800b036:	2301      	movs	r3, #1
 800b038:	3701      	adds	r7, #1
 800b03a:	1064      	asrs	r4, r4, #1
 800b03c:	3608      	adds	r6, #8
 800b03e:	e76d      	b.n	800af1c <_dtoa_r+0x3cc>
 800b040:	2702      	movs	r7, #2
 800b042:	e770      	b.n	800af26 <_dtoa_r+0x3d6>
 800b044:	46d0      	mov	r8, sl
 800b046:	9c08      	ldr	r4, [sp, #32]
 800b048:	e78f      	b.n	800af6a <_dtoa_r+0x41a>
 800b04a:	9903      	ldr	r1, [sp, #12]
 800b04c:	4b29      	ldr	r3, [pc, #164]	; (800b0f4 <_dtoa_r+0x5a4>)
 800b04e:	4421      	add	r1, r4
 800b050:	9112      	str	r1, [sp, #72]	; 0x48
 800b052:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b054:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b058:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b05c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b060:	2900      	cmp	r1, #0
 800b062:	d055      	beq.n	800b110 <_dtoa_r+0x5c0>
 800b064:	2000      	movs	r0, #0
 800b066:	4929      	ldr	r1, [pc, #164]	; (800b10c <_dtoa_r+0x5bc>)
 800b068:	f7f5 fb60 	bl	800072c <__aeabi_ddiv>
 800b06c:	463b      	mov	r3, r7
 800b06e:	4632      	mov	r2, r6
 800b070:	f7f5 f87a 	bl	8000168 <__aeabi_dsub>
 800b074:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b078:	9f03      	ldr	r7, [sp, #12]
 800b07a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b07e:	f7f5 fcdb 	bl	8000a38 <__aeabi_d2iz>
 800b082:	4604      	mov	r4, r0
 800b084:	f7f5 f9be 	bl	8000404 <__aeabi_i2d>
 800b088:	4602      	mov	r2, r0
 800b08a:	460b      	mov	r3, r1
 800b08c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b090:	f7f5 f86a 	bl	8000168 <__aeabi_dsub>
 800b094:	4602      	mov	r2, r0
 800b096:	460b      	mov	r3, r1
 800b098:	3430      	adds	r4, #48	; 0x30
 800b09a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b09e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b0a2:	f807 4b01 	strb.w	r4, [r7], #1
 800b0a6:	f7f5 fc89 	bl	80009bc <__aeabi_dcmplt>
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	d174      	bne.n	800b198 <_dtoa_r+0x648>
 800b0ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	4911      	ldr	r1, [pc, #68]	; (800b0fc <_dtoa_r+0x5ac>)
 800b0b6:	f7f5 f857 	bl	8000168 <__aeabi_dsub>
 800b0ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b0be:	f7f5 fc7d 	bl	80009bc <__aeabi_dcmplt>
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	f040 80b7 	bne.w	800b236 <_dtoa_r+0x6e6>
 800b0c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0ca:	429f      	cmp	r7, r3
 800b0cc:	f43f af7a 	beq.w	800afc4 <_dtoa_r+0x474>
 800b0d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	4b0a      	ldr	r3, [pc, #40]	; (800b100 <_dtoa_r+0x5b0>)
 800b0d8:	f7f5 f9fe 	bl	80004d8 <__aeabi_dmul>
 800b0dc:	2200      	movs	r2, #0
 800b0de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b0e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0e6:	4b06      	ldr	r3, [pc, #24]	; (800b100 <_dtoa_r+0x5b0>)
 800b0e8:	f7f5 f9f6 	bl	80004d8 <__aeabi_dmul>
 800b0ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0f0:	e7c3      	b.n	800b07a <_dtoa_r+0x52a>
 800b0f2:	bf00      	nop
 800b0f4:	0800d120 	.word	0x0800d120
 800b0f8:	0800d0f8 	.word	0x0800d0f8
 800b0fc:	3ff00000 	.word	0x3ff00000
 800b100:	40240000 	.word	0x40240000
 800b104:	401c0000 	.word	0x401c0000
 800b108:	40140000 	.word	0x40140000
 800b10c:	3fe00000 	.word	0x3fe00000
 800b110:	4630      	mov	r0, r6
 800b112:	4639      	mov	r1, r7
 800b114:	f7f5 f9e0 	bl	80004d8 <__aeabi_dmul>
 800b118:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b11a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b11e:	9c03      	ldr	r4, [sp, #12]
 800b120:	9314      	str	r3, [sp, #80]	; 0x50
 800b122:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b126:	f7f5 fc87 	bl	8000a38 <__aeabi_d2iz>
 800b12a:	9015      	str	r0, [sp, #84]	; 0x54
 800b12c:	f7f5 f96a 	bl	8000404 <__aeabi_i2d>
 800b130:	4602      	mov	r2, r0
 800b132:	460b      	mov	r3, r1
 800b134:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b138:	f7f5 f816 	bl	8000168 <__aeabi_dsub>
 800b13c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b13e:	4606      	mov	r6, r0
 800b140:	3330      	adds	r3, #48	; 0x30
 800b142:	f804 3b01 	strb.w	r3, [r4], #1
 800b146:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b148:	460f      	mov	r7, r1
 800b14a:	429c      	cmp	r4, r3
 800b14c:	f04f 0200 	mov.w	r2, #0
 800b150:	d124      	bne.n	800b19c <_dtoa_r+0x64c>
 800b152:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b156:	4bb0      	ldr	r3, [pc, #704]	; (800b418 <_dtoa_r+0x8c8>)
 800b158:	f7f5 f808 	bl	800016c <__adddf3>
 800b15c:	4602      	mov	r2, r0
 800b15e:	460b      	mov	r3, r1
 800b160:	4630      	mov	r0, r6
 800b162:	4639      	mov	r1, r7
 800b164:	f7f5 fc48 	bl	80009f8 <__aeabi_dcmpgt>
 800b168:	2800      	cmp	r0, #0
 800b16a:	d163      	bne.n	800b234 <_dtoa_r+0x6e4>
 800b16c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b170:	2000      	movs	r0, #0
 800b172:	49a9      	ldr	r1, [pc, #676]	; (800b418 <_dtoa_r+0x8c8>)
 800b174:	f7f4 fff8 	bl	8000168 <__aeabi_dsub>
 800b178:	4602      	mov	r2, r0
 800b17a:	460b      	mov	r3, r1
 800b17c:	4630      	mov	r0, r6
 800b17e:	4639      	mov	r1, r7
 800b180:	f7f5 fc1c 	bl	80009bc <__aeabi_dcmplt>
 800b184:	2800      	cmp	r0, #0
 800b186:	f43f af1d 	beq.w	800afc4 <_dtoa_r+0x474>
 800b18a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b18c:	1e7b      	subs	r3, r7, #1
 800b18e:	9314      	str	r3, [sp, #80]	; 0x50
 800b190:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b194:	2b30      	cmp	r3, #48	; 0x30
 800b196:	d0f8      	beq.n	800b18a <_dtoa_r+0x63a>
 800b198:	46c2      	mov	sl, r8
 800b19a:	e03b      	b.n	800b214 <_dtoa_r+0x6c4>
 800b19c:	4b9f      	ldr	r3, [pc, #636]	; (800b41c <_dtoa_r+0x8cc>)
 800b19e:	f7f5 f99b 	bl	80004d8 <__aeabi_dmul>
 800b1a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1a6:	e7bc      	b.n	800b122 <_dtoa_r+0x5d2>
 800b1a8:	9f03      	ldr	r7, [sp, #12]
 800b1aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b1ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1b2:	4640      	mov	r0, r8
 800b1b4:	4649      	mov	r1, r9
 800b1b6:	f7f5 fab9 	bl	800072c <__aeabi_ddiv>
 800b1ba:	f7f5 fc3d 	bl	8000a38 <__aeabi_d2iz>
 800b1be:	4604      	mov	r4, r0
 800b1c0:	f7f5 f920 	bl	8000404 <__aeabi_i2d>
 800b1c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1c8:	f7f5 f986 	bl	80004d8 <__aeabi_dmul>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	4640      	mov	r0, r8
 800b1d2:	4649      	mov	r1, r9
 800b1d4:	f7f4 ffc8 	bl	8000168 <__aeabi_dsub>
 800b1d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b1dc:	f807 6b01 	strb.w	r6, [r7], #1
 800b1e0:	9e03      	ldr	r6, [sp, #12]
 800b1e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b1e6:	1bbe      	subs	r6, r7, r6
 800b1e8:	45b4      	cmp	ip, r6
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	d136      	bne.n	800b25e <_dtoa_r+0x70e>
 800b1f0:	f7f4 ffbc 	bl	800016c <__adddf3>
 800b1f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1f8:	4680      	mov	r8, r0
 800b1fa:	4689      	mov	r9, r1
 800b1fc:	f7f5 fbfc 	bl	80009f8 <__aeabi_dcmpgt>
 800b200:	bb58      	cbnz	r0, 800b25a <_dtoa_r+0x70a>
 800b202:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b206:	4640      	mov	r0, r8
 800b208:	4649      	mov	r1, r9
 800b20a:	f7f5 fbcd 	bl	80009a8 <__aeabi_dcmpeq>
 800b20e:	b108      	cbz	r0, 800b214 <_dtoa_r+0x6c4>
 800b210:	07e1      	lsls	r1, r4, #31
 800b212:	d422      	bmi.n	800b25a <_dtoa_r+0x70a>
 800b214:	4628      	mov	r0, r5
 800b216:	4659      	mov	r1, fp
 800b218:	f000 faf0 	bl	800b7fc <_Bfree>
 800b21c:	2300      	movs	r3, #0
 800b21e:	703b      	strb	r3, [r7, #0]
 800b220:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b222:	f10a 0001 	add.w	r0, sl, #1
 800b226:	6018      	str	r0, [r3, #0]
 800b228:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f43f acde 	beq.w	800abec <_dtoa_r+0x9c>
 800b230:	601f      	str	r7, [r3, #0]
 800b232:	e4db      	b.n	800abec <_dtoa_r+0x9c>
 800b234:	4627      	mov	r7, r4
 800b236:	463b      	mov	r3, r7
 800b238:	461f      	mov	r7, r3
 800b23a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b23e:	2a39      	cmp	r2, #57	; 0x39
 800b240:	d107      	bne.n	800b252 <_dtoa_r+0x702>
 800b242:	9a03      	ldr	r2, [sp, #12]
 800b244:	429a      	cmp	r2, r3
 800b246:	d1f7      	bne.n	800b238 <_dtoa_r+0x6e8>
 800b248:	2230      	movs	r2, #48	; 0x30
 800b24a:	9903      	ldr	r1, [sp, #12]
 800b24c:	f108 0801 	add.w	r8, r8, #1
 800b250:	700a      	strb	r2, [r1, #0]
 800b252:	781a      	ldrb	r2, [r3, #0]
 800b254:	3201      	adds	r2, #1
 800b256:	701a      	strb	r2, [r3, #0]
 800b258:	e79e      	b.n	800b198 <_dtoa_r+0x648>
 800b25a:	46d0      	mov	r8, sl
 800b25c:	e7eb      	b.n	800b236 <_dtoa_r+0x6e6>
 800b25e:	2200      	movs	r2, #0
 800b260:	4b6e      	ldr	r3, [pc, #440]	; (800b41c <_dtoa_r+0x8cc>)
 800b262:	f7f5 f939 	bl	80004d8 <__aeabi_dmul>
 800b266:	2200      	movs	r2, #0
 800b268:	2300      	movs	r3, #0
 800b26a:	4680      	mov	r8, r0
 800b26c:	4689      	mov	r9, r1
 800b26e:	f7f5 fb9b 	bl	80009a8 <__aeabi_dcmpeq>
 800b272:	2800      	cmp	r0, #0
 800b274:	d09b      	beq.n	800b1ae <_dtoa_r+0x65e>
 800b276:	e7cd      	b.n	800b214 <_dtoa_r+0x6c4>
 800b278:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b27a:	2a00      	cmp	r2, #0
 800b27c:	f000 80d0 	beq.w	800b420 <_dtoa_r+0x8d0>
 800b280:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b282:	2a01      	cmp	r2, #1
 800b284:	f300 80ae 	bgt.w	800b3e4 <_dtoa_r+0x894>
 800b288:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b28a:	2a00      	cmp	r2, #0
 800b28c:	f000 80a6 	beq.w	800b3dc <_dtoa_r+0x88c>
 800b290:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b294:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b296:	9f06      	ldr	r7, [sp, #24]
 800b298:	9a06      	ldr	r2, [sp, #24]
 800b29a:	2101      	movs	r1, #1
 800b29c:	441a      	add	r2, r3
 800b29e:	9206      	str	r2, [sp, #24]
 800b2a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	441a      	add	r2, r3
 800b2a6:	9209      	str	r2, [sp, #36]	; 0x24
 800b2a8:	f000 fb5e 	bl	800b968 <__i2b>
 800b2ac:	4606      	mov	r6, r0
 800b2ae:	2f00      	cmp	r7, #0
 800b2b0:	dd0c      	ble.n	800b2cc <_dtoa_r+0x77c>
 800b2b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	dd09      	ble.n	800b2cc <_dtoa_r+0x77c>
 800b2b8:	42bb      	cmp	r3, r7
 800b2ba:	bfa8      	it	ge
 800b2bc:	463b      	movge	r3, r7
 800b2be:	9a06      	ldr	r2, [sp, #24]
 800b2c0:	1aff      	subs	r7, r7, r3
 800b2c2:	1ad2      	subs	r2, r2, r3
 800b2c4:	9206      	str	r2, [sp, #24]
 800b2c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2c8:	1ad3      	subs	r3, r2, r3
 800b2ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b2cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2ce:	b1f3      	cbz	r3, 800b30e <_dtoa_r+0x7be>
 800b2d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f000 80a8 	beq.w	800b428 <_dtoa_r+0x8d8>
 800b2d8:	2c00      	cmp	r4, #0
 800b2da:	dd10      	ble.n	800b2fe <_dtoa_r+0x7ae>
 800b2dc:	4631      	mov	r1, r6
 800b2de:	4622      	mov	r2, r4
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	f000 fbff 	bl	800bae4 <__pow5mult>
 800b2e6:	465a      	mov	r2, fp
 800b2e8:	4601      	mov	r1, r0
 800b2ea:	4606      	mov	r6, r0
 800b2ec:	4628      	mov	r0, r5
 800b2ee:	f000 fb51 	bl	800b994 <__multiply>
 800b2f2:	4680      	mov	r8, r0
 800b2f4:	4659      	mov	r1, fp
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	f000 fa80 	bl	800b7fc <_Bfree>
 800b2fc:	46c3      	mov	fp, r8
 800b2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b300:	1b1a      	subs	r2, r3, r4
 800b302:	d004      	beq.n	800b30e <_dtoa_r+0x7be>
 800b304:	4659      	mov	r1, fp
 800b306:	4628      	mov	r0, r5
 800b308:	f000 fbec 	bl	800bae4 <__pow5mult>
 800b30c:	4683      	mov	fp, r0
 800b30e:	2101      	movs	r1, #1
 800b310:	4628      	mov	r0, r5
 800b312:	f000 fb29 	bl	800b968 <__i2b>
 800b316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b318:	4604      	mov	r4, r0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	f340 8086 	ble.w	800b42c <_dtoa_r+0x8dc>
 800b320:	461a      	mov	r2, r3
 800b322:	4601      	mov	r1, r0
 800b324:	4628      	mov	r0, r5
 800b326:	f000 fbdd 	bl	800bae4 <__pow5mult>
 800b32a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b32c:	4604      	mov	r4, r0
 800b32e:	2b01      	cmp	r3, #1
 800b330:	dd7f      	ble.n	800b432 <_dtoa_r+0x8e2>
 800b332:	f04f 0800 	mov.w	r8, #0
 800b336:	6923      	ldr	r3, [r4, #16]
 800b338:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b33c:	6918      	ldr	r0, [r3, #16]
 800b33e:	f000 fac5 	bl	800b8cc <__hi0bits>
 800b342:	f1c0 0020 	rsb	r0, r0, #32
 800b346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b348:	4418      	add	r0, r3
 800b34a:	f010 001f 	ands.w	r0, r0, #31
 800b34e:	f000 8092 	beq.w	800b476 <_dtoa_r+0x926>
 800b352:	f1c0 0320 	rsb	r3, r0, #32
 800b356:	2b04      	cmp	r3, #4
 800b358:	f340 808a 	ble.w	800b470 <_dtoa_r+0x920>
 800b35c:	f1c0 001c 	rsb	r0, r0, #28
 800b360:	9b06      	ldr	r3, [sp, #24]
 800b362:	4407      	add	r7, r0
 800b364:	4403      	add	r3, r0
 800b366:	9306      	str	r3, [sp, #24]
 800b368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b36a:	4403      	add	r3, r0
 800b36c:	9309      	str	r3, [sp, #36]	; 0x24
 800b36e:	9b06      	ldr	r3, [sp, #24]
 800b370:	2b00      	cmp	r3, #0
 800b372:	dd05      	ble.n	800b380 <_dtoa_r+0x830>
 800b374:	4659      	mov	r1, fp
 800b376:	461a      	mov	r2, r3
 800b378:	4628      	mov	r0, r5
 800b37a:	f000 fc0d 	bl	800bb98 <__lshift>
 800b37e:	4683      	mov	fp, r0
 800b380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b382:	2b00      	cmp	r3, #0
 800b384:	dd05      	ble.n	800b392 <_dtoa_r+0x842>
 800b386:	4621      	mov	r1, r4
 800b388:	461a      	mov	r2, r3
 800b38a:	4628      	mov	r0, r5
 800b38c:	f000 fc04 	bl	800bb98 <__lshift>
 800b390:	4604      	mov	r4, r0
 800b392:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b394:	2b00      	cmp	r3, #0
 800b396:	d070      	beq.n	800b47a <_dtoa_r+0x92a>
 800b398:	4621      	mov	r1, r4
 800b39a:	4658      	mov	r0, fp
 800b39c:	f000 fc6c 	bl	800bc78 <__mcmp>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	da6a      	bge.n	800b47a <_dtoa_r+0x92a>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	4659      	mov	r1, fp
 800b3a8:	220a      	movs	r2, #10
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	f000 fa48 	bl	800b840 <__multadd>
 800b3b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3b2:	4683      	mov	fp, r0
 800b3b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	f000 8194 	beq.w	800b6e6 <_dtoa_r+0xb96>
 800b3be:	4631      	mov	r1, r6
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	220a      	movs	r2, #10
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	f000 fa3b 	bl	800b840 <__multadd>
 800b3ca:	f1b9 0f00 	cmp.w	r9, #0
 800b3ce:	4606      	mov	r6, r0
 800b3d0:	f300 8093 	bgt.w	800b4fa <_dtoa_r+0x9aa>
 800b3d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b3d6:	2b02      	cmp	r3, #2
 800b3d8:	dc57      	bgt.n	800b48a <_dtoa_r+0x93a>
 800b3da:	e08e      	b.n	800b4fa <_dtoa_r+0x9aa>
 800b3dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b3de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b3e2:	e757      	b.n	800b294 <_dtoa_r+0x744>
 800b3e4:	9b08      	ldr	r3, [sp, #32]
 800b3e6:	1e5c      	subs	r4, r3, #1
 800b3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3ea:	42a3      	cmp	r3, r4
 800b3ec:	bfb7      	itett	lt
 800b3ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b3f0:	1b1c      	subge	r4, r3, r4
 800b3f2:	1ae2      	sublt	r2, r4, r3
 800b3f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b3f6:	bfbe      	ittt	lt
 800b3f8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b3fa:	189b      	addlt	r3, r3, r2
 800b3fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b3fe:	9b08      	ldr	r3, [sp, #32]
 800b400:	bfb8      	it	lt
 800b402:	2400      	movlt	r4, #0
 800b404:	2b00      	cmp	r3, #0
 800b406:	bfbb      	ittet	lt
 800b408:	9b06      	ldrlt	r3, [sp, #24]
 800b40a:	9a08      	ldrlt	r2, [sp, #32]
 800b40c:	9f06      	ldrge	r7, [sp, #24]
 800b40e:	1a9f      	sublt	r7, r3, r2
 800b410:	bfac      	ite	ge
 800b412:	9b08      	ldrge	r3, [sp, #32]
 800b414:	2300      	movlt	r3, #0
 800b416:	e73f      	b.n	800b298 <_dtoa_r+0x748>
 800b418:	3fe00000 	.word	0x3fe00000
 800b41c:	40240000 	.word	0x40240000
 800b420:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b422:	9f06      	ldr	r7, [sp, #24]
 800b424:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b426:	e742      	b.n	800b2ae <_dtoa_r+0x75e>
 800b428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b42a:	e76b      	b.n	800b304 <_dtoa_r+0x7b4>
 800b42c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b42e:	2b01      	cmp	r3, #1
 800b430:	dc19      	bgt.n	800b466 <_dtoa_r+0x916>
 800b432:	9b04      	ldr	r3, [sp, #16]
 800b434:	b9bb      	cbnz	r3, 800b466 <_dtoa_r+0x916>
 800b436:	9b05      	ldr	r3, [sp, #20]
 800b438:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b43c:	b99b      	cbnz	r3, 800b466 <_dtoa_r+0x916>
 800b43e:	9b05      	ldr	r3, [sp, #20]
 800b440:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b444:	0d1b      	lsrs	r3, r3, #20
 800b446:	051b      	lsls	r3, r3, #20
 800b448:	b183      	cbz	r3, 800b46c <_dtoa_r+0x91c>
 800b44a:	f04f 0801 	mov.w	r8, #1
 800b44e:	9b06      	ldr	r3, [sp, #24]
 800b450:	3301      	adds	r3, #1
 800b452:	9306      	str	r3, [sp, #24]
 800b454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b456:	3301      	adds	r3, #1
 800b458:	9309      	str	r3, [sp, #36]	; 0x24
 800b45a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	f47f af6a 	bne.w	800b336 <_dtoa_r+0x7e6>
 800b462:	2001      	movs	r0, #1
 800b464:	e76f      	b.n	800b346 <_dtoa_r+0x7f6>
 800b466:	f04f 0800 	mov.w	r8, #0
 800b46a:	e7f6      	b.n	800b45a <_dtoa_r+0x90a>
 800b46c:	4698      	mov	r8, r3
 800b46e:	e7f4      	b.n	800b45a <_dtoa_r+0x90a>
 800b470:	f43f af7d 	beq.w	800b36e <_dtoa_r+0x81e>
 800b474:	4618      	mov	r0, r3
 800b476:	301c      	adds	r0, #28
 800b478:	e772      	b.n	800b360 <_dtoa_r+0x810>
 800b47a:	9b08      	ldr	r3, [sp, #32]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	dc36      	bgt.n	800b4ee <_dtoa_r+0x99e>
 800b480:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b482:	2b02      	cmp	r3, #2
 800b484:	dd33      	ble.n	800b4ee <_dtoa_r+0x99e>
 800b486:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b48a:	f1b9 0f00 	cmp.w	r9, #0
 800b48e:	d10d      	bne.n	800b4ac <_dtoa_r+0x95c>
 800b490:	4621      	mov	r1, r4
 800b492:	464b      	mov	r3, r9
 800b494:	2205      	movs	r2, #5
 800b496:	4628      	mov	r0, r5
 800b498:	f000 f9d2 	bl	800b840 <__multadd>
 800b49c:	4601      	mov	r1, r0
 800b49e:	4604      	mov	r4, r0
 800b4a0:	4658      	mov	r0, fp
 800b4a2:	f000 fbe9 	bl	800bc78 <__mcmp>
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	f73f adb8 	bgt.w	800b01c <_dtoa_r+0x4cc>
 800b4ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b4ae:	9f03      	ldr	r7, [sp, #12]
 800b4b0:	ea6f 0a03 	mvn.w	sl, r3
 800b4b4:	f04f 0800 	mov.w	r8, #0
 800b4b8:	4621      	mov	r1, r4
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	f000 f99e 	bl	800b7fc <_Bfree>
 800b4c0:	2e00      	cmp	r6, #0
 800b4c2:	f43f aea7 	beq.w	800b214 <_dtoa_r+0x6c4>
 800b4c6:	f1b8 0f00 	cmp.w	r8, #0
 800b4ca:	d005      	beq.n	800b4d8 <_dtoa_r+0x988>
 800b4cc:	45b0      	cmp	r8, r6
 800b4ce:	d003      	beq.n	800b4d8 <_dtoa_r+0x988>
 800b4d0:	4641      	mov	r1, r8
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	f000 f992 	bl	800b7fc <_Bfree>
 800b4d8:	4631      	mov	r1, r6
 800b4da:	4628      	mov	r0, r5
 800b4dc:	f000 f98e 	bl	800b7fc <_Bfree>
 800b4e0:	e698      	b.n	800b214 <_dtoa_r+0x6c4>
 800b4e2:	2400      	movs	r4, #0
 800b4e4:	4626      	mov	r6, r4
 800b4e6:	e7e1      	b.n	800b4ac <_dtoa_r+0x95c>
 800b4e8:	46c2      	mov	sl, r8
 800b4ea:	4626      	mov	r6, r4
 800b4ec:	e596      	b.n	800b01c <_dtoa_r+0x4cc>
 800b4ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f000 80fd 	beq.w	800b6f4 <_dtoa_r+0xba4>
 800b4fa:	2f00      	cmp	r7, #0
 800b4fc:	dd05      	ble.n	800b50a <_dtoa_r+0x9ba>
 800b4fe:	4631      	mov	r1, r6
 800b500:	463a      	mov	r2, r7
 800b502:	4628      	mov	r0, r5
 800b504:	f000 fb48 	bl	800bb98 <__lshift>
 800b508:	4606      	mov	r6, r0
 800b50a:	f1b8 0f00 	cmp.w	r8, #0
 800b50e:	d05c      	beq.n	800b5ca <_dtoa_r+0xa7a>
 800b510:	4628      	mov	r0, r5
 800b512:	6871      	ldr	r1, [r6, #4]
 800b514:	f000 f932 	bl	800b77c <_Balloc>
 800b518:	4607      	mov	r7, r0
 800b51a:	b928      	cbnz	r0, 800b528 <_dtoa_r+0x9d8>
 800b51c:	4602      	mov	r2, r0
 800b51e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b522:	4b7f      	ldr	r3, [pc, #508]	; (800b720 <_dtoa_r+0xbd0>)
 800b524:	f7ff bb28 	b.w	800ab78 <_dtoa_r+0x28>
 800b528:	6932      	ldr	r2, [r6, #16]
 800b52a:	f106 010c 	add.w	r1, r6, #12
 800b52e:	3202      	adds	r2, #2
 800b530:	0092      	lsls	r2, r2, #2
 800b532:	300c      	adds	r0, #12
 800b534:	f000 f914 	bl	800b760 <memcpy>
 800b538:	2201      	movs	r2, #1
 800b53a:	4639      	mov	r1, r7
 800b53c:	4628      	mov	r0, r5
 800b53e:	f000 fb2b 	bl	800bb98 <__lshift>
 800b542:	46b0      	mov	r8, r6
 800b544:	4606      	mov	r6, r0
 800b546:	9b03      	ldr	r3, [sp, #12]
 800b548:	3301      	adds	r3, #1
 800b54a:	9308      	str	r3, [sp, #32]
 800b54c:	9b03      	ldr	r3, [sp, #12]
 800b54e:	444b      	add	r3, r9
 800b550:	930a      	str	r3, [sp, #40]	; 0x28
 800b552:	9b04      	ldr	r3, [sp, #16]
 800b554:	f003 0301 	and.w	r3, r3, #1
 800b558:	9309      	str	r3, [sp, #36]	; 0x24
 800b55a:	9b08      	ldr	r3, [sp, #32]
 800b55c:	4621      	mov	r1, r4
 800b55e:	3b01      	subs	r3, #1
 800b560:	4658      	mov	r0, fp
 800b562:	9304      	str	r3, [sp, #16]
 800b564:	f7ff fa68 	bl	800aa38 <quorem>
 800b568:	4603      	mov	r3, r0
 800b56a:	4641      	mov	r1, r8
 800b56c:	3330      	adds	r3, #48	; 0x30
 800b56e:	9006      	str	r0, [sp, #24]
 800b570:	4658      	mov	r0, fp
 800b572:	930b      	str	r3, [sp, #44]	; 0x2c
 800b574:	f000 fb80 	bl	800bc78 <__mcmp>
 800b578:	4632      	mov	r2, r6
 800b57a:	4681      	mov	r9, r0
 800b57c:	4621      	mov	r1, r4
 800b57e:	4628      	mov	r0, r5
 800b580:	f000 fb96 	bl	800bcb0 <__mdiff>
 800b584:	68c2      	ldr	r2, [r0, #12]
 800b586:	4607      	mov	r7, r0
 800b588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b58a:	bb02      	cbnz	r2, 800b5ce <_dtoa_r+0xa7e>
 800b58c:	4601      	mov	r1, r0
 800b58e:	4658      	mov	r0, fp
 800b590:	f000 fb72 	bl	800bc78 <__mcmp>
 800b594:	4602      	mov	r2, r0
 800b596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b598:	4639      	mov	r1, r7
 800b59a:	4628      	mov	r0, r5
 800b59c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b5a0:	f000 f92c 	bl	800b7fc <_Bfree>
 800b5a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5a8:	9f08      	ldr	r7, [sp, #32]
 800b5aa:	ea43 0102 	orr.w	r1, r3, r2
 800b5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b0:	430b      	orrs	r3, r1
 800b5b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5b4:	d10d      	bne.n	800b5d2 <_dtoa_r+0xa82>
 800b5b6:	2b39      	cmp	r3, #57	; 0x39
 800b5b8:	d029      	beq.n	800b60e <_dtoa_r+0xabe>
 800b5ba:	f1b9 0f00 	cmp.w	r9, #0
 800b5be:	dd01      	ble.n	800b5c4 <_dtoa_r+0xa74>
 800b5c0:	9b06      	ldr	r3, [sp, #24]
 800b5c2:	3331      	adds	r3, #49	; 0x31
 800b5c4:	9a04      	ldr	r2, [sp, #16]
 800b5c6:	7013      	strb	r3, [r2, #0]
 800b5c8:	e776      	b.n	800b4b8 <_dtoa_r+0x968>
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	e7b9      	b.n	800b542 <_dtoa_r+0x9f2>
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	e7e2      	b.n	800b598 <_dtoa_r+0xa48>
 800b5d2:	f1b9 0f00 	cmp.w	r9, #0
 800b5d6:	db06      	blt.n	800b5e6 <_dtoa_r+0xa96>
 800b5d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b5da:	ea41 0909 	orr.w	r9, r1, r9
 800b5de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5e0:	ea59 0101 	orrs.w	r1, r9, r1
 800b5e4:	d120      	bne.n	800b628 <_dtoa_r+0xad8>
 800b5e6:	2a00      	cmp	r2, #0
 800b5e8:	ddec      	ble.n	800b5c4 <_dtoa_r+0xa74>
 800b5ea:	4659      	mov	r1, fp
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	9308      	str	r3, [sp, #32]
 800b5f2:	f000 fad1 	bl	800bb98 <__lshift>
 800b5f6:	4621      	mov	r1, r4
 800b5f8:	4683      	mov	fp, r0
 800b5fa:	f000 fb3d 	bl	800bc78 <__mcmp>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	9b08      	ldr	r3, [sp, #32]
 800b602:	dc02      	bgt.n	800b60a <_dtoa_r+0xaba>
 800b604:	d1de      	bne.n	800b5c4 <_dtoa_r+0xa74>
 800b606:	07da      	lsls	r2, r3, #31
 800b608:	d5dc      	bpl.n	800b5c4 <_dtoa_r+0xa74>
 800b60a:	2b39      	cmp	r3, #57	; 0x39
 800b60c:	d1d8      	bne.n	800b5c0 <_dtoa_r+0xa70>
 800b60e:	2339      	movs	r3, #57	; 0x39
 800b610:	9a04      	ldr	r2, [sp, #16]
 800b612:	7013      	strb	r3, [r2, #0]
 800b614:	463b      	mov	r3, r7
 800b616:	461f      	mov	r7, r3
 800b618:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b61c:	3b01      	subs	r3, #1
 800b61e:	2a39      	cmp	r2, #57	; 0x39
 800b620:	d050      	beq.n	800b6c4 <_dtoa_r+0xb74>
 800b622:	3201      	adds	r2, #1
 800b624:	701a      	strb	r2, [r3, #0]
 800b626:	e747      	b.n	800b4b8 <_dtoa_r+0x968>
 800b628:	2a00      	cmp	r2, #0
 800b62a:	dd03      	ble.n	800b634 <_dtoa_r+0xae4>
 800b62c:	2b39      	cmp	r3, #57	; 0x39
 800b62e:	d0ee      	beq.n	800b60e <_dtoa_r+0xabe>
 800b630:	3301      	adds	r3, #1
 800b632:	e7c7      	b.n	800b5c4 <_dtoa_r+0xa74>
 800b634:	9a08      	ldr	r2, [sp, #32]
 800b636:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b638:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b63c:	428a      	cmp	r2, r1
 800b63e:	d02a      	beq.n	800b696 <_dtoa_r+0xb46>
 800b640:	4659      	mov	r1, fp
 800b642:	2300      	movs	r3, #0
 800b644:	220a      	movs	r2, #10
 800b646:	4628      	mov	r0, r5
 800b648:	f000 f8fa 	bl	800b840 <__multadd>
 800b64c:	45b0      	cmp	r8, r6
 800b64e:	4683      	mov	fp, r0
 800b650:	f04f 0300 	mov.w	r3, #0
 800b654:	f04f 020a 	mov.w	r2, #10
 800b658:	4641      	mov	r1, r8
 800b65a:	4628      	mov	r0, r5
 800b65c:	d107      	bne.n	800b66e <_dtoa_r+0xb1e>
 800b65e:	f000 f8ef 	bl	800b840 <__multadd>
 800b662:	4680      	mov	r8, r0
 800b664:	4606      	mov	r6, r0
 800b666:	9b08      	ldr	r3, [sp, #32]
 800b668:	3301      	adds	r3, #1
 800b66a:	9308      	str	r3, [sp, #32]
 800b66c:	e775      	b.n	800b55a <_dtoa_r+0xa0a>
 800b66e:	f000 f8e7 	bl	800b840 <__multadd>
 800b672:	4631      	mov	r1, r6
 800b674:	4680      	mov	r8, r0
 800b676:	2300      	movs	r3, #0
 800b678:	220a      	movs	r2, #10
 800b67a:	4628      	mov	r0, r5
 800b67c:	f000 f8e0 	bl	800b840 <__multadd>
 800b680:	4606      	mov	r6, r0
 800b682:	e7f0      	b.n	800b666 <_dtoa_r+0xb16>
 800b684:	f1b9 0f00 	cmp.w	r9, #0
 800b688:	bfcc      	ite	gt
 800b68a:	464f      	movgt	r7, r9
 800b68c:	2701      	movle	r7, #1
 800b68e:	f04f 0800 	mov.w	r8, #0
 800b692:	9a03      	ldr	r2, [sp, #12]
 800b694:	4417      	add	r7, r2
 800b696:	4659      	mov	r1, fp
 800b698:	2201      	movs	r2, #1
 800b69a:	4628      	mov	r0, r5
 800b69c:	9308      	str	r3, [sp, #32]
 800b69e:	f000 fa7b 	bl	800bb98 <__lshift>
 800b6a2:	4621      	mov	r1, r4
 800b6a4:	4683      	mov	fp, r0
 800b6a6:	f000 fae7 	bl	800bc78 <__mcmp>
 800b6aa:	2800      	cmp	r0, #0
 800b6ac:	dcb2      	bgt.n	800b614 <_dtoa_r+0xac4>
 800b6ae:	d102      	bne.n	800b6b6 <_dtoa_r+0xb66>
 800b6b0:	9b08      	ldr	r3, [sp, #32]
 800b6b2:	07db      	lsls	r3, r3, #31
 800b6b4:	d4ae      	bmi.n	800b614 <_dtoa_r+0xac4>
 800b6b6:	463b      	mov	r3, r7
 800b6b8:	461f      	mov	r7, r3
 800b6ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6be:	2a30      	cmp	r2, #48	; 0x30
 800b6c0:	d0fa      	beq.n	800b6b8 <_dtoa_r+0xb68>
 800b6c2:	e6f9      	b.n	800b4b8 <_dtoa_r+0x968>
 800b6c4:	9a03      	ldr	r2, [sp, #12]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d1a5      	bne.n	800b616 <_dtoa_r+0xac6>
 800b6ca:	2331      	movs	r3, #49	; 0x31
 800b6cc:	f10a 0a01 	add.w	sl, sl, #1
 800b6d0:	e779      	b.n	800b5c6 <_dtoa_r+0xa76>
 800b6d2:	4b14      	ldr	r3, [pc, #80]	; (800b724 <_dtoa_r+0xbd4>)
 800b6d4:	f7ff baa8 	b.w	800ac28 <_dtoa_r+0xd8>
 800b6d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	f47f aa81 	bne.w	800abe2 <_dtoa_r+0x92>
 800b6e0:	4b11      	ldr	r3, [pc, #68]	; (800b728 <_dtoa_r+0xbd8>)
 800b6e2:	f7ff baa1 	b.w	800ac28 <_dtoa_r+0xd8>
 800b6e6:	f1b9 0f00 	cmp.w	r9, #0
 800b6ea:	dc03      	bgt.n	800b6f4 <_dtoa_r+0xba4>
 800b6ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b6ee:	2b02      	cmp	r3, #2
 800b6f0:	f73f aecb 	bgt.w	800b48a <_dtoa_r+0x93a>
 800b6f4:	9f03      	ldr	r7, [sp, #12]
 800b6f6:	4621      	mov	r1, r4
 800b6f8:	4658      	mov	r0, fp
 800b6fa:	f7ff f99d 	bl	800aa38 <quorem>
 800b6fe:	9a03      	ldr	r2, [sp, #12]
 800b700:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b704:	f807 3b01 	strb.w	r3, [r7], #1
 800b708:	1aba      	subs	r2, r7, r2
 800b70a:	4591      	cmp	r9, r2
 800b70c:	ddba      	ble.n	800b684 <_dtoa_r+0xb34>
 800b70e:	4659      	mov	r1, fp
 800b710:	2300      	movs	r3, #0
 800b712:	220a      	movs	r2, #10
 800b714:	4628      	mov	r0, r5
 800b716:	f000 f893 	bl	800b840 <__multadd>
 800b71a:	4683      	mov	fp, r0
 800b71c:	e7eb      	b.n	800b6f6 <_dtoa_r+0xba6>
 800b71e:	bf00      	nop
 800b720:	0800d087 	.word	0x0800d087
 800b724:	0800cfe4 	.word	0x0800cfe4
 800b728:	0800d008 	.word	0x0800d008

0800b72c <_localeconv_r>:
 800b72c:	4800      	ldr	r0, [pc, #0]	; (800b730 <_localeconv_r+0x4>)
 800b72e:	4770      	bx	lr
 800b730:	200001e0 	.word	0x200001e0

0800b734 <malloc>:
 800b734:	4b02      	ldr	r3, [pc, #8]	; (800b740 <malloc+0xc>)
 800b736:	4601      	mov	r1, r0
 800b738:	6818      	ldr	r0, [r3, #0]
 800b73a:	f000 bc1d 	b.w	800bf78 <_malloc_r>
 800b73e:	bf00      	nop
 800b740:	2000008c 	.word	0x2000008c

0800b744 <memchr>:
 800b744:	4603      	mov	r3, r0
 800b746:	b510      	push	{r4, lr}
 800b748:	b2c9      	uxtb	r1, r1
 800b74a:	4402      	add	r2, r0
 800b74c:	4293      	cmp	r3, r2
 800b74e:	4618      	mov	r0, r3
 800b750:	d101      	bne.n	800b756 <memchr+0x12>
 800b752:	2000      	movs	r0, #0
 800b754:	e003      	b.n	800b75e <memchr+0x1a>
 800b756:	7804      	ldrb	r4, [r0, #0]
 800b758:	3301      	adds	r3, #1
 800b75a:	428c      	cmp	r4, r1
 800b75c:	d1f6      	bne.n	800b74c <memchr+0x8>
 800b75e:	bd10      	pop	{r4, pc}

0800b760 <memcpy>:
 800b760:	440a      	add	r2, r1
 800b762:	4291      	cmp	r1, r2
 800b764:	f100 33ff 	add.w	r3, r0, #4294967295
 800b768:	d100      	bne.n	800b76c <memcpy+0xc>
 800b76a:	4770      	bx	lr
 800b76c:	b510      	push	{r4, lr}
 800b76e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b772:	4291      	cmp	r1, r2
 800b774:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b778:	d1f9      	bne.n	800b76e <memcpy+0xe>
 800b77a:	bd10      	pop	{r4, pc}

0800b77c <_Balloc>:
 800b77c:	b570      	push	{r4, r5, r6, lr}
 800b77e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b780:	4604      	mov	r4, r0
 800b782:	460d      	mov	r5, r1
 800b784:	b976      	cbnz	r6, 800b7a4 <_Balloc+0x28>
 800b786:	2010      	movs	r0, #16
 800b788:	f7ff ffd4 	bl	800b734 <malloc>
 800b78c:	4602      	mov	r2, r0
 800b78e:	6260      	str	r0, [r4, #36]	; 0x24
 800b790:	b920      	cbnz	r0, 800b79c <_Balloc+0x20>
 800b792:	2166      	movs	r1, #102	; 0x66
 800b794:	4b17      	ldr	r3, [pc, #92]	; (800b7f4 <_Balloc+0x78>)
 800b796:	4818      	ldr	r0, [pc, #96]	; (800b7f8 <_Balloc+0x7c>)
 800b798:	f000 fdce 	bl	800c338 <__assert_func>
 800b79c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7a0:	6006      	str	r6, [r0, #0]
 800b7a2:	60c6      	str	r6, [r0, #12]
 800b7a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b7a6:	68f3      	ldr	r3, [r6, #12]
 800b7a8:	b183      	cbz	r3, 800b7cc <_Balloc+0x50>
 800b7aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7ac:	68db      	ldr	r3, [r3, #12]
 800b7ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b7b2:	b9b8      	cbnz	r0, 800b7e4 <_Balloc+0x68>
 800b7b4:	2101      	movs	r1, #1
 800b7b6:	fa01 f605 	lsl.w	r6, r1, r5
 800b7ba:	1d72      	adds	r2, r6, #5
 800b7bc:	4620      	mov	r0, r4
 800b7be:	0092      	lsls	r2, r2, #2
 800b7c0:	f000 fb5e 	bl	800be80 <_calloc_r>
 800b7c4:	b160      	cbz	r0, 800b7e0 <_Balloc+0x64>
 800b7c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7ca:	e00e      	b.n	800b7ea <_Balloc+0x6e>
 800b7cc:	2221      	movs	r2, #33	; 0x21
 800b7ce:	2104      	movs	r1, #4
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	f000 fb55 	bl	800be80 <_calloc_r>
 800b7d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7d8:	60f0      	str	r0, [r6, #12]
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d1e4      	bne.n	800b7aa <_Balloc+0x2e>
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	bd70      	pop	{r4, r5, r6, pc}
 800b7e4:	6802      	ldr	r2, [r0, #0]
 800b7e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7f0:	e7f7      	b.n	800b7e2 <_Balloc+0x66>
 800b7f2:	bf00      	nop
 800b7f4:	0800d015 	.word	0x0800d015
 800b7f8:	0800d098 	.word	0x0800d098

0800b7fc <_Bfree>:
 800b7fc:	b570      	push	{r4, r5, r6, lr}
 800b7fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b800:	4605      	mov	r5, r0
 800b802:	460c      	mov	r4, r1
 800b804:	b976      	cbnz	r6, 800b824 <_Bfree+0x28>
 800b806:	2010      	movs	r0, #16
 800b808:	f7ff ff94 	bl	800b734 <malloc>
 800b80c:	4602      	mov	r2, r0
 800b80e:	6268      	str	r0, [r5, #36]	; 0x24
 800b810:	b920      	cbnz	r0, 800b81c <_Bfree+0x20>
 800b812:	218a      	movs	r1, #138	; 0x8a
 800b814:	4b08      	ldr	r3, [pc, #32]	; (800b838 <_Bfree+0x3c>)
 800b816:	4809      	ldr	r0, [pc, #36]	; (800b83c <_Bfree+0x40>)
 800b818:	f000 fd8e 	bl	800c338 <__assert_func>
 800b81c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b820:	6006      	str	r6, [r0, #0]
 800b822:	60c6      	str	r6, [r0, #12]
 800b824:	b13c      	cbz	r4, 800b836 <_Bfree+0x3a>
 800b826:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b828:	6862      	ldr	r2, [r4, #4]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b830:	6021      	str	r1, [r4, #0]
 800b832:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b836:	bd70      	pop	{r4, r5, r6, pc}
 800b838:	0800d015 	.word	0x0800d015
 800b83c:	0800d098 	.word	0x0800d098

0800b840 <__multadd>:
 800b840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b844:	4607      	mov	r7, r0
 800b846:	460c      	mov	r4, r1
 800b848:	461e      	mov	r6, r3
 800b84a:	2000      	movs	r0, #0
 800b84c:	690d      	ldr	r5, [r1, #16]
 800b84e:	f101 0c14 	add.w	ip, r1, #20
 800b852:	f8dc 3000 	ldr.w	r3, [ip]
 800b856:	3001      	adds	r0, #1
 800b858:	b299      	uxth	r1, r3
 800b85a:	fb02 6101 	mla	r1, r2, r1, r6
 800b85e:	0c1e      	lsrs	r6, r3, #16
 800b860:	0c0b      	lsrs	r3, r1, #16
 800b862:	fb02 3306 	mla	r3, r2, r6, r3
 800b866:	b289      	uxth	r1, r1
 800b868:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b86c:	4285      	cmp	r5, r0
 800b86e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b872:	f84c 1b04 	str.w	r1, [ip], #4
 800b876:	dcec      	bgt.n	800b852 <__multadd+0x12>
 800b878:	b30e      	cbz	r6, 800b8be <__multadd+0x7e>
 800b87a:	68a3      	ldr	r3, [r4, #8]
 800b87c:	42ab      	cmp	r3, r5
 800b87e:	dc19      	bgt.n	800b8b4 <__multadd+0x74>
 800b880:	6861      	ldr	r1, [r4, #4]
 800b882:	4638      	mov	r0, r7
 800b884:	3101      	adds	r1, #1
 800b886:	f7ff ff79 	bl	800b77c <_Balloc>
 800b88a:	4680      	mov	r8, r0
 800b88c:	b928      	cbnz	r0, 800b89a <__multadd+0x5a>
 800b88e:	4602      	mov	r2, r0
 800b890:	21b5      	movs	r1, #181	; 0xb5
 800b892:	4b0c      	ldr	r3, [pc, #48]	; (800b8c4 <__multadd+0x84>)
 800b894:	480c      	ldr	r0, [pc, #48]	; (800b8c8 <__multadd+0x88>)
 800b896:	f000 fd4f 	bl	800c338 <__assert_func>
 800b89a:	6922      	ldr	r2, [r4, #16]
 800b89c:	f104 010c 	add.w	r1, r4, #12
 800b8a0:	3202      	adds	r2, #2
 800b8a2:	0092      	lsls	r2, r2, #2
 800b8a4:	300c      	adds	r0, #12
 800b8a6:	f7ff ff5b 	bl	800b760 <memcpy>
 800b8aa:	4621      	mov	r1, r4
 800b8ac:	4638      	mov	r0, r7
 800b8ae:	f7ff ffa5 	bl	800b7fc <_Bfree>
 800b8b2:	4644      	mov	r4, r8
 800b8b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b8b8:	3501      	adds	r5, #1
 800b8ba:	615e      	str	r6, [r3, #20]
 800b8bc:	6125      	str	r5, [r4, #16]
 800b8be:	4620      	mov	r0, r4
 800b8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8c4:	0800d087 	.word	0x0800d087
 800b8c8:	0800d098 	.word	0x0800d098

0800b8cc <__hi0bits>:
 800b8cc:	0c02      	lsrs	r2, r0, #16
 800b8ce:	0412      	lsls	r2, r2, #16
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	b9ca      	cbnz	r2, 800b908 <__hi0bits+0x3c>
 800b8d4:	0403      	lsls	r3, r0, #16
 800b8d6:	2010      	movs	r0, #16
 800b8d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b8dc:	bf04      	itt	eq
 800b8de:	021b      	lsleq	r3, r3, #8
 800b8e0:	3008      	addeq	r0, #8
 800b8e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b8e6:	bf04      	itt	eq
 800b8e8:	011b      	lsleq	r3, r3, #4
 800b8ea:	3004      	addeq	r0, #4
 800b8ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b8f0:	bf04      	itt	eq
 800b8f2:	009b      	lsleq	r3, r3, #2
 800b8f4:	3002      	addeq	r0, #2
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	db05      	blt.n	800b906 <__hi0bits+0x3a>
 800b8fa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b8fe:	f100 0001 	add.w	r0, r0, #1
 800b902:	bf08      	it	eq
 800b904:	2020      	moveq	r0, #32
 800b906:	4770      	bx	lr
 800b908:	2000      	movs	r0, #0
 800b90a:	e7e5      	b.n	800b8d8 <__hi0bits+0xc>

0800b90c <__lo0bits>:
 800b90c:	6803      	ldr	r3, [r0, #0]
 800b90e:	4602      	mov	r2, r0
 800b910:	f013 0007 	ands.w	r0, r3, #7
 800b914:	d00b      	beq.n	800b92e <__lo0bits+0x22>
 800b916:	07d9      	lsls	r1, r3, #31
 800b918:	d421      	bmi.n	800b95e <__lo0bits+0x52>
 800b91a:	0798      	lsls	r0, r3, #30
 800b91c:	bf49      	itett	mi
 800b91e:	085b      	lsrmi	r3, r3, #1
 800b920:	089b      	lsrpl	r3, r3, #2
 800b922:	2001      	movmi	r0, #1
 800b924:	6013      	strmi	r3, [r2, #0]
 800b926:	bf5c      	itt	pl
 800b928:	2002      	movpl	r0, #2
 800b92a:	6013      	strpl	r3, [r2, #0]
 800b92c:	4770      	bx	lr
 800b92e:	b299      	uxth	r1, r3
 800b930:	b909      	cbnz	r1, 800b936 <__lo0bits+0x2a>
 800b932:	2010      	movs	r0, #16
 800b934:	0c1b      	lsrs	r3, r3, #16
 800b936:	b2d9      	uxtb	r1, r3
 800b938:	b909      	cbnz	r1, 800b93e <__lo0bits+0x32>
 800b93a:	3008      	adds	r0, #8
 800b93c:	0a1b      	lsrs	r3, r3, #8
 800b93e:	0719      	lsls	r1, r3, #28
 800b940:	bf04      	itt	eq
 800b942:	091b      	lsreq	r3, r3, #4
 800b944:	3004      	addeq	r0, #4
 800b946:	0799      	lsls	r1, r3, #30
 800b948:	bf04      	itt	eq
 800b94a:	089b      	lsreq	r3, r3, #2
 800b94c:	3002      	addeq	r0, #2
 800b94e:	07d9      	lsls	r1, r3, #31
 800b950:	d403      	bmi.n	800b95a <__lo0bits+0x4e>
 800b952:	085b      	lsrs	r3, r3, #1
 800b954:	f100 0001 	add.w	r0, r0, #1
 800b958:	d003      	beq.n	800b962 <__lo0bits+0x56>
 800b95a:	6013      	str	r3, [r2, #0]
 800b95c:	4770      	bx	lr
 800b95e:	2000      	movs	r0, #0
 800b960:	4770      	bx	lr
 800b962:	2020      	movs	r0, #32
 800b964:	4770      	bx	lr
	...

0800b968 <__i2b>:
 800b968:	b510      	push	{r4, lr}
 800b96a:	460c      	mov	r4, r1
 800b96c:	2101      	movs	r1, #1
 800b96e:	f7ff ff05 	bl	800b77c <_Balloc>
 800b972:	4602      	mov	r2, r0
 800b974:	b928      	cbnz	r0, 800b982 <__i2b+0x1a>
 800b976:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b97a:	4b04      	ldr	r3, [pc, #16]	; (800b98c <__i2b+0x24>)
 800b97c:	4804      	ldr	r0, [pc, #16]	; (800b990 <__i2b+0x28>)
 800b97e:	f000 fcdb 	bl	800c338 <__assert_func>
 800b982:	2301      	movs	r3, #1
 800b984:	6144      	str	r4, [r0, #20]
 800b986:	6103      	str	r3, [r0, #16]
 800b988:	bd10      	pop	{r4, pc}
 800b98a:	bf00      	nop
 800b98c:	0800d087 	.word	0x0800d087
 800b990:	0800d098 	.word	0x0800d098

0800b994 <__multiply>:
 800b994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b998:	4691      	mov	r9, r2
 800b99a:	690a      	ldr	r2, [r1, #16]
 800b99c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b9a0:	460c      	mov	r4, r1
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	bfbe      	ittt	lt
 800b9a6:	460b      	movlt	r3, r1
 800b9a8:	464c      	movlt	r4, r9
 800b9aa:	4699      	movlt	r9, r3
 800b9ac:	6927      	ldr	r7, [r4, #16]
 800b9ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b9b2:	68a3      	ldr	r3, [r4, #8]
 800b9b4:	6861      	ldr	r1, [r4, #4]
 800b9b6:	eb07 060a 	add.w	r6, r7, sl
 800b9ba:	42b3      	cmp	r3, r6
 800b9bc:	b085      	sub	sp, #20
 800b9be:	bfb8      	it	lt
 800b9c0:	3101      	addlt	r1, #1
 800b9c2:	f7ff fedb 	bl	800b77c <_Balloc>
 800b9c6:	b930      	cbnz	r0, 800b9d6 <__multiply+0x42>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	f240 115d 	movw	r1, #349	; 0x15d
 800b9ce:	4b43      	ldr	r3, [pc, #268]	; (800badc <__multiply+0x148>)
 800b9d0:	4843      	ldr	r0, [pc, #268]	; (800bae0 <__multiply+0x14c>)
 800b9d2:	f000 fcb1 	bl	800c338 <__assert_func>
 800b9d6:	f100 0514 	add.w	r5, r0, #20
 800b9da:	462b      	mov	r3, r5
 800b9dc:	2200      	movs	r2, #0
 800b9de:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b9e2:	4543      	cmp	r3, r8
 800b9e4:	d321      	bcc.n	800ba2a <__multiply+0x96>
 800b9e6:	f104 0314 	add.w	r3, r4, #20
 800b9ea:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b9ee:	f109 0314 	add.w	r3, r9, #20
 800b9f2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b9f6:	9202      	str	r2, [sp, #8]
 800b9f8:	1b3a      	subs	r2, r7, r4
 800b9fa:	3a15      	subs	r2, #21
 800b9fc:	f022 0203 	bic.w	r2, r2, #3
 800ba00:	3204      	adds	r2, #4
 800ba02:	f104 0115 	add.w	r1, r4, #21
 800ba06:	428f      	cmp	r7, r1
 800ba08:	bf38      	it	cc
 800ba0a:	2204      	movcc	r2, #4
 800ba0c:	9201      	str	r2, [sp, #4]
 800ba0e:	9a02      	ldr	r2, [sp, #8]
 800ba10:	9303      	str	r3, [sp, #12]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d80c      	bhi.n	800ba30 <__multiply+0x9c>
 800ba16:	2e00      	cmp	r6, #0
 800ba18:	dd03      	ble.n	800ba22 <__multiply+0x8e>
 800ba1a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d059      	beq.n	800bad6 <__multiply+0x142>
 800ba22:	6106      	str	r6, [r0, #16]
 800ba24:	b005      	add	sp, #20
 800ba26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba2a:	f843 2b04 	str.w	r2, [r3], #4
 800ba2e:	e7d8      	b.n	800b9e2 <__multiply+0x4e>
 800ba30:	f8b3 a000 	ldrh.w	sl, [r3]
 800ba34:	f1ba 0f00 	cmp.w	sl, #0
 800ba38:	d023      	beq.n	800ba82 <__multiply+0xee>
 800ba3a:	46a9      	mov	r9, r5
 800ba3c:	f04f 0c00 	mov.w	ip, #0
 800ba40:	f104 0e14 	add.w	lr, r4, #20
 800ba44:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ba48:	f8d9 1000 	ldr.w	r1, [r9]
 800ba4c:	fa1f fb82 	uxth.w	fp, r2
 800ba50:	b289      	uxth	r1, r1
 800ba52:	fb0a 110b 	mla	r1, sl, fp, r1
 800ba56:	4461      	add	r1, ip
 800ba58:	f8d9 c000 	ldr.w	ip, [r9]
 800ba5c:	0c12      	lsrs	r2, r2, #16
 800ba5e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ba62:	fb0a c202 	mla	r2, sl, r2, ip
 800ba66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ba6a:	b289      	uxth	r1, r1
 800ba6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ba70:	4577      	cmp	r7, lr
 800ba72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba76:	f849 1b04 	str.w	r1, [r9], #4
 800ba7a:	d8e3      	bhi.n	800ba44 <__multiply+0xb0>
 800ba7c:	9a01      	ldr	r2, [sp, #4]
 800ba7e:	f845 c002 	str.w	ip, [r5, r2]
 800ba82:	9a03      	ldr	r2, [sp, #12]
 800ba84:	3304      	adds	r3, #4
 800ba86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ba8a:	f1b9 0f00 	cmp.w	r9, #0
 800ba8e:	d020      	beq.n	800bad2 <__multiply+0x13e>
 800ba90:	46ae      	mov	lr, r5
 800ba92:	f04f 0a00 	mov.w	sl, #0
 800ba96:	6829      	ldr	r1, [r5, #0]
 800ba98:	f104 0c14 	add.w	ip, r4, #20
 800ba9c:	f8bc b000 	ldrh.w	fp, [ip]
 800baa0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800baa4:	b289      	uxth	r1, r1
 800baa6:	fb09 220b 	mla	r2, r9, fp, r2
 800baaa:	4492      	add	sl, r2
 800baac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bab0:	f84e 1b04 	str.w	r1, [lr], #4
 800bab4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bab8:	f8be 1000 	ldrh.w	r1, [lr]
 800babc:	0c12      	lsrs	r2, r2, #16
 800babe:	fb09 1102 	mla	r1, r9, r2, r1
 800bac2:	4567      	cmp	r7, ip
 800bac4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bac8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bacc:	d8e6      	bhi.n	800ba9c <__multiply+0x108>
 800bace:	9a01      	ldr	r2, [sp, #4]
 800bad0:	50a9      	str	r1, [r5, r2]
 800bad2:	3504      	adds	r5, #4
 800bad4:	e79b      	b.n	800ba0e <__multiply+0x7a>
 800bad6:	3e01      	subs	r6, #1
 800bad8:	e79d      	b.n	800ba16 <__multiply+0x82>
 800bada:	bf00      	nop
 800badc:	0800d087 	.word	0x0800d087
 800bae0:	0800d098 	.word	0x0800d098

0800bae4 <__pow5mult>:
 800bae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bae8:	4615      	mov	r5, r2
 800baea:	f012 0203 	ands.w	r2, r2, #3
 800baee:	4606      	mov	r6, r0
 800baf0:	460f      	mov	r7, r1
 800baf2:	d007      	beq.n	800bb04 <__pow5mult+0x20>
 800baf4:	4c25      	ldr	r4, [pc, #148]	; (800bb8c <__pow5mult+0xa8>)
 800baf6:	3a01      	subs	r2, #1
 800baf8:	2300      	movs	r3, #0
 800bafa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bafe:	f7ff fe9f 	bl	800b840 <__multadd>
 800bb02:	4607      	mov	r7, r0
 800bb04:	10ad      	asrs	r5, r5, #2
 800bb06:	d03d      	beq.n	800bb84 <__pow5mult+0xa0>
 800bb08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bb0a:	b97c      	cbnz	r4, 800bb2c <__pow5mult+0x48>
 800bb0c:	2010      	movs	r0, #16
 800bb0e:	f7ff fe11 	bl	800b734 <malloc>
 800bb12:	4602      	mov	r2, r0
 800bb14:	6270      	str	r0, [r6, #36]	; 0x24
 800bb16:	b928      	cbnz	r0, 800bb24 <__pow5mult+0x40>
 800bb18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bb1c:	4b1c      	ldr	r3, [pc, #112]	; (800bb90 <__pow5mult+0xac>)
 800bb1e:	481d      	ldr	r0, [pc, #116]	; (800bb94 <__pow5mult+0xb0>)
 800bb20:	f000 fc0a 	bl	800c338 <__assert_func>
 800bb24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb28:	6004      	str	r4, [r0, #0]
 800bb2a:	60c4      	str	r4, [r0, #12]
 800bb2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bb30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb34:	b94c      	cbnz	r4, 800bb4a <__pow5mult+0x66>
 800bb36:	f240 2171 	movw	r1, #625	; 0x271
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	f7ff ff14 	bl	800b968 <__i2b>
 800bb40:	2300      	movs	r3, #0
 800bb42:	4604      	mov	r4, r0
 800bb44:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb48:	6003      	str	r3, [r0, #0]
 800bb4a:	f04f 0900 	mov.w	r9, #0
 800bb4e:	07eb      	lsls	r3, r5, #31
 800bb50:	d50a      	bpl.n	800bb68 <__pow5mult+0x84>
 800bb52:	4639      	mov	r1, r7
 800bb54:	4622      	mov	r2, r4
 800bb56:	4630      	mov	r0, r6
 800bb58:	f7ff ff1c 	bl	800b994 <__multiply>
 800bb5c:	4680      	mov	r8, r0
 800bb5e:	4639      	mov	r1, r7
 800bb60:	4630      	mov	r0, r6
 800bb62:	f7ff fe4b 	bl	800b7fc <_Bfree>
 800bb66:	4647      	mov	r7, r8
 800bb68:	106d      	asrs	r5, r5, #1
 800bb6a:	d00b      	beq.n	800bb84 <__pow5mult+0xa0>
 800bb6c:	6820      	ldr	r0, [r4, #0]
 800bb6e:	b938      	cbnz	r0, 800bb80 <__pow5mult+0x9c>
 800bb70:	4622      	mov	r2, r4
 800bb72:	4621      	mov	r1, r4
 800bb74:	4630      	mov	r0, r6
 800bb76:	f7ff ff0d 	bl	800b994 <__multiply>
 800bb7a:	6020      	str	r0, [r4, #0]
 800bb7c:	f8c0 9000 	str.w	r9, [r0]
 800bb80:	4604      	mov	r4, r0
 800bb82:	e7e4      	b.n	800bb4e <__pow5mult+0x6a>
 800bb84:	4638      	mov	r0, r7
 800bb86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb8a:	bf00      	nop
 800bb8c:	0800d1e8 	.word	0x0800d1e8
 800bb90:	0800d015 	.word	0x0800d015
 800bb94:	0800d098 	.word	0x0800d098

0800bb98 <__lshift>:
 800bb98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb9c:	460c      	mov	r4, r1
 800bb9e:	4607      	mov	r7, r0
 800bba0:	4691      	mov	r9, r2
 800bba2:	6923      	ldr	r3, [r4, #16]
 800bba4:	6849      	ldr	r1, [r1, #4]
 800bba6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbaa:	68a3      	ldr	r3, [r4, #8]
 800bbac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbb0:	f108 0601 	add.w	r6, r8, #1
 800bbb4:	42b3      	cmp	r3, r6
 800bbb6:	db0b      	blt.n	800bbd0 <__lshift+0x38>
 800bbb8:	4638      	mov	r0, r7
 800bbba:	f7ff fddf 	bl	800b77c <_Balloc>
 800bbbe:	4605      	mov	r5, r0
 800bbc0:	b948      	cbnz	r0, 800bbd6 <__lshift+0x3e>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bbc8:	4b29      	ldr	r3, [pc, #164]	; (800bc70 <__lshift+0xd8>)
 800bbca:	482a      	ldr	r0, [pc, #168]	; (800bc74 <__lshift+0xdc>)
 800bbcc:	f000 fbb4 	bl	800c338 <__assert_func>
 800bbd0:	3101      	adds	r1, #1
 800bbd2:	005b      	lsls	r3, r3, #1
 800bbd4:	e7ee      	b.n	800bbb4 <__lshift+0x1c>
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	f100 0114 	add.w	r1, r0, #20
 800bbdc:	f100 0210 	add.w	r2, r0, #16
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	4553      	cmp	r3, sl
 800bbe4:	db37      	blt.n	800bc56 <__lshift+0xbe>
 800bbe6:	6920      	ldr	r0, [r4, #16]
 800bbe8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bbec:	f104 0314 	add.w	r3, r4, #20
 800bbf0:	f019 091f 	ands.w	r9, r9, #31
 800bbf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bbf8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bbfc:	d02f      	beq.n	800bc5e <__lshift+0xc6>
 800bbfe:	468a      	mov	sl, r1
 800bc00:	f04f 0c00 	mov.w	ip, #0
 800bc04:	f1c9 0e20 	rsb	lr, r9, #32
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	fa02 f209 	lsl.w	r2, r2, r9
 800bc0e:	ea42 020c 	orr.w	r2, r2, ip
 800bc12:	f84a 2b04 	str.w	r2, [sl], #4
 800bc16:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc1a:	4298      	cmp	r0, r3
 800bc1c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bc20:	d8f2      	bhi.n	800bc08 <__lshift+0x70>
 800bc22:	1b03      	subs	r3, r0, r4
 800bc24:	3b15      	subs	r3, #21
 800bc26:	f023 0303 	bic.w	r3, r3, #3
 800bc2a:	3304      	adds	r3, #4
 800bc2c:	f104 0215 	add.w	r2, r4, #21
 800bc30:	4290      	cmp	r0, r2
 800bc32:	bf38      	it	cc
 800bc34:	2304      	movcc	r3, #4
 800bc36:	f841 c003 	str.w	ip, [r1, r3]
 800bc3a:	f1bc 0f00 	cmp.w	ip, #0
 800bc3e:	d001      	beq.n	800bc44 <__lshift+0xac>
 800bc40:	f108 0602 	add.w	r6, r8, #2
 800bc44:	3e01      	subs	r6, #1
 800bc46:	4638      	mov	r0, r7
 800bc48:	4621      	mov	r1, r4
 800bc4a:	612e      	str	r6, [r5, #16]
 800bc4c:	f7ff fdd6 	bl	800b7fc <_Bfree>
 800bc50:	4628      	mov	r0, r5
 800bc52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc56:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	e7c1      	b.n	800bbe2 <__lshift+0x4a>
 800bc5e:	3904      	subs	r1, #4
 800bc60:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc64:	4298      	cmp	r0, r3
 800bc66:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc6a:	d8f9      	bhi.n	800bc60 <__lshift+0xc8>
 800bc6c:	e7ea      	b.n	800bc44 <__lshift+0xac>
 800bc6e:	bf00      	nop
 800bc70:	0800d087 	.word	0x0800d087
 800bc74:	0800d098 	.word	0x0800d098

0800bc78 <__mcmp>:
 800bc78:	4603      	mov	r3, r0
 800bc7a:	690a      	ldr	r2, [r1, #16]
 800bc7c:	6900      	ldr	r0, [r0, #16]
 800bc7e:	b530      	push	{r4, r5, lr}
 800bc80:	1a80      	subs	r0, r0, r2
 800bc82:	d10d      	bne.n	800bca0 <__mcmp+0x28>
 800bc84:	3314      	adds	r3, #20
 800bc86:	3114      	adds	r1, #20
 800bc88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bc8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bc90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bc94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bc98:	4295      	cmp	r5, r2
 800bc9a:	d002      	beq.n	800bca2 <__mcmp+0x2a>
 800bc9c:	d304      	bcc.n	800bca8 <__mcmp+0x30>
 800bc9e:	2001      	movs	r0, #1
 800bca0:	bd30      	pop	{r4, r5, pc}
 800bca2:	42a3      	cmp	r3, r4
 800bca4:	d3f4      	bcc.n	800bc90 <__mcmp+0x18>
 800bca6:	e7fb      	b.n	800bca0 <__mcmp+0x28>
 800bca8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcac:	e7f8      	b.n	800bca0 <__mcmp+0x28>
	...

0800bcb0 <__mdiff>:
 800bcb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb4:	460d      	mov	r5, r1
 800bcb6:	4607      	mov	r7, r0
 800bcb8:	4611      	mov	r1, r2
 800bcba:	4628      	mov	r0, r5
 800bcbc:	4614      	mov	r4, r2
 800bcbe:	f7ff ffdb 	bl	800bc78 <__mcmp>
 800bcc2:	1e06      	subs	r6, r0, #0
 800bcc4:	d111      	bne.n	800bcea <__mdiff+0x3a>
 800bcc6:	4631      	mov	r1, r6
 800bcc8:	4638      	mov	r0, r7
 800bcca:	f7ff fd57 	bl	800b77c <_Balloc>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	b928      	cbnz	r0, 800bcde <__mdiff+0x2e>
 800bcd2:	f240 2132 	movw	r1, #562	; 0x232
 800bcd6:	4b3a      	ldr	r3, [pc, #232]	; (800bdc0 <__mdiff+0x110>)
 800bcd8:	483a      	ldr	r0, [pc, #232]	; (800bdc4 <__mdiff+0x114>)
 800bcda:	f000 fb2d 	bl	800c338 <__assert_func>
 800bcde:	2301      	movs	r3, #1
 800bce0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bce4:	4610      	mov	r0, r2
 800bce6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcea:	bfa4      	itt	ge
 800bcec:	4623      	movge	r3, r4
 800bcee:	462c      	movge	r4, r5
 800bcf0:	4638      	mov	r0, r7
 800bcf2:	6861      	ldr	r1, [r4, #4]
 800bcf4:	bfa6      	itte	ge
 800bcf6:	461d      	movge	r5, r3
 800bcf8:	2600      	movge	r6, #0
 800bcfa:	2601      	movlt	r6, #1
 800bcfc:	f7ff fd3e 	bl	800b77c <_Balloc>
 800bd00:	4602      	mov	r2, r0
 800bd02:	b918      	cbnz	r0, 800bd0c <__mdiff+0x5c>
 800bd04:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bd08:	4b2d      	ldr	r3, [pc, #180]	; (800bdc0 <__mdiff+0x110>)
 800bd0a:	e7e5      	b.n	800bcd8 <__mdiff+0x28>
 800bd0c:	f102 0814 	add.w	r8, r2, #20
 800bd10:	46c2      	mov	sl, r8
 800bd12:	f04f 0c00 	mov.w	ip, #0
 800bd16:	6927      	ldr	r7, [r4, #16]
 800bd18:	60c6      	str	r6, [r0, #12]
 800bd1a:	692e      	ldr	r6, [r5, #16]
 800bd1c:	f104 0014 	add.w	r0, r4, #20
 800bd20:	f105 0914 	add.w	r9, r5, #20
 800bd24:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800bd28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bd2c:	3410      	adds	r4, #16
 800bd2e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800bd32:	f859 3b04 	ldr.w	r3, [r9], #4
 800bd36:	fa1f f18b 	uxth.w	r1, fp
 800bd3a:	448c      	add	ip, r1
 800bd3c:	b299      	uxth	r1, r3
 800bd3e:	0c1b      	lsrs	r3, r3, #16
 800bd40:	ebac 0101 	sub.w	r1, ip, r1
 800bd44:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bd48:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bd4c:	b289      	uxth	r1, r1
 800bd4e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bd52:	454e      	cmp	r6, r9
 800bd54:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bd58:	f84a 3b04 	str.w	r3, [sl], #4
 800bd5c:	d8e7      	bhi.n	800bd2e <__mdiff+0x7e>
 800bd5e:	1b73      	subs	r3, r6, r5
 800bd60:	3b15      	subs	r3, #21
 800bd62:	f023 0303 	bic.w	r3, r3, #3
 800bd66:	3515      	adds	r5, #21
 800bd68:	3304      	adds	r3, #4
 800bd6a:	42ae      	cmp	r6, r5
 800bd6c:	bf38      	it	cc
 800bd6e:	2304      	movcc	r3, #4
 800bd70:	4418      	add	r0, r3
 800bd72:	4443      	add	r3, r8
 800bd74:	461e      	mov	r6, r3
 800bd76:	4605      	mov	r5, r0
 800bd78:	4575      	cmp	r5, lr
 800bd7a:	d30e      	bcc.n	800bd9a <__mdiff+0xea>
 800bd7c:	f10e 0103 	add.w	r1, lr, #3
 800bd80:	1a09      	subs	r1, r1, r0
 800bd82:	f021 0103 	bic.w	r1, r1, #3
 800bd86:	3803      	subs	r0, #3
 800bd88:	4586      	cmp	lr, r0
 800bd8a:	bf38      	it	cc
 800bd8c:	2100      	movcc	r1, #0
 800bd8e:	4419      	add	r1, r3
 800bd90:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bd94:	b18b      	cbz	r3, 800bdba <__mdiff+0x10a>
 800bd96:	6117      	str	r7, [r2, #16]
 800bd98:	e7a4      	b.n	800bce4 <__mdiff+0x34>
 800bd9a:	f855 8b04 	ldr.w	r8, [r5], #4
 800bd9e:	fa1f f188 	uxth.w	r1, r8
 800bda2:	4461      	add	r1, ip
 800bda4:	140c      	asrs	r4, r1, #16
 800bda6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bdaa:	b289      	uxth	r1, r1
 800bdac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bdb0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800bdb4:	f846 1b04 	str.w	r1, [r6], #4
 800bdb8:	e7de      	b.n	800bd78 <__mdiff+0xc8>
 800bdba:	3f01      	subs	r7, #1
 800bdbc:	e7e8      	b.n	800bd90 <__mdiff+0xe0>
 800bdbe:	bf00      	nop
 800bdc0:	0800d087 	.word	0x0800d087
 800bdc4:	0800d098 	.word	0x0800d098

0800bdc8 <__d2b>:
 800bdc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bdcc:	2101      	movs	r1, #1
 800bdce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800bdd2:	4690      	mov	r8, r2
 800bdd4:	461d      	mov	r5, r3
 800bdd6:	f7ff fcd1 	bl	800b77c <_Balloc>
 800bdda:	4604      	mov	r4, r0
 800bddc:	b930      	cbnz	r0, 800bdec <__d2b+0x24>
 800bdde:	4602      	mov	r2, r0
 800bde0:	f240 310a 	movw	r1, #778	; 0x30a
 800bde4:	4b24      	ldr	r3, [pc, #144]	; (800be78 <__d2b+0xb0>)
 800bde6:	4825      	ldr	r0, [pc, #148]	; (800be7c <__d2b+0xb4>)
 800bde8:	f000 faa6 	bl	800c338 <__assert_func>
 800bdec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800bdf0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800bdf4:	bb2d      	cbnz	r5, 800be42 <__d2b+0x7a>
 800bdf6:	9301      	str	r3, [sp, #4]
 800bdf8:	f1b8 0300 	subs.w	r3, r8, #0
 800bdfc:	d026      	beq.n	800be4c <__d2b+0x84>
 800bdfe:	4668      	mov	r0, sp
 800be00:	9300      	str	r3, [sp, #0]
 800be02:	f7ff fd83 	bl	800b90c <__lo0bits>
 800be06:	9900      	ldr	r1, [sp, #0]
 800be08:	b1f0      	cbz	r0, 800be48 <__d2b+0x80>
 800be0a:	9a01      	ldr	r2, [sp, #4]
 800be0c:	f1c0 0320 	rsb	r3, r0, #32
 800be10:	fa02 f303 	lsl.w	r3, r2, r3
 800be14:	430b      	orrs	r3, r1
 800be16:	40c2      	lsrs	r2, r0
 800be18:	6163      	str	r3, [r4, #20]
 800be1a:	9201      	str	r2, [sp, #4]
 800be1c:	9b01      	ldr	r3, [sp, #4]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	bf14      	ite	ne
 800be22:	2102      	movne	r1, #2
 800be24:	2101      	moveq	r1, #1
 800be26:	61a3      	str	r3, [r4, #24]
 800be28:	6121      	str	r1, [r4, #16]
 800be2a:	b1c5      	cbz	r5, 800be5e <__d2b+0x96>
 800be2c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800be30:	4405      	add	r5, r0
 800be32:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be36:	603d      	str	r5, [r7, #0]
 800be38:	6030      	str	r0, [r6, #0]
 800be3a:	4620      	mov	r0, r4
 800be3c:	b002      	add	sp, #8
 800be3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be46:	e7d6      	b.n	800bdf6 <__d2b+0x2e>
 800be48:	6161      	str	r1, [r4, #20]
 800be4a:	e7e7      	b.n	800be1c <__d2b+0x54>
 800be4c:	a801      	add	r0, sp, #4
 800be4e:	f7ff fd5d 	bl	800b90c <__lo0bits>
 800be52:	2101      	movs	r1, #1
 800be54:	9b01      	ldr	r3, [sp, #4]
 800be56:	6121      	str	r1, [r4, #16]
 800be58:	6163      	str	r3, [r4, #20]
 800be5a:	3020      	adds	r0, #32
 800be5c:	e7e5      	b.n	800be2a <__d2b+0x62>
 800be5e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800be62:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be66:	6038      	str	r0, [r7, #0]
 800be68:	6918      	ldr	r0, [r3, #16]
 800be6a:	f7ff fd2f 	bl	800b8cc <__hi0bits>
 800be6e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800be72:	6031      	str	r1, [r6, #0]
 800be74:	e7e1      	b.n	800be3a <__d2b+0x72>
 800be76:	bf00      	nop
 800be78:	0800d087 	.word	0x0800d087
 800be7c:	0800d098 	.word	0x0800d098

0800be80 <_calloc_r>:
 800be80:	b570      	push	{r4, r5, r6, lr}
 800be82:	fba1 5402 	umull	r5, r4, r1, r2
 800be86:	b934      	cbnz	r4, 800be96 <_calloc_r+0x16>
 800be88:	4629      	mov	r1, r5
 800be8a:	f000 f875 	bl	800bf78 <_malloc_r>
 800be8e:	4606      	mov	r6, r0
 800be90:	b928      	cbnz	r0, 800be9e <_calloc_r+0x1e>
 800be92:	4630      	mov	r0, r6
 800be94:	bd70      	pop	{r4, r5, r6, pc}
 800be96:	220c      	movs	r2, #12
 800be98:	2600      	movs	r6, #0
 800be9a:	6002      	str	r2, [r0, #0]
 800be9c:	e7f9      	b.n	800be92 <_calloc_r+0x12>
 800be9e:	462a      	mov	r2, r5
 800bea0:	4621      	mov	r1, r4
 800bea2:	f7fe f941 	bl	800a128 <memset>
 800bea6:	e7f4      	b.n	800be92 <_calloc_r+0x12>

0800bea8 <_free_r>:
 800bea8:	b538      	push	{r3, r4, r5, lr}
 800beaa:	4605      	mov	r5, r0
 800beac:	2900      	cmp	r1, #0
 800beae:	d040      	beq.n	800bf32 <_free_r+0x8a>
 800beb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800beb4:	1f0c      	subs	r4, r1, #4
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	bfb8      	it	lt
 800beba:	18e4      	addlt	r4, r4, r3
 800bebc:	f000 fa98 	bl	800c3f0 <__malloc_lock>
 800bec0:	4a1c      	ldr	r2, [pc, #112]	; (800bf34 <_free_r+0x8c>)
 800bec2:	6813      	ldr	r3, [r2, #0]
 800bec4:	b933      	cbnz	r3, 800bed4 <_free_r+0x2c>
 800bec6:	6063      	str	r3, [r4, #4]
 800bec8:	6014      	str	r4, [r2, #0]
 800beca:	4628      	mov	r0, r5
 800becc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bed0:	f000 ba94 	b.w	800c3fc <__malloc_unlock>
 800bed4:	42a3      	cmp	r3, r4
 800bed6:	d908      	bls.n	800beea <_free_r+0x42>
 800bed8:	6820      	ldr	r0, [r4, #0]
 800beda:	1821      	adds	r1, r4, r0
 800bedc:	428b      	cmp	r3, r1
 800bede:	bf01      	itttt	eq
 800bee0:	6819      	ldreq	r1, [r3, #0]
 800bee2:	685b      	ldreq	r3, [r3, #4]
 800bee4:	1809      	addeq	r1, r1, r0
 800bee6:	6021      	streq	r1, [r4, #0]
 800bee8:	e7ed      	b.n	800bec6 <_free_r+0x1e>
 800beea:	461a      	mov	r2, r3
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	b10b      	cbz	r3, 800bef4 <_free_r+0x4c>
 800bef0:	42a3      	cmp	r3, r4
 800bef2:	d9fa      	bls.n	800beea <_free_r+0x42>
 800bef4:	6811      	ldr	r1, [r2, #0]
 800bef6:	1850      	adds	r0, r2, r1
 800bef8:	42a0      	cmp	r0, r4
 800befa:	d10b      	bne.n	800bf14 <_free_r+0x6c>
 800befc:	6820      	ldr	r0, [r4, #0]
 800befe:	4401      	add	r1, r0
 800bf00:	1850      	adds	r0, r2, r1
 800bf02:	4283      	cmp	r3, r0
 800bf04:	6011      	str	r1, [r2, #0]
 800bf06:	d1e0      	bne.n	800beca <_free_r+0x22>
 800bf08:	6818      	ldr	r0, [r3, #0]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	4401      	add	r1, r0
 800bf0e:	6011      	str	r1, [r2, #0]
 800bf10:	6053      	str	r3, [r2, #4]
 800bf12:	e7da      	b.n	800beca <_free_r+0x22>
 800bf14:	d902      	bls.n	800bf1c <_free_r+0x74>
 800bf16:	230c      	movs	r3, #12
 800bf18:	602b      	str	r3, [r5, #0]
 800bf1a:	e7d6      	b.n	800beca <_free_r+0x22>
 800bf1c:	6820      	ldr	r0, [r4, #0]
 800bf1e:	1821      	adds	r1, r4, r0
 800bf20:	428b      	cmp	r3, r1
 800bf22:	bf01      	itttt	eq
 800bf24:	6819      	ldreq	r1, [r3, #0]
 800bf26:	685b      	ldreq	r3, [r3, #4]
 800bf28:	1809      	addeq	r1, r1, r0
 800bf2a:	6021      	streq	r1, [r4, #0]
 800bf2c:	6063      	str	r3, [r4, #4]
 800bf2e:	6054      	str	r4, [r2, #4]
 800bf30:	e7cb      	b.n	800beca <_free_r+0x22>
 800bf32:	bd38      	pop	{r3, r4, r5, pc}
 800bf34:	200009a0 	.word	0x200009a0

0800bf38 <sbrk_aligned>:
 800bf38:	b570      	push	{r4, r5, r6, lr}
 800bf3a:	4e0e      	ldr	r6, [pc, #56]	; (800bf74 <sbrk_aligned+0x3c>)
 800bf3c:	460c      	mov	r4, r1
 800bf3e:	6831      	ldr	r1, [r6, #0]
 800bf40:	4605      	mov	r5, r0
 800bf42:	b911      	cbnz	r1, 800bf4a <sbrk_aligned+0x12>
 800bf44:	f000 f9e8 	bl	800c318 <_sbrk_r>
 800bf48:	6030      	str	r0, [r6, #0]
 800bf4a:	4621      	mov	r1, r4
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	f000 f9e3 	bl	800c318 <_sbrk_r>
 800bf52:	1c43      	adds	r3, r0, #1
 800bf54:	d00a      	beq.n	800bf6c <sbrk_aligned+0x34>
 800bf56:	1cc4      	adds	r4, r0, #3
 800bf58:	f024 0403 	bic.w	r4, r4, #3
 800bf5c:	42a0      	cmp	r0, r4
 800bf5e:	d007      	beq.n	800bf70 <sbrk_aligned+0x38>
 800bf60:	1a21      	subs	r1, r4, r0
 800bf62:	4628      	mov	r0, r5
 800bf64:	f000 f9d8 	bl	800c318 <_sbrk_r>
 800bf68:	3001      	adds	r0, #1
 800bf6a:	d101      	bne.n	800bf70 <sbrk_aligned+0x38>
 800bf6c:	f04f 34ff 	mov.w	r4, #4294967295
 800bf70:	4620      	mov	r0, r4
 800bf72:	bd70      	pop	{r4, r5, r6, pc}
 800bf74:	200009a4 	.word	0x200009a4

0800bf78 <_malloc_r>:
 800bf78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf7c:	1ccd      	adds	r5, r1, #3
 800bf7e:	f025 0503 	bic.w	r5, r5, #3
 800bf82:	3508      	adds	r5, #8
 800bf84:	2d0c      	cmp	r5, #12
 800bf86:	bf38      	it	cc
 800bf88:	250c      	movcc	r5, #12
 800bf8a:	2d00      	cmp	r5, #0
 800bf8c:	4607      	mov	r7, r0
 800bf8e:	db01      	blt.n	800bf94 <_malloc_r+0x1c>
 800bf90:	42a9      	cmp	r1, r5
 800bf92:	d905      	bls.n	800bfa0 <_malloc_r+0x28>
 800bf94:	230c      	movs	r3, #12
 800bf96:	2600      	movs	r6, #0
 800bf98:	603b      	str	r3, [r7, #0]
 800bf9a:	4630      	mov	r0, r6
 800bf9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfa0:	4e2e      	ldr	r6, [pc, #184]	; (800c05c <_malloc_r+0xe4>)
 800bfa2:	f000 fa25 	bl	800c3f0 <__malloc_lock>
 800bfa6:	6833      	ldr	r3, [r6, #0]
 800bfa8:	461c      	mov	r4, r3
 800bfaa:	bb34      	cbnz	r4, 800bffa <_malloc_r+0x82>
 800bfac:	4629      	mov	r1, r5
 800bfae:	4638      	mov	r0, r7
 800bfb0:	f7ff ffc2 	bl	800bf38 <sbrk_aligned>
 800bfb4:	1c43      	adds	r3, r0, #1
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	d14d      	bne.n	800c056 <_malloc_r+0xde>
 800bfba:	6834      	ldr	r4, [r6, #0]
 800bfbc:	4626      	mov	r6, r4
 800bfbe:	2e00      	cmp	r6, #0
 800bfc0:	d140      	bne.n	800c044 <_malloc_r+0xcc>
 800bfc2:	6823      	ldr	r3, [r4, #0]
 800bfc4:	4631      	mov	r1, r6
 800bfc6:	4638      	mov	r0, r7
 800bfc8:	eb04 0803 	add.w	r8, r4, r3
 800bfcc:	f000 f9a4 	bl	800c318 <_sbrk_r>
 800bfd0:	4580      	cmp	r8, r0
 800bfd2:	d13a      	bne.n	800c04a <_malloc_r+0xd2>
 800bfd4:	6821      	ldr	r1, [r4, #0]
 800bfd6:	3503      	adds	r5, #3
 800bfd8:	1a6d      	subs	r5, r5, r1
 800bfda:	f025 0503 	bic.w	r5, r5, #3
 800bfde:	3508      	adds	r5, #8
 800bfe0:	2d0c      	cmp	r5, #12
 800bfe2:	bf38      	it	cc
 800bfe4:	250c      	movcc	r5, #12
 800bfe6:	4638      	mov	r0, r7
 800bfe8:	4629      	mov	r1, r5
 800bfea:	f7ff ffa5 	bl	800bf38 <sbrk_aligned>
 800bfee:	3001      	adds	r0, #1
 800bff0:	d02b      	beq.n	800c04a <_malloc_r+0xd2>
 800bff2:	6823      	ldr	r3, [r4, #0]
 800bff4:	442b      	add	r3, r5
 800bff6:	6023      	str	r3, [r4, #0]
 800bff8:	e00e      	b.n	800c018 <_malloc_r+0xa0>
 800bffa:	6822      	ldr	r2, [r4, #0]
 800bffc:	1b52      	subs	r2, r2, r5
 800bffe:	d41e      	bmi.n	800c03e <_malloc_r+0xc6>
 800c000:	2a0b      	cmp	r2, #11
 800c002:	d916      	bls.n	800c032 <_malloc_r+0xba>
 800c004:	1961      	adds	r1, r4, r5
 800c006:	42a3      	cmp	r3, r4
 800c008:	6025      	str	r5, [r4, #0]
 800c00a:	bf18      	it	ne
 800c00c:	6059      	strne	r1, [r3, #4]
 800c00e:	6863      	ldr	r3, [r4, #4]
 800c010:	bf08      	it	eq
 800c012:	6031      	streq	r1, [r6, #0]
 800c014:	5162      	str	r2, [r4, r5]
 800c016:	604b      	str	r3, [r1, #4]
 800c018:	4638      	mov	r0, r7
 800c01a:	f104 060b 	add.w	r6, r4, #11
 800c01e:	f000 f9ed 	bl	800c3fc <__malloc_unlock>
 800c022:	f026 0607 	bic.w	r6, r6, #7
 800c026:	1d23      	adds	r3, r4, #4
 800c028:	1af2      	subs	r2, r6, r3
 800c02a:	d0b6      	beq.n	800bf9a <_malloc_r+0x22>
 800c02c:	1b9b      	subs	r3, r3, r6
 800c02e:	50a3      	str	r3, [r4, r2]
 800c030:	e7b3      	b.n	800bf9a <_malloc_r+0x22>
 800c032:	6862      	ldr	r2, [r4, #4]
 800c034:	42a3      	cmp	r3, r4
 800c036:	bf0c      	ite	eq
 800c038:	6032      	streq	r2, [r6, #0]
 800c03a:	605a      	strne	r2, [r3, #4]
 800c03c:	e7ec      	b.n	800c018 <_malloc_r+0xa0>
 800c03e:	4623      	mov	r3, r4
 800c040:	6864      	ldr	r4, [r4, #4]
 800c042:	e7b2      	b.n	800bfaa <_malloc_r+0x32>
 800c044:	4634      	mov	r4, r6
 800c046:	6876      	ldr	r6, [r6, #4]
 800c048:	e7b9      	b.n	800bfbe <_malloc_r+0x46>
 800c04a:	230c      	movs	r3, #12
 800c04c:	4638      	mov	r0, r7
 800c04e:	603b      	str	r3, [r7, #0]
 800c050:	f000 f9d4 	bl	800c3fc <__malloc_unlock>
 800c054:	e7a1      	b.n	800bf9a <_malloc_r+0x22>
 800c056:	6025      	str	r5, [r4, #0]
 800c058:	e7de      	b.n	800c018 <_malloc_r+0xa0>
 800c05a:	bf00      	nop
 800c05c:	200009a0 	.word	0x200009a0

0800c060 <__ssputs_r>:
 800c060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c064:	688e      	ldr	r6, [r1, #8]
 800c066:	4682      	mov	sl, r0
 800c068:	429e      	cmp	r6, r3
 800c06a:	460c      	mov	r4, r1
 800c06c:	4690      	mov	r8, r2
 800c06e:	461f      	mov	r7, r3
 800c070:	d838      	bhi.n	800c0e4 <__ssputs_r+0x84>
 800c072:	898a      	ldrh	r2, [r1, #12]
 800c074:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c078:	d032      	beq.n	800c0e0 <__ssputs_r+0x80>
 800c07a:	6825      	ldr	r5, [r4, #0]
 800c07c:	6909      	ldr	r1, [r1, #16]
 800c07e:	3301      	adds	r3, #1
 800c080:	eba5 0901 	sub.w	r9, r5, r1
 800c084:	6965      	ldr	r5, [r4, #20]
 800c086:	444b      	add	r3, r9
 800c088:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c08c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c090:	106d      	asrs	r5, r5, #1
 800c092:	429d      	cmp	r5, r3
 800c094:	bf38      	it	cc
 800c096:	461d      	movcc	r5, r3
 800c098:	0553      	lsls	r3, r2, #21
 800c09a:	d531      	bpl.n	800c100 <__ssputs_r+0xa0>
 800c09c:	4629      	mov	r1, r5
 800c09e:	f7ff ff6b 	bl	800bf78 <_malloc_r>
 800c0a2:	4606      	mov	r6, r0
 800c0a4:	b950      	cbnz	r0, 800c0bc <__ssputs_r+0x5c>
 800c0a6:	230c      	movs	r3, #12
 800c0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ac:	f8ca 3000 	str.w	r3, [sl]
 800c0b0:	89a3      	ldrh	r3, [r4, #12]
 800c0b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0b6:	81a3      	strh	r3, [r4, #12]
 800c0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0bc:	464a      	mov	r2, r9
 800c0be:	6921      	ldr	r1, [r4, #16]
 800c0c0:	f7ff fb4e 	bl	800b760 <memcpy>
 800c0c4:	89a3      	ldrh	r3, [r4, #12]
 800c0c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c0ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0ce:	81a3      	strh	r3, [r4, #12]
 800c0d0:	6126      	str	r6, [r4, #16]
 800c0d2:	444e      	add	r6, r9
 800c0d4:	6026      	str	r6, [r4, #0]
 800c0d6:	463e      	mov	r6, r7
 800c0d8:	6165      	str	r5, [r4, #20]
 800c0da:	eba5 0509 	sub.w	r5, r5, r9
 800c0de:	60a5      	str	r5, [r4, #8]
 800c0e0:	42be      	cmp	r6, r7
 800c0e2:	d900      	bls.n	800c0e6 <__ssputs_r+0x86>
 800c0e4:	463e      	mov	r6, r7
 800c0e6:	4632      	mov	r2, r6
 800c0e8:	4641      	mov	r1, r8
 800c0ea:	6820      	ldr	r0, [r4, #0]
 800c0ec:	f000 f966 	bl	800c3bc <memmove>
 800c0f0:	68a3      	ldr	r3, [r4, #8]
 800c0f2:	2000      	movs	r0, #0
 800c0f4:	1b9b      	subs	r3, r3, r6
 800c0f6:	60a3      	str	r3, [r4, #8]
 800c0f8:	6823      	ldr	r3, [r4, #0]
 800c0fa:	4433      	add	r3, r6
 800c0fc:	6023      	str	r3, [r4, #0]
 800c0fe:	e7db      	b.n	800c0b8 <__ssputs_r+0x58>
 800c100:	462a      	mov	r2, r5
 800c102:	f000 f981 	bl	800c408 <_realloc_r>
 800c106:	4606      	mov	r6, r0
 800c108:	2800      	cmp	r0, #0
 800c10a:	d1e1      	bne.n	800c0d0 <__ssputs_r+0x70>
 800c10c:	4650      	mov	r0, sl
 800c10e:	6921      	ldr	r1, [r4, #16]
 800c110:	f7ff feca 	bl	800bea8 <_free_r>
 800c114:	e7c7      	b.n	800c0a6 <__ssputs_r+0x46>
	...

0800c118 <_svfiprintf_r>:
 800c118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c11c:	4698      	mov	r8, r3
 800c11e:	898b      	ldrh	r3, [r1, #12]
 800c120:	4607      	mov	r7, r0
 800c122:	061b      	lsls	r3, r3, #24
 800c124:	460d      	mov	r5, r1
 800c126:	4614      	mov	r4, r2
 800c128:	b09d      	sub	sp, #116	; 0x74
 800c12a:	d50e      	bpl.n	800c14a <_svfiprintf_r+0x32>
 800c12c:	690b      	ldr	r3, [r1, #16]
 800c12e:	b963      	cbnz	r3, 800c14a <_svfiprintf_r+0x32>
 800c130:	2140      	movs	r1, #64	; 0x40
 800c132:	f7ff ff21 	bl	800bf78 <_malloc_r>
 800c136:	6028      	str	r0, [r5, #0]
 800c138:	6128      	str	r0, [r5, #16]
 800c13a:	b920      	cbnz	r0, 800c146 <_svfiprintf_r+0x2e>
 800c13c:	230c      	movs	r3, #12
 800c13e:	603b      	str	r3, [r7, #0]
 800c140:	f04f 30ff 	mov.w	r0, #4294967295
 800c144:	e0d1      	b.n	800c2ea <_svfiprintf_r+0x1d2>
 800c146:	2340      	movs	r3, #64	; 0x40
 800c148:	616b      	str	r3, [r5, #20]
 800c14a:	2300      	movs	r3, #0
 800c14c:	9309      	str	r3, [sp, #36]	; 0x24
 800c14e:	2320      	movs	r3, #32
 800c150:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c154:	2330      	movs	r3, #48	; 0x30
 800c156:	f04f 0901 	mov.w	r9, #1
 800c15a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c15e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c304 <_svfiprintf_r+0x1ec>
 800c162:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c166:	4623      	mov	r3, r4
 800c168:	469a      	mov	sl, r3
 800c16a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c16e:	b10a      	cbz	r2, 800c174 <_svfiprintf_r+0x5c>
 800c170:	2a25      	cmp	r2, #37	; 0x25
 800c172:	d1f9      	bne.n	800c168 <_svfiprintf_r+0x50>
 800c174:	ebba 0b04 	subs.w	fp, sl, r4
 800c178:	d00b      	beq.n	800c192 <_svfiprintf_r+0x7a>
 800c17a:	465b      	mov	r3, fp
 800c17c:	4622      	mov	r2, r4
 800c17e:	4629      	mov	r1, r5
 800c180:	4638      	mov	r0, r7
 800c182:	f7ff ff6d 	bl	800c060 <__ssputs_r>
 800c186:	3001      	adds	r0, #1
 800c188:	f000 80aa 	beq.w	800c2e0 <_svfiprintf_r+0x1c8>
 800c18c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c18e:	445a      	add	r2, fp
 800c190:	9209      	str	r2, [sp, #36]	; 0x24
 800c192:	f89a 3000 	ldrb.w	r3, [sl]
 800c196:	2b00      	cmp	r3, #0
 800c198:	f000 80a2 	beq.w	800c2e0 <_svfiprintf_r+0x1c8>
 800c19c:	2300      	movs	r3, #0
 800c19e:	f04f 32ff 	mov.w	r2, #4294967295
 800c1a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1a6:	f10a 0a01 	add.w	sl, sl, #1
 800c1aa:	9304      	str	r3, [sp, #16]
 800c1ac:	9307      	str	r3, [sp, #28]
 800c1ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1b2:	931a      	str	r3, [sp, #104]	; 0x68
 800c1b4:	4654      	mov	r4, sl
 800c1b6:	2205      	movs	r2, #5
 800c1b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1bc:	4851      	ldr	r0, [pc, #324]	; (800c304 <_svfiprintf_r+0x1ec>)
 800c1be:	f7ff fac1 	bl	800b744 <memchr>
 800c1c2:	9a04      	ldr	r2, [sp, #16]
 800c1c4:	b9d8      	cbnz	r0, 800c1fe <_svfiprintf_r+0xe6>
 800c1c6:	06d0      	lsls	r0, r2, #27
 800c1c8:	bf44      	itt	mi
 800c1ca:	2320      	movmi	r3, #32
 800c1cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1d0:	0711      	lsls	r1, r2, #28
 800c1d2:	bf44      	itt	mi
 800c1d4:	232b      	movmi	r3, #43	; 0x2b
 800c1d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1da:	f89a 3000 	ldrb.w	r3, [sl]
 800c1de:	2b2a      	cmp	r3, #42	; 0x2a
 800c1e0:	d015      	beq.n	800c20e <_svfiprintf_r+0xf6>
 800c1e2:	4654      	mov	r4, sl
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	f04f 0c0a 	mov.w	ip, #10
 800c1ea:	9a07      	ldr	r2, [sp, #28]
 800c1ec:	4621      	mov	r1, r4
 800c1ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1f2:	3b30      	subs	r3, #48	; 0x30
 800c1f4:	2b09      	cmp	r3, #9
 800c1f6:	d94e      	bls.n	800c296 <_svfiprintf_r+0x17e>
 800c1f8:	b1b0      	cbz	r0, 800c228 <_svfiprintf_r+0x110>
 800c1fa:	9207      	str	r2, [sp, #28]
 800c1fc:	e014      	b.n	800c228 <_svfiprintf_r+0x110>
 800c1fe:	eba0 0308 	sub.w	r3, r0, r8
 800c202:	fa09 f303 	lsl.w	r3, r9, r3
 800c206:	4313      	orrs	r3, r2
 800c208:	46a2      	mov	sl, r4
 800c20a:	9304      	str	r3, [sp, #16]
 800c20c:	e7d2      	b.n	800c1b4 <_svfiprintf_r+0x9c>
 800c20e:	9b03      	ldr	r3, [sp, #12]
 800c210:	1d19      	adds	r1, r3, #4
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	9103      	str	r1, [sp, #12]
 800c216:	2b00      	cmp	r3, #0
 800c218:	bfbb      	ittet	lt
 800c21a:	425b      	neglt	r3, r3
 800c21c:	f042 0202 	orrlt.w	r2, r2, #2
 800c220:	9307      	strge	r3, [sp, #28]
 800c222:	9307      	strlt	r3, [sp, #28]
 800c224:	bfb8      	it	lt
 800c226:	9204      	strlt	r2, [sp, #16]
 800c228:	7823      	ldrb	r3, [r4, #0]
 800c22a:	2b2e      	cmp	r3, #46	; 0x2e
 800c22c:	d10c      	bne.n	800c248 <_svfiprintf_r+0x130>
 800c22e:	7863      	ldrb	r3, [r4, #1]
 800c230:	2b2a      	cmp	r3, #42	; 0x2a
 800c232:	d135      	bne.n	800c2a0 <_svfiprintf_r+0x188>
 800c234:	9b03      	ldr	r3, [sp, #12]
 800c236:	3402      	adds	r4, #2
 800c238:	1d1a      	adds	r2, r3, #4
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	9203      	str	r2, [sp, #12]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	bfb8      	it	lt
 800c242:	f04f 33ff 	movlt.w	r3, #4294967295
 800c246:	9305      	str	r3, [sp, #20]
 800c248:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c308 <_svfiprintf_r+0x1f0>
 800c24c:	2203      	movs	r2, #3
 800c24e:	4650      	mov	r0, sl
 800c250:	7821      	ldrb	r1, [r4, #0]
 800c252:	f7ff fa77 	bl	800b744 <memchr>
 800c256:	b140      	cbz	r0, 800c26a <_svfiprintf_r+0x152>
 800c258:	2340      	movs	r3, #64	; 0x40
 800c25a:	eba0 000a 	sub.w	r0, r0, sl
 800c25e:	fa03 f000 	lsl.w	r0, r3, r0
 800c262:	9b04      	ldr	r3, [sp, #16]
 800c264:	3401      	adds	r4, #1
 800c266:	4303      	orrs	r3, r0
 800c268:	9304      	str	r3, [sp, #16]
 800c26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c26e:	2206      	movs	r2, #6
 800c270:	4826      	ldr	r0, [pc, #152]	; (800c30c <_svfiprintf_r+0x1f4>)
 800c272:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c276:	f7ff fa65 	bl	800b744 <memchr>
 800c27a:	2800      	cmp	r0, #0
 800c27c:	d038      	beq.n	800c2f0 <_svfiprintf_r+0x1d8>
 800c27e:	4b24      	ldr	r3, [pc, #144]	; (800c310 <_svfiprintf_r+0x1f8>)
 800c280:	bb1b      	cbnz	r3, 800c2ca <_svfiprintf_r+0x1b2>
 800c282:	9b03      	ldr	r3, [sp, #12]
 800c284:	3307      	adds	r3, #7
 800c286:	f023 0307 	bic.w	r3, r3, #7
 800c28a:	3308      	adds	r3, #8
 800c28c:	9303      	str	r3, [sp, #12]
 800c28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c290:	4433      	add	r3, r6
 800c292:	9309      	str	r3, [sp, #36]	; 0x24
 800c294:	e767      	b.n	800c166 <_svfiprintf_r+0x4e>
 800c296:	460c      	mov	r4, r1
 800c298:	2001      	movs	r0, #1
 800c29a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c29e:	e7a5      	b.n	800c1ec <_svfiprintf_r+0xd4>
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	f04f 0c0a 	mov.w	ip, #10
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	3401      	adds	r4, #1
 800c2aa:	9305      	str	r3, [sp, #20]
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2b2:	3a30      	subs	r2, #48	; 0x30
 800c2b4:	2a09      	cmp	r2, #9
 800c2b6:	d903      	bls.n	800c2c0 <_svfiprintf_r+0x1a8>
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d0c5      	beq.n	800c248 <_svfiprintf_r+0x130>
 800c2bc:	9105      	str	r1, [sp, #20]
 800c2be:	e7c3      	b.n	800c248 <_svfiprintf_r+0x130>
 800c2c0:	4604      	mov	r4, r0
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2c8:	e7f0      	b.n	800c2ac <_svfiprintf_r+0x194>
 800c2ca:	ab03      	add	r3, sp, #12
 800c2cc:	9300      	str	r3, [sp, #0]
 800c2ce:	462a      	mov	r2, r5
 800c2d0:	4638      	mov	r0, r7
 800c2d2:	4b10      	ldr	r3, [pc, #64]	; (800c314 <_svfiprintf_r+0x1fc>)
 800c2d4:	a904      	add	r1, sp, #16
 800c2d6:	f7fd ffcd 	bl	800a274 <_printf_float>
 800c2da:	1c42      	adds	r2, r0, #1
 800c2dc:	4606      	mov	r6, r0
 800c2de:	d1d6      	bne.n	800c28e <_svfiprintf_r+0x176>
 800c2e0:	89ab      	ldrh	r3, [r5, #12]
 800c2e2:	065b      	lsls	r3, r3, #25
 800c2e4:	f53f af2c 	bmi.w	800c140 <_svfiprintf_r+0x28>
 800c2e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2ea:	b01d      	add	sp, #116	; 0x74
 800c2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2f0:	ab03      	add	r3, sp, #12
 800c2f2:	9300      	str	r3, [sp, #0]
 800c2f4:	462a      	mov	r2, r5
 800c2f6:	4638      	mov	r0, r7
 800c2f8:	4b06      	ldr	r3, [pc, #24]	; (800c314 <_svfiprintf_r+0x1fc>)
 800c2fa:	a904      	add	r1, sp, #16
 800c2fc:	f7fe fa56 	bl	800a7ac <_printf_i>
 800c300:	e7eb      	b.n	800c2da <_svfiprintf_r+0x1c2>
 800c302:	bf00      	nop
 800c304:	0800d1f4 	.word	0x0800d1f4
 800c308:	0800d1fa 	.word	0x0800d1fa
 800c30c:	0800d1fe 	.word	0x0800d1fe
 800c310:	0800a275 	.word	0x0800a275
 800c314:	0800c061 	.word	0x0800c061

0800c318 <_sbrk_r>:
 800c318:	b538      	push	{r3, r4, r5, lr}
 800c31a:	2300      	movs	r3, #0
 800c31c:	4d05      	ldr	r5, [pc, #20]	; (800c334 <_sbrk_r+0x1c>)
 800c31e:	4604      	mov	r4, r0
 800c320:	4608      	mov	r0, r1
 800c322:	602b      	str	r3, [r5, #0]
 800c324:	f7f7 f86a 	bl	80033fc <_sbrk>
 800c328:	1c43      	adds	r3, r0, #1
 800c32a:	d102      	bne.n	800c332 <_sbrk_r+0x1a>
 800c32c:	682b      	ldr	r3, [r5, #0]
 800c32e:	b103      	cbz	r3, 800c332 <_sbrk_r+0x1a>
 800c330:	6023      	str	r3, [r4, #0]
 800c332:	bd38      	pop	{r3, r4, r5, pc}
 800c334:	200009a8 	.word	0x200009a8

0800c338 <__assert_func>:
 800c338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c33a:	4614      	mov	r4, r2
 800c33c:	461a      	mov	r2, r3
 800c33e:	4b09      	ldr	r3, [pc, #36]	; (800c364 <__assert_func+0x2c>)
 800c340:	4605      	mov	r5, r0
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	68d8      	ldr	r0, [r3, #12]
 800c346:	b14c      	cbz	r4, 800c35c <__assert_func+0x24>
 800c348:	4b07      	ldr	r3, [pc, #28]	; (800c368 <__assert_func+0x30>)
 800c34a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c34e:	9100      	str	r1, [sp, #0]
 800c350:	462b      	mov	r3, r5
 800c352:	4906      	ldr	r1, [pc, #24]	; (800c36c <__assert_func+0x34>)
 800c354:	f000 f80e 	bl	800c374 <fiprintf>
 800c358:	f000 faaa 	bl	800c8b0 <abort>
 800c35c:	4b04      	ldr	r3, [pc, #16]	; (800c370 <__assert_func+0x38>)
 800c35e:	461c      	mov	r4, r3
 800c360:	e7f3      	b.n	800c34a <__assert_func+0x12>
 800c362:	bf00      	nop
 800c364:	2000008c 	.word	0x2000008c
 800c368:	0800d205 	.word	0x0800d205
 800c36c:	0800d212 	.word	0x0800d212
 800c370:	0800d240 	.word	0x0800d240

0800c374 <fiprintf>:
 800c374:	b40e      	push	{r1, r2, r3}
 800c376:	b503      	push	{r0, r1, lr}
 800c378:	4601      	mov	r1, r0
 800c37a:	ab03      	add	r3, sp, #12
 800c37c:	4805      	ldr	r0, [pc, #20]	; (800c394 <fiprintf+0x20>)
 800c37e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c382:	6800      	ldr	r0, [r0, #0]
 800c384:	9301      	str	r3, [sp, #4]
 800c386:	f000 f895 	bl	800c4b4 <_vfiprintf_r>
 800c38a:	b002      	add	sp, #8
 800c38c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c390:	b003      	add	sp, #12
 800c392:	4770      	bx	lr
 800c394:	2000008c 	.word	0x2000008c

0800c398 <__ascii_mbtowc>:
 800c398:	b082      	sub	sp, #8
 800c39a:	b901      	cbnz	r1, 800c39e <__ascii_mbtowc+0x6>
 800c39c:	a901      	add	r1, sp, #4
 800c39e:	b142      	cbz	r2, 800c3b2 <__ascii_mbtowc+0x1a>
 800c3a0:	b14b      	cbz	r3, 800c3b6 <__ascii_mbtowc+0x1e>
 800c3a2:	7813      	ldrb	r3, [r2, #0]
 800c3a4:	600b      	str	r3, [r1, #0]
 800c3a6:	7812      	ldrb	r2, [r2, #0]
 800c3a8:	1e10      	subs	r0, r2, #0
 800c3aa:	bf18      	it	ne
 800c3ac:	2001      	movne	r0, #1
 800c3ae:	b002      	add	sp, #8
 800c3b0:	4770      	bx	lr
 800c3b2:	4610      	mov	r0, r2
 800c3b4:	e7fb      	b.n	800c3ae <__ascii_mbtowc+0x16>
 800c3b6:	f06f 0001 	mvn.w	r0, #1
 800c3ba:	e7f8      	b.n	800c3ae <__ascii_mbtowc+0x16>

0800c3bc <memmove>:
 800c3bc:	4288      	cmp	r0, r1
 800c3be:	b510      	push	{r4, lr}
 800c3c0:	eb01 0402 	add.w	r4, r1, r2
 800c3c4:	d902      	bls.n	800c3cc <memmove+0x10>
 800c3c6:	4284      	cmp	r4, r0
 800c3c8:	4623      	mov	r3, r4
 800c3ca:	d807      	bhi.n	800c3dc <memmove+0x20>
 800c3cc:	1e43      	subs	r3, r0, #1
 800c3ce:	42a1      	cmp	r1, r4
 800c3d0:	d008      	beq.n	800c3e4 <memmove+0x28>
 800c3d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3da:	e7f8      	b.n	800c3ce <memmove+0x12>
 800c3dc:	4601      	mov	r1, r0
 800c3de:	4402      	add	r2, r0
 800c3e0:	428a      	cmp	r2, r1
 800c3e2:	d100      	bne.n	800c3e6 <memmove+0x2a>
 800c3e4:	bd10      	pop	{r4, pc}
 800c3e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3ee:	e7f7      	b.n	800c3e0 <memmove+0x24>

0800c3f0 <__malloc_lock>:
 800c3f0:	4801      	ldr	r0, [pc, #4]	; (800c3f8 <__malloc_lock+0x8>)
 800c3f2:	f000 bc19 	b.w	800cc28 <__retarget_lock_acquire_recursive>
 800c3f6:	bf00      	nop
 800c3f8:	200009ac 	.word	0x200009ac

0800c3fc <__malloc_unlock>:
 800c3fc:	4801      	ldr	r0, [pc, #4]	; (800c404 <__malloc_unlock+0x8>)
 800c3fe:	f000 bc14 	b.w	800cc2a <__retarget_lock_release_recursive>
 800c402:	bf00      	nop
 800c404:	200009ac 	.word	0x200009ac

0800c408 <_realloc_r>:
 800c408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c40c:	4680      	mov	r8, r0
 800c40e:	4614      	mov	r4, r2
 800c410:	460e      	mov	r6, r1
 800c412:	b921      	cbnz	r1, 800c41e <_realloc_r+0x16>
 800c414:	4611      	mov	r1, r2
 800c416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c41a:	f7ff bdad 	b.w	800bf78 <_malloc_r>
 800c41e:	b92a      	cbnz	r2, 800c42c <_realloc_r+0x24>
 800c420:	f7ff fd42 	bl	800bea8 <_free_r>
 800c424:	4625      	mov	r5, r4
 800c426:	4628      	mov	r0, r5
 800c428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c42c:	f000 fc64 	bl	800ccf8 <_malloc_usable_size_r>
 800c430:	4284      	cmp	r4, r0
 800c432:	4607      	mov	r7, r0
 800c434:	d802      	bhi.n	800c43c <_realloc_r+0x34>
 800c436:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c43a:	d812      	bhi.n	800c462 <_realloc_r+0x5a>
 800c43c:	4621      	mov	r1, r4
 800c43e:	4640      	mov	r0, r8
 800c440:	f7ff fd9a 	bl	800bf78 <_malloc_r>
 800c444:	4605      	mov	r5, r0
 800c446:	2800      	cmp	r0, #0
 800c448:	d0ed      	beq.n	800c426 <_realloc_r+0x1e>
 800c44a:	42bc      	cmp	r4, r7
 800c44c:	4622      	mov	r2, r4
 800c44e:	4631      	mov	r1, r6
 800c450:	bf28      	it	cs
 800c452:	463a      	movcs	r2, r7
 800c454:	f7ff f984 	bl	800b760 <memcpy>
 800c458:	4631      	mov	r1, r6
 800c45a:	4640      	mov	r0, r8
 800c45c:	f7ff fd24 	bl	800bea8 <_free_r>
 800c460:	e7e1      	b.n	800c426 <_realloc_r+0x1e>
 800c462:	4635      	mov	r5, r6
 800c464:	e7df      	b.n	800c426 <_realloc_r+0x1e>

0800c466 <__sfputc_r>:
 800c466:	6893      	ldr	r3, [r2, #8]
 800c468:	b410      	push	{r4}
 800c46a:	3b01      	subs	r3, #1
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	6093      	str	r3, [r2, #8]
 800c470:	da07      	bge.n	800c482 <__sfputc_r+0x1c>
 800c472:	6994      	ldr	r4, [r2, #24]
 800c474:	42a3      	cmp	r3, r4
 800c476:	db01      	blt.n	800c47c <__sfputc_r+0x16>
 800c478:	290a      	cmp	r1, #10
 800c47a:	d102      	bne.n	800c482 <__sfputc_r+0x1c>
 800c47c:	bc10      	pop	{r4}
 800c47e:	f000 b949 	b.w	800c714 <__swbuf_r>
 800c482:	6813      	ldr	r3, [r2, #0]
 800c484:	1c58      	adds	r0, r3, #1
 800c486:	6010      	str	r0, [r2, #0]
 800c488:	7019      	strb	r1, [r3, #0]
 800c48a:	4608      	mov	r0, r1
 800c48c:	bc10      	pop	{r4}
 800c48e:	4770      	bx	lr

0800c490 <__sfputs_r>:
 800c490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c492:	4606      	mov	r6, r0
 800c494:	460f      	mov	r7, r1
 800c496:	4614      	mov	r4, r2
 800c498:	18d5      	adds	r5, r2, r3
 800c49a:	42ac      	cmp	r4, r5
 800c49c:	d101      	bne.n	800c4a2 <__sfputs_r+0x12>
 800c49e:	2000      	movs	r0, #0
 800c4a0:	e007      	b.n	800c4b2 <__sfputs_r+0x22>
 800c4a2:	463a      	mov	r2, r7
 800c4a4:	4630      	mov	r0, r6
 800c4a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4aa:	f7ff ffdc 	bl	800c466 <__sfputc_r>
 800c4ae:	1c43      	adds	r3, r0, #1
 800c4b0:	d1f3      	bne.n	800c49a <__sfputs_r+0xa>
 800c4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c4b4 <_vfiprintf_r>:
 800c4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b8:	460d      	mov	r5, r1
 800c4ba:	4614      	mov	r4, r2
 800c4bc:	4698      	mov	r8, r3
 800c4be:	4606      	mov	r6, r0
 800c4c0:	b09d      	sub	sp, #116	; 0x74
 800c4c2:	b118      	cbz	r0, 800c4cc <_vfiprintf_r+0x18>
 800c4c4:	6983      	ldr	r3, [r0, #24]
 800c4c6:	b90b      	cbnz	r3, 800c4cc <_vfiprintf_r+0x18>
 800c4c8:	f000 fb10 	bl	800caec <__sinit>
 800c4cc:	4b89      	ldr	r3, [pc, #548]	; (800c6f4 <_vfiprintf_r+0x240>)
 800c4ce:	429d      	cmp	r5, r3
 800c4d0:	d11b      	bne.n	800c50a <_vfiprintf_r+0x56>
 800c4d2:	6875      	ldr	r5, [r6, #4]
 800c4d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4d6:	07d9      	lsls	r1, r3, #31
 800c4d8:	d405      	bmi.n	800c4e6 <_vfiprintf_r+0x32>
 800c4da:	89ab      	ldrh	r3, [r5, #12]
 800c4dc:	059a      	lsls	r2, r3, #22
 800c4de:	d402      	bmi.n	800c4e6 <_vfiprintf_r+0x32>
 800c4e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4e2:	f000 fba1 	bl	800cc28 <__retarget_lock_acquire_recursive>
 800c4e6:	89ab      	ldrh	r3, [r5, #12]
 800c4e8:	071b      	lsls	r3, r3, #28
 800c4ea:	d501      	bpl.n	800c4f0 <_vfiprintf_r+0x3c>
 800c4ec:	692b      	ldr	r3, [r5, #16]
 800c4ee:	b9eb      	cbnz	r3, 800c52c <_vfiprintf_r+0x78>
 800c4f0:	4629      	mov	r1, r5
 800c4f2:	4630      	mov	r0, r6
 800c4f4:	f000 f96e 	bl	800c7d4 <__swsetup_r>
 800c4f8:	b1c0      	cbz	r0, 800c52c <_vfiprintf_r+0x78>
 800c4fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4fc:	07dc      	lsls	r4, r3, #31
 800c4fe:	d50e      	bpl.n	800c51e <_vfiprintf_r+0x6a>
 800c500:	f04f 30ff 	mov.w	r0, #4294967295
 800c504:	b01d      	add	sp, #116	; 0x74
 800c506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c50a:	4b7b      	ldr	r3, [pc, #492]	; (800c6f8 <_vfiprintf_r+0x244>)
 800c50c:	429d      	cmp	r5, r3
 800c50e:	d101      	bne.n	800c514 <_vfiprintf_r+0x60>
 800c510:	68b5      	ldr	r5, [r6, #8]
 800c512:	e7df      	b.n	800c4d4 <_vfiprintf_r+0x20>
 800c514:	4b79      	ldr	r3, [pc, #484]	; (800c6fc <_vfiprintf_r+0x248>)
 800c516:	429d      	cmp	r5, r3
 800c518:	bf08      	it	eq
 800c51a:	68f5      	ldreq	r5, [r6, #12]
 800c51c:	e7da      	b.n	800c4d4 <_vfiprintf_r+0x20>
 800c51e:	89ab      	ldrh	r3, [r5, #12]
 800c520:	0598      	lsls	r0, r3, #22
 800c522:	d4ed      	bmi.n	800c500 <_vfiprintf_r+0x4c>
 800c524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c526:	f000 fb80 	bl	800cc2a <__retarget_lock_release_recursive>
 800c52a:	e7e9      	b.n	800c500 <_vfiprintf_r+0x4c>
 800c52c:	2300      	movs	r3, #0
 800c52e:	9309      	str	r3, [sp, #36]	; 0x24
 800c530:	2320      	movs	r3, #32
 800c532:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c536:	2330      	movs	r3, #48	; 0x30
 800c538:	f04f 0901 	mov.w	r9, #1
 800c53c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c540:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c700 <_vfiprintf_r+0x24c>
 800c544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c548:	4623      	mov	r3, r4
 800c54a:	469a      	mov	sl, r3
 800c54c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c550:	b10a      	cbz	r2, 800c556 <_vfiprintf_r+0xa2>
 800c552:	2a25      	cmp	r2, #37	; 0x25
 800c554:	d1f9      	bne.n	800c54a <_vfiprintf_r+0x96>
 800c556:	ebba 0b04 	subs.w	fp, sl, r4
 800c55a:	d00b      	beq.n	800c574 <_vfiprintf_r+0xc0>
 800c55c:	465b      	mov	r3, fp
 800c55e:	4622      	mov	r2, r4
 800c560:	4629      	mov	r1, r5
 800c562:	4630      	mov	r0, r6
 800c564:	f7ff ff94 	bl	800c490 <__sfputs_r>
 800c568:	3001      	adds	r0, #1
 800c56a:	f000 80aa 	beq.w	800c6c2 <_vfiprintf_r+0x20e>
 800c56e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c570:	445a      	add	r2, fp
 800c572:	9209      	str	r2, [sp, #36]	; 0x24
 800c574:	f89a 3000 	ldrb.w	r3, [sl]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	f000 80a2 	beq.w	800c6c2 <_vfiprintf_r+0x20e>
 800c57e:	2300      	movs	r3, #0
 800c580:	f04f 32ff 	mov.w	r2, #4294967295
 800c584:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c588:	f10a 0a01 	add.w	sl, sl, #1
 800c58c:	9304      	str	r3, [sp, #16]
 800c58e:	9307      	str	r3, [sp, #28]
 800c590:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c594:	931a      	str	r3, [sp, #104]	; 0x68
 800c596:	4654      	mov	r4, sl
 800c598:	2205      	movs	r2, #5
 800c59a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c59e:	4858      	ldr	r0, [pc, #352]	; (800c700 <_vfiprintf_r+0x24c>)
 800c5a0:	f7ff f8d0 	bl	800b744 <memchr>
 800c5a4:	9a04      	ldr	r2, [sp, #16]
 800c5a6:	b9d8      	cbnz	r0, 800c5e0 <_vfiprintf_r+0x12c>
 800c5a8:	06d1      	lsls	r1, r2, #27
 800c5aa:	bf44      	itt	mi
 800c5ac:	2320      	movmi	r3, #32
 800c5ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5b2:	0713      	lsls	r3, r2, #28
 800c5b4:	bf44      	itt	mi
 800c5b6:	232b      	movmi	r3, #43	; 0x2b
 800c5b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5bc:	f89a 3000 	ldrb.w	r3, [sl]
 800c5c0:	2b2a      	cmp	r3, #42	; 0x2a
 800c5c2:	d015      	beq.n	800c5f0 <_vfiprintf_r+0x13c>
 800c5c4:	4654      	mov	r4, sl
 800c5c6:	2000      	movs	r0, #0
 800c5c8:	f04f 0c0a 	mov.w	ip, #10
 800c5cc:	9a07      	ldr	r2, [sp, #28]
 800c5ce:	4621      	mov	r1, r4
 800c5d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5d4:	3b30      	subs	r3, #48	; 0x30
 800c5d6:	2b09      	cmp	r3, #9
 800c5d8:	d94e      	bls.n	800c678 <_vfiprintf_r+0x1c4>
 800c5da:	b1b0      	cbz	r0, 800c60a <_vfiprintf_r+0x156>
 800c5dc:	9207      	str	r2, [sp, #28]
 800c5de:	e014      	b.n	800c60a <_vfiprintf_r+0x156>
 800c5e0:	eba0 0308 	sub.w	r3, r0, r8
 800c5e4:	fa09 f303 	lsl.w	r3, r9, r3
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	46a2      	mov	sl, r4
 800c5ec:	9304      	str	r3, [sp, #16]
 800c5ee:	e7d2      	b.n	800c596 <_vfiprintf_r+0xe2>
 800c5f0:	9b03      	ldr	r3, [sp, #12]
 800c5f2:	1d19      	adds	r1, r3, #4
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	9103      	str	r1, [sp, #12]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	bfbb      	ittet	lt
 800c5fc:	425b      	neglt	r3, r3
 800c5fe:	f042 0202 	orrlt.w	r2, r2, #2
 800c602:	9307      	strge	r3, [sp, #28]
 800c604:	9307      	strlt	r3, [sp, #28]
 800c606:	bfb8      	it	lt
 800c608:	9204      	strlt	r2, [sp, #16]
 800c60a:	7823      	ldrb	r3, [r4, #0]
 800c60c:	2b2e      	cmp	r3, #46	; 0x2e
 800c60e:	d10c      	bne.n	800c62a <_vfiprintf_r+0x176>
 800c610:	7863      	ldrb	r3, [r4, #1]
 800c612:	2b2a      	cmp	r3, #42	; 0x2a
 800c614:	d135      	bne.n	800c682 <_vfiprintf_r+0x1ce>
 800c616:	9b03      	ldr	r3, [sp, #12]
 800c618:	3402      	adds	r4, #2
 800c61a:	1d1a      	adds	r2, r3, #4
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	9203      	str	r2, [sp, #12]
 800c620:	2b00      	cmp	r3, #0
 800c622:	bfb8      	it	lt
 800c624:	f04f 33ff 	movlt.w	r3, #4294967295
 800c628:	9305      	str	r3, [sp, #20]
 800c62a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c704 <_vfiprintf_r+0x250>
 800c62e:	2203      	movs	r2, #3
 800c630:	4650      	mov	r0, sl
 800c632:	7821      	ldrb	r1, [r4, #0]
 800c634:	f7ff f886 	bl	800b744 <memchr>
 800c638:	b140      	cbz	r0, 800c64c <_vfiprintf_r+0x198>
 800c63a:	2340      	movs	r3, #64	; 0x40
 800c63c:	eba0 000a 	sub.w	r0, r0, sl
 800c640:	fa03 f000 	lsl.w	r0, r3, r0
 800c644:	9b04      	ldr	r3, [sp, #16]
 800c646:	3401      	adds	r4, #1
 800c648:	4303      	orrs	r3, r0
 800c64a:	9304      	str	r3, [sp, #16]
 800c64c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c650:	2206      	movs	r2, #6
 800c652:	482d      	ldr	r0, [pc, #180]	; (800c708 <_vfiprintf_r+0x254>)
 800c654:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c658:	f7ff f874 	bl	800b744 <memchr>
 800c65c:	2800      	cmp	r0, #0
 800c65e:	d03f      	beq.n	800c6e0 <_vfiprintf_r+0x22c>
 800c660:	4b2a      	ldr	r3, [pc, #168]	; (800c70c <_vfiprintf_r+0x258>)
 800c662:	bb1b      	cbnz	r3, 800c6ac <_vfiprintf_r+0x1f8>
 800c664:	9b03      	ldr	r3, [sp, #12]
 800c666:	3307      	adds	r3, #7
 800c668:	f023 0307 	bic.w	r3, r3, #7
 800c66c:	3308      	adds	r3, #8
 800c66e:	9303      	str	r3, [sp, #12]
 800c670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c672:	443b      	add	r3, r7
 800c674:	9309      	str	r3, [sp, #36]	; 0x24
 800c676:	e767      	b.n	800c548 <_vfiprintf_r+0x94>
 800c678:	460c      	mov	r4, r1
 800c67a:	2001      	movs	r0, #1
 800c67c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c680:	e7a5      	b.n	800c5ce <_vfiprintf_r+0x11a>
 800c682:	2300      	movs	r3, #0
 800c684:	f04f 0c0a 	mov.w	ip, #10
 800c688:	4619      	mov	r1, r3
 800c68a:	3401      	adds	r4, #1
 800c68c:	9305      	str	r3, [sp, #20]
 800c68e:	4620      	mov	r0, r4
 800c690:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c694:	3a30      	subs	r2, #48	; 0x30
 800c696:	2a09      	cmp	r2, #9
 800c698:	d903      	bls.n	800c6a2 <_vfiprintf_r+0x1ee>
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d0c5      	beq.n	800c62a <_vfiprintf_r+0x176>
 800c69e:	9105      	str	r1, [sp, #20]
 800c6a0:	e7c3      	b.n	800c62a <_vfiprintf_r+0x176>
 800c6a2:	4604      	mov	r4, r0
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6aa:	e7f0      	b.n	800c68e <_vfiprintf_r+0x1da>
 800c6ac:	ab03      	add	r3, sp, #12
 800c6ae:	9300      	str	r3, [sp, #0]
 800c6b0:	462a      	mov	r2, r5
 800c6b2:	4630      	mov	r0, r6
 800c6b4:	4b16      	ldr	r3, [pc, #88]	; (800c710 <_vfiprintf_r+0x25c>)
 800c6b6:	a904      	add	r1, sp, #16
 800c6b8:	f7fd fddc 	bl	800a274 <_printf_float>
 800c6bc:	4607      	mov	r7, r0
 800c6be:	1c78      	adds	r0, r7, #1
 800c6c0:	d1d6      	bne.n	800c670 <_vfiprintf_r+0x1bc>
 800c6c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6c4:	07d9      	lsls	r1, r3, #31
 800c6c6:	d405      	bmi.n	800c6d4 <_vfiprintf_r+0x220>
 800c6c8:	89ab      	ldrh	r3, [r5, #12]
 800c6ca:	059a      	lsls	r2, r3, #22
 800c6cc:	d402      	bmi.n	800c6d4 <_vfiprintf_r+0x220>
 800c6ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6d0:	f000 faab 	bl	800cc2a <__retarget_lock_release_recursive>
 800c6d4:	89ab      	ldrh	r3, [r5, #12]
 800c6d6:	065b      	lsls	r3, r3, #25
 800c6d8:	f53f af12 	bmi.w	800c500 <_vfiprintf_r+0x4c>
 800c6dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6de:	e711      	b.n	800c504 <_vfiprintf_r+0x50>
 800c6e0:	ab03      	add	r3, sp, #12
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	462a      	mov	r2, r5
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	4b09      	ldr	r3, [pc, #36]	; (800c710 <_vfiprintf_r+0x25c>)
 800c6ea:	a904      	add	r1, sp, #16
 800c6ec:	f7fe f85e 	bl	800a7ac <_printf_i>
 800c6f0:	e7e4      	b.n	800c6bc <_vfiprintf_r+0x208>
 800c6f2:	bf00      	nop
 800c6f4:	0800d36c 	.word	0x0800d36c
 800c6f8:	0800d38c 	.word	0x0800d38c
 800c6fc:	0800d34c 	.word	0x0800d34c
 800c700:	0800d1f4 	.word	0x0800d1f4
 800c704:	0800d1fa 	.word	0x0800d1fa
 800c708:	0800d1fe 	.word	0x0800d1fe
 800c70c:	0800a275 	.word	0x0800a275
 800c710:	0800c491 	.word	0x0800c491

0800c714 <__swbuf_r>:
 800c714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c716:	460e      	mov	r6, r1
 800c718:	4614      	mov	r4, r2
 800c71a:	4605      	mov	r5, r0
 800c71c:	b118      	cbz	r0, 800c726 <__swbuf_r+0x12>
 800c71e:	6983      	ldr	r3, [r0, #24]
 800c720:	b90b      	cbnz	r3, 800c726 <__swbuf_r+0x12>
 800c722:	f000 f9e3 	bl	800caec <__sinit>
 800c726:	4b21      	ldr	r3, [pc, #132]	; (800c7ac <__swbuf_r+0x98>)
 800c728:	429c      	cmp	r4, r3
 800c72a:	d12b      	bne.n	800c784 <__swbuf_r+0x70>
 800c72c:	686c      	ldr	r4, [r5, #4]
 800c72e:	69a3      	ldr	r3, [r4, #24]
 800c730:	60a3      	str	r3, [r4, #8]
 800c732:	89a3      	ldrh	r3, [r4, #12]
 800c734:	071a      	lsls	r2, r3, #28
 800c736:	d52f      	bpl.n	800c798 <__swbuf_r+0x84>
 800c738:	6923      	ldr	r3, [r4, #16]
 800c73a:	b36b      	cbz	r3, 800c798 <__swbuf_r+0x84>
 800c73c:	6923      	ldr	r3, [r4, #16]
 800c73e:	6820      	ldr	r0, [r4, #0]
 800c740:	b2f6      	uxtb	r6, r6
 800c742:	1ac0      	subs	r0, r0, r3
 800c744:	6963      	ldr	r3, [r4, #20]
 800c746:	4637      	mov	r7, r6
 800c748:	4283      	cmp	r3, r0
 800c74a:	dc04      	bgt.n	800c756 <__swbuf_r+0x42>
 800c74c:	4621      	mov	r1, r4
 800c74e:	4628      	mov	r0, r5
 800c750:	f000 f938 	bl	800c9c4 <_fflush_r>
 800c754:	bb30      	cbnz	r0, 800c7a4 <__swbuf_r+0x90>
 800c756:	68a3      	ldr	r3, [r4, #8]
 800c758:	3001      	adds	r0, #1
 800c75a:	3b01      	subs	r3, #1
 800c75c:	60a3      	str	r3, [r4, #8]
 800c75e:	6823      	ldr	r3, [r4, #0]
 800c760:	1c5a      	adds	r2, r3, #1
 800c762:	6022      	str	r2, [r4, #0]
 800c764:	701e      	strb	r6, [r3, #0]
 800c766:	6963      	ldr	r3, [r4, #20]
 800c768:	4283      	cmp	r3, r0
 800c76a:	d004      	beq.n	800c776 <__swbuf_r+0x62>
 800c76c:	89a3      	ldrh	r3, [r4, #12]
 800c76e:	07db      	lsls	r3, r3, #31
 800c770:	d506      	bpl.n	800c780 <__swbuf_r+0x6c>
 800c772:	2e0a      	cmp	r6, #10
 800c774:	d104      	bne.n	800c780 <__swbuf_r+0x6c>
 800c776:	4621      	mov	r1, r4
 800c778:	4628      	mov	r0, r5
 800c77a:	f000 f923 	bl	800c9c4 <_fflush_r>
 800c77e:	b988      	cbnz	r0, 800c7a4 <__swbuf_r+0x90>
 800c780:	4638      	mov	r0, r7
 800c782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c784:	4b0a      	ldr	r3, [pc, #40]	; (800c7b0 <__swbuf_r+0x9c>)
 800c786:	429c      	cmp	r4, r3
 800c788:	d101      	bne.n	800c78e <__swbuf_r+0x7a>
 800c78a:	68ac      	ldr	r4, [r5, #8]
 800c78c:	e7cf      	b.n	800c72e <__swbuf_r+0x1a>
 800c78e:	4b09      	ldr	r3, [pc, #36]	; (800c7b4 <__swbuf_r+0xa0>)
 800c790:	429c      	cmp	r4, r3
 800c792:	bf08      	it	eq
 800c794:	68ec      	ldreq	r4, [r5, #12]
 800c796:	e7ca      	b.n	800c72e <__swbuf_r+0x1a>
 800c798:	4621      	mov	r1, r4
 800c79a:	4628      	mov	r0, r5
 800c79c:	f000 f81a 	bl	800c7d4 <__swsetup_r>
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	d0cb      	beq.n	800c73c <__swbuf_r+0x28>
 800c7a4:	f04f 37ff 	mov.w	r7, #4294967295
 800c7a8:	e7ea      	b.n	800c780 <__swbuf_r+0x6c>
 800c7aa:	bf00      	nop
 800c7ac:	0800d36c 	.word	0x0800d36c
 800c7b0:	0800d38c 	.word	0x0800d38c
 800c7b4:	0800d34c 	.word	0x0800d34c

0800c7b8 <__ascii_wctomb>:
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	4608      	mov	r0, r1
 800c7bc:	b141      	cbz	r1, 800c7d0 <__ascii_wctomb+0x18>
 800c7be:	2aff      	cmp	r2, #255	; 0xff
 800c7c0:	d904      	bls.n	800c7cc <__ascii_wctomb+0x14>
 800c7c2:	228a      	movs	r2, #138	; 0x8a
 800c7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c8:	601a      	str	r2, [r3, #0]
 800c7ca:	4770      	bx	lr
 800c7cc:	2001      	movs	r0, #1
 800c7ce:	700a      	strb	r2, [r1, #0]
 800c7d0:	4770      	bx	lr
	...

0800c7d4 <__swsetup_r>:
 800c7d4:	4b32      	ldr	r3, [pc, #200]	; (800c8a0 <__swsetup_r+0xcc>)
 800c7d6:	b570      	push	{r4, r5, r6, lr}
 800c7d8:	681d      	ldr	r5, [r3, #0]
 800c7da:	4606      	mov	r6, r0
 800c7dc:	460c      	mov	r4, r1
 800c7de:	b125      	cbz	r5, 800c7ea <__swsetup_r+0x16>
 800c7e0:	69ab      	ldr	r3, [r5, #24]
 800c7e2:	b913      	cbnz	r3, 800c7ea <__swsetup_r+0x16>
 800c7e4:	4628      	mov	r0, r5
 800c7e6:	f000 f981 	bl	800caec <__sinit>
 800c7ea:	4b2e      	ldr	r3, [pc, #184]	; (800c8a4 <__swsetup_r+0xd0>)
 800c7ec:	429c      	cmp	r4, r3
 800c7ee:	d10f      	bne.n	800c810 <__swsetup_r+0x3c>
 800c7f0:	686c      	ldr	r4, [r5, #4]
 800c7f2:	89a3      	ldrh	r3, [r4, #12]
 800c7f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7f8:	0719      	lsls	r1, r3, #28
 800c7fa:	d42c      	bmi.n	800c856 <__swsetup_r+0x82>
 800c7fc:	06dd      	lsls	r5, r3, #27
 800c7fe:	d411      	bmi.n	800c824 <__swsetup_r+0x50>
 800c800:	2309      	movs	r3, #9
 800c802:	6033      	str	r3, [r6, #0]
 800c804:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c808:	f04f 30ff 	mov.w	r0, #4294967295
 800c80c:	81a3      	strh	r3, [r4, #12]
 800c80e:	e03e      	b.n	800c88e <__swsetup_r+0xba>
 800c810:	4b25      	ldr	r3, [pc, #148]	; (800c8a8 <__swsetup_r+0xd4>)
 800c812:	429c      	cmp	r4, r3
 800c814:	d101      	bne.n	800c81a <__swsetup_r+0x46>
 800c816:	68ac      	ldr	r4, [r5, #8]
 800c818:	e7eb      	b.n	800c7f2 <__swsetup_r+0x1e>
 800c81a:	4b24      	ldr	r3, [pc, #144]	; (800c8ac <__swsetup_r+0xd8>)
 800c81c:	429c      	cmp	r4, r3
 800c81e:	bf08      	it	eq
 800c820:	68ec      	ldreq	r4, [r5, #12]
 800c822:	e7e6      	b.n	800c7f2 <__swsetup_r+0x1e>
 800c824:	0758      	lsls	r0, r3, #29
 800c826:	d512      	bpl.n	800c84e <__swsetup_r+0x7a>
 800c828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c82a:	b141      	cbz	r1, 800c83e <__swsetup_r+0x6a>
 800c82c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c830:	4299      	cmp	r1, r3
 800c832:	d002      	beq.n	800c83a <__swsetup_r+0x66>
 800c834:	4630      	mov	r0, r6
 800c836:	f7ff fb37 	bl	800bea8 <_free_r>
 800c83a:	2300      	movs	r3, #0
 800c83c:	6363      	str	r3, [r4, #52]	; 0x34
 800c83e:	89a3      	ldrh	r3, [r4, #12]
 800c840:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c844:	81a3      	strh	r3, [r4, #12]
 800c846:	2300      	movs	r3, #0
 800c848:	6063      	str	r3, [r4, #4]
 800c84a:	6923      	ldr	r3, [r4, #16]
 800c84c:	6023      	str	r3, [r4, #0]
 800c84e:	89a3      	ldrh	r3, [r4, #12]
 800c850:	f043 0308 	orr.w	r3, r3, #8
 800c854:	81a3      	strh	r3, [r4, #12]
 800c856:	6923      	ldr	r3, [r4, #16]
 800c858:	b94b      	cbnz	r3, 800c86e <__swsetup_r+0x9a>
 800c85a:	89a3      	ldrh	r3, [r4, #12]
 800c85c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c864:	d003      	beq.n	800c86e <__swsetup_r+0x9a>
 800c866:	4621      	mov	r1, r4
 800c868:	4630      	mov	r0, r6
 800c86a:	f000 fa05 	bl	800cc78 <__smakebuf_r>
 800c86e:	89a0      	ldrh	r0, [r4, #12]
 800c870:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c874:	f010 0301 	ands.w	r3, r0, #1
 800c878:	d00a      	beq.n	800c890 <__swsetup_r+0xbc>
 800c87a:	2300      	movs	r3, #0
 800c87c:	60a3      	str	r3, [r4, #8]
 800c87e:	6963      	ldr	r3, [r4, #20]
 800c880:	425b      	negs	r3, r3
 800c882:	61a3      	str	r3, [r4, #24]
 800c884:	6923      	ldr	r3, [r4, #16]
 800c886:	b943      	cbnz	r3, 800c89a <__swsetup_r+0xc6>
 800c888:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c88c:	d1ba      	bne.n	800c804 <__swsetup_r+0x30>
 800c88e:	bd70      	pop	{r4, r5, r6, pc}
 800c890:	0781      	lsls	r1, r0, #30
 800c892:	bf58      	it	pl
 800c894:	6963      	ldrpl	r3, [r4, #20]
 800c896:	60a3      	str	r3, [r4, #8]
 800c898:	e7f4      	b.n	800c884 <__swsetup_r+0xb0>
 800c89a:	2000      	movs	r0, #0
 800c89c:	e7f7      	b.n	800c88e <__swsetup_r+0xba>
 800c89e:	bf00      	nop
 800c8a0:	2000008c 	.word	0x2000008c
 800c8a4:	0800d36c 	.word	0x0800d36c
 800c8a8:	0800d38c 	.word	0x0800d38c
 800c8ac:	0800d34c 	.word	0x0800d34c

0800c8b0 <abort>:
 800c8b0:	2006      	movs	r0, #6
 800c8b2:	b508      	push	{r3, lr}
 800c8b4:	f000 fa50 	bl	800cd58 <raise>
 800c8b8:	2001      	movs	r0, #1
 800c8ba:	f7f6 fd2c 	bl	8003316 <_exit>
	...

0800c8c0 <__sflush_r>:
 800c8c0:	898a      	ldrh	r2, [r1, #12]
 800c8c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c4:	4605      	mov	r5, r0
 800c8c6:	0710      	lsls	r0, r2, #28
 800c8c8:	460c      	mov	r4, r1
 800c8ca:	d457      	bmi.n	800c97c <__sflush_r+0xbc>
 800c8cc:	684b      	ldr	r3, [r1, #4]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	dc04      	bgt.n	800c8dc <__sflush_r+0x1c>
 800c8d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	dc01      	bgt.n	800c8dc <__sflush_r+0x1c>
 800c8d8:	2000      	movs	r0, #0
 800c8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8de:	2e00      	cmp	r6, #0
 800c8e0:	d0fa      	beq.n	800c8d8 <__sflush_r+0x18>
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c8e8:	682f      	ldr	r7, [r5, #0]
 800c8ea:	602b      	str	r3, [r5, #0]
 800c8ec:	d032      	beq.n	800c954 <__sflush_r+0x94>
 800c8ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c8f0:	89a3      	ldrh	r3, [r4, #12]
 800c8f2:	075a      	lsls	r2, r3, #29
 800c8f4:	d505      	bpl.n	800c902 <__sflush_r+0x42>
 800c8f6:	6863      	ldr	r3, [r4, #4]
 800c8f8:	1ac0      	subs	r0, r0, r3
 800c8fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c8fc:	b10b      	cbz	r3, 800c902 <__sflush_r+0x42>
 800c8fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c900:	1ac0      	subs	r0, r0, r3
 800c902:	2300      	movs	r3, #0
 800c904:	4602      	mov	r2, r0
 800c906:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c908:	4628      	mov	r0, r5
 800c90a:	6a21      	ldr	r1, [r4, #32]
 800c90c:	47b0      	blx	r6
 800c90e:	1c43      	adds	r3, r0, #1
 800c910:	89a3      	ldrh	r3, [r4, #12]
 800c912:	d106      	bne.n	800c922 <__sflush_r+0x62>
 800c914:	6829      	ldr	r1, [r5, #0]
 800c916:	291d      	cmp	r1, #29
 800c918:	d82c      	bhi.n	800c974 <__sflush_r+0xb4>
 800c91a:	4a29      	ldr	r2, [pc, #164]	; (800c9c0 <__sflush_r+0x100>)
 800c91c:	40ca      	lsrs	r2, r1
 800c91e:	07d6      	lsls	r6, r2, #31
 800c920:	d528      	bpl.n	800c974 <__sflush_r+0xb4>
 800c922:	2200      	movs	r2, #0
 800c924:	6062      	str	r2, [r4, #4]
 800c926:	6922      	ldr	r2, [r4, #16]
 800c928:	04d9      	lsls	r1, r3, #19
 800c92a:	6022      	str	r2, [r4, #0]
 800c92c:	d504      	bpl.n	800c938 <__sflush_r+0x78>
 800c92e:	1c42      	adds	r2, r0, #1
 800c930:	d101      	bne.n	800c936 <__sflush_r+0x76>
 800c932:	682b      	ldr	r3, [r5, #0]
 800c934:	b903      	cbnz	r3, 800c938 <__sflush_r+0x78>
 800c936:	6560      	str	r0, [r4, #84]	; 0x54
 800c938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c93a:	602f      	str	r7, [r5, #0]
 800c93c:	2900      	cmp	r1, #0
 800c93e:	d0cb      	beq.n	800c8d8 <__sflush_r+0x18>
 800c940:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c944:	4299      	cmp	r1, r3
 800c946:	d002      	beq.n	800c94e <__sflush_r+0x8e>
 800c948:	4628      	mov	r0, r5
 800c94a:	f7ff faad 	bl	800bea8 <_free_r>
 800c94e:	2000      	movs	r0, #0
 800c950:	6360      	str	r0, [r4, #52]	; 0x34
 800c952:	e7c2      	b.n	800c8da <__sflush_r+0x1a>
 800c954:	6a21      	ldr	r1, [r4, #32]
 800c956:	2301      	movs	r3, #1
 800c958:	4628      	mov	r0, r5
 800c95a:	47b0      	blx	r6
 800c95c:	1c41      	adds	r1, r0, #1
 800c95e:	d1c7      	bne.n	800c8f0 <__sflush_r+0x30>
 800c960:	682b      	ldr	r3, [r5, #0]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d0c4      	beq.n	800c8f0 <__sflush_r+0x30>
 800c966:	2b1d      	cmp	r3, #29
 800c968:	d001      	beq.n	800c96e <__sflush_r+0xae>
 800c96a:	2b16      	cmp	r3, #22
 800c96c:	d101      	bne.n	800c972 <__sflush_r+0xb2>
 800c96e:	602f      	str	r7, [r5, #0]
 800c970:	e7b2      	b.n	800c8d8 <__sflush_r+0x18>
 800c972:	89a3      	ldrh	r3, [r4, #12]
 800c974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c978:	81a3      	strh	r3, [r4, #12]
 800c97a:	e7ae      	b.n	800c8da <__sflush_r+0x1a>
 800c97c:	690f      	ldr	r7, [r1, #16]
 800c97e:	2f00      	cmp	r7, #0
 800c980:	d0aa      	beq.n	800c8d8 <__sflush_r+0x18>
 800c982:	0793      	lsls	r3, r2, #30
 800c984:	bf18      	it	ne
 800c986:	2300      	movne	r3, #0
 800c988:	680e      	ldr	r6, [r1, #0]
 800c98a:	bf08      	it	eq
 800c98c:	694b      	ldreq	r3, [r1, #20]
 800c98e:	1bf6      	subs	r6, r6, r7
 800c990:	600f      	str	r7, [r1, #0]
 800c992:	608b      	str	r3, [r1, #8]
 800c994:	2e00      	cmp	r6, #0
 800c996:	dd9f      	ble.n	800c8d8 <__sflush_r+0x18>
 800c998:	4633      	mov	r3, r6
 800c99a:	463a      	mov	r2, r7
 800c99c:	4628      	mov	r0, r5
 800c99e:	6a21      	ldr	r1, [r4, #32]
 800c9a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c9a4:	47e0      	blx	ip
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	dc06      	bgt.n	800c9b8 <__sflush_r+0xf8>
 800c9aa:	89a3      	ldrh	r3, [r4, #12]
 800c9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9b4:	81a3      	strh	r3, [r4, #12]
 800c9b6:	e790      	b.n	800c8da <__sflush_r+0x1a>
 800c9b8:	4407      	add	r7, r0
 800c9ba:	1a36      	subs	r6, r6, r0
 800c9bc:	e7ea      	b.n	800c994 <__sflush_r+0xd4>
 800c9be:	bf00      	nop
 800c9c0:	20400001 	.word	0x20400001

0800c9c4 <_fflush_r>:
 800c9c4:	b538      	push	{r3, r4, r5, lr}
 800c9c6:	690b      	ldr	r3, [r1, #16]
 800c9c8:	4605      	mov	r5, r0
 800c9ca:	460c      	mov	r4, r1
 800c9cc:	b913      	cbnz	r3, 800c9d4 <_fflush_r+0x10>
 800c9ce:	2500      	movs	r5, #0
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	bd38      	pop	{r3, r4, r5, pc}
 800c9d4:	b118      	cbz	r0, 800c9de <_fflush_r+0x1a>
 800c9d6:	6983      	ldr	r3, [r0, #24]
 800c9d8:	b90b      	cbnz	r3, 800c9de <_fflush_r+0x1a>
 800c9da:	f000 f887 	bl	800caec <__sinit>
 800c9de:	4b14      	ldr	r3, [pc, #80]	; (800ca30 <_fflush_r+0x6c>)
 800c9e0:	429c      	cmp	r4, r3
 800c9e2:	d11b      	bne.n	800ca1c <_fflush_r+0x58>
 800c9e4:	686c      	ldr	r4, [r5, #4]
 800c9e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d0ef      	beq.n	800c9ce <_fflush_r+0xa>
 800c9ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c9f0:	07d0      	lsls	r0, r2, #31
 800c9f2:	d404      	bmi.n	800c9fe <_fflush_r+0x3a>
 800c9f4:	0599      	lsls	r1, r3, #22
 800c9f6:	d402      	bmi.n	800c9fe <_fflush_r+0x3a>
 800c9f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9fa:	f000 f915 	bl	800cc28 <__retarget_lock_acquire_recursive>
 800c9fe:	4628      	mov	r0, r5
 800ca00:	4621      	mov	r1, r4
 800ca02:	f7ff ff5d 	bl	800c8c0 <__sflush_r>
 800ca06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca08:	4605      	mov	r5, r0
 800ca0a:	07da      	lsls	r2, r3, #31
 800ca0c:	d4e0      	bmi.n	800c9d0 <_fflush_r+0xc>
 800ca0e:	89a3      	ldrh	r3, [r4, #12]
 800ca10:	059b      	lsls	r3, r3, #22
 800ca12:	d4dd      	bmi.n	800c9d0 <_fflush_r+0xc>
 800ca14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca16:	f000 f908 	bl	800cc2a <__retarget_lock_release_recursive>
 800ca1a:	e7d9      	b.n	800c9d0 <_fflush_r+0xc>
 800ca1c:	4b05      	ldr	r3, [pc, #20]	; (800ca34 <_fflush_r+0x70>)
 800ca1e:	429c      	cmp	r4, r3
 800ca20:	d101      	bne.n	800ca26 <_fflush_r+0x62>
 800ca22:	68ac      	ldr	r4, [r5, #8]
 800ca24:	e7df      	b.n	800c9e6 <_fflush_r+0x22>
 800ca26:	4b04      	ldr	r3, [pc, #16]	; (800ca38 <_fflush_r+0x74>)
 800ca28:	429c      	cmp	r4, r3
 800ca2a:	bf08      	it	eq
 800ca2c:	68ec      	ldreq	r4, [r5, #12]
 800ca2e:	e7da      	b.n	800c9e6 <_fflush_r+0x22>
 800ca30:	0800d36c 	.word	0x0800d36c
 800ca34:	0800d38c 	.word	0x0800d38c
 800ca38:	0800d34c 	.word	0x0800d34c

0800ca3c <std>:
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	b510      	push	{r4, lr}
 800ca40:	4604      	mov	r4, r0
 800ca42:	e9c0 3300 	strd	r3, r3, [r0]
 800ca46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca4a:	6083      	str	r3, [r0, #8]
 800ca4c:	8181      	strh	r1, [r0, #12]
 800ca4e:	6643      	str	r3, [r0, #100]	; 0x64
 800ca50:	81c2      	strh	r2, [r0, #14]
 800ca52:	6183      	str	r3, [r0, #24]
 800ca54:	4619      	mov	r1, r3
 800ca56:	2208      	movs	r2, #8
 800ca58:	305c      	adds	r0, #92	; 0x5c
 800ca5a:	f7fd fb65 	bl	800a128 <memset>
 800ca5e:	4b05      	ldr	r3, [pc, #20]	; (800ca74 <std+0x38>)
 800ca60:	6224      	str	r4, [r4, #32]
 800ca62:	6263      	str	r3, [r4, #36]	; 0x24
 800ca64:	4b04      	ldr	r3, [pc, #16]	; (800ca78 <std+0x3c>)
 800ca66:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca68:	4b04      	ldr	r3, [pc, #16]	; (800ca7c <std+0x40>)
 800ca6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca6c:	4b04      	ldr	r3, [pc, #16]	; (800ca80 <std+0x44>)
 800ca6e:	6323      	str	r3, [r4, #48]	; 0x30
 800ca70:	bd10      	pop	{r4, pc}
 800ca72:	bf00      	nop
 800ca74:	0800cd91 	.word	0x0800cd91
 800ca78:	0800cdb3 	.word	0x0800cdb3
 800ca7c:	0800cdeb 	.word	0x0800cdeb
 800ca80:	0800ce0f 	.word	0x0800ce0f

0800ca84 <_cleanup_r>:
 800ca84:	4901      	ldr	r1, [pc, #4]	; (800ca8c <_cleanup_r+0x8>)
 800ca86:	f000 b8af 	b.w	800cbe8 <_fwalk_reent>
 800ca8a:	bf00      	nop
 800ca8c:	0800c9c5 	.word	0x0800c9c5

0800ca90 <__sfmoreglue>:
 800ca90:	2268      	movs	r2, #104	; 0x68
 800ca92:	b570      	push	{r4, r5, r6, lr}
 800ca94:	1e4d      	subs	r5, r1, #1
 800ca96:	4355      	muls	r5, r2
 800ca98:	460e      	mov	r6, r1
 800ca9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ca9e:	f7ff fa6b 	bl	800bf78 <_malloc_r>
 800caa2:	4604      	mov	r4, r0
 800caa4:	b140      	cbz	r0, 800cab8 <__sfmoreglue+0x28>
 800caa6:	2100      	movs	r1, #0
 800caa8:	e9c0 1600 	strd	r1, r6, [r0]
 800caac:	300c      	adds	r0, #12
 800caae:	60a0      	str	r0, [r4, #8]
 800cab0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cab4:	f7fd fb38 	bl	800a128 <memset>
 800cab8:	4620      	mov	r0, r4
 800caba:	bd70      	pop	{r4, r5, r6, pc}

0800cabc <__sfp_lock_acquire>:
 800cabc:	4801      	ldr	r0, [pc, #4]	; (800cac4 <__sfp_lock_acquire+0x8>)
 800cabe:	f000 b8b3 	b.w	800cc28 <__retarget_lock_acquire_recursive>
 800cac2:	bf00      	nop
 800cac4:	200009ad 	.word	0x200009ad

0800cac8 <__sfp_lock_release>:
 800cac8:	4801      	ldr	r0, [pc, #4]	; (800cad0 <__sfp_lock_release+0x8>)
 800caca:	f000 b8ae 	b.w	800cc2a <__retarget_lock_release_recursive>
 800cace:	bf00      	nop
 800cad0:	200009ad 	.word	0x200009ad

0800cad4 <__sinit_lock_acquire>:
 800cad4:	4801      	ldr	r0, [pc, #4]	; (800cadc <__sinit_lock_acquire+0x8>)
 800cad6:	f000 b8a7 	b.w	800cc28 <__retarget_lock_acquire_recursive>
 800cada:	bf00      	nop
 800cadc:	200009ae 	.word	0x200009ae

0800cae0 <__sinit_lock_release>:
 800cae0:	4801      	ldr	r0, [pc, #4]	; (800cae8 <__sinit_lock_release+0x8>)
 800cae2:	f000 b8a2 	b.w	800cc2a <__retarget_lock_release_recursive>
 800cae6:	bf00      	nop
 800cae8:	200009ae 	.word	0x200009ae

0800caec <__sinit>:
 800caec:	b510      	push	{r4, lr}
 800caee:	4604      	mov	r4, r0
 800caf0:	f7ff fff0 	bl	800cad4 <__sinit_lock_acquire>
 800caf4:	69a3      	ldr	r3, [r4, #24]
 800caf6:	b11b      	cbz	r3, 800cb00 <__sinit+0x14>
 800caf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cafc:	f7ff bff0 	b.w	800cae0 <__sinit_lock_release>
 800cb00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb04:	6523      	str	r3, [r4, #80]	; 0x50
 800cb06:	4b13      	ldr	r3, [pc, #76]	; (800cb54 <__sinit+0x68>)
 800cb08:	4a13      	ldr	r2, [pc, #76]	; (800cb58 <__sinit+0x6c>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb0e:	42a3      	cmp	r3, r4
 800cb10:	bf08      	it	eq
 800cb12:	2301      	moveq	r3, #1
 800cb14:	4620      	mov	r0, r4
 800cb16:	bf08      	it	eq
 800cb18:	61a3      	streq	r3, [r4, #24]
 800cb1a:	f000 f81f 	bl	800cb5c <__sfp>
 800cb1e:	6060      	str	r0, [r4, #4]
 800cb20:	4620      	mov	r0, r4
 800cb22:	f000 f81b 	bl	800cb5c <__sfp>
 800cb26:	60a0      	str	r0, [r4, #8]
 800cb28:	4620      	mov	r0, r4
 800cb2a:	f000 f817 	bl	800cb5c <__sfp>
 800cb2e:	2200      	movs	r2, #0
 800cb30:	2104      	movs	r1, #4
 800cb32:	60e0      	str	r0, [r4, #12]
 800cb34:	6860      	ldr	r0, [r4, #4]
 800cb36:	f7ff ff81 	bl	800ca3c <std>
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	2109      	movs	r1, #9
 800cb3e:	68a0      	ldr	r0, [r4, #8]
 800cb40:	f7ff ff7c 	bl	800ca3c <std>
 800cb44:	2202      	movs	r2, #2
 800cb46:	2112      	movs	r1, #18
 800cb48:	68e0      	ldr	r0, [r4, #12]
 800cb4a:	f7ff ff77 	bl	800ca3c <std>
 800cb4e:	2301      	movs	r3, #1
 800cb50:	61a3      	str	r3, [r4, #24]
 800cb52:	e7d1      	b.n	800caf8 <__sinit+0xc>
 800cb54:	0800cfd0 	.word	0x0800cfd0
 800cb58:	0800ca85 	.word	0x0800ca85

0800cb5c <__sfp>:
 800cb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb5e:	4607      	mov	r7, r0
 800cb60:	f7ff ffac 	bl	800cabc <__sfp_lock_acquire>
 800cb64:	4b1e      	ldr	r3, [pc, #120]	; (800cbe0 <__sfp+0x84>)
 800cb66:	681e      	ldr	r6, [r3, #0]
 800cb68:	69b3      	ldr	r3, [r6, #24]
 800cb6a:	b913      	cbnz	r3, 800cb72 <__sfp+0x16>
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	f7ff ffbd 	bl	800caec <__sinit>
 800cb72:	3648      	adds	r6, #72	; 0x48
 800cb74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cb78:	3b01      	subs	r3, #1
 800cb7a:	d503      	bpl.n	800cb84 <__sfp+0x28>
 800cb7c:	6833      	ldr	r3, [r6, #0]
 800cb7e:	b30b      	cbz	r3, 800cbc4 <__sfp+0x68>
 800cb80:	6836      	ldr	r6, [r6, #0]
 800cb82:	e7f7      	b.n	800cb74 <__sfp+0x18>
 800cb84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cb88:	b9d5      	cbnz	r5, 800cbc0 <__sfp+0x64>
 800cb8a:	4b16      	ldr	r3, [pc, #88]	; (800cbe4 <__sfp+0x88>)
 800cb8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cb90:	60e3      	str	r3, [r4, #12]
 800cb92:	6665      	str	r5, [r4, #100]	; 0x64
 800cb94:	f000 f847 	bl	800cc26 <__retarget_lock_init_recursive>
 800cb98:	f7ff ff96 	bl	800cac8 <__sfp_lock_release>
 800cb9c:	2208      	movs	r2, #8
 800cb9e:	4629      	mov	r1, r5
 800cba0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cba4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cba8:	6025      	str	r5, [r4, #0]
 800cbaa:	61a5      	str	r5, [r4, #24]
 800cbac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cbb0:	f7fd faba 	bl	800a128 <memset>
 800cbb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cbb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbc0:	3468      	adds	r4, #104	; 0x68
 800cbc2:	e7d9      	b.n	800cb78 <__sfp+0x1c>
 800cbc4:	2104      	movs	r1, #4
 800cbc6:	4638      	mov	r0, r7
 800cbc8:	f7ff ff62 	bl	800ca90 <__sfmoreglue>
 800cbcc:	4604      	mov	r4, r0
 800cbce:	6030      	str	r0, [r6, #0]
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	d1d5      	bne.n	800cb80 <__sfp+0x24>
 800cbd4:	f7ff ff78 	bl	800cac8 <__sfp_lock_release>
 800cbd8:	230c      	movs	r3, #12
 800cbda:	603b      	str	r3, [r7, #0]
 800cbdc:	e7ee      	b.n	800cbbc <__sfp+0x60>
 800cbde:	bf00      	nop
 800cbe0:	0800cfd0 	.word	0x0800cfd0
 800cbe4:	ffff0001 	.word	0xffff0001

0800cbe8 <_fwalk_reent>:
 800cbe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbec:	4606      	mov	r6, r0
 800cbee:	4688      	mov	r8, r1
 800cbf0:	2700      	movs	r7, #0
 800cbf2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cbf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cbfa:	f1b9 0901 	subs.w	r9, r9, #1
 800cbfe:	d505      	bpl.n	800cc0c <_fwalk_reent+0x24>
 800cc00:	6824      	ldr	r4, [r4, #0]
 800cc02:	2c00      	cmp	r4, #0
 800cc04:	d1f7      	bne.n	800cbf6 <_fwalk_reent+0xe>
 800cc06:	4638      	mov	r0, r7
 800cc08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc0c:	89ab      	ldrh	r3, [r5, #12]
 800cc0e:	2b01      	cmp	r3, #1
 800cc10:	d907      	bls.n	800cc22 <_fwalk_reent+0x3a>
 800cc12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc16:	3301      	adds	r3, #1
 800cc18:	d003      	beq.n	800cc22 <_fwalk_reent+0x3a>
 800cc1a:	4629      	mov	r1, r5
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	47c0      	blx	r8
 800cc20:	4307      	orrs	r7, r0
 800cc22:	3568      	adds	r5, #104	; 0x68
 800cc24:	e7e9      	b.n	800cbfa <_fwalk_reent+0x12>

0800cc26 <__retarget_lock_init_recursive>:
 800cc26:	4770      	bx	lr

0800cc28 <__retarget_lock_acquire_recursive>:
 800cc28:	4770      	bx	lr

0800cc2a <__retarget_lock_release_recursive>:
 800cc2a:	4770      	bx	lr

0800cc2c <__swhatbuf_r>:
 800cc2c:	b570      	push	{r4, r5, r6, lr}
 800cc2e:	460e      	mov	r6, r1
 800cc30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc34:	4614      	mov	r4, r2
 800cc36:	2900      	cmp	r1, #0
 800cc38:	461d      	mov	r5, r3
 800cc3a:	b096      	sub	sp, #88	; 0x58
 800cc3c:	da08      	bge.n	800cc50 <__swhatbuf_r+0x24>
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cc44:	602a      	str	r2, [r5, #0]
 800cc46:	061a      	lsls	r2, r3, #24
 800cc48:	d410      	bmi.n	800cc6c <__swhatbuf_r+0x40>
 800cc4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc4e:	e00e      	b.n	800cc6e <__swhatbuf_r+0x42>
 800cc50:	466a      	mov	r2, sp
 800cc52:	f000 f903 	bl	800ce5c <_fstat_r>
 800cc56:	2800      	cmp	r0, #0
 800cc58:	dbf1      	blt.n	800cc3e <__swhatbuf_r+0x12>
 800cc5a:	9a01      	ldr	r2, [sp, #4]
 800cc5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cc60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cc64:	425a      	negs	r2, r3
 800cc66:	415a      	adcs	r2, r3
 800cc68:	602a      	str	r2, [r5, #0]
 800cc6a:	e7ee      	b.n	800cc4a <__swhatbuf_r+0x1e>
 800cc6c:	2340      	movs	r3, #64	; 0x40
 800cc6e:	2000      	movs	r0, #0
 800cc70:	6023      	str	r3, [r4, #0]
 800cc72:	b016      	add	sp, #88	; 0x58
 800cc74:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cc78 <__smakebuf_r>:
 800cc78:	898b      	ldrh	r3, [r1, #12]
 800cc7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc7c:	079d      	lsls	r5, r3, #30
 800cc7e:	4606      	mov	r6, r0
 800cc80:	460c      	mov	r4, r1
 800cc82:	d507      	bpl.n	800cc94 <__smakebuf_r+0x1c>
 800cc84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cc88:	6023      	str	r3, [r4, #0]
 800cc8a:	6123      	str	r3, [r4, #16]
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	6163      	str	r3, [r4, #20]
 800cc90:	b002      	add	sp, #8
 800cc92:	bd70      	pop	{r4, r5, r6, pc}
 800cc94:	466a      	mov	r2, sp
 800cc96:	ab01      	add	r3, sp, #4
 800cc98:	f7ff ffc8 	bl	800cc2c <__swhatbuf_r>
 800cc9c:	9900      	ldr	r1, [sp, #0]
 800cc9e:	4605      	mov	r5, r0
 800cca0:	4630      	mov	r0, r6
 800cca2:	f7ff f969 	bl	800bf78 <_malloc_r>
 800cca6:	b948      	cbnz	r0, 800ccbc <__smakebuf_r+0x44>
 800cca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccac:	059a      	lsls	r2, r3, #22
 800ccae:	d4ef      	bmi.n	800cc90 <__smakebuf_r+0x18>
 800ccb0:	f023 0303 	bic.w	r3, r3, #3
 800ccb4:	f043 0302 	orr.w	r3, r3, #2
 800ccb8:	81a3      	strh	r3, [r4, #12]
 800ccba:	e7e3      	b.n	800cc84 <__smakebuf_r+0xc>
 800ccbc:	4b0d      	ldr	r3, [pc, #52]	; (800ccf4 <__smakebuf_r+0x7c>)
 800ccbe:	62b3      	str	r3, [r6, #40]	; 0x28
 800ccc0:	89a3      	ldrh	r3, [r4, #12]
 800ccc2:	6020      	str	r0, [r4, #0]
 800ccc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccc8:	81a3      	strh	r3, [r4, #12]
 800ccca:	9b00      	ldr	r3, [sp, #0]
 800cccc:	6120      	str	r0, [r4, #16]
 800ccce:	6163      	str	r3, [r4, #20]
 800ccd0:	9b01      	ldr	r3, [sp, #4]
 800ccd2:	b15b      	cbz	r3, 800ccec <__smakebuf_r+0x74>
 800ccd4:	4630      	mov	r0, r6
 800ccd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccda:	f000 f8d1 	bl	800ce80 <_isatty_r>
 800ccde:	b128      	cbz	r0, 800ccec <__smakebuf_r+0x74>
 800cce0:	89a3      	ldrh	r3, [r4, #12]
 800cce2:	f023 0303 	bic.w	r3, r3, #3
 800cce6:	f043 0301 	orr.w	r3, r3, #1
 800ccea:	81a3      	strh	r3, [r4, #12]
 800ccec:	89a0      	ldrh	r0, [r4, #12]
 800ccee:	4305      	orrs	r5, r0
 800ccf0:	81a5      	strh	r5, [r4, #12]
 800ccf2:	e7cd      	b.n	800cc90 <__smakebuf_r+0x18>
 800ccf4:	0800ca85 	.word	0x0800ca85

0800ccf8 <_malloc_usable_size_r>:
 800ccf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccfc:	1f18      	subs	r0, r3, #4
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	bfbc      	itt	lt
 800cd02:	580b      	ldrlt	r3, [r1, r0]
 800cd04:	18c0      	addlt	r0, r0, r3
 800cd06:	4770      	bx	lr

0800cd08 <_raise_r>:
 800cd08:	291f      	cmp	r1, #31
 800cd0a:	b538      	push	{r3, r4, r5, lr}
 800cd0c:	4604      	mov	r4, r0
 800cd0e:	460d      	mov	r5, r1
 800cd10:	d904      	bls.n	800cd1c <_raise_r+0x14>
 800cd12:	2316      	movs	r3, #22
 800cd14:	6003      	str	r3, [r0, #0]
 800cd16:	f04f 30ff 	mov.w	r0, #4294967295
 800cd1a:	bd38      	pop	{r3, r4, r5, pc}
 800cd1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cd1e:	b112      	cbz	r2, 800cd26 <_raise_r+0x1e>
 800cd20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd24:	b94b      	cbnz	r3, 800cd3a <_raise_r+0x32>
 800cd26:	4620      	mov	r0, r4
 800cd28:	f000 f830 	bl	800cd8c <_getpid_r>
 800cd2c:	462a      	mov	r2, r5
 800cd2e:	4601      	mov	r1, r0
 800cd30:	4620      	mov	r0, r4
 800cd32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd36:	f000 b817 	b.w	800cd68 <_kill_r>
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d00a      	beq.n	800cd54 <_raise_r+0x4c>
 800cd3e:	1c59      	adds	r1, r3, #1
 800cd40:	d103      	bne.n	800cd4a <_raise_r+0x42>
 800cd42:	2316      	movs	r3, #22
 800cd44:	6003      	str	r3, [r0, #0]
 800cd46:	2001      	movs	r0, #1
 800cd48:	e7e7      	b.n	800cd1a <_raise_r+0x12>
 800cd4a:	2400      	movs	r4, #0
 800cd4c:	4628      	mov	r0, r5
 800cd4e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd52:	4798      	blx	r3
 800cd54:	2000      	movs	r0, #0
 800cd56:	e7e0      	b.n	800cd1a <_raise_r+0x12>

0800cd58 <raise>:
 800cd58:	4b02      	ldr	r3, [pc, #8]	; (800cd64 <raise+0xc>)
 800cd5a:	4601      	mov	r1, r0
 800cd5c:	6818      	ldr	r0, [r3, #0]
 800cd5e:	f7ff bfd3 	b.w	800cd08 <_raise_r>
 800cd62:	bf00      	nop
 800cd64:	2000008c 	.word	0x2000008c

0800cd68 <_kill_r>:
 800cd68:	b538      	push	{r3, r4, r5, lr}
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	4d06      	ldr	r5, [pc, #24]	; (800cd88 <_kill_r+0x20>)
 800cd6e:	4604      	mov	r4, r0
 800cd70:	4608      	mov	r0, r1
 800cd72:	4611      	mov	r1, r2
 800cd74:	602b      	str	r3, [r5, #0]
 800cd76:	f7f6 fabe 	bl	80032f6 <_kill>
 800cd7a:	1c43      	adds	r3, r0, #1
 800cd7c:	d102      	bne.n	800cd84 <_kill_r+0x1c>
 800cd7e:	682b      	ldr	r3, [r5, #0]
 800cd80:	b103      	cbz	r3, 800cd84 <_kill_r+0x1c>
 800cd82:	6023      	str	r3, [r4, #0]
 800cd84:	bd38      	pop	{r3, r4, r5, pc}
 800cd86:	bf00      	nop
 800cd88:	200009a8 	.word	0x200009a8

0800cd8c <_getpid_r>:
 800cd8c:	f7f6 baac 	b.w	80032e8 <_getpid>

0800cd90 <__sread>:
 800cd90:	b510      	push	{r4, lr}
 800cd92:	460c      	mov	r4, r1
 800cd94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd98:	f000 f894 	bl	800cec4 <_read_r>
 800cd9c:	2800      	cmp	r0, #0
 800cd9e:	bfab      	itete	ge
 800cda0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cda2:	89a3      	ldrhlt	r3, [r4, #12]
 800cda4:	181b      	addge	r3, r3, r0
 800cda6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cdaa:	bfac      	ite	ge
 800cdac:	6563      	strge	r3, [r4, #84]	; 0x54
 800cdae:	81a3      	strhlt	r3, [r4, #12]
 800cdb0:	bd10      	pop	{r4, pc}

0800cdb2 <__swrite>:
 800cdb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdb6:	461f      	mov	r7, r3
 800cdb8:	898b      	ldrh	r3, [r1, #12]
 800cdba:	4605      	mov	r5, r0
 800cdbc:	05db      	lsls	r3, r3, #23
 800cdbe:	460c      	mov	r4, r1
 800cdc0:	4616      	mov	r6, r2
 800cdc2:	d505      	bpl.n	800cdd0 <__swrite+0x1e>
 800cdc4:	2302      	movs	r3, #2
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdcc:	f000 f868 	bl	800cea0 <_lseek_r>
 800cdd0:	89a3      	ldrh	r3, [r4, #12]
 800cdd2:	4632      	mov	r2, r6
 800cdd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cdd8:	81a3      	strh	r3, [r4, #12]
 800cdda:	4628      	mov	r0, r5
 800cddc:	463b      	mov	r3, r7
 800cdde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cde2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cde6:	f000 b817 	b.w	800ce18 <_write_r>

0800cdea <__sseek>:
 800cdea:	b510      	push	{r4, lr}
 800cdec:	460c      	mov	r4, r1
 800cdee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdf2:	f000 f855 	bl	800cea0 <_lseek_r>
 800cdf6:	1c43      	adds	r3, r0, #1
 800cdf8:	89a3      	ldrh	r3, [r4, #12]
 800cdfa:	bf15      	itete	ne
 800cdfc:	6560      	strne	r0, [r4, #84]	; 0x54
 800cdfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce06:	81a3      	strheq	r3, [r4, #12]
 800ce08:	bf18      	it	ne
 800ce0a:	81a3      	strhne	r3, [r4, #12]
 800ce0c:	bd10      	pop	{r4, pc}

0800ce0e <__sclose>:
 800ce0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce12:	f000 b813 	b.w	800ce3c <_close_r>
	...

0800ce18 <_write_r>:
 800ce18:	b538      	push	{r3, r4, r5, lr}
 800ce1a:	4604      	mov	r4, r0
 800ce1c:	4608      	mov	r0, r1
 800ce1e:	4611      	mov	r1, r2
 800ce20:	2200      	movs	r2, #0
 800ce22:	4d05      	ldr	r5, [pc, #20]	; (800ce38 <_write_r+0x20>)
 800ce24:	602a      	str	r2, [r5, #0]
 800ce26:	461a      	mov	r2, r3
 800ce28:	f7f6 fa9c 	bl	8003364 <_write>
 800ce2c:	1c43      	adds	r3, r0, #1
 800ce2e:	d102      	bne.n	800ce36 <_write_r+0x1e>
 800ce30:	682b      	ldr	r3, [r5, #0]
 800ce32:	b103      	cbz	r3, 800ce36 <_write_r+0x1e>
 800ce34:	6023      	str	r3, [r4, #0]
 800ce36:	bd38      	pop	{r3, r4, r5, pc}
 800ce38:	200009a8 	.word	0x200009a8

0800ce3c <_close_r>:
 800ce3c:	b538      	push	{r3, r4, r5, lr}
 800ce3e:	2300      	movs	r3, #0
 800ce40:	4d05      	ldr	r5, [pc, #20]	; (800ce58 <_close_r+0x1c>)
 800ce42:	4604      	mov	r4, r0
 800ce44:	4608      	mov	r0, r1
 800ce46:	602b      	str	r3, [r5, #0]
 800ce48:	f7f6 faa8 	bl	800339c <_close>
 800ce4c:	1c43      	adds	r3, r0, #1
 800ce4e:	d102      	bne.n	800ce56 <_close_r+0x1a>
 800ce50:	682b      	ldr	r3, [r5, #0]
 800ce52:	b103      	cbz	r3, 800ce56 <_close_r+0x1a>
 800ce54:	6023      	str	r3, [r4, #0]
 800ce56:	bd38      	pop	{r3, r4, r5, pc}
 800ce58:	200009a8 	.word	0x200009a8

0800ce5c <_fstat_r>:
 800ce5c:	b538      	push	{r3, r4, r5, lr}
 800ce5e:	2300      	movs	r3, #0
 800ce60:	4d06      	ldr	r5, [pc, #24]	; (800ce7c <_fstat_r+0x20>)
 800ce62:	4604      	mov	r4, r0
 800ce64:	4608      	mov	r0, r1
 800ce66:	4611      	mov	r1, r2
 800ce68:	602b      	str	r3, [r5, #0]
 800ce6a:	f7f6 faa2 	bl	80033b2 <_fstat>
 800ce6e:	1c43      	adds	r3, r0, #1
 800ce70:	d102      	bne.n	800ce78 <_fstat_r+0x1c>
 800ce72:	682b      	ldr	r3, [r5, #0]
 800ce74:	b103      	cbz	r3, 800ce78 <_fstat_r+0x1c>
 800ce76:	6023      	str	r3, [r4, #0]
 800ce78:	bd38      	pop	{r3, r4, r5, pc}
 800ce7a:	bf00      	nop
 800ce7c:	200009a8 	.word	0x200009a8

0800ce80 <_isatty_r>:
 800ce80:	b538      	push	{r3, r4, r5, lr}
 800ce82:	2300      	movs	r3, #0
 800ce84:	4d05      	ldr	r5, [pc, #20]	; (800ce9c <_isatty_r+0x1c>)
 800ce86:	4604      	mov	r4, r0
 800ce88:	4608      	mov	r0, r1
 800ce8a:	602b      	str	r3, [r5, #0]
 800ce8c:	f7f6 faa0 	bl	80033d0 <_isatty>
 800ce90:	1c43      	adds	r3, r0, #1
 800ce92:	d102      	bne.n	800ce9a <_isatty_r+0x1a>
 800ce94:	682b      	ldr	r3, [r5, #0]
 800ce96:	b103      	cbz	r3, 800ce9a <_isatty_r+0x1a>
 800ce98:	6023      	str	r3, [r4, #0]
 800ce9a:	bd38      	pop	{r3, r4, r5, pc}
 800ce9c:	200009a8 	.word	0x200009a8

0800cea0 <_lseek_r>:
 800cea0:	b538      	push	{r3, r4, r5, lr}
 800cea2:	4604      	mov	r4, r0
 800cea4:	4608      	mov	r0, r1
 800cea6:	4611      	mov	r1, r2
 800cea8:	2200      	movs	r2, #0
 800ceaa:	4d05      	ldr	r5, [pc, #20]	; (800cec0 <_lseek_r+0x20>)
 800ceac:	602a      	str	r2, [r5, #0]
 800ceae:	461a      	mov	r2, r3
 800ceb0:	f7f6 fa98 	bl	80033e4 <_lseek>
 800ceb4:	1c43      	adds	r3, r0, #1
 800ceb6:	d102      	bne.n	800cebe <_lseek_r+0x1e>
 800ceb8:	682b      	ldr	r3, [r5, #0]
 800ceba:	b103      	cbz	r3, 800cebe <_lseek_r+0x1e>
 800cebc:	6023      	str	r3, [r4, #0]
 800cebe:	bd38      	pop	{r3, r4, r5, pc}
 800cec0:	200009a8 	.word	0x200009a8

0800cec4 <_read_r>:
 800cec4:	b538      	push	{r3, r4, r5, lr}
 800cec6:	4604      	mov	r4, r0
 800cec8:	4608      	mov	r0, r1
 800ceca:	4611      	mov	r1, r2
 800cecc:	2200      	movs	r2, #0
 800cece:	4d05      	ldr	r5, [pc, #20]	; (800cee4 <_read_r+0x20>)
 800ced0:	602a      	str	r2, [r5, #0]
 800ced2:	461a      	mov	r2, r3
 800ced4:	f7f6 fa29 	bl	800332a <_read>
 800ced8:	1c43      	adds	r3, r0, #1
 800ceda:	d102      	bne.n	800cee2 <_read_r+0x1e>
 800cedc:	682b      	ldr	r3, [r5, #0]
 800cede:	b103      	cbz	r3, 800cee2 <_read_r+0x1e>
 800cee0:	6023      	str	r3, [r4, #0]
 800cee2:	bd38      	pop	{r3, r4, r5, pc}
 800cee4:	200009a8 	.word	0x200009a8

0800cee8 <_init>:
 800cee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceea:	bf00      	nop
 800ceec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceee:	bc08      	pop	{r3}
 800cef0:	469e      	mov	lr, r3
 800cef2:	4770      	bx	lr

0800cef4 <_fini>:
 800cef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cef6:	bf00      	nop
 800cef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cefa:	bc08      	pop	{r3}
 800cefc:	469e      	mov	lr, r3
 800cefe:	4770      	bx	lr
