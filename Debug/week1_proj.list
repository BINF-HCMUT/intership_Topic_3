
week1_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d560  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  0800d670  0800d670  0001d670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db04  0800db04  0002023c  2**0
                  CONTENTS
  4 .ARM          00000000  0800db04  0800db04  0002023c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800db04  0800db04  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db04  0800db04  0001db04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db08  0800db08  0001db08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  0800db0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000740  2000023c  0800dd48  0002023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000097c  0800dd48  0002097c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017294  00000000  00000000  00020265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035a6  00000000  00000000  000374f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  0003aaa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  0003bf68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1d1  00000000  00000000  0003d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a81  00000000  00000000  00058489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094fa0  00000000  00000000  00071f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106eaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006750  00000000  00000000  00106efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000023c 	.word	0x2000023c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d658 	.word	0x0800d658

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000240 	.word	0x20000240
 800014c:	0800d658 	.word	0x0800d658

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <DHT20_isConnected>:
uint8_t readCMD[3] = {0xAC, 0x33, 0x00};
uint32_t _lastRequest = 0;
uint32_t _lastRead = 0;


uint8_t DHT20_isConnected(){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, DHT20, 1, 100);
 8000d4a:	2364      	movs	r3, #100	; 0x64
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2170      	movs	r1, #112	; 0x70
 8000d50:	480b      	ldr	r0, [pc, #44]	; (8000d80 <DHT20_isConnected+0x3c>)
 8000d52:	f004 fcbd 	bl	80056d0 <HAL_I2C_IsDeviceReady>
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!connectDHT=%02X#\r\n", status), 1000);
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4909      	ldr	r1, [pc, #36]	; (8000d84 <DHT20_isConnected+0x40>)
 8000d60:	4809      	ldr	r0, [pc, #36]	; (8000d88 <DHT20_isConnected+0x44>)
 8000d62:	f00a f9ff 	bl	800b164 <siprintf>
 8000d66:	4603      	mov	r3, r0
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	4906      	ldr	r1, [pc, #24]	; (8000d88 <DHT20_isConnected+0x44>)
 8000d70:	4806      	ldr	r0, [pc, #24]	; (8000d8c <DHT20_isConnected+0x48>)
 8000d72:	f008 ff3c 	bl	8009bee <HAL_UART_Transmit>
    return status;
 8000d76:	79fb      	ldrb	r3, [r7, #7]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	2000031c 	.word	0x2000031c
 8000d84:	0800d670 	.word	0x0800d670
 8000d88:	20000010 	.word	0x20000010
 8000d8c:	200004d4 	.word	0x200004d4

08000d90 <DHT20_getHumidity>:

uint8_t DHT20_getAddress(){
	return DHT20;
}

float DHT20_getHumidity (){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	return (humidity + humidityOffset);
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <DHT20_getHumidity+0x1c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <DHT20_getHumidity+0x20>)
 8000d9a:	6812      	ldr	r2, [r2, #0]
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fec8 	bl	8000b34 <__addsf3>
 8000da4:	4603      	mov	r3, r0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000258 	.word	0x20000258
 8000db0:	20000260 	.word	0x20000260

08000db4 <DHT20_getTemperature>:

float DHT20_getTemperature(){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	return temperature + temperatureOffset;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <DHT20_getTemperature+0x1c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <DHT20_getTemperature+0x20>)
 8000dbe:	6812      	ldr	r2, [r2, #0]
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff feb6 	bl	8000b34 <__addsf3>
 8000dc8:	4603      	mov	r3, r0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000025c 	.word	0x2000025c
 8000dd4:	20000264 	.word	0x20000264

08000dd8 <DHT20_requestData>:
     return humidityOffset;
}
float DHT20_getTemperatureOffset(){
	return temperatureOffset;
}
uint8_t DHT20_requestData(){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af02      	add	r7, sp, #8
	  HAL_StatusTypeDef ret;
	  ret =  HAL_I2C_Master_Transmit(&hi2c1, DHT20, readCMD, 3, 1000);
 8000dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2303      	movs	r3, #3
 8000de6:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <DHT20_requestData+0x28>)
 8000de8:	2170      	movs	r1, #112	; 0x70
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <DHT20_requestData+0x2c>)
 8000dec:	f004 f906 	bl	8004ffc <HAL_I2C_Master_Transmit>
 8000df0:	4603      	mov	r3, r0
 8000df2:	71fb      	strb	r3, [r7, #7]
      return ret;
 8000df4:	79fb      	ldrb	r3, [r7, #7]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000000 	.word	0x20000000
 8000e04:	2000031c 	.word	0x2000031c

08000e08 <DHT20_crc8>:
    	   if(DHT20_resetRegister(0x1E)) count++;
    	   HAL_Delay(20);
       }
}
uint8_t DHT20_crc8(uint8_t *ptr, uint8_t len)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0xFF;
 8000e14:	23ff      	movs	r3, #255	; 0xff
 8000e16:	73fb      	strb	r3, [r7, #15]
	while(len--){
 8000e18:	e01e      	b.n	8000e58 <DHT20_crc8+0x50>
		crc ^= *ptr++;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	1c5a      	adds	r2, r3, #1
 8000e1e:	607a      	str	r2, [r7, #4]
 8000e20:	781a      	ldrb	r2, [r3, #0]
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	4053      	eors	r3, r2
 8000e26:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 0; i< 8; ++i)
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73bb      	strb	r3, [r7, #14]
 8000e2c:	e011      	b.n	8000e52 <DHT20_crc8+0x4a>
		{
			if(crc & 0x80)
 8000e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	da07      	bge.n	8000e46 <DHT20_crc8+0x3e>
			{
				crc <<= 1;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	73fb      	strb	r3, [r7, #15]
				crc ^= 0x31;
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	e002      	b.n	8000e4c <DHT20_crc8+0x44>
			}
			else
			{
				crc <<= 1;
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 0; i< 8; ++i)
 8000e4c:	7bbb      	ldrb	r3, [r7, #14]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	73bb      	strb	r3, [r7, #14]
 8000e52:	7bbb      	ldrb	r3, [r7, #14]
 8000e54:	2b07      	cmp	r3, #7
 8000e56:	d9ea      	bls.n	8000e2e <DHT20_crc8+0x26>
	while(len--){
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	1e5a      	subs	r2, r3, #1
 8000e5c:	70fa      	strb	r2, [r7, #3]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1db      	bne.n	8000e1a <DHT20_crc8+0x12>
			}
		}
	}
	return crc;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
	...

08000e70 <DHT20_Read>:
int DHT20_Read(){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret ;
	if(DHT20_isConnected() != HAL_OK){
 8000e76:	f7ff ff65 	bl	8000d44 <DHT20_isConnected>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d002      	beq.n	8000e86 <DHT20_Read+0x16>
		return DHT20_ERROR_CONNECT;
 8000e80:	f06f 030a 	mvn.w	r3, #10
 8000e84:	e02d      	b.n	8000ee2 <DHT20_Read+0x72>
	}
    uint8_t request_data = DHT20_requestData();
 8000e86:	f7ff ffa7 	bl	8000dd8 <DHT20_requestData>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
    if(request_data == HAL_OK){
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d124      	bne.n	8000ede <DHT20_Read+0x6e>
    	HAL_Delay(1000);
 8000e94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e98:	f002 fdae 	bl	80039f8 <HAL_Delay>
    	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!result=%s#\r\n", "OK"), 1000);
 8000e9c:	4a13      	ldr	r2, [pc, #76]	; (8000eec <DHT20_Read+0x7c>)
 8000e9e:	4914      	ldr	r1, [pc, #80]	; (8000ef0 <DHT20_Read+0x80>)
 8000ea0:	4814      	ldr	r0, [pc, #80]	; (8000ef4 <DHT20_Read+0x84>)
 8000ea2:	f00a f95f 	bl	800b164 <siprintf>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	4911      	ldr	r1, [pc, #68]	; (8000ef4 <DHT20_Read+0x84>)
 8000eb0:	4811      	ldr	r0, [pc, #68]	; (8000ef8 <DHT20_Read+0x88>)
 8000eb2:	f008 fe9c 	bl	8009bee <HAL_UART_Transmit>
    	ret = HAL_I2C_Master_Receive(&hi2c1, DHT20, buf, 7, 100);
 8000eb6:	2364      	movs	r3, #100	; 0x64
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	2307      	movs	r3, #7
 8000ebc:	4a0f      	ldr	r2, [pc, #60]	; (8000efc <DHT20_Read+0x8c>)
 8000ebe:	2170      	movs	r1, #112	; 0x70
 8000ec0:	480f      	ldr	r0, [pc, #60]	; (8000f00 <DHT20_Read+0x90>)
 8000ec2:	f004 f999 	bl	80051f8 <HAL_I2C_Master_Receive>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71bb      	strb	r3, [r7, #6]
    	HAL_Delay(100);
 8000eca:	2064      	movs	r0, #100	; 0x64
 8000ecc:	f002 fd94 	bl	80039f8 <HAL_Delay>
    	   if(ret == HAL_OK){
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d103      	bne.n	8000ede <DHT20_Read+0x6e>
    		   return DHT20_Convert();
 8000ed6:	f000 f815 	bl	8000f04 <DHT20_Convert>
 8000eda:	4603      	mov	r3, r0
 8000edc:	e001      	b.n	8000ee2 <DHT20_Read+0x72>
    	   }

    }
    return DHT20_ERROR_BYTES_ALL_ZERO;
 8000ede:	f06f 030c 	mvn.w	r3, #12
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	0800d684 	.word	0x0800d684
 8000ef0:	0800d688 	.word	0x0800d688
 8000ef4:	20000010 	.word	0x20000010
 8000ef8:	200004d4 	.word	0x200004d4
 8000efc:	20000268 	.word	0x20000268
 8000f00:	2000031c 	.word	0x2000031c

08000f04 <DHT20_Convert>:

int DHT20_Convert(){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
	   //  convert temperature
	   uint32_t raw = buf[1];
 8000f0a:	4b56      	ldr	r3, [pc, #344]	; (8001064 <DHT20_Convert+0x160>)
 8000f0c:	785b      	ldrb	r3, [r3, #1]
 8000f0e:	607b      	str	r3, [r7, #4]
	   raw <<= 8;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	607b      	str	r3, [r7, #4]
	   raw += buf[2];
 8000f16:	4b53      	ldr	r3, [pc, #332]	; (8001064 <DHT20_Convert+0x160>)
 8000f18:	789b      	ldrb	r3, [r3, #2]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4413      	add	r3, r2
 8000f20:	607b      	str	r3, [r7, #4]
	   raw <<= 4;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	607b      	str	r3, [r7, #4]
	   raw += (buf[3] >> 4);
 8000f28:	4b4e      	ldr	r3, [pc, #312]	; (8001064 <DHT20_Convert+0x160>)
 8000f2a:	78db      	ldrb	r3, [r3, #3]
 8000f2c:	091b      	lsrs	r3, r3, #4
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	461a      	mov	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	607b      	str	r3, [r7, #4]
	   humidity = raw * 9.5367431640625e-5;   // ==> / 1048576.0 * 100%;
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff fa53 	bl	80003e4 <__aeabi_ui2d>
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	4b49      	ldr	r3, [pc, #292]	; (8001068 <DHT20_Convert+0x164>)
 8000f44:	f7ff fac8 	bl	80004d8 <__aeabi_dmul>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f7ff fd9a 	bl	8000a88 <__aeabi_d2f>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4a45      	ldr	r2, [pc, #276]	; (800106c <DHT20_Convert+0x168>)
 8000f58:	6013      	str	r3, [r2, #0]
	   HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "Humid=%f\r\n", humidity), 1000);
 8000f5a:	4b44      	ldr	r3, [pc, #272]	; (800106c <DHT20_Convert+0x168>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fa62 	bl	8000428 <__aeabi_f2d>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4941      	ldr	r1, [pc, #260]	; (8001070 <DHT20_Convert+0x16c>)
 8000f6a:	4842      	ldr	r0, [pc, #264]	; (8001074 <DHT20_Convert+0x170>)
 8000f6c:	f00a f8fa 	bl	800b164 <siprintf>
 8000f70:	4603      	mov	r3, r0
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f78:	493e      	ldr	r1, [pc, #248]	; (8001074 <DHT20_Convert+0x170>)
 8000f7a:	483f      	ldr	r0, [pc, #252]	; (8001078 <DHT20_Convert+0x174>)
 8000f7c:	f008 fe37 	bl	8009bee <HAL_UART_Transmit>

		//  convert humidity
	    raw = (buf[3] & 0x0F);
 8000f80:	4b38      	ldr	r3, [pc, #224]	; (8001064 <DHT20_Convert+0x160>)
 8000f82:	78db      	ldrb	r3, [r3, #3]
 8000f84:	f003 030f 	and.w	r3, r3, #15
 8000f88:	607b      	str	r3, [r7, #4]
	    raw <<= 8;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	021b      	lsls	r3, r3, #8
 8000f8e:	607b      	str	r3, [r7, #4]
	    raw += buf[4];
 8000f90:	4b34      	ldr	r3, [pc, #208]	; (8001064 <DHT20_Convert+0x160>)
 8000f92:	791b      	ldrb	r3, [r3, #4]
 8000f94:	461a      	mov	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	607b      	str	r3, [r7, #4]
	    raw <<= 8;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	607b      	str	r3, [r7, #4]
	    raw += buf[5];
 8000fa2:	4b30      	ldr	r3, [pc, #192]	; (8001064 <DHT20_Convert+0x160>)
 8000fa4:	795b      	ldrb	r3, [r3, #5]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4413      	add	r3, r2
 8000fac:	607b      	str	r3, [r7, #4]
	    temperature = raw * 1.9073486328125e-4 - 50;  //  ==> / 1048576.0 * 200 - 50;
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff fa18 	bl	80003e4 <__aeabi_ui2d>
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	4b30      	ldr	r3, [pc, #192]	; (800107c <DHT20_Convert+0x178>)
 8000fba:	f7ff fa8d 	bl	80004d8 <__aeabi_dmul>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <DHT20_Convert+0x17c>)
 8000fcc:	f7ff f8cc 	bl	8000168 <__aeabi_dsub>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f7ff fd56 	bl	8000a88 <__aeabi_d2f>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	4a29      	ldr	r2, [pc, #164]	; (8001084 <DHT20_Convert+0x180>)
 8000fe0:	6013      	str	r3, [r2, #0]
	    HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "temp=%f\r\n", temperature), 1000);
 8000fe2:	4b28      	ldr	r3, [pc, #160]	; (8001084 <DHT20_Convert+0x180>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fa1e 	bl	8000428 <__aeabi_f2d>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4925      	ldr	r1, [pc, #148]	; (8001088 <DHT20_Convert+0x184>)
 8000ff2:	4820      	ldr	r0, [pc, #128]	; (8001074 <DHT20_Convert+0x170>)
 8000ff4:	f00a f8b6 	bl	800b164 <siprintf>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001000:	491c      	ldr	r1, [pc, #112]	; (8001074 <DHT20_Convert+0x170>)
 8001002:	481d      	ldr	r0, [pc, #116]	; (8001078 <DHT20_Convert+0x174>)
 8001004:	f008 fdf3 	bl	8009bee <HAL_UART_Transmit>

	    // Checksum
	    uint8_t crc = DHT20_crc8(buf, 6);
 8001008:	2106      	movs	r1, #6
 800100a:	4816      	ldr	r0, [pc, #88]	; (8001064 <DHT20_Convert+0x160>)
 800100c:	f7ff fefc 	bl	8000e08 <DHT20_crc8>
 8001010:	4603      	mov	r3, r0
 8001012:	70fb      	strb	r3, [r7, #3]
	    if(crc != buf[6]){
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <DHT20_Convert+0x160>)
 8001016:	799b      	ldrb	r3, [r3, #6]
 8001018:	78fa      	ldrb	r2, [r7, #3]
 800101a:	429a      	cmp	r2, r3
 800101c:	d00f      	beq.n	800103e <DHT20_Convert+0x13a>
	      	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!CRC=%s#\r\n", "NOT OK"), 1000);
 800101e:	4a1b      	ldr	r2, [pc, #108]	; (800108c <DHT20_Convert+0x188>)
 8001020:	491b      	ldr	r1, [pc, #108]	; (8001090 <DHT20_Convert+0x18c>)
 8001022:	4814      	ldr	r0, [pc, #80]	; (8001074 <DHT20_Convert+0x170>)
 8001024:	f00a f89e 	bl	800b164 <siprintf>
 8001028:	4603      	mov	r3, r0
 800102a:	b29a      	uxth	r2, r3
 800102c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001030:	4910      	ldr	r1, [pc, #64]	; (8001074 <DHT20_Convert+0x170>)
 8001032:	4811      	ldr	r0, [pc, #68]	; (8001078 <DHT20_Convert+0x174>)
 8001034:	f008 fddb 	bl	8009bee <HAL_UART_Transmit>
	    	return DHT20_ERROR_CHECKSUM;
 8001038:	f06f 0309 	mvn.w	r3, #9
 800103c:	e00d      	b.n	800105a <DHT20_Convert+0x156>
	    }
		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!CRC=%s#\r\n", "OK"), 1000);
 800103e:	4a15      	ldr	r2, [pc, #84]	; (8001094 <DHT20_Convert+0x190>)
 8001040:	4913      	ldr	r1, [pc, #76]	; (8001090 <DHT20_Convert+0x18c>)
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <DHT20_Convert+0x170>)
 8001044:	f00a f88e 	bl	800b164 <siprintf>
 8001048:	4603      	mov	r3, r0
 800104a:	b29a      	uxth	r2, r3
 800104c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001050:	4908      	ldr	r1, [pc, #32]	; (8001074 <DHT20_Convert+0x170>)
 8001052:	4809      	ldr	r0, [pc, #36]	; (8001078 <DHT20_Convert+0x174>)
 8001054:	f008 fdcb 	bl	8009bee <HAL_UART_Transmit>
	    return DHT20_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000268 	.word	0x20000268
 8001068:	3f190000 	.word	0x3f190000
 800106c:	20000258 	.word	0x20000258
 8001070:	0800d698 	.word	0x0800d698
 8001074:	20000010 	.word	0x20000010
 8001078:	200004d4 	.word	0x200004d4
 800107c:	3f290000 	.word	0x3f290000
 8001080:	40490000 	.word	0x40490000
 8001084:	2000025c 	.word	0x2000025c
 8001088:	0800d6a4 	.word	0x0800d6a4
 800108c:	0800d6b0 	.word	0x0800d6b0
 8001090:	0800d6b8 	.word	0x0800d6b8
 8001094:	0800d684 	.word	0x0800d684

08001098 <lcdSendCmd>:
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, SLAVE_ADDRESS_LCD, 1, 100);
	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!Connect=%02X#\r\n", status), 100);
}

void lcdSendCmd (char cmd)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af02      	add	r7, sp, #8
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f023 030f 	bic.w	r3, r3, #15
 80010a8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	f043 030c 	orr.w	r3, r3, #12
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80010c4:	7bbb      	ldrb	r3, [r7, #14]
 80010c6:	f043 030c 	orr.w	r3, r3, #12
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	f043 0308 	orr.w	r3, r3, #8
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80010d8:	f107 0208 	add.w	r2, r7, #8
 80010dc:	2364      	movs	r3, #100	; 0x64
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2304      	movs	r3, #4
 80010e2:	2142      	movs	r1, #66	; 0x42
 80010e4:	4803      	ldr	r0, [pc, #12]	; (80010f4 <lcdSendCmd+0x5c>)
 80010e6:	f003 ff89 	bl	8004ffc <HAL_I2C_Master_Transmit>
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000031c 	.word	0x2000031c

080010f8 <lcdSendData>:
        	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!address=%02X#\r\n", address), 100);
        }
    }
}
void lcdSendData(char data)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f023 030f 	bic.w	r3, r3, #15
 8001108:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	011b      	lsls	r3, r3, #4
 800110e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	f043 030d 	orr.w	r3, r3, #13
 8001116:	b2db      	uxtb	r3, r3
 8001118:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	f043 0309 	orr.w	r3, r3, #9
 8001120:	b2db      	uxtb	r3, r3
 8001122:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001124:	7bbb      	ldrb	r3, [r7, #14]
 8001126:	f043 030d 	orr.w	r3, r3, #13
 800112a:	b2db      	uxtb	r3, r3
 800112c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	f043 0309 	orr.w	r3, r3, #9
 8001134:	b2db      	uxtb	r3, r3
 8001136:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, data_t, 4, 1000);
 8001138:	f107 0208 	add.w	r2, r7, #8
 800113c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2304      	movs	r3, #4
 8001144:	2142      	movs	r1, #66	; 0x42
 8001146:	4803      	ldr	r0, [pc, #12]	; (8001154 <lcdSendData+0x5c>)
 8001148:	f003 ff58 	bl	8004ffc <HAL_I2C_Master_Transmit>
}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000031c 	.word	0x2000031c

08001158 <lcdSetCursor>:
	lcdSendCmd(LCD_CLEARDISPLAY);
	HAL_Delay(2);
}

void lcdSetCursor(int row, int col)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
    switch (row)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <lcdSetCursor+0x18>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d005      	beq.n	800117a <lcdSetCursor+0x22>
 800116e:	e009      	b.n	8001184 <lcdSetCursor+0x2c>
    {
        case 0:
            col |= 0x80;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001176:	603b      	str	r3, [r7, #0]
            break;
 8001178:	e004      	b.n	8001184 <lcdSetCursor+0x2c>
        case 1:
            col |= 0xC0;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001180:	603b      	str	r3, [r7, #0]
            break;
 8001182:	bf00      	nop
    }

    lcdSendCmd (col);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff85 	bl	8001098 <lcdSendCmd>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <lcdInit>:
	displayControl |= LCD_BLINKON;
	lcdSendCmd(LCD_DISPLAYCONTROL | displayControl);
}

void lcdInit (void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800119a:	2032      	movs	r0, #50	; 0x32
 800119c:	f002 fc2c 	bl	80039f8 <HAL_Delay>
	lcdSendCmd (0x30);
 80011a0:	2030      	movs	r0, #48	; 0x30
 80011a2:	f7ff ff79 	bl	8001098 <lcdSendCmd>
	HAL_Delay(5);  // wait for >4.1ms
 80011a6:	2005      	movs	r0, #5
 80011a8:	f002 fc26 	bl	80039f8 <HAL_Delay>
	lcdSendCmd (0x30);
 80011ac:	2030      	movs	r0, #48	; 0x30
 80011ae:	f7ff ff73 	bl	8001098 <lcdSendCmd>
	HAL_Delay(1);  // wait for >100us
 80011b2:	2001      	movs	r0, #1
 80011b4:	f002 fc20 	bl	80039f8 <HAL_Delay>
	lcdSendCmd (0x30);
 80011b8:	2030      	movs	r0, #48	; 0x30
 80011ba:	f7ff ff6d 	bl	8001098 <lcdSendCmd>
	HAL_Delay(10);
 80011be:	200a      	movs	r0, #10
 80011c0:	f002 fc1a 	bl	80039f8 <HAL_Delay>
	lcdSendCmd (0x20);  // 4bit mode
 80011c4:	2020      	movs	r0, #32
 80011c6:	f7ff ff67 	bl	8001098 <lcdSendCmd>
	HAL_Delay(10);
 80011ca:	200a      	movs	r0, #10
 80011cc:	f002 fc14 	bl	80039f8 <HAL_Delay>

  // dislay initialisation
	lcdSendCmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80011d0:	2028      	movs	r0, #40	; 0x28
 80011d2:	f7ff ff61 	bl	8001098 <lcdSendCmd>
	HAL_Delay(1);
 80011d6:	2001      	movs	r0, #1
 80011d8:	f002 fc0e 	bl	80039f8 <HAL_Delay>
	lcdSendCmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80011dc:	2008      	movs	r0, #8
 80011de:	f7ff ff5b 	bl	8001098 <lcdSendCmd>
	HAL_Delay(1);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f002 fc08 	bl	80039f8 <HAL_Delay>
	lcdSendCmd (0x01);  // clear display
 80011e8:	2001      	movs	r0, #1
 80011ea:	f7ff ff55 	bl	8001098 <lcdSendCmd>
	HAL_Delay(1);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f002 fc02 	bl	80039f8 <HAL_Delay>
	lcdSendCmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80011f4:	2006      	movs	r0, #6
 80011f6:	f7ff ff4f 	bl	8001098 <lcdSendCmd>
	HAL_Delay(1);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f002 fbfc 	bl	80039f8 <HAL_Delay>
	lcdSendCmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001200:	200c      	movs	r0, #12
 8001202:	f7ff ff49 	bl	8001098 <lcdSendCmd>
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}

0800120a <lcdSendString>:

void lcdSendString (char *str)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
	while (*str) lcdSendData (*str++);
 8001212:	e006      	b.n	8001222 <lcdSendString+0x18>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff6b 	bl	80010f8 <lcdSendData>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f4      	bne.n	8001214 <lcdSendString+0xa>
}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <lcdSendNumber>:

void lcdSendNumber(float number)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	char buffer[8];
	sprintf(buffer,"%f",number);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff f8f3 	bl	8000428 <__aeabi_f2d>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	f107 0008 	add.w	r0, r7, #8
 800124a:	4906      	ldr	r1, [pc, #24]	; (8001264 <lcdSendNumber+0x30>)
 800124c:	f009 ff8a 	bl	800b164 <siprintf>
	lcdSendString(buffer);
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ffd8 	bl	800120a <lcdSendString>
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	0800d6ec 	.word	0x0800d6ec

08001268 <getKeyProcess>:
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress3s[N0_OF_BUTTONS];
static int buttonState[N0_OF_BUTTONS] = {BUTTON_IS_RELEASED, BUTTON_IS_RELEASED, BUTTON_IS_RELEASED};
static int button_flag[N0_OF_BUTTONS];
void getKeyProcess(int index){// turn on button_flag
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db07      	blt.n	8001286 <getKeyProcess+0x1e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b02      	cmp	r3, #2
 800127a:	dc04      	bgt.n	8001286 <getKeyProcess+0x1e>
		button_flag[index] = 1;
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <getKeyProcess+0x28>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2101      	movs	r1, #1
 8001282:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	20000290 	.word	0x20000290

08001294 <get3sFlag>:
// this function turn on flagForButtonPress3s when button is pressed more than 3s
void get3sFlag(int index){
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	db07      	blt.n	80012b2 <get3sFlag+0x1e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	dc04      	bgt.n	80012b2 <get3sFlag+0x1e>
			flagForButtonPress3s[index] = 1;
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <get3sFlag+0x28>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
		}
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	20000280 	.word	0x20000280

080012c0 <get1sFlag>:
void clear3sFlag(int index){
	if(index >= 0 && index < N0_OF_BUTTONS){
			flagForButtonPress3s[index] = 0;
		}
}
void get1sFlag(int index){
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db07      	blt.n	80012de <get1sFlag+0x1e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	dc04      	bgt.n	80012de <get1sFlag+0x1e>
				flag1s[index] = 1;
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <get1sFlag+0x28>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
			}
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	20000284 	.word	0x20000284

080012ec <fsm_input_processing>:
void fsm_input_processing(GPIO_PinState buttonBuffer[], int index){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
	switch(buttonState[index]){
 80012f6:	4a55      	ldr	r2, [pc, #340]	; (800144c <fsm_input_processing+0x160>)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d04f      	beq.n	80013a2 <fsm_input_processing+0xb6>
 8001302:	2b02      	cmp	r3, #2
 8001304:	f300 8096 	bgt.w	8001434 <fsm_input_processing+0x148>
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <fsm_input_processing+0x26>
 800130c:	2b01      	cmp	r3, #1
 800130e:	d039      	beq.n	8001384 <fsm_input_processing+0x98>
			flag1s[index] = 0;
			button_flag[index] = 0;
		}
		break;
	default:
		break;
 8001310:	e090      	b.n	8001434 <fsm_input_processing+0x148>
		if(counterForButtonPress3s[index] < DURATION_FOR_AUTO_INCREASING){
 8001312:	4a4f      	ldr	r2, [pc, #316]	; (8001450 <fsm_input_processing+0x164>)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800131a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800131e:	d220      	bcs.n	8001362 <fsm_input_processing+0x76>
			counterForButtonPress3s[index]++;
 8001320:	4a4b      	ldr	r2, [pc, #300]	; (8001450 <fsm_input_processing+0x164>)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001328:	3301      	adds	r3, #1
 800132a:	b299      	uxth	r1, r3
 800132c:	4a48      	ldr	r2, [pc, #288]	; (8001450 <fsm_input_processing+0x164>)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(counterForButtonPress3s[index] == DURATION_FOR_AUTO_INCREASING){
 8001334:	4a46      	ldr	r2, [pc, #280]	; (8001450 <fsm_input_processing+0x164>)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800133c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001340:	d10f      	bne.n	8001362 <fsm_input_processing+0x76>
				buttonState[index] = BUTTON_PRESSED_MORE_THAN_3s;
 8001342:	4a42      	ldr	r2, [pc, #264]	; (800144c <fsm_input_processing+0x160>)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	2102      	movs	r1, #2
 8001348:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				counterForButtonPress3s[index] = 0;
 800134c:	4a40      	ldr	r2, [pc, #256]	; (8001450 <fsm_input_processing+0x164>)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	2100      	movs	r1, #0
 8001352:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				getKeyProcess(index);
 8001356:	6838      	ldr	r0, [r7, #0]
 8001358:	f7ff ff86 	bl	8001268 <getKeyProcess>
				get3sFlag(index);
 800135c:	6838      	ldr	r0, [r7, #0]
 800135e:	f7ff ff99 	bl	8001294 <get3sFlag>
		if(buttonBuffer[index] == BUTTON_RELEASED){
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d164      	bne.n	8001438 <fsm_input_processing+0x14c>
			buttonState[index] = BUTTON_IS_RELEASED;
 800136e:	4a37      	ldr	r2, [pc, #220]	; (800144c <fsm_input_processing+0x160>)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	2101      	movs	r1, #1
 8001374:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress3s[index] = 0;
 8001378:	4a35      	ldr	r2, [pc, #212]	; (8001450 <fsm_input_processing+0x164>)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	2100      	movs	r1, #0
 800137e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		break;
 8001382:	e059      	b.n	8001438 <fsm_input_processing+0x14c>
		if(buttonBuffer[index] == BUTTON_PRESSED){
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d155      	bne.n	800143c <fsm_input_processing+0x150>
			buttonState[index] = BUTTON_IS_PRESSED;
 8001390:	4a2e      	ldr	r2, [pc, #184]	; (800144c <fsm_input_processing+0x160>)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	2100      	movs	r1, #0
 8001396:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			getKeyProcess(index);
 800139a:	6838      	ldr	r0, [r7, #0]
 800139c:	f7ff ff64 	bl	8001268 <getKeyProcess>
		break;
 80013a0:	e04c      	b.n	800143c <fsm_input_processing+0x150>
		if(counterForButtonPress3s[index] < DURATION_FOR_MORE_THAN_3s ){
 80013a2:	4a2b      	ldr	r2, [pc, #172]	; (8001450 <fsm_input_processing+0x164>)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013aa:	2b63      	cmp	r3, #99	; 0x63
 80013ac:	d822      	bhi.n	80013f4 <fsm_input_processing+0x108>
					counterForButtonPress3s[index]++;
 80013ae:	4a28      	ldr	r2, [pc, #160]	; (8001450 <fsm_input_processing+0x164>)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013b6:	3301      	adds	r3, #1
 80013b8:	b299      	uxth	r1, r3
 80013ba:	4a25      	ldr	r2, [pc, #148]	; (8001450 <fsm_input_processing+0x164>)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(counterForButtonPress3s[index] == DURATION_FOR_MORE_THAN_3s){
 80013c2:	4a23      	ldr	r2, [pc, #140]	; (8001450 <fsm_input_processing+0x164>)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ca:	2b64      	cmp	r3, #100	; 0x64
 80013cc:	d112      	bne.n	80013f4 <fsm_input_processing+0x108>
						buttonState[index] = BUTTON_PRESSED_MORE_THAN_3s;
 80013ce:	4a1f      	ldr	r2, [pc, #124]	; (800144c <fsm_input_processing+0x160>)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	2102      	movs	r1, #2
 80013d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						counterForButtonPress3s[index] = 0;
 80013d8:	4a1d      	ldr	r2, [pc, #116]	; (8001450 <fsm_input_processing+0x164>)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	2100      	movs	r1, #0
 80013de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						get1sFlag(index);
 80013e2:	6838      	ldr	r0, [r7, #0]
 80013e4:	f7ff ff6c 	bl	80012c0 <get1sFlag>
						getKeyProcess(index);
 80013e8:	6838      	ldr	r0, [r7, #0]
 80013ea:	f7ff ff3d 	bl	8001268 <getKeyProcess>
						get3sFlag(index);
 80013ee:	6838      	ldr	r0, [r7, #0]
 80013f0:	f7ff ff50 	bl	8001294 <get3sFlag>
		if(buttonBuffer[index] == BUTTON_RELEASED){
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d11f      	bne.n	8001440 <fsm_input_processing+0x154>
			buttonState[index] = BUTTON_IS_RELEASED;
 8001400:	4a12      	ldr	r2, [pc, #72]	; (800144c <fsm_input_processing+0x160>)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	2101      	movs	r1, #1
 8001406:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress3s[index] = 0;
 800140a:	4a11      	ldr	r2, [pc, #68]	; (8001450 <fsm_input_processing+0x164>)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	2100      	movs	r1, #0
 8001410:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress3s[index] = 0;
 8001414:	4a0f      	ldr	r2, [pc, #60]	; (8001454 <fsm_input_processing+0x168>)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	4413      	add	r3, r2
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
			flag1s[index] = 0;
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <fsm_input_processing+0x16c>)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	4413      	add	r3, r2
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
			button_flag[index] = 0;
 8001428:	4a0c      	ldr	r2, [pc, #48]	; (800145c <fsm_input_processing+0x170>)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	2100      	movs	r1, #0
 800142e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		break;
 8001432:	e005      	b.n	8001440 <fsm_input_processing+0x154>
		break;
 8001434:	bf00      	nop
 8001436:	e004      	b.n	8001442 <fsm_input_processing+0x156>
		break;
 8001438:	bf00      	nop
 800143a:	e002      	b.n	8001442 <fsm_input_processing+0x156>
		break;
 800143c:	bf00      	nop
 800143e:	e000      	b.n	8001442 <fsm_input_processing+0x156>
		break;
 8001440:	bf00      	nop
	}
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000004 	.word	0x20000004
 8001450:	20000288 	.word	0x20000288
 8001454:	20000280 	.word	0x20000280
 8001458:	20000284 	.word	0x20000284
 800145c:	20000290 	.word	0x20000290

08001460 <button_reading>:
void button_reading(void){
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i++){
 8001466:	2300      	movs	r3, #0
 8001468:	71fb      	strb	r3, [r7, #7]
 800146a:	e052      	b.n	8001512 <button_reading+0xb2>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 800146c:	79fa      	ldrb	r2, [r7, #7]
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	492c      	ldr	r1, [pc, #176]	; (8001524 <button_reading+0xc4>)
 8001472:	5c89      	ldrb	r1, [r1, r2]
 8001474:	4a2c      	ldr	r2, [pc, #176]	; (8001528 <button_reading+0xc8>)
 8001476:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8001478:	79fa      	ldrb	r2, [r7, #7]
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	492b      	ldr	r1, [pc, #172]	; (800152c <button_reading+0xcc>)
 800147e:	5c89      	ldrb	r1, [r1, r2]
 8001480:	4a28      	ldr	r2, [pc, #160]	; (8001524 <button_reading+0xc4>)
 8001482:	54d1      	strb	r1, [r2, r3]
		// Chosing Which button is pressed.
		switch(i){
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d01a      	beq.n	80014c0 <button_reading+0x60>
 800148a:	2b02      	cmp	r3, #2
 800148c:	dc22      	bgt.n	80014d4 <button_reading+0x74>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d002      	beq.n	8001498 <button_reading+0x38>
 8001492:	2b01      	cmp	r3, #1
 8001494:	d00a      	beq.n	80014ac <button_reading+0x4c>
			break;
		case 2://  read signal from button0
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
			break;
		default:
			break;
 8001496:	e01d      	b.n	80014d4 <button_reading+0x74>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button0_GPIO_Port, Button0_Pin);
 8001498:	79fc      	ldrb	r4, [r7, #7]
 800149a:	2101      	movs	r1, #1
 800149c:	4824      	ldr	r0, [pc, #144]	; (8001530 <button_reading+0xd0>)
 800149e:	f003 fc03 	bl	8004ca8 <HAL_GPIO_ReadPin>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b21      	ldr	r3, [pc, #132]	; (800152c <button_reading+0xcc>)
 80014a8:	551a      	strb	r2, [r3, r4]
			break;
 80014aa:	e014      	b.n	80014d6 <button_reading+0x76>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80014ac:	79fc      	ldrb	r4, [r7, #7]
 80014ae:	2102      	movs	r1, #2
 80014b0:	481f      	ldr	r0, [pc, #124]	; (8001530 <button_reading+0xd0>)
 80014b2:	f003 fbf9 	bl	8004ca8 <HAL_GPIO_ReadPin>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b1c      	ldr	r3, [pc, #112]	; (800152c <button_reading+0xcc>)
 80014bc:	551a      	strb	r2, [r3, r4]
			break;
 80014be:	e00a      	b.n	80014d6 <button_reading+0x76>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80014c0:	79fc      	ldrb	r4, [r7, #7]
 80014c2:	2104      	movs	r1, #4
 80014c4:	481a      	ldr	r0, [pc, #104]	; (8001530 <button_reading+0xd0>)
 80014c6:	f003 fbef 	bl	8004ca8 <HAL_GPIO_ReadPin>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b17      	ldr	r3, [pc, #92]	; (800152c <button_reading+0xcc>)
 80014d0:	551a      	strb	r2, [r3, r4]
			break;
 80014d2:	e000      	b.n	80014d6 <button_reading+0x76>
			break;
 80014d4:	bf00      	nop
		}
		if((debounceButtonBuffer3[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer2[i] == debounceButtonBuffer1[i])){
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	4a13      	ldr	r2, [pc, #76]	; (8001528 <button_reading+0xc8>)
 80014da:	5cd2      	ldrb	r2, [r2, r3]
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	4911      	ldr	r1, [pc, #68]	; (8001524 <button_reading+0xc4>)
 80014e0:	5ccb      	ldrb	r3, [r1, r3]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d112      	bne.n	800150c <button_reading+0xac>
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <button_reading+0xc4>)
 80014ea:	5cd2      	ldrb	r2, [r2, r3]
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	490f      	ldr	r1, [pc, #60]	; (800152c <button_reading+0xcc>)
 80014f0:	5ccb      	ldrb	r3, [r1, r3]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d10a      	bne.n	800150c <button_reading+0xac>
			buttonBuffer[i] = debounceButtonBuffer3[i];
 80014f6:	79fa      	ldrb	r2, [r7, #7]
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	490b      	ldr	r1, [pc, #44]	; (8001528 <button_reading+0xc8>)
 80014fc:	5c89      	ldrb	r1, [r1, r2]
 80014fe:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <button_reading+0xd4>)
 8001500:	54d1      	strb	r1, [r2, r3]
			fsm_input_processing(buttonBuffer,i);
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	4619      	mov	r1, r3
 8001506:	480b      	ldr	r0, [pc, #44]	; (8001534 <button_reading+0xd4>)
 8001508:	f7ff fef0 	bl	80012ec <fsm_input_processing>
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i++){
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	3301      	adds	r3, #1
 8001510:	71fb      	strb	r3, [r7, #7]
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d9a9      	bls.n	800146c <button_reading+0xc>
		}

	}
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bd90      	pop	{r4, r7, pc}
 8001522:	bf00      	nop
 8001524:	20000278 	.word	0x20000278
 8001528:	2000027c 	.word	0x2000027c
 800152c:	20000274 	.word	0x20000274
 8001530:	40010c00 	.word	0x40010c00
 8001534:	20000270 	.word	0x20000270

08001538 <is_button_pressed>:


int is_button_pressed(uint8_t index){
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <is_button_pressed+0x14>
 8001548:	2300      	movs	r3, #0
 800154a:	e00d      	b.n	8001568 <is_button_pressed+0x30>
	if(button_flag[index] == 1){
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <is_button_pressed+0x3c>)
 8001550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d106      	bne.n	8001566 <is_button_pressed+0x2e>
		//set button flag value = 0
		button_flag[index] = 0;
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	4a06      	ldr	r2, [pc, #24]	; (8001574 <is_button_pressed+0x3c>)
 800155c:	2100      	movs	r1, #0
 800155e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <is_button_pressed+0x30>
	}
	return 0;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000290 	.word	0x20000290

08001578 <pwmDMA>:
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 }

 void pwmDMA(void){
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
	  /* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <pwmDMA+0x38>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <pwmDMA+0x38>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6153      	str	r3, [r2, #20]
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <pwmDMA+0x38>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA1_Channel2_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	200c      	movs	r0, #12
 800159c:	f002 ff1b 	bl	80043d6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80015a0:	200c      	movs	r0, #12
 80015a2:	f002 ff34 	bl	800440e <HAL_NVIC_EnableIRQ>
 }
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000

080015b4 <pwmMode>:
void pwmMode(TIM_HandleTypeDef *htim, uint8_t indexTim, uint8_t indexChannel, uint32_t prescaler, uint32_t period, uint8_t dmaFlag){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b0a0      	sub	sp, #128	; 0x80
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	460b      	mov	r3, r1
 80015c0:	72fb      	strb	r3, [r7, #11]
 80015c2:	4613      	mov	r3, r2
 80015c4:	72bb      	strb	r3, [r7, #10]
	if((indexTim < 1 || indexTim > 4) || (indexChannel < 1 || indexChannel > 4)){
 80015c6:	7afb      	ldrb	r3, [r7, #11]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d008      	beq.n	80015de <pwmMode+0x2a>
 80015cc:	7afb      	ldrb	r3, [r7, #11]
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d805      	bhi.n	80015de <pwmMode+0x2a>
 80015d2:	7abb      	ldrb	r3, [r7, #10]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d002      	beq.n	80015de <pwmMode+0x2a>
 80015d8:	7abb      	ldrb	r3, [r7, #10]
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d901      	bls.n	80015e2 <pwmMode+0x2e>
 	    Error_Handler();
 80015de:	f001 f92e 	bl	800283e <Error_Handler>
	}
	indexTim -= 1;
 80015e2:	7afb      	ldrb	r3, [r7, #11]
 80015e4:	3b01      	subs	r3, #1
 80015e6:	72fb      	strb	r3, [r7, #11]
	indexChannel -=1;
 80015e8:	7abb      	ldrb	r3, [r7, #10]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	72bb      	strb	r3, [r7, #10]
//
//    /*Check GPIOx parameter */
//    assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
//    /*Check pin parameter*/
//    assert_param(IS_GPIO_PIN(GPIO_PIN[pin]));
      TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001606:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800161a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161e:	2220      	movs	r2, #32
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f009 f936 	bl	800a894 <memset>
      if(dmaFlag == 0){
 8001628:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800162c:	2b00      	cmp	r3, #0
 800162e:	d14b      	bne.n	80016c8 <pwmMode+0x114>
    	  htim->Instance = arrayTim[indexTim];
 8001630:	7afb      	ldrb	r3, [r7, #11]
 8001632:	4aa2      	ldr	r2, [pc, #648]	; (80018bc <pwmMode+0x308>)
 8001634:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	601a      	str	r2, [r3, #0]
    	  	  htim->Init.Prescaler = prescaler;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	605a      	str	r2, [r3, #4]
    	  	  htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
    	  	  htim->Init.Period = period;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800164e:	60da      	str	r2, [r3, #12]
    	  	  htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
    	  	  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
    	  	  if (HAL_TIM_Base_Init(htim) != HAL_OK)
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f006 fe97 	bl	8008390 <HAL_TIM_Base_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <pwmMode+0xb8>
    	  	  {
    	  	    Error_Handler();
 8001668:	f001 f8e9 	bl	800283e <Error_Handler>
    	  	  }
    	  	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001670:	66bb      	str	r3, [r7, #104]	; 0x68
    	  	  if (HAL_TIM_ConfigClockSource(htim, &sClockSourceConfig) != HAL_OK)
 8001672:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001676:	4619      	mov	r1, r3
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f007 fd47 	bl	800910c <HAL_TIM_ConfigClockSource>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <pwmMode+0xd4>
    	  	  {
    	  	    Error_Handler();
 8001684:	f001 f8db 	bl	800283e <Error_Handler>
    	  	  }
    	  	  if (HAL_TIM_PWM_Init(htim) != HAL_OK)
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f006 ff23 	bl	80084d4 <HAL_TIM_PWM_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <pwmMode+0xe4>
    	  	  {
    	  	    Error_Handler();
 8001694:	f001 f8d3 	bl	800283e <Error_Handler>
    	  	  }
    	  	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	663b      	str	r3, [r7, #96]	; 0x60
    	  	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	667b      	str	r3, [r7, #100]	; 0x64
    	  	  if (HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig) != HAL_OK)
 80016a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80016a4:	4619      	mov	r1, r3
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f008 f990 	bl	80099cc <HAL_TIMEx_MasterConfigSynchronization>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <pwmMode+0x102>
    	  	  {
    	  	    Error_Handler();
 80016b2:	f001 f8c4 	bl	800283e <Error_Handler>
    	  	  }
    	  	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b6:	2360      	movs	r3, #96	; 0x60
 80016b8:	647b      	str	r3, [r7, #68]	; 0x44
    	  	  sConfigOC.Pulse = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	64bb      	str	r3, [r7, #72]	; 0x48
    	  	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016be:	2300      	movs	r3, #0
 80016c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    	  	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	657b      	str	r3, [r7, #84]	; 0x54
 80016c6:	e03b      	b.n	8001740 <pwmMode+0x18c>
      }
      else{
    	    pwmDMA();
 80016c8:	f7ff ff56 	bl	8001578 <pwmDMA>
    	    htim->Instance = TIM1;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4a7c      	ldr	r2, [pc, #496]	; (80018c0 <pwmMode+0x30c>)
 80016d0:	601a      	str	r2, [r3, #0]
    	    htim->Init.Prescaler = 0;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	605a      	str	r2, [r3, #4]
    	    htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
    	    htim->Init.Period = 90-1;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2259      	movs	r2, #89	; 0x59
 80016e2:	60da      	str	r2, [r3, #12]
    	    htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
    	    htim->Init.RepetitionCounter = 0;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	615a      	str	r2, [r3, #20]
    	    htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
    	    if (HAL_TIM_PWM_Init(htim) != HAL_OK)
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f006 feec 	bl	80084d4 <HAL_TIM_PWM_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <pwmMode+0x152>
    	    {
    	      Error_Handler();
 8001702:	f001 f89c 	bl	800283e <Error_Handler>
    	    }
    	    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	663b      	str	r3, [r7, #96]	; 0x60
    	    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	667b      	str	r3, [r7, #100]	; 0x64
    	    if (HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig) != HAL_OK)
 800170e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001712:	4619      	mov	r1, r3
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f008 f959 	bl	80099cc <HAL_TIMEx_MasterConfigSynchronization>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <pwmMode+0x170>
    	    {
    	      Error_Handler();
 8001720:	f001 f88d 	bl	800283e <Error_Handler>
    	    }
    	    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001724:	2360      	movs	r3, #96	; 0x60
 8001726:	647b      	str	r3, [r7, #68]	; 0x44
    	    sConfigOC.Pulse = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	64bb      	str	r3, [r7, #72]	; 0x48
    	    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800172c:	2300      	movs	r3, #0
 800172e:	64fb      	str	r3, [r7, #76]	; 0x4c
    	    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001730:	2300      	movs	r3, #0
 8001732:	653b      	str	r3, [r7, #80]	; 0x50
    	    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	657b      	str	r3, [r7, #84]	; 0x54
    	    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001738:	2300      	movs	r3, #0
 800173a:	65bb      	str	r3, [r7, #88]	; 0x58
    	    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	65fb      	str	r3, [r7, #92]	; 0x5c
      }

 	  //TIM1
 	  if(arrayTim[indexTim] == TIM1){
 8001740:	7afb      	ldrb	r3, [r7, #11]
 8001742:	4a5e      	ldr	r2, [pc, #376]	; (80018bc <pwmMode+0x308>)
 8001744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001748:	4a5d      	ldr	r2, [pc, #372]	; (80018c0 <pwmMode+0x30c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	f040 80ef 	bne.w	800192e <pwmMode+0x37a>
 		  if (HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, arrayChannel[indexChannel]) != HAL_OK)
 8001750:	7abb      	ldrb	r3, [r7, #10]
 8001752:	4a5c      	ldr	r2, [pc, #368]	; (80018c4 <pwmMode+0x310>)
 8001754:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001758:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800175c:	4619      	mov	r1, r3
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f007 fc12 	bl	8008f88 <HAL_TIM_PWM_ConfigChannel>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <pwmMode+0x1ba>
 		 	  {
 		 	    Error_Handler();
 800176a:	f001 f868 	bl	800283e <Error_Handler>
 		 	  }
 	 	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	4b56      	ldr	r3, [pc, #344]	; (80018c8 <pwmMode+0x314>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	4a55      	ldr	r2, [pc, #340]	; (80018c8 <pwmMode+0x314>)
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	6193      	str	r3, [r2, #24]
 800177a:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <pwmMode+0x314>)
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	623b      	str	r3, [r7, #32]
 8001784:	6a3b      	ldr	r3, [r7, #32]
 	 	  switch (indexChannel) {
 8001786:	7abb      	ldrb	r3, [r7, #10]
 8001788:	2b03      	cmp	r3, #3
 800178a:	f200 80a3 	bhi.w	80018d4 <pwmMode+0x320>
 800178e:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <pwmMode+0x1e0>)
 8001790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001794:	080017a5 	.word	0x080017a5
 8001798:	080017eb 	.word	0x080017eb
 800179c:	08001831 	.word	0x08001831
 80017a0:	08001877 	.word	0x08001877
			case 0:
				if(gpioPWMFlag1 == 0){
 80017a4:	4b49      	ldr	r3, [pc, #292]	; (80018cc <pwmMode+0x318>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d104      	bne.n	80017b6 <pwmMode+0x202>
					GPIO_PWM_InitStruct[0].Pin = GPIO_PIN_8;
 80017ac:	4b48      	ldr	r3, [pc, #288]	; (80018d0 <pwmMode+0x31c>)
 80017ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	e005      	b.n	80017c2 <pwmMode+0x20e>
				}
				else{
					GPIO_PWM_InitStruct[0].Pin |= GPIO_PIN_8;
 80017b6:	4b46      	ldr	r3, [pc, #280]	; (80018d0 <pwmMode+0x31c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017be:	4a44      	ldr	r2, [pc, #272]	; (80018d0 <pwmMode+0x31c>)
 80017c0:	6013      	str	r3, [r2, #0]
				}
				   gpioPWMFlag1++;
 80017c2:	4b42      	ldr	r3, [pc, #264]	; (80018cc <pwmMode+0x318>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4b40      	ldr	r3, [pc, #256]	; (80018cc <pwmMode+0x318>)
 80017cc:	701a      	strb	r2, [r3, #0]
				   if(dmaFlag == 0){
 80017ce:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d104      	bne.n	80017e0 <pwmMode+0x22c>
					   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 80017d6:	2100      	movs	r1, #0
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f006 fed3 	bl	8008584 <HAL_TIM_PWM_Start>
				   }
				   else{
					   HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_1);
				   }
				break;
 80017de:	e07a      	b.n	80018d6 <pwmMode+0x322>
					   HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_1);
 80017e0:	2100      	movs	r1, #0
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f006 ff70 	bl	80086c8 <HAL_TIM_PWM_Start_IT>
				break;
 80017e8:	e075      	b.n	80018d6 <pwmMode+0x322>
			case 1:
				if(gpioPWMFlag1 == 0){
 80017ea:	4b38      	ldr	r3, [pc, #224]	; (80018cc <pwmMode+0x318>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d104      	bne.n	80017fc <pwmMode+0x248>
					GPIO_PWM_InitStruct[0].Pin = GPIO_PIN_9;
 80017f2:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <pwmMode+0x31c>)
 80017f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	e005      	b.n	8001808 <pwmMode+0x254>
				}
				else{
					GPIO_PWM_InitStruct[0].Pin |= GPIO_PIN_9;
 80017fc:	4b34      	ldr	r3, [pc, #208]	; (80018d0 <pwmMode+0x31c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001804:	4a32      	ldr	r2, [pc, #200]	; (80018d0 <pwmMode+0x31c>)
 8001806:	6013      	str	r3, [r2, #0]
				}
					gpioPWMFlag1++;
 8001808:	4b30      	ldr	r3, [pc, #192]	; (80018cc <pwmMode+0x318>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	b2da      	uxtb	r2, r3
 8001810:	4b2e      	ldr	r3, [pc, #184]	; (80018cc <pwmMode+0x318>)
 8001812:	701a      	strb	r2, [r3, #0]
				   if(dmaFlag == 0){
 8001814:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001818:	2b00      	cmp	r3, #0
 800181a:	d104      	bne.n	8001826 <pwmMode+0x272>
					   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 800181c:	2104      	movs	r1, #4
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f006 feb0 	bl	8008584 <HAL_TIM_PWM_Start>
				   }
				   else{
					   HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_2);
				   }
				break;
 8001824:	e057      	b.n	80018d6 <pwmMode+0x322>
					   HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_2);
 8001826:	2104      	movs	r1, #4
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f006 ff4d 	bl	80086c8 <HAL_TIM_PWM_Start_IT>
				break;
 800182e:	e052      	b.n	80018d6 <pwmMode+0x322>
			case 2:
				if(gpioPWMFlag1 == 0){
 8001830:	4b26      	ldr	r3, [pc, #152]	; (80018cc <pwmMode+0x318>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d104      	bne.n	8001842 <pwmMode+0x28e>
					GPIO_PWM_InitStruct[0].Pin = GPIO_PIN_10;
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <pwmMode+0x31c>)
 800183a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	e005      	b.n	800184e <pwmMode+0x29a>
				}
				else{
					GPIO_PWM_InitStruct[0].Pin |= GPIO_PIN_10;
 8001842:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <pwmMode+0x31c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800184a:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <pwmMode+0x31c>)
 800184c:	6013      	str	r3, [r2, #0]
				}
					gpioPWMFlag1++;
 800184e:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <pwmMode+0x318>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <pwmMode+0x318>)
 8001858:	701a      	strb	r2, [r3, #0]
				   if(dmaFlag == 0){
 800185a:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800185e:	2b00      	cmp	r3, #0
 8001860:	d104      	bne.n	800186c <pwmMode+0x2b8>
					   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8001862:	2108      	movs	r1, #8
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f006 fe8d 	bl	8008584 <HAL_TIM_PWM_Start>
				   }
				   else{
					   HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_3);
				   }
				break;
 800186a:	e034      	b.n	80018d6 <pwmMode+0x322>
					   HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_3);
 800186c:	2108      	movs	r1, #8
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f006 ff2a 	bl	80086c8 <HAL_TIM_PWM_Start_IT>
				break;
 8001874:	e02f      	b.n	80018d6 <pwmMode+0x322>
			case 3:
				if(gpioPWMFlag1 == 0){
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <pwmMode+0x318>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d104      	bne.n	8001888 <pwmMode+0x2d4>
					GPIO_PWM_InitStruct[0].Pin = GPIO_PIN_11;
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <pwmMode+0x31c>)
 8001880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	e005      	b.n	8001894 <pwmMode+0x2e0>
				}
				else{
					GPIO_PWM_InitStruct[0].Pin |= GPIO_PIN_11;
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <pwmMode+0x31c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001890:	4a0f      	ldr	r2, [pc, #60]	; (80018d0 <pwmMode+0x31c>)
 8001892:	6013      	str	r3, [r2, #0]
				}
					gpioPWMFlag1++;
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <pwmMode+0x318>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	3301      	adds	r3, #1
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <pwmMode+0x318>)
 800189e:	701a      	strb	r2, [r3, #0]
					   if(dmaFlag == 0){
 80018a0:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d104      	bne.n	80018b2 <pwmMode+0x2fe>
						   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 80018a8:	210c      	movs	r1, #12
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f006 fe6a 	bl	8008584 <HAL_TIM_PWM_Start>
					   }
					   else{
						  HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_4);
					   }
				break;
 80018b0:	e011      	b.n	80018d6 <pwmMode+0x322>
						  HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_4);
 80018b2:	210c      	movs	r1, #12
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f006 ff07 	bl	80086c8 <HAL_TIM_PWM_Start_IT>
				break;
 80018ba:	e00c      	b.n	80018d6 <pwmMode+0x322>
 80018bc:	20000020 	.word	0x20000020
 80018c0:	40012c00 	.word	0x40012c00
 80018c4:	20000030 	.word	0x20000030
 80018c8:	40021000 	.word	0x40021000
 80018cc:	200002a1 	.word	0x200002a1
 80018d0:	200002a8 	.word	0x200002a8
			default:
				break;
 80018d4:	bf00      	nop
		}
	 	 	if(dmaFlag == 1){
 80018d6:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d119      	bne.n	8001912 <pwmMode+0x35e>
	 	 	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
	 	 	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62bb      	str	r3, [r7, #40]	; 0x28
	 	 	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	 	 	  sBreakDeadTimeConfig.DeadTime = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	633b      	str	r3, [r7, #48]	; 0x30
	 	 	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	637b      	str	r3, [r7, #52]	; 0x34
	 	 	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f6:	63bb      	str	r3, [r7, #56]	; 0x38
	 	 	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	643b      	str	r3, [r7, #64]	; 0x40
	 	 	  if (HAL_TIMEx_ConfigBreakDeadTime(htim, &sBreakDeadTimeConfig) != HAL_OK)
 80018fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001900:	4619      	mov	r1, r3
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f008 f8c0 	bl	8009a88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <pwmMode+0x35e>
	 	 	  {
	 	 	    Error_Handler();
 800190e:	f000 ff96 	bl	800283e <Error_Handler>
	 	 	  }
// 	 	 	    pwmDMA();
	 	 	}
 	 	 	GPIO_PWM_InitStruct[0].Mode = GPIO_MODE_AF_PP;
 8001912:	4ba2      	ldr	r3, [pc, #648]	; (8001b9c <pwmMode+0x5e8>)
 8001914:	2202      	movs	r2, #2
 8001916:	605a      	str	r2, [r3, #4]
 	 	 	GPIO_PWM_InitStruct[0].Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	4ba0      	ldr	r3, [pc, #640]	; (8001b9c <pwmMode+0x5e8>)
 800191a:	2202      	movs	r2, #2
 800191c:	60da      	str	r2, [r3, #12]
 	 	 	HAL_GPIO_Init(GPIOA, &GPIO_PWM_InitStruct[0]);
 800191e:	499f      	ldr	r1, [pc, #636]	; (8001b9c <pwmMode+0x5e8>)
 8001920:	489f      	ldr	r0, [pc, #636]	; (8001ba0 <pwmMode+0x5ec>)
 8001922:	f003 f83d 	bl	80049a0 <HAL_GPIO_Init>
 	  		HAL_TIM_Base_Start_IT(htim);
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f006 fd82 	bl	8008430 <HAL_TIM_Base_Start_IT>
 	 	 	GPIO_PWM_InitStruct[3].Speed = GPIO_SPEED_FREQ_LOW;
 	 	 	HAL_GPIO_Init(GPIOB, &GPIO_PWM_InitStruct[3]);
 	  		HAL_TIM_Base_Start_IT(htim);
 	  		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "GPIO_PWM=%04X\r\n", GPIO_PWM_InitStruct[3].Pin), 1000);
 	  }
}
 800192c:	e26f      	b.n	8001e0e <pwmMode+0x85a>
 	  else if(arrayTim[indexTim] == TIM2){
 800192e:	7afb      	ldrb	r3, [r7, #11]
 8001930:	4a9c      	ldr	r2, [pc, #624]	; (8001ba4 <pwmMode+0x5f0>)
 8001932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800193a:	f040 80db 	bne.w	8001af4 <pwmMode+0x540>
 		  if (HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, arrayChannel[indexChannel]) != HAL_OK)
 800193e:	7abb      	ldrb	r3, [r7, #10]
 8001940:	4a99      	ldr	r2, [pc, #612]	; (8001ba8 <pwmMode+0x5f4>)
 8001942:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001946:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800194a:	4619      	mov	r1, r3
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f007 fb1b 	bl	8008f88 <HAL_TIM_PWM_ConfigChannel>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <pwmMode+0x3a8>
 		 	    Error_Handler();
 8001958:	f000 ff71 	bl	800283e <Error_Handler>
 	 	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195c:	4b93      	ldr	r3, [pc, #588]	; (8001bac <pwmMode+0x5f8>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	4a92      	ldr	r2, [pc, #584]	; (8001bac <pwmMode+0x5f8>)
 8001962:	f043 0304 	orr.w	r3, r3, #4
 8001966:	6193      	str	r3, [r2, #24]
 8001968:	4b90      	ldr	r3, [pc, #576]	; (8001bac <pwmMode+0x5f8>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	69fb      	ldr	r3, [r7, #28]
 	 	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001974:	4b8d      	ldr	r3, [pc, #564]	; (8001bac <pwmMode+0x5f8>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a8c      	ldr	r2, [pc, #560]	; (8001bac <pwmMode+0x5f8>)
 800197a:	f043 0308 	orr.w	r3, r3, #8
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b8a      	ldr	r3, [pc, #552]	; (8001bac <pwmMode+0x5f8>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	61bb      	str	r3, [r7, #24]
 800198a:	69bb      	ldr	r3, [r7, #24]
 		  switch (indexChannel) {
 800198c:	7abb      	ldrb	r3, [r7, #10]
 800198e:	2b03      	cmp	r3, #3
 8001990:	f200 8099 	bhi.w	8001ac6 <pwmMode+0x512>
 8001994:	a201      	add	r2, pc, #4	; (adr r2, 800199c <pwmMode+0x3e8>)
 8001996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199a:	bf00      	nop
 800199c:	080019ad 	.word	0x080019ad
 80019a0:	080019f5 	.word	0x080019f5
 80019a4:	08001a3b 	.word	0x08001a3b
 80019a8:	08001a83 	.word	0x08001a83
				if(gpioPWMFlag2A == 0){
 80019ac:	4b80      	ldr	r3, [pc, #512]	; (8001bb0 <pwmMode+0x5fc>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d104      	bne.n	80019be <pwmMode+0x40a>
					GPIO_PWM_InitStruct[0].Pin = GPIO_PIN_15;
 80019b4:	4b79      	ldr	r3, [pc, #484]	; (8001b9c <pwmMode+0x5e8>)
 80019b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	e005      	b.n	80019ca <pwmMode+0x416>
					GPIO_PWM_InitStruct[0].Pin |= GPIO_PIN_15;
 80019be:	4b77      	ldr	r3, [pc, #476]	; (8001b9c <pwmMode+0x5e8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019c6:	4a75      	ldr	r2, [pc, #468]	; (8001b9c <pwmMode+0x5e8>)
 80019c8:	6013      	str	r3, [r2, #0]
		 	 	GPIO_PWM_InitStruct[1].Mode = GPIO_MODE_AF_PP;
 80019ca:	4b74      	ldr	r3, [pc, #464]	; (8001b9c <pwmMode+0x5e8>)
 80019cc:	2202      	movs	r2, #2
 80019ce:	615a      	str	r2, [r3, #20]
		 	 	GPIO_PWM_InitStruct[1].Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	4b72      	ldr	r3, [pc, #456]	; (8001b9c <pwmMode+0x5e8>)
 80019d2:	2202      	movs	r2, #2
 80019d4:	61da      	str	r2, [r3, #28]
		 	 	HAL_GPIO_Init(GPIOA, &GPIO_PWM_InitStruct[1]);
 80019d6:	4977      	ldr	r1, [pc, #476]	; (8001bb4 <pwmMode+0x600>)
 80019d8:	4871      	ldr	r0, [pc, #452]	; (8001ba0 <pwmMode+0x5ec>)
 80019da:	f002 ffe1 	bl	80049a0 <HAL_GPIO_Init>
				gpioPWMFlag2A++;
 80019de:	4b74      	ldr	r3, [pc, #464]	; (8001bb0 <pwmMode+0x5fc>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	3301      	adds	r3, #1
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4b72      	ldr	r3, [pc, #456]	; (8001bb0 <pwmMode+0x5fc>)
 80019e8:	701a      	strb	r2, [r3, #0]
				  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 80019ea:	2100      	movs	r1, #0
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f006 fdc9 	bl	8008584 <HAL_TIM_PWM_Start>
				break;
 80019f2:	e069      	b.n	8001ac8 <pwmMode+0x514>
				if(gpioPWMFlag2A == 0){
 80019f4:	4b6e      	ldr	r3, [pc, #440]	; (8001bb0 <pwmMode+0x5fc>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d103      	bne.n	8001a04 <pwmMode+0x450>
					GPIO_PWM_InitStruct[0].Pin = GPIO_PIN_1;
 80019fc:	4b67      	ldr	r3, [pc, #412]	; (8001b9c <pwmMode+0x5e8>)
 80019fe:	2202      	movs	r2, #2
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	e005      	b.n	8001a10 <pwmMode+0x45c>
					GPIO_PWM_InitStruct[0].Pin |= GPIO_PIN_1;
 8001a04:	4b65      	ldr	r3, [pc, #404]	; (8001b9c <pwmMode+0x5e8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	4a63      	ldr	r2, [pc, #396]	; (8001b9c <pwmMode+0x5e8>)
 8001a0e:	6013      	str	r3, [r2, #0]
				gpioPWMFlag2A++;
 8001a10:	4b67      	ldr	r3, [pc, #412]	; (8001bb0 <pwmMode+0x5fc>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	3301      	adds	r3, #1
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4b65      	ldr	r3, [pc, #404]	; (8001bb0 <pwmMode+0x5fc>)
 8001a1a:	701a      	strb	r2, [r3, #0]
		 	 	GPIO_PWM_InitStruct[1].Mode = GPIO_MODE_AF_PP;
 8001a1c:	4b5f      	ldr	r3, [pc, #380]	; (8001b9c <pwmMode+0x5e8>)
 8001a1e:	2202      	movs	r2, #2
 8001a20:	615a      	str	r2, [r3, #20]
		 	 	GPIO_PWM_InitStruct[1].Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	4b5e      	ldr	r3, [pc, #376]	; (8001b9c <pwmMode+0x5e8>)
 8001a24:	2202      	movs	r2, #2
 8001a26:	61da      	str	r2, [r3, #28]
		 	 	HAL_GPIO_Init(GPIOA, &GPIO_PWM_InitStruct[1]);
 8001a28:	4962      	ldr	r1, [pc, #392]	; (8001bb4 <pwmMode+0x600>)
 8001a2a:	485d      	ldr	r0, [pc, #372]	; (8001ba0 <pwmMode+0x5ec>)
 8001a2c:	f002 ffb8 	bl	80049a0 <HAL_GPIO_Init>
				HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 8001a30:	2104      	movs	r1, #4
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f006 fda6 	bl	8008584 <HAL_TIM_PWM_Start>
				break;
 8001a38:	e046      	b.n	8001ac8 <pwmMode+0x514>
				if(gpioPWMFlag2B == 0){
 8001a3a:	4b5f      	ldr	r3, [pc, #380]	; (8001bb8 <pwmMode+0x604>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d104      	bne.n	8001a4c <pwmMode+0x498>
					GPIO_PWM_InitStruct[0].Pin = GPIO_PIN_10;
 8001a42:	4b56      	ldr	r3, [pc, #344]	; (8001b9c <pwmMode+0x5e8>)
 8001a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	e005      	b.n	8001a58 <pwmMode+0x4a4>
					GPIO_PWM_InitStruct[0].Pin |= GPIO_PIN_10;
 8001a4c:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <pwmMode+0x5e8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a54:	4a51      	ldr	r2, [pc, #324]	; (8001b9c <pwmMode+0x5e8>)
 8001a56:	6013      	str	r3, [r2, #0]
				gpioPWMFlag2B++;
 8001a58:	4b57      	ldr	r3, [pc, #348]	; (8001bb8 <pwmMode+0x604>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	4b55      	ldr	r3, [pc, #340]	; (8001bb8 <pwmMode+0x604>)
 8001a62:	701a      	strb	r2, [r3, #0]
		 	 	GPIO_PWM_InitStruct[1].Mode = GPIO_MODE_AF_PP;
 8001a64:	4b4d      	ldr	r3, [pc, #308]	; (8001b9c <pwmMode+0x5e8>)
 8001a66:	2202      	movs	r2, #2
 8001a68:	615a      	str	r2, [r3, #20]
		 	 	GPIO_PWM_InitStruct[1].Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	4b4c      	ldr	r3, [pc, #304]	; (8001b9c <pwmMode+0x5e8>)
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	61da      	str	r2, [r3, #28]
		 	 	HAL_GPIO_Init(GPIOB, &GPIO_PWM_InitStruct[1]);
 8001a70:	4950      	ldr	r1, [pc, #320]	; (8001bb4 <pwmMode+0x600>)
 8001a72:	4852      	ldr	r0, [pc, #328]	; (8001bbc <pwmMode+0x608>)
 8001a74:	f002 ff94 	bl	80049a0 <HAL_GPIO_Init>
				  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8001a78:	2108      	movs	r1, #8
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f006 fd82 	bl	8008584 <HAL_TIM_PWM_Start>
				break;
 8001a80:	e022      	b.n	8001ac8 <pwmMode+0x514>
				if(gpioPWMFlag2B == 0){
 8001a82:	4b4d      	ldr	r3, [pc, #308]	; (8001bb8 <pwmMode+0x604>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d104      	bne.n	8001a94 <pwmMode+0x4e0>
					GPIO_PWM_InitStruct[0].Pin = GPIO_PIN_11;
 8001a8a:	4b44      	ldr	r3, [pc, #272]	; (8001b9c <pwmMode+0x5e8>)
 8001a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	e003      	b.n	8001a9c <pwmMode+0x4e8>
					GPIO_PWM_InitStruct[0].Pin = GPIO_PIN_11;
 8001a94:	4b41      	ldr	r3, [pc, #260]	; (8001b9c <pwmMode+0x5e8>)
 8001a96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a9a:	601a      	str	r2, [r3, #0]
				  gpioPWMFlag2B++;
 8001a9c:	4b46      	ldr	r3, [pc, #280]	; (8001bb8 <pwmMode+0x604>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4b44      	ldr	r3, [pc, #272]	; (8001bb8 <pwmMode+0x604>)
 8001aa6:	701a      	strb	r2, [r3, #0]
			 	 	GPIO_PWM_InitStruct[1].Mode = GPIO_MODE_AF_PP;
 8001aa8:	4b3c      	ldr	r3, [pc, #240]	; (8001b9c <pwmMode+0x5e8>)
 8001aaa:	2202      	movs	r2, #2
 8001aac:	615a      	str	r2, [r3, #20]
			 	 	GPIO_PWM_InitStruct[1].Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	4b3b      	ldr	r3, [pc, #236]	; (8001b9c <pwmMode+0x5e8>)
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	61da      	str	r2, [r3, #28]
			 	 	HAL_GPIO_Init(GPIOB, &GPIO_PWM_InitStruct[1]);
 8001ab4:	493f      	ldr	r1, [pc, #252]	; (8001bb4 <pwmMode+0x600>)
 8001ab6:	4841      	ldr	r0, [pc, #260]	; (8001bbc <pwmMode+0x608>)
 8001ab8:	f002 ff72 	bl	80049a0 <HAL_GPIO_Init>
				  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 8001abc:	210c      	movs	r1, #12
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f006 fd60 	bl	8008584 <HAL_TIM_PWM_Start>
				break;
 8001ac4:	e000      	b.n	8001ac8 <pwmMode+0x514>
				break;
 8001ac6:	bf00      	nop
 		    __HAL_AFIO_REMAP_TIM2_ENABLE();
 8001ac8:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <pwmMode+0x60c>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ace:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ad4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ad6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ad8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001adc:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ade:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ae0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ae4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ae6:	4a36      	ldr	r2, [pc, #216]	; (8001bc0 <pwmMode+0x60c>)
 8001ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aea:	6053      	str	r3, [r2, #4]
	  		HAL_TIM_Base_Start_IT(htim);
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f006 fc9f 	bl	8008430 <HAL_TIM_Base_Start_IT>
}
 8001af2:	e18c      	b.n	8001e0e <pwmMode+0x85a>
 	  else if(arrayTim[indexTim] == TIM3){
 8001af4:	7afb      	ldrb	r3, [r7, #11]
 8001af6:	4a2b      	ldr	r2, [pc, #172]	; (8001ba4 <pwmMode+0x5f0>)
 8001af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afc:	4a31      	ldr	r2, [pc, #196]	; (8001bc4 <pwmMode+0x610>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	f040 80d9 	bne.w	8001cb6 <pwmMode+0x702>
 		  if (HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, arrayChannel[indexChannel]) != HAL_OK)
 8001b04:	7abb      	ldrb	r3, [r7, #10]
 8001b06:	4a28      	ldr	r2, [pc, #160]	; (8001ba8 <pwmMode+0x5f4>)
 8001b08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b10:	4619      	mov	r1, r3
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f007 fa38 	bl	8008f88 <HAL_TIM_PWM_ConfigChannel>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <pwmMode+0x56e>
 		 	    Error_Handler();
 8001b1e:	f000 fe8e 	bl	800283e <Error_Handler>
 	 	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b22:	4b22      	ldr	r3, [pc, #136]	; (8001bac <pwmMode+0x5f8>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	4a21      	ldr	r2, [pc, #132]	; (8001bac <pwmMode+0x5f8>)
 8001b28:	f043 0310 	orr.w	r3, r3, #16
 8001b2c:	6193      	str	r3, [r2, #24]
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <pwmMode+0x5f8>)
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697b      	ldr	r3, [r7, #20]
 	 	  switch (indexChannel) {
 8001b3a:	7abb      	ldrb	r3, [r7, #10]
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	f200 808a 	bhi.w	8001c56 <pwmMode+0x6a2>
 8001b42:	a201      	add	r2, pc, #4	; (adr r2, 8001b48 <pwmMode+0x594>)
 8001b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b48:	08001b59 	.word	0x08001b59
 8001b4c:	08001b8b 	.word	0x08001b8b
 8001b50:	08001bef 	.word	0x08001bef
 8001b54:	08001c23 	.word	0x08001c23
				if(gpioPWMFlag3 == 0){
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <pwmMode+0x614>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d103      	bne.n	8001b68 <pwmMode+0x5b4>
					GPIO_PWM_InitStruct[2].Pin = GPIO_PIN_6;
 8001b60:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <pwmMode+0x5e8>)
 8001b62:	2240      	movs	r2, #64	; 0x40
 8001b64:	621a      	str	r2, [r3, #32]
 8001b66:	e005      	b.n	8001b74 <pwmMode+0x5c0>
					GPIO_PWM_InitStruct[2].Pin |= GPIO_PIN_6;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <pwmMode+0x5e8>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b70:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <pwmMode+0x5e8>)
 8001b72:	6213      	str	r3, [r2, #32]
				gpioPWMFlag3++;
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <pwmMode+0x614>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <pwmMode+0x614>)
 8001b7e:	701a      	strb	r2, [r3, #0]
				   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8001b80:	2100      	movs	r1, #0
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f006 fcfe 	bl	8008584 <HAL_TIM_PWM_Start>
				break;
 8001b88:	e066      	b.n	8001c58 <pwmMode+0x6a4>
				if(gpioPWMFlag3 == 0){
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <pwmMode+0x614>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d11c      	bne.n	8001bcc <pwmMode+0x618>
					GPIO_PWM_InitStruct[2].Pin = GPIO_PIN_7;
 8001b92:	4b02      	ldr	r3, [pc, #8]	; (8001b9c <pwmMode+0x5e8>)
 8001b94:	2280      	movs	r2, #128	; 0x80
 8001b96:	621a      	str	r2, [r3, #32]
 8001b98:	e01e      	b.n	8001bd8 <pwmMode+0x624>
 8001b9a:	bf00      	nop
 8001b9c:	200002a8 	.word	0x200002a8
 8001ba0:	40010800 	.word	0x40010800
 8001ba4:	20000020 	.word	0x20000020
 8001ba8:	20000030 	.word	0x20000030
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	200002a2 	.word	0x200002a2
 8001bb4:	200002b8 	.word	0x200002b8
 8001bb8:	200002a3 	.word	0x200002a3
 8001bbc:	40010c00 	.word	0x40010c00
 8001bc0:	40010000 	.word	0x40010000
 8001bc4:	40000400 	.word	0x40000400
 8001bc8:	200002a4 	.word	0x200002a4
					GPIO_PWM_InitStruct[2].Pin |= GPIO_PIN_7;
 8001bcc:	4b92      	ldr	r3, [pc, #584]	; (8001e18 <pwmMode+0x864>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd4:	4a90      	ldr	r2, [pc, #576]	; (8001e18 <pwmMode+0x864>)
 8001bd6:	6213      	str	r3, [r2, #32]
					gpioPWMFlag3++;
 8001bd8:	4b90      	ldr	r3, [pc, #576]	; (8001e1c <pwmMode+0x868>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	4b8e      	ldr	r3, [pc, #568]	; (8001e1c <pwmMode+0x868>)
 8001be2:	701a      	strb	r2, [r3, #0]
				  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 8001be4:	2104      	movs	r1, #4
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f006 fccc 	bl	8008584 <HAL_TIM_PWM_Start>
				break;
 8001bec:	e034      	b.n	8001c58 <pwmMode+0x6a4>
				if(gpioPWMFlag3 == 0){
 8001bee:	4b8b      	ldr	r3, [pc, #556]	; (8001e1c <pwmMode+0x868>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d104      	bne.n	8001c00 <pwmMode+0x64c>
					GPIO_PWM_InitStruct[2].Pin = GPIO_PIN_8;
 8001bf6:	4b88      	ldr	r3, [pc, #544]	; (8001e18 <pwmMode+0x864>)
 8001bf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bfc:	621a      	str	r2, [r3, #32]
 8001bfe:	e005      	b.n	8001c0c <pwmMode+0x658>
					GPIO_PWM_InitStruct[2].Pin |= GPIO_PIN_8;
 8001c00:	4b85      	ldr	r3, [pc, #532]	; (8001e18 <pwmMode+0x864>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c08:	4a83      	ldr	r2, [pc, #524]	; (8001e18 <pwmMode+0x864>)
 8001c0a:	6213      	str	r3, [r2, #32]
					gpioPWMFlag3++;
 8001c0c:	4b83      	ldr	r3, [pc, #524]	; (8001e1c <pwmMode+0x868>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	3301      	adds	r3, #1
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	4b81      	ldr	r3, [pc, #516]	; (8001e1c <pwmMode+0x868>)
 8001c16:	701a      	strb	r2, [r3, #0]
				  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8001c18:	2108      	movs	r1, #8
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f006 fcb2 	bl	8008584 <HAL_TIM_PWM_Start>
				break;
 8001c20:	e01a      	b.n	8001c58 <pwmMode+0x6a4>
				if(gpioPWMFlag3 == 0){
 8001c22:	4b7e      	ldr	r3, [pc, #504]	; (8001e1c <pwmMode+0x868>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d104      	bne.n	8001c34 <pwmMode+0x680>
					GPIO_PWM_InitStruct[2].Pin = GPIO_PIN_9;
 8001c2a:	4b7b      	ldr	r3, [pc, #492]	; (8001e18 <pwmMode+0x864>)
 8001c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c30:	621a      	str	r2, [r3, #32]
 8001c32:	e005      	b.n	8001c40 <pwmMode+0x68c>
					GPIO_PWM_InitStruct[2].Pin |= GPIO_PIN_9;
 8001c34:	4b78      	ldr	r3, [pc, #480]	; (8001e18 <pwmMode+0x864>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c3c:	4a76      	ldr	r2, [pc, #472]	; (8001e18 <pwmMode+0x864>)
 8001c3e:	6213      	str	r3, [r2, #32]
				  gpioPWMFlag3++;
 8001c40:	4b76      	ldr	r3, [pc, #472]	; (8001e1c <pwmMode+0x868>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	3301      	adds	r3, #1
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	4b74      	ldr	r3, [pc, #464]	; (8001e1c <pwmMode+0x868>)
 8001c4a:	701a      	strb	r2, [r3, #0]
				  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 8001c4c:	210c      	movs	r1, #12
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f006 fc98 	bl	8008584 <HAL_TIM_PWM_Start>
				break;
 8001c54:	e000      	b.n	8001c58 <pwmMode+0x6a4>
				break;
 8001c56:	bf00      	nop
 	 	GPIO_PWM_InitStruct[2].Mode = GPIO_MODE_AF_PP;
 8001c58:	4b6f      	ldr	r3, [pc, #444]	; (8001e18 <pwmMode+0x864>)
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24
 	 	GPIO_PWM_InitStruct[2].Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	4b6e      	ldr	r3, [pc, #440]	; (8001e18 <pwmMode+0x864>)
 8001c60:	2202      	movs	r2, #2
 8001c62:	62da      	str	r2, [r3, #44]	; 0x2c
 	 	HAL_GPIO_Init(GPIOC, &GPIO_PWM_InitStruct[2]);
 8001c64:	496e      	ldr	r1, [pc, #440]	; (8001e20 <pwmMode+0x86c>)
 8001c66:	486f      	ldr	r0, [pc, #444]	; (8001e24 <pwmMode+0x870>)
 8001c68:	f002 fe9a 	bl	80049a0 <HAL_GPIO_Init>
 	 	__HAL_AFIO_REMAP_TIM3_ENABLE();
 8001c6c:	4b6e      	ldr	r3, [pc, #440]	; (8001e28 <pwmMode+0x874>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c74:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001c78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c7c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c84:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001c88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c8a:	4a67      	ldr	r2, [pc, #412]	; (8001e28 <pwmMode+0x874>)
 8001c8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c8e:	6053      	str	r3, [r2, #4]
  		  HAL_TIM_Base_Start_IT(htim);
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f006 fbcd 	bl	8008430 <HAL_TIM_Base_Start_IT>
  		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "GPIO_PWM=%04X\r\n", GPIO_PWM_InitStruct[2].Pin), 1000);
 8001c96:	4b60      	ldr	r3, [pc, #384]	; (8001e18 <pwmMode+0x864>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4963      	ldr	r1, [pc, #396]	; (8001e2c <pwmMode+0x878>)
 8001c9e:	4864      	ldr	r0, [pc, #400]	; (8001e30 <pwmMode+0x87c>)
 8001ca0:	f009 fa60 	bl	800b164 <siprintf>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cac:	4960      	ldr	r1, [pc, #384]	; (8001e30 <pwmMode+0x87c>)
 8001cae:	4861      	ldr	r0, [pc, #388]	; (8001e34 <pwmMode+0x880>)
 8001cb0:	f007 ff9d 	bl	8009bee <HAL_UART_Transmit>
}
 8001cb4:	e0ab      	b.n	8001e0e <pwmMode+0x85a>
 		  if (HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, arrayChannel[indexChannel]) != HAL_OK)
 8001cb6:	7abb      	ldrb	r3, [r7, #10]
 8001cb8:	4a5f      	ldr	r2, [pc, #380]	; (8001e38 <pwmMode+0x884>)
 8001cba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cbe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f007 f95f 	bl	8008f88 <HAL_TIM_PWM_ConfigChannel>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <pwmMode+0x720>
 		 	    Error_Handler();
 8001cd0:	f000 fdb5 	bl	800283e <Error_Handler>
 	 	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd4:	4b59      	ldr	r3, [pc, #356]	; (8001e3c <pwmMode+0x888>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	4a58      	ldr	r2, [pc, #352]	; (8001e3c <pwmMode+0x888>)
 8001cda:	f043 0308 	orr.w	r3, r3, #8
 8001cde:	6193      	str	r3, [r2, #24]
 8001ce0:	4b56      	ldr	r3, [pc, #344]	; (8001e3c <pwmMode+0x888>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	693b      	ldr	r3, [r7, #16]
 	 	  switch (indexChannel) {
 8001cec:	7abb      	ldrb	r3, [r7, #10]
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d870      	bhi.n	8001dd4 <pwmMode+0x820>
 8001cf2:	a201      	add	r2, pc, #4	; (adr r2, 8001cf8 <pwmMode+0x744>)
 8001cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf8:	08001d09 	.word	0x08001d09
 8001cfc:	08001d3b 	.word	0x08001d3b
 8001d00:	08001d6d 	.word	0x08001d6d
 8001d04:	08001da1 	.word	0x08001da1
				if(gpioPWMFlag4 == 0){
 8001d08:	4b4d      	ldr	r3, [pc, #308]	; (8001e40 <pwmMode+0x88c>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d103      	bne.n	8001d18 <pwmMode+0x764>
					GPIO_PWM_InitStruct[3].Pin = GPIO_PIN_6;
 8001d10:	4b41      	ldr	r3, [pc, #260]	; (8001e18 <pwmMode+0x864>)
 8001d12:	2240      	movs	r2, #64	; 0x40
 8001d14:	631a      	str	r2, [r3, #48]	; 0x30
 8001d16:	e005      	b.n	8001d24 <pwmMode+0x770>
					GPIO_PWM_InitStruct[3].Pin |= GPIO_PIN_6;
 8001d18:	4b3f      	ldr	r3, [pc, #252]	; (8001e18 <pwmMode+0x864>)
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d20:	4a3d      	ldr	r2, [pc, #244]	; (8001e18 <pwmMode+0x864>)
 8001d22:	6313      	str	r3, [r2, #48]	; 0x30
				   gpioPWMFlag4++;
 8001d24:	4b46      	ldr	r3, [pc, #280]	; (8001e40 <pwmMode+0x88c>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <pwmMode+0x88c>)
 8001d2e:	701a      	strb	r2, [r3, #0]
				   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8001d30:	2100      	movs	r1, #0
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f006 fc26 	bl	8008584 <HAL_TIM_PWM_Start>
				break;
 8001d38:	e04d      	b.n	8001dd6 <pwmMode+0x822>
				if(gpioPWMFlag4 == 0){
 8001d3a:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <pwmMode+0x88c>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d103      	bne.n	8001d4a <pwmMode+0x796>
					GPIO_PWM_InitStruct[3].Pin = GPIO_PIN_7;
 8001d42:	4b35      	ldr	r3, [pc, #212]	; (8001e18 <pwmMode+0x864>)
 8001d44:	2280      	movs	r2, #128	; 0x80
 8001d46:	631a      	str	r2, [r3, #48]	; 0x30
 8001d48:	e005      	b.n	8001d56 <pwmMode+0x7a2>
					GPIO_PWM_InitStruct[3].Pin |= GPIO_PIN_7;
 8001d4a:	4b33      	ldr	r3, [pc, #204]	; (8001e18 <pwmMode+0x864>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d52:	4a31      	ldr	r2, [pc, #196]	; (8001e18 <pwmMode+0x864>)
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
				   gpioPWMFlag4++;
 8001d56:	4b3a      	ldr	r3, [pc, #232]	; (8001e40 <pwmMode+0x88c>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4b38      	ldr	r3, [pc, #224]	; (8001e40 <pwmMode+0x88c>)
 8001d60:	701a      	strb	r2, [r3, #0]
				   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 8001d62:	2104      	movs	r1, #4
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f006 fc0d 	bl	8008584 <HAL_TIM_PWM_Start>
				break;
 8001d6a:	e034      	b.n	8001dd6 <pwmMode+0x822>
				if(gpioPWMFlag4 == 0){
 8001d6c:	4b34      	ldr	r3, [pc, #208]	; (8001e40 <pwmMode+0x88c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d104      	bne.n	8001d7e <pwmMode+0x7ca>
						GPIO_PWM_InitStruct[3].Pin = GPIO_PIN_8;
 8001d74:	4b28      	ldr	r3, [pc, #160]	; (8001e18 <pwmMode+0x864>)
 8001d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d7c:	e005      	b.n	8001d8a <pwmMode+0x7d6>
						GPIO_PWM_InitStruct[3].Pin |= GPIO_PIN_8;
 8001d7e:	4b26      	ldr	r3, [pc, #152]	; (8001e18 <pwmMode+0x864>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d86:	4a24      	ldr	r2, [pc, #144]	; (8001e18 <pwmMode+0x864>)
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
				   gpioPWMFlag4++;
 8001d8a:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <pwmMode+0x88c>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <pwmMode+0x88c>)
 8001d94:	701a      	strb	r2, [r3, #0]
				   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8001d96:	2108      	movs	r1, #8
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f006 fbf3 	bl	8008584 <HAL_TIM_PWM_Start>
				break;
 8001d9e:	e01a      	b.n	8001dd6 <pwmMode+0x822>
				if(gpioPWMFlag4 == 0){
 8001da0:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <pwmMode+0x88c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d104      	bne.n	8001db2 <pwmMode+0x7fe>
						GPIO_PWM_InitStruct[3].Pin = GPIO_PIN_9;
 8001da8:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <pwmMode+0x864>)
 8001daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dae:	631a      	str	r2, [r3, #48]	; 0x30
 8001db0:	e005      	b.n	8001dbe <pwmMode+0x80a>
						GPIO_PWM_InitStruct[3].Pin |= GPIO_PIN_9;
 8001db2:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <pwmMode+0x864>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dba:	4a17      	ldr	r2, [pc, #92]	; (8001e18 <pwmMode+0x864>)
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
				   gpioPWMFlag4++;
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <pwmMode+0x88c>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <pwmMode+0x88c>)
 8001dc8:	701a      	strb	r2, [r3, #0]
				   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 8001dca:	210c      	movs	r1, #12
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f006 fbd9 	bl	8008584 <HAL_TIM_PWM_Start>
				break;
 8001dd2:	e000      	b.n	8001dd6 <pwmMode+0x822>
				break;
 8001dd4:	bf00      	nop
 	 	 	GPIO_PWM_InitStruct[3].Mode = GPIO_MODE_AF_PP;
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <pwmMode+0x864>)
 8001dd8:	2202      	movs	r2, #2
 8001dda:	635a      	str	r2, [r3, #52]	; 0x34
 	 	 	GPIO_PWM_InitStruct[3].Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <pwmMode+0x864>)
 8001dde:	2202      	movs	r2, #2
 8001de0:	63da      	str	r2, [r3, #60]	; 0x3c
 	 	 	HAL_GPIO_Init(GPIOB, &GPIO_PWM_InitStruct[3]);
 8001de2:	4918      	ldr	r1, [pc, #96]	; (8001e44 <pwmMode+0x890>)
 8001de4:	4818      	ldr	r0, [pc, #96]	; (8001e48 <pwmMode+0x894>)
 8001de6:	f002 fddb 	bl	80049a0 <HAL_GPIO_Init>
 	  		HAL_TIM_Base_Start_IT(htim);
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f006 fb20 	bl	8008430 <HAL_TIM_Base_Start_IT>
 	  		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "GPIO_PWM=%04X\r\n", GPIO_PWM_InitStruct[3].Pin), 1000);
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <pwmMode+0x864>)
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	461a      	mov	r2, r3
 8001df6:	490d      	ldr	r1, [pc, #52]	; (8001e2c <pwmMode+0x878>)
 8001df8:	480d      	ldr	r0, [pc, #52]	; (8001e30 <pwmMode+0x87c>)
 8001dfa:	f009 f9b3 	bl	800b164 <siprintf>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e06:	490a      	ldr	r1, [pc, #40]	; (8001e30 <pwmMode+0x87c>)
 8001e08:	480a      	ldr	r0, [pc, #40]	; (8001e34 <pwmMode+0x880>)
 8001e0a:	f007 fef0 	bl	8009bee <HAL_UART_Transmit>
}
 8001e0e:	bf00      	nop
 8001e10:	3780      	adds	r7, #128	; 0x80
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200002a8 	.word	0x200002a8
 8001e1c:	200002a4 	.word	0x200002a4
 8001e20:	200002c8 	.word	0x200002c8
 8001e24:	40011000 	.word	0x40011000
 8001e28:	40010000 	.word	0x40010000
 8001e2c:	0800d6f0 	.word	0x0800d6f0
 8001e30:	20000010 	.word	0x20000010
 8001e34:	200004d4 	.word	0x200004d4
 8001e38:	20000030 	.word	0x20000030
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	200002a5 	.word	0x200002a5
 8001e44:	200002d8 	.word	0x200002d8
 8001e48:	40010c00 	.word	0x40010c00

08001e4c <ADC_MspInit>:
void ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0310 	add.w	r3, r7, #16
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a14      	ldr	r2, [pc, #80]	; (8001eb8 <ADC_MspInit+0x6c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d121      	bne.n	8001eb0 <ADC_MspInit+0x64>
  {
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e6c:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <ADC_MspInit+0x70>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <ADC_MspInit+0x70>)
 8001e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e76:	6193      	str	r3, [r2, #24]
 8001e78:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <ADC_MspInit+0x70>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e84:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <ADC_MspInit+0x70>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	4a0c      	ldr	r2, [pc, #48]	; (8001ebc <ADC_MspInit+0x70>)
 8001e8a:	f043 0304 	orr.w	r3, r3, #4
 8001e8e:	6193      	str	r3, [r2, #24]
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <ADC_MspInit+0x70>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea4:	f107 0310 	add.w	r3, r7, #16
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <ADC_MspInit+0x74>)
 8001eac:	f002 fd78 	bl	80049a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	3720      	adds	r7, #32
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40012400 	.word	0x40012400
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40010800 	.word	0x40010800

08001ec4 <ADC_Config>:
void ADC_Config(ADC_HandleTypeDef *hadc, uint8_t index){
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	70fb      	strb	r3, [r7, #3]
	 /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  ADC_ChannelConfTypeDef sConfig = {0};
 8001ed0:	f107 030c 	add.w	r3, r7, #12
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]

	  /* USER CODE END ADC1_Init 1 */

	  /** Common config
	  */
	  hadc->Instance = ADC1;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a1d      	ldr	r2, [pc, #116]	; (8001f54 <ADC_Config+0x90>)
 8001ee0:	601a      	str	r2, [r3, #0]
	  hadc->Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
	  hadc->Init.ContinuousConvMode = ENABLE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	731a      	strb	r2, [r3, #12]
	  hadc->Init.DiscontinuousConvMode = DISABLE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	751a      	strb	r2, [r3, #20]
	  hadc->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001efa:	61da      	str	r2, [r3, #28]
	  hadc->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	605a      	str	r2, [r3, #4]
	  hadc->Init.NbrOfConversion = 1;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	611a      	str	r2, [r3, #16]
	  if (HAL_ADC_Init(hadc) != HAL_OK)
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f001 fd99 	bl	8003a40 <HAL_ADC_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <ADC_Config+0x54>
	  {
	    Error_Handler();
 8001f14:	f000 fc93 	bl	800283e <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	613b      	str	r3, [r7, #16]
	  sConfig.SamplingTime = adcSamplingTime[index];
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	4a0d      	ldr	r2, [pc, #52]	; (8001f58 <ADC_Config+0x94>)
 8001f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f28:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	4619      	mov	r1, r3
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f001 ffdd 	bl	8003ef0 <HAL_ADC_ConfigChannel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <ADC_Config+0x7c>
	  {
	    Error_Handler();
 8001f3c:	f000 fc7f 	bl	800283e <Error_Handler>
	  }
	  ADC_MspInit(hadc);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ff83 	bl	8001e4c <ADC_MspInit>
	  HAL_ADC_Start(hadc);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f001 fe52 	bl	8003bf0 <HAL_ADC_Start>
}
 8001f4c:	bf00      	nop
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40012400 	.word	0x40012400
 8001f58:	20000040 	.word	0x20000040

08001f5c <fsmNeopixelRgbLed>:
 */

#include "fsmLedRgb.h"
uint8_t index = 0;

void fsmNeopixelRgbLed(){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	switch (neopixelStatus) {
 8001f60:	4b53      	ldr	r3, [pc, #332]	; (80020b0 <fsmNeopixelRgbLed+0x154>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	f200 8098 	bhi.w	800209a <fsmNeopixelRgbLed+0x13e>
 8001f6a:	a201      	add	r2, pc, #4	; (adr r2, 8001f70 <fsmNeopixelRgbLed+0x14>)
 8001f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f70:	08001f81 	.word	0x08001f81
 8001f74:	08001fe3 	.word	0x08001fe3
 8001f78:	0800204d 	.word	0x0800204d
 8001f7c:	0800207f 	.word	0x0800207f
		case neopixelInit:
			NeoPixel_hslColor(120, 255, 127);
 8001f80:	227f      	movs	r2, #127	; 0x7f
 8001f82:	21ff      	movs	r1, #255	; 0xff
 8001f84:	2078      	movs	r0, #120	; 0x78
 8001f86:	f000 fefb 	bl	8002d80 <NeoPixel_hslColor>
			if(is_button_pressed(0) == 1){
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f7ff fad4 	bl	8001538 <is_button_pressed>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d109      	bne.n	8001faa <fsmNeopixelRgbLed+0x4e>
				    NeoPixel_hslColor(120, 255, 127);
 8001f96:	227f      	movs	r2, #127	; 0x7f
 8001f98:	21ff      	movs	r1, #255	; 0xff
 8001f9a:	2078      	movs	r0, #120	; 0x78
 8001f9c:	f000 fef0 	bl	8002d80 <NeoPixel_hslColor>
				    NeoPixel_led_set_RGB(0);
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f000 fcb1 	bl	8002908 <NeoPixel_led_set_RGB>
				    NeoPixel_led_render();
 8001fa6:	f000 fd0f 	bl	80029c8 <NeoPixel_led_render>
			}
			if(is_button_pressed(1) == 1){
 8001faa:	2001      	movs	r0, #1
 8001fac:	f7ff fac4 	bl	8001538 <is_button_pressed>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d173      	bne.n	800209e <fsmNeopixelRgbLed+0x142>
				NeoPixel_clear_all_led();
 8001fb6:	f000 fc5b 	bl	8002870 <NeoPixel_clear_all_led>
				 NeoPixel_hslColor(120, 255, 127);
 8001fba:	227f      	movs	r2, #127	; 0x7f
 8001fbc:	21ff      	movs	r1, #255	; 0xff
 8001fbe:	2078      	movs	r0, #120	; 0x78
 8001fc0:	f000 fede 	bl	8002d80 <NeoPixel_hslColor>
				NeoPixel_led_set_RGB(index++);
 8001fc4:	4b3b      	ldr	r3, [pc, #236]	; (80020b4 <fsmNeopixelRgbLed+0x158>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	b2d1      	uxtb	r1, r2
 8001fcc:	4a39      	ldr	r2, [pc, #228]	; (80020b4 <fsmNeopixelRgbLed+0x158>)
 8001fce:	7011      	strb	r1, [r2, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fc99 	bl	8002908 <NeoPixel_led_set_RGB>
			    NeoPixel_led_render();
 8001fd6:	f000 fcf7 	bl	80029c8 <NeoPixel_led_render>
			    neopixelStatus = neopixelSingleLed;
 8001fda:	4b35      	ldr	r3, [pc, #212]	; (80020b0 <fsmNeopixelRgbLed+0x154>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
			}
			break;
 8001fe0:	e05d      	b.n	800209e <fsmNeopixelRgbLed+0x142>
		case neopixelSingleLed:
			if(is_button_pressed(0) == 1){
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f7ff faa8 	bl	8001538 <is_button_pressed>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d118      	bne.n	8002020 <fsmNeopixelRgbLed+0xc4>
				if(index >=4) index = 0;
 8001fee:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <fsmNeopixelRgbLed+0x158>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d902      	bls.n	8001ffc <fsmNeopixelRgbLed+0xa0>
 8001ff6:	4b2f      	ldr	r3, [pc, #188]	; (80020b4 <fsmNeopixelRgbLed+0x158>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
				NeoPixel_clear_all_led();
 8001ffc:	f000 fc38 	bl	8002870 <NeoPixel_clear_all_led>
				NeoPixel_hslColor(120, 255, 127);
 8002000:	227f      	movs	r2, #127	; 0x7f
 8002002:	21ff      	movs	r1, #255	; 0xff
 8002004:	2078      	movs	r0, #120	; 0x78
 8002006:	f000 febb 	bl	8002d80 <NeoPixel_hslColor>
				NeoPixel_led_set_RGB(index++);
 800200a:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <fsmNeopixelRgbLed+0x158>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	b2d1      	uxtb	r1, r2
 8002012:	4a28      	ldr	r2, [pc, #160]	; (80020b4 <fsmNeopixelRgbLed+0x158>)
 8002014:	7011      	strb	r1, [r2, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f000 fc76 	bl	8002908 <NeoPixel_led_set_RGB>
			    NeoPixel_led_render();
 800201c:	f000 fcd4 	bl	80029c8 <NeoPixel_led_render>
			}
			if(is_button_pressed(1) == 1){
 8002020:	2001      	movs	r0, #1
 8002022:	f7ff fa89 	bl	8001538 <is_button_pressed>
 8002026:	4603      	mov	r3, r0
 8002028:	2b01      	cmp	r3, #1
 800202a:	d13a      	bne.n	80020a2 <fsmNeopixelRgbLed+0x146>
				index = 0;
 800202c:	4b21      	ldr	r3, [pc, #132]	; (80020b4 <fsmNeopixelRgbLed+0x158>)
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
				NeoPixel_clear_all_led();
 8002032:	f000 fc1d 	bl	8002870 <NeoPixel_clear_all_led>
				NeoPixel_hslColor(120, 255, 127);
 8002036:	227f      	movs	r2, #127	; 0x7f
 8002038:	21ff      	movs	r1, #255	; 0xff
 800203a:	2078      	movs	r0, #120	; 0x78
 800203c:	f000 fea0 	bl	8002d80 <NeoPixel_hslColor>
				NeoPixel_toggleLed();
 8002040:	f000 fc44 	bl	80028cc <NeoPixel_toggleLed>
				neopixelStatus = neopixelAllLed;
 8002044:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <fsmNeopixelRgbLed+0x154>)
 8002046:	2202      	movs	r2, #2
 8002048:	601a      	str	r2, [r3, #0]
			}
			break;
 800204a:	e02a      	b.n	80020a2 <fsmNeopixelRgbLed+0x146>
		case neopixelAllLed:
			if(is_button_pressed(2) == 1){
 800204c:	2002      	movs	r0, #2
 800204e:	f7ff fa73 	bl	8001538 <is_button_pressed>
 8002052:	4603      	mov	r3, r0
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <fsmNeopixelRgbLed+0x100>
				NeoPixel_toggleLed();
 8002058:	f000 fc38 	bl	80028cc <NeoPixel_toggleLed>
			}
			if(is_button_pressed(1) == 1){
 800205c:	2001      	movs	r0, #1
 800205e:	f7ff fa6b 	bl	8001538 <is_button_pressed>
 8002062:	4603      	mov	r3, r0
 8002064:	2b01      	cmp	r3, #1
 8002066:	d11e      	bne.n	80020a6 <fsmNeopixelRgbLed+0x14a>
				NeoPixel_clear_all_led();
 8002068:	f000 fc02 	bl	8002870 <NeoPixel_clear_all_led>
				HAL_Delay(100);
 800206c:	2064      	movs	r0, #100	; 0x64
 800206e:	f001 fcc3 	bl	80039f8 <HAL_Delay>
				NeoPixel_set_led_cycle();
 8002072:	f000 fe55 	bl	8002d20 <NeoPixel_set_led_cycle>
				neopixelStatus = neopixelCycleLed;
 8002076:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <fsmNeopixelRgbLed+0x154>)
 8002078:	2203      	movs	r2, #3
 800207a:	601a      	str	r2, [r3, #0]
			}
			break;
 800207c:	e013      	b.n	80020a6 <fsmNeopixelRgbLed+0x14a>
		case neopixelCycleLed:
			NeoPixel_set_led_cycle();
 800207e:	f000 fe4f 	bl	8002d20 <NeoPixel_set_led_cycle>
			if(is_button_pressed(1) == 1){
 8002082:	2001      	movs	r0, #1
 8002084:	f7ff fa58 	bl	8001538 <is_button_pressed>
 8002088:	4603      	mov	r3, r0
 800208a:	2b01      	cmp	r3, #1
 800208c:	d10d      	bne.n	80020aa <fsmNeopixelRgbLed+0x14e>
				NeoPixel_clear_all_led();
 800208e:	f000 fbef 	bl	8002870 <NeoPixel_clear_all_led>
				neopixelStatus = neopixelInit;
 8002092:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <fsmNeopixelRgbLed+0x154>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
			}
			break;
 8002098:	e007      	b.n	80020aa <fsmNeopixelRgbLed+0x14e>
		default:
			break;
 800209a:	bf00      	nop
 800209c:	e006      	b.n	80020ac <fsmNeopixelRgbLed+0x150>
			break;
 800209e:	bf00      	nop
 80020a0:	e004      	b.n	80020ac <fsmNeopixelRgbLed+0x150>
			break;
 80020a2:	bf00      	nop
 80020a4:	e002      	b.n	80020ac <fsmNeopixelRgbLed+0x150>
			break;
 80020a6:	bf00      	nop
 80020a8:	e000      	b.n	80020ac <fsmNeopixelRgbLed+0x150>
			break;
 80020aa:	bf00      	nop
	}
}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	200002e8 	.word	0x200002e8
 80020b4:	2000029c 	.word	0x2000029c

080020b8 <HAL_UART_RxCpltCallback>:
//	}
//}

uint8_t buffer[MAX_BUFFER_SIZE];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	if( huart -> Instance == USART2 ) {
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a13      	ldr	r2, [pc, #76]	; (8002114 <HAL_UART_RxCpltCallback+0x5c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d11f      	bne.n	800210a <HAL_UART_RxCpltCallback+0x52>
		buffer[index_buffer++] = temp;
 80020ca:	4b13      	ldr	r3, [pc, #76]	; (8002118 <HAL_UART_RxCpltCallback+0x60>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	b2d1      	uxtb	r1, r2
 80020d2:	4a11      	ldr	r2, [pc, #68]	; (8002118 <HAL_UART_RxCpltCallback+0x60>)
 80020d4:	7011      	strb	r1, [r2, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	4b10      	ldr	r3, [pc, #64]	; (800211c <HAL_UART_RxCpltCallback+0x64>)
 80020da:	7819      	ldrb	r1, [r3, #0]
 80020dc:	4b10      	ldr	r3, [pc, #64]	; (8002120 <HAL_UART_RxCpltCallback+0x68>)
 80020de:	5499      	strb	r1, [r3, r2]
		if(index_buffer == 30) index_buffer = 0;
 80020e0:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <HAL_UART_RxCpltCallback+0x60>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b1e      	cmp	r3, #30
 80020e6:	d102      	bne.n	80020ee <HAL_UART_RxCpltCallback+0x36>
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_UART_RxCpltCallback+0x60>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <HAL_UART_RxCpltCallback+0x6c>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit (&huart2, &temp, 1, 50) ;
 80020f4:	2332      	movs	r3, #50	; 0x32
 80020f6:	2201      	movs	r2, #1
 80020f8:	4908      	ldr	r1, [pc, #32]	; (800211c <HAL_UART_RxCpltCallback+0x64>)
 80020fa:	480b      	ldr	r0, [pc, #44]	; (8002128 <HAL_UART_RxCpltCallback+0x70>)
 80020fc:	f007 fd77 	bl	8009bee <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, & temp, 1);
 8002100:	2201      	movs	r2, #1
 8002102:	4906      	ldr	r1, [pc, #24]	; (800211c <HAL_UART_RxCpltCallback+0x64>)
 8002104:	4808      	ldr	r0, [pc, #32]	; (8002128 <HAL_UART_RxCpltCallback+0x70>)
 8002106:	f007 fdf5 	bl	8009cf4 <HAL_UART_Receive_IT>
	}
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40004400 	.word	0x40004400
 8002118:	2000029e 	.word	0x2000029e
 800211c:	2000029d 	.word	0x2000029d
 8002120:	2000051c 	.word	0x2000051c
 8002124:	2000029f 	.word	0x2000029f
 8002128:	200004d4 	.word	0x200004d4

0800212c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002132:	f001 fbff 	bl	8003934 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002136:	f000 f895 	bl	8002264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800213a:	f000 faf1 	bl	8002720 <MX_GPIO_Init>
  MX_DMA_Init();
 800213e:	f000 fad1 	bl	80026e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002142:	f000 faa5 	bl	8002690 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002146:	f000 f955 	bl	80023f4 <MX_TIM2_Init>
  MX_ADC1_Init();
 800214a:	f000 f8e7 	bl	800231c <MX_ADC1_Init>
  MX_I2C1_Init();
 800214e:	f000 f923 	bl	8002398 <MX_I2C1_Init>
  MX_TIM4_Init();
 8002152:	f000 fa27 	bl	80025a4 <MX_TIM4_Init>
  MX_TIM3_Init();
 8002156:	f000 f9d9 	bl	800250c <MX_TIM3_Init>
//  MX_TIM1_Init();
  /* USER CODE BEGIN 2 */
  pwmMode(&htim3, 3, 1, 0, 89, 0);
 800215a:	2300      	movs	r3, #0
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	2359      	movs	r3, #89	; 0x59
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	2300      	movs	r3, #0
 8002164:	2201      	movs	r2, #1
 8002166:	2103      	movs	r1, #3
 8002168:	4835      	ldr	r0, [pc, #212]	; (8002240 <main+0x114>)
 800216a:	f7ff fa23 	bl	80015b4 <pwmMode>
  pwmMode(&htim3, 3, 2, 0, 89, 0);
 800216e:	2300      	movs	r3, #0
 8002170:	9301      	str	r3, [sp, #4]
 8002172:	2359      	movs	r3, #89	; 0x59
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2300      	movs	r3, #0
 8002178:	2202      	movs	r2, #2
 800217a:	2103      	movs	r1, #3
 800217c:	4830      	ldr	r0, [pc, #192]	; (8002240 <main+0x114>)
 800217e:	f7ff fa19 	bl	80015b4 <pwmMode>
  pwmMode(&htim4, 4, 1, 0, 89, 0);
 8002182:	2300      	movs	r3, #0
 8002184:	9301      	str	r3, [sp, #4]
 8002186:	2359      	movs	r3, #89	; 0x59
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2300      	movs	r3, #0
 800218c:	2201      	movs	r2, #1
 800218e:	2104      	movs	r1, #4
 8002190:	482c      	ldr	r0, [pc, #176]	; (8002244 <main+0x118>)
 8002192:	f7ff fa0f 	bl	80015b4 <pwmMode>
  pwmMode(&htim4, 4, 2, 0, 89, 0);
 8002196:	2300      	movs	r3, #0
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	2359      	movs	r3, #89	; 0x59
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	2300      	movs	r3, #0
 80021a0:	2202      	movs	r2, #2
 80021a2:	2104      	movs	r1, #4
 80021a4:	4827      	ldr	r0, [pc, #156]	; (8002244 <main+0x118>)
 80021a6:	f7ff fa05 	bl	80015b4 <pwmMode>
  pwmMode(&htim1, 1, 1, 0, 89, 1);
 80021aa:	2301      	movs	r3, #1
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	2359      	movs	r3, #89	; 0x59
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	2300      	movs	r3, #0
 80021b4:	2201      	movs	r2, #1
 80021b6:	2101      	movs	r1, #1
 80021b8:	4823      	ldr	r0, [pc, #140]	; (8002248 <main+0x11c>)
 80021ba:	f7ff f9fb 	bl	80015b4 <pwmMode>

  ADC_Config(&hadc1, 7);
 80021be:	2107      	movs	r1, #7
 80021c0:	4822      	ldr	r0, [pc, #136]	; (800224c <main+0x120>)
 80021c2:	f7ff fe7f 	bl	8001ec4 <ADC_Config>
  HAL_TIM_Base_Start_IT(&htim2);
 80021c6:	4822      	ldr	r0, [pc, #136]	; (8002250 <main+0x124>)
 80021c8:	f006 f932 	bl	8008430 <HAL_TIM_Base_Start_IT>
//  HAL_TIM_Base_Start_IT(&htim1);
//  HAL_TIM_Base_Start_IT(&htim3);
//  HAL_TIM_Base_Start_IT(&htim4);
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 80021cc:	2201      	movs	r2, #1
 80021ce:	4921      	ldr	r1, [pc, #132]	; (8002254 <main+0x128>)
 80021d0:	4821      	ldr	r0, [pc, #132]	; (8002258 <main+0x12c>)
 80021d2:	f007 fd8f 	bl	8009cf4 <HAL_UART_Receive_IT>
//  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
//  HAL_ADC_Start(&hadc1);
  SCH_Init();
 80021d6:	f000 feb1 	bl	8002f3c <SCH_Init>
//  SCH_Add_Task(func5, 100, 100);
//  ledMode(GPIOA, 4);
//  ledMode(GPIOA, 9);
//  setTimer1(500);
//  uint8_t status = 1;
  DHT20_Read();
 80021da:	f7fe fe49 	bl	8000e70 <DHT20_Read>
  lcdInit();
 80021de:	f7fe ffda 	bl	8001196 <lcdInit>
  lcdSetCursor(1, 1);
 80021e2:	2101      	movs	r1, #1
 80021e4:	2001      	movs	r0, #1
 80021e6:	f7fe ffb7 	bl	8001158 <lcdSetCursor>
  lcdSendNumber(DHT20_getHumidity());
 80021ea:	f7fe fdd1 	bl	8000d90 <DHT20_getHumidity>
 80021ee:	4603      	mov	r3, r0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff f81f 	bl	8001234 <lcdSendNumber>
  HAL_Delay(10);
 80021f6:	200a      	movs	r0, #10
 80021f8:	f001 fbfe 	bl	80039f8 <HAL_Delay>
  lcdSetCursor(0, 1);
 80021fc:	2101      	movs	r1, #1
 80021fe:	2000      	movs	r0, #0
 8002200:	f7fe ffaa 	bl	8001158 <lcdSetCursor>
  lcdSendNumber(DHT20_getTemperature());
 8002204:	f7fe fdd6 	bl	8000db4 <DHT20_getTemperature>
 8002208:	4603      	mov	r3, r0
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff f812 	bl	8001234 <lcdSendNumber>
//  lcdClear();
//     testBuzzer();
  NeoPixel_status = 0;
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <main+0x130>)
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
  neopixelStatus = neopixelInit;
 8002216:	4b12      	ldr	r3, [pc, #72]	; (8002260 <main+0x134>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
	NeoPixel_clear_all_led();
 800221c:	f000 fb28 	bl	8002870 <NeoPixel_clear_all_led>
	HAL_Delay(10);
 8002220:	200a      	movs	r0, #10
 8002222:	f001 fbe9 	bl	80039f8 <HAL_Delay>
//  buttonMode(GPIOA, 9);
//  ledMode(GPIOA, 10);
  uint8_t high = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	71fb      	strb	r3, [r7, #7]
  uint8_t low = 1;
 800222a:	2301      	movs	r3, #1
 800222c:	71bb      	strb	r3, [r7, #6]
  uint8_t angle = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	717b      	strb	r3, [r7, #5]
  const uint8_t angle_difference = 11;
 8002232:	230b      	movs	r3, #11
 8002234:	713b      	strb	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  NeoPixel_set_led_cycle();
	  fsmNeopixelRgbLed();
 8002236:	f7ff fe91 	bl	8001f5c <fsmNeopixelRgbLed>
//	  NeoPixel_set_led_cycle();
      SCH_Dispatch_Tasks();
 800223a:	f000 ff05 	bl	8003048 <SCH_Dispatch_Tasks>
	  fsmNeopixelRgbLed();
 800223e:	e7fa      	b.n	8002236 <main+0x10a>
 8002240:	20000400 	.word	0x20000400
 8002244:	20000448 	.word	0x20000448
 8002248:	20000370 	.word	0x20000370
 800224c:	200002ec 	.word	0x200002ec
 8002250:	200003b8 	.word	0x200003b8
 8002254:	2000029d 	.word	0x2000029d
 8002258:	200004d4 	.word	0x200004d4
 800225c:	200002a0 	.word	0x200002a0
 8002260:	200002e8 	.word	0x200002e8

08002264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b094      	sub	sp, #80	; 0x50
 8002268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800226a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800226e:	2228      	movs	r2, #40	; 0x28
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f008 fb0e 	bl	800a894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002294:	2301      	movs	r3, #1
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800229e:	2300      	movs	r3, #0
 80022a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022a2:	2301      	movs	r3, #1
 80022a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022a6:	2302      	movs	r3, #2
 80022a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80022b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ba:	4618      	mov	r0, r3
 80022bc:	f005 fba2 	bl	8007a04 <HAL_RCC_OscConfig>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80022c6:	f000 faba 	bl	800283e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ca:	230f      	movs	r3, #15
 80022cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022ce:	2302      	movs	r3, #2
 80022d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022dc:	2300      	movs	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	2102      	movs	r1, #2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f005 fe0e 	bl	8007f08 <HAL_RCC_ClockConfig>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80022f2:	f000 faa4 	bl	800283e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80022f6:	2302      	movs	r3, #2
 80022f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80022fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022fe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	4618      	mov	r0, r3
 8002304:	f005 ff8e 	bl	8008224 <HAL_RCCEx_PeriphCLKConfig>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800230e:	f000 fa96 	bl	800283e <Error_Handler>
  }
}
 8002312:	bf00      	nop
 8002314:	3750      	adds	r7, #80	; 0x50
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <MX_ADC1_Init+0x74>)
 800232e:	4a19      	ldr	r2, [pc, #100]	; (8002394 <MX_ADC1_Init+0x78>)
 8002330:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002332:	4b17      	ldr	r3, [pc, #92]	; (8002390 <MX_ADC1_Init+0x74>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002338:	4b15      	ldr	r3, [pc, #84]	; (8002390 <MX_ADC1_Init+0x74>)
 800233a:	2201      	movs	r2, #1
 800233c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800233e:	4b14      	ldr	r3, [pc, #80]	; (8002390 <MX_ADC1_Init+0x74>)
 8002340:	2200      	movs	r2, #0
 8002342:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <MX_ADC1_Init+0x74>)
 8002346:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800234a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800234c:	4b10      	ldr	r3, [pc, #64]	; (8002390 <MX_ADC1_Init+0x74>)
 800234e:	2200      	movs	r2, #0
 8002350:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <MX_ADC1_Init+0x74>)
 8002354:	2201      	movs	r2, #1
 8002356:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002358:	480d      	ldr	r0, [pc, #52]	; (8002390 <MX_ADC1_Init+0x74>)
 800235a:	f001 fb71 	bl	8003a40 <HAL_ADC_Init>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002364:	f000 fa6b 	bl	800283e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002368:	2300      	movs	r3, #0
 800236a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800236c:	2301      	movs	r3, #1
 800236e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002370:	2307      	movs	r3, #7
 8002372:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	4619      	mov	r1, r3
 8002378:	4805      	ldr	r0, [pc, #20]	; (8002390 <MX_ADC1_Init+0x74>)
 800237a:	f001 fdb9 	bl	8003ef0 <HAL_ADC_ConfigChannel>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002384:	f000 fa5b 	bl	800283e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002388:	bf00      	nop
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	200002ec 	.word	0x200002ec
 8002394:	40012400 	.word	0x40012400

08002398 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <MX_I2C1_Init+0x50>)
 800239e:	4a13      	ldr	r2, [pc, #76]	; (80023ec <MX_I2C1_Init+0x54>)
 80023a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023a2:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <MX_I2C1_Init+0x50>)
 80023a4:	4a12      	ldr	r2, [pc, #72]	; (80023f0 <MX_I2C1_Init+0x58>)
 80023a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023a8:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <MX_I2C1_Init+0x50>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <MX_I2C1_Init+0x50>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <MX_I2C1_Init+0x50>)
 80023b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <MX_I2C1_Init+0x50>)
 80023be:	2200      	movs	r2, #0
 80023c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <MX_I2C1_Init+0x50>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <MX_I2C1_Init+0x50>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <MX_I2C1_Init+0x50>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023d4:	4804      	ldr	r0, [pc, #16]	; (80023e8 <MX_I2C1_Init+0x50>)
 80023d6:	f002 fcb9 	bl	8004d4c <HAL_I2C_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023e0:	f000 fa2d 	bl	800283e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	2000031c 	.word	0x2000031c
 80023ec:	40005400 	.word	0x40005400
 80023f0:	000186a0 	.word	0x000186a0

080023f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08e      	sub	sp, #56	; 0x38
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	609a      	str	r2, [r3, #8]
 8002406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002408:	f107 0320 	add.w	r3, r7, #32
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
 8002420:	615a      	str	r2, [r3, #20]
 8002422:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002424:	4b38      	ldr	r3, [pc, #224]	; (8002508 <MX_TIM2_Init+0x114>)
 8002426:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800242a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800242c:	4b36      	ldr	r3, [pc, #216]	; (8002508 <MX_TIM2_Init+0x114>)
 800242e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002432:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002434:	4b34      	ldr	r3, [pc, #208]	; (8002508 <MX_TIM2_Init+0x114>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800243a:	4b33      	ldr	r3, [pc, #204]	; (8002508 <MX_TIM2_Init+0x114>)
 800243c:	2209      	movs	r2, #9
 800243e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002440:	4b31      	ldr	r3, [pc, #196]	; (8002508 <MX_TIM2_Init+0x114>)
 8002442:	2200      	movs	r2, #0
 8002444:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002446:	4b30      	ldr	r3, [pc, #192]	; (8002508 <MX_TIM2_Init+0x114>)
 8002448:	2200      	movs	r2, #0
 800244a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800244c:	482e      	ldr	r0, [pc, #184]	; (8002508 <MX_TIM2_Init+0x114>)
 800244e:	f005 ff9f 	bl	8008390 <HAL_TIM_Base_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002458:	f000 f9f1 	bl	800283e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800245c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002460:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002462:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002466:	4619      	mov	r1, r3
 8002468:	4827      	ldr	r0, [pc, #156]	; (8002508 <MX_TIM2_Init+0x114>)
 800246a:	f006 fe4f 	bl	800910c <HAL_TIM_ConfigClockSource>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002474:	f000 f9e3 	bl	800283e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002478:	4823      	ldr	r0, [pc, #140]	; (8002508 <MX_TIM2_Init+0x114>)
 800247a:	f006 f82b 	bl	80084d4 <HAL_TIM_PWM_Init>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002484:	f000 f9db 	bl	800283e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002488:	2300      	movs	r3, #0
 800248a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800248c:	2300      	movs	r3, #0
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002490:	f107 0320 	add.w	r3, r7, #32
 8002494:	4619      	mov	r1, r3
 8002496:	481c      	ldr	r0, [pc, #112]	; (8002508 <MX_TIM2_Init+0x114>)
 8002498:	f007 fa98 	bl	80099cc <HAL_TIMEx_MasterConfigSynchronization>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80024a2:	f000 f9cc 	bl	800283e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024a6:	2360      	movs	r3, #96	; 0x60
 80024a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	2200      	movs	r2, #0
 80024ba:	4619      	mov	r1, r3
 80024bc:	4812      	ldr	r0, [pc, #72]	; (8002508 <MX_TIM2_Init+0x114>)
 80024be:	f006 fd63 	bl	8008f88 <HAL_TIM_PWM_ConfigChannel>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80024c8:	f000 f9b9 	bl	800283e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	2208      	movs	r2, #8
 80024d0:	4619      	mov	r1, r3
 80024d2:	480d      	ldr	r0, [pc, #52]	; (8002508 <MX_TIM2_Init+0x114>)
 80024d4:	f006 fd58 	bl	8008f88 <HAL_TIM_PWM_ConfigChannel>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80024de:	f000 f9ae 	bl	800283e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	220c      	movs	r2, #12
 80024e6:	4619      	mov	r1, r3
 80024e8:	4807      	ldr	r0, [pc, #28]	; (8002508 <MX_TIM2_Init+0x114>)
 80024ea:	f006 fd4d 	bl	8008f88 <HAL_TIM_PWM_ConfigChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80024f4:	f000 f9a3 	bl	800283e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80024f8:	4803      	ldr	r0, [pc, #12]	; (8002508 <MX_TIM2_Init+0x114>)
 80024fa:	f000 ff99 	bl	8003430 <HAL_TIM_MspPostInit>

}
 80024fe:	bf00      	nop
 8002500:	3738      	adds	r7, #56	; 0x38
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	200003b8 	.word	0x200003b8

0800250c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002512:	f107 0308 	add.w	r3, r7, #8
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]
 800251c:	609a      	str	r2, [r3, #8]
 800251e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002520:	463b      	mov	r3, r7
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002528:	4b1c      	ldr	r3, [pc, #112]	; (800259c <MX_TIM3_Init+0x90>)
 800252a:	4a1d      	ldr	r2, [pc, #116]	; (80025a0 <MX_TIM3_Init+0x94>)
 800252c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800252e:	4b1b      	ldr	r3, [pc, #108]	; (800259c <MX_TIM3_Init+0x90>)
 8002530:	2200      	movs	r2, #0
 8002532:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <MX_TIM3_Init+0x90>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 89;
 800253a:	4b18      	ldr	r3, [pc, #96]	; (800259c <MX_TIM3_Init+0x90>)
 800253c:	2259      	movs	r2, #89	; 0x59
 800253e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002540:	4b16      	ldr	r3, [pc, #88]	; (800259c <MX_TIM3_Init+0x90>)
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <MX_TIM3_Init+0x90>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800254c:	4813      	ldr	r0, [pc, #76]	; (800259c <MX_TIM3_Init+0x90>)
 800254e:	f005 ff1f 	bl	8008390 <HAL_TIM_Base_Init>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002558:	f000 f971 	bl	800283e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800255c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002560:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002562:	f107 0308 	add.w	r3, r7, #8
 8002566:	4619      	mov	r1, r3
 8002568:	480c      	ldr	r0, [pc, #48]	; (800259c <MX_TIM3_Init+0x90>)
 800256a:	f006 fdcf 	bl	800910c <HAL_TIM_ConfigClockSource>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002574:	f000 f963 	bl	800283e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002578:	2300      	movs	r3, #0
 800257a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800257c:	2300      	movs	r3, #0
 800257e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002580:	463b      	mov	r3, r7
 8002582:	4619      	mov	r1, r3
 8002584:	4805      	ldr	r0, [pc, #20]	; (800259c <MX_TIM3_Init+0x90>)
 8002586:	f007 fa21 	bl	80099cc <HAL_TIMEx_MasterConfigSynchronization>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002590:	f000 f955 	bl	800283e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002594:	bf00      	nop
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000400 	.word	0x20000400
 80025a0:	40000400 	.word	0x40000400

080025a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08e      	sub	sp, #56	; 0x38
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	609a      	str	r2, [r3, #8]
 80025b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b8:	f107 0320 	add.w	r3, r7, #32
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
 80025d0:	615a      	str	r2, [r3, #20]
 80025d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025d4:	4b2c      	ldr	r3, [pc, #176]	; (8002688 <MX_TIM4_Init+0xe4>)
 80025d6:	4a2d      	ldr	r2, [pc, #180]	; (800268c <MX_TIM4_Init+0xe8>)
 80025d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80025da:	4b2b      	ldr	r3, [pc, #172]	; (8002688 <MX_TIM4_Init+0xe4>)
 80025dc:	2200      	movs	r2, #0
 80025de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e0:	4b29      	ldr	r3, [pc, #164]	; (8002688 <MX_TIM4_Init+0xe4>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 89;
 80025e6:	4b28      	ldr	r3, [pc, #160]	; (8002688 <MX_TIM4_Init+0xe4>)
 80025e8:	2259      	movs	r2, #89	; 0x59
 80025ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ec:	4b26      	ldr	r3, [pc, #152]	; (8002688 <MX_TIM4_Init+0xe4>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f2:	4b25      	ldr	r3, [pc, #148]	; (8002688 <MX_TIM4_Init+0xe4>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025f8:	4823      	ldr	r0, [pc, #140]	; (8002688 <MX_TIM4_Init+0xe4>)
 80025fa:	f005 fec9 	bl	8008390 <HAL_TIM_Base_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002604:	f000 f91b 	bl	800283e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800260c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800260e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002612:	4619      	mov	r1, r3
 8002614:	481c      	ldr	r0, [pc, #112]	; (8002688 <MX_TIM4_Init+0xe4>)
 8002616:	f006 fd79 	bl	800910c <HAL_TIM_ConfigClockSource>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002620:	f000 f90d 	bl	800283e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002624:	4818      	ldr	r0, [pc, #96]	; (8002688 <MX_TIM4_Init+0xe4>)
 8002626:	f005 ff55 	bl	80084d4 <HAL_TIM_PWM_Init>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002630:	f000 f905 	bl	800283e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002634:	2300      	movs	r3, #0
 8002636:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002638:	2300      	movs	r3, #0
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800263c:	f107 0320 	add.w	r3, r7, #32
 8002640:	4619      	mov	r1, r3
 8002642:	4811      	ldr	r0, [pc, #68]	; (8002688 <MX_TIM4_Init+0xe4>)
 8002644:	f007 f9c2 	bl	80099cc <HAL_TIMEx_MasterConfigSynchronization>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800264e:	f000 f8f6 	bl	800283e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002652:	2360      	movs	r3, #96	; 0x60
 8002654:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	2200      	movs	r2, #0
 8002666:	4619      	mov	r1, r3
 8002668:	4807      	ldr	r0, [pc, #28]	; (8002688 <MX_TIM4_Init+0xe4>)
 800266a:	f006 fc8d 	bl	8008f88 <HAL_TIM_PWM_ConfigChannel>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002674:	f000 f8e3 	bl	800283e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002678:	4803      	ldr	r0, [pc, #12]	; (8002688 <MX_TIM4_Init+0xe4>)
 800267a:	f000 fed9 	bl	8003430 <HAL_TIM_MspPostInit>

}
 800267e:	bf00      	nop
 8002680:	3738      	adds	r7, #56	; 0x38
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000448 	.word	0x20000448
 800268c:	40000800 	.word	0x40000800

08002690 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <MX_USART2_UART_Init+0x4c>)
 8002696:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <MX_USART2_UART_Init+0x50>)
 8002698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <MX_USART2_UART_Init+0x4c>)
 800269c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026a2:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <MX_USART2_UART_Init+0x4c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <MX_USART2_UART_Init+0x4c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026ae:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <MX_USART2_UART_Init+0x4c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026b4:	4b09      	ldr	r3, [pc, #36]	; (80026dc <MX_USART2_UART_Init+0x4c>)
 80026b6:	220c      	movs	r2, #12
 80026b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <MX_USART2_UART_Init+0x4c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <MX_USART2_UART_Init+0x4c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026c6:	4805      	ldr	r0, [pc, #20]	; (80026dc <MX_USART2_UART_Init+0x4c>)
 80026c8:	f007 fa41 	bl	8009b4e <HAL_UART_Init>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026d2:	f000 f8b4 	bl	800283e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	200004d4 	.word	0x200004d4
 80026e0:	40004400 	.word	0x40004400

080026e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <MX_DMA_Init+0x38>)
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	4a0b      	ldr	r2, [pc, #44]	; (800271c <MX_DMA_Init+0x38>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6153      	str	r3, [r2, #20]
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <MX_DMA_Init+0x38>)
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	607b      	str	r3, [r7, #4]
 8002700:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002702:	2200      	movs	r2, #0
 8002704:	2100      	movs	r1, #0
 8002706:	200c      	movs	r0, #12
 8002708:	f001 fe65 	bl	80043d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800270c:	200c      	movs	r0, #12
 800270e:	f001 fe7e 	bl	800440e <HAL_NVIC_EnableIRQ>

}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000

08002720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002726:	f107 0310 	add.w	r3, r7, #16
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	605a      	str	r2, [r3, #4]
 8002730:	609a      	str	r2, [r3, #8]
 8002732:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002734:	4b33      	ldr	r3, [pc, #204]	; (8002804 <MX_GPIO_Init+0xe4>)
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	4a32      	ldr	r2, [pc, #200]	; (8002804 <MX_GPIO_Init+0xe4>)
 800273a:	f043 0310 	orr.w	r3, r3, #16
 800273e:	6193      	str	r3, [r2, #24]
 8002740:	4b30      	ldr	r3, [pc, #192]	; (8002804 <MX_GPIO_Init+0xe4>)
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800274c:	4b2d      	ldr	r3, [pc, #180]	; (8002804 <MX_GPIO_Init+0xe4>)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	4a2c      	ldr	r2, [pc, #176]	; (8002804 <MX_GPIO_Init+0xe4>)
 8002752:	f043 0320 	orr.w	r3, r3, #32
 8002756:	6193      	str	r3, [r2, #24]
 8002758:	4b2a      	ldr	r3, [pc, #168]	; (8002804 <MX_GPIO_Init+0xe4>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002764:	4b27      	ldr	r3, [pc, #156]	; (8002804 <MX_GPIO_Init+0xe4>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	4a26      	ldr	r2, [pc, #152]	; (8002804 <MX_GPIO_Init+0xe4>)
 800276a:	f043 0304 	orr.w	r3, r3, #4
 800276e:	6193      	str	r3, [r2, #24]
 8002770:	4b24      	ldr	r3, [pc, #144]	; (8002804 <MX_GPIO_Init+0xe4>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800277c:	4b21      	ldr	r3, [pc, #132]	; (8002804 <MX_GPIO_Init+0xe4>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	4a20      	ldr	r2, [pc, #128]	; (8002804 <MX_GPIO_Init+0xe4>)
 8002782:	f043 0308 	orr.w	r3, r3, #8
 8002786:	6193      	str	r3, [r2, #24]
 8002788:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <MX_GPIO_Init+0xe4>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8002794:	2200      	movs	r2, #0
 8002796:	21e0      	movs	r1, #224	; 0xe0
 8002798:	481b      	ldr	r0, [pc, #108]	; (8002808 <MX_GPIO_Init+0xe8>)
 800279a:	f002 fa9c 	bl	8004cd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800279e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027a4:	4b19      	ldr	r3, [pc, #100]	; (800280c <MX_GPIO_Init+0xec>)
 80027a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027ac:	f107 0310 	add.w	r3, r7, #16
 80027b0:	4619      	mov	r1, r3
 80027b2:	4817      	ldr	r0, [pc, #92]	; (8002810 <MX_GPIO_Init+0xf0>)
 80027b4:	f002 f8f4 	bl	80049a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin;
 80027b8:	23e0      	movs	r3, #224	; 0xe0
 80027ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027bc:	2301      	movs	r3, #1
 80027be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2302      	movs	r3, #2
 80027c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c8:	f107 0310 	add.w	r3, r7, #16
 80027cc:	4619      	mov	r1, r3
 80027ce:	480e      	ldr	r0, [pc, #56]	; (8002808 <MX_GPIO_Init+0xe8>)
 80027d0:	f002 f8e6 	bl	80049a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button0_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button0_Pin|Button1_Pin|Button2_Pin;
 80027d4:	2307      	movs	r3, #7
 80027d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027dc:	2301      	movs	r3, #1
 80027de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e0:	f107 0310 	add.w	r3, r7, #16
 80027e4:	4619      	mov	r1, r3
 80027e6:	480b      	ldr	r0, [pc, #44]	; (8002814 <MX_GPIO_Init+0xf4>)
 80027e8:	f002 f8da 	bl	80049a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80027ec:	2200      	movs	r2, #0
 80027ee:	2100      	movs	r1, #0
 80027f0:	2028      	movs	r0, #40	; 0x28
 80027f2:	f001 fdf0 	bl	80043d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80027f6:	2028      	movs	r0, #40	; 0x28
 80027f8:	f001 fe09 	bl	800440e <HAL_NVIC_EnableIRQ>

}
 80027fc:	bf00      	nop
 80027fe:	3720      	adds	r7, #32
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	40010800 	.word	0x40010800
 800280c:	10110000 	.word	0x10110000
 8002810:	40011000 	.word	0x40011000
 8002814:	40010c00 	.word	0x40010c00

08002818 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002828:	d101      	bne.n	800282e <HAL_TIM_PeriodElapsedCallback+0x16>
		button_reading();
 800282a:	f7fe fe19 	bl	8001460 <button_reading>
	}
	timerRun();
 800282e:	f001 f819 	bl	8003864 <timerRun>
	SCH_Update();
 8002832:	f000 fb99 	bl	8002f68 <SCH_Update>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002842:	b672      	cpsid	i
}
 8002844:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002846:	e7fe      	b.n	8002846 <Error_Handler+0x8>

08002848 <scale8>:
uint8_t b;

uint8_t angle = 0;
const uint8_t angle_difference = 11;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	460a      	mov	r2, r1
 8002852:	71fb      	strb	r3, [r7, #7]
 8002854:	4613      	mov	r3, r2
 8002856:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	79ba      	ldrb	r2, [r7, #6]
 800285c:	fb02 f303 	mul.w	r3, r2, r3
 8002860:	121b      	asrs	r3, r3, #8
 8002862:	b2db      	uxtb	r3, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr
	...

08002870 <NeoPixel_clear_all_led>:

void NeoPixel_clear_all_led(){
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
	   for (uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]
 800287a:	e019      	b.n	80028b0 <NeoPixel_clear_all_led+0x40>
	        rgb_arr[4 * i] = 0;          // G = 0
	        rgb_arr[4 * i + 1] = 0;      // R = 0
	        rgb_arr[4 * i + 2] = 0;      // B = 0
	        rgb_arr[4 * i + 3] = 0;      // Reserved = 0
	#else // WS2812B
	        rgb_arr[3 * i] = 0;          // G = 0
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	4a10      	ldr	r2, [pc, #64]	; (80028c8 <NeoPixel_clear_all_led+0x58>)
 8002886:	2100      	movs	r1, #0
 8002888:	54d1      	strb	r1, [r2, r3]
	        rgb_arr[3 * i + 1] = 0;      // R = 0
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4413      	add	r3, r2
 8002892:	3301      	adds	r3, #1
 8002894:	4a0c      	ldr	r2, [pc, #48]	; (80028c8 <NeoPixel_clear_all_led+0x58>)
 8002896:	2100      	movs	r1, #0
 8002898:	54d1      	strb	r1, [r2, r3]
	        rgb_arr[3 * i + 2] = 0;      // B = 0
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	3302      	adds	r3, #2
 80028a4:	4a08      	ldr	r2, [pc, #32]	; (80028c8 <NeoPixel_clear_all_led+0x58>)
 80028a6:	2100      	movs	r1, #0
 80028a8:	54d1      	strb	r1, [r2, r3]
	   for (uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3301      	adds	r3, #1
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b07      	cmp	r3, #7
 80028b4:	d9e2      	bls.n	800287c <NeoPixel_clear_all_led+0xc>
	#endif // End SK6812 WS2812B case differentiation
	    }
	    NeoPixel_led_render(); // Ghi dữ liệu mới vào LED
 80028b6:	f000 f887 	bl	80029c8 <NeoPixel_led_render>
		HAL_Delay(200);
 80028ba:	20c8      	movs	r0, #200	; 0xc8
 80028bc:	f001 f89c 	bl	80039f8 <HAL_Delay>
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	2000053c 	.word	0x2000053c

080028cc <NeoPixel_toggleLed>:

void NeoPixel_toggleLed(){
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
	if(NeoPixel_status == 0){
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <NeoPixel_toggleLed+0x38>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d102      	bne.n	80028de <NeoPixel_toggleLed+0x12>
		 NeoPixel_clear_all_led();
 80028d8:	f7ff ffca 	bl	8002870 <NeoPixel_clear_all_led>
 80028dc:	e006      	b.n	80028ec <NeoPixel_toggleLed+0x20>
	}
	else{
		 NeoPixel_hslColor(120, 255, 127);
 80028de:	227f      	movs	r2, #127	; 0x7f
 80028e0:	21ff      	movs	r1, #255	; 0xff
 80028e2:	2078      	movs	r0, #120	; 0x78
 80028e4:	f000 fa4c 	bl	8002d80 <NeoPixel_hslColor>
		 NeoPixel_led_set_all_RGB();
 80028e8:	f000 f856 	bl	8002998 <NeoPixel_led_set_all_RGB>
	}
	NeoPixel_status =  !NeoPixel_status;
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <NeoPixel_toggleLed+0x38>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	bf0c      	ite	eq
 80028f4:	2301      	moveq	r3, #1
 80028f6:	2300      	movne	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	461a      	mov	r2, r3
 80028fc:	4b01      	ldr	r3, [pc, #4]	; (8002904 <NeoPixel_toggleLed+0x38>)
 80028fe:	701a      	strb	r2, [r3, #0]
}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}
 8002904:	200002a0 	.word	0x200002a0

08002908 <NeoPixel_led_set_RGB>:
// Set a single color (RGB) to index
void NeoPixel_led_set_RGB(uint8_t index) {
 8002908:	b590      	push	{r4, r7, lr}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
	r = (NeoPixel_RGB_Color >> 16) & 0xFF;
 8002912:	4b1c      	ldr	r3, [pc, #112]	; (8002984 <NeoPixel_led_set_RGB+0x7c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	0c1b      	lsrs	r3, r3, #16
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <NeoPixel_led_set_RGB+0x80>)
 800291c:	701a      	strb	r2, [r3, #0]
	g = (NeoPixel_RGB_Color >> 8) & 0xFF;
 800291e:	4b19      	ldr	r3, [pc, #100]	; (8002984 <NeoPixel_led_set_RGB+0x7c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	0a1b      	lsrs	r3, r3, #8
 8002924:	b2da      	uxtb	r2, r3
 8002926:	4b19      	ldr	r3, [pc, #100]	; (800298c <NeoPixel_led_set_RGB+0x84>)
 8002928:	701a      	strb	r2, [r3, #0]
	b =  NeoPixel_RGB_Color & 0xFF;
 800292a:	4b16      	ldr	r3, [pc, #88]	; (8002984 <NeoPixel_led_set_RGB+0x7c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	4b17      	ldr	r3, [pc, #92]	; (8002990 <NeoPixel_led_set_RGB+0x88>)
 8002932:	701a      	strb	r2, [r3, #0]
  rgb_arr[4 * index] = scale8(g, 0xB0); // g;
  rgb_arr[4 * index + 1] = r;
  rgb_arr[4 * index + 2] = scale8(b, 0xF0); // b;
  rgb_arr[4 * index + 3] = 0;
#else // WS2812B
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8002934:	4b15      	ldr	r3, [pc, #84]	; (800298c <NeoPixel_led_set_RGB+0x84>)
 8002936:	7818      	ldrb	r0, [r3, #0]
 8002938:	79fa      	ldrb	r2, [r7, #7]
 800293a:	4613      	mov	r3, r2
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	189c      	adds	r4, r3, r2
 8002940:	21b0      	movs	r1, #176	; 0xb0
 8002942:	f7ff ff81 	bl	8002848 <scale8>
 8002946:	4603      	mov	r3, r0
 8002948:	461a      	mov	r2, r3
 800294a:	4b12      	ldr	r3, [pc, #72]	; (8002994 <NeoPixel_led_set_RGB+0x8c>)
 800294c:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 800294e:	79fa      	ldrb	r2, [r7, #7]
 8002950:	4613      	mov	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4413      	add	r3, r2
 8002956:	3301      	adds	r3, #1
 8002958:	4a0b      	ldr	r2, [pc, #44]	; (8002988 <NeoPixel_led_set_RGB+0x80>)
 800295a:	7811      	ldrb	r1, [r2, #0]
 800295c:	4a0d      	ldr	r2, [pc, #52]	; (8002994 <NeoPixel_led_set_RGB+0x8c>)
 800295e:	54d1      	strb	r1, [r2, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <NeoPixel_led_set_RGB+0x88>)
 8002962:	7818      	ldrb	r0, [r3, #0]
 8002964:	79fa      	ldrb	r2, [r7, #7]
 8002966:	4613      	mov	r3, r2
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	4413      	add	r3, r2
 800296c:	1c9c      	adds	r4, r3, #2
 800296e:	21f0      	movs	r1, #240	; 0xf0
 8002970:	f7ff ff6a 	bl	8002848 <scale8>
 8002974:	4603      	mov	r3, r0
 8002976:	461a      	mov	r2, r3
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <NeoPixel_led_set_RGB+0x8c>)
 800297a:	551a      	strb	r2, [r3, r4]
#endif // End SK6812 WS2812B case differentiation
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bd90      	pop	{r4, r7, pc}
 8002984:	2000001c 	.word	0x2000001c
 8002988:	20000588 	.word	0x20000588
 800298c:	20000589 	.word	0x20000589
 8002990:	2000058a 	.word	0x2000058a
 8002994:	2000053c 	.word	0x2000053c

08002998 <NeoPixel_led_set_all_RGB>:

// Set all colors to RGB
void NeoPixel_led_set_all_RGB() {
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 800299e:	2300      	movs	r3, #0
 80029a0:	607b      	str	r3, [r7, #4]
 80029a2:	e007      	b.n	80029b4 <NeoPixel_led_set_all_RGB+0x1c>
	  NeoPixel_led_set_RGB(i);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ffad 	bl	8002908 <NeoPixel_led_set_RGB>
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3301      	adds	r3, #1
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b07      	cmp	r3, #7
 80029b8:	d9f4      	bls.n	80029a4 <NeoPixel_led_set_all_RGB+0xc>
  }
	NeoPixel_led_render();
 80029ba:	f000 f805 	bl	80029c8 <NeoPixel_led_render>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <NeoPixel_led_render>:

// Shuttle the data to the LEDs!
void NeoPixel_led_render() {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim1_ch1.State != HAL_DMA_STATE_READY) {
 80029ce:	4b4d      	ldr	r3, [pc, #308]	; (8002b04 <NeoPixel_led_render+0x13c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d105      	bne.n	80029e2 <NeoPixel_led_render+0x1a>
 80029d6:	4b4c      	ldr	r3, [pc, #304]	; (8002b08 <NeoPixel_led_render+0x140>)
 80029d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d014      	beq.n	8002a0c <NeoPixel_led_render+0x44>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	71fb      	strb	r3, [r7, #7]
 80029e6:	e006      	b.n	80029f6 <NeoPixel_led_render+0x2e>
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	4a48      	ldr	r2, [pc, #288]	; (8002b0c <NeoPixel_led_render+0x144>)
 80029ec:	2100      	movs	r1, #0
 80029ee:	54d1      	strb	r1, [r2, r3]
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	3301      	adds	r3, #1
 80029f4:	71fb      	strb	r3, [r7, #7]
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	2b2f      	cmp	r3, #47	; 0x2f
 80029fa:	d9f5      	bls.n	80029e8 <NeoPixel_led_render+0x20>
    wr_buf_p = 0;
 80029fc:	4b41      	ldr	r3, [pc, #260]	; (8002b04 <NeoPixel_led_render+0x13c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8002a02:	2100      	movs	r1, #0
 8002a04:	4842      	ldr	r0, [pc, #264]	; (8002b10 <NeoPixel_led_render+0x148>)
 8002a06:	f006 f8f1 	bl	8008bec <HAL_TIM_PWM_Stop_DMA>
    return;
 8002a0a:	e078      	b.n	8002afe <NeoPixel_led_render+0x136>
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
    wr_buf[i + 48] = PWM_LO << (((rgb_arr[6] << i) & 0x80) > 0);
    wr_buf[i + 56] = PWM_LO << (((rgb_arr[7] << i) & 0x80) > 0);
  }
#else // WS2812B
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	e069      	b.n	8002ae6 <NeoPixel_led_render+0x11e>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8002a12:	4b40      	ldr	r3, [pc, #256]	; (8002b14 <NeoPixel_led_render+0x14c>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	dd01      	ble.n	8002a2a <NeoPixel_led_render+0x62>
 8002a26:	213a      	movs	r1, #58	; 0x3a
 8002a28:	e000      	b.n	8002a2c <NeoPixel_led_render+0x64>
 8002a2a:	211d      	movs	r1, #29
 8002a2c:	4a37      	ldr	r2, [pc, #220]	; (8002b0c <NeoPixel_led_render+0x144>)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	4413      	add	r3, r2
 8002a32:	460a      	mov	r2, r1
 8002a34:	701a      	strb	r2, [r3, #0]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 8002a36:	4b37      	ldr	r3, [pc, #220]	; (8002b14 <NeoPixel_led_render+0x14c>)
 8002a38:	785b      	ldrb	r3, [r3, #1]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	dd01      	ble.n	8002a4e <NeoPixel_led_render+0x86>
 8002a4a:	213a      	movs	r1, #58	; 0x3a
 8002a4c:	e000      	b.n	8002a50 <NeoPixel_led_render+0x88>
 8002a4e:	211d      	movs	r1, #29
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	3308      	adds	r3, #8
 8002a54:	4a2d      	ldr	r2, [pc, #180]	; (8002b0c <NeoPixel_led_render+0x144>)
 8002a56:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 8002a58:	4b2e      	ldr	r3, [pc, #184]	; (8002b14 <NeoPixel_led_render+0x14c>)
 8002a5a:	789b      	ldrb	r3, [r3, #2]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	dd01      	ble.n	8002a70 <NeoPixel_led_render+0xa8>
 8002a6c:	213a      	movs	r1, #58	; 0x3a
 8002a6e:	e000      	b.n	8002a72 <NeoPixel_led_render+0xaa>
 8002a70:	211d      	movs	r1, #29
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	3310      	adds	r3, #16
 8002a76:	4a25      	ldr	r2, [pc, #148]	; (8002b0c <NeoPixel_led_render+0x144>)
 8002a78:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 8002a7a:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <NeoPixel_led_render+0x14c>)
 8002a7c:	78db      	ldrb	r3, [r3, #3]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dd01      	ble.n	8002a92 <NeoPixel_led_render+0xca>
 8002a8e:	213a      	movs	r1, #58	; 0x3a
 8002a90:	e000      	b.n	8002a94 <NeoPixel_led_render+0xcc>
 8002a92:	211d      	movs	r1, #29
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	3318      	adds	r3, #24
 8002a98:	4a1c      	ldr	r2, [pc, #112]	; (8002b0c <NeoPixel_led_render+0x144>)
 8002a9a:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <NeoPixel_led_render+0x14c>)
 8002a9e:	791b      	ldrb	r3, [r3, #4]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	dd01      	ble.n	8002ab4 <NeoPixel_led_render+0xec>
 8002ab0:	213a      	movs	r1, #58	; 0x3a
 8002ab2:	e000      	b.n	8002ab6 <NeoPixel_led_render+0xee>
 8002ab4:	211d      	movs	r1, #29
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	3320      	adds	r3, #32
 8002aba:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <NeoPixel_led_render+0x144>)
 8002abc:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 8002abe:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <NeoPixel_led_render+0x14c>)
 8002ac0:	795b      	ldrb	r3, [r3, #5]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	dd01      	ble.n	8002ad6 <NeoPixel_led_render+0x10e>
 8002ad2:	213a      	movs	r1, #58	; 0x3a
 8002ad4:	e000      	b.n	8002ad8 <NeoPixel_led_render+0x110>
 8002ad6:	211d      	movs	r1, #29
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	3328      	adds	r3, #40	; 0x28
 8002adc:	4a0b      	ldr	r2, [pc, #44]	; (8002b0c <NeoPixel_led_render+0x144>)
 8002ade:	54d1      	strb	r1, [r2, r3]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	603b      	str	r3, [r7, #0]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b07      	cmp	r3, #7
 8002aea:	d992      	bls.n	8002a12 <NeoPixel_led_render+0x4a>
//	dmaState = HAL_DMA_GetState(&hdma_tim1_ch1);
//	if(newStatus == HAL_OK){
//		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "newstatus=%02X#\r\n", newStatus), 1000);
//		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "dmaState=%02X#\r\n", dmaState), 1000);
//	}
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)wr_buf, WR_BUF_LEN);
 8002aec:	2330      	movs	r3, #48	; 0x30
 8002aee:	4a07      	ldr	r2, [pc, #28]	; (8002b0c <NeoPixel_led_render+0x144>)
 8002af0:	2100      	movs	r1, #0
 8002af2:	4807      	ldr	r0, [pc, #28]	; (8002b10 <NeoPixel_led_render+0x148>)
 8002af4:	f005 fed8 	bl	80088a8 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 8002af8:	4b02      	ldr	r3, [pc, #8]	; (8002b04 <NeoPixel_led_render+0x13c>)
 8002afa:	2202      	movs	r2, #2
 8002afc:	601a      	str	r2, [r3, #0]
}
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000584 	.word	0x20000584
 8002b08:	20000490 	.word	0x20000490
 8002b0c:	20000554 	.word	0x20000554
 8002b10:	20000370 	.word	0x20000370
 8002b14:	2000053c 	.word	0x2000053c

08002b18 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8002b20:	4b39      	ldr	r3, [pc, #228]	; (8002c08 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b07      	cmp	r3, #7
 8002b26:	d853      	bhi.n	8002bd0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb8>
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	e047      	b.n	8002bbe <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa6>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8002b2e:	4b36      	ldr	r3, [pc, #216]	; (8002c08 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	4613      	mov	r3, r2
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	4413      	add	r3, r2
 8002b38:	4a34      	ldr	r2, [pc, #208]	; (8002c0c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	dd01      	ble.n	8002b50 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 8002b4c:	213a      	movs	r1, #58	; 0x3a
 8002b4e:	e000      	b.n	8002b52 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8002b50:	211d      	movs	r1, #29
 8002b52:	4a2f      	ldr	r2, [pc, #188]	; (8002c10 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	460a      	mov	r2, r1
 8002b5a:	701a      	strb	r2, [r3, #0]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8002b5c:	4b2a      	ldr	r3, [pc, #168]	; (8002c08 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4613      	mov	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4413      	add	r3, r2
 8002b66:	3301      	adds	r3, #1
 8002b68:	4a28      	ldr	r2, [pc, #160]	; (8002c0c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8002b6a:	5cd3      	ldrb	r3, [r2, r3]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	dd01      	ble.n	8002b80 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 8002b7c:	213a      	movs	r1, #58	; 0x3a
 8002b7e:	e000      	b.n	8002b82 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x6a>
 8002b80:	211d      	movs	r1, #29
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	3308      	adds	r3, #8
 8002b86:	4a22      	ldr	r2, [pc, #136]	; (8002c10 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8002b88:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8002b8a:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	4413      	add	r3, r2
 8002b94:	3302      	adds	r3, #2
 8002b96:	4a1d      	ldr	r2, [pc, #116]	; (8002c0c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8002b98:	5cd3      	ldrb	r3, [r2, r3]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	dd01      	ble.n	8002bae <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 8002baa:	213a      	movs	r1, #58	; 0x3a
 8002bac:	e000      	b.n	8002bb0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 8002bae:	211d      	movs	r1, #29
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	3310      	adds	r3, #16
 8002bb4:	4a16      	ldr	r2, [pc, #88]	; (8002c10 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8002bb6:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2b07      	cmp	r3, #7
 8002bc2:	d9b4      	bls.n	8002b2e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 8002bc4:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	4a0f      	ldr	r2, [pc, #60]	; (8002c08 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002bcc:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 8002bce:	e015      	b.n	8002bfc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8002bd0:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b09      	cmp	r3, #9
 8002bd6:	d811      	bhi.n	8002bfc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	72fb      	strb	r3, [r7, #11]
 8002bdc:	e006      	b.n	8002bec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd4>
 8002bde:	7afb      	ldrb	r3, [r7, #11]
 8002be0:	4a0b      	ldr	r2, [pc, #44]	; (8002c10 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8002be2:	2100      	movs	r1, #0
 8002be4:	54d1      	strb	r1, [r2, r3]
 8002be6:	7afb      	ldrb	r3, [r7, #11]
 8002be8:	3301      	adds	r3, #1
 8002bea:	72fb      	strb	r3, [r7, #11]
 8002bec:	7afb      	ldrb	r3, [r7, #11]
 8002bee:	2b17      	cmp	r3, #23
 8002bf0:	d9f5      	bls.n	8002bde <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc6>
    wr_buf_p++;
 8002bf2:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	4a03      	ldr	r2, [pc, #12]	; (8002c08 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002bfa:	6013      	str	r3, [r2, #0]
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20000584 	.word	0x20000584
 8002c0c:	2000053c 	.word	0x2000053c
 8002c10:	20000554 	.word	0x20000554

08002c14 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8002c1c:	4b3c      	ldr	r3, [pc, #240]	; (8002d10 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b07      	cmp	r3, #7
 8002c22:	d852      	bhi.n	8002cca <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	e046      	b.n	8002cb8 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8002c2a:	4b39      	ldr	r3, [pc, #228]	; (8002d10 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	4a37      	ldr	r2, [pc, #220]	; (8002d14 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	dd01      	ble.n	8002c4c <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8002c48:	213a      	movs	r1, #58	; 0x3a
 8002c4a:	e000      	b.n	8002c4e <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8002c4c:	211d      	movs	r1, #29
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3318      	adds	r3, #24
 8002c52:	4a31      	ldr	r2, [pc, #196]	; (8002d18 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002c54:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8002c56:	4b2e      	ldr	r3, [pc, #184]	; (8002d10 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	4413      	add	r3, r2
 8002c60:	3301      	adds	r3, #1
 8002c62:	4a2c      	ldr	r2, [pc, #176]	; (8002d14 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8002c64:	5cd3      	ldrb	r3, [r2, r3]
 8002c66:	461a      	mov	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	dd01      	ble.n	8002c7a <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 8002c76:	213a      	movs	r1, #58	; 0x3a
 8002c78:	e000      	b.n	8002c7c <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8002c7a:	211d      	movs	r1, #29
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3320      	adds	r3, #32
 8002c80:	4a25      	ldr	r2, [pc, #148]	; (8002d18 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002c82:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8002c84:	4b22      	ldr	r3, [pc, #136]	; (8002d10 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3302      	adds	r3, #2
 8002c90:	4a20      	ldr	r2, [pc, #128]	; (8002d14 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8002c92:	5cd3      	ldrb	r3, [r2, r3]
 8002c94:	461a      	mov	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	dd01      	ble.n	8002ca8 <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 8002ca4:	213a      	movs	r1, #58	; 0x3a
 8002ca6:	e000      	b.n	8002caa <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 8002ca8:	211d      	movs	r1, #29
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3328      	adds	r3, #40	; 0x28
 8002cae:	4a1a      	ldr	r2, [pc, #104]	; (8002d18 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002cb0:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b07      	cmp	r3, #7
 8002cbc:	d9b5      	bls.n	8002c2a <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 8002cbe:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	4a12      	ldr	r2, [pc, #72]	; (8002d10 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002cc6:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
  }
}
 8002cc8:	e01d      	b.n	8002d06 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8002cca:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b09      	cmp	r3, #9
 8002cd0:	d812      	bhi.n	8002cf8 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8002cd2:	2318      	movs	r3, #24
 8002cd4:	72fb      	strb	r3, [r7, #11]
 8002cd6:	e006      	b.n	8002ce6 <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 8002cd8:	7afb      	ldrb	r3, [r7, #11]
 8002cda:	4a0f      	ldr	r2, [pc, #60]	; (8002d18 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002cdc:	2100      	movs	r1, #0
 8002cde:	54d1      	strb	r1, [r2, r3]
 8002ce0:	7afb      	ldrb	r3, [r7, #11]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	72fb      	strb	r3, [r7, #11]
 8002ce6:	7afb      	ldrb	r3, [r7, #11]
 8002ce8:	2b2f      	cmp	r3, #47	; 0x2f
 8002cea:	d9f5      	bls.n	8002cd8 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>
    ++wr_buf_p;
 8002cec:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	4a07      	ldr	r2, [pc, #28]	; (8002d10 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002cf4:	6013      	str	r3, [r2, #0]
}
 8002cf6:	e006      	b.n	8002d06 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
    wr_buf_p = 0;
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4806      	ldr	r0, [pc, #24]	; (8002d1c <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8002d02:	f005 ff73 	bl	8008bec <HAL_TIM_PWM_Stop_DMA>
}
 8002d06:	bf00      	nop
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000584 	.word	0x20000584
 8002d14:	2000053c 	.word	0x2000053c
 8002d18:	20000554 	.word	0x20000554
 8002d1c:	20000370 	.word	0x20000370

08002d20 <NeoPixel_set_led_cycle>:

void NeoPixel_set_led_cycle(){
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_LED; i++) {
 8002d26:	2300      	movs	r3, #0
 8002d28:	71fb      	strb	r3, [r7, #7]
 8002d2a:	e014      	b.n	8002d56 <NeoPixel_set_led_cycle+0x36>
		 NeoPixel_hslColor(angle + (i * angle_difference), 255, 127);
 8002d2c:	220b      	movs	r2, #11
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	fb02 f303 	mul.w	r3, r2, r3
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <NeoPixel_set_led_cycle+0x5c>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	227f      	movs	r2, #127	; 0x7f
 8002d40:	21ff      	movs	r1, #255	; 0xff
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 f81c 	bl	8002d80 <NeoPixel_hslColor>
		 NeoPixel_led_set_RGB(i);
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fddc 	bl	8002908 <NeoPixel_led_set_RGB>
	for(uint8_t i = 0; i < MAX_LED; i++) {
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	3301      	adds	r3, #1
 8002d54:	71fb      	strb	r3, [r7, #7]
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d9e7      	bls.n	8002d2c <NeoPixel_set_led_cycle+0xc>
	}
	++angle;
 8002d5c:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <NeoPixel_set_led_cycle+0x5c>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	3301      	adds	r3, #1
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <NeoPixel_set_led_cycle+0x5c>)
 8002d66:	701a      	strb	r2, [r3, #0]
	NeoPixel_led_render();
 8002d68:	f7ff fe2e 	bl	80029c8 <NeoPixel_led_render>
	HAL_Delay(10);
 8002d6c:	200a      	movs	r0, #10
 8002d6e:	f000 fe43 	bl	80039f8 <HAL_Delay>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	2000058b 	.word	0x2000058b

08002d80 <NeoPixel_hslColor>:

void  NeoPixel_hslColor(uint8_t h, uint8_t s, uint8_t l){
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	71fb      	strb	r3, [r7, #7]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	71bb      	strb	r3, [r7, #6]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	717b      	strb	r3, [r7, #5]
	NeoPixel_hsl_to_rgb(h, s, l);
 8002d92:	797a      	ldrb	r2, [r7, #5]
 8002d94:	79b9      	ldrb	r1, [r7, #6]
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 f805 	bl	8002da8 <NeoPixel_hsl_to_rgb>
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <NeoPixel_hsl_to_rgb>:
void NeoPixel_hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	71fb      	strb	r3, [r7, #7]
 8002db2:	460b      	mov	r3, r1
 8002db4:	71bb      	strb	r3, [r7, #6]
 8002db6:	4613      	mov	r3, r2
 8002db8:	717b      	strb	r3, [r7, #5]
	if(l == 0) return;
 8002dba:	797b      	ldrb	r3, [r7, #5]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80b6 	beq.w	8002f2e <NeoPixel_hsl_to_rgb+0x186>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8002dc2:	797b      	ldrb	r3, [r7, #5]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8002dcc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	db09      	blt.n	8002de8 <NeoPixel_hsl_to_rgb+0x40>
 8002dd4:	89bb      	ldrh	r3, [r7, #12]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	79ba      	ldrb	r2, [r7, #6]
 8002ddc:	fb02 f303 	mul.w	r3, r2, r3
 8002de0:	121b      	asrs	r3, r3, #8
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	74fb      	strb	r3, [r7, #19]
 8002de6:	e00a      	b.n	8002dfe <NeoPixel_hsl_to_rgb+0x56>
	else            c = (512 - (l1 << 1)) * s >> 8;
 8002de8:	89bb      	ldrh	r3, [r7, #12]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002df2:	79ba      	ldrb	r2, [r7, #6]
 8002df4:	fb02 f303 	mul.w	r3, r2, r3
 8002df8:	121b      	asrs	r3, r3, #8
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	0052      	lsls	r2, r2, #1
 8002e06:	4413      	add	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8002e0e:	897b      	ldrh	r3, [r7, #10]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 8002e16:	7d3b      	ldrb	r3, [r7, #20]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8002e22:	897b      	ldrh	r3, [r7, #10]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <NeoPixel_hsl_to_rgb+0x9a>
 8002e2e:	89fb      	ldrh	r3, [r7, #14]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	7cfa      	ldrb	r2, [r7, #19]
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	fb02 f303 	mul.w	r3, r2, r3
 8002e3a:	121b      	asrs	r3, r3, #8
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	74bb      	strb	r3, [r7, #18]
 8002e40:	e00a      	b.n	8002e58 <NeoPixel_hsl_to_rgb+0xb0>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8002e42:	89fb      	ldrh	r3, [r7, #14]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002e4a:	7cfa      	ldrb	r2, [r7, #19]
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	121b      	asrs	r3, r3, #8
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	74bb      	strb	r3, [r7, #18]

	 m = l - (c >> 1);
 8002e58:	7cfb      	ldrb	r3, [r7, #19]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	085b      	lsrs	r3, r3, #1
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	797a      	ldrb	r2, [r7, #5]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	747b      	strb	r3, [r7, #17]
	 switch(H >> 8) {       // High byte = sextant of colorwheel
 8002e68:	897b      	ldrh	r3, [r7, #10]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d83a      	bhi.n	8002eea <NeoPixel_hsl_to_rgb+0x142>
 8002e74:	a201      	add	r2, pc, #4	; (adr r2, 8002e7c <NeoPixel_hsl_to_rgb+0xd4>)
 8002e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7a:	bf00      	nop
 8002e7c:	08002e91 	.word	0x08002e91
 8002e80:	08002ea3 	.word	0x08002ea3
 8002e84:	08002eb5 	.word	0x08002eb5
 8002e88:	08002ec7 	.word	0x08002ec7
 8002e8c:	08002ed9 	.word	0x08002ed9
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8002e90:	7cfb      	ldrb	r3, [r7, #19]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	75fb      	strb	r3, [r7, #23]
 8002e96:	7cbb      	ldrb	r3, [r7, #18]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	75bb      	strb	r3, [r7, #22]
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	757b      	strb	r3, [r7, #21]
 8002ea0:	e02c      	b.n	8002efc <NeoPixel_hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8002ea2:	7cbb      	ldrb	r3, [r7, #18]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	75fb      	strb	r3, [r7, #23]
 8002ea8:	7cfb      	ldrb	r3, [r7, #19]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	75bb      	strb	r3, [r7, #22]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	757b      	strb	r3, [r7, #21]
 8002eb2:	e023      	b.n	8002efc <NeoPixel_hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	75fb      	strb	r3, [r7, #23]
 8002eb8:	7cfb      	ldrb	r3, [r7, #19]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	75bb      	strb	r3, [r7, #22]
 8002ebe:	7cbb      	ldrb	r3, [r7, #18]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	757b      	strb	r3, [r7, #21]
 8002ec4:	e01a      	b.n	8002efc <NeoPixel_hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	75fb      	strb	r3, [r7, #23]
 8002eca:	7cbb      	ldrb	r3, [r7, #18]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	75bb      	strb	r3, [r7, #22]
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	757b      	strb	r3, [r7, #21]
 8002ed6:	e011      	b.n	8002efc <NeoPixel_hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 8002ed8:	7cbb      	ldrb	r3, [r7, #18]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	75fb      	strb	r3, [r7, #23]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	75bb      	strb	r3, [r7, #22]
 8002ee2:	7cfb      	ldrb	r3, [r7, #19]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	757b      	strb	r3, [r7, #21]
 8002ee8:	e008      	b.n	8002efc <NeoPixel_hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 8002eea:	7cfb      	ldrb	r3, [r7, #19]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	75fb      	strb	r3, [r7, #23]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	75bb      	strb	r3, [r7, #22]
 8002ef4:	7cbb      	ldrb	r3, [r7, #18]
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	757b      	strb	r3, [r7, #21]
 8002efa:	bf00      	nop
	}
     NeoPixel_RGB_Color = (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8002efc:	7dfb      	ldrb	r3, [r7, #23]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	7c7b      	ldrb	r3, [r7, #17]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	041a      	lsls	r2, r3, #16
 8002f0a:	7dbb      	ldrb	r3, [r7, #22]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	4619      	mov	r1, r3
 8002f10:	7c7b      	ldrb	r3, [r7, #17]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	440b      	add	r3, r1
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	7d7b      	ldrb	r3, [r7, #21]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	4619      	mov	r1, r3
 8002f20:	7c7b      	ldrb	r3, [r7, #17]
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	440b      	add	r3, r1
 8002f26:	4313      	orrs	r3, r2
 8002f28:	4a03      	ldr	r2, [pc, #12]	; (8002f38 <NeoPixel_hsl_to_rgb+0x190>)
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	e000      	b.n	8002f30 <NeoPixel_hsl_to_rgb+0x188>
	if(l == 0) return;
 8002f2e:	bf00      	nop
}
 8002f30:	371c      	adds	r7, #28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr
 8002f38:	2000001c 	.word	0x2000001c

08002f3c <SCH_Init>:

sTask SCH_tasks_G[SCH_MAX_TASKS];

sTask* head = NULL;

void SCH_Init(void){
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
    unsigned char i;
    for (i = 0; i < SCH_MAX_TASKS; i++) {
 8002f42:	2300      	movs	r3, #0
 8002f44:	71fb      	strb	r3, [r7, #7]
 8002f46:	e006      	b.n	8002f56 <SCH_Init+0x1a>
        SCH_Delete_Task(i);
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 f8c8 	bl	80030e0 <SCH_Delete_Task>
    for (i = 0; i < SCH_MAX_TASKS; i++) {
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	3301      	adds	r3, #1
 8002f54:	71fb      	strb	r3, [r7, #7]
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	2b27      	cmp	r3, #39	; 0x27
 8002f5a:	d9f5      	bls.n	8002f48 <SCH_Init+0xc>
    }
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <SCH_Update>:
void SCH_Update(void){
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
	 unsigned char Index;
	    // NOTE: calculations are in *TICKS* (not milliseconds)
	    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8002f6e:	2300      	movs	r3, #0
 8002f70:	71fb      	strb	r3, [r7, #7]
 8002f72:	e05d      	b.n	8003030 <SCH_Update+0xc8>
	        // Check if there is a task at this location
	        if (SCH_tasks_G[Index].pTask){
 8002f74:	79fa      	ldrb	r2, [r7, #7]
 8002f76:	4933      	ldr	r1, [pc, #204]	; (8003044 <SCH_Update+0xdc>)
 8002f78:	4613      	mov	r3, r2
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	4413      	add	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	440b      	add	r3, r1
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d050      	beq.n	800302a <SCH_Update+0xc2>
	            if (SCH_tasks_G[Index].Delay == 0) {
 8002f88:	79fa      	ldrb	r2, [r7, #7]
 8002f8a:	492e      	ldr	r1, [pc, #184]	; (8003044 <SCH_Update+0xdc>)
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4413      	add	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	440b      	add	r3, r1
 8002f96:	3304      	adds	r3, #4
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d132      	bne.n	8003004 <SCH_Update+0x9c>
	                // The task is due to run
	                // Inc. the 'RunMe' flag
	                SCH_tasks_G[Index].RunMe += 1;
 8002f9e:	79fa      	ldrb	r2, [r7, #7]
 8002fa0:	4928      	ldr	r1, [pc, #160]	; (8003044 <SCH_Update+0xdc>)
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	4413      	add	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	440b      	add	r3, r1
 8002fac:	330c      	adds	r3, #12
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	79fa      	ldrb	r2, [r7, #7]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	b2d8      	uxtb	r0, r3
 8002fb6:	4923      	ldr	r1, [pc, #140]	; (8003044 <SCH_Update+0xdc>)
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	440b      	add	r3, r1
 8002fc2:	330c      	adds	r3, #12
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	701a      	strb	r2, [r3, #0]
	                if (SCH_tasks_G[Index].Period) {
 8002fc8:	79fa      	ldrb	r2, [r7, #7]
 8002fca:	491e      	ldr	r1, [pc, #120]	; (8003044 <SCH_Update+0xdc>)
 8002fcc:	4613      	mov	r3, r2
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	4413      	add	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	440b      	add	r3, r1
 8002fd6:	3308      	adds	r3, #8
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d025      	beq.n	800302a <SCH_Update+0xc2>
	                    // Schedule periodic tasks to run again
	                    SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8002fde:	79f9      	ldrb	r1, [r7, #7]
 8002fe0:	79fa      	ldrb	r2, [r7, #7]
 8002fe2:	4818      	ldr	r0, [pc, #96]	; (8003044 <SCH_Update+0xdc>)
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	440b      	add	r3, r1
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	4403      	add	r3, r0
 8002fee:	3308      	adds	r3, #8
 8002ff0:	6819      	ldr	r1, [r3, #0]
 8002ff2:	4814      	ldr	r0, [pc, #80]	; (8003044 <SCH_Update+0xdc>)
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	4413      	add	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4403      	add	r3, r0
 8002ffe:	3304      	adds	r3, #4
 8003000:	6019      	str	r1, [r3, #0]
 8003002:	e012      	b.n	800302a <SCH_Update+0xc2>
	                }
	            } else {
	                // Not yet ready to run: just decrement the delay
	                SCH_tasks_G[Index].Delay -= 1;
 8003004:	79fa      	ldrb	r2, [r7, #7]
 8003006:	490f      	ldr	r1, [pc, #60]	; (8003044 <SCH_Update+0xdc>)
 8003008:	4613      	mov	r3, r2
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	4413      	add	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	440b      	add	r3, r1
 8003012:	3304      	adds	r3, #4
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	79fa      	ldrb	r2, [r7, #7]
 8003018:	1e59      	subs	r1, r3, #1
 800301a:	480a      	ldr	r0, [pc, #40]	; (8003044 <SCH_Update+0xdc>)
 800301c:	4613      	mov	r3, r2
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	4413      	add	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4403      	add	r3, r0
 8003026:	3304      	adds	r3, #4
 8003028:	6019      	str	r1, [r3, #0]
	    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	3301      	adds	r3, #1
 800302e:	71fb      	strb	r3, [r7, #7]
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	2b27      	cmp	r3, #39	; 0x27
 8003034:	d99e      	bls.n	8002f74 <SCH_Update+0xc>
/* O(1)
 * 	if(head != NULL){
		head->Delay--;
	}
 * */
}
 8003036:	bf00      	nop
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	2000058c 	.word	0x2000058c

08003048 <SCH_Dispatch_Tasks>:
	 return index;
	 * */

}
void SCH_Dispatch_Tasks(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
    unsigned char Index;
    // Dispatches (runs) the next task (if one is ready)
    for (Index = 0; Index < SCH_MAX_TASKS; Index++){
 800304e:	2300      	movs	r3, #0
 8003050:	71fb      	strb	r3, [r7, #7]
 8003052:	e03a      	b.n	80030ca <SCH_Dispatch_Tasks+0x82>
        if (SCH_tasks_G[Index].RunMe > 0) {
 8003054:	79fa      	ldrb	r2, [r7, #7]
 8003056:	4921      	ldr	r1, [pc, #132]	; (80030dc <SCH_Dispatch_Tasks+0x94>)
 8003058:	4613      	mov	r3, r2
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	440b      	add	r3, r1
 8003062:	330c      	adds	r3, #12
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d02c      	beq.n	80030c4 <SCH_Dispatch_Tasks+0x7c>
            (*SCH_tasks_G[Index].pTask)(); // Run the task
 800306a:	79fa      	ldrb	r2, [r7, #7]
 800306c:	491b      	ldr	r1, [pc, #108]	; (80030dc <SCH_Dispatch_Tasks+0x94>)
 800306e:	4613      	mov	r3, r2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	440b      	add	r3, r1
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4798      	blx	r3
            SCH_tasks_G[Index].RunMe -= 1; // Reset / reduce RunMe flag
 800307c:	79fa      	ldrb	r2, [r7, #7]
 800307e:	4917      	ldr	r1, [pc, #92]	; (80030dc <SCH_Dispatch_Tasks+0x94>)
 8003080:	4613      	mov	r3, r2
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	4413      	add	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	440b      	add	r3, r1
 800308a:	330c      	adds	r3, #12
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	79fa      	ldrb	r2, [r7, #7]
 8003090:	3b01      	subs	r3, #1
 8003092:	b2d8      	uxtb	r0, r3
 8003094:	4911      	ldr	r1, [pc, #68]	; (80030dc <SCH_Dispatch_Tasks+0x94>)
 8003096:	4613      	mov	r3, r2
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	4413      	add	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	440b      	add	r3, r1
 80030a0:	330c      	adds	r3, #12
 80030a2:	4602      	mov	r2, r0
 80030a4:	701a      	strb	r2, [r3, #0]
            // Periodic tasks will automatically run again
            // - if this is a 'one shot' task, remove it from the array
            if (SCH_tasks_G[Index].Period == 0)
 80030a6:	79fa      	ldrb	r2, [r7, #7]
 80030a8:	490c      	ldr	r1, [pc, #48]	; (80030dc <SCH_Dispatch_Tasks+0x94>)
 80030aa:	4613      	mov	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	4413      	add	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	440b      	add	r3, r1
 80030b4:	3308      	adds	r3, #8
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d103      	bne.n	80030c4 <SCH_Dispatch_Tasks+0x7c>
            {
                SCH_Delete_Task(Index);
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 f80e 	bl	80030e0 <SCH_Delete_Task>
    for (Index = 0; Index < SCH_MAX_TASKS; Index++){
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	3301      	adds	r3, #1
 80030c8:	71fb      	strb	r3, [r7, #7]
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	2b27      	cmp	r3, #39	; 0x27
 80030ce:	d9c1      	bls.n	8003054 <SCH_Dispatch_Tasks+0xc>
		head = head->pNext;
		SCH_Delete_Task(del_index);
	}
	*/

}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	2000058c 	.word	0x2000058c

080030e0 <SCH_Delete_Task>:
void SCH_Delete_Task(const unsigned char TASK_INDEX){
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
	if(SCH_tasks_G[TASK_INDEX].pTask == 0){
 80030ea:	79fa      	ldrb	r2, [r7, #7]
 80030ec:	491f      	ldr	r1, [pc, #124]	; (800316c <SCH_Delete_Task+0x8c>)
 80030ee:	4613      	mov	r3, r2
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	4413      	add	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	440b      	add	r3, r1
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d031      	beq.n	8003162 <SCH_Delete_Task+0x82>
		return ;
	}
	else{
	    SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 80030fe:	79fa      	ldrb	r2, [r7, #7]
 8003100:	491a      	ldr	r1, [pc, #104]	; (800316c <SCH_Delete_Task+0x8c>)
 8003102:	4613      	mov	r3, r2
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	4413      	add	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	440b      	add	r3, r1
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
	    SCH_tasks_G[TASK_INDEX].Delay = 0;
 8003110:	79fa      	ldrb	r2, [r7, #7]
 8003112:	4916      	ldr	r1, [pc, #88]	; (800316c <SCH_Delete_Task+0x8c>)
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	440b      	add	r3, r1
 800311e:	3304      	adds	r3, #4
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
	    SCH_tasks_G[TASK_INDEX].Period = 0;
 8003124:	79fa      	ldrb	r2, [r7, #7]
 8003126:	4911      	ldr	r1, [pc, #68]	; (800316c <SCH_Delete_Task+0x8c>)
 8003128:	4613      	mov	r3, r2
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	4413      	add	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	440b      	add	r3, r1
 8003132:	3308      	adds	r3, #8
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
	    SCH_tasks_G[TASK_INDEX].pNext = 0;
 8003138:	79fa      	ldrb	r2, [r7, #7]
 800313a:	490c      	ldr	r1, [pc, #48]	; (800316c <SCH_Delete_Task+0x8c>)
 800313c:	4613      	mov	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	4413      	add	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	440b      	add	r3, r1
 8003146:	3310      	adds	r3, #16
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
	    SCH_tasks_G[TASK_INDEX].TaskID = 0;
 800314c:	79fa      	ldrb	r2, [r7, #7]
 800314e:	4907      	ldr	r1, [pc, #28]	; (800316c <SCH_Delete_Task+0x8c>)
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	440b      	add	r3, r1
 800315a:	3314      	adds	r3, #20
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	e000      	b.n	8003164 <SCH_Delete_Task+0x84>
		return ;
 8003162:	bf00      	nop
	}
}
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	2000058c 	.word	0x2000058c

08003170 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003176:	4b15      	ldr	r3, [pc, #84]	; (80031cc <HAL_MspInit+0x5c>)
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	4a14      	ldr	r2, [pc, #80]	; (80031cc <HAL_MspInit+0x5c>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	6193      	str	r3, [r2, #24]
 8003182:	4b12      	ldr	r3, [pc, #72]	; (80031cc <HAL_MspInit+0x5c>)
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	60bb      	str	r3, [r7, #8]
 800318c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800318e:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <HAL_MspInit+0x5c>)
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	4a0e      	ldr	r2, [pc, #56]	; (80031cc <HAL_MspInit+0x5c>)
 8003194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003198:	61d3      	str	r3, [r2, #28]
 800319a:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <HAL_MspInit+0x5c>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a2:	607b      	str	r3, [r7, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80031a6:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <HAL_MspInit+0x60>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	4a04      	ldr	r2, [pc, #16]	; (80031d0 <HAL_MspInit+0x60>)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	40021000 	.word	0x40021000
 80031d0:	40010000 	.word	0x40010000

080031d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031dc:	f107 0310 	add.w	r3, r7, #16
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a18      	ldr	r2, [pc, #96]	; (8003250 <HAL_ADC_MspInit+0x7c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d129      	bne.n	8003248 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031f4:	4b17      	ldr	r3, [pc, #92]	; (8003254 <HAL_ADC_MspInit+0x80>)
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	4a16      	ldr	r2, [pc, #88]	; (8003254 <HAL_ADC_MspInit+0x80>)
 80031fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031fe:	6193      	str	r3, [r2, #24]
 8003200:	4b14      	ldr	r3, [pc, #80]	; (8003254 <HAL_ADC_MspInit+0x80>)
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800320c:	4b11      	ldr	r3, [pc, #68]	; (8003254 <HAL_ADC_MspInit+0x80>)
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	4a10      	ldr	r2, [pc, #64]	; (8003254 <HAL_ADC_MspInit+0x80>)
 8003212:	f043 0304 	orr.w	r3, r3, #4
 8003216:	6193      	str	r3, [r2, #24]
 8003218:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <HAL_ADC_MspInit+0x80>)
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003224:	2301      	movs	r3, #1
 8003226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003228:	2303      	movs	r3, #3
 800322a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800322c:	f107 0310 	add.w	r3, r7, #16
 8003230:	4619      	mov	r1, r3
 8003232:	4809      	ldr	r0, [pc, #36]	; (8003258 <HAL_ADC_MspInit+0x84>)
 8003234:	f001 fbb4 	bl	80049a0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003238:	2200      	movs	r2, #0
 800323a:	2100      	movs	r1, #0
 800323c:	2012      	movs	r0, #18
 800323e:	f001 f8ca 	bl	80043d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003242:	2012      	movs	r0, #18
 8003244:	f001 f8e3 	bl	800440e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003248:	bf00      	nop
 800324a:	3720      	adds	r7, #32
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40012400 	.word	0x40012400
 8003254:	40021000 	.word	0x40021000
 8003258:	40010800 	.word	0x40010800

0800325c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08a      	sub	sp, #40	; 0x28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003264:	f107 0314 	add.w	r3, r7, #20
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a25      	ldr	r2, [pc, #148]	; (800330c <HAL_I2C_MspInit+0xb0>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d142      	bne.n	8003302 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800327c:	4b24      	ldr	r3, [pc, #144]	; (8003310 <HAL_I2C_MspInit+0xb4>)
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	4a23      	ldr	r2, [pc, #140]	; (8003310 <HAL_I2C_MspInit+0xb4>)
 8003282:	f043 0308 	orr.w	r3, r3, #8
 8003286:	6193      	str	r3, [r2, #24]
 8003288:	4b21      	ldr	r3, [pc, #132]	; (8003310 <HAL_I2C_MspInit+0xb4>)
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003294:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800329a:	2312      	movs	r3, #18
 800329c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800329e:	2303      	movs	r3, #3
 80032a0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a2:	f107 0314 	add.w	r3, r7, #20
 80032a6:	4619      	mov	r1, r3
 80032a8:	481a      	ldr	r0, [pc, #104]	; (8003314 <HAL_I2C_MspInit+0xb8>)
 80032aa:	f001 fb79 	bl	80049a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80032ae:	4b1a      	ldr	r3, [pc, #104]	; (8003318 <HAL_I2C_MspInit+0xbc>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	f043 0302 	orr.w	r3, r3, #2
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
 80032c4:	4a14      	ldr	r2, [pc, #80]	; (8003318 <HAL_I2C_MspInit+0xbc>)
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032ca:	4b11      	ldr	r3, [pc, #68]	; (8003310 <HAL_I2C_MspInit+0xb4>)
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	4a10      	ldr	r2, [pc, #64]	; (8003310 <HAL_I2C_MspInit+0xb4>)
 80032d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032d4:	61d3      	str	r3, [r2, #28]
 80032d6:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <HAL_I2C_MspInit+0xb4>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80032e2:	2200      	movs	r2, #0
 80032e4:	2100      	movs	r1, #0
 80032e6:	201f      	movs	r0, #31
 80032e8:	f001 f875 	bl	80043d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80032ec:	201f      	movs	r0, #31
 80032ee:	f001 f88e 	bl	800440e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80032f2:	2200      	movs	r2, #0
 80032f4:	2100      	movs	r1, #0
 80032f6:	2020      	movs	r0, #32
 80032f8:	f001 f86d 	bl	80043d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80032fc:	2020      	movs	r0, #32
 80032fe:	f001 f886 	bl	800440e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003302:	bf00      	nop
 8003304:	3728      	adds	r7, #40	; 0x28
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40005400 	.word	0x40005400
 8003310:	40021000 	.word	0x40021000
 8003314:	40010c00 	.word	0x40010c00
 8003318:	40010000 	.word	0x40010000

0800331c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a3b      	ldr	r2, [pc, #236]	; (8003418 <HAL_TIM_Base_MspInit+0xfc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d133      	bne.n	8003396 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800332e:	4b3b      	ldr	r3, [pc, #236]	; (800341c <HAL_TIM_Base_MspInit+0x100>)
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	4a3a      	ldr	r2, [pc, #232]	; (800341c <HAL_TIM_Base_MspInit+0x100>)
 8003334:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003338:	6193      	str	r3, [r2, #24]
 800333a:	4b38      	ldr	r3, [pc, #224]	; (800341c <HAL_TIM_Base_MspInit+0x100>)
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8003346:	4b36      	ldr	r3, [pc, #216]	; (8003420 <HAL_TIM_Base_MspInit+0x104>)
 8003348:	4a36      	ldr	r2, [pc, #216]	; (8003424 <HAL_TIM_Base_MspInit+0x108>)
 800334a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800334c:	4b34      	ldr	r3, [pc, #208]	; (8003420 <HAL_TIM_Base_MspInit+0x104>)
 800334e:	2210      	movs	r2, #16
 8003350:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003352:	4b33      	ldr	r3, [pc, #204]	; (8003420 <HAL_TIM_Base_MspInit+0x104>)
 8003354:	2200      	movs	r2, #0
 8003356:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003358:	4b31      	ldr	r3, [pc, #196]	; (8003420 <HAL_TIM_Base_MspInit+0x104>)
 800335a:	2280      	movs	r2, #128	; 0x80
 800335c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800335e:	4b30      	ldr	r3, [pc, #192]	; (8003420 <HAL_TIM_Base_MspInit+0x104>)
 8003360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003364:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003366:	4b2e      	ldr	r3, [pc, #184]	; (8003420 <HAL_TIM_Base_MspInit+0x104>)
 8003368:	2200      	movs	r2, #0
 800336a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 800336c:	4b2c      	ldr	r3, [pc, #176]	; (8003420 <HAL_TIM_Base_MspInit+0x104>)
 800336e:	2220      	movs	r2, #32
 8003370:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003372:	4b2b      	ldr	r3, [pc, #172]	; (8003420 <HAL_TIM_Base_MspInit+0x104>)
 8003374:	2200      	movs	r2, #0
 8003376:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003378:	4829      	ldr	r0, [pc, #164]	; (8003420 <HAL_TIM_Base_MspInit+0x104>)
 800337a:	f001 f863 	bl	8004444 <HAL_DMA_Init>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 8003384:	f7ff fa5b 	bl	800283e <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a25      	ldr	r2, [pc, #148]	; (8003420 <HAL_TIM_Base_MspInit+0x104>)
 800338c:	625a      	str	r2, [r3, #36]	; 0x24
 800338e:	4a24      	ldr	r2, [pc, #144]	; (8003420 <HAL_TIM_Base_MspInit+0x104>)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003394:	e03c      	b.n	8003410 <HAL_TIM_Base_MspInit+0xf4>
  else if(htim_base->Instance==TIM2)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339e:	d114      	bne.n	80033ca <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033a0:	4b1e      	ldr	r3, [pc, #120]	; (800341c <HAL_TIM_Base_MspInit+0x100>)
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	4a1d      	ldr	r2, [pc, #116]	; (800341c <HAL_TIM_Base_MspInit+0x100>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	61d3      	str	r3, [r2, #28]
 80033ac:	4b1b      	ldr	r3, [pc, #108]	; (800341c <HAL_TIM_Base_MspInit+0x100>)
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80033b8:	2200      	movs	r2, #0
 80033ba:	2100      	movs	r1, #0
 80033bc:	201c      	movs	r0, #28
 80033be:	f001 f80a 	bl	80043d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033c2:	201c      	movs	r0, #28
 80033c4:	f001 f823 	bl	800440e <HAL_NVIC_EnableIRQ>
}
 80033c8:	e022      	b.n	8003410 <HAL_TIM_Base_MspInit+0xf4>
  else if(htim_base->Instance==TIM3)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a16      	ldr	r2, [pc, #88]	; (8003428 <HAL_TIM_Base_MspInit+0x10c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d10c      	bne.n	80033ee <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033d4:	4b11      	ldr	r3, [pc, #68]	; (800341c <HAL_TIM_Base_MspInit+0x100>)
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	4a10      	ldr	r2, [pc, #64]	; (800341c <HAL_TIM_Base_MspInit+0x100>)
 80033da:	f043 0302 	orr.w	r3, r3, #2
 80033de:	61d3      	str	r3, [r2, #28]
 80033e0:	4b0e      	ldr	r3, [pc, #56]	; (800341c <HAL_TIM_Base_MspInit+0x100>)
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	68fb      	ldr	r3, [r7, #12]
}
 80033ec:	e010      	b.n	8003410 <HAL_TIM_Base_MspInit+0xf4>
  else if(htim_base->Instance==TIM4)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a0e      	ldr	r2, [pc, #56]	; (800342c <HAL_TIM_Base_MspInit+0x110>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d10b      	bne.n	8003410 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <HAL_TIM_Base_MspInit+0x100>)
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	4a07      	ldr	r2, [pc, #28]	; (800341c <HAL_TIM_Base_MspInit+0x100>)
 80033fe:	f043 0304 	orr.w	r3, r3, #4
 8003402:	61d3      	str	r3, [r2, #28]
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_TIM_Base_MspInit+0x100>)
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	68bb      	ldr	r3, [r7, #8]
}
 8003410:	bf00      	nop
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40012c00 	.word	0x40012c00
 800341c:	40021000 	.word	0x40021000
 8003420:	20000490 	.word	0x20000490
 8003424:	4002001c 	.word	0x4002001c
 8003428:	40000400 	.word	0x40000400
 800342c:	40000800 	.word	0x40000800

08003430 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08c      	sub	sp, #48	; 0x30
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003438:	f107 031c 	add.w	r3, r7, #28
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a44      	ldr	r2, [pc, #272]	; (800355c <HAL_TIM_MspPostInit+0x12c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d119      	bne.n	8003484 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003450:	4b43      	ldr	r3, [pc, #268]	; (8003560 <HAL_TIM_MspPostInit+0x130>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	4a42      	ldr	r2, [pc, #264]	; (8003560 <HAL_TIM_MspPostInit+0x130>)
 8003456:	f043 0304 	orr.w	r3, r3, #4
 800345a:	6193      	str	r3, [r2, #24]
 800345c:	4b40      	ldr	r3, [pc, #256]	; (8003560 <HAL_TIM_MspPostInit+0x130>)
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	61bb      	str	r3, [r7, #24]
 8003466:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800346c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	2302      	movs	r3, #2
 8003470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003472:	2302      	movs	r3, #2
 8003474:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003476:	f107 031c 	add.w	r3, r7, #28
 800347a:	4619      	mov	r1, r3
 800347c:	4839      	ldr	r0, [pc, #228]	; (8003564 <HAL_TIM_MspPostInit+0x134>)
 800347e:	f001 fa8f 	bl	80049a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003482:	e066      	b.n	8003552 <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM2)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348c:	d144      	bne.n	8003518 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800348e:	4b34      	ldr	r3, [pc, #208]	; (8003560 <HAL_TIM_MspPostInit+0x130>)
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	4a33      	ldr	r2, [pc, #204]	; (8003560 <HAL_TIM_MspPostInit+0x130>)
 8003494:	f043 0308 	orr.w	r3, r3, #8
 8003498:	6193      	str	r3, [r2, #24]
 800349a:	4b31      	ldr	r3, [pc, #196]	; (8003560 <HAL_TIM_MspPostInit+0x130>)
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a6:	4b2e      	ldr	r3, [pc, #184]	; (8003560 <HAL_TIM_MspPostInit+0x130>)
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	4a2d      	ldr	r2, [pc, #180]	; (8003560 <HAL_TIM_MspPostInit+0x130>)
 80034ac:	f043 0304 	orr.w	r3, r3, #4
 80034b0:	6193      	str	r3, [r2, #24]
 80034b2:	4b2b      	ldr	r3, [pc, #172]	; (8003560 <HAL_TIM_MspPostInit+0x130>)
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80034be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80034c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c4:	2302      	movs	r3, #2
 80034c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c8:	2302      	movs	r3, #2
 80034ca:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034cc:	f107 031c 	add.w	r3, r7, #28
 80034d0:	4619      	mov	r1, r3
 80034d2:	4825      	ldr	r0, [pc, #148]	; (8003568 <HAL_TIM_MspPostInit+0x138>)
 80034d4:	f001 fa64 	bl	80049a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80034d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034de:	2302      	movs	r3, #2
 80034e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e2:	2302      	movs	r3, #2
 80034e4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e6:	f107 031c 	add.w	r3, r7, #28
 80034ea:	4619      	mov	r1, r3
 80034ec:	481d      	ldr	r0, [pc, #116]	; (8003564 <HAL_TIM_MspPostInit+0x134>)
 80034ee:	f001 fa57 	bl	80049a0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_ENABLE();
 80034f2:	4b1e      	ldr	r3, [pc, #120]	; (800356c <HAL_TIM_MspPostInit+0x13c>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003502:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003510:	4a16      	ldr	r2, [pc, #88]	; (800356c <HAL_TIM_MspPostInit+0x13c>)
 8003512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003514:	6053      	str	r3, [r2, #4]
}
 8003516:	e01c      	b.n	8003552 <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM4)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a14      	ldr	r2, [pc, #80]	; (8003570 <HAL_TIM_MspPostInit+0x140>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d117      	bne.n	8003552 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003522:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <HAL_TIM_MspPostInit+0x130>)
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	4a0e      	ldr	r2, [pc, #56]	; (8003560 <HAL_TIM_MspPostInit+0x130>)
 8003528:	f043 0308 	orr.w	r3, r3, #8
 800352c:	6193      	str	r3, [r2, #24]
 800352e:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <HAL_TIM_MspPostInit+0x130>)
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800353a:	2340      	movs	r3, #64	; 0x40
 800353c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353e:	2302      	movs	r3, #2
 8003540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003542:	2302      	movs	r3, #2
 8003544:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003546:	f107 031c 	add.w	r3, r7, #28
 800354a:	4619      	mov	r1, r3
 800354c:	4806      	ldr	r0, [pc, #24]	; (8003568 <HAL_TIM_MspPostInit+0x138>)
 800354e:	f001 fa27 	bl	80049a0 <HAL_GPIO_Init>
}
 8003552:	bf00      	nop
 8003554:	3730      	adds	r7, #48	; 0x30
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40012c00 	.word	0x40012c00
 8003560:	40021000 	.word	0x40021000
 8003564:	40010800 	.word	0x40010800
 8003568:	40010c00 	.word	0x40010c00
 800356c:	40010000 	.word	0x40010000
 8003570:	40000800 	.word	0x40000800

08003574 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800357c:	f107 0310 	add.w	r3, r7, #16
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	609a      	str	r2, [r3, #8]
 8003588:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a19      	ldr	r2, [pc, #100]	; (80035f4 <HAL_UART_MspInit+0x80>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d12b      	bne.n	80035ec <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003594:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <HAL_UART_MspInit+0x84>)
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	4a17      	ldr	r2, [pc, #92]	; (80035f8 <HAL_UART_MspInit+0x84>)
 800359a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800359e:	61d3      	str	r3, [r2, #28]
 80035a0:	4b15      	ldr	r3, [pc, #84]	; (80035f8 <HAL_UART_MspInit+0x84>)
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ac:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <HAL_UART_MspInit+0x84>)
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	4a11      	ldr	r2, [pc, #68]	; (80035f8 <HAL_UART_MspInit+0x84>)
 80035b2:	f043 0304 	orr.w	r3, r3, #4
 80035b6:	6193      	str	r3, [r2, #24]
 80035b8:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <HAL_UART_MspInit+0x84>)
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80035c4:	230c      	movs	r3, #12
 80035c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c8:	2302      	movs	r3, #2
 80035ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035cc:	2302      	movs	r3, #2
 80035ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d0:	f107 0310 	add.w	r3, r7, #16
 80035d4:	4619      	mov	r1, r3
 80035d6:	4809      	ldr	r0, [pc, #36]	; (80035fc <HAL_UART_MspInit+0x88>)
 80035d8:	f001 f9e2 	bl	80049a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80035dc:	2200      	movs	r2, #0
 80035de:	2100      	movs	r1, #0
 80035e0:	2026      	movs	r0, #38	; 0x26
 80035e2:	f000 fef8 	bl	80043d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80035e6:	2026      	movs	r0, #38	; 0x26
 80035e8:	f000 ff11 	bl	800440e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80035ec:	bf00      	nop
 80035ee:	3720      	adds	r7, #32
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40004400 	.word	0x40004400
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40010800 	.word	0x40010800

08003600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003604:	e7fe      	b.n	8003604 <NMI_Handler+0x4>

08003606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003606:	b480      	push	{r7}
 8003608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800360a:	e7fe      	b.n	800360a <HardFault_Handler+0x4>

0800360c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003610:	e7fe      	b.n	8003610 <MemManage_Handler+0x4>

08003612 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003612:	b480      	push	{r7}
 8003614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003616:	e7fe      	b.n	8003616 <BusFault_Handler+0x4>

08003618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800361c:	e7fe      	b.n	800361c <UsageFault_Handler+0x4>

0800361e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800361e:	b480      	push	{r7}
 8003620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003622:	bf00      	nop
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800362a:	b480      	push	{r7}
 800362c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800362e:	bf00      	nop
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003636:	b480      	push	{r7}
 8003638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800363a:	bf00      	nop
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr

08003642 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003646:	f000 f9bb 	bl	80039c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800364a:	bf00      	nop
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003654:	4802      	ldr	r0, [pc, #8]	; (8003660 <DMA1_Channel2_IRQHandler+0x10>)
 8003656:	f001 f863 	bl	8004720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20000490 	.word	0x20000490

08003664 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003668:	4802      	ldr	r0, [pc, #8]	; (8003674 <ADC1_2_IRQHandler+0x10>)
 800366a:	f000 fb6f 	bl	8003d4c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800366e:	bf00      	nop
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	200002ec 	.word	0x200002ec

08003678 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800367c:	4802      	ldr	r0, [pc, #8]	; (8003688 <TIM2_IRQHandler+0x10>)
 800367e:	f005 fb7b 	bl	8008d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003682:	bf00      	nop
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	200003b8 	.word	0x200003b8

0800368c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003690:	4802      	ldr	r0, [pc, #8]	; (800369c <I2C1_EV_IRQHandler+0x10>)
 8003692:	f002 f94b 	bl	800592c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003696:	bf00      	nop
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	2000031c 	.word	0x2000031c

080036a0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80036a4:	4802      	ldr	r0, [pc, #8]	; (80036b0 <I2C1_ER_IRQHandler+0x10>)
 80036a6:	f002 fab2 	bl	8005c0e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	2000031c 	.word	0x2000031c

080036b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80036b8:	4802      	ldr	r0, [pc, #8]	; (80036c4 <USART2_IRQHandler+0x10>)
 80036ba:	f006 fb41 	bl	8009d40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	200004d4 	.word	0x200004d4

080036c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80036cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80036d0:	f001 fb1a 	bl	8004d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80036d4:	bf00      	nop
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  return 1;
 80036dc:	2301      	movs	r3, #1
}
 80036de:	4618      	mov	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr

080036e6 <_kill>:

int _kill(int pid, int sig)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80036f0:	f007 f8a6 	bl	800a840 <__errno>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2216      	movs	r2, #22
 80036f8:	601a      	str	r2, [r3, #0]
  return -1;
 80036fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <_exit>:

void _exit (int status)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800370e:	f04f 31ff 	mov.w	r1, #4294967295
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff ffe7 	bl	80036e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003718:	e7fe      	b.n	8003718 <_exit+0x12>

0800371a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b086      	sub	sp, #24
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	e00a      	b.n	8003742 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800372c:	f3af 8000 	nop.w
 8003730:	4601      	mov	r1, r0
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	60ba      	str	r2, [r7, #8]
 8003738:	b2ca      	uxtb	r2, r1
 800373a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	3301      	adds	r3, #1
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	429a      	cmp	r2, r3
 8003748:	dbf0      	blt.n	800372c <_read+0x12>
  }

  return len;
 800374a:	687b      	ldr	r3, [r7, #4]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	e009      	b.n	800377a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	60ba      	str	r2, [r7, #8]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	3301      	adds	r3, #1
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	429a      	cmp	r2, r3
 8003780:	dbf1      	blt.n	8003766 <_write+0x12>
  }
  return len;
 8003782:	687b      	ldr	r3, [r7, #4]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <_close>:

int _close(int file)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003794:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003798:	4618      	mov	r0, r3
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr

080037a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037b2:	605a      	str	r2, [r3, #4]
  return 0;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr

080037c0 <_isatty>:

int _isatty(int file)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037c8:	2301      	movs	r3, #1
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr

080037d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr

080037ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037f4:	4a14      	ldr	r2, [pc, #80]	; (8003848 <_sbrk+0x5c>)
 80037f6:	4b15      	ldr	r3, [pc, #84]	; (800384c <_sbrk+0x60>)
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003800:	4b13      	ldr	r3, [pc, #76]	; (8003850 <_sbrk+0x64>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d102      	bne.n	800380e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <_sbrk+0x64>)
 800380a:	4a12      	ldr	r2, [pc, #72]	; (8003854 <_sbrk+0x68>)
 800380c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800380e:	4b10      	ldr	r3, [pc, #64]	; (8003850 <_sbrk+0x64>)
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4413      	add	r3, r2
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	429a      	cmp	r2, r3
 800381a:	d207      	bcs.n	800382c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800381c:	f007 f810 	bl	800a840 <__errno>
 8003820:	4603      	mov	r3, r0
 8003822:	220c      	movs	r2, #12
 8003824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003826:	f04f 33ff 	mov.w	r3, #4294967295
 800382a:	e009      	b.n	8003840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800382c:	4b08      	ldr	r3, [pc, #32]	; (8003850 <_sbrk+0x64>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003832:	4b07      	ldr	r3, [pc, #28]	; (8003850 <_sbrk+0x64>)
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4413      	add	r3, r2
 800383a:	4a05      	ldr	r2, [pc, #20]	; (8003850 <_sbrk+0x64>)
 800383c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800383e:	68fb      	ldr	r3, [r7, #12]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20005000 	.word	0x20005000
 800384c:	00000400 	.word	0x00000400
 8003850:	2000094c 	.word	0x2000094c
 8003854:	20000980 	.word	0x20000980

08003858 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800385c:	bf00      	nop
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr

08003864 <timerRun>:
void setTimer3 (int duration) {
	timer3_counter = duration/Timer_Cycle;
	timer3_flag = 0;
}

void timerRun(){
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8003868:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <timerRun+0x6c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	dd0b      	ble.n	8003888 <timerRun+0x24>
		timer1_counter--;
 8003870:	4b17      	ldr	r3, [pc, #92]	; (80038d0 <timerRun+0x6c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3b01      	subs	r3, #1
 8003876:	4a16      	ldr	r2, [pc, #88]	; (80038d0 <timerRun+0x6c>)
 8003878:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 800387a:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <timerRun+0x6c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	dc02      	bgt.n	8003888 <timerRun+0x24>
			timer1_flag = 1;
 8003882:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <timerRun+0x70>)
 8003884:	2201      	movs	r2, #1
 8003886:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 8003888:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <timerRun+0x74>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	dd0b      	ble.n	80038a8 <timerRun+0x44>
		timer2_counter--;
 8003890:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <timerRun+0x74>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3b01      	subs	r3, #1
 8003896:	4a10      	ldr	r2, [pc, #64]	; (80038d8 <timerRun+0x74>)
 8003898:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 800389a:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <timerRun+0x74>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	dc02      	bgt.n	80038a8 <timerRun+0x44>
			timer2_flag = 1;
 80038a2:	4b0e      	ldr	r3, [pc, #56]	; (80038dc <timerRun+0x78>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 80038a8:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <timerRun+0x7c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	dd0b      	ble.n	80038c8 <timerRun+0x64>
		timer3_counter--;
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <timerRun+0x7c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	4a0a      	ldr	r2, [pc, #40]	; (80038e0 <timerRun+0x7c>)
 80038b8:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 80038ba:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <timerRun+0x7c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	dc02      	bgt.n	80038c8 <timerRun+0x64>
			timer3_flag = 1;
 80038c2:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <timerRun+0x80>)
 80038c4:	2201      	movs	r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80038c8:	bf00      	nop
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr
 80038d0:	20000950 	.word	0x20000950
 80038d4:	2000095c 	.word	0x2000095c
 80038d8:	20000954 	.word	0x20000954
 80038dc:	20000960 	.word	0x20000960
 80038e0:	20000958 	.word	0x20000958
 80038e4:	20000964 	.word	0x20000964

080038e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80038e8:	f7ff ffb6 	bl	8003858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038ec:	480b      	ldr	r0, [pc, #44]	; (800391c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80038ee:	490c      	ldr	r1, [pc, #48]	; (8003920 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80038f0:	4a0c      	ldr	r2, [pc, #48]	; (8003924 <LoopFillZerobss+0x16>)
  movs r3, #0
 80038f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038f4:	e002      	b.n	80038fc <LoopCopyDataInit>

080038f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038fa:	3304      	adds	r3, #4

080038fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003900:	d3f9      	bcc.n	80038f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003902:	4a09      	ldr	r2, [pc, #36]	; (8003928 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003904:	4c09      	ldr	r4, [pc, #36]	; (800392c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003908:	e001      	b.n	800390e <LoopFillZerobss>

0800390a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800390a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800390c:	3204      	adds	r2, #4

0800390e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800390e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003910:	d3fb      	bcc.n	800390a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003912:	f006 ff9b 	bl	800a84c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003916:	f7fe fc09 	bl	800212c <main>
  bx lr
 800391a:	4770      	bx	lr
  ldr r0, =_sdata
 800391c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003920:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 8003924:	0800db0c 	.word	0x0800db0c
  ldr r2, =_sbss
 8003928:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 800392c:	2000097c 	.word	0x2000097c

08003930 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003930:	e7fe      	b.n	8003930 <CAN1_RX1_IRQHandler>
	...

08003934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003938:	4b08      	ldr	r3, [pc, #32]	; (800395c <HAL_Init+0x28>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a07      	ldr	r2, [pc, #28]	; (800395c <HAL_Init+0x28>)
 800393e:	f043 0310 	orr.w	r3, r3, #16
 8003942:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003944:	2003      	movs	r0, #3
 8003946:	f000 fd3b 	bl	80043c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800394a:	2000      	movs	r0, #0
 800394c:	f000 f808 	bl	8003960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003950:	f7ff fc0e 	bl	8003170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40022000 	.word	0x40022000

08003960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003968:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <HAL_InitTick+0x54>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b12      	ldr	r3, [pc, #72]	; (80039b8 <HAL_InitTick+0x58>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	4619      	mov	r1, r3
 8003972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003976:	fbb3 f3f1 	udiv	r3, r3, r1
 800397a:	fbb2 f3f3 	udiv	r3, r2, r3
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fd53 	bl	800442a <HAL_SYSTICK_Config>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e00e      	b.n	80039ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b0f      	cmp	r3, #15
 8003992:	d80a      	bhi.n	80039aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003994:	2200      	movs	r2, #0
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	f04f 30ff 	mov.w	r0, #4294967295
 800399c:	f000 fd1b 	bl	80043d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039a0:	4a06      	ldr	r2, [pc, #24]	; (80039bc <HAL_InitTick+0x5c>)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	e000      	b.n	80039ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20000060 	.word	0x20000060
 80039b8:	20000068 	.word	0x20000068
 80039bc:	20000064 	.word	0x20000064

080039c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039c4:	4b05      	ldr	r3, [pc, #20]	; (80039dc <HAL_IncTick+0x1c>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	461a      	mov	r2, r3
 80039ca:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <HAL_IncTick+0x20>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4413      	add	r3, r2
 80039d0:	4a03      	ldr	r2, [pc, #12]	; (80039e0 <HAL_IncTick+0x20>)
 80039d2:	6013      	str	r3, [r2, #0]
}
 80039d4:	bf00      	nop
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr
 80039dc:	20000068 	.word	0x20000068
 80039e0:	20000968 	.word	0x20000968

080039e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  return uwTick;
 80039e8:	4b02      	ldr	r3, [pc, #8]	; (80039f4 <HAL_GetTick+0x10>)
 80039ea:	681b      	ldr	r3, [r3, #0]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr
 80039f4:	20000968 	.word	0x20000968

080039f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a00:	f7ff fff0 	bl	80039e4 <HAL_GetTick>
 8003a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a10:	d005      	beq.n	8003a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a12:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <HAL_Delay+0x44>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a1e:	bf00      	nop
 8003a20:	f7ff ffe0 	bl	80039e4 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d8f7      	bhi.n	8003a20 <HAL_Delay+0x28>
  {
  }
}
 8003a30:	bf00      	nop
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20000068 	.word	0x20000068

08003a40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e0be      	b.n	8003be0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d109      	bne.n	8003a84 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff fba8 	bl	80031d4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fb85 	bl	8004194 <ADC_ConversionStop_Disable>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	f003 0310 	and.w	r3, r3, #16
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f040 8099 	bne.w	8003bce <HAL_ADC_Init+0x18e>
 8003a9c:	7dfb      	ldrb	r3, [r7, #23]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f040 8095 	bne.w	8003bce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003aac:	f023 0302 	bic.w	r3, r3, #2
 8003ab0:	f043 0202 	orr.w	r2, r3, #2
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003ac0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	7b1b      	ldrb	r3, [r3, #12]
 8003ac6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003ac8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad8:	d003      	beq.n	8003ae2 <HAL_ADC_Init+0xa2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d102      	bne.n	8003ae8 <HAL_ADC_Init+0xa8>
 8003ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ae6:	e000      	b.n	8003aea <HAL_ADC_Init+0xaa>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	7d1b      	ldrb	r3, [r3, #20]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d119      	bne.n	8003b2c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	7b1b      	ldrb	r3, [r3, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d109      	bne.n	8003b14 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	035a      	lsls	r2, r3, #13
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	e00b      	b.n	8003b2c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	f043 0220 	orr.w	r2, r3, #32
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	f043 0201 	orr.w	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	4b28      	ldr	r3, [pc, #160]	; (8003be8 <HAL_ADC_Init+0x1a8>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6812      	ldr	r2, [r2, #0]
 8003b4e:	68b9      	ldr	r1, [r7, #8]
 8003b50:	430b      	orrs	r3, r1
 8003b52:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b5c:	d003      	beq.n	8003b66 <HAL_ADC_Init+0x126>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d104      	bne.n	8003b70 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	051b      	lsls	r3, r3, #20
 8003b6e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	4b18      	ldr	r3, [pc, #96]	; (8003bec <HAL_ADC_Init+0x1ac>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d10b      	bne.n	8003bac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9e:	f023 0303 	bic.w	r3, r3, #3
 8003ba2:	f043 0201 	orr.w	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003baa:	e018      	b.n	8003bde <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	f023 0312 	bic.w	r3, r3, #18
 8003bb4:	f043 0210 	orr.w	r2, r3, #16
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	f043 0201 	orr.w	r2, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003bcc:	e007      	b.n	8003bde <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	f043 0210 	orr.w	r2, r3, #16
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	ffe1f7fd 	.word	0xffe1f7fd
 8003bec:	ff1f0efe 	.word	0xff1f0efe

08003bf0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_ADC_Start+0x1a>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e098      	b.n	8003d3c <HAL_ADC_Start+0x14c>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fa64 	bl	80040e0 <ADC_Enable>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f040 8087 	bne.w	8003d32 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2c:	f023 0301 	bic.w	r3, r3, #1
 8003c30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a41      	ldr	r2, [pc, #260]	; (8003d44 <HAL_ADC_Start+0x154>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d105      	bne.n	8003c4e <HAL_ADC_Start+0x5e>
 8003c42:	4b41      	ldr	r3, [pc, #260]	; (8003d48 <HAL_ADC_Start+0x158>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d115      	bne.n	8003c7a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d026      	beq.n	8003cb6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c78:	e01d      	b.n	8003cb6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a2f      	ldr	r2, [pc, #188]	; (8003d48 <HAL_ADC_Start+0x158>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <HAL_ADC_Start+0xaa>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a2b      	ldr	r2, [pc, #172]	; (8003d44 <HAL_ADC_Start+0x154>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d10d      	bne.n	8003cb6 <HAL_ADC_Start+0xc6>
 8003c9a:	4b2b      	ldr	r3, [pc, #172]	; (8003d48 <HAL_ADC_Start+0x158>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003caa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003cae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d006      	beq.n	8003cd0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	f023 0206 	bic.w	r2, r3, #6
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cce:	e002      	b.n	8003cd6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f06f 0202 	mvn.w	r2, #2
 8003ce6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003cf2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003cf6:	d113      	bne.n	8003d20 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003cfc:	4a11      	ldr	r2, [pc, #68]	; (8003d44 <HAL_ADC_Start+0x154>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d105      	bne.n	8003d0e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003d02:	4b11      	ldr	r3, [pc, #68]	; (8003d48 <HAL_ADC_Start+0x158>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d108      	bne.n	8003d20 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003d1c:	609a      	str	r2, [r3, #8]
 8003d1e:	e00c      	b.n	8003d3a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003d2e:	609a      	str	r2, [r3, #8]
 8003d30:	e003      	b.n	8003d3a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40012800 	.word	0x40012800
 8003d48:	40012400 	.word	0x40012400

08003d4c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d03e      	beq.n	8003dec <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d039      	beq.n	8003dec <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7c:	f003 0310 	and.w	r3, r3, #16
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d105      	bne.n	8003d90 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003d9a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003d9e:	d11d      	bne.n	8003ddc <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d119      	bne.n	8003ddc <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0220 	bic.w	r2, r2, #32
 8003db6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d105      	bne.n	8003ddc <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd4:	f043 0201 	orr.w	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 f874 	bl	8003eca <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f06f 0212 	mvn.w	r2, #18
 8003dea:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d04d      	beq.n	8003e92 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d048      	beq.n	8003e92 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d105      	bne.n	8003e18 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003e22:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003e26:	d012      	beq.n	8003e4e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d125      	bne.n	8003e82 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003e40:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003e44:	d11d      	bne.n	8003e82 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d119      	bne.n	8003e82 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e5c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d105      	bne.n	8003e82 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7a:	f043 0201 	orr.w	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f9c7 	bl	8004216 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 020c 	mvn.w	r2, #12
 8003e90:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d012      	beq.n	8003ec2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00d      	beq.n	8003ec2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eaa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f812 	bl	8003edc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0201 	mvn.w	r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003ec2:	bf00      	nop
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr

08003edc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr
	...

08003ef0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x20>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e0dc      	b.n	80040ca <HAL_ADC_ConfigChannel+0x1da>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b06      	cmp	r3, #6
 8003f1e:	d81c      	bhi.n	8003f5a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	3b05      	subs	r3, #5
 8003f32:	221f      	movs	r2, #31
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	4019      	ands	r1, r3
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	3b05      	subs	r3, #5
 8003f4c:	fa00 f203 	lsl.w	r2, r0, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	635a      	str	r2, [r3, #52]	; 0x34
 8003f58:	e03c      	b.n	8003fd4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b0c      	cmp	r3, #12
 8003f60:	d81c      	bhi.n	8003f9c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	3b23      	subs	r3, #35	; 0x23
 8003f74:	221f      	movs	r2, #31
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	4019      	ands	r1, r3
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	6818      	ldr	r0, [r3, #0]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3b23      	subs	r3, #35	; 0x23
 8003f8e:	fa00 f203 	lsl.w	r2, r0, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	631a      	str	r2, [r3, #48]	; 0x30
 8003f9a:	e01b      	b.n	8003fd4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	3b41      	subs	r3, #65	; 0x41
 8003fae:	221f      	movs	r2, #31
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	4019      	ands	r1, r3
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	6818      	ldr	r0, [r3, #0]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3b41      	subs	r3, #65	; 0x41
 8003fc8:	fa00 f203 	lsl.w	r2, r0, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b09      	cmp	r3, #9
 8003fda:	d91c      	bls.n	8004016 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68d9      	ldr	r1, [r3, #12]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	4413      	add	r3, r2
 8003fec:	3b1e      	subs	r3, #30
 8003fee:	2207      	movs	r2, #7
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	4019      	ands	r1, r3
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	6898      	ldr	r0, [r3, #8]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4613      	mov	r3, r2
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	4413      	add	r3, r2
 8004006:	3b1e      	subs	r3, #30
 8004008:	fa00 f203 	lsl.w	r2, r0, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	60da      	str	r2, [r3, #12]
 8004014:	e019      	b.n	800404a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6919      	ldr	r1, [r3, #16]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4613      	mov	r3, r2
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	4413      	add	r3, r2
 8004026:	2207      	movs	r2, #7
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	43db      	mvns	r3, r3
 800402e:	4019      	ands	r1, r3
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	6898      	ldr	r0, [r3, #8]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4613      	mov	r3, r2
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	4413      	add	r3, r2
 800403e:	fa00 f203 	lsl.w	r2, r0, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b10      	cmp	r3, #16
 8004050:	d003      	beq.n	800405a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004056:	2b11      	cmp	r3, #17
 8004058:	d132      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1d      	ldr	r2, [pc, #116]	; (80040d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d125      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d126      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004080:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b10      	cmp	r3, #16
 8004088:	d11a      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800408a:	4b13      	ldr	r3, [pc, #76]	; (80040d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a13      	ldr	r2, [pc, #76]	; (80040dc <HAL_ADC_ConfigChannel+0x1ec>)
 8004090:	fba2 2303 	umull	r2, r3, r2, r3
 8004094:	0c9a      	lsrs	r2, r3, #18
 8004096:	4613      	mov	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040a0:	e002      	b.n	80040a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f9      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x1b2>
 80040ae:	e007      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b4:	f043 0220 	orr.w	r2, r3, #32
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr
 80040d4:	40012400 	.word	0x40012400
 80040d8:	20000060 	.word	0x20000060
 80040dc:	431bde83 	.word	0x431bde83

080040e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d040      	beq.n	8004180 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f042 0201 	orr.w	r2, r2, #1
 800410c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800410e:	4b1f      	ldr	r3, [pc, #124]	; (800418c <ADC_Enable+0xac>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a1f      	ldr	r2, [pc, #124]	; (8004190 <ADC_Enable+0xb0>)
 8004114:	fba2 2303 	umull	r2, r3, r2, r3
 8004118:	0c9b      	lsrs	r3, r3, #18
 800411a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800411c:	e002      	b.n	8004124 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	3b01      	subs	r3, #1
 8004122:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f9      	bne.n	800411e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800412a:	f7ff fc5b 	bl	80039e4 <HAL_GetTick>
 800412e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004130:	e01f      	b.n	8004172 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004132:	f7ff fc57 	bl	80039e4 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d918      	bls.n	8004172 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b01      	cmp	r3, #1
 800414c:	d011      	beq.n	8004172 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	f043 0210 	orr.w	r2, r3, #16
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	f043 0201 	orr.w	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e007      	b.n	8004182 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b01      	cmp	r3, #1
 800417e:	d1d8      	bne.n	8004132 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20000060 	.word	0x20000060
 8004190:	431bde83 	.word	0x431bde83

08004194 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d12e      	bne.n	800420c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041be:	f7ff fc11 	bl	80039e4 <HAL_GetTick>
 80041c2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80041c4:	e01b      	b.n	80041fe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80041c6:	f7ff fc0d 	bl	80039e4 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d914      	bls.n	80041fe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d10d      	bne.n	80041fe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	f043 0210 	orr.w	r2, r3, #16
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	f043 0201 	orr.w	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e007      	b.n	800420e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b01      	cmp	r3, #1
 800420a:	d0dc      	beq.n	80041c6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr

08004228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004238:	4b0c      	ldr	r3, [pc, #48]	; (800426c <__NVIC_SetPriorityGrouping+0x44>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004244:	4013      	ands	r3, r2
 8004246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800425a:	4a04      	ldr	r2, [pc, #16]	; (800426c <__NVIC_SetPriorityGrouping+0x44>)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	60d3      	str	r3, [r2, #12]
}
 8004260:	bf00      	nop
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	bc80      	pop	{r7}
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	e000ed00 	.word	0xe000ed00

08004270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004274:	4b04      	ldr	r3, [pc, #16]	; (8004288 <__NVIC_GetPriorityGrouping+0x18>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	0a1b      	lsrs	r3, r3, #8
 800427a:	f003 0307 	and.w	r3, r3, #7
}
 800427e:	4618      	mov	r0, r3
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	e000ed00 	.word	0xe000ed00

0800428c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429a:	2b00      	cmp	r3, #0
 800429c:	db0b      	blt.n	80042b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	f003 021f 	and.w	r2, r3, #31
 80042a4:	4906      	ldr	r1, [pc, #24]	; (80042c0 <__NVIC_EnableIRQ+0x34>)
 80042a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042aa:	095b      	lsrs	r3, r3, #5
 80042ac:	2001      	movs	r0, #1
 80042ae:	fa00 f202 	lsl.w	r2, r0, r2
 80042b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr
 80042c0:	e000e100 	.word	0xe000e100

080042c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	6039      	str	r1, [r7, #0]
 80042ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	db0a      	blt.n	80042ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	490c      	ldr	r1, [pc, #48]	; (8004310 <__NVIC_SetPriority+0x4c>)
 80042de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e2:	0112      	lsls	r2, r2, #4
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	440b      	add	r3, r1
 80042e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042ec:	e00a      	b.n	8004304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	4908      	ldr	r1, [pc, #32]	; (8004314 <__NVIC_SetPriority+0x50>)
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	3b04      	subs	r3, #4
 80042fc:	0112      	lsls	r2, r2, #4
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	440b      	add	r3, r1
 8004302:	761a      	strb	r2, [r3, #24]
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	e000e100 	.word	0xe000e100
 8004314:	e000ed00 	.word	0xe000ed00

08004318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004318:	b480      	push	{r7}
 800431a:	b089      	sub	sp, #36	; 0x24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f1c3 0307 	rsb	r3, r3, #7
 8004332:	2b04      	cmp	r3, #4
 8004334:	bf28      	it	cs
 8004336:	2304      	movcs	r3, #4
 8004338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	3304      	adds	r3, #4
 800433e:	2b06      	cmp	r3, #6
 8004340:	d902      	bls.n	8004348 <NVIC_EncodePriority+0x30>
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	3b03      	subs	r3, #3
 8004346:	e000      	b.n	800434a <NVIC_EncodePriority+0x32>
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800434c:	f04f 32ff 	mov.w	r2, #4294967295
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	43da      	mvns	r2, r3
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	401a      	ands	r2, r3
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004360:	f04f 31ff 	mov.w	r1, #4294967295
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	fa01 f303 	lsl.w	r3, r1, r3
 800436a:	43d9      	mvns	r1, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004370:	4313      	orrs	r3, r2
         );
}
 8004372:	4618      	mov	r0, r3
 8004374:	3724      	adds	r7, #36	; 0x24
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr

0800437c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3b01      	subs	r3, #1
 8004388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800438c:	d301      	bcc.n	8004392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800438e:	2301      	movs	r3, #1
 8004390:	e00f      	b.n	80043b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004392:	4a0a      	ldr	r2, [pc, #40]	; (80043bc <SysTick_Config+0x40>)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3b01      	subs	r3, #1
 8004398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800439a:	210f      	movs	r1, #15
 800439c:	f04f 30ff 	mov.w	r0, #4294967295
 80043a0:	f7ff ff90 	bl	80042c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <SysTick_Config+0x40>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043aa:	4b04      	ldr	r3, [pc, #16]	; (80043bc <SysTick_Config+0x40>)
 80043ac:	2207      	movs	r2, #7
 80043ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	e000e010 	.word	0xe000e010

080043c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7ff ff2d 	bl	8004228 <__NVIC_SetPriorityGrouping>
}
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b086      	sub	sp, #24
 80043da:	af00      	add	r7, sp, #0
 80043dc:	4603      	mov	r3, r0
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	607a      	str	r2, [r7, #4]
 80043e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043e8:	f7ff ff42 	bl	8004270 <__NVIC_GetPriorityGrouping>
 80043ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	68b9      	ldr	r1, [r7, #8]
 80043f2:	6978      	ldr	r0, [r7, #20]
 80043f4:	f7ff ff90 	bl	8004318 <NVIC_EncodePriority>
 80043f8:	4602      	mov	r2, r0
 80043fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043fe:	4611      	mov	r1, r2
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff ff5f 	bl	80042c4 <__NVIC_SetPriority>
}
 8004406:	bf00      	nop
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b082      	sub	sp, #8
 8004412:	af00      	add	r7, sp, #0
 8004414:	4603      	mov	r3, r0
 8004416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff ff35 	bl	800428c <__NVIC_EnableIRQ>
}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7ff ffa2 	bl	800437c <SysTick_Config>
 8004438:	4603      	mov	r3, r0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e043      	b.n	80044e2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	4b22      	ldr	r3, [pc, #136]	; (80044ec <HAL_DMA_Init+0xa8>)
 8004462:	4413      	add	r3, r2
 8004464:	4a22      	ldr	r2, [pc, #136]	; (80044f0 <HAL_DMA_Init+0xac>)
 8004466:	fba2 2303 	umull	r2, r3, r2, r3
 800446a:	091b      	lsrs	r3, r3, #4
 800446c:	009a      	lsls	r2, r3, #2
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a1f      	ldr	r2, [pc, #124]	; (80044f4 <HAL_DMA_Init+0xb0>)
 8004476:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800448e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004492:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800449c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr
 80044ec:	bffdfff8 	.word	0xbffdfff8
 80044f0:	cccccccd 	.word	0xcccccccd
 80044f4:	40020000 	.word	0x40020000

080044f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_DMA_Start_IT+0x20>
 8004514:	2302      	movs	r3, #2
 8004516:	e04b      	b.n	80045b0 <HAL_DMA_Start_IT+0xb8>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	d13a      	bne.n	80045a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0201 	bic.w	r2, r2, #1
 8004548:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 f9f8 	bl	8004946 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	2b00      	cmp	r3, #0
 800455c:	d008      	beq.n	8004570 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f042 020e 	orr.w	r2, r2, #14
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	e00f      	b.n	8004590 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0204 	bic.w	r2, r2, #4
 800457e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 020a 	orr.w	r2, r2, #10
 800458e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0201 	orr.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	e005      	b.n	80045ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80045aa:	2302      	movs	r3, #2
 80045ac:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80045ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d008      	beq.n	80045e2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2204      	movs	r2, #4
 80045d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e020      	b.n	8004624 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 020e 	bic.w	r2, r2, #14
 80045f0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0201 	bic.w	r2, r2, #1
 8004600:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460a:	2101      	movs	r1, #1
 800460c:	fa01 f202 	lsl.w	r2, r1, r2
 8004610:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004622:	7bfb      	ldrb	r3, [r7, #15]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr
	...

08004630 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d005      	beq.n	8004654 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2204      	movs	r2, #4
 800464c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	73fb      	strb	r3, [r7, #15]
 8004652:	e051      	b.n	80046f8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 020e 	bic.w	r2, r2, #14
 8004662:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0201 	bic.w	r2, r2, #1
 8004672:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a22      	ldr	r2, [pc, #136]	; (8004704 <HAL_DMA_Abort_IT+0xd4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d029      	beq.n	80046d2 <HAL_DMA_Abort_IT+0xa2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a21      	ldr	r2, [pc, #132]	; (8004708 <HAL_DMA_Abort_IT+0xd8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d022      	beq.n	80046ce <HAL_DMA_Abort_IT+0x9e>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a1f      	ldr	r2, [pc, #124]	; (800470c <HAL_DMA_Abort_IT+0xdc>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d01a      	beq.n	80046c8 <HAL_DMA_Abort_IT+0x98>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a1e      	ldr	r2, [pc, #120]	; (8004710 <HAL_DMA_Abort_IT+0xe0>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d012      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x92>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a1c      	ldr	r2, [pc, #112]	; (8004714 <HAL_DMA_Abort_IT+0xe4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00a      	beq.n	80046bc <HAL_DMA_Abort_IT+0x8c>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a1b      	ldr	r2, [pc, #108]	; (8004718 <HAL_DMA_Abort_IT+0xe8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d102      	bne.n	80046b6 <HAL_DMA_Abort_IT+0x86>
 80046b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80046b4:	e00e      	b.n	80046d4 <HAL_DMA_Abort_IT+0xa4>
 80046b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046ba:	e00b      	b.n	80046d4 <HAL_DMA_Abort_IT+0xa4>
 80046bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046c0:	e008      	b.n	80046d4 <HAL_DMA_Abort_IT+0xa4>
 80046c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046c6:	e005      	b.n	80046d4 <HAL_DMA_Abort_IT+0xa4>
 80046c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046cc:	e002      	b.n	80046d4 <HAL_DMA_Abort_IT+0xa4>
 80046ce:	2310      	movs	r3, #16
 80046d0:	e000      	b.n	80046d4 <HAL_DMA_Abort_IT+0xa4>
 80046d2:	2301      	movs	r3, #1
 80046d4:	4a11      	ldr	r2, [pc, #68]	; (800471c <HAL_DMA_Abort_IT+0xec>)
 80046d6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	4798      	blx	r3
    } 
  }
  return status;
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40020008 	.word	0x40020008
 8004708:	4002001c 	.word	0x4002001c
 800470c:	40020030 	.word	0x40020030
 8004710:	40020044 	.word	0x40020044
 8004714:	40020058 	.word	0x40020058
 8004718:	4002006c 	.word	0x4002006c
 800471c:	40020000 	.word	0x40020000

08004720 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	2204      	movs	r2, #4
 800473e:	409a      	lsls	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4013      	ands	r3, r2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d04f      	beq.n	80047e8 <HAL_DMA_IRQHandler+0xc8>
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b00      	cmp	r3, #0
 8004750:	d04a      	beq.n	80047e8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d107      	bne.n	8004770 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0204 	bic.w	r2, r2, #4
 800476e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a66      	ldr	r2, [pc, #408]	; (8004910 <HAL_DMA_IRQHandler+0x1f0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d029      	beq.n	80047ce <HAL_DMA_IRQHandler+0xae>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a65      	ldr	r2, [pc, #404]	; (8004914 <HAL_DMA_IRQHandler+0x1f4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d022      	beq.n	80047ca <HAL_DMA_IRQHandler+0xaa>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a63      	ldr	r2, [pc, #396]	; (8004918 <HAL_DMA_IRQHandler+0x1f8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d01a      	beq.n	80047c4 <HAL_DMA_IRQHandler+0xa4>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a62      	ldr	r2, [pc, #392]	; (800491c <HAL_DMA_IRQHandler+0x1fc>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d012      	beq.n	80047be <HAL_DMA_IRQHandler+0x9e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a60      	ldr	r2, [pc, #384]	; (8004920 <HAL_DMA_IRQHandler+0x200>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d00a      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x98>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a5f      	ldr	r2, [pc, #380]	; (8004924 <HAL_DMA_IRQHandler+0x204>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d102      	bne.n	80047b2 <HAL_DMA_IRQHandler+0x92>
 80047ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80047b0:	e00e      	b.n	80047d0 <HAL_DMA_IRQHandler+0xb0>
 80047b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80047b6:	e00b      	b.n	80047d0 <HAL_DMA_IRQHandler+0xb0>
 80047b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80047bc:	e008      	b.n	80047d0 <HAL_DMA_IRQHandler+0xb0>
 80047be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047c2:	e005      	b.n	80047d0 <HAL_DMA_IRQHandler+0xb0>
 80047c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047c8:	e002      	b.n	80047d0 <HAL_DMA_IRQHandler+0xb0>
 80047ca:	2340      	movs	r3, #64	; 0x40
 80047cc:	e000      	b.n	80047d0 <HAL_DMA_IRQHandler+0xb0>
 80047ce:	2304      	movs	r3, #4
 80047d0:	4a55      	ldr	r2, [pc, #340]	; (8004928 <HAL_DMA_IRQHandler+0x208>)
 80047d2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f000 8094 	beq.w	8004906 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80047e6:	e08e      	b.n	8004906 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	2202      	movs	r2, #2
 80047ee:	409a      	lsls	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d056      	beq.n	80048a6 <HAL_DMA_IRQHandler+0x186>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d051      	beq.n	80048a6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0320 	and.w	r3, r3, #32
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10b      	bne.n	8004828 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 020a 	bic.w	r2, r2, #10
 800481e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a38      	ldr	r2, [pc, #224]	; (8004910 <HAL_DMA_IRQHandler+0x1f0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d029      	beq.n	8004886 <HAL_DMA_IRQHandler+0x166>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a37      	ldr	r2, [pc, #220]	; (8004914 <HAL_DMA_IRQHandler+0x1f4>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d022      	beq.n	8004882 <HAL_DMA_IRQHandler+0x162>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a35      	ldr	r2, [pc, #212]	; (8004918 <HAL_DMA_IRQHandler+0x1f8>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d01a      	beq.n	800487c <HAL_DMA_IRQHandler+0x15c>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a34      	ldr	r2, [pc, #208]	; (800491c <HAL_DMA_IRQHandler+0x1fc>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d012      	beq.n	8004876 <HAL_DMA_IRQHandler+0x156>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a32      	ldr	r2, [pc, #200]	; (8004920 <HAL_DMA_IRQHandler+0x200>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00a      	beq.n	8004870 <HAL_DMA_IRQHandler+0x150>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a31      	ldr	r2, [pc, #196]	; (8004924 <HAL_DMA_IRQHandler+0x204>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d102      	bne.n	800486a <HAL_DMA_IRQHandler+0x14a>
 8004864:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004868:	e00e      	b.n	8004888 <HAL_DMA_IRQHandler+0x168>
 800486a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800486e:	e00b      	b.n	8004888 <HAL_DMA_IRQHandler+0x168>
 8004870:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004874:	e008      	b.n	8004888 <HAL_DMA_IRQHandler+0x168>
 8004876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800487a:	e005      	b.n	8004888 <HAL_DMA_IRQHandler+0x168>
 800487c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004880:	e002      	b.n	8004888 <HAL_DMA_IRQHandler+0x168>
 8004882:	2320      	movs	r3, #32
 8004884:	e000      	b.n	8004888 <HAL_DMA_IRQHandler+0x168>
 8004886:	2302      	movs	r3, #2
 8004888:	4a27      	ldr	r2, [pc, #156]	; (8004928 <HAL_DMA_IRQHandler+0x208>)
 800488a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	2b00      	cmp	r3, #0
 800489a:	d034      	beq.n	8004906 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80048a4:	e02f      	b.n	8004906 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	2208      	movs	r2, #8
 80048ac:	409a      	lsls	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d028      	beq.n	8004908 <HAL_DMA_IRQHandler+0x1e8>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d023      	beq.n	8004908 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 020e 	bic.w	r2, r2, #14
 80048ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d8:	2101      	movs	r1, #1
 80048da:	fa01 f202 	lsl.w	r2, r1, r2
 80048de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d004      	beq.n	8004908 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	4798      	blx	r3
    }
  }
  return;
 8004906:	bf00      	nop
 8004908:	bf00      	nop
}
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40020008 	.word	0x40020008
 8004914:	4002001c 	.word	0x4002001c
 8004918:	40020030 	.word	0x40020030
 800491c:	40020044 	.word	0x40020044
 8004920:	40020058 	.word	0x40020058
 8004924:	4002006c 	.word	0x4002006c
 8004928:	40020000 	.word	0x40020000

0800492c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800493a:	b2db      	uxtb	r3, r3
}
 800493c:	4618      	mov	r0, r3
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	bc80      	pop	{r7}
 8004944:	4770      	bx	lr

08004946 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004946:	b480      	push	{r7}
 8004948:	b085      	sub	sp, #20
 800494a:	af00      	add	r7, sp, #0
 800494c:	60f8      	str	r0, [r7, #12]
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	607a      	str	r2, [r7, #4]
 8004952:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495c:	2101      	movs	r1, #1
 800495e:	fa01 f202 	lsl.w	r2, r1, r2
 8004962:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b10      	cmp	r3, #16
 8004972:	d108      	bne.n	8004986 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004984:	e007      	b.n	8004996 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	60da      	str	r2, [r3, #12]
}
 8004996:	bf00      	nop
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr

080049a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b08b      	sub	sp, #44	; 0x2c
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049aa:	2300      	movs	r3, #0
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80049ae:	2300      	movs	r3, #0
 80049b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049b2:	e169      	b.n	8004c88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80049b4:	2201      	movs	r2, #1
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	fa02 f303 	lsl.w	r3, r2, r3
 80049bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	4013      	ands	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	f040 8158 	bne.w	8004c82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	4a9a      	ldr	r2, [pc, #616]	; (8004c40 <HAL_GPIO_Init+0x2a0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d05e      	beq.n	8004a9a <HAL_GPIO_Init+0xfa>
 80049dc:	4a98      	ldr	r2, [pc, #608]	; (8004c40 <HAL_GPIO_Init+0x2a0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d875      	bhi.n	8004ace <HAL_GPIO_Init+0x12e>
 80049e2:	4a98      	ldr	r2, [pc, #608]	; (8004c44 <HAL_GPIO_Init+0x2a4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d058      	beq.n	8004a9a <HAL_GPIO_Init+0xfa>
 80049e8:	4a96      	ldr	r2, [pc, #600]	; (8004c44 <HAL_GPIO_Init+0x2a4>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d86f      	bhi.n	8004ace <HAL_GPIO_Init+0x12e>
 80049ee:	4a96      	ldr	r2, [pc, #600]	; (8004c48 <HAL_GPIO_Init+0x2a8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d052      	beq.n	8004a9a <HAL_GPIO_Init+0xfa>
 80049f4:	4a94      	ldr	r2, [pc, #592]	; (8004c48 <HAL_GPIO_Init+0x2a8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d869      	bhi.n	8004ace <HAL_GPIO_Init+0x12e>
 80049fa:	4a94      	ldr	r2, [pc, #592]	; (8004c4c <HAL_GPIO_Init+0x2ac>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d04c      	beq.n	8004a9a <HAL_GPIO_Init+0xfa>
 8004a00:	4a92      	ldr	r2, [pc, #584]	; (8004c4c <HAL_GPIO_Init+0x2ac>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d863      	bhi.n	8004ace <HAL_GPIO_Init+0x12e>
 8004a06:	4a92      	ldr	r2, [pc, #584]	; (8004c50 <HAL_GPIO_Init+0x2b0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d046      	beq.n	8004a9a <HAL_GPIO_Init+0xfa>
 8004a0c:	4a90      	ldr	r2, [pc, #576]	; (8004c50 <HAL_GPIO_Init+0x2b0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d85d      	bhi.n	8004ace <HAL_GPIO_Init+0x12e>
 8004a12:	2b12      	cmp	r3, #18
 8004a14:	d82a      	bhi.n	8004a6c <HAL_GPIO_Init+0xcc>
 8004a16:	2b12      	cmp	r3, #18
 8004a18:	d859      	bhi.n	8004ace <HAL_GPIO_Init+0x12e>
 8004a1a:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <HAL_GPIO_Init+0x80>)
 8004a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a20:	08004a9b 	.word	0x08004a9b
 8004a24:	08004a75 	.word	0x08004a75
 8004a28:	08004a87 	.word	0x08004a87
 8004a2c:	08004ac9 	.word	0x08004ac9
 8004a30:	08004acf 	.word	0x08004acf
 8004a34:	08004acf 	.word	0x08004acf
 8004a38:	08004acf 	.word	0x08004acf
 8004a3c:	08004acf 	.word	0x08004acf
 8004a40:	08004acf 	.word	0x08004acf
 8004a44:	08004acf 	.word	0x08004acf
 8004a48:	08004acf 	.word	0x08004acf
 8004a4c:	08004acf 	.word	0x08004acf
 8004a50:	08004acf 	.word	0x08004acf
 8004a54:	08004acf 	.word	0x08004acf
 8004a58:	08004acf 	.word	0x08004acf
 8004a5c:	08004acf 	.word	0x08004acf
 8004a60:	08004acf 	.word	0x08004acf
 8004a64:	08004a7d 	.word	0x08004a7d
 8004a68:	08004a91 	.word	0x08004a91
 8004a6c:	4a79      	ldr	r2, [pc, #484]	; (8004c54 <HAL_GPIO_Init+0x2b4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004a72:	e02c      	b.n	8004ace <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	623b      	str	r3, [r7, #32]
          break;
 8004a7a:	e029      	b.n	8004ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	3304      	adds	r3, #4
 8004a82:	623b      	str	r3, [r7, #32]
          break;
 8004a84:	e024      	b.n	8004ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	3308      	adds	r3, #8
 8004a8c:	623b      	str	r3, [r7, #32]
          break;
 8004a8e:	e01f      	b.n	8004ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	330c      	adds	r3, #12
 8004a96:	623b      	str	r3, [r7, #32]
          break;
 8004a98:	e01a      	b.n	8004ad0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d102      	bne.n	8004aa8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004aa2:	2304      	movs	r3, #4
 8004aa4:	623b      	str	r3, [r7, #32]
          break;
 8004aa6:	e013      	b.n	8004ad0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d105      	bne.n	8004abc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ab0:	2308      	movs	r3, #8
 8004ab2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	611a      	str	r2, [r3, #16]
          break;
 8004aba:	e009      	b.n	8004ad0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004abc:	2308      	movs	r3, #8
 8004abe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69fa      	ldr	r2, [r7, #28]
 8004ac4:	615a      	str	r2, [r3, #20]
          break;
 8004ac6:	e003      	b.n	8004ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	623b      	str	r3, [r7, #32]
          break;
 8004acc:	e000      	b.n	8004ad0 <HAL_GPIO_Init+0x130>
          break;
 8004ace:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	2bff      	cmp	r3, #255	; 0xff
 8004ad4:	d801      	bhi.n	8004ada <HAL_GPIO_Init+0x13a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	e001      	b.n	8004ade <HAL_GPIO_Init+0x13e>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3304      	adds	r3, #4
 8004ade:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	2bff      	cmp	r3, #255	; 0xff
 8004ae4:	d802      	bhi.n	8004aec <HAL_GPIO_Init+0x14c>
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	e002      	b.n	8004af2 <HAL_GPIO_Init+0x152>
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	3b08      	subs	r3, #8
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	210f      	movs	r1, #15
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	fa01 f303 	lsl.w	r3, r1, r3
 8004b00:	43db      	mvns	r3, r3
 8004b02:	401a      	ands	r2, r3
 8004b04:	6a39      	ldr	r1, [r7, #32]
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 80b1 	beq.w	8004c82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004b20:	4b4d      	ldr	r3, [pc, #308]	; (8004c58 <HAL_GPIO_Init+0x2b8>)
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	4a4c      	ldr	r2, [pc, #304]	; (8004c58 <HAL_GPIO_Init+0x2b8>)
 8004b26:	f043 0301 	orr.w	r3, r3, #1
 8004b2a:	6193      	str	r3, [r2, #24]
 8004b2c:	4b4a      	ldr	r3, [pc, #296]	; (8004c58 <HAL_GPIO_Init+0x2b8>)
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	60bb      	str	r3, [r7, #8]
 8004b36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004b38:	4a48      	ldr	r2, [pc, #288]	; (8004c5c <HAL_GPIO_Init+0x2bc>)
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	089b      	lsrs	r3, r3, #2
 8004b3e:	3302      	adds	r3, #2
 8004b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	f003 0303 	and.w	r3, r3, #3
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	220f      	movs	r2, #15
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	43db      	mvns	r3, r3
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a40      	ldr	r2, [pc, #256]	; (8004c60 <HAL_GPIO_Init+0x2c0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d013      	beq.n	8004b8c <HAL_GPIO_Init+0x1ec>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a3f      	ldr	r2, [pc, #252]	; (8004c64 <HAL_GPIO_Init+0x2c4>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d00d      	beq.n	8004b88 <HAL_GPIO_Init+0x1e8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a3e      	ldr	r2, [pc, #248]	; (8004c68 <HAL_GPIO_Init+0x2c8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d007      	beq.n	8004b84 <HAL_GPIO_Init+0x1e4>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a3d      	ldr	r2, [pc, #244]	; (8004c6c <HAL_GPIO_Init+0x2cc>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d101      	bne.n	8004b80 <HAL_GPIO_Init+0x1e0>
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e006      	b.n	8004b8e <HAL_GPIO_Init+0x1ee>
 8004b80:	2304      	movs	r3, #4
 8004b82:	e004      	b.n	8004b8e <HAL_GPIO_Init+0x1ee>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e002      	b.n	8004b8e <HAL_GPIO_Init+0x1ee>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e000      	b.n	8004b8e <HAL_GPIO_Init+0x1ee>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b90:	f002 0203 	and.w	r2, r2, #3
 8004b94:	0092      	lsls	r2, r2, #2
 8004b96:	4093      	lsls	r3, r2
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004b9e:	492f      	ldr	r1, [pc, #188]	; (8004c5c <HAL_GPIO_Init+0x2bc>)
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	089b      	lsrs	r3, r3, #2
 8004ba4:	3302      	adds	r3, #2
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d006      	beq.n	8004bc6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004bb8:	4b2d      	ldr	r3, [pc, #180]	; (8004c70 <HAL_GPIO_Init+0x2d0>)
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	492c      	ldr	r1, [pc, #176]	; (8004c70 <HAL_GPIO_Init+0x2d0>)
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	608b      	str	r3, [r1, #8]
 8004bc4:	e006      	b.n	8004bd4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004bc6:	4b2a      	ldr	r3, [pc, #168]	; (8004c70 <HAL_GPIO_Init+0x2d0>)
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	4928      	ldr	r1, [pc, #160]	; (8004c70 <HAL_GPIO_Init+0x2d0>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d006      	beq.n	8004bee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004be0:	4b23      	ldr	r3, [pc, #140]	; (8004c70 <HAL_GPIO_Init+0x2d0>)
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	4922      	ldr	r1, [pc, #136]	; (8004c70 <HAL_GPIO_Init+0x2d0>)
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60cb      	str	r3, [r1, #12]
 8004bec:	e006      	b.n	8004bfc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004bee:	4b20      	ldr	r3, [pc, #128]	; (8004c70 <HAL_GPIO_Init+0x2d0>)
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	491e      	ldr	r1, [pc, #120]	; (8004c70 <HAL_GPIO_Init+0x2d0>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d006      	beq.n	8004c16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004c08:	4b19      	ldr	r3, [pc, #100]	; (8004c70 <HAL_GPIO_Init+0x2d0>)
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	4918      	ldr	r1, [pc, #96]	; (8004c70 <HAL_GPIO_Init+0x2d0>)
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	604b      	str	r3, [r1, #4]
 8004c14:	e006      	b.n	8004c24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004c16:	4b16      	ldr	r3, [pc, #88]	; (8004c70 <HAL_GPIO_Init+0x2d0>)
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	4914      	ldr	r1, [pc, #80]	; (8004c70 <HAL_GPIO_Init+0x2d0>)
 8004c20:	4013      	ands	r3, r2
 8004c22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d021      	beq.n	8004c74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004c30:	4b0f      	ldr	r3, [pc, #60]	; (8004c70 <HAL_GPIO_Init+0x2d0>)
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	490e      	ldr	r1, [pc, #56]	; (8004c70 <HAL_GPIO_Init+0x2d0>)
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	600b      	str	r3, [r1, #0]
 8004c3c:	e021      	b.n	8004c82 <HAL_GPIO_Init+0x2e2>
 8004c3e:	bf00      	nop
 8004c40:	10320000 	.word	0x10320000
 8004c44:	10310000 	.word	0x10310000
 8004c48:	10220000 	.word	0x10220000
 8004c4c:	10210000 	.word	0x10210000
 8004c50:	10120000 	.word	0x10120000
 8004c54:	10110000 	.word	0x10110000
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	40010000 	.word	0x40010000
 8004c60:	40010800 	.word	0x40010800
 8004c64:	40010c00 	.word	0x40010c00
 8004c68:	40011000 	.word	0x40011000
 8004c6c:	40011400 	.word	0x40011400
 8004c70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004c74:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <HAL_GPIO_Init+0x304>)
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	43db      	mvns	r3, r3
 8004c7c:	4909      	ldr	r1, [pc, #36]	; (8004ca4 <HAL_GPIO_Init+0x304>)
 8004c7e:	4013      	ands	r3, r2
 8004c80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	3301      	adds	r3, #1
 8004c86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f47f ae8e 	bne.w	80049b4 <HAL_GPIO_Init+0x14>
  }
}
 8004c98:	bf00      	nop
 8004c9a:	bf00      	nop
 8004c9c:	372c      	adds	r7, #44	; 0x2c
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bc80      	pop	{r7}
 8004ca2:	4770      	bx	lr
 8004ca4:	40010400 	.word	0x40010400

08004ca8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	887b      	ldrh	r3, [r7, #2]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
 8004cc4:	e001      	b.n	8004cca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr

08004cd6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	460b      	mov	r3, r1
 8004ce0:	807b      	strh	r3, [r7, #2]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ce6:	787b      	ldrb	r3, [r7, #1]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cec:	887a      	ldrh	r2, [r7, #2]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004cf2:	e003      	b.n	8004cfc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004cf4:	887b      	ldrh	r3, [r7, #2]
 8004cf6:	041a      	lsls	r2, r3, #16
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	611a      	str	r2, [r3, #16]
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr
	...

08004d08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d12:	4b08      	ldr	r3, [pc, #32]	; (8004d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d14:	695a      	ldr	r2, [r3, #20]
 8004d16:	88fb      	ldrh	r3, [r7, #6]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d006      	beq.n	8004d2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d1e:	4a05      	ldr	r2, [pc, #20]	; (8004d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d20:	88fb      	ldrh	r3, [r7, #6]
 8004d22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d24:	88fb      	ldrh	r3, [r7, #6]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 f806 	bl	8004d38 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d2c:	bf00      	nop
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40010400 	.word	0x40010400

08004d38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr

08004d4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e12b      	b.n	8004fb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7fe fa72 	bl	800325c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2224      	movs	r2, #36	; 0x24
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0201 	bic.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004db0:	f003 f9f2 	bl	8008198 <HAL_RCC_GetPCLK1Freq>
 8004db4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	4a81      	ldr	r2, [pc, #516]	; (8004fc0 <HAL_I2C_Init+0x274>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d807      	bhi.n	8004dd0 <HAL_I2C_Init+0x84>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4a80      	ldr	r2, [pc, #512]	; (8004fc4 <HAL_I2C_Init+0x278>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	bf94      	ite	ls
 8004dc8:	2301      	movls	r3, #1
 8004dca:	2300      	movhi	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	e006      	b.n	8004dde <HAL_I2C_Init+0x92>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4a7d      	ldr	r2, [pc, #500]	; (8004fc8 <HAL_I2C_Init+0x27c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	bf94      	ite	ls
 8004dd8:	2301      	movls	r3, #1
 8004dda:	2300      	movhi	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e0e7      	b.n	8004fb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4a78      	ldr	r2, [pc, #480]	; (8004fcc <HAL_I2C_Init+0x280>)
 8004dea:	fba2 2303 	umull	r2, r3, r2, r3
 8004dee:	0c9b      	lsrs	r3, r3, #18
 8004df0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	4a6a      	ldr	r2, [pc, #424]	; (8004fc0 <HAL_I2C_Init+0x274>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d802      	bhi.n	8004e20 <HAL_I2C_Init+0xd4>
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	e009      	b.n	8004e34 <HAL_I2C_Init+0xe8>
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e26:	fb02 f303 	mul.w	r3, r2, r3
 8004e2a:	4a69      	ldr	r2, [pc, #420]	; (8004fd0 <HAL_I2C_Init+0x284>)
 8004e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e30:	099b      	lsrs	r3, r3, #6
 8004e32:	3301      	adds	r3, #1
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6812      	ldr	r2, [r2, #0]
 8004e38:	430b      	orrs	r3, r1
 8004e3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	495c      	ldr	r1, [pc, #368]	; (8004fc0 <HAL_I2C_Init+0x274>)
 8004e50:	428b      	cmp	r3, r1
 8004e52:	d819      	bhi.n	8004e88 <HAL_I2C_Init+0x13c>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	1e59      	subs	r1, r3, #1
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e62:	1c59      	adds	r1, r3, #1
 8004e64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e68:	400b      	ands	r3, r1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <HAL_I2C_Init+0x138>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1e59      	subs	r1, r3, #1
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e82:	e051      	b.n	8004f28 <HAL_I2C_Init+0x1dc>
 8004e84:	2304      	movs	r3, #4
 8004e86:	e04f      	b.n	8004f28 <HAL_I2C_Init+0x1dc>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d111      	bne.n	8004eb4 <HAL_I2C_Init+0x168>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	1e58      	subs	r0, r3, #1
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6859      	ldr	r1, [r3, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	440b      	add	r3, r1
 8004e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bf0c      	ite	eq
 8004eac:	2301      	moveq	r3, #1
 8004eae:	2300      	movne	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	e012      	b.n	8004eda <HAL_I2C_Init+0x18e>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	1e58      	subs	r0, r3, #1
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6859      	ldr	r1, [r3, #4]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	0099      	lsls	r1, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004eca:	3301      	adds	r3, #1
 8004ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	bf0c      	ite	eq
 8004ed4:	2301      	moveq	r3, #1
 8004ed6:	2300      	movne	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <HAL_I2C_Init+0x196>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e022      	b.n	8004f28 <HAL_I2C_Init+0x1dc>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10e      	bne.n	8004f08 <HAL_I2C_Init+0x1bc>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	1e58      	subs	r0, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6859      	ldr	r1, [r3, #4]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	440b      	add	r3, r1
 8004ef8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004efc:	3301      	adds	r3, #1
 8004efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f06:	e00f      	b.n	8004f28 <HAL_I2C_Init+0x1dc>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	1e58      	subs	r0, r3, #1
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6859      	ldr	r1, [r3, #4]
 8004f10:	460b      	mov	r3, r1
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	0099      	lsls	r1, r3, #2
 8004f18:	440b      	add	r3, r1
 8004f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f1e:	3301      	adds	r3, #1
 8004f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	6809      	ldr	r1, [r1, #0]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69da      	ldr	r2, [r3, #28]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	431a      	orrs	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6911      	ldr	r1, [r2, #16]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	68d2      	ldr	r2, [r2, #12]
 8004f62:	4311      	orrs	r1, r2
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6812      	ldr	r2, [r2, #0]
 8004f68:	430b      	orrs	r3, r1
 8004f6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0201 	orr.w	r2, r2, #1
 8004f96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	000186a0 	.word	0x000186a0
 8004fc4:	001e847f 	.word	0x001e847f
 8004fc8:	003d08ff 	.word	0x003d08ff
 8004fcc:	431bde83 	.word	0x431bde83
 8004fd0:	10624dd3 	.word	0x10624dd3

08004fd4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe6:	2b80      	cmp	r3, #128	; 0x80
 8004fe8:	d103      	bne.n	8004ff2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	611a      	str	r2, [r3, #16]
  }
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr

08004ffc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af02      	add	r7, sp, #8
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	607a      	str	r2, [r7, #4]
 8005006:	461a      	mov	r2, r3
 8005008:	460b      	mov	r3, r1
 800500a:	817b      	strh	r3, [r7, #10]
 800500c:	4613      	mov	r3, r2
 800500e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005010:	f7fe fce8 	bl	80039e4 <HAL_GetTick>
 8005014:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b20      	cmp	r3, #32
 8005020:	f040 80e0 	bne.w	80051e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	2319      	movs	r3, #25
 800502a:	2201      	movs	r2, #1
 800502c:	4970      	ldr	r1, [pc, #448]	; (80051f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f002 fa66 	bl	8007500 <I2C_WaitOnFlagUntilTimeout>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800503a:	2302      	movs	r3, #2
 800503c:	e0d3      	b.n	80051e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_I2C_Master_Transmit+0x50>
 8005048:	2302      	movs	r3, #2
 800504a:	e0cc      	b.n	80051e6 <HAL_I2C_Master_Transmit+0x1ea>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b01      	cmp	r3, #1
 8005060:	d007      	beq.n	8005072 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 0201 	orr.w	r2, r2, #1
 8005070:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005080:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2221      	movs	r2, #33	; 0x21
 8005086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2210      	movs	r2, #16
 800508e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	893a      	ldrh	r2, [r7, #8]
 80050a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4a50      	ldr	r2, [pc, #320]	; (80051f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80050b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80050b4:	8979      	ldrh	r1, [r7, #10]
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	6a3a      	ldr	r2, [r7, #32]
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f002 f828 	bl	8007110 <I2C_MasterRequestWrite>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e08d      	b.n	80051e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ca:	2300      	movs	r3, #0
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	613b      	str	r3, [r7, #16]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	613b      	str	r3, [r7, #16]
 80050de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80050e0:	e066      	b.n	80051b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	6a39      	ldr	r1, [r7, #32]
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f002 fb24 	bl	8007734 <I2C_WaitOnTXEFlagUntilTimeout>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00d      	beq.n	800510e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d107      	bne.n	800510a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005108:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e06b      	b.n	80051e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	781a      	ldrb	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005136:	3b01      	subs	r3, #1
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b04      	cmp	r3, #4
 800514a:	d11b      	bne.n	8005184 <HAL_I2C_Master_Transmit+0x188>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005150:	2b00      	cmp	r3, #0
 8005152:	d017      	beq.n	8005184 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	781a      	ldrb	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516e:	b29b      	uxth	r3, r3
 8005170:	3b01      	subs	r3, #1
 8005172:	b29a      	uxth	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	6a39      	ldr	r1, [r7, #32]
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f002 fb1b 	bl	80077c4 <I2C_WaitOnBTFFlagUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00d      	beq.n	80051b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	2b04      	cmp	r3, #4
 800519a:	d107      	bne.n	80051ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e01a      	b.n	80051e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d194      	bne.n	80050e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	e000      	b.n	80051e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80051e4:	2302      	movs	r3, #2
  }
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	00100002 	.word	0x00100002
 80051f4:	ffff0000 	.word	0xffff0000

080051f8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08c      	sub	sp, #48	; 0x30
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	607a      	str	r2, [r7, #4]
 8005202:	461a      	mov	r2, r3
 8005204:	460b      	mov	r3, r1
 8005206:	817b      	strh	r3, [r7, #10]
 8005208:	4613      	mov	r3, r2
 800520a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005210:	f7fe fbe8 	bl	80039e4 <HAL_GetTick>
 8005214:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b20      	cmp	r3, #32
 8005220:	f040 824b 	bne.w	80056ba <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	2319      	movs	r3, #25
 800522a:	2201      	movs	r2, #1
 800522c:	497f      	ldr	r1, [pc, #508]	; (800542c <HAL_I2C_Master_Receive+0x234>)
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f002 f966 	bl	8007500 <I2C_WaitOnFlagUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800523a:	2302      	movs	r3, #2
 800523c:	e23e      	b.n	80056bc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_I2C_Master_Receive+0x54>
 8005248:	2302      	movs	r3, #2
 800524a:	e237      	b.n	80056bc <HAL_I2C_Master_Receive+0x4c4>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b01      	cmp	r3, #1
 8005260:	d007      	beq.n	8005272 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0201 	orr.w	r2, r2, #1
 8005270:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005280:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2222      	movs	r2, #34	; 0x22
 8005286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2210      	movs	r2, #16
 800528e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	893a      	ldrh	r2, [r7, #8]
 80052a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	4a5f      	ldr	r2, [pc, #380]	; (8005430 <HAL_I2C_Master_Receive+0x238>)
 80052b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80052b4:	8979      	ldrh	r1, [r7, #10]
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f001 ffaa 	bl	8007214 <I2C_MasterRequestRead>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e1f8      	b.n	80056bc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d113      	bne.n	80052fa <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d2:	2300      	movs	r3, #0
 80052d4:	61fb      	str	r3, [r7, #28]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	61fb      	str	r3, [r7, #28]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	61fb      	str	r3, [r7, #28]
 80052e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	e1cc      	b.n	8005694 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d11e      	bne.n	8005340 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005310:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005312:	b672      	cpsid	i
}
 8005314:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005316:	2300      	movs	r3, #0
 8005318:	61bb      	str	r3, [r7, #24]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	61bb      	str	r3, [r7, #24]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	61bb      	str	r3, [r7, #24]
 800532a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800533a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800533c:	b662      	cpsie	i
}
 800533e:	e035      	b.n	80053ac <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005344:	2b02      	cmp	r3, #2
 8005346:	d11e      	bne.n	8005386 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005356:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005358:	b672      	cpsid	i
}
 800535a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800535c:	2300      	movs	r3, #0
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005380:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005382:	b662      	cpsie	i
}
 8005384:	e012      	b.n	80053ac <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005394:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005396:	2300      	movs	r3, #0
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	613b      	str	r3, [r7, #16]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	613b      	str	r3, [r7, #16]
 80053aa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80053ac:	e172      	b.n	8005694 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	f200 811f 	bhi.w	80055f6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d123      	bne.n	8005408 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f002 fa77 	bl	80078b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e173      	b.n	80056bc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691a      	ldr	r2, [r3, #16]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	1c5a      	adds	r2, r3, #1
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005406:	e145      	b.n	8005694 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800540c:	2b02      	cmp	r3, #2
 800540e:	d152      	bne.n	80054b6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005416:	2200      	movs	r2, #0
 8005418:	4906      	ldr	r1, [pc, #24]	; (8005434 <HAL_I2C_Master_Receive+0x23c>)
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f002 f870 	bl	8007500 <I2C_WaitOnFlagUntilTimeout>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d008      	beq.n	8005438 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e148      	b.n	80056bc <HAL_I2C_Master_Receive+0x4c4>
 800542a:	bf00      	nop
 800542c:	00100002 	.word	0x00100002
 8005430:	ffff0000 	.word	0xffff0000
 8005434:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005438:	b672      	cpsid	i
}
 800543a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800544a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691a      	ldr	r2, [r3, #16]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005468:	3b01      	subs	r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800547e:	b662      	cpsie	i
}
 8005480:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	691a      	ldr	r2, [r3, #16]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	b2d2      	uxtb	r2, r2
 800548e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549e:	3b01      	subs	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054b4:	e0ee      	b.n	8005694 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	2200      	movs	r2, #0
 80054be:	4981      	ldr	r1, [pc, #516]	; (80056c4 <HAL_I2C_Master_Receive+0x4cc>)
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f002 f81d 	bl	8007500 <I2C_WaitOnFlagUntilTimeout>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e0f5      	b.n	80056bc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80054e0:	b672      	cpsid	i
}
 80054e2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691a      	ldr	r2, [r3, #16]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550c:	b29b      	uxth	r3, r3
 800550e:	3b01      	subs	r3, #1
 8005510:	b29a      	uxth	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005516:	4b6c      	ldr	r3, [pc, #432]	; (80056c8 <HAL_I2C_Master_Receive+0x4d0>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	08db      	lsrs	r3, r3, #3
 800551c:	4a6b      	ldr	r2, [pc, #428]	; (80056cc <HAL_I2C_Master_Receive+0x4d4>)
 800551e:	fba2 2303 	umull	r2, r3, r2, r3
 8005522:	0a1a      	lsrs	r2, r3, #8
 8005524:	4613      	mov	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	00da      	lsls	r2, r3, #3
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	3b01      	subs	r3, #1
 8005534:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d118      	bne.n	800556e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2220      	movs	r2, #32
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	f043 0220 	orr.w	r2, r3, #32
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800555e:	b662      	cpsie	i
}
 8005560:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e0a6      	b.n	80056bc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b04      	cmp	r3, #4
 800557a:	d1d9      	bne.n	8005530 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800558a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691a      	ldr	r2, [r3, #16]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80055be:	b662      	cpsie	i
}
 80055c0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	691a      	ldr	r2, [r3, #16]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055de:	3b01      	subs	r3, #1
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055f4:	e04e      	b.n	8005694 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f002 f95c 	bl	80078b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e058      	b.n	80056bc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b04      	cmp	r3, #4
 8005648:	d124      	bne.n	8005694 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564e:	2b03      	cmp	r3, #3
 8005650:	d107      	bne.n	8005662 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005660:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567e:	3b01      	subs	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568a:	b29b      	uxth	r3, r3
 800568c:	3b01      	subs	r3, #1
 800568e:	b29a      	uxth	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005698:	2b00      	cmp	r3, #0
 800569a:	f47f ae88 	bne.w	80053ae <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	e000      	b.n	80056bc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80056ba:	2302      	movs	r3, #2
  }
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3728      	adds	r7, #40	; 0x28
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	00010004 	.word	0x00010004
 80056c8:	20000060 	.word	0x20000060
 80056cc:	14f8b589 	.word	0x14f8b589

080056d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b08a      	sub	sp, #40	; 0x28
 80056d4:	af02      	add	r7, sp, #8
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	607a      	str	r2, [r7, #4]
 80056da:	603b      	str	r3, [r7, #0]
 80056dc:	460b      	mov	r3, r1
 80056de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80056e0:	f7fe f980 	bl	80039e4 <HAL_GetTick>
 80056e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b20      	cmp	r3, #32
 80056f4:	f040 8111 	bne.w	800591a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	2319      	movs	r3, #25
 80056fe:	2201      	movs	r2, #1
 8005700:	4988      	ldr	r1, [pc, #544]	; (8005924 <HAL_I2C_IsDeviceReady+0x254>)
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f001 fefc 	bl	8007500 <I2C_WaitOnFlagUntilTimeout>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800570e:	2302      	movs	r3, #2
 8005710:	e104      	b.n	800591c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_I2C_IsDeviceReady+0x50>
 800571c:	2302      	movs	r3, #2
 800571e:	e0fd      	b.n	800591c <HAL_I2C_IsDeviceReady+0x24c>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b01      	cmp	r3, #1
 8005734:	d007      	beq.n	8005746 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f042 0201 	orr.w	r2, r2, #1
 8005744:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005754:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2224      	movs	r2, #36	; 0x24
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4a70      	ldr	r2, [pc, #448]	; (8005928 <HAL_I2C_IsDeviceReady+0x258>)
 8005768:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005778:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2200      	movs	r2, #0
 8005782:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f001 feba 	bl	8007500 <I2C_WaitOnFlagUntilTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00d      	beq.n	80057ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a0:	d103      	bne.n	80057aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057a8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e0b6      	b.n	800591c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057ae:	897b      	ldrh	r3, [r7, #10]
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	461a      	mov	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80057be:	f7fe f911 	bl	80039e4 <HAL_GetTick>
 80057c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	bf0c      	ite	eq
 80057d2:	2301      	moveq	r3, #1
 80057d4:	2300      	movne	r3, #0
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e8:	bf0c      	ite	eq
 80057ea:	2301      	moveq	r3, #1
 80057ec:	2300      	movne	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80057f2:	e025      	b.n	8005840 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057f4:	f7fe f8f6 	bl	80039e4 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d302      	bcc.n	800580a <HAL_I2C_IsDeviceReady+0x13a>
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d103      	bne.n	8005812 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	22a0      	movs	r2, #160	; 0xa0
 800580e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b02      	cmp	r3, #2
 800581e:	bf0c      	ite	eq
 8005820:	2301      	moveq	r3, #1
 8005822:	2300      	movne	r3, #0
 8005824:	b2db      	uxtb	r3, r3
 8005826:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005836:	bf0c      	ite	eq
 8005838:	2301      	moveq	r3, #1
 800583a:	2300      	movne	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2ba0      	cmp	r3, #160	; 0xa0
 800584a:	d005      	beq.n	8005858 <HAL_I2C_IsDeviceReady+0x188>
 800584c:	7dfb      	ldrb	r3, [r7, #23]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d102      	bne.n	8005858 <HAL_I2C_IsDeviceReady+0x188>
 8005852:	7dbb      	ldrb	r3, [r7, #22]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0cd      	beq.n	80057f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b02      	cmp	r3, #2
 800586c:	d129      	bne.n	80058c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800587c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800587e:	2300      	movs	r3, #0
 8005880:	613b      	str	r3, [r7, #16]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	613b      	str	r3, [r7, #16]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	613b      	str	r3, [r7, #16]
 8005892:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	2319      	movs	r3, #25
 800589a:	2201      	movs	r2, #1
 800589c:	4921      	ldr	r1, [pc, #132]	; (8005924 <HAL_I2C_IsDeviceReady+0x254>)
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f001 fe2e 	bl	8007500 <I2C_WaitOnFlagUntilTimeout>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e036      	b.n	800591c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2220      	movs	r2, #32
 80058b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	e02c      	b.n	800591c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	2319      	movs	r3, #25
 80058e2:	2201      	movs	r2, #1
 80058e4:	490f      	ldr	r1, [pc, #60]	; (8005924 <HAL_I2C_IsDeviceReady+0x254>)
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f001 fe0a 	bl	8007500 <I2C_WaitOnFlagUntilTimeout>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e012      	b.n	800591c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	3301      	adds	r3, #1
 80058fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	429a      	cmp	r2, r3
 8005902:	f4ff af32 	bcc.w	800576a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2220      	movs	r2, #32
 800590a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e000      	b.n	800591c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800591a:	2302      	movs	r3, #2
  }
}
 800591c:	4618      	mov	r0, r3
 800591e:	3720      	adds	r7, #32
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	00100002 	.word	0x00100002
 8005928:	ffff0000 	.word	0xffff0000

0800592c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b088      	sub	sp, #32
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800594c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005954:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005956:	7bfb      	ldrb	r3, [r7, #15]
 8005958:	2b10      	cmp	r3, #16
 800595a:	d003      	beq.n	8005964 <HAL_I2C_EV_IRQHandler+0x38>
 800595c:	7bfb      	ldrb	r3, [r7, #15]
 800595e:	2b40      	cmp	r3, #64	; 0x40
 8005960:	f040 80c1 	bne.w	8005ae6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10d      	bne.n	800599a <HAL_I2C_EV_IRQHandler+0x6e>
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005984:	d003      	beq.n	800598e <HAL_I2C_EV_IRQHandler+0x62>
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800598c:	d101      	bne.n	8005992 <HAL_I2C_EV_IRQHandler+0x66>
 800598e:	2301      	movs	r3, #1
 8005990:	e000      	b.n	8005994 <HAL_I2C_EV_IRQHandler+0x68>
 8005992:	2300      	movs	r3, #0
 8005994:	2b01      	cmp	r3, #1
 8005996:	f000 8132 	beq.w	8005bfe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00c      	beq.n	80059be <HAL_I2C_EV_IRQHandler+0x92>
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	0a5b      	lsrs	r3, r3, #9
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d006      	beq.n	80059be <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f002 f80c 	bl	80079ce <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fd85 	bl	80064c6 <I2C_Master_SB>
 80059bc:	e092      	b.n	8005ae4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	08db      	lsrs	r3, r3, #3
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d009      	beq.n	80059de <HAL_I2C_EV_IRQHandler+0xb2>
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	0a5b      	lsrs	r3, r3, #9
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fdfa 	bl	80065d0 <I2C_Master_ADD10>
 80059dc:	e082      	b.n	8005ae4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	085b      	lsrs	r3, r3, #1
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d009      	beq.n	80059fe <HAL_I2C_EV_IRQHandler+0xd2>
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	0a5b      	lsrs	r3, r3, #9
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fe13 	bl	8006622 <I2C_Master_ADDR>
 80059fc:	e072      	b.n	8005ae4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	089b      	lsrs	r3, r3, #2
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d03b      	beq.n	8005a82 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a18:	f000 80f3 	beq.w	8005c02 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	09db      	lsrs	r3, r3, #7
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00f      	beq.n	8005a48 <HAL_I2C_EV_IRQHandler+0x11c>
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	0a9b      	lsrs	r3, r3, #10
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d009      	beq.n	8005a48 <HAL_I2C_EV_IRQHandler+0x11c>
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	089b      	lsrs	r3, r3, #2
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d103      	bne.n	8005a48 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f9f1 	bl	8005e28 <I2C_MasterTransmit_TXE>
 8005a46:	e04d      	b.n	8005ae4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	089b      	lsrs	r3, r3, #2
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 80d6 	beq.w	8005c02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	0a5b      	lsrs	r3, r3, #9
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 80cf 	beq.w	8005c02 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005a64:	7bbb      	ldrb	r3, [r7, #14]
 8005a66:	2b21      	cmp	r3, #33	; 0x21
 8005a68:	d103      	bne.n	8005a72 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fa78 	bl	8005f60 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a70:	e0c7      	b.n	8005c02 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005a72:	7bfb      	ldrb	r3, [r7, #15]
 8005a74:	2b40      	cmp	r3, #64	; 0x40
 8005a76:	f040 80c4 	bne.w	8005c02 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fae6 	bl	800604c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a80:	e0bf      	b.n	8005c02 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a90:	f000 80b7 	beq.w	8005c02 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	099b      	lsrs	r3, r3, #6
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00f      	beq.n	8005ac0 <HAL_I2C_EV_IRQHandler+0x194>
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	0a9b      	lsrs	r3, r3, #10
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d009      	beq.n	8005ac0 <HAL_I2C_EV_IRQHandler+0x194>
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	089b      	lsrs	r3, r3, #2
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d103      	bne.n	8005ac0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 fb5f 	bl	800617c <I2C_MasterReceive_RXNE>
 8005abe:	e011      	b.n	8005ae4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	089b      	lsrs	r3, r3, #2
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 809a 	beq.w	8005c02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	0a5b      	lsrs	r3, r3, #9
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 8093 	beq.w	8005c02 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fc08 	bl	80062f2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ae2:	e08e      	b.n	8005c02 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005ae4:	e08d      	b.n	8005c02 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d004      	beq.n	8005af8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	61fb      	str	r3, [r7, #28]
 8005af6:	e007      	b.n	8005b08 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	085b      	lsrs	r3, r3, #1
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d012      	beq.n	8005b3a <HAL_I2C_EV_IRQHandler+0x20e>
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	0a5b      	lsrs	r3, r3, #9
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00c      	beq.n	8005b3a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005b30:	69b9      	ldr	r1, [r7, #24]
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 ffcc 	bl	8006ad0 <I2C_Slave_ADDR>
 8005b38:	e066      	b.n	8005c08 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	091b      	lsrs	r3, r3, #4
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d009      	beq.n	8005b5a <HAL_I2C_EV_IRQHandler+0x22e>
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	0a5b      	lsrs	r3, r3, #9
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f001 f806 	bl	8006b64 <I2C_Slave_STOPF>
 8005b58:	e056      	b.n	8005c08 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005b5a:	7bbb      	ldrb	r3, [r7, #14]
 8005b5c:	2b21      	cmp	r3, #33	; 0x21
 8005b5e:	d002      	beq.n	8005b66 <HAL_I2C_EV_IRQHandler+0x23a>
 8005b60:	7bbb      	ldrb	r3, [r7, #14]
 8005b62:	2b29      	cmp	r3, #41	; 0x29
 8005b64:	d125      	bne.n	8005bb2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	09db      	lsrs	r3, r3, #7
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00f      	beq.n	8005b92 <HAL_I2C_EV_IRQHandler+0x266>
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	0a9b      	lsrs	r3, r3, #10
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d009      	beq.n	8005b92 <HAL_I2C_EV_IRQHandler+0x266>
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	089b      	lsrs	r3, r3, #2
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d103      	bne.n	8005b92 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fee4 	bl	8006958 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b90:	e039      	b.n	8005c06 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	089b      	lsrs	r3, r3, #2
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d033      	beq.n	8005c06 <HAL_I2C_EV_IRQHandler+0x2da>
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	0a5b      	lsrs	r3, r3, #9
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d02d      	beq.n	8005c06 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 ff11 	bl	80069d2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005bb0:	e029      	b.n	8005c06 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	099b      	lsrs	r3, r3, #6
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00f      	beq.n	8005bde <HAL_I2C_EV_IRQHandler+0x2b2>
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	0a9b      	lsrs	r3, r3, #10
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d009      	beq.n	8005bde <HAL_I2C_EV_IRQHandler+0x2b2>
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	089b      	lsrs	r3, r3, #2
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d103      	bne.n	8005bde <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 ff1b 	bl	8006a12 <I2C_SlaveReceive_RXNE>
 8005bdc:	e014      	b.n	8005c08 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	089b      	lsrs	r3, r3, #2
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00e      	beq.n	8005c08 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	0a5b      	lsrs	r3, r3, #9
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d008      	beq.n	8005c08 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 ff49 	bl	8006a8e <I2C_SlaveReceive_BTF>
 8005bfc:	e004      	b.n	8005c08 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005bfe:	bf00      	nop
 8005c00:	e002      	b.n	8005c08 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c02:	bf00      	nop
 8005c04:	e000      	b.n	8005c08 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c06:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005c08:	3720      	adds	r7, #32
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b08a      	sub	sp, #40	; 0x28
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005c26:	2300      	movs	r3, #0
 8005c28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c30:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	0a1b      	lsrs	r3, r3, #8
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d016      	beq.n	8005c6c <HAL_I2C_ER_IRQHandler+0x5e>
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	0a1b      	lsrs	r3, r3, #8
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d010      	beq.n	8005c6c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	f043 0301 	orr.w	r3, r3, #1
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c5a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c6a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	0a5b      	lsrs	r3, r3, #9
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00e      	beq.n	8005c96 <HAL_I2C_ER_IRQHandler+0x88>
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	0a1b      	lsrs	r3, r3, #8
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d008      	beq.n	8005c96 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	f043 0302 	orr.w	r3, r3, #2
 8005c8a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005c94:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	0a9b      	lsrs	r3, r3, #10
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d03f      	beq.n	8005d22 <HAL_I2C_ER_IRQHandler+0x114>
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	0a1b      	lsrs	r3, r3, #8
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d039      	beq.n	8005d22 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8005cae:	7efb      	ldrb	r3, [r7, #27]
 8005cb0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005cc8:	7ebb      	ldrb	r3, [r7, #26]
 8005cca:	2b20      	cmp	r3, #32
 8005ccc:	d112      	bne.n	8005cf4 <HAL_I2C_ER_IRQHandler+0xe6>
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10f      	bne.n	8005cf4 <HAL_I2C_ER_IRQHandler+0xe6>
 8005cd4:	7cfb      	ldrb	r3, [r7, #19]
 8005cd6:	2b21      	cmp	r3, #33	; 0x21
 8005cd8:	d008      	beq.n	8005cec <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005cda:	7cfb      	ldrb	r3, [r7, #19]
 8005cdc:	2b29      	cmp	r3, #41	; 0x29
 8005cde:	d005      	beq.n	8005cec <HAL_I2C_ER_IRQHandler+0xde>
 8005ce0:	7cfb      	ldrb	r3, [r7, #19]
 8005ce2:	2b28      	cmp	r3, #40	; 0x28
 8005ce4:	d106      	bne.n	8005cf4 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b21      	cmp	r3, #33	; 0x21
 8005cea:	d103      	bne.n	8005cf4 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f001 f869 	bl	8006dc4 <I2C_Slave_AF>
 8005cf2:	e016      	b.n	8005d22 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cfc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	f043 0304 	orr.w	r3, r3, #4
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005d06:	7efb      	ldrb	r3, [r7, #27]
 8005d08:	2b10      	cmp	r3, #16
 8005d0a:	d002      	beq.n	8005d12 <HAL_I2C_ER_IRQHandler+0x104>
 8005d0c:	7efb      	ldrb	r3, [r7, #27]
 8005d0e:	2b40      	cmp	r3, #64	; 0x40
 8005d10:	d107      	bne.n	8005d22 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d20:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	0adb      	lsrs	r3, r3, #11
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00e      	beq.n	8005d4c <HAL_I2C_ER_IRQHandler+0x13e>
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	0a1b      	lsrs	r3, r3, #8
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d008      	beq.n	8005d4c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	f043 0308 	orr.w	r3, r3, #8
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005d4a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d008      	beq.n	8005d64 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f001 f8a4 	bl	8006eac <I2C_ITError>
  }
}
 8005d64:	bf00      	nop
 8005d66:	3728      	adds	r7, #40	; 0x28
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bc80      	pop	{r7}
 8005d7c:	4770      	bx	lr

08005d7e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bc80      	pop	{r7}
 8005d8e:	4770      	bx	lr

08005d90 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bc80      	pop	{r7}
 8005da0:	4770      	bx	lr

08005da2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bc80      	pop	{r7}
 8005db2:	4770      	bx	lr

08005db4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	70fb      	strb	r3, [r7, #3]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bc80      	pop	{r7}
 8005dcc:	4770      	bx	lr

08005dce <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b083      	sub	sp, #12
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bc80      	pop	{r7}
 8005dde:	4770      	bx	lr

08005de0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bc80      	pop	{r7}
 8005df0:	4770      	bx	lr

08005df2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005dfa:	bf00      	nop
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bc80      	pop	{r7}
 8005e02:	4770      	bx	lr

08005e04 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bc80      	pop	{r7}
 8005e14:	4770      	bx	lr

08005e16 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bc80      	pop	{r7}
 8005e26:	4770      	bx	lr

08005e28 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e36:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e3e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d150      	bne.n	8005ef0 <I2C_MasterTransmit_TXE+0xc8>
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
 8005e50:	2b21      	cmp	r3, #33	; 0x21
 8005e52:	d14d      	bne.n	8005ef0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	2b08      	cmp	r3, #8
 8005e58:	d01d      	beq.n	8005e96 <I2C_MasterTransmit_TXE+0x6e>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2b20      	cmp	r3, #32
 8005e5e:	d01a      	beq.n	8005e96 <I2C_MasterTransmit_TXE+0x6e>
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e66:	d016      	beq.n	8005e96 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e76:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2211      	movs	r2, #17
 8005e7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7ff ff6c 	bl	8005d6c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e94:	e060      	b.n	8005f58 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ea4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eb4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	d107      	bne.n	8005ee0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff ff81 	bl	8005de0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005ede:	e03b      	b.n	8005f58 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7ff ff3f 	bl	8005d6c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005eee:	e033      	b.n	8005f58 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
 8005ef2:	2b21      	cmp	r3, #33	; 0x21
 8005ef4:	d005      	beq.n	8005f02 <I2C_MasterTransmit_TXE+0xda>
 8005ef6:	7bbb      	ldrb	r3, [r7, #14]
 8005ef8:	2b40      	cmp	r3, #64	; 0x40
 8005efa:	d12d      	bne.n	8005f58 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	2b22      	cmp	r3, #34	; 0x22
 8005f00:	d12a      	bne.n	8005f58 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d108      	bne.n	8005f1e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f1a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005f1c:	e01c      	b.n	8005f58 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b40      	cmp	r3, #64	; 0x40
 8005f28:	d103      	bne.n	8005f32 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f88e 	bl	800604c <I2C_MemoryTransmit_TXE_BTF>
}
 8005f30:	e012      	b.n	8005f58 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	781a      	ldrb	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005f56:	e7ff      	b.n	8005f58 <I2C_MasterTransmit_TXE+0x130>
 8005f58:	bf00      	nop
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b21      	cmp	r3, #33	; 0x21
 8005f78:	d164      	bne.n	8006044 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d012      	beq.n	8005faa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	781a      	ldrb	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005fa8:	e04c      	b.n	8006044 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d01d      	beq.n	8005fec <I2C_MasterTransmit_BTF+0x8c>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	d01a      	beq.n	8005fec <I2C_MasterTransmit_BTF+0x8c>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005fbc:	d016      	beq.n	8005fec <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fcc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2211      	movs	r2, #17
 8005fd2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff fec1 	bl	8005d6c <HAL_I2C_MasterTxCpltCallback>
}
 8005fea:	e02b      	b.n	8006044 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ffa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800600a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2220      	movs	r2, #32
 8006016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d107      	bne.n	8006036 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff fed6 	bl	8005de0 <HAL_I2C_MemTxCpltCallback>
}
 8006034:	e006      	b.n	8006044 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7ff fe94 	bl	8005d6c <HAL_I2C_MasterTxCpltCallback>
}
 8006044:	bf00      	nop
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800605a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006060:	2b00      	cmp	r3, #0
 8006062:	d11d      	bne.n	80060a0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006068:	2b01      	cmp	r3, #1
 800606a:	d10b      	bne.n	8006084 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006070:	b2da      	uxtb	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800607c:	1c9a      	adds	r2, r3, #2
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8006082:	e077      	b.n	8006174 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006088:	b29b      	uxth	r3, r3
 800608a:	121b      	asrs	r3, r3, #8
 800608c:	b2da      	uxtb	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800609e:	e069      	b.n	8006174 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d10b      	bne.n	80060c0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80060be:	e059      	b.n	8006174 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d152      	bne.n	800616e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	2b22      	cmp	r3, #34	; 0x22
 80060cc:	d10d      	bne.n	80060ea <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060dc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80060e8:	e044      	b.n	8006174 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d015      	beq.n	8006120 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
 80060f6:	2b21      	cmp	r3, #33	; 0x21
 80060f8:	d112      	bne.n	8006120 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	781a      	ldrb	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800611e:	e029      	b.n	8006174 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006124:	b29b      	uxth	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d124      	bne.n	8006174 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800612a:	7bfb      	ldrb	r3, [r7, #15]
 800612c:	2b21      	cmp	r3, #33	; 0x21
 800612e:	d121      	bne.n	8006174 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800613e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800614e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2220      	movs	r2, #32
 800615a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7ff fe3a 	bl	8005de0 <HAL_I2C_MemTxCpltCallback>
}
 800616c:	e002      	b.n	8006174 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7fe ff30 	bl	8004fd4 <I2C_Flush_DR>
}
 8006174:	bf00      	nop
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b22      	cmp	r3, #34	; 0x22
 800618e:	f040 80ac 	bne.w	80062ea <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006196:	b29b      	uxth	r3, r3
 8006198:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2b03      	cmp	r3, #3
 800619e:	d921      	bls.n	80061e4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	691a      	ldr	r2, [r3, #16]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	b2d2      	uxtb	r2, r2
 80061ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061bc:	b29b      	uxth	r3, r3
 80061be:	3b01      	subs	r3, #1
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	2b03      	cmp	r3, #3
 80061ce:	f040 808c 	bne.w	80062ea <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80061e2:	e082      	b.n	80062ea <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d075      	beq.n	80062d8 <I2C_MasterReceive_RXNE+0x15c>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d002      	beq.n	80061f8 <I2C_MasterReceive_RXNE+0x7c>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d16f      	bne.n	80062d8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f001 fb2b 	bl	8007854 <I2C_WaitOnSTOPRequestThroughIT>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d142      	bne.n	800628a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006212:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006222:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	691a      	ldr	r2, [r3, #16]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	1c5a      	adds	r2, r3, #1
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006240:	b29b      	uxth	r3, r3
 8006242:	3b01      	subs	r3, #1
 8006244:	b29a      	uxth	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2220      	movs	r2, #32
 800624e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b40      	cmp	r3, #64	; 0x40
 800625c:	d10a      	bne.n	8006274 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff fdc0 	bl	8005df2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006272:	e03a      	b.n	80062ea <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2212      	movs	r2, #18
 8006280:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7ff fd7b 	bl	8005d7e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006288:	e02f      	b.n	80062ea <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006298:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	691a      	ldr	r2, [r3, #16]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff fd97 	bl	8005e04 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80062d6:	e008      	b.n	80062ea <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062e6:	605a      	str	r2, [r3, #4]
}
 80062e8:	e7ff      	b.n	80062ea <I2C_MasterReceive_RXNE+0x16e>
 80062ea:	bf00      	nop
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b084      	sub	sp, #16
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fe:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006304:	b29b      	uxth	r3, r3
 8006306:	2b04      	cmp	r3, #4
 8006308:	d11b      	bne.n	8006342 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006318:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	691a      	ldr	r2, [r3, #16]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006324:	b2d2      	uxtb	r2, r2
 8006326:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006336:	b29b      	uxth	r3, r3
 8006338:	3b01      	subs	r3, #1
 800633a:	b29a      	uxth	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006340:	e0bd      	b.n	80064be <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006346:	b29b      	uxth	r3, r3
 8006348:	2b03      	cmp	r3, #3
 800634a:	d129      	bne.n	80063a0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800635a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2b04      	cmp	r3, #4
 8006360:	d00a      	beq.n	8006378 <I2C_MasterReceive_BTF+0x86>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b02      	cmp	r3, #2
 8006366:	d007      	beq.n	8006378 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006376:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	691a      	ldr	r2, [r3, #16]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006394:	b29b      	uxth	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	b29a      	uxth	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800639e:	e08e      	b.n	80064be <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d176      	bne.n	8006498 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d002      	beq.n	80063b6 <I2C_MasterReceive_BTF+0xc4>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b10      	cmp	r3, #16
 80063b4:	d108      	bne.n	80063c8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	e019      	b.n	80063fc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d002      	beq.n	80063d4 <I2C_MasterReceive_BTF+0xe2>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d108      	bne.n	80063e6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	e00a      	b.n	80063fc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2b10      	cmp	r3, #16
 80063ea:	d007      	beq.n	80063fc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063fa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691a      	ldr	r2, [r3, #16]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006418:	b29b      	uxth	r3, r3
 800641a:	3b01      	subs	r3, #1
 800641c:	b29a      	uxth	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	691a      	ldr	r2, [r3, #16]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	b2d2      	uxtb	r2, r2
 800642e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643e:	b29b      	uxth	r3, r3
 8006440:	3b01      	subs	r3, #1
 8006442:	b29a      	uxth	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006456:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2220      	movs	r2, #32
 800645c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b40      	cmp	r3, #64	; 0x40
 800646a:	d10a      	bne.n	8006482 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7ff fcb9 	bl	8005df2 <HAL_I2C_MemRxCpltCallback>
}
 8006480:	e01d      	b.n	80064be <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2212      	movs	r2, #18
 800648e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7ff fc74 	bl	8005d7e <HAL_I2C_MasterRxCpltCallback>
}
 8006496:	e012      	b.n	80064be <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	691a      	ldr	r2, [r3, #16]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	3b01      	subs	r3, #1
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80064be:	bf00      	nop
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b40      	cmp	r3, #64	; 0x40
 80064d8:	d117      	bne.n	800650a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d109      	bne.n	80064f6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	461a      	mov	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064f2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80064f4:	e067      	b.n	80065c6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	f043 0301 	orr.w	r3, r3, #1
 8006500:	b2da      	uxtb	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	611a      	str	r2, [r3, #16]
}
 8006508:	e05d      	b.n	80065c6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006512:	d133      	bne.n	800657c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b21      	cmp	r3, #33	; 0x21
 800651e:	d109      	bne.n	8006534 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006524:	b2db      	uxtb	r3, r3
 8006526:	461a      	mov	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006530:	611a      	str	r2, [r3, #16]
 8006532:	e008      	b.n	8006546 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006538:	b2db      	uxtb	r3, r3
 800653a:	f043 0301 	orr.w	r3, r3, #1
 800653e:	b2da      	uxtb	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654a:	2b00      	cmp	r3, #0
 800654c:	d004      	beq.n	8006558 <I2C_Master_SB+0x92>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006554:	2b00      	cmp	r3, #0
 8006556:	d108      	bne.n	800656a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655c:	2b00      	cmp	r3, #0
 800655e:	d032      	beq.n	80065c6 <I2C_Master_SB+0x100>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006566:	2b00      	cmp	r3, #0
 8006568:	d02d      	beq.n	80065c6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006578:	605a      	str	r2, [r3, #4]
}
 800657a:	e024      	b.n	80065c6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10e      	bne.n	80065a2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006588:	b29b      	uxth	r3, r3
 800658a:	11db      	asrs	r3, r3, #7
 800658c:	b2db      	uxtb	r3, r3
 800658e:	f003 0306 	and.w	r3, r3, #6
 8006592:	b2db      	uxtb	r3, r3
 8006594:	f063 030f 	orn	r3, r3, #15
 8006598:	b2da      	uxtb	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	611a      	str	r2, [r3, #16]
}
 80065a0:	e011      	b.n	80065c6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d10d      	bne.n	80065c6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	11db      	asrs	r3, r3, #7
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	f003 0306 	and.w	r3, r3, #6
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	f063 030e 	orn	r3, r3, #14
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	611a      	str	r2, [r3, #16]
}
 80065c6:	bf00      	nop
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr

080065d0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d004      	beq.n	80065f6 <I2C_Master_ADD10+0x26>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d108      	bne.n	8006608 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00c      	beq.n	8006618 <I2C_Master_ADD10+0x48>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006604:	2b00      	cmp	r3, #0
 8006606:	d007      	beq.n	8006618 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006616:	605a      	str	r2, [r3, #4]
  }
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	bc80      	pop	{r7}
 8006620:	4770      	bx	lr

08006622 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006622:	b480      	push	{r7}
 8006624:	b091      	sub	sp, #68	; 0x44
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006630:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b22      	cmp	r3, #34	; 0x22
 800664a:	f040 8174 	bne.w	8006936 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10f      	bne.n	8006676 <I2C_Master_ADDR+0x54>
 8006656:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800665a:	2b40      	cmp	r3, #64	; 0x40
 800665c:	d10b      	bne.n	8006676 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800665e:	2300      	movs	r3, #0
 8006660:	633b      	str	r3, [r7, #48]	; 0x30
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	633b      	str	r3, [r7, #48]	; 0x30
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	633b      	str	r3, [r7, #48]	; 0x30
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	e16b      	b.n	800694e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800667a:	2b00      	cmp	r3, #0
 800667c:	d11d      	bne.n	80066ba <I2C_Master_ADDR+0x98>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006686:	d118      	bne.n	80066ba <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006688:	2300      	movs	r3, #0
 800668a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800669c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066ac:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	651a      	str	r2, [r3, #80]	; 0x50
 80066b8:	e149      	b.n	800694e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066be:	b29b      	uxth	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d113      	bne.n	80066ec <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066c4:	2300      	movs	r3, #0
 80066c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80066d8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	e120      	b.n	800692e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	f040 808a 	bne.w	800680c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80066f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066fe:	d137      	bne.n	8006770 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800670e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800671a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800671e:	d113      	bne.n	8006748 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800672e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006730:	2300      	movs	r3, #0
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	627b      	str	r3, [r7, #36]	; 0x24
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	e0f2      	b.n	800692e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006748:	2300      	movs	r3, #0
 800674a:	623b      	str	r3, [r7, #32]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	623b      	str	r3, [r7, #32]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	623b      	str	r3, [r7, #32]
 800675c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	e0de      	b.n	800692e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006772:	2b08      	cmp	r3, #8
 8006774:	d02e      	beq.n	80067d4 <I2C_Master_ADDR+0x1b2>
 8006776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006778:	2b20      	cmp	r3, #32
 800677a:	d02b      	beq.n	80067d4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800677c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677e:	2b12      	cmp	r3, #18
 8006780:	d102      	bne.n	8006788 <I2C_Master_ADDR+0x166>
 8006782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006784:	2b01      	cmp	r3, #1
 8006786:	d125      	bne.n	80067d4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678a:	2b04      	cmp	r3, #4
 800678c:	d00e      	beq.n	80067ac <I2C_Master_ADDR+0x18a>
 800678e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006790:	2b02      	cmp	r3, #2
 8006792:	d00b      	beq.n	80067ac <I2C_Master_ADDR+0x18a>
 8006794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006796:	2b10      	cmp	r3, #16
 8006798:	d008      	beq.n	80067ac <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	e007      	b.n	80067bc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067ba:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067bc:	2300      	movs	r3, #0
 80067be:	61fb      	str	r3, [r7, #28]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	61fb      	str	r3, [r7, #28]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	61fb      	str	r3, [r7, #28]
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	e0ac      	b.n	800692e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067e4:	2300      	movs	r3, #0
 80067e6:	61bb      	str	r3, [r7, #24]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	61bb      	str	r3, [r7, #24]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	61bb      	str	r3, [r7, #24]
 80067f8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	e090      	b.n	800692e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b02      	cmp	r3, #2
 8006814:	d158      	bne.n	80068c8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006818:	2b04      	cmp	r3, #4
 800681a:	d021      	beq.n	8006860 <I2C_Master_ADDR+0x23e>
 800681c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681e:	2b02      	cmp	r3, #2
 8006820:	d01e      	beq.n	8006860 <I2C_Master_ADDR+0x23e>
 8006822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006824:	2b10      	cmp	r3, #16
 8006826:	d01b      	beq.n	8006860 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006836:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006838:	2300      	movs	r3, #0
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	617b      	str	r3, [r7, #20]
 800684c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	e012      	b.n	8006886 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800686e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006870:	2300      	movs	r3, #0
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	613b      	str	r3, [r7, #16]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	613b      	str	r3, [r7, #16]
 8006884:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006894:	d14b      	bne.n	800692e <I2C_Master_ADDR+0x30c>
 8006896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006898:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800689c:	d00b      	beq.n	80068b6 <I2C_Master_ADDR+0x294>
 800689e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d008      	beq.n	80068b6 <I2C_Master_ADDR+0x294>
 80068a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a6:	2b08      	cmp	r3, #8
 80068a8:	d005      	beq.n	80068b6 <I2C_Master_ADDR+0x294>
 80068aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ac:	2b10      	cmp	r3, #16
 80068ae:	d002      	beq.n	80068b6 <I2C_Master_ADDR+0x294>
 80068b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b2:	2b20      	cmp	r3, #32
 80068b4:	d13b      	bne.n	800692e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068c4:	605a      	str	r2, [r3, #4]
 80068c6:	e032      	b.n	800692e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068d6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068e6:	d117      	bne.n	8006918 <I2C_Master_ADDR+0x2f6>
 80068e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068ee:	d00b      	beq.n	8006908 <I2C_Master_ADDR+0x2e6>
 80068f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d008      	beq.n	8006908 <I2C_Master_ADDR+0x2e6>
 80068f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d005      	beq.n	8006908 <I2C_Master_ADDR+0x2e6>
 80068fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fe:	2b10      	cmp	r3, #16
 8006900:	d002      	beq.n	8006908 <I2C_Master_ADDR+0x2e6>
 8006902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006904:	2b20      	cmp	r3, #32
 8006906:	d107      	bne.n	8006918 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006916:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006918:	2300      	movs	r3, #0
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	60fb      	str	r3, [r7, #12]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006934:	e00b      	b.n	800694e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006936:	2300      	movs	r3, #0
 8006938:	60bb      	str	r3, [r7, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	60bb      	str	r3, [r7, #8]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	60bb      	str	r3, [r7, #8]
 800694a:	68bb      	ldr	r3, [r7, #8]
}
 800694c:	e7ff      	b.n	800694e <I2C_Master_ADDR+0x32c>
 800694e:	bf00      	nop
 8006950:	3744      	adds	r7, #68	; 0x44
 8006952:	46bd      	mov	sp, r7
 8006954:	bc80      	pop	{r7}
 8006956:	4770      	bx	lr

08006958 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006966:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696c:	b29b      	uxth	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d02b      	beq.n	80069ca <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006976:	781a      	ldrb	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698c:	b29b      	uxth	r3, r3
 800698e:	3b01      	subs	r3, #1
 8006990:	b29a      	uxth	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699a:	b29b      	uxth	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	d114      	bne.n	80069ca <I2C_SlaveTransmit_TXE+0x72>
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
 80069a2:	2b29      	cmp	r3, #41	; 0x29
 80069a4:	d111      	bne.n	80069ca <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069b4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2221      	movs	r2, #33	; 0x21
 80069ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2228      	movs	r2, #40	; 0x28
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7ff f9e3 	bl	8005d90 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80069ca:	bf00      	nop
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069de:	b29b      	uxth	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d011      	beq.n	8006a08 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	781a      	ldrb	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f4:	1c5a      	adds	r2, r3, #1
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	3b01      	subs	r3, #1
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr

08006a12 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b084      	sub	sp, #16
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a20:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d02c      	beq.n	8006a86 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	691a      	ldr	r2, [r3, #16]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	b2d2      	uxtb	r2, r2
 8006a38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d114      	bne.n	8006a86 <I2C_SlaveReceive_RXNE+0x74>
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
 8006a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8006a60:	d111      	bne.n	8006a86 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a70:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2222      	movs	r2, #34	; 0x22
 8006a76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2228      	movs	r2, #40	; 0x28
 8006a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff f98e 	bl	8005da2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006a86:	bf00      	nop
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b083      	sub	sp, #12
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d012      	beq.n	8006ac6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	691a      	ldr	r2, [r3, #16]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aaa:	b2d2      	uxtb	r2, r2
 8006aac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	1c5a      	adds	r2, r3, #1
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006ac6:	bf00      	nop
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bc80      	pop	{r7}
 8006ace:	4770      	bx	lr

08006ad0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006ada:	2300      	movs	r3, #0
 8006adc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006aea:	2b28      	cmp	r3, #40	; 0x28
 8006aec:	d127      	bne.n	8006b3e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006afc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	089b      	lsrs	r3, r3, #2
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	09db      	lsrs	r3, r3, #7
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d103      	bne.n	8006b22 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	81bb      	strh	r3, [r7, #12]
 8006b20:	e002      	b.n	8006b28 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006b30:	89ba      	ldrh	r2, [r7, #12]
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
 8006b34:	4619      	mov	r1, r3
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7ff f93c 	bl	8005db4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006b3c:	e00e      	b.n	8006b5c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60bb      	str	r3, [r7, #8]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	60bb      	str	r3, [r7, #8]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	60bb      	str	r3, [r7, #8]
 8006b52:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006b5c:	bf00      	nop
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b72:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b82:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006b84:	2300      	movs	r3, #0
 8006b86:	60bb      	str	r3, [r7, #8]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	60bb      	str	r3, [r7, #8]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f042 0201 	orr.w	r2, r2, #1
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bb0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bc0:	d172      	bne.n	8006ca8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006bc2:	7bfb      	ldrb	r3, [r7, #15]
 8006bc4:	2b22      	cmp	r3, #34	; 0x22
 8006bc6:	d002      	beq.n	8006bce <I2C_Slave_STOPF+0x6a>
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
 8006bca:	2b2a      	cmp	r3, #42	; 0x2a
 8006bcc:	d135      	bne.n	8006c3a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d005      	beq.n	8006bf2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bea:	f043 0204 	orr.w	r2, r3, #4
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fd fe90 	bl	800492c <HAL_DMA_GetState>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d049      	beq.n	8006ca6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c16:	4a69      	ldr	r2, [pc, #420]	; (8006dbc <I2C_Slave_STOPF+0x258>)
 8006c18:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fd fd06 	bl	8004630 <HAL_DMA_Abort_IT>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d03d      	beq.n	8006ca6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c34:	4610      	mov	r0, r2
 8006c36:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c38:	e035      	b.n	8006ca6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d005      	beq.n	8006c5e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	f043 0204 	orr.w	r2, r3, #4
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fd fe5a 	bl	800492c <HAL_DMA_GetState>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d014      	beq.n	8006ca8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c82:	4a4e      	ldr	r2, [pc, #312]	; (8006dbc <I2C_Slave_STOPF+0x258>)
 8006c84:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fd fcd0 	bl	8004630 <HAL_DMA_Abort_IT>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d008      	beq.n	8006ca8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	4798      	blx	r3
 8006ca4:	e000      	b.n	8006ca8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ca6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d03e      	beq.n	8006d30 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d112      	bne.n	8006ce6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	691a      	ldr	r2, [r3, #16]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cca:	b2d2      	uxtb	r2, r2
 8006ccc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	1c5a      	adds	r2, r3, #1
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf0:	2b40      	cmp	r3, #64	; 0x40
 8006cf2:	d112      	bne.n	8006d1a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	691a      	ldr	r2, [r3, #16]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	b2d2      	uxtb	r2, r2
 8006d00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	3b01      	subs	r3, #1
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d28:	f043 0204 	orr.w	r2, r3, #4
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f8b7 	bl	8006eac <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006d3e:	e039      	b.n	8006db4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	2b2a      	cmp	r3, #42	; 0x2a
 8006d44:	d109      	bne.n	8006d5a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2228      	movs	r2, #40	; 0x28
 8006d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f7ff f824 	bl	8005da2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b28      	cmp	r3, #40	; 0x28
 8006d64:	d111      	bne.n	8006d8a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a15      	ldr	r2, [pc, #84]	; (8006dc0 <I2C_Slave_STOPF+0x25c>)
 8006d6a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff f823 	bl	8005dce <HAL_I2C_ListenCpltCallback>
}
 8006d88:	e014      	b.n	8006db4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8e:	2b22      	cmp	r3, #34	; 0x22
 8006d90:	d002      	beq.n	8006d98 <I2C_Slave_STOPF+0x234>
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
 8006d94:	2b22      	cmp	r3, #34	; 0x22
 8006d96:	d10d      	bne.n	8006db4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7fe fff7 	bl	8005da2 <HAL_I2C_SlaveRxCpltCallback>
}
 8006db4:	bf00      	nop
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	080073b1 	.word	0x080073b1
 8006dc0:	ffff0000 	.word	0xffff0000

08006dc4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2b08      	cmp	r3, #8
 8006dde:	d002      	beq.n	8006de6 <I2C_Slave_AF+0x22>
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2b20      	cmp	r3, #32
 8006de4:	d129      	bne.n	8006e3a <I2C_Slave_AF+0x76>
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	2b28      	cmp	r3, #40	; 0x28
 8006dea:	d126      	bne.n	8006e3a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a2e      	ldr	r2, [pc, #184]	; (8006ea8 <I2C_Slave_AF+0xe4>)
 8006df0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e00:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e0a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e1a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2220      	movs	r2, #32
 8006e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7fe ffcb 	bl	8005dce <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006e38:	e031      	b.n	8006e9e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	2b21      	cmp	r3, #33	; 0x21
 8006e3e:	d129      	bne.n	8006e94 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a19      	ldr	r2, [pc, #100]	; (8006ea8 <I2C_Slave_AF+0xe4>)
 8006e44:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2221      	movs	r2, #33	; 0x21
 8006e4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e6a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e74:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e84:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7fe f8a4 	bl	8004fd4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7fe ff7f 	bl	8005d90 <HAL_I2C_SlaveTxCpltCallback>
}
 8006e92:	e004      	b.n	8006e9e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e9c:	615a      	str	r2, [r3, #20]
}
 8006e9e:	bf00      	nop
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	ffff0000 	.word	0xffff0000

08006eac <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ec2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006ec4:	7bbb      	ldrb	r3, [r7, #14]
 8006ec6:	2b10      	cmp	r3, #16
 8006ec8:	d002      	beq.n	8006ed0 <I2C_ITError+0x24>
 8006eca:	7bbb      	ldrb	r3, [r7, #14]
 8006ecc:	2b40      	cmp	r3, #64	; 0x40
 8006ece:	d10a      	bne.n	8006ee6 <I2C_ITError+0x3a>
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
 8006ed2:	2b22      	cmp	r3, #34	; 0x22
 8006ed4:	d107      	bne.n	8006ee6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ee4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
 8006ee8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006eec:	2b28      	cmp	r3, #40	; 0x28
 8006eee:	d107      	bne.n	8006f00 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2228      	movs	r2, #40	; 0x28
 8006efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006efe:	e015      	b.n	8006f2c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f0e:	d00a      	beq.n	8006f26 <I2C_ITError+0x7a>
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	2b60      	cmp	r3, #96	; 0x60
 8006f14:	d007      	beq.n	8006f26 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2220      	movs	r2, #32
 8006f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f3a:	d162      	bne.n	8007002 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f4a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d020      	beq.n	8006f9c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5e:	4a6a      	ldr	r2, [pc, #424]	; (8007108 <I2C_ITError+0x25c>)
 8006f60:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fd fb62 	bl	8004630 <HAL_DMA_Abort_IT>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 8089 	beq.w	8007086 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 0201 	bic.w	r2, r2, #1
 8006f82:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2220      	movs	r2, #32
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f96:	4610      	mov	r0, r2
 8006f98:	4798      	blx	r3
 8006f9a:	e074      	b.n	8007086 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa0:	4a59      	ldr	r2, [pc, #356]	; (8007108 <I2C_ITError+0x25c>)
 8006fa2:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7fd fb41 	bl	8004630 <HAL_DMA_Abort_IT>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d068      	beq.n	8007086 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fbe:	2b40      	cmp	r3, #64	; 0x40
 8006fc0:	d10b      	bne.n	8006fda <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	691a      	ldr	r2, [r3, #16]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fcc:	b2d2      	uxtb	r2, r2
 8006fce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 0201 	bic.w	r2, r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	4798      	blx	r3
 8007000:	e041      	b.n	8007086 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b60      	cmp	r3, #96	; 0x60
 800700c:	d125      	bne.n	800705a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2220      	movs	r2, #32
 8007012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007026:	2b40      	cmp	r3, #64	; 0x40
 8007028:	d10b      	bne.n	8007042 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	691a      	ldr	r2, [r3, #16]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	b2d2      	uxtb	r2, r2
 8007036:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703c:	1c5a      	adds	r2, r3, #1
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0201 	bic.w	r2, r2, #1
 8007050:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7fe fedf 	bl	8005e16 <HAL_I2C_AbortCpltCallback>
 8007058:	e015      	b.n	8007086 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007064:	2b40      	cmp	r3, #64	; 0x40
 8007066:	d10b      	bne.n	8007080 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	691a      	ldr	r2, [r3, #16]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	1c5a      	adds	r2, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7fe febf 	bl	8005e04 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10e      	bne.n	80070b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800709c:	2b00      	cmp	r3, #0
 800709e:	d109      	bne.n	80070b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d104      	bne.n	80070b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d007      	beq.n	80070c4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070c2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ca:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b04      	cmp	r3, #4
 80070d6:	d113      	bne.n	8007100 <I2C_ITError+0x254>
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
 80070da:	2b28      	cmp	r3, #40	; 0x28
 80070dc:	d110      	bne.n	8007100 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a0a      	ldr	r2, [pc, #40]	; (800710c <I2C_ITError+0x260>)
 80070e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2220      	movs	r2, #32
 80070ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7fe fe67 	bl	8005dce <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007100:	bf00      	nop
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	080073b1 	.word	0x080073b1
 800710c:	ffff0000 	.word	0xffff0000

08007110 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b088      	sub	sp, #32
 8007114:	af02      	add	r7, sp, #8
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	607a      	str	r2, [r7, #4]
 800711a:	603b      	str	r3, [r7, #0]
 800711c:	460b      	mov	r3, r1
 800711e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007124:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2b08      	cmp	r3, #8
 800712a:	d006      	beq.n	800713a <I2C_MasterRequestWrite+0x2a>
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d003      	beq.n	800713a <I2C_MasterRequestWrite+0x2a>
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007138:	d108      	bne.n	800714c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	e00b      	b.n	8007164 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007150:	2b12      	cmp	r3, #18
 8007152:	d107      	bne.n	8007164 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007162:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f000 f9c5 	bl	8007500 <I2C_WaitOnFlagUntilTimeout>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00d      	beq.n	8007198 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800718a:	d103      	bne.n	8007194 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007192:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e035      	b.n	8007204 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071a0:	d108      	bne.n	80071b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071a2:	897b      	ldrh	r3, [r7, #10]
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	461a      	mov	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80071b0:	611a      	str	r2, [r3, #16]
 80071b2:	e01b      	b.n	80071ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80071b4:	897b      	ldrh	r3, [r7, #10]
 80071b6:	11db      	asrs	r3, r3, #7
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	f003 0306 	and.w	r3, r3, #6
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	f063 030f 	orn	r3, r3, #15
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	490e      	ldr	r1, [pc, #56]	; (800720c <I2C_MasterRequestWrite+0xfc>)
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f000 fa0e 	bl	80075f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d001      	beq.n	80071e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e010      	b.n	8007204 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80071e2:	897b      	ldrh	r3, [r7, #10]
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	4907      	ldr	r1, [pc, #28]	; (8007210 <I2C_MasterRequestWrite+0x100>)
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 f9fe 	bl	80075f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d001      	beq.n	8007202 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e000      	b.n	8007204 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3718      	adds	r7, #24
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	00010008 	.word	0x00010008
 8007210:	00010002 	.word	0x00010002

08007214 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b088      	sub	sp, #32
 8007218:	af02      	add	r7, sp, #8
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	607a      	str	r2, [r7, #4]
 800721e:	603b      	str	r3, [r7, #0]
 8007220:	460b      	mov	r3, r1
 8007222:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007228:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007238:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	2b08      	cmp	r3, #8
 800723e:	d006      	beq.n	800724e <I2C_MasterRequestRead+0x3a>
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d003      	beq.n	800724e <I2C_MasterRequestRead+0x3a>
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800724c:	d108      	bne.n	8007260 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	e00b      	b.n	8007278 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007264:	2b11      	cmp	r3, #17
 8007266:	d107      	bne.n	8007278 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007276:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 f93b 	bl	8007500 <I2C_WaitOnFlagUntilTimeout>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00d      	beq.n	80072ac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800729a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800729e:	d103      	bne.n	80072a8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e079      	b.n	80073a0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	691b      	ldr	r3, [r3, #16]
 80072b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072b4:	d108      	bne.n	80072c8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80072b6:	897b      	ldrh	r3, [r7, #10]
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	f043 0301 	orr.w	r3, r3, #1
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	611a      	str	r2, [r3, #16]
 80072c6:	e05f      	b.n	8007388 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80072c8:	897b      	ldrh	r3, [r7, #10]
 80072ca:	11db      	asrs	r3, r3, #7
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	f003 0306 	and.w	r3, r3, #6
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	f063 030f 	orn	r3, r3, #15
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	4930      	ldr	r1, [pc, #192]	; (80073a8 <I2C_MasterRequestRead+0x194>)
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f000 f984 	bl	80075f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e054      	b.n	80073a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80072f6:	897b      	ldrh	r3, [r7, #10]
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	4929      	ldr	r1, [pc, #164]	; (80073ac <I2C_MasterRequestRead+0x198>)
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f000 f974 	bl	80075f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e044      	b.n	80073a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007316:	2300      	movs	r3, #0
 8007318:	613b      	str	r3, [r7, #16]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	613b      	str	r3, [r7, #16]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	613b      	str	r3, [r7, #16]
 800732a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800733a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 f8d9 	bl	8007500 <I2C_WaitOnFlagUntilTimeout>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00d      	beq.n	8007370 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800735e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007362:	d103      	bne.n	800736c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800736a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e017      	b.n	80073a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007370:	897b      	ldrh	r3, [r7, #10]
 8007372:	11db      	asrs	r3, r3, #7
 8007374:	b2db      	uxtb	r3, r3
 8007376:	f003 0306 	and.w	r3, r3, #6
 800737a:	b2db      	uxtb	r3, r3
 800737c:	f063 030e 	orn	r3, r3, #14
 8007380:	b2da      	uxtb	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	4907      	ldr	r1, [pc, #28]	; (80073ac <I2C_MasterRequestRead+0x198>)
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f000 f930 	bl	80075f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e000      	b.n	80073a0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3718      	adds	r7, #24
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	00010008 	.word	0x00010008
 80073ac:	00010002 	.word	0x00010002

080073b0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073c8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80073ca:	4b4b      	ldr	r3, [pc, #300]	; (80074f8 <I2C_DMAAbort+0x148>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	08db      	lsrs	r3, r3, #3
 80073d0:	4a4a      	ldr	r2, [pc, #296]	; (80074fc <I2C_DMAAbort+0x14c>)
 80073d2:	fba2 2303 	umull	r2, r3, r2, r3
 80073d6:	0a1a      	lsrs	r2, r3, #8
 80073d8:	4613      	mov	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	00da      	lsls	r2, r3, #3
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d106      	bne.n	80073f8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	f043 0220 	orr.w	r2, r3, #32
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80073f6:	e00a      	b.n	800740e <I2C_DMAAbort+0x5e>
    }
    count--;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800740c:	d0ea      	beq.n	80073e4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741a:	2200      	movs	r2, #0
 800741c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007422:	2b00      	cmp	r3, #0
 8007424:	d003      	beq.n	800742e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742a:	2200      	movs	r2, #0
 800742c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800743c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2200      	movs	r2, #0
 8007442:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007448:	2b00      	cmp	r3, #0
 800744a:	d003      	beq.n	8007454 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007450:	2200      	movs	r2, #0
 8007452:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007460:	2200      	movs	r2, #0
 8007462:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0201 	bic.w	r2, r2, #1
 8007472:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b60      	cmp	r3, #96	; 0x60
 800747e:	d10e      	bne.n	800749e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	2220      	movs	r2, #32
 8007484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	2200      	movs	r2, #0
 8007494:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007496:	6978      	ldr	r0, [r7, #20]
 8007498:	f7fe fcbd 	bl	8005e16 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800749c:	e027      	b.n	80074ee <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800749e:	7cfb      	ldrb	r3, [r7, #19]
 80074a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80074a4:	2b28      	cmp	r3, #40	; 0x28
 80074a6:	d117      	bne.n	80074d8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f042 0201 	orr.w	r2, r2, #1
 80074b6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2200      	movs	r2, #0
 80074cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2228      	movs	r2, #40	; 0x28
 80074d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80074d6:	e007      	b.n	80074e8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	2220      	movs	r2, #32
 80074dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80074e8:	6978      	ldr	r0, [r7, #20]
 80074ea:	f7fe fc8b 	bl	8005e04 <HAL_I2C_ErrorCallback>
}
 80074ee:	bf00      	nop
 80074f0:	3718      	adds	r7, #24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20000060 	.word	0x20000060
 80074fc:	14f8b589 	.word	0x14f8b589

08007500 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	603b      	str	r3, [r7, #0]
 800750c:	4613      	mov	r3, r2
 800750e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007510:	e048      	b.n	80075a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007518:	d044      	beq.n	80075a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800751a:	f7fc fa63 	bl	80039e4 <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	429a      	cmp	r2, r3
 8007528:	d302      	bcc.n	8007530 <I2C_WaitOnFlagUntilTimeout+0x30>
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d139      	bne.n	80075a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	0c1b      	lsrs	r3, r3, #16
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b01      	cmp	r3, #1
 8007538:	d10d      	bne.n	8007556 <I2C_WaitOnFlagUntilTimeout+0x56>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	43da      	mvns	r2, r3
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	4013      	ands	r3, r2
 8007546:	b29b      	uxth	r3, r3
 8007548:	2b00      	cmp	r3, #0
 800754a:	bf0c      	ite	eq
 800754c:	2301      	moveq	r3, #1
 800754e:	2300      	movne	r3, #0
 8007550:	b2db      	uxtb	r3, r3
 8007552:	461a      	mov	r2, r3
 8007554:	e00c      	b.n	8007570 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	43da      	mvns	r2, r3
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	4013      	ands	r3, r2
 8007562:	b29b      	uxth	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	bf0c      	ite	eq
 8007568:	2301      	moveq	r3, #1
 800756a:	2300      	movne	r3, #0
 800756c:	b2db      	uxtb	r3, r3
 800756e:	461a      	mov	r2, r3
 8007570:	79fb      	ldrb	r3, [r7, #7]
 8007572:	429a      	cmp	r2, r3
 8007574:	d116      	bne.n	80075a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2220      	movs	r2, #32
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007590:	f043 0220 	orr.w	r2, r3, #32
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e023      	b.n	80075ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	0c1b      	lsrs	r3, r3, #16
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d10d      	bne.n	80075ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	43da      	mvns	r2, r3
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	4013      	ands	r3, r2
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	2b00      	cmp	r3, #0
 80075be:	bf0c      	ite	eq
 80075c0:	2301      	moveq	r3, #1
 80075c2:	2300      	movne	r3, #0
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	461a      	mov	r2, r3
 80075c8:	e00c      	b.n	80075e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	43da      	mvns	r2, r3
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	4013      	ands	r3, r2
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	bf0c      	ite	eq
 80075dc:	2301      	moveq	r3, #1
 80075de:	2300      	movne	r3, #0
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	461a      	mov	r2, r3
 80075e4:	79fb      	ldrb	r3, [r7, #7]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d093      	beq.n	8007512 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
 8007600:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007602:	e071      	b.n	80076e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800760e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007612:	d123      	bne.n	800765c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007622:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800762c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2220      	movs	r2, #32
 8007638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007648:	f043 0204 	orr.w	r2, r3, #4
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e067      	b.n	800772c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007662:	d041      	beq.n	80076e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007664:	f7fc f9be 	bl	80039e4 <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	429a      	cmp	r2, r3
 8007672:	d302      	bcc.n	800767a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d136      	bne.n	80076e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	0c1b      	lsrs	r3, r3, #16
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b01      	cmp	r3, #1
 8007682:	d10c      	bne.n	800769e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	43da      	mvns	r2, r3
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	4013      	ands	r3, r2
 8007690:	b29b      	uxth	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	bf14      	ite	ne
 8007696:	2301      	movne	r3, #1
 8007698:	2300      	moveq	r3, #0
 800769a:	b2db      	uxtb	r3, r3
 800769c:	e00b      	b.n	80076b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	43da      	mvns	r2, r3
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	4013      	ands	r3, r2
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	bf14      	ite	ne
 80076b0:	2301      	movne	r3, #1
 80076b2:	2300      	moveq	r3, #0
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d016      	beq.n	80076e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2220      	movs	r2, #32
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d4:	f043 0220 	orr.w	r2, r3, #32
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e021      	b.n	800772c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	0c1b      	lsrs	r3, r3, #16
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d10c      	bne.n	800770c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	695b      	ldr	r3, [r3, #20]
 80076f8:	43da      	mvns	r2, r3
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	4013      	ands	r3, r2
 80076fe:	b29b      	uxth	r3, r3
 8007700:	2b00      	cmp	r3, #0
 8007702:	bf14      	ite	ne
 8007704:	2301      	movne	r3, #1
 8007706:	2300      	moveq	r3, #0
 8007708:	b2db      	uxtb	r3, r3
 800770a:	e00b      	b.n	8007724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	43da      	mvns	r2, r3
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	4013      	ands	r3, r2
 8007718:	b29b      	uxth	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	bf14      	ite	ne
 800771e:	2301      	movne	r3, #1
 8007720:	2300      	moveq	r3, #0
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	f47f af6d 	bne.w	8007604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007740:	e034      	b.n	80077ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 f915 	bl	8007972 <I2C_IsAcknowledgeFailed>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e034      	b.n	80077bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007758:	d028      	beq.n	80077ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800775a:	f7fc f943 	bl	80039e4 <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	429a      	cmp	r2, r3
 8007768:	d302      	bcc.n	8007770 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d11d      	bne.n	80077ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777a:	2b80      	cmp	r3, #128	; 0x80
 800777c:	d016      	beq.n	80077ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2220      	movs	r2, #32
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007798:	f043 0220 	orr.w	r2, r3, #32
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e007      	b.n	80077bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b6:	2b80      	cmp	r3, #128	; 0x80
 80077b8:	d1c3      	bne.n	8007742 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80077d0:	e034      	b.n	800783c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f000 f8cd 	bl	8007972 <I2C_IsAcknowledgeFailed>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d001      	beq.n	80077e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e034      	b.n	800784c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e8:	d028      	beq.n	800783c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077ea:	f7fc f8fb 	bl	80039e4 <HAL_GetTick>
 80077ee:	4602      	mov	r2, r0
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d302      	bcc.n	8007800 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d11d      	bne.n	800783c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	f003 0304 	and.w	r3, r3, #4
 800780a:	2b04      	cmp	r3, #4
 800780c:	d016      	beq.n	800783c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2220      	movs	r2, #32
 8007818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007828:	f043 0220 	orr.w	r2, r3, #32
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e007      	b.n	800784c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	f003 0304 	and.w	r3, r3, #4
 8007846:	2b04      	cmp	r3, #4
 8007848:	d1c3      	bne.n	80077d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800785c:	2300      	movs	r3, #0
 800785e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007860:	4b13      	ldr	r3, [pc, #76]	; (80078b0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	08db      	lsrs	r3, r3, #3
 8007866:	4a13      	ldr	r2, [pc, #76]	; (80078b4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007868:	fba2 2303 	umull	r2, r3, r2, r3
 800786c:	0a1a      	lsrs	r2, r3, #8
 800786e:	4613      	mov	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	4413      	add	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3b01      	subs	r3, #1
 800787a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d107      	bne.n	8007892 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007886:	f043 0220 	orr.w	r2, r3, #32
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e008      	b.n	80078a4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800789c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078a0:	d0e9      	beq.n	8007876 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bc80      	pop	{r7}
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	20000060 	.word	0x20000060
 80078b4:	14f8b589 	.word	0x14f8b589

080078b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078c4:	e049      	b.n	800795a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	f003 0310 	and.w	r3, r3, #16
 80078d0:	2b10      	cmp	r3, #16
 80078d2:	d119      	bne.n	8007908 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f06f 0210 	mvn.w	r2, #16
 80078dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2220      	movs	r2, #32
 80078e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e030      	b.n	800796a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007908:	f7fc f86c 	bl	80039e4 <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	429a      	cmp	r2, r3
 8007916:	d302      	bcc.n	800791e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d11d      	bne.n	800795a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007928:	2b40      	cmp	r3, #64	; 0x40
 800792a:	d016      	beq.n	800795a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2220      	movs	r2, #32
 8007936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007946:	f043 0220 	orr.w	r2, r3, #32
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e007      	b.n	800796a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007964:	2b40      	cmp	r3, #64	; 0x40
 8007966:	d1ae      	bne.n	80078c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	695b      	ldr	r3, [r3, #20]
 8007980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007988:	d11b      	bne.n	80079c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007992:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2220      	movs	r2, #32
 800799e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	f043 0204 	orr.w	r2, r3, #4
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e000      	b.n	80079c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bc80      	pop	{r7}
 80079cc:	4770      	bx	lr

080079ce <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80079ce:	b480      	push	{r7}
 80079d0:	b083      	sub	sp, #12
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079da:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80079de:	d103      	bne.n	80079e8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80079e6:	e007      	b.n	80079f8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ec:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80079f0:	d102      	bne.n	80079f8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2208      	movs	r2, #8
 80079f6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bc80      	pop	{r7}
 8007a00:	4770      	bx	lr
	...

08007a04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e272      	b.n	8007efc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 8087 	beq.w	8007b32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a24:	4b92      	ldr	r3, [pc, #584]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	f003 030c 	and.w	r3, r3, #12
 8007a2c:	2b04      	cmp	r3, #4
 8007a2e:	d00c      	beq.n	8007a4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007a30:	4b8f      	ldr	r3, [pc, #572]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	f003 030c 	and.w	r3, r3, #12
 8007a38:	2b08      	cmp	r3, #8
 8007a3a:	d112      	bne.n	8007a62 <HAL_RCC_OscConfig+0x5e>
 8007a3c:	4b8c      	ldr	r3, [pc, #560]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a48:	d10b      	bne.n	8007a62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a4a:	4b89      	ldr	r3, [pc, #548]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d06c      	beq.n	8007b30 <HAL_RCC_OscConfig+0x12c>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d168      	bne.n	8007b30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e24c      	b.n	8007efc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a6a:	d106      	bne.n	8007a7a <HAL_RCC_OscConfig+0x76>
 8007a6c:	4b80      	ldr	r3, [pc, #512]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a7f      	ldr	r2, [pc, #508]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	e02e      	b.n	8007ad8 <HAL_RCC_OscConfig+0xd4>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10c      	bne.n	8007a9c <HAL_RCC_OscConfig+0x98>
 8007a82:	4b7b      	ldr	r3, [pc, #492]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a7a      	ldr	r2, [pc, #488]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a8c:	6013      	str	r3, [r2, #0]
 8007a8e:	4b78      	ldr	r3, [pc, #480]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a77      	ldr	r2, [pc, #476]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007a94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a98:	6013      	str	r3, [r2, #0]
 8007a9a:	e01d      	b.n	8007ad8 <HAL_RCC_OscConfig+0xd4>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007aa4:	d10c      	bne.n	8007ac0 <HAL_RCC_OscConfig+0xbc>
 8007aa6:	4b72      	ldr	r3, [pc, #456]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a71      	ldr	r2, [pc, #452]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	4b6f      	ldr	r3, [pc, #444]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a6e      	ldr	r2, [pc, #440]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	e00b      	b.n	8007ad8 <HAL_RCC_OscConfig+0xd4>
 8007ac0:	4b6b      	ldr	r3, [pc, #428]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a6a      	ldr	r2, [pc, #424]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aca:	6013      	str	r3, [r2, #0]
 8007acc:	4b68      	ldr	r3, [pc, #416]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a67      	ldr	r2, [pc, #412]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ad6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d013      	beq.n	8007b08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ae0:	f7fb ff80 	bl	80039e4 <HAL_GetTick>
 8007ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ae6:	e008      	b.n	8007afa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ae8:	f7fb ff7c 	bl	80039e4 <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	2b64      	cmp	r3, #100	; 0x64
 8007af4:	d901      	bls.n	8007afa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e200      	b.n	8007efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007afa:	4b5d      	ldr	r3, [pc, #372]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0f0      	beq.n	8007ae8 <HAL_RCC_OscConfig+0xe4>
 8007b06:	e014      	b.n	8007b32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b08:	f7fb ff6c 	bl	80039e4 <HAL_GetTick>
 8007b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b0e:	e008      	b.n	8007b22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b10:	f7fb ff68 	bl	80039e4 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	2b64      	cmp	r3, #100	; 0x64
 8007b1c:	d901      	bls.n	8007b22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e1ec      	b.n	8007efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b22:	4b53      	ldr	r3, [pc, #332]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1f0      	bne.n	8007b10 <HAL_RCC_OscConfig+0x10c>
 8007b2e:	e000      	b.n	8007b32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d063      	beq.n	8007c06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b3e:	4b4c      	ldr	r3, [pc, #304]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f003 030c 	and.w	r3, r3, #12
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00b      	beq.n	8007b62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007b4a:	4b49      	ldr	r3, [pc, #292]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f003 030c 	and.w	r3, r3, #12
 8007b52:	2b08      	cmp	r3, #8
 8007b54:	d11c      	bne.n	8007b90 <HAL_RCC_OscConfig+0x18c>
 8007b56:	4b46      	ldr	r3, [pc, #280]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d116      	bne.n	8007b90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b62:	4b43      	ldr	r3, [pc, #268]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d005      	beq.n	8007b7a <HAL_RCC_OscConfig+0x176>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d001      	beq.n	8007b7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e1c0      	b.n	8007efc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b7a:	4b3d      	ldr	r3, [pc, #244]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	00db      	lsls	r3, r3, #3
 8007b88:	4939      	ldr	r1, [pc, #228]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b8e:	e03a      	b.n	8007c06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d020      	beq.n	8007bda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b98:	4b36      	ldr	r3, [pc, #216]	; (8007c74 <HAL_RCC_OscConfig+0x270>)
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b9e:	f7fb ff21 	bl	80039e4 <HAL_GetTick>
 8007ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ba4:	e008      	b.n	8007bb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ba6:	f7fb ff1d 	bl	80039e4 <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d901      	bls.n	8007bb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e1a1      	b.n	8007efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bb8:	4b2d      	ldr	r3, [pc, #180]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0302 	and.w	r3, r3, #2
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d0f0      	beq.n	8007ba6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bc4:	4b2a      	ldr	r3, [pc, #168]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	00db      	lsls	r3, r3, #3
 8007bd2:	4927      	ldr	r1, [pc, #156]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	600b      	str	r3, [r1, #0]
 8007bd8:	e015      	b.n	8007c06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bda:	4b26      	ldr	r3, [pc, #152]	; (8007c74 <HAL_RCC_OscConfig+0x270>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007be0:	f7fb ff00 	bl	80039e4 <HAL_GetTick>
 8007be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007be6:	e008      	b.n	8007bfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007be8:	f7fb fefc 	bl	80039e4 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d901      	bls.n	8007bfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e180      	b.n	8007efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bfa:	4b1d      	ldr	r3, [pc, #116]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0302 	and.w	r3, r3, #2
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1f0      	bne.n	8007be8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0308 	and.w	r3, r3, #8
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d03a      	beq.n	8007c88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d019      	beq.n	8007c4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c1a:	4b17      	ldr	r3, [pc, #92]	; (8007c78 <HAL_RCC_OscConfig+0x274>)
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c20:	f7fb fee0 	bl	80039e4 <HAL_GetTick>
 8007c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c26:	e008      	b.n	8007c3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c28:	f7fb fedc 	bl	80039e4 <HAL_GetTick>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d901      	bls.n	8007c3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
 8007c38:	e160      	b.n	8007efc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c3a:	4b0d      	ldr	r3, [pc, #52]	; (8007c70 <HAL_RCC_OscConfig+0x26c>)
 8007c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0f0      	beq.n	8007c28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007c46:	2001      	movs	r0, #1
 8007c48:	f000 face 	bl	80081e8 <RCC_Delay>
 8007c4c:	e01c      	b.n	8007c88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c4e:	4b0a      	ldr	r3, [pc, #40]	; (8007c78 <HAL_RCC_OscConfig+0x274>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c54:	f7fb fec6 	bl	80039e4 <HAL_GetTick>
 8007c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c5a:	e00f      	b.n	8007c7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c5c:	f7fb fec2 	bl	80039e4 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d908      	bls.n	8007c7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e146      	b.n	8007efc <HAL_RCC_OscConfig+0x4f8>
 8007c6e:	bf00      	nop
 8007c70:	40021000 	.word	0x40021000
 8007c74:	42420000 	.word	0x42420000
 8007c78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c7c:	4b92      	ldr	r3, [pc, #584]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e9      	bne.n	8007c5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0304 	and.w	r3, r3, #4
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f000 80a6 	beq.w	8007de2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c96:	2300      	movs	r3, #0
 8007c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c9a:	4b8b      	ldr	r3, [pc, #556]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007c9c:	69db      	ldr	r3, [r3, #28]
 8007c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10d      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ca6:	4b88      	ldr	r3, [pc, #544]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007ca8:	69db      	ldr	r3, [r3, #28]
 8007caa:	4a87      	ldr	r2, [pc, #540]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cb0:	61d3      	str	r3, [r2, #28]
 8007cb2:	4b85      	ldr	r3, [pc, #532]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cba:	60bb      	str	r3, [r7, #8]
 8007cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cc2:	4b82      	ldr	r3, [pc, #520]	; (8007ecc <HAL_RCC_OscConfig+0x4c8>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d118      	bne.n	8007d00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007cce:	4b7f      	ldr	r3, [pc, #508]	; (8007ecc <HAL_RCC_OscConfig+0x4c8>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a7e      	ldr	r2, [pc, #504]	; (8007ecc <HAL_RCC_OscConfig+0x4c8>)
 8007cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cda:	f7fb fe83 	bl	80039e4 <HAL_GetTick>
 8007cde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ce0:	e008      	b.n	8007cf4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ce2:	f7fb fe7f 	bl	80039e4 <HAL_GetTick>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	2b64      	cmp	r3, #100	; 0x64
 8007cee:	d901      	bls.n	8007cf4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e103      	b.n	8007efc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cf4:	4b75      	ldr	r3, [pc, #468]	; (8007ecc <HAL_RCC_OscConfig+0x4c8>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d0f0      	beq.n	8007ce2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d106      	bne.n	8007d16 <HAL_RCC_OscConfig+0x312>
 8007d08:	4b6f      	ldr	r3, [pc, #444]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007d0a:	6a1b      	ldr	r3, [r3, #32]
 8007d0c:	4a6e      	ldr	r2, [pc, #440]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007d0e:	f043 0301 	orr.w	r3, r3, #1
 8007d12:	6213      	str	r3, [r2, #32]
 8007d14:	e02d      	b.n	8007d72 <HAL_RCC_OscConfig+0x36e>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10c      	bne.n	8007d38 <HAL_RCC_OscConfig+0x334>
 8007d1e:	4b6a      	ldr	r3, [pc, #424]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	4a69      	ldr	r2, [pc, #420]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007d24:	f023 0301 	bic.w	r3, r3, #1
 8007d28:	6213      	str	r3, [r2, #32]
 8007d2a:	4b67      	ldr	r3, [pc, #412]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	4a66      	ldr	r2, [pc, #408]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007d30:	f023 0304 	bic.w	r3, r3, #4
 8007d34:	6213      	str	r3, [r2, #32]
 8007d36:	e01c      	b.n	8007d72 <HAL_RCC_OscConfig+0x36e>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	2b05      	cmp	r3, #5
 8007d3e:	d10c      	bne.n	8007d5a <HAL_RCC_OscConfig+0x356>
 8007d40:	4b61      	ldr	r3, [pc, #388]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	4a60      	ldr	r2, [pc, #384]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007d46:	f043 0304 	orr.w	r3, r3, #4
 8007d4a:	6213      	str	r3, [r2, #32]
 8007d4c:	4b5e      	ldr	r3, [pc, #376]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007d4e:	6a1b      	ldr	r3, [r3, #32]
 8007d50:	4a5d      	ldr	r2, [pc, #372]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007d52:	f043 0301 	orr.w	r3, r3, #1
 8007d56:	6213      	str	r3, [r2, #32]
 8007d58:	e00b      	b.n	8007d72 <HAL_RCC_OscConfig+0x36e>
 8007d5a:	4b5b      	ldr	r3, [pc, #364]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	4a5a      	ldr	r2, [pc, #360]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007d60:	f023 0301 	bic.w	r3, r3, #1
 8007d64:	6213      	str	r3, [r2, #32]
 8007d66:	4b58      	ldr	r3, [pc, #352]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	4a57      	ldr	r2, [pc, #348]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007d6c:	f023 0304 	bic.w	r3, r3, #4
 8007d70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d015      	beq.n	8007da6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d7a:	f7fb fe33 	bl	80039e4 <HAL_GetTick>
 8007d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d80:	e00a      	b.n	8007d98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d82:	f7fb fe2f 	bl	80039e4 <HAL_GetTick>
 8007d86:	4602      	mov	r2, r0
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d901      	bls.n	8007d98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e0b1      	b.n	8007efc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d98:	4b4b      	ldr	r3, [pc, #300]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007d9a:	6a1b      	ldr	r3, [r3, #32]
 8007d9c:	f003 0302 	and.w	r3, r3, #2
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d0ee      	beq.n	8007d82 <HAL_RCC_OscConfig+0x37e>
 8007da4:	e014      	b.n	8007dd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007da6:	f7fb fe1d 	bl	80039e4 <HAL_GetTick>
 8007daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dac:	e00a      	b.n	8007dc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dae:	f7fb fe19 	bl	80039e4 <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d901      	bls.n	8007dc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e09b      	b.n	8007efc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dc4:	4b40      	ldr	r3, [pc, #256]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007dc6:	6a1b      	ldr	r3, [r3, #32]
 8007dc8:	f003 0302 	and.w	r3, r3, #2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1ee      	bne.n	8007dae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007dd0:	7dfb      	ldrb	r3, [r7, #23]
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d105      	bne.n	8007de2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dd6:	4b3c      	ldr	r3, [pc, #240]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	4a3b      	ldr	r2, [pc, #236]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007de0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f000 8087 	beq.w	8007efa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007dec:	4b36      	ldr	r3, [pc, #216]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	f003 030c 	and.w	r3, r3, #12
 8007df4:	2b08      	cmp	r3, #8
 8007df6:	d061      	beq.n	8007ebc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	69db      	ldr	r3, [r3, #28]
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d146      	bne.n	8007e8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e00:	4b33      	ldr	r3, [pc, #204]	; (8007ed0 <HAL_RCC_OscConfig+0x4cc>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e06:	f7fb fded 	bl	80039e4 <HAL_GetTick>
 8007e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e0c:	e008      	b.n	8007e20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e0e:	f7fb fde9 	bl	80039e4 <HAL_GetTick>
 8007e12:	4602      	mov	r2, r0
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d901      	bls.n	8007e20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e06d      	b.n	8007efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e20:	4b29      	ldr	r3, [pc, #164]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1f0      	bne.n	8007e0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
 8007e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e34:	d108      	bne.n	8007e48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007e36:	4b24      	ldr	r3, [pc, #144]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	4921      	ldr	r1, [pc, #132]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e48:	4b1f      	ldr	r3, [pc, #124]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a19      	ldr	r1, [r3, #32]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	430b      	orrs	r3, r1
 8007e5a:	491b      	ldr	r1, [pc, #108]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e60:	4b1b      	ldr	r3, [pc, #108]	; (8007ed0 <HAL_RCC_OscConfig+0x4cc>)
 8007e62:	2201      	movs	r2, #1
 8007e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e66:	f7fb fdbd 	bl	80039e4 <HAL_GetTick>
 8007e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007e6c:	e008      	b.n	8007e80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e6e:	f7fb fdb9 	bl	80039e4 <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d901      	bls.n	8007e80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e03d      	b.n	8007efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007e80:	4b11      	ldr	r3, [pc, #68]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d0f0      	beq.n	8007e6e <HAL_RCC_OscConfig+0x46a>
 8007e8c:	e035      	b.n	8007efa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e8e:	4b10      	ldr	r3, [pc, #64]	; (8007ed0 <HAL_RCC_OscConfig+0x4cc>)
 8007e90:	2200      	movs	r2, #0
 8007e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e94:	f7fb fda6 	bl	80039e4 <HAL_GetTick>
 8007e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e9a:	e008      	b.n	8007eae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e9c:	f7fb fda2 	bl	80039e4 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d901      	bls.n	8007eae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e026      	b.n	8007efc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007eae:	4b06      	ldr	r3, [pc, #24]	; (8007ec8 <HAL_RCC_OscConfig+0x4c4>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1f0      	bne.n	8007e9c <HAL_RCC_OscConfig+0x498>
 8007eba:	e01e      	b.n	8007efa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	69db      	ldr	r3, [r3, #28]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d107      	bne.n	8007ed4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e019      	b.n	8007efc <HAL_RCC_OscConfig+0x4f8>
 8007ec8:	40021000 	.word	0x40021000
 8007ecc:	40007000 	.word	0x40007000
 8007ed0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007ed4:	4b0b      	ldr	r3, [pc, #44]	; (8007f04 <HAL_RCC_OscConfig+0x500>)
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d106      	bne.n	8007ef6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d001      	beq.n	8007efa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e000      	b.n	8007efc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3718      	adds	r7, #24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	40021000 	.word	0x40021000

08007f08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d101      	bne.n	8007f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e0d0      	b.n	80080be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f1c:	4b6a      	ldr	r3, [pc, #424]	; (80080c8 <HAL_RCC_ClockConfig+0x1c0>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0307 	and.w	r3, r3, #7
 8007f24:	683a      	ldr	r2, [r7, #0]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d910      	bls.n	8007f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f2a:	4b67      	ldr	r3, [pc, #412]	; (80080c8 <HAL_RCC_ClockConfig+0x1c0>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f023 0207 	bic.w	r2, r3, #7
 8007f32:	4965      	ldr	r1, [pc, #404]	; (80080c8 <HAL_RCC_ClockConfig+0x1c0>)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f3a:	4b63      	ldr	r3, [pc, #396]	; (80080c8 <HAL_RCC_ClockConfig+0x1c0>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0307 	and.w	r3, r3, #7
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d001      	beq.n	8007f4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e0b8      	b.n	80080be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0302 	and.w	r3, r3, #2
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d020      	beq.n	8007f9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0304 	and.w	r3, r3, #4
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d005      	beq.n	8007f70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f64:	4b59      	ldr	r3, [pc, #356]	; (80080cc <HAL_RCC_ClockConfig+0x1c4>)
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	4a58      	ldr	r2, [pc, #352]	; (80080cc <HAL_RCC_ClockConfig+0x1c4>)
 8007f6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007f6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0308 	and.w	r3, r3, #8
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d005      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f7c:	4b53      	ldr	r3, [pc, #332]	; (80080cc <HAL_RCC_ClockConfig+0x1c4>)
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	4a52      	ldr	r2, [pc, #328]	; (80080cc <HAL_RCC_ClockConfig+0x1c4>)
 8007f82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007f86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f88:	4b50      	ldr	r3, [pc, #320]	; (80080cc <HAL_RCC_ClockConfig+0x1c4>)
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	494d      	ldr	r1, [pc, #308]	; (80080cc <HAL_RCC_ClockConfig+0x1c4>)
 8007f96:	4313      	orrs	r3, r2
 8007f98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0301 	and.w	r3, r3, #1
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d040      	beq.n	8008028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d107      	bne.n	8007fbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fae:	4b47      	ldr	r3, [pc, #284]	; (80080cc <HAL_RCC_ClockConfig+0x1c4>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d115      	bne.n	8007fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e07f      	b.n	80080be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d107      	bne.n	8007fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fc6:	4b41      	ldr	r3, [pc, #260]	; (80080cc <HAL_RCC_ClockConfig+0x1c4>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d109      	bne.n	8007fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e073      	b.n	80080be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fd6:	4b3d      	ldr	r3, [pc, #244]	; (80080cc <HAL_RCC_ClockConfig+0x1c4>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 0302 	and.w	r3, r3, #2
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d101      	bne.n	8007fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e06b      	b.n	80080be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007fe6:	4b39      	ldr	r3, [pc, #228]	; (80080cc <HAL_RCC_ClockConfig+0x1c4>)
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f023 0203 	bic.w	r2, r3, #3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	4936      	ldr	r1, [pc, #216]	; (80080cc <HAL_RCC_ClockConfig+0x1c4>)
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ff8:	f7fb fcf4 	bl	80039e4 <HAL_GetTick>
 8007ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ffe:	e00a      	b.n	8008016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008000:	f7fb fcf0 	bl	80039e4 <HAL_GetTick>
 8008004:	4602      	mov	r2, r0
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	f241 3288 	movw	r2, #5000	; 0x1388
 800800e:	4293      	cmp	r3, r2
 8008010:	d901      	bls.n	8008016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e053      	b.n	80080be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008016:	4b2d      	ldr	r3, [pc, #180]	; (80080cc <HAL_RCC_ClockConfig+0x1c4>)
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	f003 020c 	and.w	r2, r3, #12
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	429a      	cmp	r2, r3
 8008026:	d1eb      	bne.n	8008000 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008028:	4b27      	ldr	r3, [pc, #156]	; (80080c8 <HAL_RCC_ClockConfig+0x1c0>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0307 	and.w	r3, r3, #7
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	429a      	cmp	r2, r3
 8008034:	d210      	bcs.n	8008058 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008036:	4b24      	ldr	r3, [pc, #144]	; (80080c8 <HAL_RCC_ClockConfig+0x1c0>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f023 0207 	bic.w	r2, r3, #7
 800803e:	4922      	ldr	r1, [pc, #136]	; (80080c8 <HAL_RCC_ClockConfig+0x1c0>)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	4313      	orrs	r3, r2
 8008044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008046:	4b20      	ldr	r3, [pc, #128]	; (80080c8 <HAL_RCC_ClockConfig+0x1c0>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0307 	and.w	r3, r3, #7
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	429a      	cmp	r2, r3
 8008052:	d001      	beq.n	8008058 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e032      	b.n	80080be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	2b00      	cmp	r3, #0
 8008062:	d008      	beq.n	8008076 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008064:	4b19      	ldr	r3, [pc, #100]	; (80080cc <HAL_RCC_ClockConfig+0x1c4>)
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	4916      	ldr	r1, [pc, #88]	; (80080cc <HAL_RCC_ClockConfig+0x1c4>)
 8008072:	4313      	orrs	r3, r2
 8008074:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0308 	and.w	r3, r3, #8
 800807e:	2b00      	cmp	r3, #0
 8008080:	d009      	beq.n	8008096 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008082:	4b12      	ldr	r3, [pc, #72]	; (80080cc <HAL_RCC_ClockConfig+0x1c4>)
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	00db      	lsls	r3, r3, #3
 8008090:	490e      	ldr	r1, [pc, #56]	; (80080cc <HAL_RCC_ClockConfig+0x1c4>)
 8008092:	4313      	orrs	r3, r2
 8008094:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008096:	f000 f821 	bl	80080dc <HAL_RCC_GetSysClockFreq>
 800809a:	4602      	mov	r2, r0
 800809c:	4b0b      	ldr	r3, [pc, #44]	; (80080cc <HAL_RCC_ClockConfig+0x1c4>)
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	091b      	lsrs	r3, r3, #4
 80080a2:	f003 030f 	and.w	r3, r3, #15
 80080a6:	490a      	ldr	r1, [pc, #40]	; (80080d0 <HAL_RCC_ClockConfig+0x1c8>)
 80080a8:	5ccb      	ldrb	r3, [r1, r3]
 80080aa:	fa22 f303 	lsr.w	r3, r2, r3
 80080ae:	4a09      	ldr	r2, [pc, #36]	; (80080d4 <HAL_RCC_ClockConfig+0x1cc>)
 80080b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80080b2:	4b09      	ldr	r3, [pc, #36]	; (80080d8 <HAL_RCC_ClockConfig+0x1d0>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fb fc52 	bl	8003960 <HAL_InitTick>

  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	40022000 	.word	0x40022000
 80080cc:	40021000 	.word	0x40021000
 80080d0:	0800d700 	.word	0x0800d700
 80080d4:	20000060 	.word	0x20000060
 80080d8:	20000064 	.word	0x20000064

080080dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080dc:	b480      	push	{r7}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	60fb      	str	r3, [r7, #12]
 80080e6:	2300      	movs	r3, #0
 80080e8:	60bb      	str	r3, [r7, #8]
 80080ea:	2300      	movs	r3, #0
 80080ec:	617b      	str	r3, [r7, #20]
 80080ee:	2300      	movs	r3, #0
 80080f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80080f2:	2300      	movs	r3, #0
 80080f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80080f6:	4b1e      	ldr	r3, [pc, #120]	; (8008170 <HAL_RCC_GetSysClockFreq+0x94>)
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f003 030c 	and.w	r3, r3, #12
 8008102:	2b04      	cmp	r3, #4
 8008104:	d002      	beq.n	800810c <HAL_RCC_GetSysClockFreq+0x30>
 8008106:	2b08      	cmp	r3, #8
 8008108:	d003      	beq.n	8008112 <HAL_RCC_GetSysClockFreq+0x36>
 800810a:	e027      	b.n	800815c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800810c:	4b19      	ldr	r3, [pc, #100]	; (8008174 <HAL_RCC_GetSysClockFreq+0x98>)
 800810e:	613b      	str	r3, [r7, #16]
      break;
 8008110:	e027      	b.n	8008162 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	0c9b      	lsrs	r3, r3, #18
 8008116:	f003 030f 	and.w	r3, r3, #15
 800811a:	4a17      	ldr	r2, [pc, #92]	; (8008178 <HAL_RCC_GetSysClockFreq+0x9c>)
 800811c:	5cd3      	ldrb	r3, [r2, r3]
 800811e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d010      	beq.n	800814c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800812a:	4b11      	ldr	r3, [pc, #68]	; (8008170 <HAL_RCC_GetSysClockFreq+0x94>)
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	0c5b      	lsrs	r3, r3, #17
 8008130:	f003 0301 	and.w	r3, r3, #1
 8008134:	4a11      	ldr	r2, [pc, #68]	; (800817c <HAL_RCC_GetSysClockFreq+0xa0>)
 8008136:	5cd3      	ldrb	r3, [r2, r3]
 8008138:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a0d      	ldr	r2, [pc, #52]	; (8008174 <HAL_RCC_GetSysClockFreq+0x98>)
 800813e:	fb03 f202 	mul.w	r2, r3, r2
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	fbb2 f3f3 	udiv	r3, r2, r3
 8008148:	617b      	str	r3, [r7, #20]
 800814a:	e004      	b.n	8008156 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a0c      	ldr	r2, [pc, #48]	; (8008180 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008150:	fb02 f303 	mul.w	r3, r2, r3
 8008154:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	613b      	str	r3, [r7, #16]
      break;
 800815a:	e002      	b.n	8008162 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800815c:	4b05      	ldr	r3, [pc, #20]	; (8008174 <HAL_RCC_GetSysClockFreq+0x98>)
 800815e:	613b      	str	r3, [r7, #16]
      break;
 8008160:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008162:	693b      	ldr	r3, [r7, #16]
}
 8008164:	4618      	mov	r0, r3
 8008166:	371c      	adds	r7, #28
 8008168:	46bd      	mov	sp, r7
 800816a:	bc80      	pop	{r7}
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	40021000 	.word	0x40021000
 8008174:	007a1200 	.word	0x007a1200
 8008178:	0800d718 	.word	0x0800d718
 800817c:	0800d728 	.word	0x0800d728
 8008180:	003d0900 	.word	0x003d0900

08008184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008184:	b480      	push	{r7}
 8008186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008188:	4b02      	ldr	r3, [pc, #8]	; (8008194 <HAL_RCC_GetHCLKFreq+0x10>)
 800818a:	681b      	ldr	r3, [r3, #0]
}
 800818c:	4618      	mov	r0, r3
 800818e:	46bd      	mov	sp, r7
 8008190:	bc80      	pop	{r7}
 8008192:	4770      	bx	lr
 8008194:	20000060 	.word	0x20000060

08008198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800819c:	f7ff fff2 	bl	8008184 <HAL_RCC_GetHCLKFreq>
 80081a0:	4602      	mov	r2, r0
 80081a2:	4b05      	ldr	r3, [pc, #20]	; (80081b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	0a1b      	lsrs	r3, r3, #8
 80081a8:	f003 0307 	and.w	r3, r3, #7
 80081ac:	4903      	ldr	r1, [pc, #12]	; (80081bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80081ae:	5ccb      	ldrb	r3, [r1, r3]
 80081b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	40021000 	.word	0x40021000
 80081bc:	0800d710 	.word	0x0800d710

080081c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80081c4:	f7ff ffde 	bl	8008184 <HAL_RCC_GetHCLKFreq>
 80081c8:	4602      	mov	r2, r0
 80081ca:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	0adb      	lsrs	r3, r3, #11
 80081d0:	f003 0307 	and.w	r3, r3, #7
 80081d4:	4903      	ldr	r1, [pc, #12]	; (80081e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081d6:	5ccb      	ldrb	r3, [r1, r3]
 80081d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081dc:	4618      	mov	r0, r3
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	40021000 	.word	0x40021000
 80081e4:	0800d710 	.word	0x0800d710

080081e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80081f0:	4b0a      	ldr	r3, [pc, #40]	; (800821c <RCC_Delay+0x34>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a0a      	ldr	r2, [pc, #40]	; (8008220 <RCC_Delay+0x38>)
 80081f6:	fba2 2303 	umull	r2, r3, r2, r3
 80081fa:	0a5b      	lsrs	r3, r3, #9
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	fb02 f303 	mul.w	r3, r2, r3
 8008202:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008204:	bf00      	nop
  }
  while (Delay --);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	1e5a      	subs	r2, r3, #1
 800820a:	60fa      	str	r2, [r7, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1f9      	bne.n	8008204 <RCC_Delay+0x1c>
}
 8008210:	bf00      	nop
 8008212:	bf00      	nop
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	bc80      	pop	{r7}
 800821a:	4770      	bx	lr
 800821c:	20000060 	.word	0x20000060
 8008220:	10624dd3 	.word	0x10624dd3

08008224 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800822c:	2300      	movs	r3, #0
 800822e:	613b      	str	r3, [r7, #16]
 8008230:	2300      	movs	r3, #0
 8008232:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	2b00      	cmp	r3, #0
 800823e:	d07d      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008240:	2300      	movs	r3, #0
 8008242:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008244:	4b4f      	ldr	r3, [pc, #316]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008246:	69db      	ldr	r3, [r3, #28]
 8008248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10d      	bne.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008250:	4b4c      	ldr	r3, [pc, #304]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	4a4b      	ldr	r2, [pc, #300]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800825a:	61d3      	str	r3, [r2, #28]
 800825c:	4b49      	ldr	r3, [pc, #292]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800825e:	69db      	ldr	r3, [r3, #28]
 8008260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008264:	60bb      	str	r3, [r7, #8]
 8008266:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008268:	2301      	movs	r3, #1
 800826a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800826c:	4b46      	ldr	r3, [pc, #280]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008274:	2b00      	cmp	r3, #0
 8008276:	d118      	bne.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008278:	4b43      	ldr	r3, [pc, #268]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a42      	ldr	r2, [pc, #264]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800827e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008282:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008284:	f7fb fbae 	bl	80039e4 <HAL_GetTick>
 8008288:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800828a:	e008      	b.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800828c:	f7fb fbaa 	bl	80039e4 <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	2b64      	cmp	r3, #100	; 0x64
 8008298:	d901      	bls.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e06d      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800829e:	4b3a      	ldr	r3, [pc, #232]	; (8008388 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0f0      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80082aa:	4b36      	ldr	r3, [pc, #216]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d02e      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d027      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80082c8:	4b2e      	ldr	r3, [pc, #184]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082ca:	6a1b      	ldr	r3, [r3, #32]
 80082cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80082d2:	4b2e      	ldr	r3, [pc, #184]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80082d4:	2201      	movs	r2, #1
 80082d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80082d8:	4b2c      	ldr	r3, [pc, #176]	; (800838c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80082da:	2200      	movs	r2, #0
 80082dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80082de:	4a29      	ldr	r2, [pc, #164]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f003 0301 	and.w	r3, r3, #1
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d014      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082ee:	f7fb fb79 	bl	80039e4 <HAL_GetTick>
 80082f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082f4:	e00a      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082f6:	f7fb fb75 	bl	80039e4 <HAL_GetTick>
 80082fa:	4602      	mov	r2, r0
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	f241 3288 	movw	r2, #5000	; 0x1388
 8008304:	4293      	cmp	r3, r2
 8008306:	d901      	bls.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e036      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800830c:	4b1d      	ldr	r3, [pc, #116]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800830e:	6a1b      	ldr	r3, [r3, #32]
 8008310:	f003 0302 	and.w	r3, r3, #2
 8008314:	2b00      	cmp	r3, #0
 8008316:	d0ee      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008318:	4b1a      	ldr	r3, [pc, #104]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800831a:	6a1b      	ldr	r3, [r3, #32]
 800831c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	4917      	ldr	r1, [pc, #92]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008326:	4313      	orrs	r3, r2
 8008328:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800832a:	7dfb      	ldrb	r3, [r7, #23]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d105      	bne.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008330:	4b14      	ldr	r3, [pc, #80]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008332:	69db      	ldr	r3, [r3, #28]
 8008334:	4a13      	ldr	r2, [pc, #76]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800833a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 0302 	and.w	r3, r3, #2
 8008344:	2b00      	cmp	r3, #0
 8008346:	d008      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008348:	4b0e      	ldr	r3, [pc, #56]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	490b      	ldr	r1, [pc, #44]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008356:	4313      	orrs	r3, r2
 8008358:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0310 	and.w	r3, r3, #16
 8008362:	2b00      	cmp	r3, #0
 8008364:	d008      	beq.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008366:	4b07      	ldr	r3, [pc, #28]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	4904      	ldr	r1, [pc, #16]	; (8008384 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008374:	4313      	orrs	r3, r2
 8008376:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3718      	adds	r7, #24
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	40021000 	.word	0x40021000
 8008388:	40007000 	.word	0x40007000
 800838c:	42420440 	.word	0x42420440

08008390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e041      	b.n	8008426 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d106      	bne.n	80083bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f7fa ffb0 	bl	800331c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2202      	movs	r2, #2
 80083c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	3304      	adds	r3, #4
 80083cc:	4619      	mov	r1, r3
 80083ce:	4610      	mov	r0, r2
 80083d0:	f001 f858 	bl	8009484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
	...

08008430 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b01      	cmp	r3, #1
 8008442:	d001      	beq.n	8008448 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e03a      	b.n	80084be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68da      	ldr	r2, [r3, #12]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f042 0201 	orr.w	r2, r2, #1
 800845e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a18      	ldr	r2, [pc, #96]	; (80084c8 <HAL_TIM_Base_Start_IT+0x98>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d00e      	beq.n	8008488 <HAL_TIM_Base_Start_IT+0x58>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008472:	d009      	beq.n	8008488 <HAL_TIM_Base_Start_IT+0x58>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a14      	ldr	r2, [pc, #80]	; (80084cc <HAL_TIM_Base_Start_IT+0x9c>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d004      	beq.n	8008488 <HAL_TIM_Base_Start_IT+0x58>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a13      	ldr	r2, [pc, #76]	; (80084d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d111      	bne.n	80084ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	f003 0307 	and.w	r3, r3, #7
 8008492:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2b06      	cmp	r3, #6
 8008498:	d010      	beq.n	80084bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f042 0201 	orr.w	r2, r2, #1
 80084a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084aa:	e007      	b.n	80084bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f042 0201 	orr.w	r2, r2, #1
 80084ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bc80      	pop	{r7}
 80084c6:	4770      	bx	lr
 80084c8:	40012c00 	.word	0x40012c00
 80084cc:	40000400 	.word	0x40000400
 80084d0:	40000800 	.word	0x40000800

080084d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d101      	bne.n	80084e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e041      	b.n	800856a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d106      	bne.n	8008500 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f839 	bl	8008572 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2202      	movs	r2, #2
 8008504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	3304      	adds	r3, #4
 8008510:	4619      	mov	r1, r3
 8008512:	4610      	mov	r0, r2
 8008514:	f000 ffb6 	bl	8009484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008572:	b480      	push	{r7}
 8008574:	b083      	sub	sp, #12
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800857a:	bf00      	nop
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	bc80      	pop	{r7}
 8008582:	4770      	bx	lr

08008584 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d109      	bne.n	80085a8 <HAL_TIM_PWM_Start+0x24>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b01      	cmp	r3, #1
 800859e:	bf14      	ite	ne
 80085a0:	2301      	movne	r3, #1
 80085a2:	2300      	moveq	r3, #0
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	e022      	b.n	80085ee <HAL_TIM_PWM_Start+0x6a>
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2b04      	cmp	r3, #4
 80085ac:	d109      	bne.n	80085c2 <HAL_TIM_PWM_Start+0x3e>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	bf14      	ite	ne
 80085ba:	2301      	movne	r3, #1
 80085bc:	2300      	moveq	r3, #0
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	e015      	b.n	80085ee <HAL_TIM_PWM_Start+0x6a>
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	2b08      	cmp	r3, #8
 80085c6:	d109      	bne.n	80085dc <HAL_TIM_PWM_Start+0x58>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	bf14      	ite	ne
 80085d4:	2301      	movne	r3, #1
 80085d6:	2300      	moveq	r3, #0
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	e008      	b.n	80085ee <HAL_TIM_PWM_Start+0x6a>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	bf14      	ite	ne
 80085e8:	2301      	movne	r3, #1
 80085ea:	2300      	moveq	r3, #0
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e05e      	b.n	80086b4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d104      	bne.n	8008606 <HAL_TIM_PWM_Start+0x82>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2202      	movs	r2, #2
 8008600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008604:	e013      	b.n	800862e <HAL_TIM_PWM_Start+0xaa>
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	2b04      	cmp	r3, #4
 800860a:	d104      	bne.n	8008616 <HAL_TIM_PWM_Start+0x92>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2202      	movs	r2, #2
 8008610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008614:	e00b      	b.n	800862e <HAL_TIM_PWM_Start+0xaa>
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	2b08      	cmp	r3, #8
 800861a:	d104      	bne.n	8008626 <HAL_TIM_PWM_Start+0xa2>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2202      	movs	r2, #2
 8008620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008624:	e003      	b.n	800862e <HAL_TIM_PWM_Start+0xaa>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2202      	movs	r2, #2
 800862a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2201      	movs	r2, #1
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	4618      	mov	r0, r3
 8008638:	f001 f9a4 	bl	8009984 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a1e      	ldr	r2, [pc, #120]	; (80086bc <HAL_TIM_PWM_Start+0x138>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d107      	bne.n	8008656 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008654:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a18      	ldr	r2, [pc, #96]	; (80086bc <HAL_TIM_PWM_Start+0x138>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d00e      	beq.n	800867e <HAL_TIM_PWM_Start+0xfa>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008668:	d009      	beq.n	800867e <HAL_TIM_PWM_Start+0xfa>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a14      	ldr	r2, [pc, #80]	; (80086c0 <HAL_TIM_PWM_Start+0x13c>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d004      	beq.n	800867e <HAL_TIM_PWM_Start+0xfa>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a12      	ldr	r2, [pc, #72]	; (80086c4 <HAL_TIM_PWM_Start+0x140>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d111      	bne.n	80086a2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f003 0307 	and.w	r3, r3, #7
 8008688:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2b06      	cmp	r3, #6
 800868e:	d010      	beq.n	80086b2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f042 0201 	orr.w	r2, r2, #1
 800869e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086a0:	e007      	b.n	80086b2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f042 0201 	orr.w	r2, r2, #1
 80086b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	40012c00 	.word	0x40012c00
 80086c0:	40000400 	.word	0x40000400
 80086c4:	40000800 	.word	0x40000800

080086c8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d109      	bne.n	80086f0 <HAL_TIM_PWM_Start_IT+0x28>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	bf14      	ite	ne
 80086e8:	2301      	movne	r3, #1
 80086ea:	2300      	moveq	r3, #0
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	e022      	b.n	8008736 <HAL_TIM_PWM_Start_IT+0x6e>
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	2b04      	cmp	r3, #4
 80086f4:	d109      	bne.n	800870a <HAL_TIM_PWM_Start_IT+0x42>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	2b01      	cmp	r3, #1
 8008700:	bf14      	ite	ne
 8008702:	2301      	movne	r3, #1
 8008704:	2300      	moveq	r3, #0
 8008706:	b2db      	uxtb	r3, r3
 8008708:	e015      	b.n	8008736 <HAL_TIM_PWM_Start_IT+0x6e>
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2b08      	cmp	r3, #8
 800870e:	d109      	bne.n	8008724 <HAL_TIM_PWM_Start_IT+0x5c>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008716:	b2db      	uxtb	r3, r3
 8008718:	2b01      	cmp	r3, #1
 800871a:	bf14      	ite	ne
 800871c:	2301      	movne	r3, #1
 800871e:	2300      	moveq	r3, #0
 8008720:	b2db      	uxtb	r3, r3
 8008722:	e008      	b.n	8008736 <HAL_TIM_PWM_Start_IT+0x6e>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b01      	cmp	r3, #1
 800872e:	bf14      	ite	ne
 8008730:	2301      	movne	r3, #1
 8008732:	2300      	moveq	r3, #0
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e0a9      	b.n	8008892 <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d104      	bne.n	800874e <HAL_TIM_PWM_Start_IT+0x86>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2202      	movs	r2, #2
 8008748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800874c:	e013      	b.n	8008776 <HAL_TIM_PWM_Start_IT+0xae>
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	2b04      	cmp	r3, #4
 8008752:	d104      	bne.n	800875e <HAL_TIM_PWM_Start_IT+0x96>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2202      	movs	r2, #2
 8008758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800875c:	e00b      	b.n	8008776 <HAL_TIM_PWM_Start_IT+0xae>
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	2b08      	cmp	r3, #8
 8008762:	d104      	bne.n	800876e <HAL_TIM_PWM_Start_IT+0xa6>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2202      	movs	r2, #2
 8008768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800876c:	e003      	b.n	8008776 <HAL_TIM_PWM_Start_IT+0xae>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2202      	movs	r2, #2
 8008772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	2b0c      	cmp	r3, #12
 800877a:	d841      	bhi.n	8008800 <HAL_TIM_PWM_Start_IT+0x138>
 800877c:	a201      	add	r2, pc, #4	; (adr r2, 8008784 <HAL_TIM_PWM_Start_IT+0xbc>)
 800877e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008782:	bf00      	nop
 8008784:	080087b9 	.word	0x080087b9
 8008788:	08008801 	.word	0x08008801
 800878c:	08008801 	.word	0x08008801
 8008790:	08008801 	.word	0x08008801
 8008794:	080087cb 	.word	0x080087cb
 8008798:	08008801 	.word	0x08008801
 800879c:	08008801 	.word	0x08008801
 80087a0:	08008801 	.word	0x08008801
 80087a4:	080087dd 	.word	0x080087dd
 80087a8:	08008801 	.word	0x08008801
 80087ac:	08008801 	.word	0x08008801
 80087b0:	08008801 	.word	0x08008801
 80087b4:	080087ef 	.word	0x080087ef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68da      	ldr	r2, [r3, #12]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f042 0202 	orr.w	r2, r2, #2
 80087c6:	60da      	str	r2, [r3, #12]
      break;
 80087c8:	e01d      	b.n	8008806 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68da      	ldr	r2, [r3, #12]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f042 0204 	orr.w	r2, r2, #4
 80087d8:	60da      	str	r2, [r3, #12]
      break;
 80087da:	e014      	b.n	8008806 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68da      	ldr	r2, [r3, #12]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f042 0208 	orr.w	r2, r2, #8
 80087ea:	60da      	str	r2, [r3, #12]
      break;
 80087ec:	e00b      	b.n	8008806 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68da      	ldr	r2, [r3, #12]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f042 0210 	orr.w	r2, r2, #16
 80087fc:	60da      	str	r2, [r3, #12]
      break;
 80087fe:	e002      	b.n	8008806 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	73fb      	strb	r3, [r7, #15]
      break;
 8008804:	bf00      	nop
  }

  if (status == HAL_OK)
 8008806:	7bfb      	ldrb	r3, [r7, #15]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d141      	bne.n	8008890 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2201      	movs	r2, #1
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	4618      	mov	r0, r3
 8008816:	f001 f8b5 	bl	8009984 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a1f      	ldr	r2, [pc, #124]	; (800889c <HAL_TIM_PWM_Start_IT+0x1d4>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d107      	bne.n	8008834 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008832:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a18      	ldr	r2, [pc, #96]	; (800889c <HAL_TIM_PWM_Start_IT+0x1d4>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d00e      	beq.n	800885c <HAL_TIM_PWM_Start_IT+0x194>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008846:	d009      	beq.n	800885c <HAL_TIM_PWM_Start_IT+0x194>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a14      	ldr	r2, [pc, #80]	; (80088a0 <HAL_TIM_PWM_Start_IT+0x1d8>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d004      	beq.n	800885c <HAL_TIM_PWM_Start_IT+0x194>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a13      	ldr	r2, [pc, #76]	; (80088a4 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d111      	bne.n	8008880 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f003 0307 	and.w	r3, r3, #7
 8008866:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	2b06      	cmp	r3, #6
 800886c:	d010      	beq.n	8008890 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f042 0201 	orr.w	r2, r2, #1
 800887c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800887e:	e007      	b.n	8008890 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f042 0201 	orr.w	r2, r2, #1
 800888e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008890:	7bfb      	ldrb	r3, [r7, #15]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	40012c00 	.word	0x40012c00
 80088a0:	40000400 	.word	0x40000400
 80088a4:	40000800 	.word	0x40000800

080088a8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
 80088b4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d109      	bne.n	80088d4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	bf0c      	ite	eq
 80088cc:	2301      	moveq	r3, #1
 80088ce:	2300      	movne	r3, #0
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	e022      	b.n	800891a <HAL_TIM_PWM_Start_DMA+0x72>
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b04      	cmp	r3, #4
 80088d8:	d109      	bne.n	80088ee <HAL_TIM_PWM_Start_DMA+0x46>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	bf0c      	ite	eq
 80088e6:	2301      	moveq	r3, #1
 80088e8:	2300      	movne	r3, #0
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	e015      	b.n	800891a <HAL_TIM_PWM_Start_DMA+0x72>
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	2b08      	cmp	r3, #8
 80088f2:	d109      	bne.n	8008908 <HAL_TIM_PWM_Start_DMA+0x60>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	bf0c      	ite	eq
 8008900:	2301      	moveq	r3, #1
 8008902:	2300      	movne	r3, #0
 8008904:	b2db      	uxtb	r3, r3
 8008906:	e008      	b.n	800891a <HAL_TIM_PWM_Start_DMA+0x72>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800890e:	b2db      	uxtb	r3, r3
 8008910:	2b02      	cmp	r3, #2
 8008912:	bf0c      	ite	eq
 8008914:	2301      	moveq	r3, #1
 8008916:	2300      	movne	r3, #0
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800891e:	2302      	movs	r3, #2
 8008920:	e153      	b.n	8008bca <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d109      	bne.n	800893c <HAL_TIM_PWM_Start_DMA+0x94>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800892e:	b2db      	uxtb	r3, r3
 8008930:	2b01      	cmp	r3, #1
 8008932:	bf0c      	ite	eq
 8008934:	2301      	moveq	r3, #1
 8008936:	2300      	movne	r3, #0
 8008938:	b2db      	uxtb	r3, r3
 800893a:	e022      	b.n	8008982 <HAL_TIM_PWM_Start_DMA+0xda>
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	2b04      	cmp	r3, #4
 8008940:	d109      	bne.n	8008956 <HAL_TIM_PWM_Start_DMA+0xae>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008948:	b2db      	uxtb	r3, r3
 800894a:	2b01      	cmp	r3, #1
 800894c:	bf0c      	ite	eq
 800894e:	2301      	moveq	r3, #1
 8008950:	2300      	movne	r3, #0
 8008952:	b2db      	uxtb	r3, r3
 8008954:	e015      	b.n	8008982 <HAL_TIM_PWM_Start_DMA+0xda>
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	2b08      	cmp	r3, #8
 800895a:	d109      	bne.n	8008970 <HAL_TIM_PWM_Start_DMA+0xc8>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b01      	cmp	r3, #1
 8008966:	bf0c      	ite	eq
 8008968:	2301      	moveq	r3, #1
 800896a:	2300      	movne	r3, #0
 800896c:	b2db      	uxtb	r3, r3
 800896e:	e008      	b.n	8008982 <HAL_TIM_PWM_Start_DMA+0xda>
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b01      	cmp	r3, #1
 800897a:	bf0c      	ite	eq
 800897c:	2301      	moveq	r3, #1
 800897e:	2300      	movne	r3, #0
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d024      	beq.n	80089d0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <HAL_TIM_PWM_Start_DMA+0xea>
 800898c:	887b      	ldrh	r3, [r7, #2]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d101      	bne.n	8008996 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e119      	b.n	8008bca <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d104      	bne.n	80089a6 <HAL_TIM_PWM_Start_DMA+0xfe>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2202      	movs	r2, #2
 80089a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089a4:	e016      	b.n	80089d4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	2b04      	cmp	r3, #4
 80089aa:	d104      	bne.n	80089b6 <HAL_TIM_PWM_Start_DMA+0x10e>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2202      	movs	r2, #2
 80089b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089b4:	e00e      	b.n	80089d4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	2b08      	cmp	r3, #8
 80089ba:	d104      	bne.n	80089c6 <HAL_TIM_PWM_Start_DMA+0x11e>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2202      	movs	r2, #2
 80089c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089c4:	e006      	b.n	80089d4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2202      	movs	r2, #2
 80089ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089ce:	e001      	b.n	80089d4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	e0fa      	b.n	8008bca <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	2b0c      	cmp	r3, #12
 80089d8:	f200 80ae 	bhi.w	8008b38 <HAL_TIM_PWM_Start_DMA+0x290>
 80089dc:	a201      	add	r2, pc, #4	; (adr r2, 80089e4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80089de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e2:	bf00      	nop
 80089e4:	08008a19 	.word	0x08008a19
 80089e8:	08008b39 	.word	0x08008b39
 80089ec:	08008b39 	.word	0x08008b39
 80089f0:	08008b39 	.word	0x08008b39
 80089f4:	08008a61 	.word	0x08008a61
 80089f8:	08008b39 	.word	0x08008b39
 80089fc:	08008b39 	.word	0x08008b39
 8008a00:	08008b39 	.word	0x08008b39
 8008a04:	08008aa9 	.word	0x08008aa9
 8008a08:	08008b39 	.word	0x08008b39
 8008a0c:	08008b39 	.word	0x08008b39
 8008a10:	08008b39 	.word	0x08008b39
 8008a14:	08008af1 	.word	0x08008af1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1c:	4a6d      	ldr	r2, [pc, #436]	; (8008bd4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8008a1e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a24:	4a6c      	ldr	r2, [pc, #432]	; (8008bd8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8008a26:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2c:	4a6b      	ldr	r2, [pc, #428]	; (8008bdc <HAL_TIM_PWM_Start_DMA+0x334>)
 8008a2e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008a34:	6879      	ldr	r1, [r7, #4]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	3334      	adds	r3, #52	; 0x34
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	887b      	ldrh	r3, [r7, #2]
 8008a40:	f7fb fd5a 	bl	80044f8 <HAL_DMA_Start_IT>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d001      	beq.n	8008a4e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e0bd      	b.n	8008bca <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68da      	ldr	r2, [r3, #12]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a5c:	60da      	str	r2, [r3, #12]
      break;
 8008a5e:	e06e      	b.n	8008b3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a64:	4a5b      	ldr	r2, [pc, #364]	; (8008bd4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8008a66:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a6c:	4a5a      	ldr	r2, [pc, #360]	; (8008bd8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8008a6e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a74:	4a59      	ldr	r2, [pc, #356]	; (8008bdc <HAL_TIM_PWM_Start_DMA+0x334>)
 8008a76:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008a7c:	6879      	ldr	r1, [r7, #4]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	3338      	adds	r3, #56	; 0x38
 8008a84:	461a      	mov	r2, r3
 8008a86:	887b      	ldrh	r3, [r7, #2]
 8008a88:	f7fb fd36 	bl	80044f8 <HAL_DMA_Start_IT>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e099      	b.n	8008bca <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68da      	ldr	r2, [r3, #12]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008aa4:	60da      	str	r2, [r3, #12]
      break;
 8008aa6:	e04a      	b.n	8008b3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aac:	4a49      	ldr	r2, [pc, #292]	; (8008bd4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8008aae:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab4:	4a48      	ldr	r2, [pc, #288]	; (8008bd8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8008ab6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abc:	4a47      	ldr	r2, [pc, #284]	; (8008bdc <HAL_TIM_PWM_Start_DMA+0x334>)
 8008abe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008ac4:	6879      	ldr	r1, [r7, #4]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	333c      	adds	r3, #60	; 0x3c
 8008acc:	461a      	mov	r2, r3
 8008ace:	887b      	ldrh	r3, [r7, #2]
 8008ad0:	f7fb fd12 	bl	80044f8 <HAL_DMA_Start_IT>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d001      	beq.n	8008ade <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e075      	b.n	8008bca <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68da      	ldr	r2, [r3, #12]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008aec:	60da      	str	r2, [r3, #12]
      break;
 8008aee:	e026      	b.n	8008b3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af4:	4a37      	ldr	r2, [pc, #220]	; (8008bd4 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8008af6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008afc:	4a36      	ldr	r2, [pc, #216]	; (8008bd8 <HAL_TIM_PWM_Start_DMA+0x330>)
 8008afe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b04:	4a35      	ldr	r2, [pc, #212]	; (8008bdc <HAL_TIM_PWM_Start_DMA+0x334>)
 8008b06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008b0c:	6879      	ldr	r1, [r7, #4]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	3340      	adds	r3, #64	; 0x40
 8008b14:	461a      	mov	r2, r3
 8008b16:	887b      	ldrh	r3, [r7, #2]
 8008b18:	f7fb fcee 	bl	80044f8 <HAL_DMA_Start_IT>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e051      	b.n	8008bca <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68da      	ldr	r2, [r3, #12]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008b34:	60da      	str	r2, [r3, #12]
      break;
 8008b36:	e002      	b.n	8008b3e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8008b3e:	7dfb      	ldrb	r3, [r7, #23]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d141      	bne.n	8008bc8 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	68b9      	ldr	r1, [r7, #8]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 ff19 	bl	8009984 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a22      	ldr	r2, [pc, #136]	; (8008be0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d107      	bne.n	8008b6c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b6a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a1b      	ldr	r2, [pc, #108]	; (8008be0 <HAL_TIM_PWM_Start_DMA+0x338>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d00e      	beq.n	8008b94 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b7e:	d009      	beq.n	8008b94 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a17      	ldr	r2, [pc, #92]	; (8008be4 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d004      	beq.n	8008b94 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a16      	ldr	r2, [pc, #88]	; (8008be8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d111      	bne.n	8008bb8 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f003 0307 	and.w	r3, r3, #7
 8008b9e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	2b06      	cmp	r3, #6
 8008ba4:	d010      	beq.n	8008bc8 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f042 0201 	orr.w	r2, r2, #1
 8008bb4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bb6:	e007      	b.n	8008bc8 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f042 0201 	orr.w	r2, r2, #1
 8008bc6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3718      	adds	r7, #24
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	08009375 	.word	0x08009375
 8008bd8:	0800941d 	.word	0x0800941d
 8008bdc:	080092e3 	.word	0x080092e3
 8008be0:	40012c00 	.word	0x40012c00
 8008be4:	40000400 	.word	0x40000400
 8008be8:	40000800 	.word	0x40000800

08008bec <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b0c      	cmp	r3, #12
 8008bfe:	d855      	bhi.n	8008cac <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008c00:	a201      	add	r2, pc, #4	; (adr r2, 8008c08 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c06:	bf00      	nop
 8008c08:	08008c3d 	.word	0x08008c3d
 8008c0c:	08008cad 	.word	0x08008cad
 8008c10:	08008cad 	.word	0x08008cad
 8008c14:	08008cad 	.word	0x08008cad
 8008c18:	08008c59 	.word	0x08008c59
 8008c1c:	08008cad 	.word	0x08008cad
 8008c20:	08008cad 	.word	0x08008cad
 8008c24:	08008cad 	.word	0x08008cad
 8008c28:	08008c75 	.word	0x08008c75
 8008c2c:	08008cad 	.word	0x08008cad
 8008c30:	08008cad 	.word	0x08008cad
 8008c34:	08008cad 	.word	0x08008cad
 8008c38:	08008c91 	.word	0x08008c91
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68da      	ldr	r2, [r3, #12]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008c4a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7fb fced 	bl	8004630 <HAL_DMA_Abort_IT>
      break;
 8008c56:	e02c      	b.n	8008cb2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68da      	ldr	r2, [r3, #12]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c66:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7fb fcdf 	bl	8004630 <HAL_DMA_Abort_IT>
      break;
 8008c72:	e01e      	b.n	8008cb2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68da      	ldr	r2, [r3, #12]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c82:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fb fcd1 	bl	8004630 <HAL_DMA_Abort_IT>
      break;
 8008c8e:	e010      	b.n	8008cb2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68da      	ldr	r2, [r3, #12]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c9e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7fb fcc3 	bl	8004630 <HAL_DMA_Abort_IT>
      break;
 8008caa:	e002      	b.n	8008cb2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	73fb      	strb	r3, [r7, #15]
      break;
 8008cb0:	bf00      	nop
  }

  if (status == HAL_OK)
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d157      	bne.n	8008d68 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 fe5f 	bl	8009984 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a2a      	ldr	r2, [pc, #168]	; (8008d74 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d117      	bne.n	8008d00 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6a1a      	ldr	r2, [r3, #32]
 8008cd6:	f241 1311 	movw	r3, #4369	; 0x1111
 8008cda:	4013      	ands	r3, r2
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10f      	bne.n	8008d00 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6a1a      	ldr	r2, [r3, #32]
 8008ce6:	f240 4344 	movw	r3, #1092	; 0x444
 8008cea:	4013      	ands	r3, r2
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d107      	bne.n	8008d00 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008cfe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	6a1a      	ldr	r2, [r3, #32]
 8008d06:	f241 1311 	movw	r3, #4369	; 0x1111
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10f      	bne.n	8008d30 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6a1a      	ldr	r2, [r3, #32]
 8008d16:	f240 4344 	movw	r3, #1092	; 0x444
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d107      	bne.n	8008d30 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f022 0201 	bic.w	r2, r2, #1
 8008d2e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d104      	bne.n	8008d40 <HAL_TIM_PWM_Stop_DMA+0x154>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d3e:	e013      	b.n	8008d68 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2b04      	cmp	r3, #4
 8008d44:	d104      	bne.n	8008d50 <HAL_TIM_PWM_Stop_DMA+0x164>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d4e:	e00b      	b.n	8008d68 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	2b08      	cmp	r3, #8
 8008d54:	d104      	bne.n	8008d60 <HAL_TIM_PWM_Stop_DMA+0x174>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d5e:	e003      	b.n	8008d68 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	40012c00 	.word	0x40012c00

08008d78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	f003 0302 	and.w	r3, r3, #2
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d122      	bne.n	8008dd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	f003 0302 	and.w	r3, r3, #2
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d11b      	bne.n	8008dd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f06f 0202 	mvn.w	r2, #2
 8008da4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2201      	movs	r2, #1
 8008daa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	f003 0303 	and.w	r3, r3, #3
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d003      	beq.n	8008dc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fa76 	bl	80092ac <HAL_TIM_IC_CaptureCallback>
 8008dc0:	e005      	b.n	8008dce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fa69 	bl	800929a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7f9 ff23 	bl	8002c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	691b      	ldr	r3, [r3, #16]
 8008dda:	f003 0304 	and.w	r3, r3, #4
 8008dde:	2b04      	cmp	r3, #4
 8008de0:	d122      	bne.n	8008e28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	f003 0304 	and.w	r3, r3, #4
 8008dec:	2b04      	cmp	r3, #4
 8008dee:	d11b      	bne.n	8008e28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f06f 0204 	mvn.w	r2, #4
 8008df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2202      	movs	r2, #2
 8008dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d003      	beq.n	8008e16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fa4c 	bl	80092ac <HAL_TIM_IC_CaptureCallback>
 8008e14:	e005      	b.n	8008e22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 fa3f 	bl	800929a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7f9 fef9 	bl	8002c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	f003 0308 	and.w	r3, r3, #8
 8008e32:	2b08      	cmp	r3, #8
 8008e34:	d122      	bne.n	8008e7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	f003 0308 	and.w	r3, r3, #8
 8008e40:	2b08      	cmp	r3, #8
 8008e42:	d11b      	bne.n	8008e7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f06f 0208 	mvn.w	r2, #8
 8008e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2204      	movs	r2, #4
 8008e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	69db      	ldr	r3, [r3, #28]
 8008e5a:	f003 0303 	and.w	r3, r3, #3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d003      	beq.n	8008e6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fa22 	bl	80092ac <HAL_TIM_IC_CaptureCallback>
 8008e68:	e005      	b.n	8008e76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fa15 	bl	800929a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f7f9 fecf 	bl	8002c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	f003 0310 	and.w	r3, r3, #16
 8008e86:	2b10      	cmp	r3, #16
 8008e88:	d122      	bne.n	8008ed0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	f003 0310 	and.w	r3, r3, #16
 8008e94:	2b10      	cmp	r3, #16
 8008e96:	d11b      	bne.n	8008ed0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f06f 0210 	mvn.w	r2, #16
 8008ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2208      	movs	r2, #8
 8008ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	69db      	ldr	r3, [r3, #28]
 8008eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d003      	beq.n	8008ebe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f9f8 	bl	80092ac <HAL_TIM_IC_CaptureCallback>
 8008ebc:	e005      	b.n	8008eca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f9eb 	bl	800929a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7f9 fea5 	bl	8002c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	f003 0301 	and.w	r3, r3, #1
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d10e      	bne.n	8008efc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	f003 0301 	and.w	r3, r3, #1
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d107      	bne.n	8008efc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f06f 0201 	mvn.w	r2, #1
 8008ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f7f9 fc8e 	bl	8002818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f06:	2b80      	cmp	r3, #128	; 0x80
 8008f08:	d10e      	bne.n	8008f28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f14:	2b80      	cmp	r3, #128	; 0x80
 8008f16:	d107      	bne.n	8008f28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fe0a 	bl	8009b3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f32:	2b40      	cmp	r3, #64	; 0x40
 8008f34:	d10e      	bne.n	8008f54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f40:	2b40      	cmp	r3, #64	; 0x40
 8008f42:	d107      	bne.n	8008f54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f9b5 	bl	80092be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	f003 0320 	and.w	r3, r3, #32
 8008f5e:	2b20      	cmp	r3, #32
 8008f60:	d10e      	bne.n	8008f80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	f003 0320 	and.w	r3, r3, #32
 8008f6c:	2b20      	cmp	r3, #32
 8008f6e:	d107      	bne.n	8008f80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f06f 0220 	mvn.w	r2, #32
 8008f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fdd5 	bl	8009b2a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f80:	bf00      	nop
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d101      	bne.n	8008fa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	e0ae      	b.n	8009104 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2b0c      	cmp	r3, #12
 8008fb2:	f200 809f 	bhi.w	80090f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008fb6:	a201      	add	r2, pc, #4	; (adr r2, 8008fbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fbc:	08008ff1 	.word	0x08008ff1
 8008fc0:	080090f5 	.word	0x080090f5
 8008fc4:	080090f5 	.word	0x080090f5
 8008fc8:	080090f5 	.word	0x080090f5
 8008fcc:	08009031 	.word	0x08009031
 8008fd0:	080090f5 	.word	0x080090f5
 8008fd4:	080090f5 	.word	0x080090f5
 8008fd8:	080090f5 	.word	0x080090f5
 8008fdc:	08009073 	.word	0x08009073
 8008fe0:	080090f5 	.word	0x080090f5
 8008fe4:	080090f5 	.word	0x080090f5
 8008fe8:	080090f5 	.word	0x080090f5
 8008fec:	080090b3 	.word	0x080090b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68b9      	ldr	r1, [r7, #8]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 faa6 	bl	8009548 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	699a      	ldr	r2, [r3, #24]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f042 0208 	orr.w	r2, r2, #8
 800900a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	699a      	ldr	r2, [r3, #24]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f022 0204 	bic.w	r2, r2, #4
 800901a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6999      	ldr	r1, [r3, #24]
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	691a      	ldr	r2, [r3, #16]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	430a      	orrs	r2, r1
 800902c:	619a      	str	r2, [r3, #24]
      break;
 800902e:	e064      	b.n	80090fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	68b9      	ldr	r1, [r7, #8]
 8009036:	4618      	mov	r0, r3
 8009038:	f000 faec 	bl	8009614 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	699a      	ldr	r2, [r3, #24]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800904a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	699a      	ldr	r2, [r3, #24]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800905a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6999      	ldr	r1, [r3, #24]
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	021a      	lsls	r2, r3, #8
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	430a      	orrs	r2, r1
 800906e:	619a      	str	r2, [r3, #24]
      break;
 8009070:	e043      	b.n	80090fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	68b9      	ldr	r1, [r7, #8]
 8009078:	4618      	mov	r0, r3
 800907a:	f000 fb35 	bl	80096e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	69da      	ldr	r2, [r3, #28]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f042 0208 	orr.w	r2, r2, #8
 800908c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	69da      	ldr	r2, [r3, #28]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f022 0204 	bic.w	r2, r2, #4
 800909c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	69d9      	ldr	r1, [r3, #28]
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	691a      	ldr	r2, [r3, #16]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	430a      	orrs	r2, r1
 80090ae:	61da      	str	r2, [r3, #28]
      break;
 80090b0:	e023      	b.n	80090fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68b9      	ldr	r1, [r7, #8]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f000 fb7f 	bl	80097bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	69da      	ldr	r2, [r3, #28]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	69da      	ldr	r2, [r3, #28]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	69d9      	ldr	r1, [r3, #28]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	021a      	lsls	r2, r3, #8
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	430a      	orrs	r2, r1
 80090f0:	61da      	str	r2, [r3, #28]
      break;
 80090f2:	e002      	b.n	80090fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	75fb      	strb	r3, [r7, #23]
      break;
 80090f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009102:	7dfb      	ldrb	r3, [r7, #23]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3718      	adds	r7, #24
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009120:	2b01      	cmp	r3, #1
 8009122:	d101      	bne.n	8009128 <HAL_TIM_ConfigClockSource+0x1c>
 8009124:	2302      	movs	r3, #2
 8009126:	e0b4      	b.n	8009292 <HAL_TIM_ConfigClockSource+0x186>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2202      	movs	r2, #2
 8009134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800914e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68ba      	ldr	r2, [r7, #8]
 8009156:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009160:	d03e      	beq.n	80091e0 <HAL_TIM_ConfigClockSource+0xd4>
 8009162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009166:	f200 8087 	bhi.w	8009278 <HAL_TIM_ConfigClockSource+0x16c>
 800916a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800916e:	f000 8086 	beq.w	800927e <HAL_TIM_ConfigClockSource+0x172>
 8009172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009176:	d87f      	bhi.n	8009278 <HAL_TIM_ConfigClockSource+0x16c>
 8009178:	2b70      	cmp	r3, #112	; 0x70
 800917a:	d01a      	beq.n	80091b2 <HAL_TIM_ConfigClockSource+0xa6>
 800917c:	2b70      	cmp	r3, #112	; 0x70
 800917e:	d87b      	bhi.n	8009278 <HAL_TIM_ConfigClockSource+0x16c>
 8009180:	2b60      	cmp	r3, #96	; 0x60
 8009182:	d050      	beq.n	8009226 <HAL_TIM_ConfigClockSource+0x11a>
 8009184:	2b60      	cmp	r3, #96	; 0x60
 8009186:	d877      	bhi.n	8009278 <HAL_TIM_ConfigClockSource+0x16c>
 8009188:	2b50      	cmp	r3, #80	; 0x50
 800918a:	d03c      	beq.n	8009206 <HAL_TIM_ConfigClockSource+0xfa>
 800918c:	2b50      	cmp	r3, #80	; 0x50
 800918e:	d873      	bhi.n	8009278 <HAL_TIM_ConfigClockSource+0x16c>
 8009190:	2b40      	cmp	r3, #64	; 0x40
 8009192:	d058      	beq.n	8009246 <HAL_TIM_ConfigClockSource+0x13a>
 8009194:	2b40      	cmp	r3, #64	; 0x40
 8009196:	d86f      	bhi.n	8009278 <HAL_TIM_ConfigClockSource+0x16c>
 8009198:	2b30      	cmp	r3, #48	; 0x30
 800919a:	d064      	beq.n	8009266 <HAL_TIM_ConfigClockSource+0x15a>
 800919c:	2b30      	cmp	r3, #48	; 0x30
 800919e:	d86b      	bhi.n	8009278 <HAL_TIM_ConfigClockSource+0x16c>
 80091a0:	2b20      	cmp	r3, #32
 80091a2:	d060      	beq.n	8009266 <HAL_TIM_ConfigClockSource+0x15a>
 80091a4:	2b20      	cmp	r3, #32
 80091a6:	d867      	bhi.n	8009278 <HAL_TIM_ConfigClockSource+0x16c>
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d05c      	beq.n	8009266 <HAL_TIM_ConfigClockSource+0x15a>
 80091ac:	2b10      	cmp	r3, #16
 80091ae:	d05a      	beq.n	8009266 <HAL_TIM_ConfigClockSource+0x15a>
 80091b0:	e062      	b.n	8009278 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6818      	ldr	r0, [r3, #0]
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	6899      	ldr	r1, [r3, #8]
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	f000 fbc0 	bl	8009946 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80091d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	609a      	str	r2, [r3, #8]
      break;
 80091de:	e04f      	b.n	8009280 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6818      	ldr	r0, [r3, #0]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	6899      	ldr	r1, [r3, #8]
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	685a      	ldr	r2, [r3, #4]
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	f000 fba9 	bl	8009946 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	689a      	ldr	r2, [r3, #8]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009202:	609a      	str	r2, [r3, #8]
      break;
 8009204:	e03c      	b.n	8009280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6818      	ldr	r0, [r3, #0]
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	6859      	ldr	r1, [r3, #4]
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	461a      	mov	r2, r3
 8009214:	f000 fb20 	bl	8009858 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2150      	movs	r1, #80	; 0x50
 800921e:	4618      	mov	r0, r3
 8009220:	f000 fb77 	bl	8009912 <TIM_ITRx_SetConfig>
      break;
 8009224:	e02c      	b.n	8009280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6818      	ldr	r0, [r3, #0]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	6859      	ldr	r1, [r3, #4]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	461a      	mov	r2, r3
 8009234:	f000 fb3e 	bl	80098b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2160      	movs	r1, #96	; 0x60
 800923e:	4618      	mov	r0, r3
 8009240:	f000 fb67 	bl	8009912 <TIM_ITRx_SetConfig>
      break;
 8009244:	e01c      	b.n	8009280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	6859      	ldr	r1, [r3, #4]
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	461a      	mov	r2, r3
 8009254:	f000 fb00 	bl	8009858 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2140      	movs	r1, #64	; 0x40
 800925e:	4618      	mov	r0, r3
 8009260:	f000 fb57 	bl	8009912 <TIM_ITRx_SetConfig>
      break;
 8009264:	e00c      	b.n	8009280 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4619      	mov	r1, r3
 8009270:	4610      	mov	r0, r2
 8009272:	f000 fb4e 	bl	8009912 <TIM_ITRx_SetConfig>
      break;
 8009276:	e003      	b.n	8009280 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	73fb      	strb	r3, [r7, #15]
      break;
 800927c:	e000      	b.n	8009280 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800927e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009290:	7bfb      	ldrb	r3, [r7, #15]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800929a:	b480      	push	{r7}
 800929c:	b083      	sub	sp, #12
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092a2:	bf00      	nop
 80092a4:	370c      	adds	r7, #12
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bc80      	pop	{r7}
 80092aa:	4770      	bx	lr

080092ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80092b4:	bf00      	nop
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bc80      	pop	{r7}
 80092bc:	4770      	bx	lr

080092be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80092be:	b480      	push	{r7}
 80092c0:	b083      	sub	sp, #12
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80092c6:	bf00      	nop
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bc80      	pop	{r7}
 80092ce:	4770      	bx	lr

080092d0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80092d8:	bf00      	nop
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	bc80      	pop	{r7}
 80092e0:	4770      	bx	lr

080092e2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b084      	sub	sp, #16
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d107      	bne.n	800930a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2201      	movs	r2, #1
 80092fe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009308:	e02a      	b.n	8009360 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	429a      	cmp	r2, r3
 8009312:	d107      	bne.n	8009324 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2202      	movs	r2, #2
 8009318:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009322:	e01d      	b.n	8009360 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	429a      	cmp	r2, r3
 800932c:	d107      	bne.n	800933e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2204      	movs	r2, #4
 8009332:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800933c:	e010      	b.n	8009360 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	429a      	cmp	r2, r3
 8009346:	d107      	bne.n	8009358 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2208      	movs	r2, #8
 800934c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009356:	e003      	b.n	8009360 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f7ff ffb5 	bl	80092d0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	771a      	strb	r2, [r3, #28]
}
 800936c:	bf00      	nop
 800936e:	3710      	adds	r7, #16
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009380:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	429a      	cmp	r2, r3
 800938a:	d10b      	bne.n	80093a4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2201      	movs	r2, #1
 8009390:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d136      	bne.n	8009408 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2201      	movs	r2, #1
 800939e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093a2:	e031      	b.n	8009408 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d10b      	bne.n	80093c6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2202      	movs	r2, #2
 80093b2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d125      	bne.n	8009408 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093c4:	e020      	b.n	8009408 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d10b      	bne.n	80093e8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2204      	movs	r2, #4
 80093d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d114      	bne.n	8009408 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2201      	movs	r2, #1
 80093e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093e6:	e00f      	b.n	8009408 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d10a      	bne.n	8009408 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2208      	movs	r2, #8
 80093f6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d103      	bne.n	8009408 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f7f9 fc03 	bl	8002c14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	771a      	strb	r2, [r3, #28]
}
 8009414:	bf00      	nop
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009428:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	429a      	cmp	r2, r3
 8009432:	d103      	bne.n	800943c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2201      	movs	r2, #1
 8009438:	771a      	strb	r2, [r3, #28]
 800943a:	e019      	b.n	8009470 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	429a      	cmp	r2, r3
 8009444:	d103      	bne.n	800944e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2202      	movs	r2, #2
 800944a:	771a      	strb	r2, [r3, #28]
 800944c:	e010      	b.n	8009470 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	429a      	cmp	r2, r3
 8009456:	d103      	bne.n	8009460 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2204      	movs	r2, #4
 800945c:	771a      	strb	r2, [r3, #28]
 800945e:	e007      	b.n	8009470 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	429a      	cmp	r2, r3
 8009468:	d102      	bne.n	8009470 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2208      	movs	r2, #8
 800946e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f7f9 fb51 	bl	8002b18 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	771a      	strb	r2, [r3, #28]
}
 800947c:	bf00      	nop
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a29      	ldr	r2, [pc, #164]	; (800953c <TIM_Base_SetConfig+0xb8>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d00b      	beq.n	80094b4 <TIM_Base_SetConfig+0x30>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094a2:	d007      	beq.n	80094b4 <TIM_Base_SetConfig+0x30>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a26      	ldr	r2, [pc, #152]	; (8009540 <TIM_Base_SetConfig+0xbc>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d003      	beq.n	80094b4 <TIM_Base_SetConfig+0x30>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a25      	ldr	r2, [pc, #148]	; (8009544 <TIM_Base_SetConfig+0xc0>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d108      	bne.n	80094c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a1c      	ldr	r2, [pc, #112]	; (800953c <TIM_Base_SetConfig+0xb8>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d00b      	beq.n	80094e6 <TIM_Base_SetConfig+0x62>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094d4:	d007      	beq.n	80094e6 <TIM_Base_SetConfig+0x62>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a19      	ldr	r2, [pc, #100]	; (8009540 <TIM_Base_SetConfig+0xbc>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d003      	beq.n	80094e6 <TIM_Base_SetConfig+0x62>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a18      	ldr	r2, [pc, #96]	; (8009544 <TIM_Base_SetConfig+0xc0>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d108      	bne.n	80094f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	695b      	ldr	r3, [r3, #20]
 8009502:	4313      	orrs	r3, r2
 8009504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	689a      	ldr	r2, [r3, #8]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a07      	ldr	r2, [pc, #28]	; (800953c <TIM_Base_SetConfig+0xb8>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d103      	bne.n	800952c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	691a      	ldr	r2, [r3, #16]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	615a      	str	r2, [r3, #20]
}
 8009532:	bf00      	nop
 8009534:	3714      	adds	r7, #20
 8009536:	46bd      	mov	sp, r7
 8009538:	bc80      	pop	{r7}
 800953a:	4770      	bx	lr
 800953c:	40012c00 	.word	0x40012c00
 8009540:	40000400 	.word	0x40000400
 8009544:	40000800 	.word	0x40000800

08009548 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009548:	b480      	push	{r7}
 800954a:	b087      	sub	sp, #28
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a1b      	ldr	r3, [r3, #32]
 800955c:	f023 0201 	bic.w	r2, r3, #1
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	699b      	ldr	r3, [r3, #24]
 800956e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f023 0303 	bic.w	r3, r3, #3
 800957e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68fa      	ldr	r2, [r7, #12]
 8009586:	4313      	orrs	r3, r2
 8009588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	f023 0302 	bic.w	r3, r3, #2
 8009590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	4313      	orrs	r3, r2
 800959a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a1c      	ldr	r2, [pc, #112]	; (8009610 <TIM_OC1_SetConfig+0xc8>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d10c      	bne.n	80095be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	f023 0308 	bic.w	r3, r3, #8
 80095aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	697a      	ldr	r2, [r7, #20]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	f023 0304 	bic.w	r3, r3, #4
 80095bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a13      	ldr	r2, [pc, #76]	; (8009610 <TIM_OC1_SetConfig+0xc8>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d111      	bne.n	80095ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	695b      	ldr	r3, [r3, #20]
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	4313      	orrs	r3, r2
 80095de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	693a      	ldr	r2, [r7, #16]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	693a      	ldr	r2, [r7, #16]
 80095ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	685a      	ldr	r2, [r3, #4]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	697a      	ldr	r2, [r7, #20]
 8009602:	621a      	str	r2, [r3, #32]
}
 8009604:	bf00      	nop
 8009606:	371c      	adds	r7, #28
 8009608:	46bd      	mov	sp, r7
 800960a:	bc80      	pop	{r7}
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	40012c00 	.word	0x40012c00

08009614 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009614:	b480      	push	{r7}
 8009616:	b087      	sub	sp, #28
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a1b      	ldr	r3, [r3, #32]
 8009628:	f023 0210 	bic.w	r2, r3, #16
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	699b      	ldr	r3, [r3, #24]
 800963a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800964a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	021b      	lsls	r3, r3, #8
 8009652:	68fa      	ldr	r2, [r7, #12]
 8009654:	4313      	orrs	r3, r2
 8009656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	f023 0320 	bic.w	r3, r3, #32
 800965e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	011b      	lsls	r3, r3, #4
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	4313      	orrs	r3, r2
 800966a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a1d      	ldr	r2, [pc, #116]	; (80096e4 <TIM_OC2_SetConfig+0xd0>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d10d      	bne.n	8009690 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800967a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	011b      	lsls	r3, r3, #4
 8009682:	697a      	ldr	r2, [r7, #20]
 8009684:	4313      	orrs	r3, r2
 8009686:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800968e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a14      	ldr	r2, [pc, #80]	; (80096e4 <TIM_OC2_SetConfig+0xd0>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d113      	bne.n	80096c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800969e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	695b      	ldr	r3, [r3, #20]
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	4313      	orrs	r3, r2
 80096be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	693a      	ldr	r2, [r7, #16]
 80096c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	685a      	ldr	r2, [r3, #4]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	697a      	ldr	r2, [r7, #20]
 80096d8:	621a      	str	r2, [r3, #32]
}
 80096da:	bf00      	nop
 80096dc:	371c      	adds	r7, #28
 80096de:	46bd      	mov	sp, r7
 80096e0:	bc80      	pop	{r7}
 80096e2:	4770      	bx	lr
 80096e4:	40012c00 	.word	0x40012c00

080096e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b087      	sub	sp, #28
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a1b      	ldr	r3, [r3, #32]
 80096fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	69db      	ldr	r3, [r3, #28]
 800970e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f023 0303 	bic.w	r3, r3, #3
 800971e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	4313      	orrs	r3, r2
 8009728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	021b      	lsls	r3, r3, #8
 8009738:	697a      	ldr	r2, [r7, #20]
 800973a:	4313      	orrs	r3, r2
 800973c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a1d      	ldr	r2, [pc, #116]	; (80097b8 <TIM_OC3_SetConfig+0xd0>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d10d      	bne.n	8009762 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800974c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	021b      	lsls	r3, r3, #8
 8009754:	697a      	ldr	r2, [r7, #20]
 8009756:	4313      	orrs	r3, r2
 8009758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a14      	ldr	r2, [pc, #80]	; (80097b8 <TIM_OC3_SetConfig+0xd0>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d113      	bne.n	8009792 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	695b      	ldr	r3, [r3, #20]
 800977e:	011b      	lsls	r3, r3, #4
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	4313      	orrs	r3, r2
 8009784:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	011b      	lsls	r3, r3, #4
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	4313      	orrs	r3, r2
 8009790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	693a      	ldr	r2, [r7, #16]
 8009796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	685a      	ldr	r2, [r3, #4]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	697a      	ldr	r2, [r7, #20]
 80097aa:	621a      	str	r2, [r3, #32]
}
 80097ac:	bf00      	nop
 80097ae:	371c      	adds	r7, #28
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bc80      	pop	{r7}
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	40012c00 	.word	0x40012c00

080097bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097bc:	b480      	push	{r7}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6a1b      	ldr	r3, [r3, #32]
 80097d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	69db      	ldr	r3, [r3, #28]
 80097e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	021b      	lsls	r3, r3, #8
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	4313      	orrs	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	031b      	lsls	r3, r3, #12
 800980e:	693a      	ldr	r2, [r7, #16]
 8009810:	4313      	orrs	r3, r2
 8009812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a0f      	ldr	r2, [pc, #60]	; (8009854 <TIM_OC4_SetConfig+0x98>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d109      	bne.n	8009830 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009822:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	019b      	lsls	r3, r3, #6
 800982a:	697a      	ldr	r2, [r7, #20]
 800982c:	4313      	orrs	r3, r2
 800982e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	697a      	ldr	r2, [r7, #20]
 8009834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	685a      	ldr	r2, [r3, #4]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	693a      	ldr	r2, [r7, #16]
 8009848:	621a      	str	r2, [r3, #32]
}
 800984a:	bf00      	nop
 800984c:	371c      	adds	r7, #28
 800984e:	46bd      	mov	sp, r7
 8009850:	bc80      	pop	{r7}
 8009852:	4770      	bx	lr
 8009854:	40012c00 	.word	0x40012c00

08009858 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009858:	b480      	push	{r7}
 800985a:	b087      	sub	sp, #28
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6a1b      	ldr	r3, [r3, #32]
 8009868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	f023 0201 	bic.w	r2, r3, #1
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	011b      	lsls	r3, r3, #4
 8009888:	693a      	ldr	r2, [r7, #16]
 800988a:	4313      	orrs	r3, r2
 800988c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	f023 030a 	bic.w	r3, r3, #10
 8009894:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	4313      	orrs	r3, r2
 800989c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	697a      	ldr	r2, [r7, #20]
 80098a8:	621a      	str	r2, [r3, #32]
}
 80098aa:	bf00      	nop
 80098ac:	371c      	adds	r7, #28
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bc80      	pop	{r7}
 80098b2:	4770      	bx	lr

080098b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b087      	sub	sp, #28
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6a1b      	ldr	r3, [r3, #32]
 80098c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	f023 0210 	bic.w	r2, r3, #16
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	031b      	lsls	r3, r3, #12
 80098e4:	693a      	ldr	r2, [r7, #16]
 80098e6:	4313      	orrs	r3, r2
 80098e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	011b      	lsls	r3, r3, #4
 80098f6:	697a      	ldr	r2, [r7, #20]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	693a      	ldr	r2, [r7, #16]
 8009900:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	697a      	ldr	r2, [r7, #20]
 8009906:	621a      	str	r2, [r3, #32]
}
 8009908:	bf00      	nop
 800990a:	371c      	adds	r7, #28
 800990c:	46bd      	mov	sp, r7
 800990e:	bc80      	pop	{r7}
 8009910:	4770      	bx	lr

08009912 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009912:	b480      	push	{r7}
 8009914:	b085      	sub	sp, #20
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009928:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800992a:	683a      	ldr	r2, [r7, #0]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4313      	orrs	r3, r2
 8009930:	f043 0307 	orr.w	r3, r3, #7
 8009934:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	609a      	str	r2, [r3, #8]
}
 800993c:	bf00      	nop
 800993e:	3714      	adds	r7, #20
 8009940:	46bd      	mov	sp, r7
 8009942:	bc80      	pop	{r7}
 8009944:	4770      	bx	lr

08009946 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009946:	b480      	push	{r7}
 8009948:	b087      	sub	sp, #28
 800994a:	af00      	add	r7, sp, #0
 800994c:	60f8      	str	r0, [r7, #12]
 800994e:	60b9      	str	r1, [r7, #8]
 8009950:	607a      	str	r2, [r7, #4]
 8009952:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009960:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	021a      	lsls	r2, r3, #8
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	431a      	orrs	r2, r3
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	4313      	orrs	r3, r2
 800996e:	697a      	ldr	r2, [r7, #20]
 8009970:	4313      	orrs	r3, r2
 8009972:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	697a      	ldr	r2, [r7, #20]
 8009978:	609a      	str	r2, [r3, #8]
}
 800997a:	bf00      	nop
 800997c:	371c      	adds	r7, #28
 800997e:	46bd      	mov	sp, r7
 8009980:	bc80      	pop	{r7}
 8009982:	4770      	bx	lr

08009984 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009984:	b480      	push	{r7}
 8009986:	b087      	sub	sp, #28
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	f003 031f 	and.w	r3, r3, #31
 8009996:	2201      	movs	r2, #1
 8009998:	fa02 f303 	lsl.w	r3, r2, r3
 800999c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6a1a      	ldr	r2, [r3, #32]
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	43db      	mvns	r3, r3
 80099a6:	401a      	ands	r2, r3
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6a1a      	ldr	r2, [r3, #32]
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	f003 031f 	and.w	r3, r3, #31
 80099b6:	6879      	ldr	r1, [r7, #4]
 80099b8:	fa01 f303 	lsl.w	r3, r1, r3
 80099bc:	431a      	orrs	r2, r3
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	621a      	str	r2, [r3, #32]
}
 80099c2:	bf00      	nop
 80099c4:	371c      	adds	r7, #28
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bc80      	pop	{r7}
 80099ca:	4770      	bx	lr

080099cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d101      	bne.n	80099e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099e0:	2302      	movs	r3, #2
 80099e2:	e046      	b.n	8009a72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2202      	movs	r2, #2
 80099f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a16      	ldr	r2, [pc, #88]	; (8009a7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d00e      	beq.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a30:	d009      	beq.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a12      	ldr	r2, [pc, #72]	; (8009a80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d004      	beq.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a10      	ldr	r2, [pc, #64]	; (8009a84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d10c      	bne.n	8009a60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	68ba      	ldr	r2, [r7, #8]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bc80      	pop	{r7}
 8009a7a:	4770      	bx	lr
 8009a7c:	40012c00 	.word	0x40012c00
 8009a80:	40000400 	.word	0x40000400
 8009a84:	40000800 	.word	0x40000800

08009a88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b085      	sub	sp, #20
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a92:	2300      	movs	r3, #0
 8009a94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d101      	bne.n	8009aa4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	e03d      	b.n	8009b20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	695b      	ldr	r3, [r3, #20]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	69db      	ldr	r3, [r3, #28]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3714      	adds	r7, #20
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bc80      	pop	{r7}
 8009b28:	4770      	bx	lr

08009b2a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	b083      	sub	sp, #12
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b32:	bf00      	nop
 8009b34:	370c      	adds	r7, #12
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bc80      	pop	{r7}
 8009b3a:	4770      	bx	lr

08009b3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bc80      	pop	{r7}
 8009b4c:	4770      	bx	lr

08009b4e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b082      	sub	sp, #8
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d101      	bne.n	8009b60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e042      	b.n	8009be6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d106      	bne.n	8009b7a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f7f9 fcfd 	bl	8003574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2224      	movs	r2, #36	; 0x24
 8009b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68da      	ldr	r2, [r3, #12]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b90:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fdc6 	bl	800a724 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	691a      	ldr	r2, [r3, #16]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ba6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	695a      	ldr	r2, [r3, #20]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009bb6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68da      	ldr	r2, [r3, #12]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009bc6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2220      	movs	r2, #32
 8009bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2220      	movs	r2, #32
 8009bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b08a      	sub	sp, #40	; 0x28
 8009bf2:	af02      	add	r7, sp, #8
 8009bf4:	60f8      	str	r0, [r7, #12]
 8009bf6:	60b9      	str	r1, [r7, #8]
 8009bf8:	603b      	str	r3, [r7, #0]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	2b20      	cmp	r3, #32
 8009c0c:	d16d      	bne.n	8009cea <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d002      	beq.n	8009c1a <HAL_UART_Transmit+0x2c>
 8009c14:	88fb      	ldrh	r3, [r7, #6]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d101      	bne.n	8009c1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e066      	b.n	8009cec <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2221      	movs	r2, #33	; 0x21
 8009c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c2c:	f7f9 feda 	bl	80039e4 <HAL_GetTick>
 8009c30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	88fa      	ldrh	r2, [r7, #6]
 8009c36:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	88fa      	ldrh	r2, [r7, #6]
 8009c3c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c46:	d108      	bne.n	8009c5a <HAL_UART_Transmit+0x6c>
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d104      	bne.n	8009c5a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009c50:	2300      	movs	r3, #0
 8009c52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	61bb      	str	r3, [r7, #24]
 8009c58:	e003      	b.n	8009c62 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009c62:	e02a      	b.n	8009cba <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	2180      	movs	r1, #128	; 0x80
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f000 fb15 	bl	800a29e <UART_WaitOnFlagUntilTimeout>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e036      	b.n	8009cec <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10b      	bne.n	8009c9c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	881b      	ldrh	r3, [r3, #0]
 8009c88:	461a      	mov	r2, r3
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c92:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	3302      	adds	r3, #2
 8009c98:	61bb      	str	r3, [r7, #24]
 8009c9a:	e007      	b.n	8009cac <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	781a      	ldrb	r2, [r3, #0]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1cf      	bne.n	8009c64 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	9300      	str	r3, [sp, #0]
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	2140      	movs	r1, #64	; 0x40
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f000 fae5 	bl	800a29e <UART_WaitOnFlagUntilTimeout>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d001      	beq.n	8009cde <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8009cda:	2303      	movs	r3, #3
 8009cdc:	e006      	b.n	8009cec <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2220      	movs	r2, #32
 8009ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	e000      	b.n	8009cec <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009cea:	2302      	movs	r3, #2
  }
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3720      	adds	r7, #32
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	4613      	mov	r3, r2
 8009d00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	2b20      	cmp	r3, #32
 8009d0c:	d112      	bne.n	8009d34 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d002      	beq.n	8009d1a <HAL_UART_Receive_IT+0x26>
 8009d14:	88fb      	ldrh	r3, [r7, #6]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d101      	bne.n	8009d1e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e00b      	b.n	8009d36 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2200      	movs	r2, #0
 8009d22:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009d24:	88fb      	ldrh	r3, [r7, #6]
 8009d26:	461a      	mov	r2, r3
 8009d28:	68b9      	ldr	r1, [r7, #8]
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f000 fb25 	bl	800a37a <UART_Start_Receive_IT>
 8009d30:	4603      	mov	r3, r0
 8009d32:	e000      	b.n	8009d36 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009d34:	2302      	movs	r3, #2
  }
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
	...

08009d40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b0ba      	sub	sp, #232	; 0xe8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	695b      	ldr	r3, [r3, #20]
 8009d62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009d66:	2300      	movs	r3, #0
 8009d68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d76:	f003 030f 	and.w	r3, r3, #15
 8009d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009d7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d10f      	bne.n	8009da6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d8a:	f003 0320 	and.w	r3, r3, #32
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d009      	beq.n	8009da6 <HAL_UART_IRQHandler+0x66>
 8009d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d96:	f003 0320 	and.w	r3, r3, #32
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d003      	beq.n	8009da6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fc01 	bl	800a5a6 <UART_Receive_IT>
      return;
 8009da4:	e25b      	b.n	800a25e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009da6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f000 80de 	beq.w	8009f6c <HAL_UART_IRQHandler+0x22c>
 8009db0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009db4:	f003 0301 	and.w	r3, r3, #1
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d106      	bne.n	8009dca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dc0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f000 80d1 	beq.w	8009f6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dce:	f003 0301 	and.w	r3, r3, #1
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00b      	beq.n	8009dee <HAL_UART_IRQHandler+0xae>
 8009dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d005      	beq.n	8009dee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009de6:	f043 0201 	orr.w	r2, r3, #1
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009df2:	f003 0304 	and.w	r3, r3, #4
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00b      	beq.n	8009e12 <HAL_UART_IRQHandler+0xd2>
 8009dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dfe:	f003 0301 	and.w	r3, r3, #1
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d005      	beq.n	8009e12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e0a:	f043 0202 	orr.w	r2, r3, #2
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e16:	f003 0302 	and.w	r3, r3, #2
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00b      	beq.n	8009e36 <HAL_UART_IRQHandler+0xf6>
 8009e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e22:	f003 0301 	and.w	r3, r3, #1
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d005      	beq.n	8009e36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e2e:	f043 0204 	orr.w	r2, r3, #4
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e3a:	f003 0308 	and.w	r3, r3, #8
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d011      	beq.n	8009e66 <HAL_UART_IRQHandler+0x126>
 8009e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e46:	f003 0320 	and.w	r3, r3, #32
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d105      	bne.n	8009e5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e52:	f003 0301 	and.w	r3, r3, #1
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d005      	beq.n	8009e66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e5e:	f043 0208 	orr.w	r2, r3, #8
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f000 81f2 	beq.w	800a254 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e74:	f003 0320 	and.w	r3, r3, #32
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d008      	beq.n	8009e8e <HAL_UART_IRQHandler+0x14e>
 8009e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e80:	f003 0320 	and.w	r3, r3, #32
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d002      	beq.n	8009e8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fb8c 	bl	800a5a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	695b      	ldr	r3, [r3, #20]
 8009e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	bf14      	ite	ne
 8009e9c:	2301      	movne	r3, #1
 8009e9e:	2300      	moveq	r3, #0
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eaa:	f003 0308 	and.w	r3, r3, #8
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d103      	bne.n	8009eba <HAL_UART_IRQHandler+0x17a>
 8009eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d04f      	beq.n	8009f5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fa96 	bl	800a3ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	695b      	ldr	r3, [r3, #20]
 8009ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d041      	beq.n	8009f52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	3314      	adds	r3, #20
 8009ed4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009edc:	e853 3f00 	ldrex	r3, [r3]
 8009ee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009ee4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	3314      	adds	r3, #20
 8009ef6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009efa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009efe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f0a:	e841 2300 	strex	r3, r2, [r1]
 8009f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1d9      	bne.n	8009ece <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d013      	beq.n	8009f4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f26:	4a7e      	ldr	r2, [pc, #504]	; (800a120 <HAL_UART_IRQHandler+0x3e0>)
 8009f28:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fa fb7e 	bl	8004630 <HAL_DMA_Abort_IT>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d016      	beq.n	8009f68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009f44:	4610      	mov	r0, r2
 8009f46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f48:	e00e      	b.n	8009f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f993 	bl	800a276 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f50:	e00a      	b.n	8009f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f98f 	bl	800a276 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f58:	e006      	b.n	8009f68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f98b 	bl	800a276 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8009f66:	e175      	b.n	800a254 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f68:	bf00      	nop
    return;
 8009f6a:	e173      	b.n	800a254 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	f040 814f 	bne.w	800a214 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f7a:	f003 0310 	and.w	r3, r3, #16
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	f000 8148 	beq.w	800a214 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f88:	f003 0310 	and.w	r3, r3, #16
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f000 8141 	beq.w	800a214 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f92:	2300      	movs	r3, #0
 8009f94:	60bb      	str	r3, [r7, #8]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	60bb      	str	r3, [r7, #8]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	60bb      	str	r3, [r7, #8]
 8009fa6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	695b      	ldr	r3, [r3, #20]
 8009fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f000 80b6 	beq.w	800a124 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009fc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f000 8145 	beq.w	800a258 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009fd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	f080 813e 	bcs.w	800a258 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009fe2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	2b20      	cmp	r3, #32
 8009fec:	f000 8088 	beq.w	800a100 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	330c      	adds	r3, #12
 8009ff6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ffa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ffe:	e853 3f00 	ldrex	r3, [r3]
 800a002:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a006:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a00a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a00e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	330c      	adds	r3, #12
 800a018:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a01c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a020:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a024:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a028:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a02c:	e841 2300 	strex	r3, r2, [r1]
 800a030:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a034:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1d9      	bne.n	8009ff0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	3314      	adds	r3, #20
 800a042:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a046:	e853 3f00 	ldrex	r3, [r3]
 800a04a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a04c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a04e:	f023 0301 	bic.w	r3, r3, #1
 800a052:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3314      	adds	r3, #20
 800a05c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a060:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a064:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a066:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a068:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a06c:	e841 2300 	strex	r3, r2, [r1]
 800a070:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a072:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a074:	2b00      	cmp	r3, #0
 800a076:	d1e1      	bne.n	800a03c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	3314      	adds	r3, #20
 800a07e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a080:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a082:	e853 3f00 	ldrex	r3, [r3]
 800a086:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a08a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a08e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	3314      	adds	r3, #20
 800a098:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a09c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a09e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a0a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a0a4:	e841 2300 	strex	r3, r2, [r1]
 800a0a8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a0aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1e3      	bne.n	800a078 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2220      	movs	r2, #32
 800a0b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	330c      	adds	r3, #12
 800a0c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0c8:	e853 3f00 	ldrex	r3, [r3]
 800a0cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a0ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0d0:	f023 0310 	bic.w	r3, r3, #16
 800a0d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	330c      	adds	r3, #12
 800a0de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a0e2:	65ba      	str	r2, [r7, #88]	; 0x58
 800a0e4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a0e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0ea:	e841 2300 	strex	r3, r2, [r1]
 800a0ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a0f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1e3      	bne.n	800a0be <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7fa fa5c 	bl	80045b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2202      	movs	r2, #2
 800a104:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a10e:	b29b      	uxth	r3, r3
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	b29b      	uxth	r3, r3
 800a114:	4619      	mov	r1, r3
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 f8b6 	bl	800a288 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a11c:	e09c      	b.n	800a258 <HAL_UART_IRQHandler+0x518>
 800a11e:	bf00      	nop
 800a120:	0800a4b1 	.word	0x0800a4b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	1ad3      	subs	r3, r2, r3
 800a130:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a138:	b29b      	uxth	r3, r3
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f000 808e 	beq.w	800a25c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a140:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a144:	2b00      	cmp	r3, #0
 800a146:	f000 8089 	beq.w	800a25c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	330c      	adds	r3, #12
 800a150:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a154:	e853 3f00 	ldrex	r3, [r3]
 800a158:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a15c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a160:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	330c      	adds	r3, #12
 800a16a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a16e:	647a      	str	r2, [r7, #68]	; 0x44
 800a170:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a172:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a174:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a176:	e841 2300 	strex	r3, r2, [r1]
 800a17a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a17c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1e3      	bne.n	800a14a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	3314      	adds	r3, #20
 800a188:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18c:	e853 3f00 	ldrex	r3, [r3]
 800a190:	623b      	str	r3, [r7, #32]
   return(result);
 800a192:	6a3b      	ldr	r3, [r7, #32]
 800a194:	f023 0301 	bic.w	r3, r3, #1
 800a198:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	3314      	adds	r3, #20
 800a1a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a1a6:	633a      	str	r2, [r7, #48]	; 0x30
 800a1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1ae:	e841 2300 	strex	r3, r2, [r1]
 800a1b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1e3      	bne.n	800a182 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2220      	movs	r2, #32
 800a1be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	330c      	adds	r3, #12
 800a1ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	e853 3f00 	ldrex	r3, [r3]
 800a1d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f023 0310 	bic.w	r3, r3, #16
 800a1de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	330c      	adds	r3, #12
 800a1e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a1ec:	61fa      	str	r2, [r7, #28]
 800a1ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f0:	69b9      	ldr	r1, [r7, #24]
 800a1f2:	69fa      	ldr	r2, [r7, #28]
 800a1f4:	e841 2300 	strex	r3, r2, [r1]
 800a1f8:	617b      	str	r3, [r7, #20]
   return(result);
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1e3      	bne.n	800a1c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2202      	movs	r2, #2
 800a204:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a206:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a20a:	4619      	mov	r1, r3
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 f83b 	bl	800a288 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a212:	e023      	b.n	800a25c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d009      	beq.n	800a234 <HAL_UART_IRQHandler+0x4f4>
 800a220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d003      	beq.n	800a234 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f953 	bl	800a4d8 <UART_Transmit_IT>
    return;
 800a232:	e014      	b.n	800a25e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00e      	beq.n	800a25e <HAL_UART_IRQHandler+0x51e>
 800a240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d008      	beq.n	800a25e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 f992 	bl	800a576 <UART_EndTransmit_IT>
    return;
 800a252:	e004      	b.n	800a25e <HAL_UART_IRQHandler+0x51e>
    return;
 800a254:	bf00      	nop
 800a256:	e002      	b.n	800a25e <HAL_UART_IRQHandler+0x51e>
      return;
 800a258:	bf00      	nop
 800a25a:	e000      	b.n	800a25e <HAL_UART_IRQHandler+0x51e>
      return;
 800a25c:	bf00      	nop
  }
}
 800a25e:	37e8      	adds	r7, #232	; 0xe8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a26c:	bf00      	nop
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	bc80      	pop	{r7}
 800a274:	4770      	bx	lr

0800a276 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a276:	b480      	push	{r7}
 800a278:	b083      	sub	sp, #12
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a27e:	bf00      	nop
 800a280:	370c      	adds	r7, #12
 800a282:	46bd      	mov	sp, r7
 800a284:	bc80      	pop	{r7}
 800a286:	4770      	bx	lr

0800a288 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	460b      	mov	r3, r1
 800a292:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a294:	bf00      	nop
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	bc80      	pop	{r7}
 800a29c:	4770      	bx	lr

0800a29e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b090      	sub	sp, #64	; 0x40
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	60f8      	str	r0, [r7, #12]
 800a2a6:	60b9      	str	r1, [r7, #8]
 800a2a8:	603b      	str	r3, [r7, #0]
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2ae:	e050      	b.n	800a352 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2b6:	d04c      	beq.n	800a352 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a2b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d007      	beq.n	800a2ce <UART_WaitOnFlagUntilTimeout+0x30>
 800a2be:	f7f9 fb91 	bl	80039e4 <HAL_GetTick>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	1ad3      	subs	r3, r2, r3
 800a2c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d241      	bcs.n	800a352 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	330c      	adds	r3, #12
 800a2d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d8:	e853 3f00 	ldrex	r3, [r3]
 800a2dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	330c      	adds	r3, #12
 800a2ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2ee:	637a      	str	r2, [r7, #52]	; 0x34
 800a2f0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2f6:	e841 2300 	strex	r3, r2, [r1]
 800a2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d1e5      	bne.n	800a2ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	3314      	adds	r3, #20
 800a308:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	e853 3f00 	ldrex	r3, [r3]
 800a310:	613b      	str	r3, [r7, #16]
   return(result);
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	f023 0301 	bic.w	r3, r3, #1
 800a318:	63bb      	str	r3, [r7, #56]	; 0x38
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	3314      	adds	r3, #20
 800a320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a322:	623a      	str	r2, [r7, #32]
 800a324:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a326:	69f9      	ldr	r1, [r7, #28]
 800a328:	6a3a      	ldr	r2, [r7, #32]
 800a32a:	e841 2300 	strex	r3, r2, [r1]
 800a32e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d1e5      	bne.n	800a302 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2220      	movs	r2, #32
 800a33a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2220      	movs	r2, #32
 800a342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2200      	movs	r2, #0
 800a34a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800a34e:	2303      	movs	r3, #3
 800a350:	e00f      	b.n	800a372 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	4013      	ands	r3, r2
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	429a      	cmp	r2, r3
 800a360:	bf0c      	ite	eq
 800a362:	2301      	moveq	r3, #1
 800a364:	2300      	movne	r3, #0
 800a366:	b2db      	uxtb	r3, r3
 800a368:	461a      	mov	r2, r3
 800a36a:	79fb      	ldrb	r3, [r7, #7]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d09f      	beq.n	800a2b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3740      	adds	r7, #64	; 0x40
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b085      	sub	sp, #20
 800a37e:	af00      	add	r7, sp, #0
 800a380:	60f8      	str	r0, [r7, #12]
 800a382:	60b9      	str	r1, [r7, #8]
 800a384:	4613      	mov	r3, r2
 800a386:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	68ba      	ldr	r2, [r7, #8]
 800a38c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	88fa      	ldrh	r2, [r7, #6]
 800a392:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	88fa      	ldrh	r2, [r7, #6]
 800a398:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2200      	movs	r2, #0
 800a39e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2222      	movs	r2, #34	; 0x22
 800a3a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d007      	beq.n	800a3c0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	68da      	ldr	r2, [r3, #12]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3be:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	695a      	ldr	r2, [r3, #20]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f042 0201 	orr.w	r2, r2, #1
 800a3ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68da      	ldr	r2, [r3, #12]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f042 0220 	orr.w	r2, r2, #32
 800a3de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3714      	adds	r7, #20
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bc80      	pop	{r7}
 800a3ea:	4770      	bx	lr

0800a3ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b095      	sub	sp, #84	; 0x54
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	330c      	adds	r3, #12
 800a3fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3fe:	e853 3f00 	ldrex	r3, [r3]
 800a402:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a406:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a40a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	330c      	adds	r3, #12
 800a412:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a414:	643a      	str	r2, [r7, #64]	; 0x40
 800a416:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a418:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a41a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a41c:	e841 2300 	strex	r3, r2, [r1]
 800a420:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a424:	2b00      	cmp	r3, #0
 800a426:	d1e5      	bne.n	800a3f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	3314      	adds	r3, #20
 800a42e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a430:	6a3b      	ldr	r3, [r7, #32]
 800a432:	e853 3f00 	ldrex	r3, [r3]
 800a436:	61fb      	str	r3, [r7, #28]
   return(result);
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	f023 0301 	bic.w	r3, r3, #1
 800a43e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	3314      	adds	r3, #20
 800a446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a448:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a44a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a44c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a44e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a450:	e841 2300 	strex	r3, r2, [r1]
 800a454:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d1e5      	bne.n	800a428 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a460:	2b01      	cmp	r3, #1
 800a462:	d119      	bne.n	800a498 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	330c      	adds	r3, #12
 800a46a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	e853 3f00 	ldrex	r3, [r3]
 800a472:	60bb      	str	r3, [r7, #8]
   return(result);
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	f023 0310 	bic.w	r3, r3, #16
 800a47a:	647b      	str	r3, [r7, #68]	; 0x44
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	330c      	adds	r3, #12
 800a482:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a484:	61ba      	str	r2, [r7, #24]
 800a486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a488:	6979      	ldr	r1, [r7, #20]
 800a48a:	69ba      	ldr	r2, [r7, #24]
 800a48c:	e841 2300 	strex	r3, r2, [r1]
 800a490:	613b      	str	r3, [r7, #16]
   return(result);
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1e5      	bne.n	800a464 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2220      	movs	r2, #32
 800a49c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a4a6:	bf00      	nop
 800a4a8:	3754      	adds	r7, #84	; 0x54
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bc80      	pop	{r7}
 800a4ae:	4770      	bx	lr

0800a4b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f7ff fed3 	bl	800a276 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4d0:	bf00      	nop
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	2b21      	cmp	r3, #33	; 0x21
 800a4ea:	d13e      	bne.n	800a56a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4f4:	d114      	bne.n	800a520 <UART_Transmit_IT+0x48>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d110      	bne.n	800a520 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a1b      	ldr	r3, [r3, #32]
 800a502:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	881b      	ldrh	r3, [r3, #0]
 800a508:	461a      	mov	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a512:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6a1b      	ldr	r3, [r3, #32]
 800a518:	1c9a      	adds	r2, r3, #2
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	621a      	str	r2, [r3, #32]
 800a51e:	e008      	b.n	800a532 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a1b      	ldr	r3, [r3, #32]
 800a524:	1c59      	adds	r1, r3, #1
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	6211      	str	r1, [r2, #32]
 800a52a:	781a      	ldrb	r2, [r3, #0]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a536:	b29b      	uxth	r3, r3
 800a538:	3b01      	subs	r3, #1
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	4619      	mov	r1, r3
 800a540:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10f      	bne.n	800a566 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	68da      	ldr	r2, [r3, #12]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a554:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	68da      	ldr	r2, [r3, #12]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a564:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a566:	2300      	movs	r3, #0
 800a568:	e000      	b.n	800a56c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a56a:	2302      	movs	r3, #2
  }
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3714      	adds	r7, #20
 800a570:	46bd      	mov	sp, r7
 800a572:	bc80      	pop	{r7}
 800a574:	4770      	bx	lr

0800a576 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b082      	sub	sp, #8
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	68da      	ldr	r2, [r3, #12]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a58c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2220      	movs	r2, #32
 800a592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f7ff fe64 	bl	800a264 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b08c      	sub	sp, #48	; 0x30
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b22      	cmp	r3, #34	; 0x22
 800a5b8:	f040 80ae 	bne.w	800a718 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5c4:	d117      	bne.n	800a5f6 <UART_Receive_IT+0x50>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d113      	bne.n	800a5f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ee:	1c9a      	adds	r2, r3, #2
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	629a      	str	r2, [r3, #40]	; 0x28
 800a5f4:	e026      	b.n	800a644 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a608:	d007      	beq.n	800a61a <UART_Receive_IT+0x74>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d10a      	bne.n	800a628 <UART_Receive_IT+0x82>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d106      	bne.n	800a628 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	b2da      	uxtb	r2, r3
 800a622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a624:	701a      	strb	r2, [r3, #0]
 800a626:	e008      	b.n	800a63a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a634:	b2da      	uxtb	r2, r3
 800a636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a638:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a63e:	1c5a      	adds	r2, r3, #1
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a648:	b29b      	uxth	r3, r3
 800a64a:	3b01      	subs	r3, #1
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	4619      	mov	r1, r3
 800a652:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a654:	2b00      	cmp	r3, #0
 800a656:	d15d      	bne.n	800a714 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68da      	ldr	r2, [r3, #12]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f022 0220 	bic.w	r2, r2, #32
 800a666:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	68da      	ldr	r2, [r3, #12]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a676:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	695a      	ldr	r2, [r3, #20]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f022 0201 	bic.w	r2, r2, #1
 800a686:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2220      	movs	r2, #32
 800a68c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d135      	bne.n	800a70a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	330c      	adds	r3, #12
 800a6aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	e853 3f00 	ldrex	r3, [r3]
 800a6b2:	613b      	str	r3, [r7, #16]
   return(result);
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	f023 0310 	bic.w	r3, r3, #16
 800a6ba:	627b      	str	r3, [r7, #36]	; 0x24
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	330c      	adds	r3, #12
 800a6c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6c4:	623a      	str	r2, [r7, #32]
 800a6c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c8:	69f9      	ldr	r1, [r7, #28]
 800a6ca:	6a3a      	ldr	r2, [r7, #32]
 800a6cc:	e841 2300 	strex	r3, r2, [r1]
 800a6d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d1e5      	bne.n	800a6a4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f003 0310 	and.w	r3, r3, #16
 800a6e2:	2b10      	cmp	r3, #16
 800a6e4:	d10a      	bne.n	800a6fc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	60fb      	str	r3, [r7, #12]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	60fb      	str	r3, [r7, #12]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	60fb      	str	r3, [r7, #12]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a700:	4619      	mov	r1, r3
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f7ff fdc0 	bl	800a288 <HAL_UARTEx_RxEventCallback>
 800a708:	e002      	b.n	800a710 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f7f7 fcd4 	bl	80020b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a710:	2300      	movs	r3, #0
 800a712:	e002      	b.n	800a71a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a714:	2300      	movs	r3, #0
 800a716:	e000      	b.n	800a71a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a718:	2302      	movs	r3, #2
  }
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3730      	adds	r7, #48	; 0x30
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
	...

0800a724 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	68da      	ldr	r2, [r3, #12]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	430a      	orrs	r2, r1
 800a740:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	689a      	ldr	r2, [r3, #8]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	431a      	orrs	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	695b      	ldr	r3, [r3, #20]
 800a750:	4313      	orrs	r3, r2
 800a752:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a75e:	f023 030c 	bic.w	r3, r3, #12
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	6812      	ldr	r2, [r2, #0]
 800a766:	68b9      	ldr	r1, [r7, #8]
 800a768:	430b      	orrs	r3, r1
 800a76a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	695b      	ldr	r3, [r3, #20]
 800a772:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	699a      	ldr	r2, [r3, #24]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	430a      	orrs	r2, r1
 800a780:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a2c      	ldr	r2, [pc, #176]	; (800a838 <UART_SetConfig+0x114>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d103      	bne.n	800a794 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a78c:	f7fd fd18 	bl	80081c0 <HAL_RCC_GetPCLK2Freq>
 800a790:	60f8      	str	r0, [r7, #12]
 800a792:	e002      	b.n	800a79a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a794:	f7fd fd00 	bl	8008198 <HAL_RCC_GetPCLK1Freq>
 800a798:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a79a:	68fa      	ldr	r2, [r7, #12]
 800a79c:	4613      	mov	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4413      	add	r3, r2
 800a7a2:	009a      	lsls	r2, r3, #2
 800a7a4:	441a      	add	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7b0:	4a22      	ldr	r2, [pc, #136]	; (800a83c <UART_SetConfig+0x118>)
 800a7b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7b6:	095b      	lsrs	r3, r3, #5
 800a7b8:	0119      	lsls	r1, r3, #4
 800a7ba:	68fa      	ldr	r2, [r7, #12]
 800a7bc:	4613      	mov	r3, r2
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	4413      	add	r3, r2
 800a7c2:	009a      	lsls	r2, r3, #2
 800a7c4:	441a      	add	r2, r3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	fbb2 f2f3 	udiv	r2, r2, r3
 800a7d0:	4b1a      	ldr	r3, [pc, #104]	; (800a83c <UART_SetConfig+0x118>)
 800a7d2:	fba3 0302 	umull	r0, r3, r3, r2
 800a7d6:	095b      	lsrs	r3, r3, #5
 800a7d8:	2064      	movs	r0, #100	; 0x64
 800a7da:	fb00 f303 	mul.w	r3, r0, r3
 800a7de:	1ad3      	subs	r3, r2, r3
 800a7e0:	011b      	lsls	r3, r3, #4
 800a7e2:	3332      	adds	r3, #50	; 0x32
 800a7e4:	4a15      	ldr	r2, [pc, #84]	; (800a83c <UART_SetConfig+0x118>)
 800a7e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ea:	095b      	lsrs	r3, r3, #5
 800a7ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a7f0:	4419      	add	r1, r3
 800a7f2:	68fa      	ldr	r2, [r7, #12]
 800a7f4:	4613      	mov	r3, r2
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	4413      	add	r3, r2
 800a7fa:	009a      	lsls	r2, r3, #2
 800a7fc:	441a      	add	r2, r3
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	fbb2 f2f3 	udiv	r2, r2, r3
 800a808:	4b0c      	ldr	r3, [pc, #48]	; (800a83c <UART_SetConfig+0x118>)
 800a80a:	fba3 0302 	umull	r0, r3, r3, r2
 800a80e:	095b      	lsrs	r3, r3, #5
 800a810:	2064      	movs	r0, #100	; 0x64
 800a812:	fb00 f303 	mul.w	r3, r0, r3
 800a816:	1ad3      	subs	r3, r2, r3
 800a818:	011b      	lsls	r3, r3, #4
 800a81a:	3332      	adds	r3, #50	; 0x32
 800a81c:	4a07      	ldr	r2, [pc, #28]	; (800a83c <UART_SetConfig+0x118>)
 800a81e:	fba2 2303 	umull	r2, r3, r2, r3
 800a822:	095b      	lsrs	r3, r3, #5
 800a824:	f003 020f 	and.w	r2, r3, #15
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	440a      	add	r2, r1
 800a82e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a830:	bf00      	nop
 800a832:	3710      	adds	r7, #16
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}
 800a838:	40013800 	.word	0x40013800
 800a83c:	51eb851f 	.word	0x51eb851f

0800a840 <__errno>:
 800a840:	4b01      	ldr	r3, [pc, #4]	; (800a848 <__errno+0x8>)
 800a842:	6818      	ldr	r0, [r3, #0]
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	2000006c 	.word	0x2000006c

0800a84c <__libc_init_array>:
 800a84c:	b570      	push	{r4, r5, r6, lr}
 800a84e:	2600      	movs	r6, #0
 800a850:	4d0c      	ldr	r5, [pc, #48]	; (800a884 <__libc_init_array+0x38>)
 800a852:	4c0d      	ldr	r4, [pc, #52]	; (800a888 <__libc_init_array+0x3c>)
 800a854:	1b64      	subs	r4, r4, r5
 800a856:	10a4      	asrs	r4, r4, #2
 800a858:	42a6      	cmp	r6, r4
 800a85a:	d109      	bne.n	800a870 <__libc_init_array+0x24>
 800a85c:	f002 fefc 	bl	800d658 <_init>
 800a860:	2600      	movs	r6, #0
 800a862:	4d0a      	ldr	r5, [pc, #40]	; (800a88c <__libc_init_array+0x40>)
 800a864:	4c0a      	ldr	r4, [pc, #40]	; (800a890 <__libc_init_array+0x44>)
 800a866:	1b64      	subs	r4, r4, r5
 800a868:	10a4      	asrs	r4, r4, #2
 800a86a:	42a6      	cmp	r6, r4
 800a86c:	d105      	bne.n	800a87a <__libc_init_array+0x2e>
 800a86e:	bd70      	pop	{r4, r5, r6, pc}
 800a870:	f855 3b04 	ldr.w	r3, [r5], #4
 800a874:	4798      	blx	r3
 800a876:	3601      	adds	r6, #1
 800a878:	e7ee      	b.n	800a858 <__libc_init_array+0xc>
 800a87a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a87e:	4798      	blx	r3
 800a880:	3601      	adds	r6, #1
 800a882:	e7f2      	b.n	800a86a <__libc_init_array+0x1e>
 800a884:	0800db04 	.word	0x0800db04
 800a888:	0800db04 	.word	0x0800db04
 800a88c:	0800db04 	.word	0x0800db04
 800a890:	0800db08 	.word	0x0800db08

0800a894 <memset>:
 800a894:	4603      	mov	r3, r0
 800a896:	4402      	add	r2, r0
 800a898:	4293      	cmp	r3, r2
 800a89a:	d100      	bne.n	800a89e <memset+0xa>
 800a89c:	4770      	bx	lr
 800a89e:	f803 1b01 	strb.w	r1, [r3], #1
 800a8a2:	e7f9      	b.n	800a898 <memset+0x4>

0800a8a4 <__cvt>:
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8aa:	461f      	mov	r7, r3
 800a8ac:	bfbb      	ittet	lt
 800a8ae:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a8b2:	461f      	movlt	r7, r3
 800a8b4:	2300      	movge	r3, #0
 800a8b6:	232d      	movlt	r3, #45	; 0x2d
 800a8b8:	b088      	sub	sp, #32
 800a8ba:	4614      	mov	r4, r2
 800a8bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a8be:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a8c0:	7013      	strb	r3, [r2, #0]
 800a8c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8c4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800a8c8:	f023 0820 	bic.w	r8, r3, #32
 800a8cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8d0:	d005      	beq.n	800a8de <__cvt+0x3a>
 800a8d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a8d6:	d100      	bne.n	800a8da <__cvt+0x36>
 800a8d8:	3501      	adds	r5, #1
 800a8da:	2302      	movs	r3, #2
 800a8dc:	e000      	b.n	800a8e0 <__cvt+0x3c>
 800a8de:	2303      	movs	r3, #3
 800a8e0:	aa07      	add	r2, sp, #28
 800a8e2:	9204      	str	r2, [sp, #16]
 800a8e4:	aa06      	add	r2, sp, #24
 800a8e6:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a8ea:	e9cd 3500 	strd	r3, r5, [sp]
 800a8ee:	4622      	mov	r2, r4
 800a8f0:	463b      	mov	r3, r7
 800a8f2:	f000 fce5 	bl	800b2c0 <_dtoa_r>
 800a8f6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a8fa:	4606      	mov	r6, r0
 800a8fc:	d102      	bne.n	800a904 <__cvt+0x60>
 800a8fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a900:	07db      	lsls	r3, r3, #31
 800a902:	d522      	bpl.n	800a94a <__cvt+0xa6>
 800a904:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a908:	eb06 0905 	add.w	r9, r6, r5
 800a90c:	d110      	bne.n	800a930 <__cvt+0x8c>
 800a90e:	7833      	ldrb	r3, [r6, #0]
 800a910:	2b30      	cmp	r3, #48	; 0x30
 800a912:	d10a      	bne.n	800a92a <__cvt+0x86>
 800a914:	2200      	movs	r2, #0
 800a916:	2300      	movs	r3, #0
 800a918:	4620      	mov	r0, r4
 800a91a:	4639      	mov	r1, r7
 800a91c:	f7f6 f844 	bl	80009a8 <__aeabi_dcmpeq>
 800a920:	b918      	cbnz	r0, 800a92a <__cvt+0x86>
 800a922:	f1c5 0501 	rsb	r5, r5, #1
 800a926:	f8ca 5000 	str.w	r5, [sl]
 800a92a:	f8da 3000 	ldr.w	r3, [sl]
 800a92e:	4499      	add	r9, r3
 800a930:	2200      	movs	r2, #0
 800a932:	2300      	movs	r3, #0
 800a934:	4620      	mov	r0, r4
 800a936:	4639      	mov	r1, r7
 800a938:	f7f6 f836 	bl	80009a8 <__aeabi_dcmpeq>
 800a93c:	b108      	cbz	r0, 800a942 <__cvt+0x9e>
 800a93e:	f8cd 901c 	str.w	r9, [sp, #28]
 800a942:	2230      	movs	r2, #48	; 0x30
 800a944:	9b07      	ldr	r3, [sp, #28]
 800a946:	454b      	cmp	r3, r9
 800a948:	d307      	bcc.n	800a95a <__cvt+0xb6>
 800a94a:	4630      	mov	r0, r6
 800a94c:	9b07      	ldr	r3, [sp, #28]
 800a94e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a950:	1b9b      	subs	r3, r3, r6
 800a952:	6013      	str	r3, [r2, #0]
 800a954:	b008      	add	sp, #32
 800a956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a95a:	1c59      	adds	r1, r3, #1
 800a95c:	9107      	str	r1, [sp, #28]
 800a95e:	701a      	strb	r2, [r3, #0]
 800a960:	e7f0      	b.n	800a944 <__cvt+0xa0>

0800a962 <__exponent>:
 800a962:	4603      	mov	r3, r0
 800a964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a966:	2900      	cmp	r1, #0
 800a968:	f803 2b02 	strb.w	r2, [r3], #2
 800a96c:	bfb6      	itet	lt
 800a96e:	222d      	movlt	r2, #45	; 0x2d
 800a970:	222b      	movge	r2, #43	; 0x2b
 800a972:	4249      	neglt	r1, r1
 800a974:	2909      	cmp	r1, #9
 800a976:	7042      	strb	r2, [r0, #1]
 800a978:	dd2b      	ble.n	800a9d2 <__exponent+0x70>
 800a97a:	f10d 0407 	add.w	r4, sp, #7
 800a97e:	46a4      	mov	ip, r4
 800a980:	270a      	movs	r7, #10
 800a982:	fb91 f6f7 	sdiv	r6, r1, r7
 800a986:	460a      	mov	r2, r1
 800a988:	46a6      	mov	lr, r4
 800a98a:	fb07 1516 	mls	r5, r7, r6, r1
 800a98e:	2a63      	cmp	r2, #99	; 0x63
 800a990:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800a994:	4631      	mov	r1, r6
 800a996:	f104 34ff 	add.w	r4, r4, #4294967295
 800a99a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a99e:	dcf0      	bgt.n	800a982 <__exponent+0x20>
 800a9a0:	3130      	adds	r1, #48	; 0x30
 800a9a2:	f1ae 0502 	sub.w	r5, lr, #2
 800a9a6:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a9aa:	4629      	mov	r1, r5
 800a9ac:	1c44      	adds	r4, r0, #1
 800a9ae:	4561      	cmp	r1, ip
 800a9b0:	d30a      	bcc.n	800a9c8 <__exponent+0x66>
 800a9b2:	f10d 0209 	add.w	r2, sp, #9
 800a9b6:	eba2 020e 	sub.w	r2, r2, lr
 800a9ba:	4565      	cmp	r5, ip
 800a9bc:	bf88      	it	hi
 800a9be:	2200      	movhi	r2, #0
 800a9c0:	4413      	add	r3, r2
 800a9c2:	1a18      	subs	r0, r3, r0
 800a9c4:	b003      	add	sp, #12
 800a9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9cc:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a9d0:	e7ed      	b.n	800a9ae <__exponent+0x4c>
 800a9d2:	2330      	movs	r3, #48	; 0x30
 800a9d4:	3130      	adds	r1, #48	; 0x30
 800a9d6:	7083      	strb	r3, [r0, #2]
 800a9d8:	70c1      	strb	r1, [r0, #3]
 800a9da:	1d03      	adds	r3, r0, #4
 800a9dc:	e7f1      	b.n	800a9c2 <__exponent+0x60>
	...

0800a9e0 <_printf_float>:
 800a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	b091      	sub	sp, #68	; 0x44
 800a9e6:	460c      	mov	r4, r1
 800a9e8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a9ec:	4616      	mov	r6, r2
 800a9ee:	461f      	mov	r7, r3
 800a9f0:	4605      	mov	r5, r0
 800a9f2:	f001 fa53 	bl	800be9c <_localeconv_r>
 800a9f6:	6803      	ldr	r3, [r0, #0]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a9fc:	f7f5 fba8 	bl	8000150 <strlen>
 800aa00:	2300      	movs	r3, #0
 800aa02:	930e      	str	r3, [sp, #56]	; 0x38
 800aa04:	f8d8 3000 	ldr.w	r3, [r8]
 800aa08:	900a      	str	r0, [sp, #40]	; 0x28
 800aa0a:	3307      	adds	r3, #7
 800aa0c:	f023 0307 	bic.w	r3, r3, #7
 800aa10:	f103 0208 	add.w	r2, r3, #8
 800aa14:	f894 9018 	ldrb.w	r9, [r4, #24]
 800aa18:	f8d4 b000 	ldr.w	fp, [r4]
 800aa1c:	f8c8 2000 	str.w	r2, [r8]
 800aa20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa24:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aa28:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800aa2c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800aa30:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa32:	f04f 32ff 	mov.w	r2, #4294967295
 800aa36:	4640      	mov	r0, r8
 800aa38:	4b9c      	ldr	r3, [pc, #624]	; (800acac <_printf_float+0x2cc>)
 800aa3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa3c:	f7f5 ffe6 	bl	8000a0c <__aeabi_dcmpun>
 800aa40:	bb70      	cbnz	r0, 800aaa0 <_printf_float+0xc0>
 800aa42:	f04f 32ff 	mov.w	r2, #4294967295
 800aa46:	4640      	mov	r0, r8
 800aa48:	4b98      	ldr	r3, [pc, #608]	; (800acac <_printf_float+0x2cc>)
 800aa4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa4c:	f7f5 ffc0 	bl	80009d0 <__aeabi_dcmple>
 800aa50:	bb30      	cbnz	r0, 800aaa0 <_printf_float+0xc0>
 800aa52:	2200      	movs	r2, #0
 800aa54:	2300      	movs	r3, #0
 800aa56:	4640      	mov	r0, r8
 800aa58:	4651      	mov	r1, sl
 800aa5a:	f7f5 ffaf 	bl	80009bc <__aeabi_dcmplt>
 800aa5e:	b110      	cbz	r0, 800aa66 <_printf_float+0x86>
 800aa60:	232d      	movs	r3, #45	; 0x2d
 800aa62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa66:	4b92      	ldr	r3, [pc, #584]	; (800acb0 <_printf_float+0x2d0>)
 800aa68:	4892      	ldr	r0, [pc, #584]	; (800acb4 <_printf_float+0x2d4>)
 800aa6a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800aa6e:	bf94      	ite	ls
 800aa70:	4698      	movls	r8, r3
 800aa72:	4680      	movhi	r8, r0
 800aa74:	2303      	movs	r3, #3
 800aa76:	f04f 0a00 	mov.w	sl, #0
 800aa7a:	6123      	str	r3, [r4, #16]
 800aa7c:	f02b 0304 	bic.w	r3, fp, #4
 800aa80:	6023      	str	r3, [r4, #0]
 800aa82:	4633      	mov	r3, r6
 800aa84:	4621      	mov	r1, r4
 800aa86:	4628      	mov	r0, r5
 800aa88:	9700      	str	r7, [sp, #0]
 800aa8a:	aa0f      	add	r2, sp, #60	; 0x3c
 800aa8c:	f000 f9d4 	bl	800ae38 <_printf_common>
 800aa90:	3001      	adds	r0, #1
 800aa92:	f040 8090 	bne.w	800abb6 <_printf_float+0x1d6>
 800aa96:	f04f 30ff 	mov.w	r0, #4294967295
 800aa9a:	b011      	add	sp, #68	; 0x44
 800aa9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa0:	4642      	mov	r2, r8
 800aaa2:	4653      	mov	r3, sl
 800aaa4:	4640      	mov	r0, r8
 800aaa6:	4651      	mov	r1, sl
 800aaa8:	f7f5 ffb0 	bl	8000a0c <__aeabi_dcmpun>
 800aaac:	b148      	cbz	r0, 800aac2 <_printf_float+0xe2>
 800aaae:	f1ba 0f00 	cmp.w	sl, #0
 800aab2:	bfb8      	it	lt
 800aab4:	232d      	movlt	r3, #45	; 0x2d
 800aab6:	4880      	ldr	r0, [pc, #512]	; (800acb8 <_printf_float+0x2d8>)
 800aab8:	bfb8      	it	lt
 800aaba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aabe:	4b7f      	ldr	r3, [pc, #508]	; (800acbc <_printf_float+0x2dc>)
 800aac0:	e7d3      	b.n	800aa6a <_printf_float+0x8a>
 800aac2:	6863      	ldr	r3, [r4, #4]
 800aac4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800aac8:	1c5a      	adds	r2, r3, #1
 800aaca:	d142      	bne.n	800ab52 <_printf_float+0x172>
 800aacc:	2306      	movs	r3, #6
 800aace:	6063      	str	r3, [r4, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	9206      	str	r2, [sp, #24]
 800aad4:	aa0e      	add	r2, sp, #56	; 0x38
 800aad6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800aada:	aa0d      	add	r2, sp, #52	; 0x34
 800aadc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800aae0:	9203      	str	r2, [sp, #12]
 800aae2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800aae6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800aaea:	6023      	str	r3, [r4, #0]
 800aaec:	6863      	ldr	r3, [r4, #4]
 800aaee:	4642      	mov	r2, r8
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	4653      	mov	r3, sl
 800aaf6:	910b      	str	r1, [sp, #44]	; 0x2c
 800aaf8:	f7ff fed4 	bl	800a8a4 <__cvt>
 800aafc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aafe:	4680      	mov	r8, r0
 800ab00:	2947      	cmp	r1, #71	; 0x47
 800ab02:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ab04:	d108      	bne.n	800ab18 <_printf_float+0x138>
 800ab06:	1cc8      	adds	r0, r1, #3
 800ab08:	db02      	blt.n	800ab10 <_printf_float+0x130>
 800ab0a:	6863      	ldr	r3, [r4, #4]
 800ab0c:	4299      	cmp	r1, r3
 800ab0e:	dd40      	ble.n	800ab92 <_printf_float+0x1b2>
 800ab10:	f1a9 0902 	sub.w	r9, r9, #2
 800ab14:	fa5f f989 	uxtb.w	r9, r9
 800ab18:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ab1c:	d81f      	bhi.n	800ab5e <_printf_float+0x17e>
 800ab1e:	464a      	mov	r2, r9
 800ab20:	3901      	subs	r1, #1
 800ab22:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ab26:	910d      	str	r1, [sp, #52]	; 0x34
 800ab28:	f7ff ff1b 	bl	800a962 <__exponent>
 800ab2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab2e:	4682      	mov	sl, r0
 800ab30:	1813      	adds	r3, r2, r0
 800ab32:	2a01      	cmp	r2, #1
 800ab34:	6123      	str	r3, [r4, #16]
 800ab36:	dc02      	bgt.n	800ab3e <_printf_float+0x15e>
 800ab38:	6822      	ldr	r2, [r4, #0]
 800ab3a:	07d2      	lsls	r2, r2, #31
 800ab3c:	d501      	bpl.n	800ab42 <_printf_float+0x162>
 800ab3e:	3301      	adds	r3, #1
 800ab40:	6123      	str	r3, [r4, #16]
 800ab42:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d09b      	beq.n	800aa82 <_printf_float+0xa2>
 800ab4a:	232d      	movs	r3, #45	; 0x2d
 800ab4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab50:	e797      	b.n	800aa82 <_printf_float+0xa2>
 800ab52:	2947      	cmp	r1, #71	; 0x47
 800ab54:	d1bc      	bne.n	800aad0 <_printf_float+0xf0>
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1ba      	bne.n	800aad0 <_printf_float+0xf0>
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e7b7      	b.n	800aace <_printf_float+0xee>
 800ab5e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ab62:	d118      	bne.n	800ab96 <_printf_float+0x1b6>
 800ab64:	2900      	cmp	r1, #0
 800ab66:	6863      	ldr	r3, [r4, #4]
 800ab68:	dd0b      	ble.n	800ab82 <_printf_float+0x1a2>
 800ab6a:	6121      	str	r1, [r4, #16]
 800ab6c:	b913      	cbnz	r3, 800ab74 <_printf_float+0x194>
 800ab6e:	6822      	ldr	r2, [r4, #0]
 800ab70:	07d0      	lsls	r0, r2, #31
 800ab72:	d502      	bpl.n	800ab7a <_printf_float+0x19a>
 800ab74:	3301      	adds	r3, #1
 800ab76:	440b      	add	r3, r1
 800ab78:	6123      	str	r3, [r4, #16]
 800ab7a:	f04f 0a00 	mov.w	sl, #0
 800ab7e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ab80:	e7df      	b.n	800ab42 <_printf_float+0x162>
 800ab82:	b913      	cbnz	r3, 800ab8a <_printf_float+0x1aa>
 800ab84:	6822      	ldr	r2, [r4, #0]
 800ab86:	07d2      	lsls	r2, r2, #31
 800ab88:	d501      	bpl.n	800ab8e <_printf_float+0x1ae>
 800ab8a:	3302      	adds	r3, #2
 800ab8c:	e7f4      	b.n	800ab78 <_printf_float+0x198>
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e7f2      	b.n	800ab78 <_printf_float+0x198>
 800ab92:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ab96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab98:	4299      	cmp	r1, r3
 800ab9a:	db05      	blt.n	800aba8 <_printf_float+0x1c8>
 800ab9c:	6823      	ldr	r3, [r4, #0]
 800ab9e:	6121      	str	r1, [r4, #16]
 800aba0:	07d8      	lsls	r0, r3, #31
 800aba2:	d5ea      	bpl.n	800ab7a <_printf_float+0x19a>
 800aba4:	1c4b      	adds	r3, r1, #1
 800aba6:	e7e7      	b.n	800ab78 <_printf_float+0x198>
 800aba8:	2900      	cmp	r1, #0
 800abaa:	bfcc      	ite	gt
 800abac:	2201      	movgt	r2, #1
 800abae:	f1c1 0202 	rsble	r2, r1, #2
 800abb2:	4413      	add	r3, r2
 800abb4:	e7e0      	b.n	800ab78 <_printf_float+0x198>
 800abb6:	6823      	ldr	r3, [r4, #0]
 800abb8:	055a      	lsls	r2, r3, #21
 800abba:	d407      	bmi.n	800abcc <_printf_float+0x1ec>
 800abbc:	6923      	ldr	r3, [r4, #16]
 800abbe:	4642      	mov	r2, r8
 800abc0:	4631      	mov	r1, r6
 800abc2:	4628      	mov	r0, r5
 800abc4:	47b8      	blx	r7
 800abc6:	3001      	adds	r0, #1
 800abc8:	d12b      	bne.n	800ac22 <_printf_float+0x242>
 800abca:	e764      	b.n	800aa96 <_printf_float+0xb6>
 800abcc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800abd0:	f240 80dd 	bls.w	800ad8e <_printf_float+0x3ae>
 800abd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800abd8:	2200      	movs	r2, #0
 800abda:	2300      	movs	r3, #0
 800abdc:	f7f5 fee4 	bl	80009a8 <__aeabi_dcmpeq>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	d033      	beq.n	800ac4c <_printf_float+0x26c>
 800abe4:	2301      	movs	r3, #1
 800abe6:	4631      	mov	r1, r6
 800abe8:	4628      	mov	r0, r5
 800abea:	4a35      	ldr	r2, [pc, #212]	; (800acc0 <_printf_float+0x2e0>)
 800abec:	47b8      	blx	r7
 800abee:	3001      	adds	r0, #1
 800abf0:	f43f af51 	beq.w	800aa96 <_printf_float+0xb6>
 800abf4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800abf8:	429a      	cmp	r2, r3
 800abfa:	db02      	blt.n	800ac02 <_printf_float+0x222>
 800abfc:	6823      	ldr	r3, [r4, #0]
 800abfe:	07d8      	lsls	r0, r3, #31
 800ac00:	d50f      	bpl.n	800ac22 <_printf_float+0x242>
 800ac02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac06:	4631      	mov	r1, r6
 800ac08:	4628      	mov	r0, r5
 800ac0a:	47b8      	blx	r7
 800ac0c:	3001      	adds	r0, #1
 800ac0e:	f43f af42 	beq.w	800aa96 <_printf_float+0xb6>
 800ac12:	f04f 0800 	mov.w	r8, #0
 800ac16:	f104 091a 	add.w	r9, r4, #26
 800ac1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	4543      	cmp	r3, r8
 800ac20:	dc09      	bgt.n	800ac36 <_printf_float+0x256>
 800ac22:	6823      	ldr	r3, [r4, #0]
 800ac24:	079b      	lsls	r3, r3, #30
 800ac26:	f100 8102 	bmi.w	800ae2e <_printf_float+0x44e>
 800ac2a:	68e0      	ldr	r0, [r4, #12]
 800ac2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac2e:	4298      	cmp	r0, r3
 800ac30:	bfb8      	it	lt
 800ac32:	4618      	movlt	r0, r3
 800ac34:	e731      	b.n	800aa9a <_printf_float+0xba>
 800ac36:	2301      	movs	r3, #1
 800ac38:	464a      	mov	r2, r9
 800ac3a:	4631      	mov	r1, r6
 800ac3c:	4628      	mov	r0, r5
 800ac3e:	47b8      	blx	r7
 800ac40:	3001      	adds	r0, #1
 800ac42:	f43f af28 	beq.w	800aa96 <_printf_float+0xb6>
 800ac46:	f108 0801 	add.w	r8, r8, #1
 800ac4a:	e7e6      	b.n	800ac1a <_printf_float+0x23a>
 800ac4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	dc38      	bgt.n	800acc4 <_printf_float+0x2e4>
 800ac52:	2301      	movs	r3, #1
 800ac54:	4631      	mov	r1, r6
 800ac56:	4628      	mov	r0, r5
 800ac58:	4a19      	ldr	r2, [pc, #100]	; (800acc0 <_printf_float+0x2e0>)
 800ac5a:	47b8      	blx	r7
 800ac5c:	3001      	adds	r0, #1
 800ac5e:	f43f af1a 	beq.w	800aa96 <_printf_float+0xb6>
 800ac62:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ac66:	4313      	orrs	r3, r2
 800ac68:	d102      	bne.n	800ac70 <_printf_float+0x290>
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	07d9      	lsls	r1, r3, #31
 800ac6e:	d5d8      	bpl.n	800ac22 <_printf_float+0x242>
 800ac70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac74:	4631      	mov	r1, r6
 800ac76:	4628      	mov	r0, r5
 800ac78:	47b8      	blx	r7
 800ac7a:	3001      	adds	r0, #1
 800ac7c:	f43f af0b 	beq.w	800aa96 <_printf_float+0xb6>
 800ac80:	f04f 0900 	mov.w	r9, #0
 800ac84:	f104 0a1a 	add.w	sl, r4, #26
 800ac88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac8a:	425b      	negs	r3, r3
 800ac8c:	454b      	cmp	r3, r9
 800ac8e:	dc01      	bgt.n	800ac94 <_printf_float+0x2b4>
 800ac90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac92:	e794      	b.n	800abbe <_printf_float+0x1de>
 800ac94:	2301      	movs	r3, #1
 800ac96:	4652      	mov	r2, sl
 800ac98:	4631      	mov	r1, r6
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	47b8      	blx	r7
 800ac9e:	3001      	adds	r0, #1
 800aca0:	f43f aef9 	beq.w	800aa96 <_printf_float+0xb6>
 800aca4:	f109 0901 	add.w	r9, r9, #1
 800aca8:	e7ee      	b.n	800ac88 <_printf_float+0x2a8>
 800acaa:	bf00      	nop
 800acac:	7fefffff 	.word	0x7fefffff
 800acb0:	0800d730 	.word	0x0800d730
 800acb4:	0800d734 	.word	0x0800d734
 800acb8:	0800d73c 	.word	0x0800d73c
 800acbc:	0800d738 	.word	0x0800d738
 800acc0:	0800d740 	.word	0x0800d740
 800acc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800acc8:	429a      	cmp	r2, r3
 800acca:	bfa8      	it	ge
 800accc:	461a      	movge	r2, r3
 800acce:	2a00      	cmp	r2, #0
 800acd0:	4691      	mov	r9, r2
 800acd2:	dc37      	bgt.n	800ad44 <_printf_float+0x364>
 800acd4:	f04f 0b00 	mov.w	fp, #0
 800acd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800acdc:	f104 021a 	add.w	r2, r4, #26
 800ace0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ace4:	ebaa 0309 	sub.w	r3, sl, r9
 800ace8:	455b      	cmp	r3, fp
 800acea:	dc33      	bgt.n	800ad54 <_printf_float+0x374>
 800acec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800acf0:	429a      	cmp	r2, r3
 800acf2:	db3b      	blt.n	800ad6c <_printf_float+0x38c>
 800acf4:	6823      	ldr	r3, [r4, #0]
 800acf6:	07da      	lsls	r2, r3, #31
 800acf8:	d438      	bmi.n	800ad6c <_printf_float+0x38c>
 800acfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acfc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800acfe:	eba3 020a 	sub.w	r2, r3, sl
 800ad02:	eba3 0901 	sub.w	r9, r3, r1
 800ad06:	4591      	cmp	r9, r2
 800ad08:	bfa8      	it	ge
 800ad0a:	4691      	movge	r9, r2
 800ad0c:	f1b9 0f00 	cmp.w	r9, #0
 800ad10:	dc34      	bgt.n	800ad7c <_printf_float+0x39c>
 800ad12:	f04f 0800 	mov.w	r8, #0
 800ad16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad1a:	f104 0a1a 	add.w	sl, r4, #26
 800ad1e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ad22:	1a9b      	subs	r3, r3, r2
 800ad24:	eba3 0309 	sub.w	r3, r3, r9
 800ad28:	4543      	cmp	r3, r8
 800ad2a:	f77f af7a 	ble.w	800ac22 <_printf_float+0x242>
 800ad2e:	2301      	movs	r3, #1
 800ad30:	4652      	mov	r2, sl
 800ad32:	4631      	mov	r1, r6
 800ad34:	4628      	mov	r0, r5
 800ad36:	47b8      	blx	r7
 800ad38:	3001      	adds	r0, #1
 800ad3a:	f43f aeac 	beq.w	800aa96 <_printf_float+0xb6>
 800ad3e:	f108 0801 	add.w	r8, r8, #1
 800ad42:	e7ec      	b.n	800ad1e <_printf_float+0x33e>
 800ad44:	4613      	mov	r3, r2
 800ad46:	4631      	mov	r1, r6
 800ad48:	4642      	mov	r2, r8
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	47b8      	blx	r7
 800ad4e:	3001      	adds	r0, #1
 800ad50:	d1c0      	bne.n	800acd4 <_printf_float+0x2f4>
 800ad52:	e6a0      	b.n	800aa96 <_printf_float+0xb6>
 800ad54:	2301      	movs	r3, #1
 800ad56:	4631      	mov	r1, r6
 800ad58:	4628      	mov	r0, r5
 800ad5a:	920b      	str	r2, [sp, #44]	; 0x2c
 800ad5c:	47b8      	blx	r7
 800ad5e:	3001      	adds	r0, #1
 800ad60:	f43f ae99 	beq.w	800aa96 <_printf_float+0xb6>
 800ad64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad66:	f10b 0b01 	add.w	fp, fp, #1
 800ad6a:	e7b9      	b.n	800ace0 <_printf_float+0x300>
 800ad6c:	4631      	mov	r1, r6
 800ad6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad72:	4628      	mov	r0, r5
 800ad74:	47b8      	blx	r7
 800ad76:	3001      	adds	r0, #1
 800ad78:	d1bf      	bne.n	800acfa <_printf_float+0x31a>
 800ad7a:	e68c      	b.n	800aa96 <_printf_float+0xb6>
 800ad7c:	464b      	mov	r3, r9
 800ad7e:	4631      	mov	r1, r6
 800ad80:	4628      	mov	r0, r5
 800ad82:	eb08 020a 	add.w	r2, r8, sl
 800ad86:	47b8      	blx	r7
 800ad88:	3001      	adds	r0, #1
 800ad8a:	d1c2      	bne.n	800ad12 <_printf_float+0x332>
 800ad8c:	e683      	b.n	800aa96 <_printf_float+0xb6>
 800ad8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad90:	2a01      	cmp	r2, #1
 800ad92:	dc01      	bgt.n	800ad98 <_printf_float+0x3b8>
 800ad94:	07db      	lsls	r3, r3, #31
 800ad96:	d537      	bpl.n	800ae08 <_printf_float+0x428>
 800ad98:	2301      	movs	r3, #1
 800ad9a:	4642      	mov	r2, r8
 800ad9c:	4631      	mov	r1, r6
 800ad9e:	4628      	mov	r0, r5
 800ada0:	47b8      	blx	r7
 800ada2:	3001      	adds	r0, #1
 800ada4:	f43f ae77 	beq.w	800aa96 <_printf_float+0xb6>
 800ada8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adac:	4631      	mov	r1, r6
 800adae:	4628      	mov	r0, r5
 800adb0:	47b8      	blx	r7
 800adb2:	3001      	adds	r0, #1
 800adb4:	f43f ae6f 	beq.w	800aa96 <_printf_float+0xb6>
 800adb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800adbc:	2200      	movs	r2, #0
 800adbe:	2300      	movs	r3, #0
 800adc0:	f7f5 fdf2 	bl	80009a8 <__aeabi_dcmpeq>
 800adc4:	b9d8      	cbnz	r0, 800adfe <_printf_float+0x41e>
 800adc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adc8:	f108 0201 	add.w	r2, r8, #1
 800adcc:	3b01      	subs	r3, #1
 800adce:	4631      	mov	r1, r6
 800add0:	4628      	mov	r0, r5
 800add2:	47b8      	blx	r7
 800add4:	3001      	adds	r0, #1
 800add6:	d10e      	bne.n	800adf6 <_printf_float+0x416>
 800add8:	e65d      	b.n	800aa96 <_printf_float+0xb6>
 800adda:	2301      	movs	r3, #1
 800addc:	464a      	mov	r2, r9
 800adde:	4631      	mov	r1, r6
 800ade0:	4628      	mov	r0, r5
 800ade2:	47b8      	blx	r7
 800ade4:	3001      	adds	r0, #1
 800ade6:	f43f ae56 	beq.w	800aa96 <_printf_float+0xb6>
 800adea:	f108 0801 	add.w	r8, r8, #1
 800adee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adf0:	3b01      	subs	r3, #1
 800adf2:	4543      	cmp	r3, r8
 800adf4:	dcf1      	bgt.n	800adda <_printf_float+0x3fa>
 800adf6:	4653      	mov	r3, sl
 800adf8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800adfc:	e6e0      	b.n	800abc0 <_printf_float+0x1e0>
 800adfe:	f04f 0800 	mov.w	r8, #0
 800ae02:	f104 091a 	add.w	r9, r4, #26
 800ae06:	e7f2      	b.n	800adee <_printf_float+0x40e>
 800ae08:	2301      	movs	r3, #1
 800ae0a:	4642      	mov	r2, r8
 800ae0c:	e7df      	b.n	800adce <_printf_float+0x3ee>
 800ae0e:	2301      	movs	r3, #1
 800ae10:	464a      	mov	r2, r9
 800ae12:	4631      	mov	r1, r6
 800ae14:	4628      	mov	r0, r5
 800ae16:	47b8      	blx	r7
 800ae18:	3001      	adds	r0, #1
 800ae1a:	f43f ae3c 	beq.w	800aa96 <_printf_float+0xb6>
 800ae1e:	f108 0801 	add.w	r8, r8, #1
 800ae22:	68e3      	ldr	r3, [r4, #12]
 800ae24:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ae26:	1a5b      	subs	r3, r3, r1
 800ae28:	4543      	cmp	r3, r8
 800ae2a:	dcf0      	bgt.n	800ae0e <_printf_float+0x42e>
 800ae2c:	e6fd      	b.n	800ac2a <_printf_float+0x24a>
 800ae2e:	f04f 0800 	mov.w	r8, #0
 800ae32:	f104 0919 	add.w	r9, r4, #25
 800ae36:	e7f4      	b.n	800ae22 <_printf_float+0x442>

0800ae38 <_printf_common>:
 800ae38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae3c:	4616      	mov	r6, r2
 800ae3e:	4699      	mov	r9, r3
 800ae40:	688a      	ldr	r2, [r1, #8]
 800ae42:	690b      	ldr	r3, [r1, #16]
 800ae44:	4607      	mov	r7, r0
 800ae46:	4293      	cmp	r3, r2
 800ae48:	bfb8      	it	lt
 800ae4a:	4613      	movlt	r3, r2
 800ae4c:	6033      	str	r3, [r6, #0]
 800ae4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae52:	460c      	mov	r4, r1
 800ae54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae58:	b10a      	cbz	r2, 800ae5e <_printf_common+0x26>
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	6033      	str	r3, [r6, #0]
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	0699      	lsls	r1, r3, #26
 800ae62:	bf42      	ittt	mi
 800ae64:	6833      	ldrmi	r3, [r6, #0]
 800ae66:	3302      	addmi	r3, #2
 800ae68:	6033      	strmi	r3, [r6, #0]
 800ae6a:	6825      	ldr	r5, [r4, #0]
 800ae6c:	f015 0506 	ands.w	r5, r5, #6
 800ae70:	d106      	bne.n	800ae80 <_printf_common+0x48>
 800ae72:	f104 0a19 	add.w	sl, r4, #25
 800ae76:	68e3      	ldr	r3, [r4, #12]
 800ae78:	6832      	ldr	r2, [r6, #0]
 800ae7a:	1a9b      	subs	r3, r3, r2
 800ae7c:	42ab      	cmp	r3, r5
 800ae7e:	dc28      	bgt.n	800aed2 <_printf_common+0x9a>
 800ae80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae84:	1e13      	subs	r3, r2, #0
 800ae86:	6822      	ldr	r2, [r4, #0]
 800ae88:	bf18      	it	ne
 800ae8a:	2301      	movne	r3, #1
 800ae8c:	0692      	lsls	r2, r2, #26
 800ae8e:	d42d      	bmi.n	800aeec <_printf_common+0xb4>
 800ae90:	4649      	mov	r1, r9
 800ae92:	4638      	mov	r0, r7
 800ae94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae98:	47c0      	blx	r8
 800ae9a:	3001      	adds	r0, #1
 800ae9c:	d020      	beq.n	800aee0 <_printf_common+0xa8>
 800ae9e:	6823      	ldr	r3, [r4, #0]
 800aea0:	68e5      	ldr	r5, [r4, #12]
 800aea2:	f003 0306 	and.w	r3, r3, #6
 800aea6:	2b04      	cmp	r3, #4
 800aea8:	bf18      	it	ne
 800aeaa:	2500      	movne	r5, #0
 800aeac:	6832      	ldr	r2, [r6, #0]
 800aeae:	f04f 0600 	mov.w	r6, #0
 800aeb2:	68a3      	ldr	r3, [r4, #8]
 800aeb4:	bf08      	it	eq
 800aeb6:	1aad      	subeq	r5, r5, r2
 800aeb8:	6922      	ldr	r2, [r4, #16]
 800aeba:	bf08      	it	eq
 800aebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aec0:	4293      	cmp	r3, r2
 800aec2:	bfc4      	itt	gt
 800aec4:	1a9b      	subgt	r3, r3, r2
 800aec6:	18ed      	addgt	r5, r5, r3
 800aec8:	341a      	adds	r4, #26
 800aeca:	42b5      	cmp	r5, r6
 800aecc:	d11a      	bne.n	800af04 <_printf_common+0xcc>
 800aece:	2000      	movs	r0, #0
 800aed0:	e008      	b.n	800aee4 <_printf_common+0xac>
 800aed2:	2301      	movs	r3, #1
 800aed4:	4652      	mov	r2, sl
 800aed6:	4649      	mov	r1, r9
 800aed8:	4638      	mov	r0, r7
 800aeda:	47c0      	blx	r8
 800aedc:	3001      	adds	r0, #1
 800aede:	d103      	bne.n	800aee8 <_printf_common+0xb0>
 800aee0:	f04f 30ff 	mov.w	r0, #4294967295
 800aee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aee8:	3501      	adds	r5, #1
 800aeea:	e7c4      	b.n	800ae76 <_printf_common+0x3e>
 800aeec:	2030      	movs	r0, #48	; 0x30
 800aeee:	18e1      	adds	r1, r4, r3
 800aef0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aef4:	1c5a      	adds	r2, r3, #1
 800aef6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aefa:	4422      	add	r2, r4
 800aefc:	3302      	adds	r3, #2
 800aefe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af02:	e7c5      	b.n	800ae90 <_printf_common+0x58>
 800af04:	2301      	movs	r3, #1
 800af06:	4622      	mov	r2, r4
 800af08:	4649      	mov	r1, r9
 800af0a:	4638      	mov	r0, r7
 800af0c:	47c0      	blx	r8
 800af0e:	3001      	adds	r0, #1
 800af10:	d0e6      	beq.n	800aee0 <_printf_common+0xa8>
 800af12:	3601      	adds	r6, #1
 800af14:	e7d9      	b.n	800aeca <_printf_common+0x92>
	...

0800af18 <_printf_i>:
 800af18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af1c:	7e0f      	ldrb	r7, [r1, #24]
 800af1e:	4691      	mov	r9, r2
 800af20:	2f78      	cmp	r7, #120	; 0x78
 800af22:	4680      	mov	r8, r0
 800af24:	460c      	mov	r4, r1
 800af26:	469a      	mov	sl, r3
 800af28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af2e:	d807      	bhi.n	800af40 <_printf_i+0x28>
 800af30:	2f62      	cmp	r7, #98	; 0x62
 800af32:	d80a      	bhi.n	800af4a <_printf_i+0x32>
 800af34:	2f00      	cmp	r7, #0
 800af36:	f000 80d9 	beq.w	800b0ec <_printf_i+0x1d4>
 800af3a:	2f58      	cmp	r7, #88	; 0x58
 800af3c:	f000 80a4 	beq.w	800b088 <_printf_i+0x170>
 800af40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af48:	e03a      	b.n	800afc0 <_printf_i+0xa8>
 800af4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af4e:	2b15      	cmp	r3, #21
 800af50:	d8f6      	bhi.n	800af40 <_printf_i+0x28>
 800af52:	a101      	add	r1, pc, #4	; (adr r1, 800af58 <_printf_i+0x40>)
 800af54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af58:	0800afb1 	.word	0x0800afb1
 800af5c:	0800afc5 	.word	0x0800afc5
 800af60:	0800af41 	.word	0x0800af41
 800af64:	0800af41 	.word	0x0800af41
 800af68:	0800af41 	.word	0x0800af41
 800af6c:	0800af41 	.word	0x0800af41
 800af70:	0800afc5 	.word	0x0800afc5
 800af74:	0800af41 	.word	0x0800af41
 800af78:	0800af41 	.word	0x0800af41
 800af7c:	0800af41 	.word	0x0800af41
 800af80:	0800af41 	.word	0x0800af41
 800af84:	0800b0d3 	.word	0x0800b0d3
 800af88:	0800aff5 	.word	0x0800aff5
 800af8c:	0800b0b5 	.word	0x0800b0b5
 800af90:	0800af41 	.word	0x0800af41
 800af94:	0800af41 	.word	0x0800af41
 800af98:	0800b0f5 	.word	0x0800b0f5
 800af9c:	0800af41 	.word	0x0800af41
 800afa0:	0800aff5 	.word	0x0800aff5
 800afa4:	0800af41 	.word	0x0800af41
 800afa8:	0800af41 	.word	0x0800af41
 800afac:	0800b0bd 	.word	0x0800b0bd
 800afb0:	682b      	ldr	r3, [r5, #0]
 800afb2:	1d1a      	adds	r2, r3, #4
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	602a      	str	r2, [r5, #0]
 800afb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800afc0:	2301      	movs	r3, #1
 800afc2:	e0a4      	b.n	800b10e <_printf_i+0x1f6>
 800afc4:	6820      	ldr	r0, [r4, #0]
 800afc6:	6829      	ldr	r1, [r5, #0]
 800afc8:	0606      	lsls	r6, r0, #24
 800afca:	f101 0304 	add.w	r3, r1, #4
 800afce:	d50a      	bpl.n	800afe6 <_printf_i+0xce>
 800afd0:	680e      	ldr	r6, [r1, #0]
 800afd2:	602b      	str	r3, [r5, #0]
 800afd4:	2e00      	cmp	r6, #0
 800afd6:	da03      	bge.n	800afe0 <_printf_i+0xc8>
 800afd8:	232d      	movs	r3, #45	; 0x2d
 800afda:	4276      	negs	r6, r6
 800afdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afe0:	230a      	movs	r3, #10
 800afe2:	485e      	ldr	r0, [pc, #376]	; (800b15c <_printf_i+0x244>)
 800afe4:	e019      	b.n	800b01a <_printf_i+0x102>
 800afe6:	680e      	ldr	r6, [r1, #0]
 800afe8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800afec:	602b      	str	r3, [r5, #0]
 800afee:	bf18      	it	ne
 800aff0:	b236      	sxthne	r6, r6
 800aff2:	e7ef      	b.n	800afd4 <_printf_i+0xbc>
 800aff4:	682b      	ldr	r3, [r5, #0]
 800aff6:	6820      	ldr	r0, [r4, #0]
 800aff8:	1d19      	adds	r1, r3, #4
 800affa:	6029      	str	r1, [r5, #0]
 800affc:	0601      	lsls	r1, r0, #24
 800affe:	d501      	bpl.n	800b004 <_printf_i+0xec>
 800b000:	681e      	ldr	r6, [r3, #0]
 800b002:	e002      	b.n	800b00a <_printf_i+0xf2>
 800b004:	0646      	lsls	r6, r0, #25
 800b006:	d5fb      	bpl.n	800b000 <_printf_i+0xe8>
 800b008:	881e      	ldrh	r6, [r3, #0]
 800b00a:	2f6f      	cmp	r7, #111	; 0x6f
 800b00c:	bf0c      	ite	eq
 800b00e:	2308      	moveq	r3, #8
 800b010:	230a      	movne	r3, #10
 800b012:	4852      	ldr	r0, [pc, #328]	; (800b15c <_printf_i+0x244>)
 800b014:	2100      	movs	r1, #0
 800b016:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b01a:	6865      	ldr	r5, [r4, #4]
 800b01c:	2d00      	cmp	r5, #0
 800b01e:	bfa8      	it	ge
 800b020:	6821      	ldrge	r1, [r4, #0]
 800b022:	60a5      	str	r5, [r4, #8]
 800b024:	bfa4      	itt	ge
 800b026:	f021 0104 	bicge.w	r1, r1, #4
 800b02a:	6021      	strge	r1, [r4, #0]
 800b02c:	b90e      	cbnz	r6, 800b032 <_printf_i+0x11a>
 800b02e:	2d00      	cmp	r5, #0
 800b030:	d04d      	beq.n	800b0ce <_printf_i+0x1b6>
 800b032:	4615      	mov	r5, r2
 800b034:	fbb6 f1f3 	udiv	r1, r6, r3
 800b038:	fb03 6711 	mls	r7, r3, r1, r6
 800b03c:	5dc7      	ldrb	r7, [r0, r7]
 800b03e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b042:	4637      	mov	r7, r6
 800b044:	42bb      	cmp	r3, r7
 800b046:	460e      	mov	r6, r1
 800b048:	d9f4      	bls.n	800b034 <_printf_i+0x11c>
 800b04a:	2b08      	cmp	r3, #8
 800b04c:	d10b      	bne.n	800b066 <_printf_i+0x14e>
 800b04e:	6823      	ldr	r3, [r4, #0]
 800b050:	07de      	lsls	r6, r3, #31
 800b052:	d508      	bpl.n	800b066 <_printf_i+0x14e>
 800b054:	6923      	ldr	r3, [r4, #16]
 800b056:	6861      	ldr	r1, [r4, #4]
 800b058:	4299      	cmp	r1, r3
 800b05a:	bfde      	ittt	le
 800b05c:	2330      	movle	r3, #48	; 0x30
 800b05e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b062:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b066:	1b52      	subs	r2, r2, r5
 800b068:	6122      	str	r2, [r4, #16]
 800b06a:	464b      	mov	r3, r9
 800b06c:	4621      	mov	r1, r4
 800b06e:	4640      	mov	r0, r8
 800b070:	f8cd a000 	str.w	sl, [sp]
 800b074:	aa03      	add	r2, sp, #12
 800b076:	f7ff fedf 	bl	800ae38 <_printf_common>
 800b07a:	3001      	adds	r0, #1
 800b07c:	d14c      	bne.n	800b118 <_printf_i+0x200>
 800b07e:	f04f 30ff 	mov.w	r0, #4294967295
 800b082:	b004      	add	sp, #16
 800b084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b088:	4834      	ldr	r0, [pc, #208]	; (800b15c <_printf_i+0x244>)
 800b08a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b08e:	6829      	ldr	r1, [r5, #0]
 800b090:	6823      	ldr	r3, [r4, #0]
 800b092:	f851 6b04 	ldr.w	r6, [r1], #4
 800b096:	6029      	str	r1, [r5, #0]
 800b098:	061d      	lsls	r5, r3, #24
 800b09a:	d514      	bpl.n	800b0c6 <_printf_i+0x1ae>
 800b09c:	07df      	lsls	r7, r3, #31
 800b09e:	bf44      	itt	mi
 800b0a0:	f043 0320 	orrmi.w	r3, r3, #32
 800b0a4:	6023      	strmi	r3, [r4, #0]
 800b0a6:	b91e      	cbnz	r6, 800b0b0 <_printf_i+0x198>
 800b0a8:	6823      	ldr	r3, [r4, #0]
 800b0aa:	f023 0320 	bic.w	r3, r3, #32
 800b0ae:	6023      	str	r3, [r4, #0]
 800b0b0:	2310      	movs	r3, #16
 800b0b2:	e7af      	b.n	800b014 <_printf_i+0xfc>
 800b0b4:	6823      	ldr	r3, [r4, #0]
 800b0b6:	f043 0320 	orr.w	r3, r3, #32
 800b0ba:	6023      	str	r3, [r4, #0]
 800b0bc:	2378      	movs	r3, #120	; 0x78
 800b0be:	4828      	ldr	r0, [pc, #160]	; (800b160 <_printf_i+0x248>)
 800b0c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b0c4:	e7e3      	b.n	800b08e <_printf_i+0x176>
 800b0c6:	0659      	lsls	r1, r3, #25
 800b0c8:	bf48      	it	mi
 800b0ca:	b2b6      	uxthmi	r6, r6
 800b0cc:	e7e6      	b.n	800b09c <_printf_i+0x184>
 800b0ce:	4615      	mov	r5, r2
 800b0d0:	e7bb      	b.n	800b04a <_printf_i+0x132>
 800b0d2:	682b      	ldr	r3, [r5, #0]
 800b0d4:	6826      	ldr	r6, [r4, #0]
 800b0d6:	1d18      	adds	r0, r3, #4
 800b0d8:	6961      	ldr	r1, [r4, #20]
 800b0da:	6028      	str	r0, [r5, #0]
 800b0dc:	0635      	lsls	r5, r6, #24
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	d501      	bpl.n	800b0e6 <_printf_i+0x1ce>
 800b0e2:	6019      	str	r1, [r3, #0]
 800b0e4:	e002      	b.n	800b0ec <_printf_i+0x1d4>
 800b0e6:	0670      	lsls	r0, r6, #25
 800b0e8:	d5fb      	bpl.n	800b0e2 <_printf_i+0x1ca>
 800b0ea:	8019      	strh	r1, [r3, #0]
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	4615      	mov	r5, r2
 800b0f0:	6123      	str	r3, [r4, #16]
 800b0f2:	e7ba      	b.n	800b06a <_printf_i+0x152>
 800b0f4:	682b      	ldr	r3, [r5, #0]
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	1d1a      	adds	r2, r3, #4
 800b0fa:	602a      	str	r2, [r5, #0]
 800b0fc:	681d      	ldr	r5, [r3, #0]
 800b0fe:	6862      	ldr	r2, [r4, #4]
 800b100:	4628      	mov	r0, r5
 800b102:	f000 fed7 	bl	800beb4 <memchr>
 800b106:	b108      	cbz	r0, 800b10c <_printf_i+0x1f4>
 800b108:	1b40      	subs	r0, r0, r5
 800b10a:	6060      	str	r0, [r4, #4]
 800b10c:	6863      	ldr	r3, [r4, #4]
 800b10e:	6123      	str	r3, [r4, #16]
 800b110:	2300      	movs	r3, #0
 800b112:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b116:	e7a8      	b.n	800b06a <_printf_i+0x152>
 800b118:	462a      	mov	r2, r5
 800b11a:	4649      	mov	r1, r9
 800b11c:	4640      	mov	r0, r8
 800b11e:	6923      	ldr	r3, [r4, #16]
 800b120:	47d0      	blx	sl
 800b122:	3001      	adds	r0, #1
 800b124:	d0ab      	beq.n	800b07e <_printf_i+0x166>
 800b126:	6823      	ldr	r3, [r4, #0]
 800b128:	079b      	lsls	r3, r3, #30
 800b12a:	d413      	bmi.n	800b154 <_printf_i+0x23c>
 800b12c:	68e0      	ldr	r0, [r4, #12]
 800b12e:	9b03      	ldr	r3, [sp, #12]
 800b130:	4298      	cmp	r0, r3
 800b132:	bfb8      	it	lt
 800b134:	4618      	movlt	r0, r3
 800b136:	e7a4      	b.n	800b082 <_printf_i+0x16a>
 800b138:	2301      	movs	r3, #1
 800b13a:	4632      	mov	r2, r6
 800b13c:	4649      	mov	r1, r9
 800b13e:	4640      	mov	r0, r8
 800b140:	47d0      	blx	sl
 800b142:	3001      	adds	r0, #1
 800b144:	d09b      	beq.n	800b07e <_printf_i+0x166>
 800b146:	3501      	adds	r5, #1
 800b148:	68e3      	ldr	r3, [r4, #12]
 800b14a:	9903      	ldr	r1, [sp, #12]
 800b14c:	1a5b      	subs	r3, r3, r1
 800b14e:	42ab      	cmp	r3, r5
 800b150:	dcf2      	bgt.n	800b138 <_printf_i+0x220>
 800b152:	e7eb      	b.n	800b12c <_printf_i+0x214>
 800b154:	2500      	movs	r5, #0
 800b156:	f104 0619 	add.w	r6, r4, #25
 800b15a:	e7f5      	b.n	800b148 <_printf_i+0x230>
 800b15c:	0800d742 	.word	0x0800d742
 800b160:	0800d753 	.word	0x0800d753

0800b164 <siprintf>:
 800b164:	b40e      	push	{r1, r2, r3}
 800b166:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b16a:	b500      	push	{lr}
 800b16c:	b09c      	sub	sp, #112	; 0x70
 800b16e:	ab1d      	add	r3, sp, #116	; 0x74
 800b170:	9002      	str	r0, [sp, #8]
 800b172:	9006      	str	r0, [sp, #24]
 800b174:	9107      	str	r1, [sp, #28]
 800b176:	9104      	str	r1, [sp, #16]
 800b178:	4808      	ldr	r0, [pc, #32]	; (800b19c <siprintf+0x38>)
 800b17a:	4909      	ldr	r1, [pc, #36]	; (800b1a0 <siprintf+0x3c>)
 800b17c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b180:	9105      	str	r1, [sp, #20]
 800b182:	6800      	ldr	r0, [r0, #0]
 800b184:	a902      	add	r1, sp, #8
 800b186:	9301      	str	r3, [sp, #4]
 800b188:	f001 fb7e 	bl	800c888 <_svfiprintf_r>
 800b18c:	2200      	movs	r2, #0
 800b18e:	9b02      	ldr	r3, [sp, #8]
 800b190:	701a      	strb	r2, [r3, #0]
 800b192:	b01c      	add	sp, #112	; 0x70
 800b194:	f85d eb04 	ldr.w	lr, [sp], #4
 800b198:	b003      	add	sp, #12
 800b19a:	4770      	bx	lr
 800b19c:	2000006c 	.word	0x2000006c
 800b1a0:	ffff0208 	.word	0xffff0208

0800b1a4 <quorem>:
 800b1a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a8:	6903      	ldr	r3, [r0, #16]
 800b1aa:	690c      	ldr	r4, [r1, #16]
 800b1ac:	4607      	mov	r7, r0
 800b1ae:	42a3      	cmp	r3, r4
 800b1b0:	f2c0 8082 	blt.w	800b2b8 <quorem+0x114>
 800b1b4:	3c01      	subs	r4, #1
 800b1b6:	f100 0514 	add.w	r5, r0, #20
 800b1ba:	f101 0814 	add.w	r8, r1, #20
 800b1be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1c2:	9301      	str	r3, [sp, #4]
 800b1c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b1c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b1d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b1d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b1dc:	d331      	bcc.n	800b242 <quorem+0x9e>
 800b1de:	f04f 0e00 	mov.w	lr, #0
 800b1e2:	4640      	mov	r0, r8
 800b1e4:	46ac      	mov	ip, r5
 800b1e6:	46f2      	mov	sl, lr
 800b1e8:	f850 2b04 	ldr.w	r2, [r0], #4
 800b1ec:	b293      	uxth	r3, r2
 800b1ee:	fb06 e303 	mla	r3, r6, r3, lr
 800b1f2:	0c12      	lsrs	r2, r2, #16
 800b1f4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	fb06 e202 	mla	r2, r6, r2, lr
 800b1fe:	ebaa 0303 	sub.w	r3, sl, r3
 800b202:	f8dc a000 	ldr.w	sl, [ip]
 800b206:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b20a:	fa1f fa8a 	uxth.w	sl, sl
 800b20e:	4453      	add	r3, sl
 800b210:	f8dc a000 	ldr.w	sl, [ip]
 800b214:	b292      	uxth	r2, r2
 800b216:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b21a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b21e:	b29b      	uxth	r3, r3
 800b220:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b224:	4581      	cmp	r9, r0
 800b226:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b22a:	f84c 3b04 	str.w	r3, [ip], #4
 800b22e:	d2db      	bcs.n	800b1e8 <quorem+0x44>
 800b230:	f855 300b 	ldr.w	r3, [r5, fp]
 800b234:	b92b      	cbnz	r3, 800b242 <quorem+0x9e>
 800b236:	9b01      	ldr	r3, [sp, #4]
 800b238:	3b04      	subs	r3, #4
 800b23a:	429d      	cmp	r5, r3
 800b23c:	461a      	mov	r2, r3
 800b23e:	d32f      	bcc.n	800b2a0 <quorem+0xfc>
 800b240:	613c      	str	r4, [r7, #16]
 800b242:	4638      	mov	r0, r7
 800b244:	f001 f8d0 	bl	800c3e8 <__mcmp>
 800b248:	2800      	cmp	r0, #0
 800b24a:	db25      	blt.n	800b298 <quorem+0xf4>
 800b24c:	4628      	mov	r0, r5
 800b24e:	f04f 0c00 	mov.w	ip, #0
 800b252:	3601      	adds	r6, #1
 800b254:	f858 1b04 	ldr.w	r1, [r8], #4
 800b258:	f8d0 e000 	ldr.w	lr, [r0]
 800b25c:	b28b      	uxth	r3, r1
 800b25e:	ebac 0303 	sub.w	r3, ip, r3
 800b262:	fa1f f28e 	uxth.w	r2, lr
 800b266:	4413      	add	r3, r2
 800b268:	0c0a      	lsrs	r2, r1, #16
 800b26a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b26e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b272:	b29b      	uxth	r3, r3
 800b274:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b278:	45c1      	cmp	r9, r8
 800b27a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b27e:	f840 3b04 	str.w	r3, [r0], #4
 800b282:	d2e7      	bcs.n	800b254 <quorem+0xb0>
 800b284:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b288:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b28c:	b922      	cbnz	r2, 800b298 <quorem+0xf4>
 800b28e:	3b04      	subs	r3, #4
 800b290:	429d      	cmp	r5, r3
 800b292:	461a      	mov	r2, r3
 800b294:	d30a      	bcc.n	800b2ac <quorem+0x108>
 800b296:	613c      	str	r4, [r7, #16]
 800b298:	4630      	mov	r0, r6
 800b29a:	b003      	add	sp, #12
 800b29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a0:	6812      	ldr	r2, [r2, #0]
 800b2a2:	3b04      	subs	r3, #4
 800b2a4:	2a00      	cmp	r2, #0
 800b2a6:	d1cb      	bne.n	800b240 <quorem+0x9c>
 800b2a8:	3c01      	subs	r4, #1
 800b2aa:	e7c6      	b.n	800b23a <quorem+0x96>
 800b2ac:	6812      	ldr	r2, [r2, #0]
 800b2ae:	3b04      	subs	r3, #4
 800b2b0:	2a00      	cmp	r2, #0
 800b2b2:	d1f0      	bne.n	800b296 <quorem+0xf2>
 800b2b4:	3c01      	subs	r4, #1
 800b2b6:	e7eb      	b.n	800b290 <quorem+0xec>
 800b2b8:	2000      	movs	r0, #0
 800b2ba:	e7ee      	b.n	800b29a <quorem+0xf6>
 800b2bc:	0000      	movs	r0, r0
	...

0800b2c0 <_dtoa_r>:
 800b2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c4:	4616      	mov	r6, r2
 800b2c6:	461f      	mov	r7, r3
 800b2c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b2ca:	b099      	sub	sp, #100	; 0x64
 800b2cc:	4605      	mov	r5, r0
 800b2ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b2d2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b2d6:	b974      	cbnz	r4, 800b2f6 <_dtoa_r+0x36>
 800b2d8:	2010      	movs	r0, #16
 800b2da:	f000 fde3 	bl	800bea4 <malloc>
 800b2de:	4602      	mov	r2, r0
 800b2e0:	6268      	str	r0, [r5, #36]	; 0x24
 800b2e2:	b920      	cbnz	r0, 800b2ee <_dtoa_r+0x2e>
 800b2e4:	21ea      	movs	r1, #234	; 0xea
 800b2e6:	4ba8      	ldr	r3, [pc, #672]	; (800b588 <_dtoa_r+0x2c8>)
 800b2e8:	48a8      	ldr	r0, [pc, #672]	; (800b58c <_dtoa_r+0x2cc>)
 800b2ea:	f001 fbdd 	bl	800caa8 <__assert_func>
 800b2ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2f2:	6004      	str	r4, [r0, #0]
 800b2f4:	60c4      	str	r4, [r0, #12]
 800b2f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b2f8:	6819      	ldr	r1, [r3, #0]
 800b2fa:	b151      	cbz	r1, 800b312 <_dtoa_r+0x52>
 800b2fc:	685a      	ldr	r2, [r3, #4]
 800b2fe:	2301      	movs	r3, #1
 800b300:	4093      	lsls	r3, r2
 800b302:	604a      	str	r2, [r1, #4]
 800b304:	608b      	str	r3, [r1, #8]
 800b306:	4628      	mov	r0, r5
 800b308:	f000 fe30 	bl	800bf6c <_Bfree>
 800b30c:	2200      	movs	r2, #0
 800b30e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b310:	601a      	str	r2, [r3, #0]
 800b312:	1e3b      	subs	r3, r7, #0
 800b314:	bfaf      	iteee	ge
 800b316:	2300      	movge	r3, #0
 800b318:	2201      	movlt	r2, #1
 800b31a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b31e:	9305      	strlt	r3, [sp, #20]
 800b320:	bfa8      	it	ge
 800b322:	f8c8 3000 	strge.w	r3, [r8]
 800b326:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b32a:	4b99      	ldr	r3, [pc, #612]	; (800b590 <_dtoa_r+0x2d0>)
 800b32c:	bfb8      	it	lt
 800b32e:	f8c8 2000 	strlt.w	r2, [r8]
 800b332:	ea33 0309 	bics.w	r3, r3, r9
 800b336:	d119      	bne.n	800b36c <_dtoa_r+0xac>
 800b338:	f242 730f 	movw	r3, #9999	; 0x270f
 800b33c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b33e:	6013      	str	r3, [r2, #0]
 800b340:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b344:	4333      	orrs	r3, r6
 800b346:	f000 857f 	beq.w	800be48 <_dtoa_r+0xb88>
 800b34a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b34c:	b953      	cbnz	r3, 800b364 <_dtoa_r+0xa4>
 800b34e:	4b91      	ldr	r3, [pc, #580]	; (800b594 <_dtoa_r+0x2d4>)
 800b350:	e022      	b.n	800b398 <_dtoa_r+0xd8>
 800b352:	4b91      	ldr	r3, [pc, #580]	; (800b598 <_dtoa_r+0x2d8>)
 800b354:	9303      	str	r3, [sp, #12]
 800b356:	3308      	adds	r3, #8
 800b358:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b35a:	6013      	str	r3, [r2, #0]
 800b35c:	9803      	ldr	r0, [sp, #12]
 800b35e:	b019      	add	sp, #100	; 0x64
 800b360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b364:	4b8b      	ldr	r3, [pc, #556]	; (800b594 <_dtoa_r+0x2d4>)
 800b366:	9303      	str	r3, [sp, #12]
 800b368:	3303      	adds	r3, #3
 800b36a:	e7f5      	b.n	800b358 <_dtoa_r+0x98>
 800b36c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b370:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b374:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b378:	2200      	movs	r2, #0
 800b37a:	2300      	movs	r3, #0
 800b37c:	f7f5 fb14 	bl	80009a8 <__aeabi_dcmpeq>
 800b380:	4680      	mov	r8, r0
 800b382:	b158      	cbz	r0, 800b39c <_dtoa_r+0xdc>
 800b384:	2301      	movs	r3, #1
 800b386:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b388:	6013      	str	r3, [r2, #0]
 800b38a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f000 8558 	beq.w	800be42 <_dtoa_r+0xb82>
 800b392:	4882      	ldr	r0, [pc, #520]	; (800b59c <_dtoa_r+0x2dc>)
 800b394:	6018      	str	r0, [r3, #0]
 800b396:	1e43      	subs	r3, r0, #1
 800b398:	9303      	str	r3, [sp, #12]
 800b39a:	e7df      	b.n	800b35c <_dtoa_r+0x9c>
 800b39c:	ab16      	add	r3, sp, #88	; 0x58
 800b39e:	9301      	str	r3, [sp, #4]
 800b3a0:	ab17      	add	r3, sp, #92	; 0x5c
 800b3a2:	9300      	str	r3, [sp, #0]
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b3aa:	f001 f8c5 	bl	800c538 <__d2b>
 800b3ae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b3b2:	4683      	mov	fp, r0
 800b3b4:	2c00      	cmp	r4, #0
 800b3b6:	d07f      	beq.n	800b4b8 <_dtoa_r+0x1f8>
 800b3b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b3bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3be:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b3c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3c6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b3ca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b3ce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	4b72      	ldr	r3, [pc, #456]	; (800b5a0 <_dtoa_r+0x2e0>)
 800b3d6:	f7f4 fec7 	bl	8000168 <__aeabi_dsub>
 800b3da:	a365      	add	r3, pc, #404	; (adr r3, 800b570 <_dtoa_r+0x2b0>)
 800b3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e0:	f7f5 f87a 	bl	80004d8 <__aeabi_dmul>
 800b3e4:	a364      	add	r3, pc, #400	; (adr r3, 800b578 <_dtoa_r+0x2b8>)
 800b3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ea:	f7f4 febf 	bl	800016c <__adddf3>
 800b3ee:	4606      	mov	r6, r0
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	460f      	mov	r7, r1
 800b3f4:	f7f5 f806 	bl	8000404 <__aeabi_i2d>
 800b3f8:	a361      	add	r3, pc, #388	; (adr r3, 800b580 <_dtoa_r+0x2c0>)
 800b3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fe:	f7f5 f86b 	bl	80004d8 <__aeabi_dmul>
 800b402:	4602      	mov	r2, r0
 800b404:	460b      	mov	r3, r1
 800b406:	4630      	mov	r0, r6
 800b408:	4639      	mov	r1, r7
 800b40a:	f7f4 feaf 	bl	800016c <__adddf3>
 800b40e:	4606      	mov	r6, r0
 800b410:	460f      	mov	r7, r1
 800b412:	f7f5 fb11 	bl	8000a38 <__aeabi_d2iz>
 800b416:	2200      	movs	r2, #0
 800b418:	4682      	mov	sl, r0
 800b41a:	2300      	movs	r3, #0
 800b41c:	4630      	mov	r0, r6
 800b41e:	4639      	mov	r1, r7
 800b420:	f7f5 facc 	bl	80009bc <__aeabi_dcmplt>
 800b424:	b148      	cbz	r0, 800b43a <_dtoa_r+0x17a>
 800b426:	4650      	mov	r0, sl
 800b428:	f7f4 ffec 	bl	8000404 <__aeabi_i2d>
 800b42c:	4632      	mov	r2, r6
 800b42e:	463b      	mov	r3, r7
 800b430:	f7f5 faba 	bl	80009a8 <__aeabi_dcmpeq>
 800b434:	b908      	cbnz	r0, 800b43a <_dtoa_r+0x17a>
 800b436:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b43a:	f1ba 0f16 	cmp.w	sl, #22
 800b43e:	d858      	bhi.n	800b4f2 <_dtoa_r+0x232>
 800b440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b444:	4b57      	ldr	r3, [pc, #348]	; (800b5a4 <_dtoa_r+0x2e4>)
 800b446:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44e:	f7f5 fab5 	bl	80009bc <__aeabi_dcmplt>
 800b452:	2800      	cmp	r0, #0
 800b454:	d04f      	beq.n	800b4f6 <_dtoa_r+0x236>
 800b456:	2300      	movs	r3, #0
 800b458:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b45c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b45e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b460:	1b1c      	subs	r4, r3, r4
 800b462:	1e63      	subs	r3, r4, #1
 800b464:	9309      	str	r3, [sp, #36]	; 0x24
 800b466:	bf49      	itett	mi
 800b468:	f1c4 0301 	rsbmi	r3, r4, #1
 800b46c:	2300      	movpl	r3, #0
 800b46e:	9306      	strmi	r3, [sp, #24]
 800b470:	2300      	movmi	r3, #0
 800b472:	bf54      	ite	pl
 800b474:	9306      	strpl	r3, [sp, #24]
 800b476:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b478:	f1ba 0f00 	cmp.w	sl, #0
 800b47c:	db3d      	blt.n	800b4fa <_dtoa_r+0x23a>
 800b47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b480:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b484:	4453      	add	r3, sl
 800b486:	9309      	str	r3, [sp, #36]	; 0x24
 800b488:	2300      	movs	r3, #0
 800b48a:	930a      	str	r3, [sp, #40]	; 0x28
 800b48c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b48e:	2b09      	cmp	r3, #9
 800b490:	f200 808c 	bhi.w	800b5ac <_dtoa_r+0x2ec>
 800b494:	2b05      	cmp	r3, #5
 800b496:	bfc4      	itt	gt
 800b498:	3b04      	subgt	r3, #4
 800b49a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b49c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b49e:	bfc8      	it	gt
 800b4a0:	2400      	movgt	r4, #0
 800b4a2:	f1a3 0302 	sub.w	r3, r3, #2
 800b4a6:	bfd8      	it	le
 800b4a8:	2401      	movle	r4, #1
 800b4aa:	2b03      	cmp	r3, #3
 800b4ac:	f200 808a 	bhi.w	800b5c4 <_dtoa_r+0x304>
 800b4b0:	e8df f003 	tbb	[pc, r3]
 800b4b4:	5b4d4f2d 	.word	0x5b4d4f2d
 800b4b8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b4bc:	441c      	add	r4, r3
 800b4be:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b4c2:	2b20      	cmp	r3, #32
 800b4c4:	bfc3      	ittte	gt
 800b4c6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b4ca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b4ce:	fa09 f303 	lslgt.w	r3, r9, r3
 800b4d2:	f1c3 0320 	rsble	r3, r3, #32
 800b4d6:	bfc6      	itte	gt
 800b4d8:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b4dc:	4318      	orrgt	r0, r3
 800b4de:	fa06 f003 	lslle.w	r0, r6, r3
 800b4e2:	f7f4 ff7f 	bl	80003e4 <__aeabi_ui2d>
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b4ec:	3c01      	subs	r4, #1
 800b4ee:	9313      	str	r3, [sp, #76]	; 0x4c
 800b4f0:	e76f      	b.n	800b3d2 <_dtoa_r+0x112>
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	e7b2      	b.n	800b45c <_dtoa_r+0x19c>
 800b4f6:	900f      	str	r0, [sp, #60]	; 0x3c
 800b4f8:	e7b1      	b.n	800b45e <_dtoa_r+0x19e>
 800b4fa:	9b06      	ldr	r3, [sp, #24]
 800b4fc:	eba3 030a 	sub.w	r3, r3, sl
 800b500:	9306      	str	r3, [sp, #24]
 800b502:	f1ca 0300 	rsb	r3, sl, #0
 800b506:	930a      	str	r3, [sp, #40]	; 0x28
 800b508:	2300      	movs	r3, #0
 800b50a:	930e      	str	r3, [sp, #56]	; 0x38
 800b50c:	e7be      	b.n	800b48c <_dtoa_r+0x1cc>
 800b50e:	2300      	movs	r3, #0
 800b510:	930b      	str	r3, [sp, #44]	; 0x2c
 800b512:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b514:	2b00      	cmp	r3, #0
 800b516:	dc58      	bgt.n	800b5ca <_dtoa_r+0x30a>
 800b518:	f04f 0901 	mov.w	r9, #1
 800b51c:	464b      	mov	r3, r9
 800b51e:	f8cd 9020 	str.w	r9, [sp, #32]
 800b522:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800b526:	2200      	movs	r2, #0
 800b528:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b52a:	6042      	str	r2, [r0, #4]
 800b52c:	2204      	movs	r2, #4
 800b52e:	f102 0614 	add.w	r6, r2, #20
 800b532:	429e      	cmp	r6, r3
 800b534:	6841      	ldr	r1, [r0, #4]
 800b536:	d94e      	bls.n	800b5d6 <_dtoa_r+0x316>
 800b538:	4628      	mov	r0, r5
 800b53a:	f000 fcd7 	bl	800beec <_Balloc>
 800b53e:	9003      	str	r0, [sp, #12]
 800b540:	2800      	cmp	r0, #0
 800b542:	d14c      	bne.n	800b5de <_dtoa_r+0x31e>
 800b544:	4602      	mov	r2, r0
 800b546:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b54a:	4b17      	ldr	r3, [pc, #92]	; (800b5a8 <_dtoa_r+0x2e8>)
 800b54c:	e6cc      	b.n	800b2e8 <_dtoa_r+0x28>
 800b54e:	2301      	movs	r3, #1
 800b550:	e7de      	b.n	800b510 <_dtoa_r+0x250>
 800b552:	2300      	movs	r3, #0
 800b554:	930b      	str	r3, [sp, #44]	; 0x2c
 800b556:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b558:	eb0a 0903 	add.w	r9, sl, r3
 800b55c:	f109 0301 	add.w	r3, r9, #1
 800b560:	2b01      	cmp	r3, #1
 800b562:	9308      	str	r3, [sp, #32]
 800b564:	bfb8      	it	lt
 800b566:	2301      	movlt	r3, #1
 800b568:	e7dd      	b.n	800b526 <_dtoa_r+0x266>
 800b56a:	2301      	movs	r3, #1
 800b56c:	e7f2      	b.n	800b554 <_dtoa_r+0x294>
 800b56e:	bf00      	nop
 800b570:	636f4361 	.word	0x636f4361
 800b574:	3fd287a7 	.word	0x3fd287a7
 800b578:	8b60c8b3 	.word	0x8b60c8b3
 800b57c:	3fc68a28 	.word	0x3fc68a28
 800b580:	509f79fb 	.word	0x509f79fb
 800b584:	3fd34413 	.word	0x3fd34413
 800b588:	0800d771 	.word	0x0800d771
 800b58c:	0800d788 	.word	0x0800d788
 800b590:	7ff00000 	.word	0x7ff00000
 800b594:	0800d76d 	.word	0x0800d76d
 800b598:	0800d764 	.word	0x0800d764
 800b59c:	0800d741 	.word	0x0800d741
 800b5a0:	3ff80000 	.word	0x3ff80000
 800b5a4:	0800d878 	.word	0x0800d878
 800b5a8:	0800d7e3 	.word	0x0800d7e3
 800b5ac:	2401      	movs	r4, #1
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	940b      	str	r4, [sp, #44]	; 0x2c
 800b5b2:	9322      	str	r3, [sp, #136]	; 0x88
 800b5b4:	f04f 39ff 	mov.w	r9, #4294967295
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	2312      	movs	r3, #18
 800b5bc:	f8cd 9020 	str.w	r9, [sp, #32]
 800b5c0:	9223      	str	r2, [sp, #140]	; 0x8c
 800b5c2:	e7b0      	b.n	800b526 <_dtoa_r+0x266>
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5c8:	e7f4      	b.n	800b5b4 <_dtoa_r+0x2f4>
 800b5ca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800b5ce:	464b      	mov	r3, r9
 800b5d0:	f8cd 9020 	str.w	r9, [sp, #32]
 800b5d4:	e7a7      	b.n	800b526 <_dtoa_r+0x266>
 800b5d6:	3101      	adds	r1, #1
 800b5d8:	6041      	str	r1, [r0, #4]
 800b5da:	0052      	lsls	r2, r2, #1
 800b5dc:	e7a7      	b.n	800b52e <_dtoa_r+0x26e>
 800b5de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b5e0:	9a03      	ldr	r2, [sp, #12]
 800b5e2:	601a      	str	r2, [r3, #0]
 800b5e4:	9b08      	ldr	r3, [sp, #32]
 800b5e6:	2b0e      	cmp	r3, #14
 800b5e8:	f200 80a8 	bhi.w	800b73c <_dtoa_r+0x47c>
 800b5ec:	2c00      	cmp	r4, #0
 800b5ee:	f000 80a5 	beq.w	800b73c <_dtoa_r+0x47c>
 800b5f2:	f1ba 0f00 	cmp.w	sl, #0
 800b5f6:	dd34      	ble.n	800b662 <_dtoa_r+0x3a2>
 800b5f8:	4a9a      	ldr	r2, [pc, #616]	; (800b864 <_dtoa_r+0x5a4>)
 800b5fa:	f00a 030f 	and.w	r3, sl, #15
 800b5fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b602:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b606:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b60a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b60e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800b612:	d016      	beq.n	800b642 <_dtoa_r+0x382>
 800b614:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b618:	4b93      	ldr	r3, [pc, #588]	; (800b868 <_dtoa_r+0x5a8>)
 800b61a:	2703      	movs	r7, #3
 800b61c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b620:	f7f5 f884 	bl	800072c <__aeabi_ddiv>
 800b624:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b628:	f004 040f 	and.w	r4, r4, #15
 800b62c:	4e8e      	ldr	r6, [pc, #568]	; (800b868 <_dtoa_r+0x5a8>)
 800b62e:	b954      	cbnz	r4, 800b646 <_dtoa_r+0x386>
 800b630:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b634:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b638:	f7f5 f878 	bl	800072c <__aeabi_ddiv>
 800b63c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b640:	e029      	b.n	800b696 <_dtoa_r+0x3d6>
 800b642:	2702      	movs	r7, #2
 800b644:	e7f2      	b.n	800b62c <_dtoa_r+0x36c>
 800b646:	07e1      	lsls	r1, r4, #31
 800b648:	d508      	bpl.n	800b65c <_dtoa_r+0x39c>
 800b64a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b64e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b652:	f7f4 ff41 	bl	80004d8 <__aeabi_dmul>
 800b656:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b65a:	3701      	adds	r7, #1
 800b65c:	1064      	asrs	r4, r4, #1
 800b65e:	3608      	adds	r6, #8
 800b660:	e7e5      	b.n	800b62e <_dtoa_r+0x36e>
 800b662:	f000 80a5 	beq.w	800b7b0 <_dtoa_r+0x4f0>
 800b666:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b66a:	f1ca 0400 	rsb	r4, sl, #0
 800b66e:	4b7d      	ldr	r3, [pc, #500]	; (800b864 <_dtoa_r+0x5a4>)
 800b670:	f004 020f 	and.w	r2, r4, #15
 800b674:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67c:	f7f4 ff2c 	bl	80004d8 <__aeabi_dmul>
 800b680:	2702      	movs	r7, #2
 800b682:	2300      	movs	r3, #0
 800b684:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b688:	4e77      	ldr	r6, [pc, #476]	; (800b868 <_dtoa_r+0x5a8>)
 800b68a:	1124      	asrs	r4, r4, #4
 800b68c:	2c00      	cmp	r4, #0
 800b68e:	f040 8084 	bne.w	800b79a <_dtoa_r+0x4da>
 800b692:	2b00      	cmp	r3, #0
 800b694:	d1d2      	bne.n	800b63c <_dtoa_r+0x37c>
 800b696:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f000 808b 	beq.w	800b7b4 <_dtoa_r+0x4f4>
 800b69e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b6a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b6a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	4b6f      	ldr	r3, [pc, #444]	; (800b86c <_dtoa_r+0x5ac>)
 800b6ae:	f7f5 f985 	bl	80009bc <__aeabi_dcmplt>
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d07e      	beq.n	800b7b4 <_dtoa_r+0x4f4>
 800b6b6:	9b08      	ldr	r3, [sp, #32]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d07b      	beq.n	800b7b4 <_dtoa_r+0x4f4>
 800b6bc:	f1b9 0f00 	cmp.w	r9, #0
 800b6c0:	dd38      	ble.n	800b734 <_dtoa_r+0x474>
 800b6c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	4b69      	ldr	r3, [pc, #420]	; (800b870 <_dtoa_r+0x5b0>)
 800b6ca:	f7f4 ff05 	bl	80004d8 <__aeabi_dmul>
 800b6ce:	464c      	mov	r4, r9
 800b6d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6d4:	f10a 38ff 	add.w	r8, sl, #4294967295
 800b6d8:	3701      	adds	r7, #1
 800b6da:	4638      	mov	r0, r7
 800b6dc:	f7f4 fe92 	bl	8000404 <__aeabi_i2d>
 800b6e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6e4:	f7f4 fef8 	bl	80004d8 <__aeabi_dmul>
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	4b62      	ldr	r3, [pc, #392]	; (800b874 <_dtoa_r+0x5b4>)
 800b6ec:	f7f4 fd3e 	bl	800016c <__adddf3>
 800b6f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b6f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b6f8:	9611      	str	r6, [sp, #68]	; 0x44
 800b6fa:	2c00      	cmp	r4, #0
 800b6fc:	d15d      	bne.n	800b7ba <_dtoa_r+0x4fa>
 800b6fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b702:	2200      	movs	r2, #0
 800b704:	4b5c      	ldr	r3, [pc, #368]	; (800b878 <_dtoa_r+0x5b8>)
 800b706:	f7f4 fd2f 	bl	8000168 <__aeabi_dsub>
 800b70a:	4602      	mov	r2, r0
 800b70c:	460b      	mov	r3, r1
 800b70e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b712:	4633      	mov	r3, r6
 800b714:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b716:	f7f5 f96f 	bl	80009f8 <__aeabi_dcmpgt>
 800b71a:	2800      	cmp	r0, #0
 800b71c:	f040 829c 	bne.w	800bc58 <_dtoa_r+0x998>
 800b720:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b724:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b726:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b72a:	f7f5 f947 	bl	80009bc <__aeabi_dcmplt>
 800b72e:	2800      	cmp	r0, #0
 800b730:	f040 8290 	bne.w	800bc54 <_dtoa_r+0x994>
 800b734:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b738:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b73c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b73e:	2b00      	cmp	r3, #0
 800b740:	f2c0 8152 	blt.w	800b9e8 <_dtoa_r+0x728>
 800b744:	f1ba 0f0e 	cmp.w	sl, #14
 800b748:	f300 814e 	bgt.w	800b9e8 <_dtoa_r+0x728>
 800b74c:	4b45      	ldr	r3, [pc, #276]	; (800b864 <_dtoa_r+0x5a4>)
 800b74e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b752:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b756:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b75a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f280 80db 	bge.w	800b918 <_dtoa_r+0x658>
 800b762:	9b08      	ldr	r3, [sp, #32]
 800b764:	2b00      	cmp	r3, #0
 800b766:	f300 80d7 	bgt.w	800b918 <_dtoa_r+0x658>
 800b76a:	f040 8272 	bne.w	800bc52 <_dtoa_r+0x992>
 800b76e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b772:	2200      	movs	r2, #0
 800b774:	4b40      	ldr	r3, [pc, #256]	; (800b878 <_dtoa_r+0x5b8>)
 800b776:	f7f4 feaf 	bl	80004d8 <__aeabi_dmul>
 800b77a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b77e:	f7f5 f931 	bl	80009e4 <__aeabi_dcmpge>
 800b782:	9c08      	ldr	r4, [sp, #32]
 800b784:	4626      	mov	r6, r4
 800b786:	2800      	cmp	r0, #0
 800b788:	f040 8248 	bne.w	800bc1c <_dtoa_r+0x95c>
 800b78c:	2331      	movs	r3, #49	; 0x31
 800b78e:	9f03      	ldr	r7, [sp, #12]
 800b790:	f10a 0a01 	add.w	sl, sl, #1
 800b794:	f807 3b01 	strb.w	r3, [r7], #1
 800b798:	e244      	b.n	800bc24 <_dtoa_r+0x964>
 800b79a:	07e2      	lsls	r2, r4, #31
 800b79c:	d505      	bpl.n	800b7aa <_dtoa_r+0x4ea>
 800b79e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b7a2:	f7f4 fe99 	bl	80004d8 <__aeabi_dmul>
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	3701      	adds	r7, #1
 800b7aa:	1064      	asrs	r4, r4, #1
 800b7ac:	3608      	adds	r6, #8
 800b7ae:	e76d      	b.n	800b68c <_dtoa_r+0x3cc>
 800b7b0:	2702      	movs	r7, #2
 800b7b2:	e770      	b.n	800b696 <_dtoa_r+0x3d6>
 800b7b4:	46d0      	mov	r8, sl
 800b7b6:	9c08      	ldr	r4, [sp, #32]
 800b7b8:	e78f      	b.n	800b6da <_dtoa_r+0x41a>
 800b7ba:	9903      	ldr	r1, [sp, #12]
 800b7bc:	4b29      	ldr	r3, [pc, #164]	; (800b864 <_dtoa_r+0x5a4>)
 800b7be:	4421      	add	r1, r4
 800b7c0:	9112      	str	r1, [sp, #72]	; 0x48
 800b7c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b7c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b7c8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b7cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b7d0:	2900      	cmp	r1, #0
 800b7d2:	d055      	beq.n	800b880 <_dtoa_r+0x5c0>
 800b7d4:	2000      	movs	r0, #0
 800b7d6:	4929      	ldr	r1, [pc, #164]	; (800b87c <_dtoa_r+0x5bc>)
 800b7d8:	f7f4 ffa8 	bl	800072c <__aeabi_ddiv>
 800b7dc:	463b      	mov	r3, r7
 800b7de:	4632      	mov	r2, r6
 800b7e0:	f7f4 fcc2 	bl	8000168 <__aeabi_dsub>
 800b7e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b7e8:	9f03      	ldr	r7, [sp, #12]
 800b7ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7ee:	f7f5 f923 	bl	8000a38 <__aeabi_d2iz>
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	f7f4 fe06 	bl	8000404 <__aeabi_i2d>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b800:	f7f4 fcb2 	bl	8000168 <__aeabi_dsub>
 800b804:	4602      	mov	r2, r0
 800b806:	460b      	mov	r3, r1
 800b808:	3430      	adds	r4, #48	; 0x30
 800b80a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b80e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b812:	f807 4b01 	strb.w	r4, [r7], #1
 800b816:	f7f5 f8d1 	bl	80009bc <__aeabi_dcmplt>
 800b81a:	2800      	cmp	r0, #0
 800b81c:	d174      	bne.n	800b908 <_dtoa_r+0x648>
 800b81e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b822:	2000      	movs	r0, #0
 800b824:	4911      	ldr	r1, [pc, #68]	; (800b86c <_dtoa_r+0x5ac>)
 800b826:	f7f4 fc9f 	bl	8000168 <__aeabi_dsub>
 800b82a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b82e:	f7f5 f8c5 	bl	80009bc <__aeabi_dcmplt>
 800b832:	2800      	cmp	r0, #0
 800b834:	f040 80b7 	bne.w	800b9a6 <_dtoa_r+0x6e6>
 800b838:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b83a:	429f      	cmp	r7, r3
 800b83c:	f43f af7a 	beq.w	800b734 <_dtoa_r+0x474>
 800b840:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b844:	2200      	movs	r2, #0
 800b846:	4b0a      	ldr	r3, [pc, #40]	; (800b870 <_dtoa_r+0x5b0>)
 800b848:	f7f4 fe46 	bl	80004d8 <__aeabi_dmul>
 800b84c:	2200      	movs	r2, #0
 800b84e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b852:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b856:	4b06      	ldr	r3, [pc, #24]	; (800b870 <_dtoa_r+0x5b0>)
 800b858:	f7f4 fe3e 	bl	80004d8 <__aeabi_dmul>
 800b85c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b860:	e7c3      	b.n	800b7ea <_dtoa_r+0x52a>
 800b862:	bf00      	nop
 800b864:	0800d878 	.word	0x0800d878
 800b868:	0800d850 	.word	0x0800d850
 800b86c:	3ff00000 	.word	0x3ff00000
 800b870:	40240000 	.word	0x40240000
 800b874:	401c0000 	.word	0x401c0000
 800b878:	40140000 	.word	0x40140000
 800b87c:	3fe00000 	.word	0x3fe00000
 800b880:	4630      	mov	r0, r6
 800b882:	4639      	mov	r1, r7
 800b884:	f7f4 fe28 	bl	80004d8 <__aeabi_dmul>
 800b888:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b88a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b88e:	9c03      	ldr	r4, [sp, #12]
 800b890:	9314      	str	r3, [sp, #80]	; 0x50
 800b892:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b896:	f7f5 f8cf 	bl	8000a38 <__aeabi_d2iz>
 800b89a:	9015      	str	r0, [sp, #84]	; 0x54
 800b89c:	f7f4 fdb2 	bl	8000404 <__aeabi_i2d>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8a8:	f7f4 fc5e 	bl	8000168 <__aeabi_dsub>
 800b8ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8ae:	4606      	mov	r6, r0
 800b8b0:	3330      	adds	r3, #48	; 0x30
 800b8b2:	f804 3b01 	strb.w	r3, [r4], #1
 800b8b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8b8:	460f      	mov	r7, r1
 800b8ba:	429c      	cmp	r4, r3
 800b8bc:	f04f 0200 	mov.w	r2, #0
 800b8c0:	d124      	bne.n	800b90c <_dtoa_r+0x64c>
 800b8c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b8c6:	4bb0      	ldr	r3, [pc, #704]	; (800bb88 <_dtoa_r+0x8c8>)
 800b8c8:	f7f4 fc50 	bl	800016c <__adddf3>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	4639      	mov	r1, r7
 800b8d4:	f7f5 f890 	bl	80009f8 <__aeabi_dcmpgt>
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	d163      	bne.n	800b9a4 <_dtoa_r+0x6e4>
 800b8dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b8e0:	2000      	movs	r0, #0
 800b8e2:	49a9      	ldr	r1, [pc, #676]	; (800bb88 <_dtoa_r+0x8c8>)
 800b8e4:	f7f4 fc40 	bl	8000168 <__aeabi_dsub>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	4630      	mov	r0, r6
 800b8ee:	4639      	mov	r1, r7
 800b8f0:	f7f5 f864 	bl	80009bc <__aeabi_dcmplt>
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	f43f af1d 	beq.w	800b734 <_dtoa_r+0x474>
 800b8fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b8fc:	1e7b      	subs	r3, r7, #1
 800b8fe:	9314      	str	r3, [sp, #80]	; 0x50
 800b900:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b904:	2b30      	cmp	r3, #48	; 0x30
 800b906:	d0f8      	beq.n	800b8fa <_dtoa_r+0x63a>
 800b908:	46c2      	mov	sl, r8
 800b90a:	e03b      	b.n	800b984 <_dtoa_r+0x6c4>
 800b90c:	4b9f      	ldr	r3, [pc, #636]	; (800bb8c <_dtoa_r+0x8cc>)
 800b90e:	f7f4 fde3 	bl	80004d8 <__aeabi_dmul>
 800b912:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b916:	e7bc      	b.n	800b892 <_dtoa_r+0x5d2>
 800b918:	9f03      	ldr	r7, [sp, #12]
 800b91a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b91e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b922:	4640      	mov	r0, r8
 800b924:	4649      	mov	r1, r9
 800b926:	f7f4 ff01 	bl	800072c <__aeabi_ddiv>
 800b92a:	f7f5 f885 	bl	8000a38 <__aeabi_d2iz>
 800b92e:	4604      	mov	r4, r0
 800b930:	f7f4 fd68 	bl	8000404 <__aeabi_i2d>
 800b934:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b938:	f7f4 fdce 	bl	80004d8 <__aeabi_dmul>
 800b93c:	4602      	mov	r2, r0
 800b93e:	460b      	mov	r3, r1
 800b940:	4640      	mov	r0, r8
 800b942:	4649      	mov	r1, r9
 800b944:	f7f4 fc10 	bl	8000168 <__aeabi_dsub>
 800b948:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b94c:	f807 6b01 	strb.w	r6, [r7], #1
 800b950:	9e03      	ldr	r6, [sp, #12]
 800b952:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b956:	1bbe      	subs	r6, r7, r6
 800b958:	45b4      	cmp	ip, r6
 800b95a:	4602      	mov	r2, r0
 800b95c:	460b      	mov	r3, r1
 800b95e:	d136      	bne.n	800b9ce <_dtoa_r+0x70e>
 800b960:	f7f4 fc04 	bl	800016c <__adddf3>
 800b964:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b968:	4680      	mov	r8, r0
 800b96a:	4689      	mov	r9, r1
 800b96c:	f7f5 f844 	bl	80009f8 <__aeabi_dcmpgt>
 800b970:	bb58      	cbnz	r0, 800b9ca <_dtoa_r+0x70a>
 800b972:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b976:	4640      	mov	r0, r8
 800b978:	4649      	mov	r1, r9
 800b97a:	f7f5 f815 	bl	80009a8 <__aeabi_dcmpeq>
 800b97e:	b108      	cbz	r0, 800b984 <_dtoa_r+0x6c4>
 800b980:	07e1      	lsls	r1, r4, #31
 800b982:	d422      	bmi.n	800b9ca <_dtoa_r+0x70a>
 800b984:	4628      	mov	r0, r5
 800b986:	4659      	mov	r1, fp
 800b988:	f000 faf0 	bl	800bf6c <_Bfree>
 800b98c:	2300      	movs	r3, #0
 800b98e:	703b      	strb	r3, [r7, #0]
 800b990:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b992:	f10a 0001 	add.w	r0, sl, #1
 800b996:	6018      	str	r0, [r3, #0]
 800b998:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	f43f acde 	beq.w	800b35c <_dtoa_r+0x9c>
 800b9a0:	601f      	str	r7, [r3, #0]
 800b9a2:	e4db      	b.n	800b35c <_dtoa_r+0x9c>
 800b9a4:	4627      	mov	r7, r4
 800b9a6:	463b      	mov	r3, r7
 800b9a8:	461f      	mov	r7, r3
 800b9aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9ae:	2a39      	cmp	r2, #57	; 0x39
 800b9b0:	d107      	bne.n	800b9c2 <_dtoa_r+0x702>
 800b9b2:	9a03      	ldr	r2, [sp, #12]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d1f7      	bne.n	800b9a8 <_dtoa_r+0x6e8>
 800b9b8:	2230      	movs	r2, #48	; 0x30
 800b9ba:	9903      	ldr	r1, [sp, #12]
 800b9bc:	f108 0801 	add.w	r8, r8, #1
 800b9c0:	700a      	strb	r2, [r1, #0]
 800b9c2:	781a      	ldrb	r2, [r3, #0]
 800b9c4:	3201      	adds	r2, #1
 800b9c6:	701a      	strb	r2, [r3, #0]
 800b9c8:	e79e      	b.n	800b908 <_dtoa_r+0x648>
 800b9ca:	46d0      	mov	r8, sl
 800b9cc:	e7eb      	b.n	800b9a6 <_dtoa_r+0x6e6>
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	4b6e      	ldr	r3, [pc, #440]	; (800bb8c <_dtoa_r+0x8cc>)
 800b9d2:	f7f4 fd81 	bl	80004d8 <__aeabi_dmul>
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	2300      	movs	r3, #0
 800b9da:	4680      	mov	r8, r0
 800b9dc:	4689      	mov	r9, r1
 800b9de:	f7f4 ffe3 	bl	80009a8 <__aeabi_dcmpeq>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	d09b      	beq.n	800b91e <_dtoa_r+0x65e>
 800b9e6:	e7cd      	b.n	800b984 <_dtoa_r+0x6c4>
 800b9e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b9ea:	2a00      	cmp	r2, #0
 800b9ec:	f000 80d0 	beq.w	800bb90 <_dtoa_r+0x8d0>
 800b9f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b9f2:	2a01      	cmp	r2, #1
 800b9f4:	f300 80ae 	bgt.w	800bb54 <_dtoa_r+0x894>
 800b9f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b9fa:	2a00      	cmp	r2, #0
 800b9fc:	f000 80a6 	beq.w	800bb4c <_dtoa_r+0x88c>
 800ba00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ba04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ba06:	9f06      	ldr	r7, [sp, #24]
 800ba08:	9a06      	ldr	r2, [sp, #24]
 800ba0a:	2101      	movs	r1, #1
 800ba0c:	441a      	add	r2, r3
 800ba0e:	9206      	str	r2, [sp, #24]
 800ba10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba12:	4628      	mov	r0, r5
 800ba14:	441a      	add	r2, r3
 800ba16:	9209      	str	r2, [sp, #36]	; 0x24
 800ba18:	f000 fb5e 	bl	800c0d8 <__i2b>
 800ba1c:	4606      	mov	r6, r0
 800ba1e:	2f00      	cmp	r7, #0
 800ba20:	dd0c      	ble.n	800ba3c <_dtoa_r+0x77c>
 800ba22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	dd09      	ble.n	800ba3c <_dtoa_r+0x77c>
 800ba28:	42bb      	cmp	r3, r7
 800ba2a:	bfa8      	it	ge
 800ba2c:	463b      	movge	r3, r7
 800ba2e:	9a06      	ldr	r2, [sp, #24]
 800ba30:	1aff      	subs	r7, r7, r3
 800ba32:	1ad2      	subs	r2, r2, r3
 800ba34:	9206      	str	r2, [sp, #24]
 800ba36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba38:	1ad3      	subs	r3, r2, r3
 800ba3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba3e:	b1f3      	cbz	r3, 800ba7e <_dtoa_r+0x7be>
 800ba40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f000 80a8 	beq.w	800bb98 <_dtoa_r+0x8d8>
 800ba48:	2c00      	cmp	r4, #0
 800ba4a:	dd10      	ble.n	800ba6e <_dtoa_r+0x7ae>
 800ba4c:	4631      	mov	r1, r6
 800ba4e:	4622      	mov	r2, r4
 800ba50:	4628      	mov	r0, r5
 800ba52:	f000 fbff 	bl	800c254 <__pow5mult>
 800ba56:	465a      	mov	r2, fp
 800ba58:	4601      	mov	r1, r0
 800ba5a:	4606      	mov	r6, r0
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	f000 fb51 	bl	800c104 <__multiply>
 800ba62:	4680      	mov	r8, r0
 800ba64:	4659      	mov	r1, fp
 800ba66:	4628      	mov	r0, r5
 800ba68:	f000 fa80 	bl	800bf6c <_Bfree>
 800ba6c:	46c3      	mov	fp, r8
 800ba6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba70:	1b1a      	subs	r2, r3, r4
 800ba72:	d004      	beq.n	800ba7e <_dtoa_r+0x7be>
 800ba74:	4659      	mov	r1, fp
 800ba76:	4628      	mov	r0, r5
 800ba78:	f000 fbec 	bl	800c254 <__pow5mult>
 800ba7c:	4683      	mov	fp, r0
 800ba7e:	2101      	movs	r1, #1
 800ba80:	4628      	mov	r0, r5
 800ba82:	f000 fb29 	bl	800c0d8 <__i2b>
 800ba86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba88:	4604      	mov	r4, r0
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f340 8086 	ble.w	800bb9c <_dtoa_r+0x8dc>
 800ba90:	461a      	mov	r2, r3
 800ba92:	4601      	mov	r1, r0
 800ba94:	4628      	mov	r0, r5
 800ba96:	f000 fbdd 	bl	800c254 <__pow5mult>
 800ba9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba9c:	4604      	mov	r4, r0
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	dd7f      	ble.n	800bba2 <_dtoa_r+0x8e2>
 800baa2:	f04f 0800 	mov.w	r8, #0
 800baa6:	6923      	ldr	r3, [r4, #16]
 800baa8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800baac:	6918      	ldr	r0, [r3, #16]
 800baae:	f000 fac5 	bl	800c03c <__hi0bits>
 800bab2:	f1c0 0020 	rsb	r0, r0, #32
 800bab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bab8:	4418      	add	r0, r3
 800baba:	f010 001f 	ands.w	r0, r0, #31
 800babe:	f000 8092 	beq.w	800bbe6 <_dtoa_r+0x926>
 800bac2:	f1c0 0320 	rsb	r3, r0, #32
 800bac6:	2b04      	cmp	r3, #4
 800bac8:	f340 808a 	ble.w	800bbe0 <_dtoa_r+0x920>
 800bacc:	f1c0 001c 	rsb	r0, r0, #28
 800bad0:	9b06      	ldr	r3, [sp, #24]
 800bad2:	4407      	add	r7, r0
 800bad4:	4403      	add	r3, r0
 800bad6:	9306      	str	r3, [sp, #24]
 800bad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bada:	4403      	add	r3, r0
 800badc:	9309      	str	r3, [sp, #36]	; 0x24
 800bade:	9b06      	ldr	r3, [sp, #24]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	dd05      	ble.n	800baf0 <_dtoa_r+0x830>
 800bae4:	4659      	mov	r1, fp
 800bae6:	461a      	mov	r2, r3
 800bae8:	4628      	mov	r0, r5
 800baea:	f000 fc0d 	bl	800c308 <__lshift>
 800baee:	4683      	mov	fp, r0
 800baf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	dd05      	ble.n	800bb02 <_dtoa_r+0x842>
 800baf6:	4621      	mov	r1, r4
 800baf8:	461a      	mov	r2, r3
 800bafa:	4628      	mov	r0, r5
 800bafc:	f000 fc04 	bl	800c308 <__lshift>
 800bb00:	4604      	mov	r4, r0
 800bb02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d070      	beq.n	800bbea <_dtoa_r+0x92a>
 800bb08:	4621      	mov	r1, r4
 800bb0a:	4658      	mov	r0, fp
 800bb0c:	f000 fc6c 	bl	800c3e8 <__mcmp>
 800bb10:	2800      	cmp	r0, #0
 800bb12:	da6a      	bge.n	800bbea <_dtoa_r+0x92a>
 800bb14:	2300      	movs	r3, #0
 800bb16:	4659      	mov	r1, fp
 800bb18:	220a      	movs	r2, #10
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	f000 fa48 	bl	800bfb0 <__multadd>
 800bb20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb22:	4683      	mov	fp, r0
 800bb24:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	f000 8194 	beq.w	800be56 <_dtoa_r+0xb96>
 800bb2e:	4631      	mov	r1, r6
 800bb30:	2300      	movs	r3, #0
 800bb32:	220a      	movs	r2, #10
 800bb34:	4628      	mov	r0, r5
 800bb36:	f000 fa3b 	bl	800bfb0 <__multadd>
 800bb3a:	f1b9 0f00 	cmp.w	r9, #0
 800bb3e:	4606      	mov	r6, r0
 800bb40:	f300 8093 	bgt.w	800bc6a <_dtoa_r+0x9aa>
 800bb44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bb46:	2b02      	cmp	r3, #2
 800bb48:	dc57      	bgt.n	800bbfa <_dtoa_r+0x93a>
 800bb4a:	e08e      	b.n	800bc6a <_dtoa_r+0x9aa>
 800bb4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bb4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bb52:	e757      	b.n	800ba04 <_dtoa_r+0x744>
 800bb54:	9b08      	ldr	r3, [sp, #32]
 800bb56:	1e5c      	subs	r4, r3, #1
 800bb58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb5a:	42a3      	cmp	r3, r4
 800bb5c:	bfb7      	itett	lt
 800bb5e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bb60:	1b1c      	subge	r4, r3, r4
 800bb62:	1ae2      	sublt	r2, r4, r3
 800bb64:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bb66:	bfbe      	ittt	lt
 800bb68:	940a      	strlt	r4, [sp, #40]	; 0x28
 800bb6a:	189b      	addlt	r3, r3, r2
 800bb6c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bb6e:	9b08      	ldr	r3, [sp, #32]
 800bb70:	bfb8      	it	lt
 800bb72:	2400      	movlt	r4, #0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	bfbb      	ittet	lt
 800bb78:	9b06      	ldrlt	r3, [sp, #24]
 800bb7a:	9a08      	ldrlt	r2, [sp, #32]
 800bb7c:	9f06      	ldrge	r7, [sp, #24]
 800bb7e:	1a9f      	sublt	r7, r3, r2
 800bb80:	bfac      	ite	ge
 800bb82:	9b08      	ldrge	r3, [sp, #32]
 800bb84:	2300      	movlt	r3, #0
 800bb86:	e73f      	b.n	800ba08 <_dtoa_r+0x748>
 800bb88:	3fe00000 	.word	0x3fe00000
 800bb8c:	40240000 	.word	0x40240000
 800bb90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bb92:	9f06      	ldr	r7, [sp, #24]
 800bb94:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800bb96:	e742      	b.n	800ba1e <_dtoa_r+0x75e>
 800bb98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb9a:	e76b      	b.n	800ba74 <_dtoa_r+0x7b4>
 800bb9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	dc19      	bgt.n	800bbd6 <_dtoa_r+0x916>
 800bba2:	9b04      	ldr	r3, [sp, #16]
 800bba4:	b9bb      	cbnz	r3, 800bbd6 <_dtoa_r+0x916>
 800bba6:	9b05      	ldr	r3, [sp, #20]
 800bba8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbac:	b99b      	cbnz	r3, 800bbd6 <_dtoa_r+0x916>
 800bbae:	9b05      	ldr	r3, [sp, #20]
 800bbb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bbb4:	0d1b      	lsrs	r3, r3, #20
 800bbb6:	051b      	lsls	r3, r3, #20
 800bbb8:	b183      	cbz	r3, 800bbdc <_dtoa_r+0x91c>
 800bbba:	f04f 0801 	mov.w	r8, #1
 800bbbe:	9b06      	ldr	r3, [sp, #24]
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	9306      	str	r3, [sp, #24]
 800bbc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	9309      	str	r3, [sp, #36]	; 0x24
 800bbca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	f47f af6a 	bne.w	800baa6 <_dtoa_r+0x7e6>
 800bbd2:	2001      	movs	r0, #1
 800bbd4:	e76f      	b.n	800bab6 <_dtoa_r+0x7f6>
 800bbd6:	f04f 0800 	mov.w	r8, #0
 800bbda:	e7f6      	b.n	800bbca <_dtoa_r+0x90a>
 800bbdc:	4698      	mov	r8, r3
 800bbde:	e7f4      	b.n	800bbca <_dtoa_r+0x90a>
 800bbe0:	f43f af7d 	beq.w	800bade <_dtoa_r+0x81e>
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	301c      	adds	r0, #28
 800bbe8:	e772      	b.n	800bad0 <_dtoa_r+0x810>
 800bbea:	9b08      	ldr	r3, [sp, #32]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	dc36      	bgt.n	800bc5e <_dtoa_r+0x99e>
 800bbf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bbf2:	2b02      	cmp	r3, #2
 800bbf4:	dd33      	ble.n	800bc5e <_dtoa_r+0x99e>
 800bbf6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bbfa:	f1b9 0f00 	cmp.w	r9, #0
 800bbfe:	d10d      	bne.n	800bc1c <_dtoa_r+0x95c>
 800bc00:	4621      	mov	r1, r4
 800bc02:	464b      	mov	r3, r9
 800bc04:	2205      	movs	r2, #5
 800bc06:	4628      	mov	r0, r5
 800bc08:	f000 f9d2 	bl	800bfb0 <__multadd>
 800bc0c:	4601      	mov	r1, r0
 800bc0e:	4604      	mov	r4, r0
 800bc10:	4658      	mov	r0, fp
 800bc12:	f000 fbe9 	bl	800c3e8 <__mcmp>
 800bc16:	2800      	cmp	r0, #0
 800bc18:	f73f adb8 	bgt.w	800b78c <_dtoa_r+0x4cc>
 800bc1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bc1e:	9f03      	ldr	r7, [sp, #12]
 800bc20:	ea6f 0a03 	mvn.w	sl, r3
 800bc24:	f04f 0800 	mov.w	r8, #0
 800bc28:	4621      	mov	r1, r4
 800bc2a:	4628      	mov	r0, r5
 800bc2c:	f000 f99e 	bl	800bf6c <_Bfree>
 800bc30:	2e00      	cmp	r6, #0
 800bc32:	f43f aea7 	beq.w	800b984 <_dtoa_r+0x6c4>
 800bc36:	f1b8 0f00 	cmp.w	r8, #0
 800bc3a:	d005      	beq.n	800bc48 <_dtoa_r+0x988>
 800bc3c:	45b0      	cmp	r8, r6
 800bc3e:	d003      	beq.n	800bc48 <_dtoa_r+0x988>
 800bc40:	4641      	mov	r1, r8
 800bc42:	4628      	mov	r0, r5
 800bc44:	f000 f992 	bl	800bf6c <_Bfree>
 800bc48:	4631      	mov	r1, r6
 800bc4a:	4628      	mov	r0, r5
 800bc4c:	f000 f98e 	bl	800bf6c <_Bfree>
 800bc50:	e698      	b.n	800b984 <_dtoa_r+0x6c4>
 800bc52:	2400      	movs	r4, #0
 800bc54:	4626      	mov	r6, r4
 800bc56:	e7e1      	b.n	800bc1c <_dtoa_r+0x95c>
 800bc58:	46c2      	mov	sl, r8
 800bc5a:	4626      	mov	r6, r4
 800bc5c:	e596      	b.n	800b78c <_dtoa_r+0x4cc>
 800bc5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	f000 80fd 	beq.w	800be64 <_dtoa_r+0xba4>
 800bc6a:	2f00      	cmp	r7, #0
 800bc6c:	dd05      	ble.n	800bc7a <_dtoa_r+0x9ba>
 800bc6e:	4631      	mov	r1, r6
 800bc70:	463a      	mov	r2, r7
 800bc72:	4628      	mov	r0, r5
 800bc74:	f000 fb48 	bl	800c308 <__lshift>
 800bc78:	4606      	mov	r6, r0
 800bc7a:	f1b8 0f00 	cmp.w	r8, #0
 800bc7e:	d05c      	beq.n	800bd3a <_dtoa_r+0xa7a>
 800bc80:	4628      	mov	r0, r5
 800bc82:	6871      	ldr	r1, [r6, #4]
 800bc84:	f000 f932 	bl	800beec <_Balloc>
 800bc88:	4607      	mov	r7, r0
 800bc8a:	b928      	cbnz	r0, 800bc98 <_dtoa_r+0x9d8>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bc92:	4b7f      	ldr	r3, [pc, #508]	; (800be90 <_dtoa_r+0xbd0>)
 800bc94:	f7ff bb28 	b.w	800b2e8 <_dtoa_r+0x28>
 800bc98:	6932      	ldr	r2, [r6, #16]
 800bc9a:	f106 010c 	add.w	r1, r6, #12
 800bc9e:	3202      	adds	r2, #2
 800bca0:	0092      	lsls	r2, r2, #2
 800bca2:	300c      	adds	r0, #12
 800bca4:	f000 f914 	bl	800bed0 <memcpy>
 800bca8:	2201      	movs	r2, #1
 800bcaa:	4639      	mov	r1, r7
 800bcac:	4628      	mov	r0, r5
 800bcae:	f000 fb2b 	bl	800c308 <__lshift>
 800bcb2:	46b0      	mov	r8, r6
 800bcb4:	4606      	mov	r6, r0
 800bcb6:	9b03      	ldr	r3, [sp, #12]
 800bcb8:	3301      	adds	r3, #1
 800bcba:	9308      	str	r3, [sp, #32]
 800bcbc:	9b03      	ldr	r3, [sp, #12]
 800bcbe:	444b      	add	r3, r9
 800bcc0:	930a      	str	r3, [sp, #40]	; 0x28
 800bcc2:	9b04      	ldr	r3, [sp, #16]
 800bcc4:	f003 0301 	and.w	r3, r3, #1
 800bcc8:	9309      	str	r3, [sp, #36]	; 0x24
 800bcca:	9b08      	ldr	r3, [sp, #32]
 800bccc:	4621      	mov	r1, r4
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	4658      	mov	r0, fp
 800bcd2:	9304      	str	r3, [sp, #16]
 800bcd4:	f7ff fa66 	bl	800b1a4 <quorem>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	4641      	mov	r1, r8
 800bcdc:	3330      	adds	r3, #48	; 0x30
 800bcde:	9006      	str	r0, [sp, #24]
 800bce0:	4658      	mov	r0, fp
 800bce2:	930b      	str	r3, [sp, #44]	; 0x2c
 800bce4:	f000 fb80 	bl	800c3e8 <__mcmp>
 800bce8:	4632      	mov	r2, r6
 800bcea:	4681      	mov	r9, r0
 800bcec:	4621      	mov	r1, r4
 800bcee:	4628      	mov	r0, r5
 800bcf0:	f000 fb96 	bl	800c420 <__mdiff>
 800bcf4:	68c2      	ldr	r2, [r0, #12]
 800bcf6:	4607      	mov	r7, r0
 800bcf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcfa:	bb02      	cbnz	r2, 800bd3e <_dtoa_r+0xa7e>
 800bcfc:	4601      	mov	r1, r0
 800bcfe:	4658      	mov	r0, fp
 800bd00:	f000 fb72 	bl	800c3e8 <__mcmp>
 800bd04:	4602      	mov	r2, r0
 800bd06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd08:	4639      	mov	r1, r7
 800bd0a:	4628      	mov	r0, r5
 800bd0c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800bd10:	f000 f92c 	bl	800bf6c <_Bfree>
 800bd14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd18:	9f08      	ldr	r7, [sp, #32]
 800bd1a:	ea43 0102 	orr.w	r1, r3, r2
 800bd1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd20:	430b      	orrs	r3, r1
 800bd22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd24:	d10d      	bne.n	800bd42 <_dtoa_r+0xa82>
 800bd26:	2b39      	cmp	r3, #57	; 0x39
 800bd28:	d029      	beq.n	800bd7e <_dtoa_r+0xabe>
 800bd2a:	f1b9 0f00 	cmp.w	r9, #0
 800bd2e:	dd01      	ble.n	800bd34 <_dtoa_r+0xa74>
 800bd30:	9b06      	ldr	r3, [sp, #24]
 800bd32:	3331      	adds	r3, #49	; 0x31
 800bd34:	9a04      	ldr	r2, [sp, #16]
 800bd36:	7013      	strb	r3, [r2, #0]
 800bd38:	e776      	b.n	800bc28 <_dtoa_r+0x968>
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	e7b9      	b.n	800bcb2 <_dtoa_r+0x9f2>
 800bd3e:	2201      	movs	r2, #1
 800bd40:	e7e2      	b.n	800bd08 <_dtoa_r+0xa48>
 800bd42:	f1b9 0f00 	cmp.w	r9, #0
 800bd46:	db06      	blt.n	800bd56 <_dtoa_r+0xa96>
 800bd48:	9922      	ldr	r1, [sp, #136]	; 0x88
 800bd4a:	ea41 0909 	orr.w	r9, r1, r9
 800bd4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd50:	ea59 0101 	orrs.w	r1, r9, r1
 800bd54:	d120      	bne.n	800bd98 <_dtoa_r+0xad8>
 800bd56:	2a00      	cmp	r2, #0
 800bd58:	ddec      	ble.n	800bd34 <_dtoa_r+0xa74>
 800bd5a:	4659      	mov	r1, fp
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	4628      	mov	r0, r5
 800bd60:	9308      	str	r3, [sp, #32]
 800bd62:	f000 fad1 	bl	800c308 <__lshift>
 800bd66:	4621      	mov	r1, r4
 800bd68:	4683      	mov	fp, r0
 800bd6a:	f000 fb3d 	bl	800c3e8 <__mcmp>
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	9b08      	ldr	r3, [sp, #32]
 800bd72:	dc02      	bgt.n	800bd7a <_dtoa_r+0xaba>
 800bd74:	d1de      	bne.n	800bd34 <_dtoa_r+0xa74>
 800bd76:	07da      	lsls	r2, r3, #31
 800bd78:	d5dc      	bpl.n	800bd34 <_dtoa_r+0xa74>
 800bd7a:	2b39      	cmp	r3, #57	; 0x39
 800bd7c:	d1d8      	bne.n	800bd30 <_dtoa_r+0xa70>
 800bd7e:	2339      	movs	r3, #57	; 0x39
 800bd80:	9a04      	ldr	r2, [sp, #16]
 800bd82:	7013      	strb	r3, [r2, #0]
 800bd84:	463b      	mov	r3, r7
 800bd86:	461f      	mov	r7, r3
 800bd88:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800bd8c:	3b01      	subs	r3, #1
 800bd8e:	2a39      	cmp	r2, #57	; 0x39
 800bd90:	d050      	beq.n	800be34 <_dtoa_r+0xb74>
 800bd92:	3201      	adds	r2, #1
 800bd94:	701a      	strb	r2, [r3, #0]
 800bd96:	e747      	b.n	800bc28 <_dtoa_r+0x968>
 800bd98:	2a00      	cmp	r2, #0
 800bd9a:	dd03      	ble.n	800bda4 <_dtoa_r+0xae4>
 800bd9c:	2b39      	cmp	r3, #57	; 0x39
 800bd9e:	d0ee      	beq.n	800bd7e <_dtoa_r+0xabe>
 800bda0:	3301      	adds	r3, #1
 800bda2:	e7c7      	b.n	800bd34 <_dtoa_r+0xa74>
 800bda4:	9a08      	ldr	r2, [sp, #32]
 800bda6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bda8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bdac:	428a      	cmp	r2, r1
 800bdae:	d02a      	beq.n	800be06 <_dtoa_r+0xb46>
 800bdb0:	4659      	mov	r1, fp
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	220a      	movs	r2, #10
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	f000 f8fa 	bl	800bfb0 <__multadd>
 800bdbc:	45b0      	cmp	r8, r6
 800bdbe:	4683      	mov	fp, r0
 800bdc0:	f04f 0300 	mov.w	r3, #0
 800bdc4:	f04f 020a 	mov.w	r2, #10
 800bdc8:	4641      	mov	r1, r8
 800bdca:	4628      	mov	r0, r5
 800bdcc:	d107      	bne.n	800bdde <_dtoa_r+0xb1e>
 800bdce:	f000 f8ef 	bl	800bfb0 <__multadd>
 800bdd2:	4680      	mov	r8, r0
 800bdd4:	4606      	mov	r6, r0
 800bdd6:	9b08      	ldr	r3, [sp, #32]
 800bdd8:	3301      	adds	r3, #1
 800bdda:	9308      	str	r3, [sp, #32]
 800bddc:	e775      	b.n	800bcca <_dtoa_r+0xa0a>
 800bdde:	f000 f8e7 	bl	800bfb0 <__multadd>
 800bde2:	4631      	mov	r1, r6
 800bde4:	4680      	mov	r8, r0
 800bde6:	2300      	movs	r3, #0
 800bde8:	220a      	movs	r2, #10
 800bdea:	4628      	mov	r0, r5
 800bdec:	f000 f8e0 	bl	800bfb0 <__multadd>
 800bdf0:	4606      	mov	r6, r0
 800bdf2:	e7f0      	b.n	800bdd6 <_dtoa_r+0xb16>
 800bdf4:	f1b9 0f00 	cmp.w	r9, #0
 800bdf8:	bfcc      	ite	gt
 800bdfa:	464f      	movgt	r7, r9
 800bdfc:	2701      	movle	r7, #1
 800bdfe:	f04f 0800 	mov.w	r8, #0
 800be02:	9a03      	ldr	r2, [sp, #12]
 800be04:	4417      	add	r7, r2
 800be06:	4659      	mov	r1, fp
 800be08:	2201      	movs	r2, #1
 800be0a:	4628      	mov	r0, r5
 800be0c:	9308      	str	r3, [sp, #32]
 800be0e:	f000 fa7b 	bl	800c308 <__lshift>
 800be12:	4621      	mov	r1, r4
 800be14:	4683      	mov	fp, r0
 800be16:	f000 fae7 	bl	800c3e8 <__mcmp>
 800be1a:	2800      	cmp	r0, #0
 800be1c:	dcb2      	bgt.n	800bd84 <_dtoa_r+0xac4>
 800be1e:	d102      	bne.n	800be26 <_dtoa_r+0xb66>
 800be20:	9b08      	ldr	r3, [sp, #32]
 800be22:	07db      	lsls	r3, r3, #31
 800be24:	d4ae      	bmi.n	800bd84 <_dtoa_r+0xac4>
 800be26:	463b      	mov	r3, r7
 800be28:	461f      	mov	r7, r3
 800be2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be2e:	2a30      	cmp	r2, #48	; 0x30
 800be30:	d0fa      	beq.n	800be28 <_dtoa_r+0xb68>
 800be32:	e6f9      	b.n	800bc28 <_dtoa_r+0x968>
 800be34:	9a03      	ldr	r2, [sp, #12]
 800be36:	429a      	cmp	r2, r3
 800be38:	d1a5      	bne.n	800bd86 <_dtoa_r+0xac6>
 800be3a:	2331      	movs	r3, #49	; 0x31
 800be3c:	f10a 0a01 	add.w	sl, sl, #1
 800be40:	e779      	b.n	800bd36 <_dtoa_r+0xa76>
 800be42:	4b14      	ldr	r3, [pc, #80]	; (800be94 <_dtoa_r+0xbd4>)
 800be44:	f7ff baa8 	b.w	800b398 <_dtoa_r+0xd8>
 800be48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	f47f aa81 	bne.w	800b352 <_dtoa_r+0x92>
 800be50:	4b11      	ldr	r3, [pc, #68]	; (800be98 <_dtoa_r+0xbd8>)
 800be52:	f7ff baa1 	b.w	800b398 <_dtoa_r+0xd8>
 800be56:	f1b9 0f00 	cmp.w	r9, #0
 800be5a:	dc03      	bgt.n	800be64 <_dtoa_r+0xba4>
 800be5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be5e:	2b02      	cmp	r3, #2
 800be60:	f73f aecb 	bgt.w	800bbfa <_dtoa_r+0x93a>
 800be64:	9f03      	ldr	r7, [sp, #12]
 800be66:	4621      	mov	r1, r4
 800be68:	4658      	mov	r0, fp
 800be6a:	f7ff f99b 	bl	800b1a4 <quorem>
 800be6e:	9a03      	ldr	r2, [sp, #12]
 800be70:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800be74:	f807 3b01 	strb.w	r3, [r7], #1
 800be78:	1aba      	subs	r2, r7, r2
 800be7a:	4591      	cmp	r9, r2
 800be7c:	ddba      	ble.n	800bdf4 <_dtoa_r+0xb34>
 800be7e:	4659      	mov	r1, fp
 800be80:	2300      	movs	r3, #0
 800be82:	220a      	movs	r2, #10
 800be84:	4628      	mov	r0, r5
 800be86:	f000 f893 	bl	800bfb0 <__multadd>
 800be8a:	4683      	mov	fp, r0
 800be8c:	e7eb      	b.n	800be66 <_dtoa_r+0xba6>
 800be8e:	bf00      	nop
 800be90:	0800d7e3 	.word	0x0800d7e3
 800be94:	0800d740 	.word	0x0800d740
 800be98:	0800d764 	.word	0x0800d764

0800be9c <_localeconv_r>:
 800be9c:	4800      	ldr	r0, [pc, #0]	; (800bea0 <_localeconv_r+0x4>)
 800be9e:	4770      	bx	lr
 800bea0:	200001c0 	.word	0x200001c0

0800bea4 <malloc>:
 800bea4:	4b02      	ldr	r3, [pc, #8]	; (800beb0 <malloc+0xc>)
 800bea6:	4601      	mov	r1, r0
 800bea8:	6818      	ldr	r0, [r3, #0]
 800beaa:	f000 bc1d 	b.w	800c6e8 <_malloc_r>
 800beae:	bf00      	nop
 800beb0:	2000006c 	.word	0x2000006c

0800beb4 <memchr>:
 800beb4:	4603      	mov	r3, r0
 800beb6:	b510      	push	{r4, lr}
 800beb8:	b2c9      	uxtb	r1, r1
 800beba:	4402      	add	r2, r0
 800bebc:	4293      	cmp	r3, r2
 800bebe:	4618      	mov	r0, r3
 800bec0:	d101      	bne.n	800bec6 <memchr+0x12>
 800bec2:	2000      	movs	r0, #0
 800bec4:	e003      	b.n	800bece <memchr+0x1a>
 800bec6:	7804      	ldrb	r4, [r0, #0]
 800bec8:	3301      	adds	r3, #1
 800beca:	428c      	cmp	r4, r1
 800becc:	d1f6      	bne.n	800bebc <memchr+0x8>
 800bece:	bd10      	pop	{r4, pc}

0800bed0 <memcpy>:
 800bed0:	440a      	add	r2, r1
 800bed2:	4291      	cmp	r1, r2
 800bed4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bed8:	d100      	bne.n	800bedc <memcpy+0xc>
 800beda:	4770      	bx	lr
 800bedc:	b510      	push	{r4, lr}
 800bede:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bee2:	4291      	cmp	r1, r2
 800bee4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bee8:	d1f9      	bne.n	800bede <memcpy+0xe>
 800beea:	bd10      	pop	{r4, pc}

0800beec <_Balloc>:
 800beec:	b570      	push	{r4, r5, r6, lr}
 800beee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bef0:	4604      	mov	r4, r0
 800bef2:	460d      	mov	r5, r1
 800bef4:	b976      	cbnz	r6, 800bf14 <_Balloc+0x28>
 800bef6:	2010      	movs	r0, #16
 800bef8:	f7ff ffd4 	bl	800bea4 <malloc>
 800befc:	4602      	mov	r2, r0
 800befe:	6260      	str	r0, [r4, #36]	; 0x24
 800bf00:	b920      	cbnz	r0, 800bf0c <_Balloc+0x20>
 800bf02:	2166      	movs	r1, #102	; 0x66
 800bf04:	4b17      	ldr	r3, [pc, #92]	; (800bf64 <_Balloc+0x78>)
 800bf06:	4818      	ldr	r0, [pc, #96]	; (800bf68 <_Balloc+0x7c>)
 800bf08:	f000 fdce 	bl	800caa8 <__assert_func>
 800bf0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf10:	6006      	str	r6, [r0, #0]
 800bf12:	60c6      	str	r6, [r0, #12]
 800bf14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf16:	68f3      	ldr	r3, [r6, #12]
 800bf18:	b183      	cbz	r3, 800bf3c <_Balloc+0x50>
 800bf1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf22:	b9b8      	cbnz	r0, 800bf54 <_Balloc+0x68>
 800bf24:	2101      	movs	r1, #1
 800bf26:	fa01 f605 	lsl.w	r6, r1, r5
 800bf2a:	1d72      	adds	r2, r6, #5
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	0092      	lsls	r2, r2, #2
 800bf30:	f000 fb5e 	bl	800c5f0 <_calloc_r>
 800bf34:	b160      	cbz	r0, 800bf50 <_Balloc+0x64>
 800bf36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf3a:	e00e      	b.n	800bf5a <_Balloc+0x6e>
 800bf3c:	2221      	movs	r2, #33	; 0x21
 800bf3e:	2104      	movs	r1, #4
 800bf40:	4620      	mov	r0, r4
 800bf42:	f000 fb55 	bl	800c5f0 <_calloc_r>
 800bf46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf48:	60f0      	str	r0, [r6, #12]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d1e4      	bne.n	800bf1a <_Balloc+0x2e>
 800bf50:	2000      	movs	r0, #0
 800bf52:	bd70      	pop	{r4, r5, r6, pc}
 800bf54:	6802      	ldr	r2, [r0, #0]
 800bf56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf60:	e7f7      	b.n	800bf52 <_Balloc+0x66>
 800bf62:	bf00      	nop
 800bf64:	0800d771 	.word	0x0800d771
 800bf68:	0800d7f4 	.word	0x0800d7f4

0800bf6c <_Bfree>:
 800bf6c:	b570      	push	{r4, r5, r6, lr}
 800bf6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf70:	4605      	mov	r5, r0
 800bf72:	460c      	mov	r4, r1
 800bf74:	b976      	cbnz	r6, 800bf94 <_Bfree+0x28>
 800bf76:	2010      	movs	r0, #16
 800bf78:	f7ff ff94 	bl	800bea4 <malloc>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	6268      	str	r0, [r5, #36]	; 0x24
 800bf80:	b920      	cbnz	r0, 800bf8c <_Bfree+0x20>
 800bf82:	218a      	movs	r1, #138	; 0x8a
 800bf84:	4b08      	ldr	r3, [pc, #32]	; (800bfa8 <_Bfree+0x3c>)
 800bf86:	4809      	ldr	r0, [pc, #36]	; (800bfac <_Bfree+0x40>)
 800bf88:	f000 fd8e 	bl	800caa8 <__assert_func>
 800bf8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf90:	6006      	str	r6, [r0, #0]
 800bf92:	60c6      	str	r6, [r0, #12]
 800bf94:	b13c      	cbz	r4, 800bfa6 <_Bfree+0x3a>
 800bf96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf98:	6862      	ldr	r2, [r4, #4]
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfa0:	6021      	str	r1, [r4, #0]
 800bfa2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bfa6:	bd70      	pop	{r4, r5, r6, pc}
 800bfa8:	0800d771 	.word	0x0800d771
 800bfac:	0800d7f4 	.word	0x0800d7f4

0800bfb0 <__multadd>:
 800bfb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb4:	4607      	mov	r7, r0
 800bfb6:	460c      	mov	r4, r1
 800bfb8:	461e      	mov	r6, r3
 800bfba:	2000      	movs	r0, #0
 800bfbc:	690d      	ldr	r5, [r1, #16]
 800bfbe:	f101 0c14 	add.w	ip, r1, #20
 800bfc2:	f8dc 3000 	ldr.w	r3, [ip]
 800bfc6:	3001      	adds	r0, #1
 800bfc8:	b299      	uxth	r1, r3
 800bfca:	fb02 6101 	mla	r1, r2, r1, r6
 800bfce:	0c1e      	lsrs	r6, r3, #16
 800bfd0:	0c0b      	lsrs	r3, r1, #16
 800bfd2:	fb02 3306 	mla	r3, r2, r6, r3
 800bfd6:	b289      	uxth	r1, r1
 800bfd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfdc:	4285      	cmp	r5, r0
 800bfde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bfe2:	f84c 1b04 	str.w	r1, [ip], #4
 800bfe6:	dcec      	bgt.n	800bfc2 <__multadd+0x12>
 800bfe8:	b30e      	cbz	r6, 800c02e <__multadd+0x7e>
 800bfea:	68a3      	ldr	r3, [r4, #8]
 800bfec:	42ab      	cmp	r3, r5
 800bfee:	dc19      	bgt.n	800c024 <__multadd+0x74>
 800bff0:	6861      	ldr	r1, [r4, #4]
 800bff2:	4638      	mov	r0, r7
 800bff4:	3101      	adds	r1, #1
 800bff6:	f7ff ff79 	bl	800beec <_Balloc>
 800bffa:	4680      	mov	r8, r0
 800bffc:	b928      	cbnz	r0, 800c00a <__multadd+0x5a>
 800bffe:	4602      	mov	r2, r0
 800c000:	21b5      	movs	r1, #181	; 0xb5
 800c002:	4b0c      	ldr	r3, [pc, #48]	; (800c034 <__multadd+0x84>)
 800c004:	480c      	ldr	r0, [pc, #48]	; (800c038 <__multadd+0x88>)
 800c006:	f000 fd4f 	bl	800caa8 <__assert_func>
 800c00a:	6922      	ldr	r2, [r4, #16]
 800c00c:	f104 010c 	add.w	r1, r4, #12
 800c010:	3202      	adds	r2, #2
 800c012:	0092      	lsls	r2, r2, #2
 800c014:	300c      	adds	r0, #12
 800c016:	f7ff ff5b 	bl	800bed0 <memcpy>
 800c01a:	4621      	mov	r1, r4
 800c01c:	4638      	mov	r0, r7
 800c01e:	f7ff ffa5 	bl	800bf6c <_Bfree>
 800c022:	4644      	mov	r4, r8
 800c024:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c028:	3501      	adds	r5, #1
 800c02a:	615e      	str	r6, [r3, #20]
 800c02c:	6125      	str	r5, [r4, #16]
 800c02e:	4620      	mov	r0, r4
 800c030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c034:	0800d7e3 	.word	0x0800d7e3
 800c038:	0800d7f4 	.word	0x0800d7f4

0800c03c <__hi0bits>:
 800c03c:	0c02      	lsrs	r2, r0, #16
 800c03e:	0412      	lsls	r2, r2, #16
 800c040:	4603      	mov	r3, r0
 800c042:	b9ca      	cbnz	r2, 800c078 <__hi0bits+0x3c>
 800c044:	0403      	lsls	r3, r0, #16
 800c046:	2010      	movs	r0, #16
 800c048:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c04c:	bf04      	itt	eq
 800c04e:	021b      	lsleq	r3, r3, #8
 800c050:	3008      	addeq	r0, #8
 800c052:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c056:	bf04      	itt	eq
 800c058:	011b      	lsleq	r3, r3, #4
 800c05a:	3004      	addeq	r0, #4
 800c05c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c060:	bf04      	itt	eq
 800c062:	009b      	lsleq	r3, r3, #2
 800c064:	3002      	addeq	r0, #2
 800c066:	2b00      	cmp	r3, #0
 800c068:	db05      	blt.n	800c076 <__hi0bits+0x3a>
 800c06a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c06e:	f100 0001 	add.w	r0, r0, #1
 800c072:	bf08      	it	eq
 800c074:	2020      	moveq	r0, #32
 800c076:	4770      	bx	lr
 800c078:	2000      	movs	r0, #0
 800c07a:	e7e5      	b.n	800c048 <__hi0bits+0xc>

0800c07c <__lo0bits>:
 800c07c:	6803      	ldr	r3, [r0, #0]
 800c07e:	4602      	mov	r2, r0
 800c080:	f013 0007 	ands.w	r0, r3, #7
 800c084:	d00b      	beq.n	800c09e <__lo0bits+0x22>
 800c086:	07d9      	lsls	r1, r3, #31
 800c088:	d421      	bmi.n	800c0ce <__lo0bits+0x52>
 800c08a:	0798      	lsls	r0, r3, #30
 800c08c:	bf49      	itett	mi
 800c08e:	085b      	lsrmi	r3, r3, #1
 800c090:	089b      	lsrpl	r3, r3, #2
 800c092:	2001      	movmi	r0, #1
 800c094:	6013      	strmi	r3, [r2, #0]
 800c096:	bf5c      	itt	pl
 800c098:	2002      	movpl	r0, #2
 800c09a:	6013      	strpl	r3, [r2, #0]
 800c09c:	4770      	bx	lr
 800c09e:	b299      	uxth	r1, r3
 800c0a0:	b909      	cbnz	r1, 800c0a6 <__lo0bits+0x2a>
 800c0a2:	2010      	movs	r0, #16
 800c0a4:	0c1b      	lsrs	r3, r3, #16
 800c0a6:	b2d9      	uxtb	r1, r3
 800c0a8:	b909      	cbnz	r1, 800c0ae <__lo0bits+0x32>
 800c0aa:	3008      	adds	r0, #8
 800c0ac:	0a1b      	lsrs	r3, r3, #8
 800c0ae:	0719      	lsls	r1, r3, #28
 800c0b0:	bf04      	itt	eq
 800c0b2:	091b      	lsreq	r3, r3, #4
 800c0b4:	3004      	addeq	r0, #4
 800c0b6:	0799      	lsls	r1, r3, #30
 800c0b8:	bf04      	itt	eq
 800c0ba:	089b      	lsreq	r3, r3, #2
 800c0bc:	3002      	addeq	r0, #2
 800c0be:	07d9      	lsls	r1, r3, #31
 800c0c0:	d403      	bmi.n	800c0ca <__lo0bits+0x4e>
 800c0c2:	085b      	lsrs	r3, r3, #1
 800c0c4:	f100 0001 	add.w	r0, r0, #1
 800c0c8:	d003      	beq.n	800c0d2 <__lo0bits+0x56>
 800c0ca:	6013      	str	r3, [r2, #0]
 800c0cc:	4770      	bx	lr
 800c0ce:	2000      	movs	r0, #0
 800c0d0:	4770      	bx	lr
 800c0d2:	2020      	movs	r0, #32
 800c0d4:	4770      	bx	lr
	...

0800c0d8 <__i2b>:
 800c0d8:	b510      	push	{r4, lr}
 800c0da:	460c      	mov	r4, r1
 800c0dc:	2101      	movs	r1, #1
 800c0de:	f7ff ff05 	bl	800beec <_Balloc>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	b928      	cbnz	r0, 800c0f2 <__i2b+0x1a>
 800c0e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c0ea:	4b04      	ldr	r3, [pc, #16]	; (800c0fc <__i2b+0x24>)
 800c0ec:	4804      	ldr	r0, [pc, #16]	; (800c100 <__i2b+0x28>)
 800c0ee:	f000 fcdb 	bl	800caa8 <__assert_func>
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	6144      	str	r4, [r0, #20]
 800c0f6:	6103      	str	r3, [r0, #16]
 800c0f8:	bd10      	pop	{r4, pc}
 800c0fa:	bf00      	nop
 800c0fc:	0800d7e3 	.word	0x0800d7e3
 800c100:	0800d7f4 	.word	0x0800d7f4

0800c104 <__multiply>:
 800c104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c108:	4691      	mov	r9, r2
 800c10a:	690a      	ldr	r2, [r1, #16]
 800c10c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c110:	460c      	mov	r4, r1
 800c112:	429a      	cmp	r2, r3
 800c114:	bfbe      	ittt	lt
 800c116:	460b      	movlt	r3, r1
 800c118:	464c      	movlt	r4, r9
 800c11a:	4699      	movlt	r9, r3
 800c11c:	6927      	ldr	r7, [r4, #16]
 800c11e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c122:	68a3      	ldr	r3, [r4, #8]
 800c124:	6861      	ldr	r1, [r4, #4]
 800c126:	eb07 060a 	add.w	r6, r7, sl
 800c12a:	42b3      	cmp	r3, r6
 800c12c:	b085      	sub	sp, #20
 800c12e:	bfb8      	it	lt
 800c130:	3101      	addlt	r1, #1
 800c132:	f7ff fedb 	bl	800beec <_Balloc>
 800c136:	b930      	cbnz	r0, 800c146 <__multiply+0x42>
 800c138:	4602      	mov	r2, r0
 800c13a:	f240 115d 	movw	r1, #349	; 0x15d
 800c13e:	4b43      	ldr	r3, [pc, #268]	; (800c24c <__multiply+0x148>)
 800c140:	4843      	ldr	r0, [pc, #268]	; (800c250 <__multiply+0x14c>)
 800c142:	f000 fcb1 	bl	800caa8 <__assert_func>
 800c146:	f100 0514 	add.w	r5, r0, #20
 800c14a:	462b      	mov	r3, r5
 800c14c:	2200      	movs	r2, #0
 800c14e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c152:	4543      	cmp	r3, r8
 800c154:	d321      	bcc.n	800c19a <__multiply+0x96>
 800c156:	f104 0314 	add.w	r3, r4, #20
 800c15a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c15e:	f109 0314 	add.w	r3, r9, #20
 800c162:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c166:	9202      	str	r2, [sp, #8]
 800c168:	1b3a      	subs	r2, r7, r4
 800c16a:	3a15      	subs	r2, #21
 800c16c:	f022 0203 	bic.w	r2, r2, #3
 800c170:	3204      	adds	r2, #4
 800c172:	f104 0115 	add.w	r1, r4, #21
 800c176:	428f      	cmp	r7, r1
 800c178:	bf38      	it	cc
 800c17a:	2204      	movcc	r2, #4
 800c17c:	9201      	str	r2, [sp, #4]
 800c17e:	9a02      	ldr	r2, [sp, #8]
 800c180:	9303      	str	r3, [sp, #12]
 800c182:	429a      	cmp	r2, r3
 800c184:	d80c      	bhi.n	800c1a0 <__multiply+0x9c>
 800c186:	2e00      	cmp	r6, #0
 800c188:	dd03      	ble.n	800c192 <__multiply+0x8e>
 800c18a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d059      	beq.n	800c246 <__multiply+0x142>
 800c192:	6106      	str	r6, [r0, #16]
 800c194:	b005      	add	sp, #20
 800c196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c19a:	f843 2b04 	str.w	r2, [r3], #4
 800c19e:	e7d8      	b.n	800c152 <__multiply+0x4e>
 800c1a0:	f8b3 a000 	ldrh.w	sl, [r3]
 800c1a4:	f1ba 0f00 	cmp.w	sl, #0
 800c1a8:	d023      	beq.n	800c1f2 <__multiply+0xee>
 800c1aa:	46a9      	mov	r9, r5
 800c1ac:	f04f 0c00 	mov.w	ip, #0
 800c1b0:	f104 0e14 	add.w	lr, r4, #20
 800c1b4:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c1b8:	f8d9 1000 	ldr.w	r1, [r9]
 800c1bc:	fa1f fb82 	uxth.w	fp, r2
 800c1c0:	b289      	uxth	r1, r1
 800c1c2:	fb0a 110b 	mla	r1, sl, fp, r1
 800c1c6:	4461      	add	r1, ip
 800c1c8:	f8d9 c000 	ldr.w	ip, [r9]
 800c1cc:	0c12      	lsrs	r2, r2, #16
 800c1ce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c1d2:	fb0a c202 	mla	r2, sl, r2, ip
 800c1d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c1da:	b289      	uxth	r1, r1
 800c1dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c1e0:	4577      	cmp	r7, lr
 800c1e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c1e6:	f849 1b04 	str.w	r1, [r9], #4
 800c1ea:	d8e3      	bhi.n	800c1b4 <__multiply+0xb0>
 800c1ec:	9a01      	ldr	r2, [sp, #4]
 800c1ee:	f845 c002 	str.w	ip, [r5, r2]
 800c1f2:	9a03      	ldr	r2, [sp, #12]
 800c1f4:	3304      	adds	r3, #4
 800c1f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c1fa:	f1b9 0f00 	cmp.w	r9, #0
 800c1fe:	d020      	beq.n	800c242 <__multiply+0x13e>
 800c200:	46ae      	mov	lr, r5
 800c202:	f04f 0a00 	mov.w	sl, #0
 800c206:	6829      	ldr	r1, [r5, #0]
 800c208:	f104 0c14 	add.w	ip, r4, #20
 800c20c:	f8bc b000 	ldrh.w	fp, [ip]
 800c210:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c214:	b289      	uxth	r1, r1
 800c216:	fb09 220b 	mla	r2, r9, fp, r2
 800c21a:	4492      	add	sl, r2
 800c21c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c220:	f84e 1b04 	str.w	r1, [lr], #4
 800c224:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c228:	f8be 1000 	ldrh.w	r1, [lr]
 800c22c:	0c12      	lsrs	r2, r2, #16
 800c22e:	fb09 1102 	mla	r1, r9, r2, r1
 800c232:	4567      	cmp	r7, ip
 800c234:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c238:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c23c:	d8e6      	bhi.n	800c20c <__multiply+0x108>
 800c23e:	9a01      	ldr	r2, [sp, #4]
 800c240:	50a9      	str	r1, [r5, r2]
 800c242:	3504      	adds	r5, #4
 800c244:	e79b      	b.n	800c17e <__multiply+0x7a>
 800c246:	3e01      	subs	r6, #1
 800c248:	e79d      	b.n	800c186 <__multiply+0x82>
 800c24a:	bf00      	nop
 800c24c:	0800d7e3 	.word	0x0800d7e3
 800c250:	0800d7f4 	.word	0x0800d7f4

0800c254 <__pow5mult>:
 800c254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c258:	4615      	mov	r5, r2
 800c25a:	f012 0203 	ands.w	r2, r2, #3
 800c25e:	4606      	mov	r6, r0
 800c260:	460f      	mov	r7, r1
 800c262:	d007      	beq.n	800c274 <__pow5mult+0x20>
 800c264:	4c25      	ldr	r4, [pc, #148]	; (800c2fc <__pow5mult+0xa8>)
 800c266:	3a01      	subs	r2, #1
 800c268:	2300      	movs	r3, #0
 800c26a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c26e:	f7ff fe9f 	bl	800bfb0 <__multadd>
 800c272:	4607      	mov	r7, r0
 800c274:	10ad      	asrs	r5, r5, #2
 800c276:	d03d      	beq.n	800c2f4 <__pow5mult+0xa0>
 800c278:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c27a:	b97c      	cbnz	r4, 800c29c <__pow5mult+0x48>
 800c27c:	2010      	movs	r0, #16
 800c27e:	f7ff fe11 	bl	800bea4 <malloc>
 800c282:	4602      	mov	r2, r0
 800c284:	6270      	str	r0, [r6, #36]	; 0x24
 800c286:	b928      	cbnz	r0, 800c294 <__pow5mult+0x40>
 800c288:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c28c:	4b1c      	ldr	r3, [pc, #112]	; (800c300 <__pow5mult+0xac>)
 800c28e:	481d      	ldr	r0, [pc, #116]	; (800c304 <__pow5mult+0xb0>)
 800c290:	f000 fc0a 	bl	800caa8 <__assert_func>
 800c294:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c298:	6004      	str	r4, [r0, #0]
 800c29a:	60c4      	str	r4, [r0, #12]
 800c29c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c2a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2a4:	b94c      	cbnz	r4, 800c2ba <__pow5mult+0x66>
 800c2a6:	f240 2171 	movw	r1, #625	; 0x271
 800c2aa:	4630      	mov	r0, r6
 800c2ac:	f7ff ff14 	bl	800c0d8 <__i2b>
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2b8:	6003      	str	r3, [r0, #0]
 800c2ba:	f04f 0900 	mov.w	r9, #0
 800c2be:	07eb      	lsls	r3, r5, #31
 800c2c0:	d50a      	bpl.n	800c2d8 <__pow5mult+0x84>
 800c2c2:	4639      	mov	r1, r7
 800c2c4:	4622      	mov	r2, r4
 800c2c6:	4630      	mov	r0, r6
 800c2c8:	f7ff ff1c 	bl	800c104 <__multiply>
 800c2cc:	4680      	mov	r8, r0
 800c2ce:	4639      	mov	r1, r7
 800c2d0:	4630      	mov	r0, r6
 800c2d2:	f7ff fe4b 	bl	800bf6c <_Bfree>
 800c2d6:	4647      	mov	r7, r8
 800c2d8:	106d      	asrs	r5, r5, #1
 800c2da:	d00b      	beq.n	800c2f4 <__pow5mult+0xa0>
 800c2dc:	6820      	ldr	r0, [r4, #0]
 800c2de:	b938      	cbnz	r0, 800c2f0 <__pow5mult+0x9c>
 800c2e0:	4622      	mov	r2, r4
 800c2e2:	4621      	mov	r1, r4
 800c2e4:	4630      	mov	r0, r6
 800c2e6:	f7ff ff0d 	bl	800c104 <__multiply>
 800c2ea:	6020      	str	r0, [r4, #0]
 800c2ec:	f8c0 9000 	str.w	r9, [r0]
 800c2f0:	4604      	mov	r4, r0
 800c2f2:	e7e4      	b.n	800c2be <__pow5mult+0x6a>
 800c2f4:	4638      	mov	r0, r7
 800c2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2fa:	bf00      	nop
 800c2fc:	0800d940 	.word	0x0800d940
 800c300:	0800d771 	.word	0x0800d771
 800c304:	0800d7f4 	.word	0x0800d7f4

0800c308 <__lshift>:
 800c308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c30c:	460c      	mov	r4, r1
 800c30e:	4607      	mov	r7, r0
 800c310:	4691      	mov	r9, r2
 800c312:	6923      	ldr	r3, [r4, #16]
 800c314:	6849      	ldr	r1, [r1, #4]
 800c316:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c31a:	68a3      	ldr	r3, [r4, #8]
 800c31c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c320:	f108 0601 	add.w	r6, r8, #1
 800c324:	42b3      	cmp	r3, r6
 800c326:	db0b      	blt.n	800c340 <__lshift+0x38>
 800c328:	4638      	mov	r0, r7
 800c32a:	f7ff fddf 	bl	800beec <_Balloc>
 800c32e:	4605      	mov	r5, r0
 800c330:	b948      	cbnz	r0, 800c346 <__lshift+0x3e>
 800c332:	4602      	mov	r2, r0
 800c334:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c338:	4b29      	ldr	r3, [pc, #164]	; (800c3e0 <__lshift+0xd8>)
 800c33a:	482a      	ldr	r0, [pc, #168]	; (800c3e4 <__lshift+0xdc>)
 800c33c:	f000 fbb4 	bl	800caa8 <__assert_func>
 800c340:	3101      	adds	r1, #1
 800c342:	005b      	lsls	r3, r3, #1
 800c344:	e7ee      	b.n	800c324 <__lshift+0x1c>
 800c346:	2300      	movs	r3, #0
 800c348:	f100 0114 	add.w	r1, r0, #20
 800c34c:	f100 0210 	add.w	r2, r0, #16
 800c350:	4618      	mov	r0, r3
 800c352:	4553      	cmp	r3, sl
 800c354:	db37      	blt.n	800c3c6 <__lshift+0xbe>
 800c356:	6920      	ldr	r0, [r4, #16]
 800c358:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c35c:	f104 0314 	add.w	r3, r4, #20
 800c360:	f019 091f 	ands.w	r9, r9, #31
 800c364:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c368:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c36c:	d02f      	beq.n	800c3ce <__lshift+0xc6>
 800c36e:	468a      	mov	sl, r1
 800c370:	f04f 0c00 	mov.w	ip, #0
 800c374:	f1c9 0e20 	rsb	lr, r9, #32
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	fa02 f209 	lsl.w	r2, r2, r9
 800c37e:	ea42 020c 	orr.w	r2, r2, ip
 800c382:	f84a 2b04 	str.w	r2, [sl], #4
 800c386:	f853 2b04 	ldr.w	r2, [r3], #4
 800c38a:	4298      	cmp	r0, r3
 800c38c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c390:	d8f2      	bhi.n	800c378 <__lshift+0x70>
 800c392:	1b03      	subs	r3, r0, r4
 800c394:	3b15      	subs	r3, #21
 800c396:	f023 0303 	bic.w	r3, r3, #3
 800c39a:	3304      	adds	r3, #4
 800c39c:	f104 0215 	add.w	r2, r4, #21
 800c3a0:	4290      	cmp	r0, r2
 800c3a2:	bf38      	it	cc
 800c3a4:	2304      	movcc	r3, #4
 800c3a6:	f841 c003 	str.w	ip, [r1, r3]
 800c3aa:	f1bc 0f00 	cmp.w	ip, #0
 800c3ae:	d001      	beq.n	800c3b4 <__lshift+0xac>
 800c3b0:	f108 0602 	add.w	r6, r8, #2
 800c3b4:	3e01      	subs	r6, #1
 800c3b6:	4638      	mov	r0, r7
 800c3b8:	4621      	mov	r1, r4
 800c3ba:	612e      	str	r6, [r5, #16]
 800c3bc:	f7ff fdd6 	bl	800bf6c <_Bfree>
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	e7c1      	b.n	800c352 <__lshift+0x4a>
 800c3ce:	3904      	subs	r1, #4
 800c3d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3d4:	4298      	cmp	r0, r3
 800c3d6:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3da:	d8f9      	bhi.n	800c3d0 <__lshift+0xc8>
 800c3dc:	e7ea      	b.n	800c3b4 <__lshift+0xac>
 800c3de:	bf00      	nop
 800c3e0:	0800d7e3 	.word	0x0800d7e3
 800c3e4:	0800d7f4 	.word	0x0800d7f4

0800c3e8 <__mcmp>:
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	690a      	ldr	r2, [r1, #16]
 800c3ec:	6900      	ldr	r0, [r0, #16]
 800c3ee:	b530      	push	{r4, r5, lr}
 800c3f0:	1a80      	subs	r0, r0, r2
 800c3f2:	d10d      	bne.n	800c410 <__mcmp+0x28>
 800c3f4:	3314      	adds	r3, #20
 800c3f6:	3114      	adds	r1, #20
 800c3f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c3fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c400:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c404:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c408:	4295      	cmp	r5, r2
 800c40a:	d002      	beq.n	800c412 <__mcmp+0x2a>
 800c40c:	d304      	bcc.n	800c418 <__mcmp+0x30>
 800c40e:	2001      	movs	r0, #1
 800c410:	bd30      	pop	{r4, r5, pc}
 800c412:	42a3      	cmp	r3, r4
 800c414:	d3f4      	bcc.n	800c400 <__mcmp+0x18>
 800c416:	e7fb      	b.n	800c410 <__mcmp+0x28>
 800c418:	f04f 30ff 	mov.w	r0, #4294967295
 800c41c:	e7f8      	b.n	800c410 <__mcmp+0x28>
	...

0800c420 <__mdiff>:
 800c420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c424:	460d      	mov	r5, r1
 800c426:	4607      	mov	r7, r0
 800c428:	4611      	mov	r1, r2
 800c42a:	4628      	mov	r0, r5
 800c42c:	4614      	mov	r4, r2
 800c42e:	f7ff ffdb 	bl	800c3e8 <__mcmp>
 800c432:	1e06      	subs	r6, r0, #0
 800c434:	d111      	bne.n	800c45a <__mdiff+0x3a>
 800c436:	4631      	mov	r1, r6
 800c438:	4638      	mov	r0, r7
 800c43a:	f7ff fd57 	bl	800beec <_Balloc>
 800c43e:	4602      	mov	r2, r0
 800c440:	b928      	cbnz	r0, 800c44e <__mdiff+0x2e>
 800c442:	f240 2132 	movw	r1, #562	; 0x232
 800c446:	4b3a      	ldr	r3, [pc, #232]	; (800c530 <__mdiff+0x110>)
 800c448:	483a      	ldr	r0, [pc, #232]	; (800c534 <__mdiff+0x114>)
 800c44a:	f000 fb2d 	bl	800caa8 <__assert_func>
 800c44e:	2301      	movs	r3, #1
 800c450:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c454:	4610      	mov	r0, r2
 800c456:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c45a:	bfa4      	itt	ge
 800c45c:	4623      	movge	r3, r4
 800c45e:	462c      	movge	r4, r5
 800c460:	4638      	mov	r0, r7
 800c462:	6861      	ldr	r1, [r4, #4]
 800c464:	bfa6      	itte	ge
 800c466:	461d      	movge	r5, r3
 800c468:	2600      	movge	r6, #0
 800c46a:	2601      	movlt	r6, #1
 800c46c:	f7ff fd3e 	bl	800beec <_Balloc>
 800c470:	4602      	mov	r2, r0
 800c472:	b918      	cbnz	r0, 800c47c <__mdiff+0x5c>
 800c474:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c478:	4b2d      	ldr	r3, [pc, #180]	; (800c530 <__mdiff+0x110>)
 800c47a:	e7e5      	b.n	800c448 <__mdiff+0x28>
 800c47c:	f102 0814 	add.w	r8, r2, #20
 800c480:	46c2      	mov	sl, r8
 800c482:	f04f 0c00 	mov.w	ip, #0
 800c486:	6927      	ldr	r7, [r4, #16]
 800c488:	60c6      	str	r6, [r0, #12]
 800c48a:	692e      	ldr	r6, [r5, #16]
 800c48c:	f104 0014 	add.w	r0, r4, #20
 800c490:	f105 0914 	add.w	r9, r5, #20
 800c494:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c498:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c49c:	3410      	adds	r4, #16
 800c49e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c4a2:	f859 3b04 	ldr.w	r3, [r9], #4
 800c4a6:	fa1f f18b 	uxth.w	r1, fp
 800c4aa:	448c      	add	ip, r1
 800c4ac:	b299      	uxth	r1, r3
 800c4ae:	0c1b      	lsrs	r3, r3, #16
 800c4b0:	ebac 0101 	sub.w	r1, ip, r1
 800c4b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c4b8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c4bc:	b289      	uxth	r1, r1
 800c4be:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c4c2:	454e      	cmp	r6, r9
 800c4c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c4c8:	f84a 3b04 	str.w	r3, [sl], #4
 800c4cc:	d8e7      	bhi.n	800c49e <__mdiff+0x7e>
 800c4ce:	1b73      	subs	r3, r6, r5
 800c4d0:	3b15      	subs	r3, #21
 800c4d2:	f023 0303 	bic.w	r3, r3, #3
 800c4d6:	3515      	adds	r5, #21
 800c4d8:	3304      	adds	r3, #4
 800c4da:	42ae      	cmp	r6, r5
 800c4dc:	bf38      	it	cc
 800c4de:	2304      	movcc	r3, #4
 800c4e0:	4418      	add	r0, r3
 800c4e2:	4443      	add	r3, r8
 800c4e4:	461e      	mov	r6, r3
 800c4e6:	4605      	mov	r5, r0
 800c4e8:	4575      	cmp	r5, lr
 800c4ea:	d30e      	bcc.n	800c50a <__mdiff+0xea>
 800c4ec:	f10e 0103 	add.w	r1, lr, #3
 800c4f0:	1a09      	subs	r1, r1, r0
 800c4f2:	f021 0103 	bic.w	r1, r1, #3
 800c4f6:	3803      	subs	r0, #3
 800c4f8:	4586      	cmp	lr, r0
 800c4fa:	bf38      	it	cc
 800c4fc:	2100      	movcc	r1, #0
 800c4fe:	4419      	add	r1, r3
 800c500:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c504:	b18b      	cbz	r3, 800c52a <__mdiff+0x10a>
 800c506:	6117      	str	r7, [r2, #16]
 800c508:	e7a4      	b.n	800c454 <__mdiff+0x34>
 800c50a:	f855 8b04 	ldr.w	r8, [r5], #4
 800c50e:	fa1f f188 	uxth.w	r1, r8
 800c512:	4461      	add	r1, ip
 800c514:	140c      	asrs	r4, r1, #16
 800c516:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c51a:	b289      	uxth	r1, r1
 800c51c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c520:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c524:	f846 1b04 	str.w	r1, [r6], #4
 800c528:	e7de      	b.n	800c4e8 <__mdiff+0xc8>
 800c52a:	3f01      	subs	r7, #1
 800c52c:	e7e8      	b.n	800c500 <__mdiff+0xe0>
 800c52e:	bf00      	nop
 800c530:	0800d7e3 	.word	0x0800d7e3
 800c534:	0800d7f4 	.word	0x0800d7f4

0800c538 <__d2b>:
 800c538:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c53c:	2101      	movs	r1, #1
 800c53e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c542:	4690      	mov	r8, r2
 800c544:	461d      	mov	r5, r3
 800c546:	f7ff fcd1 	bl	800beec <_Balloc>
 800c54a:	4604      	mov	r4, r0
 800c54c:	b930      	cbnz	r0, 800c55c <__d2b+0x24>
 800c54e:	4602      	mov	r2, r0
 800c550:	f240 310a 	movw	r1, #778	; 0x30a
 800c554:	4b24      	ldr	r3, [pc, #144]	; (800c5e8 <__d2b+0xb0>)
 800c556:	4825      	ldr	r0, [pc, #148]	; (800c5ec <__d2b+0xb4>)
 800c558:	f000 faa6 	bl	800caa8 <__assert_func>
 800c55c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c560:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c564:	bb2d      	cbnz	r5, 800c5b2 <__d2b+0x7a>
 800c566:	9301      	str	r3, [sp, #4]
 800c568:	f1b8 0300 	subs.w	r3, r8, #0
 800c56c:	d026      	beq.n	800c5bc <__d2b+0x84>
 800c56e:	4668      	mov	r0, sp
 800c570:	9300      	str	r3, [sp, #0]
 800c572:	f7ff fd83 	bl	800c07c <__lo0bits>
 800c576:	9900      	ldr	r1, [sp, #0]
 800c578:	b1f0      	cbz	r0, 800c5b8 <__d2b+0x80>
 800c57a:	9a01      	ldr	r2, [sp, #4]
 800c57c:	f1c0 0320 	rsb	r3, r0, #32
 800c580:	fa02 f303 	lsl.w	r3, r2, r3
 800c584:	430b      	orrs	r3, r1
 800c586:	40c2      	lsrs	r2, r0
 800c588:	6163      	str	r3, [r4, #20]
 800c58a:	9201      	str	r2, [sp, #4]
 800c58c:	9b01      	ldr	r3, [sp, #4]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	bf14      	ite	ne
 800c592:	2102      	movne	r1, #2
 800c594:	2101      	moveq	r1, #1
 800c596:	61a3      	str	r3, [r4, #24]
 800c598:	6121      	str	r1, [r4, #16]
 800c59a:	b1c5      	cbz	r5, 800c5ce <__d2b+0x96>
 800c59c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c5a0:	4405      	add	r5, r0
 800c5a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c5a6:	603d      	str	r5, [r7, #0]
 800c5a8:	6030      	str	r0, [r6, #0]
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	b002      	add	sp, #8
 800c5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5b6:	e7d6      	b.n	800c566 <__d2b+0x2e>
 800c5b8:	6161      	str	r1, [r4, #20]
 800c5ba:	e7e7      	b.n	800c58c <__d2b+0x54>
 800c5bc:	a801      	add	r0, sp, #4
 800c5be:	f7ff fd5d 	bl	800c07c <__lo0bits>
 800c5c2:	2101      	movs	r1, #1
 800c5c4:	9b01      	ldr	r3, [sp, #4]
 800c5c6:	6121      	str	r1, [r4, #16]
 800c5c8:	6163      	str	r3, [r4, #20]
 800c5ca:	3020      	adds	r0, #32
 800c5cc:	e7e5      	b.n	800c59a <__d2b+0x62>
 800c5ce:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c5d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c5d6:	6038      	str	r0, [r7, #0]
 800c5d8:	6918      	ldr	r0, [r3, #16]
 800c5da:	f7ff fd2f 	bl	800c03c <__hi0bits>
 800c5de:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c5e2:	6031      	str	r1, [r6, #0]
 800c5e4:	e7e1      	b.n	800c5aa <__d2b+0x72>
 800c5e6:	bf00      	nop
 800c5e8:	0800d7e3 	.word	0x0800d7e3
 800c5ec:	0800d7f4 	.word	0x0800d7f4

0800c5f0 <_calloc_r>:
 800c5f0:	b570      	push	{r4, r5, r6, lr}
 800c5f2:	fba1 5402 	umull	r5, r4, r1, r2
 800c5f6:	b934      	cbnz	r4, 800c606 <_calloc_r+0x16>
 800c5f8:	4629      	mov	r1, r5
 800c5fa:	f000 f875 	bl	800c6e8 <_malloc_r>
 800c5fe:	4606      	mov	r6, r0
 800c600:	b928      	cbnz	r0, 800c60e <_calloc_r+0x1e>
 800c602:	4630      	mov	r0, r6
 800c604:	bd70      	pop	{r4, r5, r6, pc}
 800c606:	220c      	movs	r2, #12
 800c608:	2600      	movs	r6, #0
 800c60a:	6002      	str	r2, [r0, #0]
 800c60c:	e7f9      	b.n	800c602 <_calloc_r+0x12>
 800c60e:	462a      	mov	r2, r5
 800c610:	4621      	mov	r1, r4
 800c612:	f7fe f93f 	bl	800a894 <memset>
 800c616:	e7f4      	b.n	800c602 <_calloc_r+0x12>

0800c618 <_free_r>:
 800c618:	b538      	push	{r3, r4, r5, lr}
 800c61a:	4605      	mov	r5, r0
 800c61c:	2900      	cmp	r1, #0
 800c61e:	d040      	beq.n	800c6a2 <_free_r+0x8a>
 800c620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c624:	1f0c      	subs	r4, r1, #4
 800c626:	2b00      	cmp	r3, #0
 800c628:	bfb8      	it	lt
 800c62a:	18e4      	addlt	r4, r4, r3
 800c62c:	f000 fa98 	bl	800cb60 <__malloc_lock>
 800c630:	4a1c      	ldr	r2, [pc, #112]	; (800c6a4 <_free_r+0x8c>)
 800c632:	6813      	ldr	r3, [r2, #0]
 800c634:	b933      	cbnz	r3, 800c644 <_free_r+0x2c>
 800c636:	6063      	str	r3, [r4, #4]
 800c638:	6014      	str	r4, [r2, #0]
 800c63a:	4628      	mov	r0, r5
 800c63c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c640:	f000 ba94 	b.w	800cb6c <__malloc_unlock>
 800c644:	42a3      	cmp	r3, r4
 800c646:	d908      	bls.n	800c65a <_free_r+0x42>
 800c648:	6820      	ldr	r0, [r4, #0]
 800c64a:	1821      	adds	r1, r4, r0
 800c64c:	428b      	cmp	r3, r1
 800c64e:	bf01      	itttt	eq
 800c650:	6819      	ldreq	r1, [r3, #0]
 800c652:	685b      	ldreq	r3, [r3, #4]
 800c654:	1809      	addeq	r1, r1, r0
 800c656:	6021      	streq	r1, [r4, #0]
 800c658:	e7ed      	b.n	800c636 <_free_r+0x1e>
 800c65a:	461a      	mov	r2, r3
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	b10b      	cbz	r3, 800c664 <_free_r+0x4c>
 800c660:	42a3      	cmp	r3, r4
 800c662:	d9fa      	bls.n	800c65a <_free_r+0x42>
 800c664:	6811      	ldr	r1, [r2, #0]
 800c666:	1850      	adds	r0, r2, r1
 800c668:	42a0      	cmp	r0, r4
 800c66a:	d10b      	bne.n	800c684 <_free_r+0x6c>
 800c66c:	6820      	ldr	r0, [r4, #0]
 800c66e:	4401      	add	r1, r0
 800c670:	1850      	adds	r0, r2, r1
 800c672:	4283      	cmp	r3, r0
 800c674:	6011      	str	r1, [r2, #0]
 800c676:	d1e0      	bne.n	800c63a <_free_r+0x22>
 800c678:	6818      	ldr	r0, [r3, #0]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	4401      	add	r1, r0
 800c67e:	6011      	str	r1, [r2, #0]
 800c680:	6053      	str	r3, [r2, #4]
 800c682:	e7da      	b.n	800c63a <_free_r+0x22>
 800c684:	d902      	bls.n	800c68c <_free_r+0x74>
 800c686:	230c      	movs	r3, #12
 800c688:	602b      	str	r3, [r5, #0]
 800c68a:	e7d6      	b.n	800c63a <_free_r+0x22>
 800c68c:	6820      	ldr	r0, [r4, #0]
 800c68e:	1821      	adds	r1, r4, r0
 800c690:	428b      	cmp	r3, r1
 800c692:	bf01      	itttt	eq
 800c694:	6819      	ldreq	r1, [r3, #0]
 800c696:	685b      	ldreq	r3, [r3, #4]
 800c698:	1809      	addeq	r1, r1, r0
 800c69a:	6021      	streq	r1, [r4, #0]
 800c69c:	6063      	str	r3, [r4, #4]
 800c69e:	6054      	str	r4, [r2, #4]
 800c6a0:	e7cb      	b.n	800c63a <_free_r+0x22>
 800c6a2:	bd38      	pop	{r3, r4, r5, pc}
 800c6a4:	2000096c 	.word	0x2000096c

0800c6a8 <sbrk_aligned>:
 800c6a8:	b570      	push	{r4, r5, r6, lr}
 800c6aa:	4e0e      	ldr	r6, [pc, #56]	; (800c6e4 <sbrk_aligned+0x3c>)
 800c6ac:	460c      	mov	r4, r1
 800c6ae:	6831      	ldr	r1, [r6, #0]
 800c6b0:	4605      	mov	r5, r0
 800c6b2:	b911      	cbnz	r1, 800c6ba <sbrk_aligned+0x12>
 800c6b4:	f000 f9e8 	bl	800ca88 <_sbrk_r>
 800c6b8:	6030      	str	r0, [r6, #0]
 800c6ba:	4621      	mov	r1, r4
 800c6bc:	4628      	mov	r0, r5
 800c6be:	f000 f9e3 	bl	800ca88 <_sbrk_r>
 800c6c2:	1c43      	adds	r3, r0, #1
 800c6c4:	d00a      	beq.n	800c6dc <sbrk_aligned+0x34>
 800c6c6:	1cc4      	adds	r4, r0, #3
 800c6c8:	f024 0403 	bic.w	r4, r4, #3
 800c6cc:	42a0      	cmp	r0, r4
 800c6ce:	d007      	beq.n	800c6e0 <sbrk_aligned+0x38>
 800c6d0:	1a21      	subs	r1, r4, r0
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	f000 f9d8 	bl	800ca88 <_sbrk_r>
 800c6d8:	3001      	adds	r0, #1
 800c6da:	d101      	bne.n	800c6e0 <sbrk_aligned+0x38>
 800c6dc:	f04f 34ff 	mov.w	r4, #4294967295
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	bd70      	pop	{r4, r5, r6, pc}
 800c6e4:	20000970 	.word	0x20000970

0800c6e8 <_malloc_r>:
 800c6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ec:	1ccd      	adds	r5, r1, #3
 800c6ee:	f025 0503 	bic.w	r5, r5, #3
 800c6f2:	3508      	adds	r5, #8
 800c6f4:	2d0c      	cmp	r5, #12
 800c6f6:	bf38      	it	cc
 800c6f8:	250c      	movcc	r5, #12
 800c6fa:	2d00      	cmp	r5, #0
 800c6fc:	4607      	mov	r7, r0
 800c6fe:	db01      	blt.n	800c704 <_malloc_r+0x1c>
 800c700:	42a9      	cmp	r1, r5
 800c702:	d905      	bls.n	800c710 <_malloc_r+0x28>
 800c704:	230c      	movs	r3, #12
 800c706:	2600      	movs	r6, #0
 800c708:	603b      	str	r3, [r7, #0]
 800c70a:	4630      	mov	r0, r6
 800c70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c710:	4e2e      	ldr	r6, [pc, #184]	; (800c7cc <_malloc_r+0xe4>)
 800c712:	f000 fa25 	bl	800cb60 <__malloc_lock>
 800c716:	6833      	ldr	r3, [r6, #0]
 800c718:	461c      	mov	r4, r3
 800c71a:	bb34      	cbnz	r4, 800c76a <_malloc_r+0x82>
 800c71c:	4629      	mov	r1, r5
 800c71e:	4638      	mov	r0, r7
 800c720:	f7ff ffc2 	bl	800c6a8 <sbrk_aligned>
 800c724:	1c43      	adds	r3, r0, #1
 800c726:	4604      	mov	r4, r0
 800c728:	d14d      	bne.n	800c7c6 <_malloc_r+0xde>
 800c72a:	6834      	ldr	r4, [r6, #0]
 800c72c:	4626      	mov	r6, r4
 800c72e:	2e00      	cmp	r6, #0
 800c730:	d140      	bne.n	800c7b4 <_malloc_r+0xcc>
 800c732:	6823      	ldr	r3, [r4, #0]
 800c734:	4631      	mov	r1, r6
 800c736:	4638      	mov	r0, r7
 800c738:	eb04 0803 	add.w	r8, r4, r3
 800c73c:	f000 f9a4 	bl	800ca88 <_sbrk_r>
 800c740:	4580      	cmp	r8, r0
 800c742:	d13a      	bne.n	800c7ba <_malloc_r+0xd2>
 800c744:	6821      	ldr	r1, [r4, #0]
 800c746:	3503      	adds	r5, #3
 800c748:	1a6d      	subs	r5, r5, r1
 800c74a:	f025 0503 	bic.w	r5, r5, #3
 800c74e:	3508      	adds	r5, #8
 800c750:	2d0c      	cmp	r5, #12
 800c752:	bf38      	it	cc
 800c754:	250c      	movcc	r5, #12
 800c756:	4638      	mov	r0, r7
 800c758:	4629      	mov	r1, r5
 800c75a:	f7ff ffa5 	bl	800c6a8 <sbrk_aligned>
 800c75e:	3001      	adds	r0, #1
 800c760:	d02b      	beq.n	800c7ba <_malloc_r+0xd2>
 800c762:	6823      	ldr	r3, [r4, #0]
 800c764:	442b      	add	r3, r5
 800c766:	6023      	str	r3, [r4, #0]
 800c768:	e00e      	b.n	800c788 <_malloc_r+0xa0>
 800c76a:	6822      	ldr	r2, [r4, #0]
 800c76c:	1b52      	subs	r2, r2, r5
 800c76e:	d41e      	bmi.n	800c7ae <_malloc_r+0xc6>
 800c770:	2a0b      	cmp	r2, #11
 800c772:	d916      	bls.n	800c7a2 <_malloc_r+0xba>
 800c774:	1961      	adds	r1, r4, r5
 800c776:	42a3      	cmp	r3, r4
 800c778:	6025      	str	r5, [r4, #0]
 800c77a:	bf18      	it	ne
 800c77c:	6059      	strne	r1, [r3, #4]
 800c77e:	6863      	ldr	r3, [r4, #4]
 800c780:	bf08      	it	eq
 800c782:	6031      	streq	r1, [r6, #0]
 800c784:	5162      	str	r2, [r4, r5]
 800c786:	604b      	str	r3, [r1, #4]
 800c788:	4638      	mov	r0, r7
 800c78a:	f104 060b 	add.w	r6, r4, #11
 800c78e:	f000 f9ed 	bl	800cb6c <__malloc_unlock>
 800c792:	f026 0607 	bic.w	r6, r6, #7
 800c796:	1d23      	adds	r3, r4, #4
 800c798:	1af2      	subs	r2, r6, r3
 800c79a:	d0b6      	beq.n	800c70a <_malloc_r+0x22>
 800c79c:	1b9b      	subs	r3, r3, r6
 800c79e:	50a3      	str	r3, [r4, r2]
 800c7a0:	e7b3      	b.n	800c70a <_malloc_r+0x22>
 800c7a2:	6862      	ldr	r2, [r4, #4]
 800c7a4:	42a3      	cmp	r3, r4
 800c7a6:	bf0c      	ite	eq
 800c7a8:	6032      	streq	r2, [r6, #0]
 800c7aa:	605a      	strne	r2, [r3, #4]
 800c7ac:	e7ec      	b.n	800c788 <_malloc_r+0xa0>
 800c7ae:	4623      	mov	r3, r4
 800c7b0:	6864      	ldr	r4, [r4, #4]
 800c7b2:	e7b2      	b.n	800c71a <_malloc_r+0x32>
 800c7b4:	4634      	mov	r4, r6
 800c7b6:	6876      	ldr	r6, [r6, #4]
 800c7b8:	e7b9      	b.n	800c72e <_malloc_r+0x46>
 800c7ba:	230c      	movs	r3, #12
 800c7bc:	4638      	mov	r0, r7
 800c7be:	603b      	str	r3, [r7, #0]
 800c7c0:	f000 f9d4 	bl	800cb6c <__malloc_unlock>
 800c7c4:	e7a1      	b.n	800c70a <_malloc_r+0x22>
 800c7c6:	6025      	str	r5, [r4, #0]
 800c7c8:	e7de      	b.n	800c788 <_malloc_r+0xa0>
 800c7ca:	bf00      	nop
 800c7cc:	2000096c 	.word	0x2000096c

0800c7d0 <__ssputs_r>:
 800c7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7d4:	688e      	ldr	r6, [r1, #8]
 800c7d6:	4682      	mov	sl, r0
 800c7d8:	429e      	cmp	r6, r3
 800c7da:	460c      	mov	r4, r1
 800c7dc:	4690      	mov	r8, r2
 800c7de:	461f      	mov	r7, r3
 800c7e0:	d838      	bhi.n	800c854 <__ssputs_r+0x84>
 800c7e2:	898a      	ldrh	r2, [r1, #12]
 800c7e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c7e8:	d032      	beq.n	800c850 <__ssputs_r+0x80>
 800c7ea:	6825      	ldr	r5, [r4, #0]
 800c7ec:	6909      	ldr	r1, [r1, #16]
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	eba5 0901 	sub.w	r9, r5, r1
 800c7f4:	6965      	ldr	r5, [r4, #20]
 800c7f6:	444b      	add	r3, r9
 800c7f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c800:	106d      	asrs	r5, r5, #1
 800c802:	429d      	cmp	r5, r3
 800c804:	bf38      	it	cc
 800c806:	461d      	movcc	r5, r3
 800c808:	0553      	lsls	r3, r2, #21
 800c80a:	d531      	bpl.n	800c870 <__ssputs_r+0xa0>
 800c80c:	4629      	mov	r1, r5
 800c80e:	f7ff ff6b 	bl	800c6e8 <_malloc_r>
 800c812:	4606      	mov	r6, r0
 800c814:	b950      	cbnz	r0, 800c82c <__ssputs_r+0x5c>
 800c816:	230c      	movs	r3, #12
 800c818:	f04f 30ff 	mov.w	r0, #4294967295
 800c81c:	f8ca 3000 	str.w	r3, [sl]
 800c820:	89a3      	ldrh	r3, [r4, #12]
 800c822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c826:	81a3      	strh	r3, [r4, #12]
 800c828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c82c:	464a      	mov	r2, r9
 800c82e:	6921      	ldr	r1, [r4, #16]
 800c830:	f7ff fb4e 	bl	800bed0 <memcpy>
 800c834:	89a3      	ldrh	r3, [r4, #12]
 800c836:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c83a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c83e:	81a3      	strh	r3, [r4, #12]
 800c840:	6126      	str	r6, [r4, #16]
 800c842:	444e      	add	r6, r9
 800c844:	6026      	str	r6, [r4, #0]
 800c846:	463e      	mov	r6, r7
 800c848:	6165      	str	r5, [r4, #20]
 800c84a:	eba5 0509 	sub.w	r5, r5, r9
 800c84e:	60a5      	str	r5, [r4, #8]
 800c850:	42be      	cmp	r6, r7
 800c852:	d900      	bls.n	800c856 <__ssputs_r+0x86>
 800c854:	463e      	mov	r6, r7
 800c856:	4632      	mov	r2, r6
 800c858:	4641      	mov	r1, r8
 800c85a:	6820      	ldr	r0, [r4, #0]
 800c85c:	f000 f966 	bl	800cb2c <memmove>
 800c860:	68a3      	ldr	r3, [r4, #8]
 800c862:	2000      	movs	r0, #0
 800c864:	1b9b      	subs	r3, r3, r6
 800c866:	60a3      	str	r3, [r4, #8]
 800c868:	6823      	ldr	r3, [r4, #0]
 800c86a:	4433      	add	r3, r6
 800c86c:	6023      	str	r3, [r4, #0]
 800c86e:	e7db      	b.n	800c828 <__ssputs_r+0x58>
 800c870:	462a      	mov	r2, r5
 800c872:	f000 f981 	bl	800cb78 <_realloc_r>
 800c876:	4606      	mov	r6, r0
 800c878:	2800      	cmp	r0, #0
 800c87a:	d1e1      	bne.n	800c840 <__ssputs_r+0x70>
 800c87c:	4650      	mov	r0, sl
 800c87e:	6921      	ldr	r1, [r4, #16]
 800c880:	f7ff feca 	bl	800c618 <_free_r>
 800c884:	e7c7      	b.n	800c816 <__ssputs_r+0x46>
	...

0800c888 <_svfiprintf_r>:
 800c888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c88c:	4698      	mov	r8, r3
 800c88e:	898b      	ldrh	r3, [r1, #12]
 800c890:	4607      	mov	r7, r0
 800c892:	061b      	lsls	r3, r3, #24
 800c894:	460d      	mov	r5, r1
 800c896:	4614      	mov	r4, r2
 800c898:	b09d      	sub	sp, #116	; 0x74
 800c89a:	d50e      	bpl.n	800c8ba <_svfiprintf_r+0x32>
 800c89c:	690b      	ldr	r3, [r1, #16]
 800c89e:	b963      	cbnz	r3, 800c8ba <_svfiprintf_r+0x32>
 800c8a0:	2140      	movs	r1, #64	; 0x40
 800c8a2:	f7ff ff21 	bl	800c6e8 <_malloc_r>
 800c8a6:	6028      	str	r0, [r5, #0]
 800c8a8:	6128      	str	r0, [r5, #16]
 800c8aa:	b920      	cbnz	r0, 800c8b6 <_svfiprintf_r+0x2e>
 800c8ac:	230c      	movs	r3, #12
 800c8ae:	603b      	str	r3, [r7, #0]
 800c8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b4:	e0d1      	b.n	800ca5a <_svfiprintf_r+0x1d2>
 800c8b6:	2340      	movs	r3, #64	; 0x40
 800c8b8:	616b      	str	r3, [r5, #20]
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	9309      	str	r3, [sp, #36]	; 0x24
 800c8be:	2320      	movs	r3, #32
 800c8c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8c4:	2330      	movs	r3, #48	; 0x30
 800c8c6:	f04f 0901 	mov.w	r9, #1
 800c8ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ca74 <_svfiprintf_r+0x1ec>
 800c8d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8d6:	4623      	mov	r3, r4
 800c8d8:	469a      	mov	sl, r3
 800c8da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8de:	b10a      	cbz	r2, 800c8e4 <_svfiprintf_r+0x5c>
 800c8e0:	2a25      	cmp	r2, #37	; 0x25
 800c8e2:	d1f9      	bne.n	800c8d8 <_svfiprintf_r+0x50>
 800c8e4:	ebba 0b04 	subs.w	fp, sl, r4
 800c8e8:	d00b      	beq.n	800c902 <_svfiprintf_r+0x7a>
 800c8ea:	465b      	mov	r3, fp
 800c8ec:	4622      	mov	r2, r4
 800c8ee:	4629      	mov	r1, r5
 800c8f0:	4638      	mov	r0, r7
 800c8f2:	f7ff ff6d 	bl	800c7d0 <__ssputs_r>
 800c8f6:	3001      	adds	r0, #1
 800c8f8:	f000 80aa 	beq.w	800ca50 <_svfiprintf_r+0x1c8>
 800c8fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8fe:	445a      	add	r2, fp
 800c900:	9209      	str	r2, [sp, #36]	; 0x24
 800c902:	f89a 3000 	ldrb.w	r3, [sl]
 800c906:	2b00      	cmp	r3, #0
 800c908:	f000 80a2 	beq.w	800ca50 <_svfiprintf_r+0x1c8>
 800c90c:	2300      	movs	r3, #0
 800c90e:	f04f 32ff 	mov.w	r2, #4294967295
 800c912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c916:	f10a 0a01 	add.w	sl, sl, #1
 800c91a:	9304      	str	r3, [sp, #16]
 800c91c:	9307      	str	r3, [sp, #28]
 800c91e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c922:	931a      	str	r3, [sp, #104]	; 0x68
 800c924:	4654      	mov	r4, sl
 800c926:	2205      	movs	r2, #5
 800c928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c92c:	4851      	ldr	r0, [pc, #324]	; (800ca74 <_svfiprintf_r+0x1ec>)
 800c92e:	f7ff fac1 	bl	800beb4 <memchr>
 800c932:	9a04      	ldr	r2, [sp, #16]
 800c934:	b9d8      	cbnz	r0, 800c96e <_svfiprintf_r+0xe6>
 800c936:	06d0      	lsls	r0, r2, #27
 800c938:	bf44      	itt	mi
 800c93a:	2320      	movmi	r3, #32
 800c93c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c940:	0711      	lsls	r1, r2, #28
 800c942:	bf44      	itt	mi
 800c944:	232b      	movmi	r3, #43	; 0x2b
 800c946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c94a:	f89a 3000 	ldrb.w	r3, [sl]
 800c94e:	2b2a      	cmp	r3, #42	; 0x2a
 800c950:	d015      	beq.n	800c97e <_svfiprintf_r+0xf6>
 800c952:	4654      	mov	r4, sl
 800c954:	2000      	movs	r0, #0
 800c956:	f04f 0c0a 	mov.w	ip, #10
 800c95a:	9a07      	ldr	r2, [sp, #28]
 800c95c:	4621      	mov	r1, r4
 800c95e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c962:	3b30      	subs	r3, #48	; 0x30
 800c964:	2b09      	cmp	r3, #9
 800c966:	d94e      	bls.n	800ca06 <_svfiprintf_r+0x17e>
 800c968:	b1b0      	cbz	r0, 800c998 <_svfiprintf_r+0x110>
 800c96a:	9207      	str	r2, [sp, #28]
 800c96c:	e014      	b.n	800c998 <_svfiprintf_r+0x110>
 800c96e:	eba0 0308 	sub.w	r3, r0, r8
 800c972:	fa09 f303 	lsl.w	r3, r9, r3
 800c976:	4313      	orrs	r3, r2
 800c978:	46a2      	mov	sl, r4
 800c97a:	9304      	str	r3, [sp, #16]
 800c97c:	e7d2      	b.n	800c924 <_svfiprintf_r+0x9c>
 800c97e:	9b03      	ldr	r3, [sp, #12]
 800c980:	1d19      	adds	r1, r3, #4
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	9103      	str	r1, [sp, #12]
 800c986:	2b00      	cmp	r3, #0
 800c988:	bfbb      	ittet	lt
 800c98a:	425b      	neglt	r3, r3
 800c98c:	f042 0202 	orrlt.w	r2, r2, #2
 800c990:	9307      	strge	r3, [sp, #28]
 800c992:	9307      	strlt	r3, [sp, #28]
 800c994:	bfb8      	it	lt
 800c996:	9204      	strlt	r2, [sp, #16]
 800c998:	7823      	ldrb	r3, [r4, #0]
 800c99a:	2b2e      	cmp	r3, #46	; 0x2e
 800c99c:	d10c      	bne.n	800c9b8 <_svfiprintf_r+0x130>
 800c99e:	7863      	ldrb	r3, [r4, #1]
 800c9a0:	2b2a      	cmp	r3, #42	; 0x2a
 800c9a2:	d135      	bne.n	800ca10 <_svfiprintf_r+0x188>
 800c9a4:	9b03      	ldr	r3, [sp, #12]
 800c9a6:	3402      	adds	r4, #2
 800c9a8:	1d1a      	adds	r2, r3, #4
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	9203      	str	r2, [sp, #12]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	bfb8      	it	lt
 800c9b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9b6:	9305      	str	r3, [sp, #20]
 800c9b8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800ca78 <_svfiprintf_r+0x1f0>
 800c9bc:	2203      	movs	r2, #3
 800c9be:	4650      	mov	r0, sl
 800c9c0:	7821      	ldrb	r1, [r4, #0]
 800c9c2:	f7ff fa77 	bl	800beb4 <memchr>
 800c9c6:	b140      	cbz	r0, 800c9da <_svfiprintf_r+0x152>
 800c9c8:	2340      	movs	r3, #64	; 0x40
 800c9ca:	eba0 000a 	sub.w	r0, r0, sl
 800c9ce:	fa03 f000 	lsl.w	r0, r3, r0
 800c9d2:	9b04      	ldr	r3, [sp, #16]
 800c9d4:	3401      	adds	r4, #1
 800c9d6:	4303      	orrs	r3, r0
 800c9d8:	9304      	str	r3, [sp, #16]
 800c9da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9de:	2206      	movs	r2, #6
 800c9e0:	4826      	ldr	r0, [pc, #152]	; (800ca7c <_svfiprintf_r+0x1f4>)
 800c9e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9e6:	f7ff fa65 	bl	800beb4 <memchr>
 800c9ea:	2800      	cmp	r0, #0
 800c9ec:	d038      	beq.n	800ca60 <_svfiprintf_r+0x1d8>
 800c9ee:	4b24      	ldr	r3, [pc, #144]	; (800ca80 <_svfiprintf_r+0x1f8>)
 800c9f0:	bb1b      	cbnz	r3, 800ca3a <_svfiprintf_r+0x1b2>
 800c9f2:	9b03      	ldr	r3, [sp, #12]
 800c9f4:	3307      	adds	r3, #7
 800c9f6:	f023 0307 	bic.w	r3, r3, #7
 800c9fa:	3308      	adds	r3, #8
 800c9fc:	9303      	str	r3, [sp, #12]
 800c9fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca00:	4433      	add	r3, r6
 800ca02:	9309      	str	r3, [sp, #36]	; 0x24
 800ca04:	e767      	b.n	800c8d6 <_svfiprintf_r+0x4e>
 800ca06:	460c      	mov	r4, r1
 800ca08:	2001      	movs	r0, #1
 800ca0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca0e:	e7a5      	b.n	800c95c <_svfiprintf_r+0xd4>
 800ca10:	2300      	movs	r3, #0
 800ca12:	f04f 0c0a 	mov.w	ip, #10
 800ca16:	4619      	mov	r1, r3
 800ca18:	3401      	adds	r4, #1
 800ca1a:	9305      	str	r3, [sp, #20]
 800ca1c:	4620      	mov	r0, r4
 800ca1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca22:	3a30      	subs	r2, #48	; 0x30
 800ca24:	2a09      	cmp	r2, #9
 800ca26:	d903      	bls.n	800ca30 <_svfiprintf_r+0x1a8>
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d0c5      	beq.n	800c9b8 <_svfiprintf_r+0x130>
 800ca2c:	9105      	str	r1, [sp, #20]
 800ca2e:	e7c3      	b.n	800c9b8 <_svfiprintf_r+0x130>
 800ca30:	4604      	mov	r4, r0
 800ca32:	2301      	movs	r3, #1
 800ca34:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca38:	e7f0      	b.n	800ca1c <_svfiprintf_r+0x194>
 800ca3a:	ab03      	add	r3, sp, #12
 800ca3c:	9300      	str	r3, [sp, #0]
 800ca3e:	462a      	mov	r2, r5
 800ca40:	4638      	mov	r0, r7
 800ca42:	4b10      	ldr	r3, [pc, #64]	; (800ca84 <_svfiprintf_r+0x1fc>)
 800ca44:	a904      	add	r1, sp, #16
 800ca46:	f7fd ffcb 	bl	800a9e0 <_printf_float>
 800ca4a:	1c42      	adds	r2, r0, #1
 800ca4c:	4606      	mov	r6, r0
 800ca4e:	d1d6      	bne.n	800c9fe <_svfiprintf_r+0x176>
 800ca50:	89ab      	ldrh	r3, [r5, #12]
 800ca52:	065b      	lsls	r3, r3, #25
 800ca54:	f53f af2c 	bmi.w	800c8b0 <_svfiprintf_r+0x28>
 800ca58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca5a:	b01d      	add	sp, #116	; 0x74
 800ca5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca60:	ab03      	add	r3, sp, #12
 800ca62:	9300      	str	r3, [sp, #0]
 800ca64:	462a      	mov	r2, r5
 800ca66:	4638      	mov	r0, r7
 800ca68:	4b06      	ldr	r3, [pc, #24]	; (800ca84 <_svfiprintf_r+0x1fc>)
 800ca6a:	a904      	add	r1, sp, #16
 800ca6c:	f7fe fa54 	bl	800af18 <_printf_i>
 800ca70:	e7eb      	b.n	800ca4a <_svfiprintf_r+0x1c2>
 800ca72:	bf00      	nop
 800ca74:	0800d94c 	.word	0x0800d94c
 800ca78:	0800d952 	.word	0x0800d952
 800ca7c:	0800d956 	.word	0x0800d956
 800ca80:	0800a9e1 	.word	0x0800a9e1
 800ca84:	0800c7d1 	.word	0x0800c7d1

0800ca88 <_sbrk_r>:
 800ca88:	b538      	push	{r3, r4, r5, lr}
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	4d05      	ldr	r5, [pc, #20]	; (800caa4 <_sbrk_r+0x1c>)
 800ca8e:	4604      	mov	r4, r0
 800ca90:	4608      	mov	r0, r1
 800ca92:	602b      	str	r3, [r5, #0]
 800ca94:	f7f6 feaa 	bl	80037ec <_sbrk>
 800ca98:	1c43      	adds	r3, r0, #1
 800ca9a:	d102      	bne.n	800caa2 <_sbrk_r+0x1a>
 800ca9c:	682b      	ldr	r3, [r5, #0]
 800ca9e:	b103      	cbz	r3, 800caa2 <_sbrk_r+0x1a>
 800caa0:	6023      	str	r3, [r4, #0]
 800caa2:	bd38      	pop	{r3, r4, r5, pc}
 800caa4:	20000974 	.word	0x20000974

0800caa8 <__assert_func>:
 800caa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800caaa:	4614      	mov	r4, r2
 800caac:	461a      	mov	r2, r3
 800caae:	4b09      	ldr	r3, [pc, #36]	; (800cad4 <__assert_func+0x2c>)
 800cab0:	4605      	mov	r5, r0
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	68d8      	ldr	r0, [r3, #12]
 800cab6:	b14c      	cbz	r4, 800cacc <__assert_func+0x24>
 800cab8:	4b07      	ldr	r3, [pc, #28]	; (800cad8 <__assert_func+0x30>)
 800caba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cabe:	9100      	str	r1, [sp, #0]
 800cac0:	462b      	mov	r3, r5
 800cac2:	4906      	ldr	r1, [pc, #24]	; (800cadc <__assert_func+0x34>)
 800cac4:	f000 f80e 	bl	800cae4 <fiprintf>
 800cac8:	f000 faaa 	bl	800d020 <abort>
 800cacc:	4b04      	ldr	r3, [pc, #16]	; (800cae0 <__assert_func+0x38>)
 800cace:	461c      	mov	r4, r3
 800cad0:	e7f3      	b.n	800caba <__assert_func+0x12>
 800cad2:	bf00      	nop
 800cad4:	2000006c 	.word	0x2000006c
 800cad8:	0800d95d 	.word	0x0800d95d
 800cadc:	0800d96a 	.word	0x0800d96a
 800cae0:	0800d998 	.word	0x0800d998

0800cae4 <fiprintf>:
 800cae4:	b40e      	push	{r1, r2, r3}
 800cae6:	b503      	push	{r0, r1, lr}
 800cae8:	4601      	mov	r1, r0
 800caea:	ab03      	add	r3, sp, #12
 800caec:	4805      	ldr	r0, [pc, #20]	; (800cb04 <fiprintf+0x20>)
 800caee:	f853 2b04 	ldr.w	r2, [r3], #4
 800caf2:	6800      	ldr	r0, [r0, #0]
 800caf4:	9301      	str	r3, [sp, #4]
 800caf6:	f000 f895 	bl	800cc24 <_vfiprintf_r>
 800cafa:	b002      	add	sp, #8
 800cafc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb00:	b003      	add	sp, #12
 800cb02:	4770      	bx	lr
 800cb04:	2000006c 	.word	0x2000006c

0800cb08 <__ascii_mbtowc>:
 800cb08:	b082      	sub	sp, #8
 800cb0a:	b901      	cbnz	r1, 800cb0e <__ascii_mbtowc+0x6>
 800cb0c:	a901      	add	r1, sp, #4
 800cb0e:	b142      	cbz	r2, 800cb22 <__ascii_mbtowc+0x1a>
 800cb10:	b14b      	cbz	r3, 800cb26 <__ascii_mbtowc+0x1e>
 800cb12:	7813      	ldrb	r3, [r2, #0]
 800cb14:	600b      	str	r3, [r1, #0]
 800cb16:	7812      	ldrb	r2, [r2, #0]
 800cb18:	1e10      	subs	r0, r2, #0
 800cb1a:	bf18      	it	ne
 800cb1c:	2001      	movne	r0, #1
 800cb1e:	b002      	add	sp, #8
 800cb20:	4770      	bx	lr
 800cb22:	4610      	mov	r0, r2
 800cb24:	e7fb      	b.n	800cb1e <__ascii_mbtowc+0x16>
 800cb26:	f06f 0001 	mvn.w	r0, #1
 800cb2a:	e7f8      	b.n	800cb1e <__ascii_mbtowc+0x16>

0800cb2c <memmove>:
 800cb2c:	4288      	cmp	r0, r1
 800cb2e:	b510      	push	{r4, lr}
 800cb30:	eb01 0402 	add.w	r4, r1, r2
 800cb34:	d902      	bls.n	800cb3c <memmove+0x10>
 800cb36:	4284      	cmp	r4, r0
 800cb38:	4623      	mov	r3, r4
 800cb3a:	d807      	bhi.n	800cb4c <memmove+0x20>
 800cb3c:	1e43      	subs	r3, r0, #1
 800cb3e:	42a1      	cmp	r1, r4
 800cb40:	d008      	beq.n	800cb54 <memmove+0x28>
 800cb42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb4a:	e7f8      	b.n	800cb3e <memmove+0x12>
 800cb4c:	4601      	mov	r1, r0
 800cb4e:	4402      	add	r2, r0
 800cb50:	428a      	cmp	r2, r1
 800cb52:	d100      	bne.n	800cb56 <memmove+0x2a>
 800cb54:	bd10      	pop	{r4, pc}
 800cb56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb5e:	e7f7      	b.n	800cb50 <memmove+0x24>

0800cb60 <__malloc_lock>:
 800cb60:	4801      	ldr	r0, [pc, #4]	; (800cb68 <__malloc_lock+0x8>)
 800cb62:	f000 bc19 	b.w	800d398 <__retarget_lock_acquire_recursive>
 800cb66:	bf00      	nop
 800cb68:	20000978 	.word	0x20000978

0800cb6c <__malloc_unlock>:
 800cb6c:	4801      	ldr	r0, [pc, #4]	; (800cb74 <__malloc_unlock+0x8>)
 800cb6e:	f000 bc14 	b.w	800d39a <__retarget_lock_release_recursive>
 800cb72:	bf00      	nop
 800cb74:	20000978 	.word	0x20000978

0800cb78 <_realloc_r>:
 800cb78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb7c:	4680      	mov	r8, r0
 800cb7e:	4614      	mov	r4, r2
 800cb80:	460e      	mov	r6, r1
 800cb82:	b921      	cbnz	r1, 800cb8e <_realloc_r+0x16>
 800cb84:	4611      	mov	r1, r2
 800cb86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb8a:	f7ff bdad 	b.w	800c6e8 <_malloc_r>
 800cb8e:	b92a      	cbnz	r2, 800cb9c <_realloc_r+0x24>
 800cb90:	f7ff fd42 	bl	800c618 <_free_r>
 800cb94:	4625      	mov	r5, r4
 800cb96:	4628      	mov	r0, r5
 800cb98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb9c:	f000 fc64 	bl	800d468 <_malloc_usable_size_r>
 800cba0:	4284      	cmp	r4, r0
 800cba2:	4607      	mov	r7, r0
 800cba4:	d802      	bhi.n	800cbac <_realloc_r+0x34>
 800cba6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cbaa:	d812      	bhi.n	800cbd2 <_realloc_r+0x5a>
 800cbac:	4621      	mov	r1, r4
 800cbae:	4640      	mov	r0, r8
 800cbb0:	f7ff fd9a 	bl	800c6e8 <_malloc_r>
 800cbb4:	4605      	mov	r5, r0
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	d0ed      	beq.n	800cb96 <_realloc_r+0x1e>
 800cbba:	42bc      	cmp	r4, r7
 800cbbc:	4622      	mov	r2, r4
 800cbbe:	4631      	mov	r1, r6
 800cbc0:	bf28      	it	cs
 800cbc2:	463a      	movcs	r2, r7
 800cbc4:	f7ff f984 	bl	800bed0 <memcpy>
 800cbc8:	4631      	mov	r1, r6
 800cbca:	4640      	mov	r0, r8
 800cbcc:	f7ff fd24 	bl	800c618 <_free_r>
 800cbd0:	e7e1      	b.n	800cb96 <_realloc_r+0x1e>
 800cbd2:	4635      	mov	r5, r6
 800cbd4:	e7df      	b.n	800cb96 <_realloc_r+0x1e>

0800cbd6 <__sfputc_r>:
 800cbd6:	6893      	ldr	r3, [r2, #8]
 800cbd8:	b410      	push	{r4}
 800cbda:	3b01      	subs	r3, #1
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	6093      	str	r3, [r2, #8]
 800cbe0:	da07      	bge.n	800cbf2 <__sfputc_r+0x1c>
 800cbe2:	6994      	ldr	r4, [r2, #24]
 800cbe4:	42a3      	cmp	r3, r4
 800cbe6:	db01      	blt.n	800cbec <__sfputc_r+0x16>
 800cbe8:	290a      	cmp	r1, #10
 800cbea:	d102      	bne.n	800cbf2 <__sfputc_r+0x1c>
 800cbec:	bc10      	pop	{r4}
 800cbee:	f000 b949 	b.w	800ce84 <__swbuf_r>
 800cbf2:	6813      	ldr	r3, [r2, #0]
 800cbf4:	1c58      	adds	r0, r3, #1
 800cbf6:	6010      	str	r0, [r2, #0]
 800cbf8:	7019      	strb	r1, [r3, #0]
 800cbfa:	4608      	mov	r0, r1
 800cbfc:	bc10      	pop	{r4}
 800cbfe:	4770      	bx	lr

0800cc00 <__sfputs_r>:
 800cc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc02:	4606      	mov	r6, r0
 800cc04:	460f      	mov	r7, r1
 800cc06:	4614      	mov	r4, r2
 800cc08:	18d5      	adds	r5, r2, r3
 800cc0a:	42ac      	cmp	r4, r5
 800cc0c:	d101      	bne.n	800cc12 <__sfputs_r+0x12>
 800cc0e:	2000      	movs	r0, #0
 800cc10:	e007      	b.n	800cc22 <__sfputs_r+0x22>
 800cc12:	463a      	mov	r2, r7
 800cc14:	4630      	mov	r0, r6
 800cc16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc1a:	f7ff ffdc 	bl	800cbd6 <__sfputc_r>
 800cc1e:	1c43      	adds	r3, r0, #1
 800cc20:	d1f3      	bne.n	800cc0a <__sfputs_r+0xa>
 800cc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc24 <_vfiprintf_r>:
 800cc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc28:	460d      	mov	r5, r1
 800cc2a:	4614      	mov	r4, r2
 800cc2c:	4698      	mov	r8, r3
 800cc2e:	4606      	mov	r6, r0
 800cc30:	b09d      	sub	sp, #116	; 0x74
 800cc32:	b118      	cbz	r0, 800cc3c <_vfiprintf_r+0x18>
 800cc34:	6983      	ldr	r3, [r0, #24]
 800cc36:	b90b      	cbnz	r3, 800cc3c <_vfiprintf_r+0x18>
 800cc38:	f000 fb10 	bl	800d25c <__sinit>
 800cc3c:	4b89      	ldr	r3, [pc, #548]	; (800ce64 <_vfiprintf_r+0x240>)
 800cc3e:	429d      	cmp	r5, r3
 800cc40:	d11b      	bne.n	800cc7a <_vfiprintf_r+0x56>
 800cc42:	6875      	ldr	r5, [r6, #4]
 800cc44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc46:	07d9      	lsls	r1, r3, #31
 800cc48:	d405      	bmi.n	800cc56 <_vfiprintf_r+0x32>
 800cc4a:	89ab      	ldrh	r3, [r5, #12]
 800cc4c:	059a      	lsls	r2, r3, #22
 800cc4e:	d402      	bmi.n	800cc56 <_vfiprintf_r+0x32>
 800cc50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc52:	f000 fba1 	bl	800d398 <__retarget_lock_acquire_recursive>
 800cc56:	89ab      	ldrh	r3, [r5, #12]
 800cc58:	071b      	lsls	r3, r3, #28
 800cc5a:	d501      	bpl.n	800cc60 <_vfiprintf_r+0x3c>
 800cc5c:	692b      	ldr	r3, [r5, #16]
 800cc5e:	b9eb      	cbnz	r3, 800cc9c <_vfiprintf_r+0x78>
 800cc60:	4629      	mov	r1, r5
 800cc62:	4630      	mov	r0, r6
 800cc64:	f000 f96e 	bl	800cf44 <__swsetup_r>
 800cc68:	b1c0      	cbz	r0, 800cc9c <_vfiprintf_r+0x78>
 800cc6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc6c:	07dc      	lsls	r4, r3, #31
 800cc6e:	d50e      	bpl.n	800cc8e <_vfiprintf_r+0x6a>
 800cc70:	f04f 30ff 	mov.w	r0, #4294967295
 800cc74:	b01d      	add	sp, #116	; 0x74
 800cc76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc7a:	4b7b      	ldr	r3, [pc, #492]	; (800ce68 <_vfiprintf_r+0x244>)
 800cc7c:	429d      	cmp	r5, r3
 800cc7e:	d101      	bne.n	800cc84 <_vfiprintf_r+0x60>
 800cc80:	68b5      	ldr	r5, [r6, #8]
 800cc82:	e7df      	b.n	800cc44 <_vfiprintf_r+0x20>
 800cc84:	4b79      	ldr	r3, [pc, #484]	; (800ce6c <_vfiprintf_r+0x248>)
 800cc86:	429d      	cmp	r5, r3
 800cc88:	bf08      	it	eq
 800cc8a:	68f5      	ldreq	r5, [r6, #12]
 800cc8c:	e7da      	b.n	800cc44 <_vfiprintf_r+0x20>
 800cc8e:	89ab      	ldrh	r3, [r5, #12]
 800cc90:	0598      	lsls	r0, r3, #22
 800cc92:	d4ed      	bmi.n	800cc70 <_vfiprintf_r+0x4c>
 800cc94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc96:	f000 fb80 	bl	800d39a <__retarget_lock_release_recursive>
 800cc9a:	e7e9      	b.n	800cc70 <_vfiprintf_r+0x4c>
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	9309      	str	r3, [sp, #36]	; 0x24
 800cca0:	2320      	movs	r3, #32
 800cca2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cca6:	2330      	movs	r3, #48	; 0x30
 800cca8:	f04f 0901 	mov.w	r9, #1
 800ccac:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccb0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ce70 <_vfiprintf_r+0x24c>
 800ccb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccb8:	4623      	mov	r3, r4
 800ccba:	469a      	mov	sl, r3
 800ccbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccc0:	b10a      	cbz	r2, 800ccc6 <_vfiprintf_r+0xa2>
 800ccc2:	2a25      	cmp	r2, #37	; 0x25
 800ccc4:	d1f9      	bne.n	800ccba <_vfiprintf_r+0x96>
 800ccc6:	ebba 0b04 	subs.w	fp, sl, r4
 800ccca:	d00b      	beq.n	800cce4 <_vfiprintf_r+0xc0>
 800cccc:	465b      	mov	r3, fp
 800ccce:	4622      	mov	r2, r4
 800ccd0:	4629      	mov	r1, r5
 800ccd2:	4630      	mov	r0, r6
 800ccd4:	f7ff ff94 	bl	800cc00 <__sfputs_r>
 800ccd8:	3001      	adds	r0, #1
 800ccda:	f000 80aa 	beq.w	800ce32 <_vfiprintf_r+0x20e>
 800ccde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cce0:	445a      	add	r2, fp
 800cce2:	9209      	str	r2, [sp, #36]	; 0x24
 800cce4:	f89a 3000 	ldrb.w	r3, [sl]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	f000 80a2 	beq.w	800ce32 <_vfiprintf_r+0x20e>
 800ccee:	2300      	movs	r3, #0
 800ccf0:	f04f 32ff 	mov.w	r2, #4294967295
 800ccf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccf8:	f10a 0a01 	add.w	sl, sl, #1
 800ccfc:	9304      	str	r3, [sp, #16]
 800ccfe:	9307      	str	r3, [sp, #28]
 800cd00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd04:	931a      	str	r3, [sp, #104]	; 0x68
 800cd06:	4654      	mov	r4, sl
 800cd08:	2205      	movs	r2, #5
 800cd0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd0e:	4858      	ldr	r0, [pc, #352]	; (800ce70 <_vfiprintf_r+0x24c>)
 800cd10:	f7ff f8d0 	bl	800beb4 <memchr>
 800cd14:	9a04      	ldr	r2, [sp, #16]
 800cd16:	b9d8      	cbnz	r0, 800cd50 <_vfiprintf_r+0x12c>
 800cd18:	06d1      	lsls	r1, r2, #27
 800cd1a:	bf44      	itt	mi
 800cd1c:	2320      	movmi	r3, #32
 800cd1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd22:	0713      	lsls	r3, r2, #28
 800cd24:	bf44      	itt	mi
 800cd26:	232b      	movmi	r3, #43	; 0x2b
 800cd28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd2c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd30:	2b2a      	cmp	r3, #42	; 0x2a
 800cd32:	d015      	beq.n	800cd60 <_vfiprintf_r+0x13c>
 800cd34:	4654      	mov	r4, sl
 800cd36:	2000      	movs	r0, #0
 800cd38:	f04f 0c0a 	mov.w	ip, #10
 800cd3c:	9a07      	ldr	r2, [sp, #28]
 800cd3e:	4621      	mov	r1, r4
 800cd40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd44:	3b30      	subs	r3, #48	; 0x30
 800cd46:	2b09      	cmp	r3, #9
 800cd48:	d94e      	bls.n	800cde8 <_vfiprintf_r+0x1c4>
 800cd4a:	b1b0      	cbz	r0, 800cd7a <_vfiprintf_r+0x156>
 800cd4c:	9207      	str	r2, [sp, #28]
 800cd4e:	e014      	b.n	800cd7a <_vfiprintf_r+0x156>
 800cd50:	eba0 0308 	sub.w	r3, r0, r8
 800cd54:	fa09 f303 	lsl.w	r3, r9, r3
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	46a2      	mov	sl, r4
 800cd5c:	9304      	str	r3, [sp, #16]
 800cd5e:	e7d2      	b.n	800cd06 <_vfiprintf_r+0xe2>
 800cd60:	9b03      	ldr	r3, [sp, #12]
 800cd62:	1d19      	adds	r1, r3, #4
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	9103      	str	r1, [sp, #12]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	bfbb      	ittet	lt
 800cd6c:	425b      	neglt	r3, r3
 800cd6e:	f042 0202 	orrlt.w	r2, r2, #2
 800cd72:	9307      	strge	r3, [sp, #28]
 800cd74:	9307      	strlt	r3, [sp, #28]
 800cd76:	bfb8      	it	lt
 800cd78:	9204      	strlt	r2, [sp, #16]
 800cd7a:	7823      	ldrb	r3, [r4, #0]
 800cd7c:	2b2e      	cmp	r3, #46	; 0x2e
 800cd7e:	d10c      	bne.n	800cd9a <_vfiprintf_r+0x176>
 800cd80:	7863      	ldrb	r3, [r4, #1]
 800cd82:	2b2a      	cmp	r3, #42	; 0x2a
 800cd84:	d135      	bne.n	800cdf2 <_vfiprintf_r+0x1ce>
 800cd86:	9b03      	ldr	r3, [sp, #12]
 800cd88:	3402      	adds	r4, #2
 800cd8a:	1d1a      	adds	r2, r3, #4
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	9203      	str	r2, [sp, #12]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	bfb8      	it	lt
 800cd94:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd98:	9305      	str	r3, [sp, #20]
 800cd9a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ce74 <_vfiprintf_r+0x250>
 800cd9e:	2203      	movs	r2, #3
 800cda0:	4650      	mov	r0, sl
 800cda2:	7821      	ldrb	r1, [r4, #0]
 800cda4:	f7ff f886 	bl	800beb4 <memchr>
 800cda8:	b140      	cbz	r0, 800cdbc <_vfiprintf_r+0x198>
 800cdaa:	2340      	movs	r3, #64	; 0x40
 800cdac:	eba0 000a 	sub.w	r0, r0, sl
 800cdb0:	fa03 f000 	lsl.w	r0, r3, r0
 800cdb4:	9b04      	ldr	r3, [sp, #16]
 800cdb6:	3401      	adds	r4, #1
 800cdb8:	4303      	orrs	r3, r0
 800cdba:	9304      	str	r3, [sp, #16]
 800cdbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdc0:	2206      	movs	r2, #6
 800cdc2:	482d      	ldr	r0, [pc, #180]	; (800ce78 <_vfiprintf_r+0x254>)
 800cdc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdc8:	f7ff f874 	bl	800beb4 <memchr>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	d03f      	beq.n	800ce50 <_vfiprintf_r+0x22c>
 800cdd0:	4b2a      	ldr	r3, [pc, #168]	; (800ce7c <_vfiprintf_r+0x258>)
 800cdd2:	bb1b      	cbnz	r3, 800ce1c <_vfiprintf_r+0x1f8>
 800cdd4:	9b03      	ldr	r3, [sp, #12]
 800cdd6:	3307      	adds	r3, #7
 800cdd8:	f023 0307 	bic.w	r3, r3, #7
 800cddc:	3308      	adds	r3, #8
 800cdde:	9303      	str	r3, [sp, #12]
 800cde0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cde2:	443b      	add	r3, r7
 800cde4:	9309      	str	r3, [sp, #36]	; 0x24
 800cde6:	e767      	b.n	800ccb8 <_vfiprintf_r+0x94>
 800cde8:	460c      	mov	r4, r1
 800cdea:	2001      	movs	r0, #1
 800cdec:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdf0:	e7a5      	b.n	800cd3e <_vfiprintf_r+0x11a>
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	f04f 0c0a 	mov.w	ip, #10
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	3401      	adds	r4, #1
 800cdfc:	9305      	str	r3, [sp, #20]
 800cdfe:	4620      	mov	r0, r4
 800ce00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce04:	3a30      	subs	r2, #48	; 0x30
 800ce06:	2a09      	cmp	r2, #9
 800ce08:	d903      	bls.n	800ce12 <_vfiprintf_r+0x1ee>
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d0c5      	beq.n	800cd9a <_vfiprintf_r+0x176>
 800ce0e:	9105      	str	r1, [sp, #20]
 800ce10:	e7c3      	b.n	800cd9a <_vfiprintf_r+0x176>
 800ce12:	4604      	mov	r4, r0
 800ce14:	2301      	movs	r3, #1
 800ce16:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce1a:	e7f0      	b.n	800cdfe <_vfiprintf_r+0x1da>
 800ce1c:	ab03      	add	r3, sp, #12
 800ce1e:	9300      	str	r3, [sp, #0]
 800ce20:	462a      	mov	r2, r5
 800ce22:	4630      	mov	r0, r6
 800ce24:	4b16      	ldr	r3, [pc, #88]	; (800ce80 <_vfiprintf_r+0x25c>)
 800ce26:	a904      	add	r1, sp, #16
 800ce28:	f7fd fdda 	bl	800a9e0 <_printf_float>
 800ce2c:	4607      	mov	r7, r0
 800ce2e:	1c78      	adds	r0, r7, #1
 800ce30:	d1d6      	bne.n	800cde0 <_vfiprintf_r+0x1bc>
 800ce32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce34:	07d9      	lsls	r1, r3, #31
 800ce36:	d405      	bmi.n	800ce44 <_vfiprintf_r+0x220>
 800ce38:	89ab      	ldrh	r3, [r5, #12]
 800ce3a:	059a      	lsls	r2, r3, #22
 800ce3c:	d402      	bmi.n	800ce44 <_vfiprintf_r+0x220>
 800ce3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce40:	f000 faab 	bl	800d39a <__retarget_lock_release_recursive>
 800ce44:	89ab      	ldrh	r3, [r5, #12]
 800ce46:	065b      	lsls	r3, r3, #25
 800ce48:	f53f af12 	bmi.w	800cc70 <_vfiprintf_r+0x4c>
 800ce4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce4e:	e711      	b.n	800cc74 <_vfiprintf_r+0x50>
 800ce50:	ab03      	add	r3, sp, #12
 800ce52:	9300      	str	r3, [sp, #0]
 800ce54:	462a      	mov	r2, r5
 800ce56:	4630      	mov	r0, r6
 800ce58:	4b09      	ldr	r3, [pc, #36]	; (800ce80 <_vfiprintf_r+0x25c>)
 800ce5a:	a904      	add	r1, sp, #16
 800ce5c:	f7fe f85c 	bl	800af18 <_printf_i>
 800ce60:	e7e4      	b.n	800ce2c <_vfiprintf_r+0x208>
 800ce62:	bf00      	nop
 800ce64:	0800dac4 	.word	0x0800dac4
 800ce68:	0800dae4 	.word	0x0800dae4
 800ce6c:	0800daa4 	.word	0x0800daa4
 800ce70:	0800d94c 	.word	0x0800d94c
 800ce74:	0800d952 	.word	0x0800d952
 800ce78:	0800d956 	.word	0x0800d956
 800ce7c:	0800a9e1 	.word	0x0800a9e1
 800ce80:	0800cc01 	.word	0x0800cc01

0800ce84 <__swbuf_r>:
 800ce84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce86:	460e      	mov	r6, r1
 800ce88:	4614      	mov	r4, r2
 800ce8a:	4605      	mov	r5, r0
 800ce8c:	b118      	cbz	r0, 800ce96 <__swbuf_r+0x12>
 800ce8e:	6983      	ldr	r3, [r0, #24]
 800ce90:	b90b      	cbnz	r3, 800ce96 <__swbuf_r+0x12>
 800ce92:	f000 f9e3 	bl	800d25c <__sinit>
 800ce96:	4b21      	ldr	r3, [pc, #132]	; (800cf1c <__swbuf_r+0x98>)
 800ce98:	429c      	cmp	r4, r3
 800ce9a:	d12b      	bne.n	800cef4 <__swbuf_r+0x70>
 800ce9c:	686c      	ldr	r4, [r5, #4]
 800ce9e:	69a3      	ldr	r3, [r4, #24]
 800cea0:	60a3      	str	r3, [r4, #8]
 800cea2:	89a3      	ldrh	r3, [r4, #12]
 800cea4:	071a      	lsls	r2, r3, #28
 800cea6:	d52f      	bpl.n	800cf08 <__swbuf_r+0x84>
 800cea8:	6923      	ldr	r3, [r4, #16]
 800ceaa:	b36b      	cbz	r3, 800cf08 <__swbuf_r+0x84>
 800ceac:	6923      	ldr	r3, [r4, #16]
 800ceae:	6820      	ldr	r0, [r4, #0]
 800ceb0:	b2f6      	uxtb	r6, r6
 800ceb2:	1ac0      	subs	r0, r0, r3
 800ceb4:	6963      	ldr	r3, [r4, #20]
 800ceb6:	4637      	mov	r7, r6
 800ceb8:	4283      	cmp	r3, r0
 800ceba:	dc04      	bgt.n	800cec6 <__swbuf_r+0x42>
 800cebc:	4621      	mov	r1, r4
 800cebe:	4628      	mov	r0, r5
 800cec0:	f000 f938 	bl	800d134 <_fflush_r>
 800cec4:	bb30      	cbnz	r0, 800cf14 <__swbuf_r+0x90>
 800cec6:	68a3      	ldr	r3, [r4, #8]
 800cec8:	3001      	adds	r0, #1
 800ceca:	3b01      	subs	r3, #1
 800cecc:	60a3      	str	r3, [r4, #8]
 800cece:	6823      	ldr	r3, [r4, #0]
 800ced0:	1c5a      	adds	r2, r3, #1
 800ced2:	6022      	str	r2, [r4, #0]
 800ced4:	701e      	strb	r6, [r3, #0]
 800ced6:	6963      	ldr	r3, [r4, #20]
 800ced8:	4283      	cmp	r3, r0
 800ceda:	d004      	beq.n	800cee6 <__swbuf_r+0x62>
 800cedc:	89a3      	ldrh	r3, [r4, #12]
 800cede:	07db      	lsls	r3, r3, #31
 800cee0:	d506      	bpl.n	800cef0 <__swbuf_r+0x6c>
 800cee2:	2e0a      	cmp	r6, #10
 800cee4:	d104      	bne.n	800cef0 <__swbuf_r+0x6c>
 800cee6:	4621      	mov	r1, r4
 800cee8:	4628      	mov	r0, r5
 800ceea:	f000 f923 	bl	800d134 <_fflush_r>
 800ceee:	b988      	cbnz	r0, 800cf14 <__swbuf_r+0x90>
 800cef0:	4638      	mov	r0, r7
 800cef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cef4:	4b0a      	ldr	r3, [pc, #40]	; (800cf20 <__swbuf_r+0x9c>)
 800cef6:	429c      	cmp	r4, r3
 800cef8:	d101      	bne.n	800cefe <__swbuf_r+0x7a>
 800cefa:	68ac      	ldr	r4, [r5, #8]
 800cefc:	e7cf      	b.n	800ce9e <__swbuf_r+0x1a>
 800cefe:	4b09      	ldr	r3, [pc, #36]	; (800cf24 <__swbuf_r+0xa0>)
 800cf00:	429c      	cmp	r4, r3
 800cf02:	bf08      	it	eq
 800cf04:	68ec      	ldreq	r4, [r5, #12]
 800cf06:	e7ca      	b.n	800ce9e <__swbuf_r+0x1a>
 800cf08:	4621      	mov	r1, r4
 800cf0a:	4628      	mov	r0, r5
 800cf0c:	f000 f81a 	bl	800cf44 <__swsetup_r>
 800cf10:	2800      	cmp	r0, #0
 800cf12:	d0cb      	beq.n	800ceac <__swbuf_r+0x28>
 800cf14:	f04f 37ff 	mov.w	r7, #4294967295
 800cf18:	e7ea      	b.n	800cef0 <__swbuf_r+0x6c>
 800cf1a:	bf00      	nop
 800cf1c:	0800dac4 	.word	0x0800dac4
 800cf20:	0800dae4 	.word	0x0800dae4
 800cf24:	0800daa4 	.word	0x0800daa4

0800cf28 <__ascii_wctomb>:
 800cf28:	4603      	mov	r3, r0
 800cf2a:	4608      	mov	r0, r1
 800cf2c:	b141      	cbz	r1, 800cf40 <__ascii_wctomb+0x18>
 800cf2e:	2aff      	cmp	r2, #255	; 0xff
 800cf30:	d904      	bls.n	800cf3c <__ascii_wctomb+0x14>
 800cf32:	228a      	movs	r2, #138	; 0x8a
 800cf34:	f04f 30ff 	mov.w	r0, #4294967295
 800cf38:	601a      	str	r2, [r3, #0]
 800cf3a:	4770      	bx	lr
 800cf3c:	2001      	movs	r0, #1
 800cf3e:	700a      	strb	r2, [r1, #0]
 800cf40:	4770      	bx	lr
	...

0800cf44 <__swsetup_r>:
 800cf44:	4b32      	ldr	r3, [pc, #200]	; (800d010 <__swsetup_r+0xcc>)
 800cf46:	b570      	push	{r4, r5, r6, lr}
 800cf48:	681d      	ldr	r5, [r3, #0]
 800cf4a:	4606      	mov	r6, r0
 800cf4c:	460c      	mov	r4, r1
 800cf4e:	b125      	cbz	r5, 800cf5a <__swsetup_r+0x16>
 800cf50:	69ab      	ldr	r3, [r5, #24]
 800cf52:	b913      	cbnz	r3, 800cf5a <__swsetup_r+0x16>
 800cf54:	4628      	mov	r0, r5
 800cf56:	f000 f981 	bl	800d25c <__sinit>
 800cf5a:	4b2e      	ldr	r3, [pc, #184]	; (800d014 <__swsetup_r+0xd0>)
 800cf5c:	429c      	cmp	r4, r3
 800cf5e:	d10f      	bne.n	800cf80 <__swsetup_r+0x3c>
 800cf60:	686c      	ldr	r4, [r5, #4]
 800cf62:	89a3      	ldrh	r3, [r4, #12]
 800cf64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf68:	0719      	lsls	r1, r3, #28
 800cf6a:	d42c      	bmi.n	800cfc6 <__swsetup_r+0x82>
 800cf6c:	06dd      	lsls	r5, r3, #27
 800cf6e:	d411      	bmi.n	800cf94 <__swsetup_r+0x50>
 800cf70:	2309      	movs	r3, #9
 800cf72:	6033      	str	r3, [r6, #0]
 800cf74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cf78:	f04f 30ff 	mov.w	r0, #4294967295
 800cf7c:	81a3      	strh	r3, [r4, #12]
 800cf7e:	e03e      	b.n	800cffe <__swsetup_r+0xba>
 800cf80:	4b25      	ldr	r3, [pc, #148]	; (800d018 <__swsetup_r+0xd4>)
 800cf82:	429c      	cmp	r4, r3
 800cf84:	d101      	bne.n	800cf8a <__swsetup_r+0x46>
 800cf86:	68ac      	ldr	r4, [r5, #8]
 800cf88:	e7eb      	b.n	800cf62 <__swsetup_r+0x1e>
 800cf8a:	4b24      	ldr	r3, [pc, #144]	; (800d01c <__swsetup_r+0xd8>)
 800cf8c:	429c      	cmp	r4, r3
 800cf8e:	bf08      	it	eq
 800cf90:	68ec      	ldreq	r4, [r5, #12]
 800cf92:	e7e6      	b.n	800cf62 <__swsetup_r+0x1e>
 800cf94:	0758      	lsls	r0, r3, #29
 800cf96:	d512      	bpl.n	800cfbe <__swsetup_r+0x7a>
 800cf98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf9a:	b141      	cbz	r1, 800cfae <__swsetup_r+0x6a>
 800cf9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfa0:	4299      	cmp	r1, r3
 800cfa2:	d002      	beq.n	800cfaa <__swsetup_r+0x66>
 800cfa4:	4630      	mov	r0, r6
 800cfa6:	f7ff fb37 	bl	800c618 <_free_r>
 800cfaa:	2300      	movs	r3, #0
 800cfac:	6363      	str	r3, [r4, #52]	; 0x34
 800cfae:	89a3      	ldrh	r3, [r4, #12]
 800cfb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cfb4:	81a3      	strh	r3, [r4, #12]
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	6063      	str	r3, [r4, #4]
 800cfba:	6923      	ldr	r3, [r4, #16]
 800cfbc:	6023      	str	r3, [r4, #0]
 800cfbe:	89a3      	ldrh	r3, [r4, #12]
 800cfc0:	f043 0308 	orr.w	r3, r3, #8
 800cfc4:	81a3      	strh	r3, [r4, #12]
 800cfc6:	6923      	ldr	r3, [r4, #16]
 800cfc8:	b94b      	cbnz	r3, 800cfde <__swsetup_r+0x9a>
 800cfca:	89a3      	ldrh	r3, [r4, #12]
 800cfcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cfd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfd4:	d003      	beq.n	800cfde <__swsetup_r+0x9a>
 800cfd6:	4621      	mov	r1, r4
 800cfd8:	4630      	mov	r0, r6
 800cfda:	f000 fa05 	bl	800d3e8 <__smakebuf_r>
 800cfde:	89a0      	ldrh	r0, [r4, #12]
 800cfe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cfe4:	f010 0301 	ands.w	r3, r0, #1
 800cfe8:	d00a      	beq.n	800d000 <__swsetup_r+0xbc>
 800cfea:	2300      	movs	r3, #0
 800cfec:	60a3      	str	r3, [r4, #8]
 800cfee:	6963      	ldr	r3, [r4, #20]
 800cff0:	425b      	negs	r3, r3
 800cff2:	61a3      	str	r3, [r4, #24]
 800cff4:	6923      	ldr	r3, [r4, #16]
 800cff6:	b943      	cbnz	r3, 800d00a <__swsetup_r+0xc6>
 800cff8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cffc:	d1ba      	bne.n	800cf74 <__swsetup_r+0x30>
 800cffe:	bd70      	pop	{r4, r5, r6, pc}
 800d000:	0781      	lsls	r1, r0, #30
 800d002:	bf58      	it	pl
 800d004:	6963      	ldrpl	r3, [r4, #20]
 800d006:	60a3      	str	r3, [r4, #8]
 800d008:	e7f4      	b.n	800cff4 <__swsetup_r+0xb0>
 800d00a:	2000      	movs	r0, #0
 800d00c:	e7f7      	b.n	800cffe <__swsetup_r+0xba>
 800d00e:	bf00      	nop
 800d010:	2000006c 	.word	0x2000006c
 800d014:	0800dac4 	.word	0x0800dac4
 800d018:	0800dae4 	.word	0x0800dae4
 800d01c:	0800daa4 	.word	0x0800daa4

0800d020 <abort>:
 800d020:	2006      	movs	r0, #6
 800d022:	b508      	push	{r3, lr}
 800d024:	f000 fa50 	bl	800d4c8 <raise>
 800d028:	2001      	movs	r0, #1
 800d02a:	f7f6 fb6c 	bl	8003706 <_exit>
	...

0800d030 <__sflush_r>:
 800d030:	898a      	ldrh	r2, [r1, #12]
 800d032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d034:	4605      	mov	r5, r0
 800d036:	0710      	lsls	r0, r2, #28
 800d038:	460c      	mov	r4, r1
 800d03a:	d457      	bmi.n	800d0ec <__sflush_r+0xbc>
 800d03c:	684b      	ldr	r3, [r1, #4]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	dc04      	bgt.n	800d04c <__sflush_r+0x1c>
 800d042:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d044:	2b00      	cmp	r3, #0
 800d046:	dc01      	bgt.n	800d04c <__sflush_r+0x1c>
 800d048:	2000      	movs	r0, #0
 800d04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d04c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d04e:	2e00      	cmp	r6, #0
 800d050:	d0fa      	beq.n	800d048 <__sflush_r+0x18>
 800d052:	2300      	movs	r3, #0
 800d054:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d058:	682f      	ldr	r7, [r5, #0]
 800d05a:	602b      	str	r3, [r5, #0]
 800d05c:	d032      	beq.n	800d0c4 <__sflush_r+0x94>
 800d05e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d060:	89a3      	ldrh	r3, [r4, #12]
 800d062:	075a      	lsls	r2, r3, #29
 800d064:	d505      	bpl.n	800d072 <__sflush_r+0x42>
 800d066:	6863      	ldr	r3, [r4, #4]
 800d068:	1ac0      	subs	r0, r0, r3
 800d06a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d06c:	b10b      	cbz	r3, 800d072 <__sflush_r+0x42>
 800d06e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d070:	1ac0      	subs	r0, r0, r3
 800d072:	2300      	movs	r3, #0
 800d074:	4602      	mov	r2, r0
 800d076:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d078:	4628      	mov	r0, r5
 800d07a:	6a21      	ldr	r1, [r4, #32]
 800d07c:	47b0      	blx	r6
 800d07e:	1c43      	adds	r3, r0, #1
 800d080:	89a3      	ldrh	r3, [r4, #12]
 800d082:	d106      	bne.n	800d092 <__sflush_r+0x62>
 800d084:	6829      	ldr	r1, [r5, #0]
 800d086:	291d      	cmp	r1, #29
 800d088:	d82c      	bhi.n	800d0e4 <__sflush_r+0xb4>
 800d08a:	4a29      	ldr	r2, [pc, #164]	; (800d130 <__sflush_r+0x100>)
 800d08c:	40ca      	lsrs	r2, r1
 800d08e:	07d6      	lsls	r6, r2, #31
 800d090:	d528      	bpl.n	800d0e4 <__sflush_r+0xb4>
 800d092:	2200      	movs	r2, #0
 800d094:	6062      	str	r2, [r4, #4]
 800d096:	6922      	ldr	r2, [r4, #16]
 800d098:	04d9      	lsls	r1, r3, #19
 800d09a:	6022      	str	r2, [r4, #0]
 800d09c:	d504      	bpl.n	800d0a8 <__sflush_r+0x78>
 800d09e:	1c42      	adds	r2, r0, #1
 800d0a0:	d101      	bne.n	800d0a6 <__sflush_r+0x76>
 800d0a2:	682b      	ldr	r3, [r5, #0]
 800d0a4:	b903      	cbnz	r3, 800d0a8 <__sflush_r+0x78>
 800d0a6:	6560      	str	r0, [r4, #84]	; 0x54
 800d0a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0aa:	602f      	str	r7, [r5, #0]
 800d0ac:	2900      	cmp	r1, #0
 800d0ae:	d0cb      	beq.n	800d048 <__sflush_r+0x18>
 800d0b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0b4:	4299      	cmp	r1, r3
 800d0b6:	d002      	beq.n	800d0be <__sflush_r+0x8e>
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	f7ff faad 	bl	800c618 <_free_r>
 800d0be:	2000      	movs	r0, #0
 800d0c0:	6360      	str	r0, [r4, #52]	; 0x34
 800d0c2:	e7c2      	b.n	800d04a <__sflush_r+0x1a>
 800d0c4:	6a21      	ldr	r1, [r4, #32]
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	47b0      	blx	r6
 800d0cc:	1c41      	adds	r1, r0, #1
 800d0ce:	d1c7      	bne.n	800d060 <__sflush_r+0x30>
 800d0d0:	682b      	ldr	r3, [r5, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d0c4      	beq.n	800d060 <__sflush_r+0x30>
 800d0d6:	2b1d      	cmp	r3, #29
 800d0d8:	d001      	beq.n	800d0de <__sflush_r+0xae>
 800d0da:	2b16      	cmp	r3, #22
 800d0dc:	d101      	bne.n	800d0e2 <__sflush_r+0xb2>
 800d0de:	602f      	str	r7, [r5, #0]
 800d0e0:	e7b2      	b.n	800d048 <__sflush_r+0x18>
 800d0e2:	89a3      	ldrh	r3, [r4, #12]
 800d0e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0e8:	81a3      	strh	r3, [r4, #12]
 800d0ea:	e7ae      	b.n	800d04a <__sflush_r+0x1a>
 800d0ec:	690f      	ldr	r7, [r1, #16]
 800d0ee:	2f00      	cmp	r7, #0
 800d0f0:	d0aa      	beq.n	800d048 <__sflush_r+0x18>
 800d0f2:	0793      	lsls	r3, r2, #30
 800d0f4:	bf18      	it	ne
 800d0f6:	2300      	movne	r3, #0
 800d0f8:	680e      	ldr	r6, [r1, #0]
 800d0fa:	bf08      	it	eq
 800d0fc:	694b      	ldreq	r3, [r1, #20]
 800d0fe:	1bf6      	subs	r6, r6, r7
 800d100:	600f      	str	r7, [r1, #0]
 800d102:	608b      	str	r3, [r1, #8]
 800d104:	2e00      	cmp	r6, #0
 800d106:	dd9f      	ble.n	800d048 <__sflush_r+0x18>
 800d108:	4633      	mov	r3, r6
 800d10a:	463a      	mov	r2, r7
 800d10c:	4628      	mov	r0, r5
 800d10e:	6a21      	ldr	r1, [r4, #32]
 800d110:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d114:	47e0      	blx	ip
 800d116:	2800      	cmp	r0, #0
 800d118:	dc06      	bgt.n	800d128 <__sflush_r+0xf8>
 800d11a:	89a3      	ldrh	r3, [r4, #12]
 800d11c:	f04f 30ff 	mov.w	r0, #4294967295
 800d120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d124:	81a3      	strh	r3, [r4, #12]
 800d126:	e790      	b.n	800d04a <__sflush_r+0x1a>
 800d128:	4407      	add	r7, r0
 800d12a:	1a36      	subs	r6, r6, r0
 800d12c:	e7ea      	b.n	800d104 <__sflush_r+0xd4>
 800d12e:	bf00      	nop
 800d130:	20400001 	.word	0x20400001

0800d134 <_fflush_r>:
 800d134:	b538      	push	{r3, r4, r5, lr}
 800d136:	690b      	ldr	r3, [r1, #16]
 800d138:	4605      	mov	r5, r0
 800d13a:	460c      	mov	r4, r1
 800d13c:	b913      	cbnz	r3, 800d144 <_fflush_r+0x10>
 800d13e:	2500      	movs	r5, #0
 800d140:	4628      	mov	r0, r5
 800d142:	bd38      	pop	{r3, r4, r5, pc}
 800d144:	b118      	cbz	r0, 800d14e <_fflush_r+0x1a>
 800d146:	6983      	ldr	r3, [r0, #24]
 800d148:	b90b      	cbnz	r3, 800d14e <_fflush_r+0x1a>
 800d14a:	f000 f887 	bl	800d25c <__sinit>
 800d14e:	4b14      	ldr	r3, [pc, #80]	; (800d1a0 <_fflush_r+0x6c>)
 800d150:	429c      	cmp	r4, r3
 800d152:	d11b      	bne.n	800d18c <_fflush_r+0x58>
 800d154:	686c      	ldr	r4, [r5, #4]
 800d156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d0ef      	beq.n	800d13e <_fflush_r+0xa>
 800d15e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d160:	07d0      	lsls	r0, r2, #31
 800d162:	d404      	bmi.n	800d16e <_fflush_r+0x3a>
 800d164:	0599      	lsls	r1, r3, #22
 800d166:	d402      	bmi.n	800d16e <_fflush_r+0x3a>
 800d168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d16a:	f000 f915 	bl	800d398 <__retarget_lock_acquire_recursive>
 800d16e:	4628      	mov	r0, r5
 800d170:	4621      	mov	r1, r4
 800d172:	f7ff ff5d 	bl	800d030 <__sflush_r>
 800d176:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d178:	4605      	mov	r5, r0
 800d17a:	07da      	lsls	r2, r3, #31
 800d17c:	d4e0      	bmi.n	800d140 <_fflush_r+0xc>
 800d17e:	89a3      	ldrh	r3, [r4, #12]
 800d180:	059b      	lsls	r3, r3, #22
 800d182:	d4dd      	bmi.n	800d140 <_fflush_r+0xc>
 800d184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d186:	f000 f908 	bl	800d39a <__retarget_lock_release_recursive>
 800d18a:	e7d9      	b.n	800d140 <_fflush_r+0xc>
 800d18c:	4b05      	ldr	r3, [pc, #20]	; (800d1a4 <_fflush_r+0x70>)
 800d18e:	429c      	cmp	r4, r3
 800d190:	d101      	bne.n	800d196 <_fflush_r+0x62>
 800d192:	68ac      	ldr	r4, [r5, #8]
 800d194:	e7df      	b.n	800d156 <_fflush_r+0x22>
 800d196:	4b04      	ldr	r3, [pc, #16]	; (800d1a8 <_fflush_r+0x74>)
 800d198:	429c      	cmp	r4, r3
 800d19a:	bf08      	it	eq
 800d19c:	68ec      	ldreq	r4, [r5, #12]
 800d19e:	e7da      	b.n	800d156 <_fflush_r+0x22>
 800d1a0:	0800dac4 	.word	0x0800dac4
 800d1a4:	0800dae4 	.word	0x0800dae4
 800d1a8:	0800daa4 	.word	0x0800daa4

0800d1ac <std>:
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	b510      	push	{r4, lr}
 800d1b0:	4604      	mov	r4, r0
 800d1b2:	e9c0 3300 	strd	r3, r3, [r0]
 800d1b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d1ba:	6083      	str	r3, [r0, #8]
 800d1bc:	8181      	strh	r1, [r0, #12]
 800d1be:	6643      	str	r3, [r0, #100]	; 0x64
 800d1c0:	81c2      	strh	r2, [r0, #14]
 800d1c2:	6183      	str	r3, [r0, #24]
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	2208      	movs	r2, #8
 800d1c8:	305c      	adds	r0, #92	; 0x5c
 800d1ca:	f7fd fb63 	bl	800a894 <memset>
 800d1ce:	4b05      	ldr	r3, [pc, #20]	; (800d1e4 <std+0x38>)
 800d1d0:	6224      	str	r4, [r4, #32]
 800d1d2:	6263      	str	r3, [r4, #36]	; 0x24
 800d1d4:	4b04      	ldr	r3, [pc, #16]	; (800d1e8 <std+0x3c>)
 800d1d6:	62a3      	str	r3, [r4, #40]	; 0x28
 800d1d8:	4b04      	ldr	r3, [pc, #16]	; (800d1ec <std+0x40>)
 800d1da:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d1dc:	4b04      	ldr	r3, [pc, #16]	; (800d1f0 <std+0x44>)
 800d1de:	6323      	str	r3, [r4, #48]	; 0x30
 800d1e0:	bd10      	pop	{r4, pc}
 800d1e2:	bf00      	nop
 800d1e4:	0800d501 	.word	0x0800d501
 800d1e8:	0800d523 	.word	0x0800d523
 800d1ec:	0800d55b 	.word	0x0800d55b
 800d1f0:	0800d57f 	.word	0x0800d57f

0800d1f4 <_cleanup_r>:
 800d1f4:	4901      	ldr	r1, [pc, #4]	; (800d1fc <_cleanup_r+0x8>)
 800d1f6:	f000 b8af 	b.w	800d358 <_fwalk_reent>
 800d1fa:	bf00      	nop
 800d1fc:	0800d135 	.word	0x0800d135

0800d200 <__sfmoreglue>:
 800d200:	2268      	movs	r2, #104	; 0x68
 800d202:	b570      	push	{r4, r5, r6, lr}
 800d204:	1e4d      	subs	r5, r1, #1
 800d206:	4355      	muls	r5, r2
 800d208:	460e      	mov	r6, r1
 800d20a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d20e:	f7ff fa6b 	bl	800c6e8 <_malloc_r>
 800d212:	4604      	mov	r4, r0
 800d214:	b140      	cbz	r0, 800d228 <__sfmoreglue+0x28>
 800d216:	2100      	movs	r1, #0
 800d218:	e9c0 1600 	strd	r1, r6, [r0]
 800d21c:	300c      	adds	r0, #12
 800d21e:	60a0      	str	r0, [r4, #8]
 800d220:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d224:	f7fd fb36 	bl	800a894 <memset>
 800d228:	4620      	mov	r0, r4
 800d22a:	bd70      	pop	{r4, r5, r6, pc}

0800d22c <__sfp_lock_acquire>:
 800d22c:	4801      	ldr	r0, [pc, #4]	; (800d234 <__sfp_lock_acquire+0x8>)
 800d22e:	f000 b8b3 	b.w	800d398 <__retarget_lock_acquire_recursive>
 800d232:	bf00      	nop
 800d234:	20000979 	.word	0x20000979

0800d238 <__sfp_lock_release>:
 800d238:	4801      	ldr	r0, [pc, #4]	; (800d240 <__sfp_lock_release+0x8>)
 800d23a:	f000 b8ae 	b.w	800d39a <__retarget_lock_release_recursive>
 800d23e:	bf00      	nop
 800d240:	20000979 	.word	0x20000979

0800d244 <__sinit_lock_acquire>:
 800d244:	4801      	ldr	r0, [pc, #4]	; (800d24c <__sinit_lock_acquire+0x8>)
 800d246:	f000 b8a7 	b.w	800d398 <__retarget_lock_acquire_recursive>
 800d24a:	bf00      	nop
 800d24c:	2000097a 	.word	0x2000097a

0800d250 <__sinit_lock_release>:
 800d250:	4801      	ldr	r0, [pc, #4]	; (800d258 <__sinit_lock_release+0x8>)
 800d252:	f000 b8a2 	b.w	800d39a <__retarget_lock_release_recursive>
 800d256:	bf00      	nop
 800d258:	2000097a 	.word	0x2000097a

0800d25c <__sinit>:
 800d25c:	b510      	push	{r4, lr}
 800d25e:	4604      	mov	r4, r0
 800d260:	f7ff fff0 	bl	800d244 <__sinit_lock_acquire>
 800d264:	69a3      	ldr	r3, [r4, #24]
 800d266:	b11b      	cbz	r3, 800d270 <__sinit+0x14>
 800d268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d26c:	f7ff bff0 	b.w	800d250 <__sinit_lock_release>
 800d270:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d274:	6523      	str	r3, [r4, #80]	; 0x50
 800d276:	4b13      	ldr	r3, [pc, #76]	; (800d2c4 <__sinit+0x68>)
 800d278:	4a13      	ldr	r2, [pc, #76]	; (800d2c8 <__sinit+0x6c>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d27e:	42a3      	cmp	r3, r4
 800d280:	bf08      	it	eq
 800d282:	2301      	moveq	r3, #1
 800d284:	4620      	mov	r0, r4
 800d286:	bf08      	it	eq
 800d288:	61a3      	streq	r3, [r4, #24]
 800d28a:	f000 f81f 	bl	800d2cc <__sfp>
 800d28e:	6060      	str	r0, [r4, #4]
 800d290:	4620      	mov	r0, r4
 800d292:	f000 f81b 	bl	800d2cc <__sfp>
 800d296:	60a0      	str	r0, [r4, #8]
 800d298:	4620      	mov	r0, r4
 800d29a:	f000 f817 	bl	800d2cc <__sfp>
 800d29e:	2200      	movs	r2, #0
 800d2a0:	2104      	movs	r1, #4
 800d2a2:	60e0      	str	r0, [r4, #12]
 800d2a4:	6860      	ldr	r0, [r4, #4]
 800d2a6:	f7ff ff81 	bl	800d1ac <std>
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	2109      	movs	r1, #9
 800d2ae:	68a0      	ldr	r0, [r4, #8]
 800d2b0:	f7ff ff7c 	bl	800d1ac <std>
 800d2b4:	2202      	movs	r2, #2
 800d2b6:	2112      	movs	r1, #18
 800d2b8:	68e0      	ldr	r0, [r4, #12]
 800d2ba:	f7ff ff77 	bl	800d1ac <std>
 800d2be:	2301      	movs	r3, #1
 800d2c0:	61a3      	str	r3, [r4, #24]
 800d2c2:	e7d1      	b.n	800d268 <__sinit+0xc>
 800d2c4:	0800d72c 	.word	0x0800d72c
 800d2c8:	0800d1f5 	.word	0x0800d1f5

0800d2cc <__sfp>:
 800d2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ce:	4607      	mov	r7, r0
 800d2d0:	f7ff ffac 	bl	800d22c <__sfp_lock_acquire>
 800d2d4:	4b1e      	ldr	r3, [pc, #120]	; (800d350 <__sfp+0x84>)
 800d2d6:	681e      	ldr	r6, [r3, #0]
 800d2d8:	69b3      	ldr	r3, [r6, #24]
 800d2da:	b913      	cbnz	r3, 800d2e2 <__sfp+0x16>
 800d2dc:	4630      	mov	r0, r6
 800d2de:	f7ff ffbd 	bl	800d25c <__sinit>
 800d2e2:	3648      	adds	r6, #72	; 0x48
 800d2e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d2e8:	3b01      	subs	r3, #1
 800d2ea:	d503      	bpl.n	800d2f4 <__sfp+0x28>
 800d2ec:	6833      	ldr	r3, [r6, #0]
 800d2ee:	b30b      	cbz	r3, 800d334 <__sfp+0x68>
 800d2f0:	6836      	ldr	r6, [r6, #0]
 800d2f2:	e7f7      	b.n	800d2e4 <__sfp+0x18>
 800d2f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d2f8:	b9d5      	cbnz	r5, 800d330 <__sfp+0x64>
 800d2fa:	4b16      	ldr	r3, [pc, #88]	; (800d354 <__sfp+0x88>)
 800d2fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d300:	60e3      	str	r3, [r4, #12]
 800d302:	6665      	str	r5, [r4, #100]	; 0x64
 800d304:	f000 f847 	bl	800d396 <__retarget_lock_init_recursive>
 800d308:	f7ff ff96 	bl	800d238 <__sfp_lock_release>
 800d30c:	2208      	movs	r2, #8
 800d30e:	4629      	mov	r1, r5
 800d310:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d314:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d318:	6025      	str	r5, [r4, #0]
 800d31a:	61a5      	str	r5, [r4, #24]
 800d31c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d320:	f7fd fab8 	bl	800a894 <memset>
 800d324:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d328:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d32c:	4620      	mov	r0, r4
 800d32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d330:	3468      	adds	r4, #104	; 0x68
 800d332:	e7d9      	b.n	800d2e8 <__sfp+0x1c>
 800d334:	2104      	movs	r1, #4
 800d336:	4638      	mov	r0, r7
 800d338:	f7ff ff62 	bl	800d200 <__sfmoreglue>
 800d33c:	4604      	mov	r4, r0
 800d33e:	6030      	str	r0, [r6, #0]
 800d340:	2800      	cmp	r0, #0
 800d342:	d1d5      	bne.n	800d2f0 <__sfp+0x24>
 800d344:	f7ff ff78 	bl	800d238 <__sfp_lock_release>
 800d348:	230c      	movs	r3, #12
 800d34a:	603b      	str	r3, [r7, #0]
 800d34c:	e7ee      	b.n	800d32c <__sfp+0x60>
 800d34e:	bf00      	nop
 800d350:	0800d72c 	.word	0x0800d72c
 800d354:	ffff0001 	.word	0xffff0001

0800d358 <_fwalk_reent>:
 800d358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d35c:	4606      	mov	r6, r0
 800d35e:	4688      	mov	r8, r1
 800d360:	2700      	movs	r7, #0
 800d362:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d366:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d36a:	f1b9 0901 	subs.w	r9, r9, #1
 800d36e:	d505      	bpl.n	800d37c <_fwalk_reent+0x24>
 800d370:	6824      	ldr	r4, [r4, #0]
 800d372:	2c00      	cmp	r4, #0
 800d374:	d1f7      	bne.n	800d366 <_fwalk_reent+0xe>
 800d376:	4638      	mov	r0, r7
 800d378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d37c:	89ab      	ldrh	r3, [r5, #12]
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d907      	bls.n	800d392 <_fwalk_reent+0x3a>
 800d382:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d386:	3301      	adds	r3, #1
 800d388:	d003      	beq.n	800d392 <_fwalk_reent+0x3a>
 800d38a:	4629      	mov	r1, r5
 800d38c:	4630      	mov	r0, r6
 800d38e:	47c0      	blx	r8
 800d390:	4307      	orrs	r7, r0
 800d392:	3568      	adds	r5, #104	; 0x68
 800d394:	e7e9      	b.n	800d36a <_fwalk_reent+0x12>

0800d396 <__retarget_lock_init_recursive>:
 800d396:	4770      	bx	lr

0800d398 <__retarget_lock_acquire_recursive>:
 800d398:	4770      	bx	lr

0800d39a <__retarget_lock_release_recursive>:
 800d39a:	4770      	bx	lr

0800d39c <__swhatbuf_r>:
 800d39c:	b570      	push	{r4, r5, r6, lr}
 800d39e:	460e      	mov	r6, r1
 800d3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3a4:	4614      	mov	r4, r2
 800d3a6:	2900      	cmp	r1, #0
 800d3a8:	461d      	mov	r5, r3
 800d3aa:	b096      	sub	sp, #88	; 0x58
 800d3ac:	da08      	bge.n	800d3c0 <__swhatbuf_r+0x24>
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d3b4:	602a      	str	r2, [r5, #0]
 800d3b6:	061a      	lsls	r2, r3, #24
 800d3b8:	d410      	bmi.n	800d3dc <__swhatbuf_r+0x40>
 800d3ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3be:	e00e      	b.n	800d3de <__swhatbuf_r+0x42>
 800d3c0:	466a      	mov	r2, sp
 800d3c2:	f000 f903 	bl	800d5cc <_fstat_r>
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	dbf1      	blt.n	800d3ae <__swhatbuf_r+0x12>
 800d3ca:	9a01      	ldr	r2, [sp, #4]
 800d3cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d3d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d3d4:	425a      	negs	r2, r3
 800d3d6:	415a      	adcs	r2, r3
 800d3d8:	602a      	str	r2, [r5, #0]
 800d3da:	e7ee      	b.n	800d3ba <__swhatbuf_r+0x1e>
 800d3dc:	2340      	movs	r3, #64	; 0x40
 800d3de:	2000      	movs	r0, #0
 800d3e0:	6023      	str	r3, [r4, #0]
 800d3e2:	b016      	add	sp, #88	; 0x58
 800d3e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d3e8 <__smakebuf_r>:
 800d3e8:	898b      	ldrh	r3, [r1, #12]
 800d3ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d3ec:	079d      	lsls	r5, r3, #30
 800d3ee:	4606      	mov	r6, r0
 800d3f0:	460c      	mov	r4, r1
 800d3f2:	d507      	bpl.n	800d404 <__smakebuf_r+0x1c>
 800d3f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d3f8:	6023      	str	r3, [r4, #0]
 800d3fa:	6123      	str	r3, [r4, #16]
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	6163      	str	r3, [r4, #20]
 800d400:	b002      	add	sp, #8
 800d402:	bd70      	pop	{r4, r5, r6, pc}
 800d404:	466a      	mov	r2, sp
 800d406:	ab01      	add	r3, sp, #4
 800d408:	f7ff ffc8 	bl	800d39c <__swhatbuf_r>
 800d40c:	9900      	ldr	r1, [sp, #0]
 800d40e:	4605      	mov	r5, r0
 800d410:	4630      	mov	r0, r6
 800d412:	f7ff f969 	bl	800c6e8 <_malloc_r>
 800d416:	b948      	cbnz	r0, 800d42c <__smakebuf_r+0x44>
 800d418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d41c:	059a      	lsls	r2, r3, #22
 800d41e:	d4ef      	bmi.n	800d400 <__smakebuf_r+0x18>
 800d420:	f023 0303 	bic.w	r3, r3, #3
 800d424:	f043 0302 	orr.w	r3, r3, #2
 800d428:	81a3      	strh	r3, [r4, #12]
 800d42a:	e7e3      	b.n	800d3f4 <__smakebuf_r+0xc>
 800d42c:	4b0d      	ldr	r3, [pc, #52]	; (800d464 <__smakebuf_r+0x7c>)
 800d42e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d430:	89a3      	ldrh	r3, [r4, #12]
 800d432:	6020      	str	r0, [r4, #0]
 800d434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d438:	81a3      	strh	r3, [r4, #12]
 800d43a:	9b00      	ldr	r3, [sp, #0]
 800d43c:	6120      	str	r0, [r4, #16]
 800d43e:	6163      	str	r3, [r4, #20]
 800d440:	9b01      	ldr	r3, [sp, #4]
 800d442:	b15b      	cbz	r3, 800d45c <__smakebuf_r+0x74>
 800d444:	4630      	mov	r0, r6
 800d446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d44a:	f000 f8d1 	bl	800d5f0 <_isatty_r>
 800d44e:	b128      	cbz	r0, 800d45c <__smakebuf_r+0x74>
 800d450:	89a3      	ldrh	r3, [r4, #12]
 800d452:	f023 0303 	bic.w	r3, r3, #3
 800d456:	f043 0301 	orr.w	r3, r3, #1
 800d45a:	81a3      	strh	r3, [r4, #12]
 800d45c:	89a0      	ldrh	r0, [r4, #12]
 800d45e:	4305      	orrs	r5, r0
 800d460:	81a5      	strh	r5, [r4, #12]
 800d462:	e7cd      	b.n	800d400 <__smakebuf_r+0x18>
 800d464:	0800d1f5 	.word	0x0800d1f5

0800d468 <_malloc_usable_size_r>:
 800d468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d46c:	1f18      	subs	r0, r3, #4
 800d46e:	2b00      	cmp	r3, #0
 800d470:	bfbc      	itt	lt
 800d472:	580b      	ldrlt	r3, [r1, r0]
 800d474:	18c0      	addlt	r0, r0, r3
 800d476:	4770      	bx	lr

0800d478 <_raise_r>:
 800d478:	291f      	cmp	r1, #31
 800d47a:	b538      	push	{r3, r4, r5, lr}
 800d47c:	4604      	mov	r4, r0
 800d47e:	460d      	mov	r5, r1
 800d480:	d904      	bls.n	800d48c <_raise_r+0x14>
 800d482:	2316      	movs	r3, #22
 800d484:	6003      	str	r3, [r0, #0]
 800d486:	f04f 30ff 	mov.w	r0, #4294967295
 800d48a:	bd38      	pop	{r3, r4, r5, pc}
 800d48c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d48e:	b112      	cbz	r2, 800d496 <_raise_r+0x1e>
 800d490:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d494:	b94b      	cbnz	r3, 800d4aa <_raise_r+0x32>
 800d496:	4620      	mov	r0, r4
 800d498:	f000 f830 	bl	800d4fc <_getpid_r>
 800d49c:	462a      	mov	r2, r5
 800d49e:	4601      	mov	r1, r0
 800d4a0:	4620      	mov	r0, r4
 800d4a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4a6:	f000 b817 	b.w	800d4d8 <_kill_r>
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d00a      	beq.n	800d4c4 <_raise_r+0x4c>
 800d4ae:	1c59      	adds	r1, r3, #1
 800d4b0:	d103      	bne.n	800d4ba <_raise_r+0x42>
 800d4b2:	2316      	movs	r3, #22
 800d4b4:	6003      	str	r3, [r0, #0]
 800d4b6:	2001      	movs	r0, #1
 800d4b8:	e7e7      	b.n	800d48a <_raise_r+0x12>
 800d4ba:	2400      	movs	r4, #0
 800d4bc:	4628      	mov	r0, r5
 800d4be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d4c2:	4798      	blx	r3
 800d4c4:	2000      	movs	r0, #0
 800d4c6:	e7e0      	b.n	800d48a <_raise_r+0x12>

0800d4c8 <raise>:
 800d4c8:	4b02      	ldr	r3, [pc, #8]	; (800d4d4 <raise+0xc>)
 800d4ca:	4601      	mov	r1, r0
 800d4cc:	6818      	ldr	r0, [r3, #0]
 800d4ce:	f7ff bfd3 	b.w	800d478 <_raise_r>
 800d4d2:	bf00      	nop
 800d4d4:	2000006c 	.word	0x2000006c

0800d4d8 <_kill_r>:
 800d4d8:	b538      	push	{r3, r4, r5, lr}
 800d4da:	2300      	movs	r3, #0
 800d4dc:	4d06      	ldr	r5, [pc, #24]	; (800d4f8 <_kill_r+0x20>)
 800d4de:	4604      	mov	r4, r0
 800d4e0:	4608      	mov	r0, r1
 800d4e2:	4611      	mov	r1, r2
 800d4e4:	602b      	str	r3, [r5, #0]
 800d4e6:	f7f6 f8fe 	bl	80036e6 <_kill>
 800d4ea:	1c43      	adds	r3, r0, #1
 800d4ec:	d102      	bne.n	800d4f4 <_kill_r+0x1c>
 800d4ee:	682b      	ldr	r3, [r5, #0]
 800d4f0:	b103      	cbz	r3, 800d4f4 <_kill_r+0x1c>
 800d4f2:	6023      	str	r3, [r4, #0]
 800d4f4:	bd38      	pop	{r3, r4, r5, pc}
 800d4f6:	bf00      	nop
 800d4f8:	20000974 	.word	0x20000974

0800d4fc <_getpid_r>:
 800d4fc:	f7f6 b8ec 	b.w	80036d8 <_getpid>

0800d500 <__sread>:
 800d500:	b510      	push	{r4, lr}
 800d502:	460c      	mov	r4, r1
 800d504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d508:	f000 f894 	bl	800d634 <_read_r>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	bfab      	itete	ge
 800d510:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d512:	89a3      	ldrhlt	r3, [r4, #12]
 800d514:	181b      	addge	r3, r3, r0
 800d516:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d51a:	bfac      	ite	ge
 800d51c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d51e:	81a3      	strhlt	r3, [r4, #12]
 800d520:	bd10      	pop	{r4, pc}

0800d522 <__swrite>:
 800d522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d526:	461f      	mov	r7, r3
 800d528:	898b      	ldrh	r3, [r1, #12]
 800d52a:	4605      	mov	r5, r0
 800d52c:	05db      	lsls	r3, r3, #23
 800d52e:	460c      	mov	r4, r1
 800d530:	4616      	mov	r6, r2
 800d532:	d505      	bpl.n	800d540 <__swrite+0x1e>
 800d534:	2302      	movs	r3, #2
 800d536:	2200      	movs	r2, #0
 800d538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d53c:	f000 f868 	bl	800d610 <_lseek_r>
 800d540:	89a3      	ldrh	r3, [r4, #12]
 800d542:	4632      	mov	r2, r6
 800d544:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d548:	81a3      	strh	r3, [r4, #12]
 800d54a:	4628      	mov	r0, r5
 800d54c:	463b      	mov	r3, r7
 800d54e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d556:	f000 b817 	b.w	800d588 <_write_r>

0800d55a <__sseek>:
 800d55a:	b510      	push	{r4, lr}
 800d55c:	460c      	mov	r4, r1
 800d55e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d562:	f000 f855 	bl	800d610 <_lseek_r>
 800d566:	1c43      	adds	r3, r0, #1
 800d568:	89a3      	ldrh	r3, [r4, #12]
 800d56a:	bf15      	itete	ne
 800d56c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d56e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d572:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d576:	81a3      	strheq	r3, [r4, #12]
 800d578:	bf18      	it	ne
 800d57a:	81a3      	strhne	r3, [r4, #12]
 800d57c:	bd10      	pop	{r4, pc}

0800d57e <__sclose>:
 800d57e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d582:	f000 b813 	b.w	800d5ac <_close_r>
	...

0800d588 <_write_r>:
 800d588:	b538      	push	{r3, r4, r5, lr}
 800d58a:	4604      	mov	r4, r0
 800d58c:	4608      	mov	r0, r1
 800d58e:	4611      	mov	r1, r2
 800d590:	2200      	movs	r2, #0
 800d592:	4d05      	ldr	r5, [pc, #20]	; (800d5a8 <_write_r+0x20>)
 800d594:	602a      	str	r2, [r5, #0]
 800d596:	461a      	mov	r2, r3
 800d598:	f7f6 f8dc 	bl	8003754 <_write>
 800d59c:	1c43      	adds	r3, r0, #1
 800d59e:	d102      	bne.n	800d5a6 <_write_r+0x1e>
 800d5a0:	682b      	ldr	r3, [r5, #0]
 800d5a2:	b103      	cbz	r3, 800d5a6 <_write_r+0x1e>
 800d5a4:	6023      	str	r3, [r4, #0]
 800d5a6:	bd38      	pop	{r3, r4, r5, pc}
 800d5a8:	20000974 	.word	0x20000974

0800d5ac <_close_r>:
 800d5ac:	b538      	push	{r3, r4, r5, lr}
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	4d05      	ldr	r5, [pc, #20]	; (800d5c8 <_close_r+0x1c>)
 800d5b2:	4604      	mov	r4, r0
 800d5b4:	4608      	mov	r0, r1
 800d5b6:	602b      	str	r3, [r5, #0]
 800d5b8:	f7f6 f8e8 	bl	800378c <_close>
 800d5bc:	1c43      	adds	r3, r0, #1
 800d5be:	d102      	bne.n	800d5c6 <_close_r+0x1a>
 800d5c0:	682b      	ldr	r3, [r5, #0]
 800d5c2:	b103      	cbz	r3, 800d5c6 <_close_r+0x1a>
 800d5c4:	6023      	str	r3, [r4, #0]
 800d5c6:	bd38      	pop	{r3, r4, r5, pc}
 800d5c8:	20000974 	.word	0x20000974

0800d5cc <_fstat_r>:
 800d5cc:	b538      	push	{r3, r4, r5, lr}
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	4d06      	ldr	r5, [pc, #24]	; (800d5ec <_fstat_r+0x20>)
 800d5d2:	4604      	mov	r4, r0
 800d5d4:	4608      	mov	r0, r1
 800d5d6:	4611      	mov	r1, r2
 800d5d8:	602b      	str	r3, [r5, #0]
 800d5da:	f7f6 f8e2 	bl	80037a2 <_fstat>
 800d5de:	1c43      	adds	r3, r0, #1
 800d5e0:	d102      	bne.n	800d5e8 <_fstat_r+0x1c>
 800d5e2:	682b      	ldr	r3, [r5, #0]
 800d5e4:	b103      	cbz	r3, 800d5e8 <_fstat_r+0x1c>
 800d5e6:	6023      	str	r3, [r4, #0]
 800d5e8:	bd38      	pop	{r3, r4, r5, pc}
 800d5ea:	bf00      	nop
 800d5ec:	20000974 	.word	0x20000974

0800d5f0 <_isatty_r>:
 800d5f0:	b538      	push	{r3, r4, r5, lr}
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	4d05      	ldr	r5, [pc, #20]	; (800d60c <_isatty_r+0x1c>)
 800d5f6:	4604      	mov	r4, r0
 800d5f8:	4608      	mov	r0, r1
 800d5fa:	602b      	str	r3, [r5, #0]
 800d5fc:	f7f6 f8e0 	bl	80037c0 <_isatty>
 800d600:	1c43      	adds	r3, r0, #1
 800d602:	d102      	bne.n	800d60a <_isatty_r+0x1a>
 800d604:	682b      	ldr	r3, [r5, #0]
 800d606:	b103      	cbz	r3, 800d60a <_isatty_r+0x1a>
 800d608:	6023      	str	r3, [r4, #0]
 800d60a:	bd38      	pop	{r3, r4, r5, pc}
 800d60c:	20000974 	.word	0x20000974

0800d610 <_lseek_r>:
 800d610:	b538      	push	{r3, r4, r5, lr}
 800d612:	4604      	mov	r4, r0
 800d614:	4608      	mov	r0, r1
 800d616:	4611      	mov	r1, r2
 800d618:	2200      	movs	r2, #0
 800d61a:	4d05      	ldr	r5, [pc, #20]	; (800d630 <_lseek_r+0x20>)
 800d61c:	602a      	str	r2, [r5, #0]
 800d61e:	461a      	mov	r2, r3
 800d620:	f7f6 f8d8 	bl	80037d4 <_lseek>
 800d624:	1c43      	adds	r3, r0, #1
 800d626:	d102      	bne.n	800d62e <_lseek_r+0x1e>
 800d628:	682b      	ldr	r3, [r5, #0]
 800d62a:	b103      	cbz	r3, 800d62e <_lseek_r+0x1e>
 800d62c:	6023      	str	r3, [r4, #0]
 800d62e:	bd38      	pop	{r3, r4, r5, pc}
 800d630:	20000974 	.word	0x20000974

0800d634 <_read_r>:
 800d634:	b538      	push	{r3, r4, r5, lr}
 800d636:	4604      	mov	r4, r0
 800d638:	4608      	mov	r0, r1
 800d63a:	4611      	mov	r1, r2
 800d63c:	2200      	movs	r2, #0
 800d63e:	4d05      	ldr	r5, [pc, #20]	; (800d654 <_read_r+0x20>)
 800d640:	602a      	str	r2, [r5, #0]
 800d642:	461a      	mov	r2, r3
 800d644:	f7f6 f869 	bl	800371a <_read>
 800d648:	1c43      	adds	r3, r0, #1
 800d64a:	d102      	bne.n	800d652 <_read_r+0x1e>
 800d64c:	682b      	ldr	r3, [r5, #0]
 800d64e:	b103      	cbz	r3, 800d652 <_read_r+0x1e>
 800d650:	6023      	str	r3, [r4, #0]
 800d652:	bd38      	pop	{r3, r4, r5, pc}
 800d654:	20000974 	.word	0x20000974

0800d658 <_init>:
 800d658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65a:	bf00      	nop
 800d65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d65e:	bc08      	pop	{r3}
 800d660:	469e      	mov	lr, r3
 800d662:	4770      	bx	lr

0800d664 <_fini>:
 800d664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d666:	bf00      	nop
 800d668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d66a:	bc08      	pop	{r3}
 800d66c:	469e      	mov	lr, r3
 800d66e:	4770      	bx	lr
