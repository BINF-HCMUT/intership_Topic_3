
week1_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2f8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  0800a408  0800a408  0001a408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a80c  0800a80c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a80c  0800a80c  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a80c  0800a80c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a80c  0800a80c  0001a80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a810  0800a810  0001a810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  200001e8  0800a9fc  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  0800a9fc  00020474  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ed8  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a8a  00000000  00000000  000330e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  00035b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  00036dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003604  00000000  00000000  00037ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015fe2  00000000  00000000  0003b4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094740  00000000  00000000  000514d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5c16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c94  00000000  00000000  000e5c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a3f0 	.word	0x0800a3f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800a3f0 	.word	0x0800a3f0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <getKeyProcess>:
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress3s[N0_OF_BUTTONS];
static int buttonState[N0_OF_BUTTONS] = {BUTTON_IS_RELEASED, BUTTON_IS_RELEASED, BUTTON_IS_RELEASED};
static int button_flag[N0_OF_BUTTONS];
void getKeyProcess(int index){// turn on button_flag
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	db07      	blt.n	8000aa6 <getKeyProcess+0x1e>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	dc04      	bgt.n	8000aa6 <getKeyProcess+0x1e>
		button_flag[index] = 1;
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <getKeyProcess+0x28>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	20000224 	.word	0x20000224

08000ab4 <get3sFlag>:
// this function turn on flagForButtonPress3s when button is pressed more than 3s
void get3sFlag(int index){
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	db07      	blt.n	8000ad2 <get3sFlag+0x1e>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	dc04      	bgt.n	8000ad2 <get3sFlag+0x1e>
			flagForButtonPress3s[index] = 1;
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <get3sFlag+0x28>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	2201      	movs	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
		}
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	20000214 	.word	0x20000214

08000ae0 <get1sFlag>:
void clear3sFlag(int index){
	if(index >= 0 && index < N0_OF_BUTTONS){
			flagForButtonPress3s[index] = 0;
		}
}
void get1sFlag(int index){
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	db07      	blt.n	8000afe <get1sFlag+0x1e>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	dc04      	bgt.n	8000afe <get1sFlag+0x1e>
				flag1s[index] = 1;
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <get1sFlag+0x28>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
			}
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	20000218 	.word	0x20000218

08000b0c <fsm_input_processing>:
void fsm_input_processing(GPIO_PinState buttonBuffer[], int index){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
	switch(buttonState[index]){
 8000b16:	4a55      	ldr	r2, [pc, #340]	; (8000c6c <fsm_input_processing+0x160>)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d04f      	beq.n	8000bc2 <fsm_input_processing+0xb6>
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	f300 8096 	bgt.w	8000c54 <fsm_input_processing+0x148>
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d002      	beq.n	8000b32 <fsm_input_processing+0x26>
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d039      	beq.n	8000ba4 <fsm_input_processing+0x98>
			flag1s[index] = 0;
			button_flag[index] = 0;
		}
		break;
	default:
		break;
 8000b30:	e090      	b.n	8000c54 <fsm_input_processing+0x148>
		if(counterForButtonPress3s[index] < DURATION_FOR_AUTO_INCREASING){
 8000b32:	4a4f      	ldr	r2, [pc, #316]	; (8000c70 <fsm_input_processing+0x164>)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b3a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000b3e:	d220      	bcs.n	8000b82 <fsm_input_processing+0x76>
			counterForButtonPress3s[index]++;
 8000b40:	4a4b      	ldr	r2, [pc, #300]	; (8000c70 <fsm_input_processing+0x164>)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	b299      	uxth	r1, r3
 8000b4c:	4a48      	ldr	r2, [pc, #288]	; (8000c70 <fsm_input_processing+0x164>)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(counterForButtonPress3s[index] == DURATION_FOR_AUTO_INCREASING){
 8000b54:	4a46      	ldr	r2, [pc, #280]	; (8000c70 <fsm_input_processing+0x164>)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b5c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000b60:	d10f      	bne.n	8000b82 <fsm_input_processing+0x76>
				buttonState[index] = BUTTON_PRESSED_MORE_THAN_3s;
 8000b62:	4a42      	ldr	r2, [pc, #264]	; (8000c6c <fsm_input_processing+0x160>)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	2102      	movs	r1, #2
 8000b68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				counterForButtonPress3s[index] = 0;
 8000b6c:	4a40      	ldr	r2, [pc, #256]	; (8000c70 <fsm_input_processing+0x164>)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	2100      	movs	r1, #0
 8000b72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				getKeyProcess(index);
 8000b76:	6838      	ldr	r0, [r7, #0]
 8000b78:	f7ff ff86 	bl	8000a88 <getKeyProcess>
				get3sFlag(index);
 8000b7c:	6838      	ldr	r0, [r7, #0]
 8000b7e:	f7ff ff99 	bl	8000ab4 <get3sFlag>
		if(buttonBuffer[index] == BUTTON_RELEASED){
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	4413      	add	r3, r2
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d164      	bne.n	8000c58 <fsm_input_processing+0x14c>
			buttonState[index] = BUTTON_IS_RELEASED;
 8000b8e:	4a37      	ldr	r2, [pc, #220]	; (8000c6c <fsm_input_processing+0x160>)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	2101      	movs	r1, #1
 8000b94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress3s[index] = 0;
 8000b98:	4a35      	ldr	r2, [pc, #212]	; (8000c70 <fsm_input_processing+0x164>)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		break;
 8000ba2:	e059      	b.n	8000c58 <fsm_input_processing+0x14c>
		if(buttonBuffer[index] == BUTTON_PRESSED){
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d155      	bne.n	8000c5c <fsm_input_processing+0x150>
			buttonState[index] = BUTTON_IS_PRESSED;
 8000bb0:	4a2e      	ldr	r2, [pc, #184]	; (8000c6c <fsm_input_processing+0x160>)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			getKeyProcess(index);
 8000bba:	6838      	ldr	r0, [r7, #0]
 8000bbc:	f7ff ff64 	bl	8000a88 <getKeyProcess>
		break;
 8000bc0:	e04c      	b.n	8000c5c <fsm_input_processing+0x150>
		if(counterForButtonPress3s[index] < DURATION_FOR_MORE_THAN_3s ){
 8000bc2:	4a2b      	ldr	r2, [pc, #172]	; (8000c70 <fsm_input_processing+0x164>)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bca:	2b63      	cmp	r3, #99	; 0x63
 8000bcc:	d822      	bhi.n	8000c14 <fsm_input_processing+0x108>
					counterForButtonPress3s[index]++;
 8000bce:	4a28      	ldr	r2, [pc, #160]	; (8000c70 <fsm_input_processing+0x164>)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	b299      	uxth	r1, r3
 8000bda:	4a25      	ldr	r2, [pc, #148]	; (8000c70 <fsm_input_processing+0x164>)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(counterForButtonPress3s[index] == DURATION_FOR_MORE_THAN_3s){
 8000be2:	4a23      	ldr	r2, [pc, #140]	; (8000c70 <fsm_input_processing+0x164>)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bea:	2b64      	cmp	r3, #100	; 0x64
 8000bec:	d112      	bne.n	8000c14 <fsm_input_processing+0x108>
						buttonState[index] = BUTTON_PRESSED_MORE_THAN_3s;
 8000bee:	4a1f      	ldr	r2, [pc, #124]	; (8000c6c <fsm_input_processing+0x160>)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						counterForButtonPress3s[index] = 0;
 8000bf8:	4a1d      	ldr	r2, [pc, #116]	; (8000c70 <fsm_input_processing+0x164>)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						get1sFlag(index);
 8000c02:	6838      	ldr	r0, [r7, #0]
 8000c04:	f7ff ff6c 	bl	8000ae0 <get1sFlag>
						getKeyProcess(index);
 8000c08:	6838      	ldr	r0, [r7, #0]
 8000c0a:	f7ff ff3d 	bl	8000a88 <getKeyProcess>
						get3sFlag(index);
 8000c0e:	6838      	ldr	r0, [r7, #0]
 8000c10:	f7ff ff50 	bl	8000ab4 <get3sFlag>
		if(buttonBuffer[index] == BUTTON_RELEASED){
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d11f      	bne.n	8000c60 <fsm_input_processing+0x154>
			buttonState[index] = BUTTON_IS_RELEASED;
 8000c20:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <fsm_input_processing+0x160>)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	2101      	movs	r1, #1
 8000c26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress3s[index] = 0;
 8000c2a:	4a11      	ldr	r2, [pc, #68]	; (8000c70 <fsm_input_processing+0x164>)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	2100      	movs	r1, #0
 8000c30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress3s[index] = 0;
 8000c34:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <fsm_input_processing+0x168>)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	4413      	add	r3, r2
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
			flag1s[index] = 0;
 8000c3e:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <fsm_input_processing+0x16c>)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
			button_flag[index] = 0;
 8000c48:	4a0c      	ldr	r2, [pc, #48]	; (8000c7c <fsm_input_processing+0x170>)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		break;
 8000c52:	e005      	b.n	8000c60 <fsm_input_processing+0x154>
		break;
 8000c54:	bf00      	nop
 8000c56:	e004      	b.n	8000c62 <fsm_input_processing+0x156>
		break;
 8000c58:	bf00      	nop
 8000c5a:	e002      	b.n	8000c62 <fsm_input_processing+0x156>
		break;
 8000c5c:	bf00      	nop
 8000c5e:	e000      	b.n	8000c62 <fsm_input_processing+0x156>
		break;
 8000c60:	bf00      	nop
	}
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	2000021c 	.word	0x2000021c
 8000c74:	20000214 	.word	0x20000214
 8000c78:	20000218 	.word	0x20000218
 8000c7c:	20000224 	.word	0x20000224

08000c80 <button_reading>:
void button_reading(void){
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i++){
 8000c86:	2300      	movs	r3, #0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e052      	b.n	8000d32 <button_reading+0xb2>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000c8c:	79fa      	ldrb	r2, [r7, #7]
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	492c      	ldr	r1, [pc, #176]	; (8000d44 <button_reading+0xc4>)
 8000c92:	5c89      	ldrb	r1, [r1, r2]
 8000c94:	4a2c      	ldr	r2, [pc, #176]	; (8000d48 <button_reading+0xc8>)
 8000c96:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000c98:	79fa      	ldrb	r2, [r7, #7]
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	492b      	ldr	r1, [pc, #172]	; (8000d4c <button_reading+0xcc>)
 8000c9e:	5c89      	ldrb	r1, [r1, r2]
 8000ca0:	4a28      	ldr	r2, [pc, #160]	; (8000d44 <button_reading+0xc4>)
 8000ca2:	54d1      	strb	r1, [r2, r3]
		// Chosing Which button is pressed.
		switch(i){
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d01a      	beq.n	8000ce0 <button_reading+0x60>
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	dc22      	bgt.n	8000cf4 <button_reading+0x74>
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d002      	beq.n	8000cb8 <button_reading+0x38>
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d00a      	beq.n	8000ccc <button_reading+0x4c>
			break;
		case 2://  read signal from button0
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
			break;
		default:
			break;
 8000cb6:	e01d      	b.n	8000cf4 <button_reading+0x74>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button0_GPIO_Port, Button0_Pin);
 8000cb8:	79fc      	ldrb	r4, [r7, #7]
 8000cba:	2101      	movs	r1, #1
 8000cbc:	4824      	ldr	r0, [pc, #144]	; (8000d50 <button_reading+0xd0>)
 8000cbe:	f002 f94b 	bl	8002f58 <HAL_GPIO_ReadPin>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <button_reading+0xcc>)
 8000cc8:	551a      	strb	r2, [r3, r4]
			break;
 8000cca:	e014      	b.n	8000cf6 <button_reading+0x76>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000ccc:	79fc      	ldrb	r4, [r7, #7]
 8000cce:	2102      	movs	r1, #2
 8000cd0:	481f      	ldr	r0, [pc, #124]	; (8000d50 <button_reading+0xd0>)
 8000cd2:	f002 f941 	bl	8002f58 <HAL_GPIO_ReadPin>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <button_reading+0xcc>)
 8000cdc:	551a      	strb	r2, [r3, r4]
			break;
 8000cde:	e00a      	b.n	8000cf6 <button_reading+0x76>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000ce0:	79fc      	ldrb	r4, [r7, #7]
 8000ce2:	2104      	movs	r1, #4
 8000ce4:	481a      	ldr	r0, [pc, #104]	; (8000d50 <button_reading+0xd0>)
 8000ce6:	f002 f937 	bl	8002f58 <HAL_GPIO_ReadPin>
 8000cea:	4603      	mov	r3, r0
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <button_reading+0xcc>)
 8000cf0:	551a      	strb	r2, [r3, r4]
			break;
 8000cf2:	e000      	b.n	8000cf6 <button_reading+0x76>
			break;
 8000cf4:	bf00      	nop
		}
		if((debounceButtonBuffer3[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer2[i] == debounceButtonBuffer1[i])){
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	4a13      	ldr	r2, [pc, #76]	; (8000d48 <button_reading+0xc8>)
 8000cfa:	5cd2      	ldrb	r2, [r2, r3]
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	4911      	ldr	r1, [pc, #68]	; (8000d44 <button_reading+0xc4>)
 8000d00:	5ccb      	ldrb	r3, [r1, r3]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d112      	bne.n	8000d2c <button_reading+0xac>
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <button_reading+0xc4>)
 8000d0a:	5cd2      	ldrb	r2, [r2, r3]
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	490f      	ldr	r1, [pc, #60]	; (8000d4c <button_reading+0xcc>)
 8000d10:	5ccb      	ldrb	r3, [r1, r3]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d10a      	bne.n	8000d2c <button_reading+0xac>
			buttonBuffer[i] = debounceButtonBuffer3[i];
 8000d16:	79fa      	ldrb	r2, [r7, #7]
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	490b      	ldr	r1, [pc, #44]	; (8000d48 <button_reading+0xc8>)
 8000d1c:	5c89      	ldrb	r1, [r1, r2]
 8000d1e:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <button_reading+0xd4>)
 8000d20:	54d1      	strb	r1, [r2, r3]
			fsm_input_processing(buttonBuffer,i);
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	4619      	mov	r1, r3
 8000d26:	480b      	ldr	r0, [pc, #44]	; (8000d54 <button_reading+0xd4>)
 8000d28:	f7ff fef0 	bl	8000b0c <fsm_input_processing>
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i++){
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	71fb      	strb	r3, [r7, #7]
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d9a9      	bls.n	8000c8c <button_reading+0xc>
		}

	}
}
 8000d38:	bf00      	nop
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd90      	pop	{r4, r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2000020c 	.word	0x2000020c
 8000d48:	20000210 	.word	0x20000210
 8000d4c:	20000208 	.word	0x20000208
 8000d50:	40010c00 	.word	0x40010c00
 8000d54:	20000204 	.word	0x20000204

08000d58 <HAL_UART_RxCpltCallback>:
	HAL_GPIO_WritePin(GPIOx, GPIO_PIN[pin], PinState);
}

uint8_t buffer[MAX_BUFFER_SIZE];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	if( huart -> Instance == USART2 ) {
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <HAL_UART_RxCpltCallback+0x5c>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d11f      	bne.n	8000daa <HAL_UART_RxCpltCallback+0x52>
		buffer[index_buffer++] = temp;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <HAL_UART_RxCpltCallback+0x60>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	1c5a      	adds	r2, r3, #1
 8000d70:	b2d1      	uxtb	r1, r2
 8000d72:	4a11      	ldr	r2, [pc, #68]	; (8000db8 <HAL_UART_RxCpltCallback+0x60>)
 8000d74:	7011      	strb	r1, [r2, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <HAL_UART_RxCpltCallback+0x64>)
 8000d7a:	7819      	ldrb	r1, [r3, #0]
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <HAL_UART_RxCpltCallback+0x68>)
 8000d7e:	5499      	strb	r1, [r3, r2]
		if(index_buffer == 30) index_buffer = 0;
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <HAL_UART_RxCpltCallback+0x60>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b1e      	cmp	r3, #30
 8000d86:	d102      	bne.n	8000d8e <HAL_UART_RxCpltCallback+0x36>
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <HAL_UART_RxCpltCallback+0x60>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_UART_RxCpltCallback+0x6c>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit (&huart2, &temp, 1, 50) ;
 8000d94:	2332      	movs	r3, #50	; 0x32
 8000d96:	2201      	movs	r2, #1
 8000d98:	4908      	ldr	r1, [pc, #32]	; (8000dbc <HAL_UART_RxCpltCallback+0x64>)
 8000d9a:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <HAL_UART_RxCpltCallback+0x70>)
 8000d9c:	f005 ffbf 	bl	8006d1e <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, & temp, 1);
 8000da0:	2201      	movs	r2, #1
 8000da2:	4906      	ldr	r1, [pc, #24]	; (8000dbc <HAL_UART_RxCpltCallback+0x64>)
 8000da4:	4808      	ldr	r0, [pc, #32]	; (8000dc8 <HAL_UART_RxCpltCallback+0x70>)
 8000da6:	f006 f83d 	bl	8006e24 <HAL_UART_Receive_IT>
	}
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40004400 	.word	0x40004400
 8000db8:	20000231 	.word	0x20000231
 8000dbc:	20000230 	.word	0x20000230
 8000dc0:	200003d4 	.word	0x200003d4
 8000dc4:	20000232 	.word	0x20000232
 8000dc8:	2000038c 	.word	0x2000038c

08000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd2:	f001 f8e9 	bl	8001fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd6:	f000 f841 	bl	8000e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dda:	f000 fa3b 	bl	8001254 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dde:	f000 fa1b 	bl	8001218 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000de2:	f000 f9ef 	bl	80011c4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000de6:	f000 f9a1 	bl	800112c <MX_TIM2_Init>
  MX_ADC1_Init();
 8000dea:	f000 f893 	bl	8000f14 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000dee:	f000 f8cf 	bl	8000f90 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000df2:	f000 f8fb 	bl	8000fec <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000df6:	4815      	ldr	r0, [pc, #84]	; (8000e4c <main+0x80>)
 8000df8:	f004 fc54 	bl	80056a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000dfc:	4814      	ldr	r0, [pc, #80]	; (8000e50 <main+0x84>)
 8000dfe:	f004 fc51 	bl	80056a4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000e02:	2201      	movs	r2, #1
 8000e04:	4913      	ldr	r1, [pc, #76]	; (8000e54 <main+0x88>)
 8000e06:	4814      	ldr	r0, [pc, #80]	; (8000e58 <main+0x8c>)
 8000e08:	f006 f80c 	bl	8006e24 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4810      	ldr	r0, [pc, #64]	; (8000e50 <main+0x84>)
 8000e10:	f004 fcf2 	bl	80057f8 <HAL_TIM_PWM_Start_IT>
  // Initialize the PWM and DMA
//  PWM_DMA_Init();

//
     uint8_t angle = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	71fb      	strb	r3, [r7, #7]
     const uint8_t angle_difference = 11;
 8000e18:	230b      	movs	r3, #11
 8000e1a:	71bb      	strb	r3, [r7, #6]
//		uint32_t rgb_color = hsl_to_rgb(angle + (2 * angle_difference), 255, 127);
//		// Set color
//		led_set_RGB(2, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
//	    	++angle;
//	  uint32_t rgb_color = hsl_to_rgb(angle + (0 * angle_difference), 255, 127);
	       uint32_t rgb_color = hsl_to_rgb(209, 255, 127);
 8000e1c:	227f      	movs	r2, #127	; 0x7f
 8000e1e:	21ff      	movs	r1, #255	; 0xff
 8000e20:	20d1      	movs	r0, #209	; 0xd1
 8000e22:	f000 fab3 	bl	800138c <hsl_to_rgb>
 8000e26:	6038      	str	r0, [r7, #0]
	        led_set_RGB(1, (rgb_color >> 16) & 0xFF, (rgb_color >> 8) & 0xFF, rgb_color & 0xFF);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	0c1b      	lsrs	r3, r3, #16
 8000e2c:	b2d9      	uxtb	r1, r3
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f000 fb85 	bl	8001548 <led_set_RGB>
	  		led_render();
 8000e3e:	f000 fbbb 	bl	80015b8 <led_render>
	  		// Some delay
	  		HAL_Delay(10);
 8000e42:	200a      	movs	r0, #10
 8000e44:	f001 f912 	bl	800206c <HAL_Delay>
  {
 8000e48:	e7e8      	b.n	8000e1c <main+0x50>
 8000e4a:	bf00      	nop
 8000e4c:	20000300 	.word	0x20000300
 8000e50:	200002b8 	.word	0x200002b8
 8000e54:	20000230 	.word	0x20000230
 8000e58:	2000038c 	.word	0x2000038c

08000e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b094      	sub	sp, #80	; 0x50
 8000e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e66:	2228      	movs	r2, #40	; 0x28
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f006 fdaa 	bl	80079c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ea2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ea8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000eac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f003 fee0 	bl	8004c78 <HAL_RCC_OscConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ebe:	f000 fb2b 	bl	8001518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec2:	230f      	movs	r3, #15
 8000ec4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2102      	movs	r1, #2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f004 f94c 	bl	800517c <HAL_RCC_ClockConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000eea:	f000 fb15 	bl	8001518 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ef6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	4618      	mov	r0, r3
 8000efc:	f004 facc 	bl	8005498 <HAL_RCCEx_PeriphCLKConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f06:	f000 fb07 	bl	8001518 <Error_Handler>
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	3750      	adds	r7, #80	; 0x50
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f24:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <MX_ADC1_Init+0x74>)
 8000f26:	4a19      	ldr	r2, [pc, #100]	; (8000f8c <MX_ADC1_Init+0x78>)
 8000f28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <MX_ADC1_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <MX_ADC1_Init+0x74>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_ADC1_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <MX_ADC1_Init+0x74>)
 8000f3e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f44:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <MX_ADC1_Init+0x74>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <MX_ADC1_Init+0x74>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <MX_ADC1_Init+0x74>)
 8000f52:	f001 f8af 	bl	80020b4 <HAL_ADC_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000f5c:	f000 fadc 	bl	8001518 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f64:	2301      	movs	r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_ADC1_Init+0x74>)
 8000f72:	f001 f977 	bl	8002264 <HAL_ADC_ConfigChannel>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000f7c:	f000 facc 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000234 	.word	0x20000234
 8000f8c:	40012400 	.word	0x40012400

08000f90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000f96:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <MX_I2C1_Init+0x54>)
 8000f98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000f9c:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <MX_I2C1_Init+0x58>)
 8000f9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fce:	f002 f815 	bl	8002ffc <HAL_I2C_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fd8:	f000 fa9e 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000264 	.word	0x20000264
 8000fe4:	40005400 	.word	0x40005400
 8000fe8:	000186a0 	.word	0x000186a0

08000fec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b096      	sub	sp, #88	; 0x58
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001000:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800100a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]
 800101a:	615a      	str	r2, [r3, #20]
 800101c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2220      	movs	r2, #32
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f006 fccd 	bl	80079c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800102a:	4b3e      	ldr	r3, [pc, #248]	; (8001124 <MX_TIM1_Init+0x138>)
 800102c:	4a3e      	ldr	r2, [pc, #248]	; (8001128 <MX_TIM1_Init+0x13c>)
 800102e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001030:	4b3c      	ldr	r3, [pc, #240]	; (8001124 <MX_TIM1_Init+0x138>)
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001036:	4b3b      	ldr	r3, [pc, #236]	; (8001124 <MX_TIM1_Init+0x138>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 800103c:	4b39      	ldr	r3, [pc, #228]	; (8001124 <MX_TIM1_Init+0x138>)
 800103e:	2259      	movs	r2, #89	; 0x59
 8001040:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001042:	4b38      	ldr	r3, [pc, #224]	; (8001124 <MX_TIM1_Init+0x138>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001048:	4b36      	ldr	r3, [pc, #216]	; (8001124 <MX_TIM1_Init+0x138>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104e:	4b35      	ldr	r3, [pc, #212]	; (8001124 <MX_TIM1_Init+0x138>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001054:	4833      	ldr	r0, [pc, #204]	; (8001124 <MX_TIM1_Init+0x138>)
 8001056:	f004 fad5 	bl	8005604 <HAL_TIM_Base_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001060:	f000 fa5a 	bl	8001518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001068:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800106a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800106e:	4619      	mov	r1, r3
 8001070:	482c      	ldr	r0, [pc, #176]	; (8001124 <MX_TIM1_Init+0x138>)
 8001072:	f005 f8e3 	bl	800623c <HAL_TIM_ConfigClockSource>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800107c:	f000 fa4c 	bl	8001518 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001080:	4828      	ldr	r0, [pc, #160]	; (8001124 <MX_TIM1_Init+0x138>)
 8001082:	f004 fb61 	bl	8005748 <HAL_TIM_PWM_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800108c:	f000 fa44 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001090:	2300      	movs	r3, #0
 8001092:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001098:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800109c:	4619      	mov	r1, r3
 800109e:	4821      	ldr	r0, [pc, #132]	; (8001124 <MX_TIM1_Init+0x138>)
 80010a0:	f005 fd2c 	bl	8006afc <HAL_TIMEx_MasterConfigSynchronization>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80010aa:	f000 fa35 	bl	8001518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ae:	2360      	movs	r3, #96	; 0x60
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ba:	2300      	movs	r3, #0
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010c2:	2300      	movs	r3, #0
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010c6:	2300      	movs	r3, #0
 80010c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ce:	2200      	movs	r2, #0
 80010d0:	4619      	mov	r1, r3
 80010d2:	4814      	ldr	r0, [pc, #80]	; (8001124 <MX_TIM1_Init+0x138>)
 80010d4:	f004 fff0 	bl	80060b8 <HAL_TIM_PWM_ConfigChannel>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80010de:	f000 fa1b 	bl	8001518 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	4619      	mov	r1, r3
 8001104:	4807      	ldr	r0, [pc, #28]	; (8001124 <MX_TIM1_Init+0x138>)
 8001106:	f005 fd57 	bl	8006bb8 <HAL_TIMEx_ConfigBreakDeadTime>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001110:	f000 fa02 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <MX_TIM1_Init+0x138>)
 8001116:	f000 fd3d 	bl	8001b94 <HAL_TIM_MspPostInit>

}
 800111a:	bf00      	nop
 800111c:	3758      	adds	r7, #88	; 0x58
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200002b8 	.word	0x200002b8
 8001128:	40012c00 	.word	0x40012c00

0800112c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001140:	463b      	mov	r3, r7
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <MX_TIM2_Init+0x94>)
 800114a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800114e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001150:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <MX_TIM2_Init+0x94>)
 8001152:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001156:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <MX_TIM2_Init+0x94>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <MX_TIM2_Init+0x94>)
 8001160:	2209      	movs	r2, #9
 8001162:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <MX_TIM2_Init+0x94>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <MX_TIM2_Init+0x94>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001170:	4813      	ldr	r0, [pc, #76]	; (80011c0 <MX_TIM2_Init+0x94>)
 8001172:	f004 fa47 	bl	8005604 <HAL_TIM_Base_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800117c:	f000 f9cc 	bl	8001518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001184:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	4619      	mov	r1, r3
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <MX_TIM2_Init+0x94>)
 800118e:	f005 f855 	bl	800623c <HAL_TIM_ConfigClockSource>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001198:	f000 f9be 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119c:	2300      	movs	r3, #0
 800119e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011a4:	463b      	mov	r3, r7
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_TIM2_Init+0x94>)
 80011aa:	f005 fca7 	bl	8006afc <HAL_TIMEx_MasterConfigSynchronization>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011b4:	f000 f9b0 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000300 	.word	0x20000300

080011c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011ca:	4a12      	ldr	r2, [pc, #72]	; (8001214 <MX_USART2_UART_Init+0x50>)
 80011cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011ea:	220c      	movs	r2, #12
 80011ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_USART2_UART_Init+0x4c>)
 80011fc:	f005 fd3f 	bl	8006c7e <HAL_UART_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001206:	f000 f987 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000038c 	.word	0x2000038c
 8001214:	40004400 	.word	0x40004400

08001218 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_DMA_Init+0x38>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <MX_DMA_Init+0x38>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6153      	str	r3, [r2, #20]
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_DMA_Init+0x38>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	200c      	movs	r0, #12
 800123c:	f001 fa23 	bl	8002686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001240:	200c      	movs	r0, #12
 8001242:	f001 fa3c 	bl	80026be <HAL_NVIC_EnableIRQ>

}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000

08001254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	f107 0310 	add.w	r3, r7, #16
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001268:	4b39      	ldr	r3, [pc, #228]	; (8001350 <MX_GPIO_Init+0xfc>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a38      	ldr	r2, [pc, #224]	; (8001350 <MX_GPIO_Init+0xfc>)
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b36      	ldr	r3, [pc, #216]	; (8001350 <MX_GPIO_Init+0xfc>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001280:	4b33      	ldr	r3, [pc, #204]	; (8001350 <MX_GPIO_Init+0xfc>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a32      	ldr	r2, [pc, #200]	; (8001350 <MX_GPIO_Init+0xfc>)
 8001286:	f043 0320 	orr.w	r3, r3, #32
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b30      	ldr	r3, [pc, #192]	; (8001350 <MX_GPIO_Init+0xfc>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0320 	and.w	r3, r3, #32
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b2d      	ldr	r3, [pc, #180]	; (8001350 <MX_GPIO_Init+0xfc>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a2c      	ldr	r2, [pc, #176]	; (8001350 <MX_GPIO_Init+0xfc>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <MX_GPIO_Init+0xfc>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b0:	4b27      	ldr	r3, [pc, #156]	; (8001350 <MX_GPIO_Init+0xfc>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a26      	ldr	r2, [pc, #152]	; (8001350 <MX_GPIO_Init+0xfc>)
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b24      	ldr	r3, [pc, #144]	; (8001350 <MX_GPIO_Init+0xfc>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	21e0      	movs	r1, #224	; 0xe0
 80012cc:	4821      	ldr	r0, [pc, #132]	; (8001354 <MX_GPIO_Init+0x100>)
 80012ce:	f001 fe5a 	bl	8002f86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012d8:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <MX_GPIO_Init+0x104>)
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	4619      	mov	r1, r3
 80012e6:	481d      	ldr	r0, [pc, #116]	; (800135c <MX_GPIO_Init+0x108>)
 80012e8:	f001 fcb2 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin;
 80012ec:	23e0      	movs	r3, #224	; 0xe0
 80012ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2302      	movs	r3, #2
 80012fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	4619      	mov	r1, r3
 8001302:	4814      	ldr	r0, [pc, #80]	; (8001354 <MX_GPIO_Init+0x100>)
 8001304:	f001 fca4 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button0_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button0_Pin|Button1_Pin|Button2_Pin;
 8001308:	2307      	movs	r3, #7
 800130a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001310:	2301      	movs	r3, #1
 8001312:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	4619      	mov	r1, r3
 800131a:	4811      	ldr	r0, [pc, #68]	; (8001360 <MX_GPIO_Init+0x10c>)
 800131c:	f001 fc98 	bl	8002c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001320:	2340      	movs	r3, #64	; 0x40
 8001322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2302      	movs	r3, #2
 800132a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	4619      	mov	r1, r3
 8001332:	480b      	ldr	r0, [pc, #44]	; (8001360 <MX_GPIO_Init+0x10c>)
 8001334:	f001 fc8c 	bl	8002c50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	2028      	movs	r0, #40	; 0x28
 800133e:	f001 f9a2 	bl	8002686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001342:	2028      	movs	r0, #40	; 0x28
 8001344:	f001 f9bb 	bl	80026be <HAL_NVIC_EnableIRQ>

}
 8001348:	bf00      	nop
 800134a:	3720      	adds	r7, #32
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40021000 	.word	0x40021000
 8001354:	40010800 	.word	0x40010800
 8001358:	10110000 	.word	0x10110000
 800135c:	40011000 	.word	0x40011000
 8001360:	40010c00 	.word	0x40010c00

08001364 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001374:	d101      	bne.n	800137a <HAL_TIM_PeriodElapsedCallback+0x16>
		button_reading();
 8001376:	f7ff fc83 	bl	8000c80 <button_reading>
	}
	timerRun();
 800137a:	f000 fdad 	bl	8001ed8 <timerRun>
	SCH_Update();
 800137e:	f000 fac7 	bl	8001910 <SCH_Update>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <hsl_to_rgb>:

uint32_t hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
 8001396:	460b      	mov	r3, r1
 8001398:	71bb      	strb	r3, [r7, #6]
 800139a:	4613      	mov	r3, r2
 800139c:	717b      	strb	r3, [r7, #5]
	if(l == 0) return 0;
 800139e:	797b      	ldrb	r3, [r7, #5]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <hsl_to_rgb+0x1c>
 80013a4:	2300      	movs	r3, #0
 80013a6:	e0b1      	b.n	800150c <hsl_to_rgb+0x180>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 80013a8:	797b      	ldrb	r3, [r7, #5]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	3301      	adds	r3, #1
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 80013b2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db09      	blt.n	80013ce <hsl_to_rgb+0x42>
 80013ba:	89bb      	ldrh	r3, [r7, #12]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	79ba      	ldrb	r2, [r7, #6]
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	121b      	asrs	r3, r3, #8
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	74fb      	strb	r3, [r7, #19]
 80013cc:	e00a      	b.n	80013e4 <hsl_to_rgb+0x58>
	else            c = (512 - (l1 << 1)) * s >> 8;
 80013ce:	89bb      	ldrh	r3, [r7, #12]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80013d8:	79ba      	ldrb	r2, [r7, #6]
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	121b      	asrs	r3, r3, #8
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	0052      	lsls	r2, r2, #1
 80013ec:	4413      	add	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 80013f4:	897b      	ldrh	r3, [r7, #10]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 80013fc:	7d3b      	ldrb	r3, [r7, #20]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	b29b      	uxth	r3, r3
 8001402:	3301      	adds	r3, #1
 8001404:	b29b      	uxth	r3, r3
 8001406:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8001408:	897b      	ldrh	r3, [r7, #10]
 800140a:	b29b      	uxth	r3, r3
 800140c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001410:	2b00      	cmp	r3, #0
 8001412:	d109      	bne.n	8001428 <hsl_to_rgb+0x9c>
 8001414:	89fb      	ldrh	r3, [r7, #14]
 8001416:	b29b      	uxth	r3, r3
 8001418:	7cfa      	ldrb	r2, [r7, #19]
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	fb02 f303 	mul.w	r3, r2, r3
 8001420:	121b      	asrs	r3, r3, #8
 8001422:	b2db      	uxtb	r3, r3
 8001424:	74bb      	strb	r3, [r7, #18]
 8001426:	e00a      	b.n	800143e <hsl_to_rgb+0xb2>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8001428:	89fb      	ldrh	r3, [r7, #14]
 800142a:	b29b      	uxth	r3, r3
 800142c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001430:	7cfa      	ldrb	r2, [r7, #19]
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	fb02 f303 	mul.w	r3, r2, r3
 8001438:	121b      	asrs	r3, r3, #8
 800143a:	b2db      	uxtb	r3, r3
 800143c:	74bb      	strb	r3, [r7, #18]

	m = l - (c >> 1);
 800143e:	7cfb      	ldrb	r3, [r7, #19]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	085b      	lsrs	r3, r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	797a      	ldrb	r2, [r7, #5]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	747b      	strb	r3, [r7, #17]
	switch(H >> 8) {       // High byte = sextant of colorwheel
 800144e:	897b      	ldrh	r3, [r7, #10]
 8001450:	b29b      	uxth	r3, r3
 8001452:	0a1b      	lsrs	r3, r3, #8
 8001454:	b29b      	uxth	r3, r3
 8001456:	2b04      	cmp	r3, #4
 8001458:	d839      	bhi.n	80014ce <hsl_to_rgb+0x142>
 800145a:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <hsl_to_rgb+0xd4>)
 800145c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001460:	08001475 	.word	0x08001475
 8001464:	08001487 	.word	0x08001487
 8001468:	08001499 	.word	0x08001499
 800146c:	080014ab 	.word	0x080014ab
 8001470:	080014bd 	.word	0x080014bd
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8001474:	7cfb      	ldrb	r3, [r7, #19]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	75fb      	strb	r3, [r7, #23]
 800147a:	7cbb      	ldrb	r3, [r7, #18]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	75bb      	strb	r3, [r7, #22]
 8001480:	2300      	movs	r3, #0
 8001482:	757b      	strb	r3, [r7, #21]
 8001484:	e02c      	b.n	80014e0 <hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8001486:	7cbb      	ldrb	r3, [r7, #18]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	75fb      	strb	r3, [r7, #23]
 800148c:	7cfb      	ldrb	r3, [r7, #19]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	75bb      	strb	r3, [r7, #22]
 8001492:	2300      	movs	r3, #0
 8001494:	757b      	strb	r3, [r7, #21]
 8001496:	e023      	b.n	80014e0 <hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8001498:	2300      	movs	r3, #0
 800149a:	75fb      	strb	r3, [r7, #23]
 800149c:	7cfb      	ldrb	r3, [r7, #19]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	75bb      	strb	r3, [r7, #22]
 80014a2:	7cbb      	ldrb	r3, [r7, #18]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	757b      	strb	r3, [r7, #21]
 80014a8:	e01a      	b.n	80014e0 <hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 80014aa:	2300      	movs	r3, #0
 80014ac:	75fb      	strb	r3, [r7, #23]
 80014ae:	7cbb      	ldrb	r3, [r7, #18]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	75bb      	strb	r3, [r7, #22]
 80014b4:	7cfb      	ldrb	r3, [r7, #19]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	757b      	strb	r3, [r7, #21]
 80014ba:	e011      	b.n	80014e0 <hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 80014bc:	7cbb      	ldrb	r3, [r7, #18]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	75fb      	strb	r3, [r7, #23]
 80014c2:	2300      	movs	r3, #0
 80014c4:	75bb      	strb	r3, [r7, #22]
 80014c6:	7cfb      	ldrb	r3, [r7, #19]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	757b      	strb	r3, [r7, #21]
 80014cc:	e008      	b.n	80014e0 <hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 80014ce:	7cfb      	ldrb	r3, [r7, #19]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	75fb      	strb	r3, [r7, #23]
 80014d4:	2300      	movs	r3, #0
 80014d6:	75bb      	strb	r3, [r7, #22]
 80014d8:	7cbb      	ldrb	r3, [r7, #18]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	757b      	strb	r3, [r7, #21]
 80014de:	bf00      	nop
	}

	return (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 80014e0:	7dfb      	ldrb	r3, [r7, #23]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	7c7b      	ldrb	r3, [r7, #17]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	4413      	add	r3, r2
 80014ec:	041a      	lsls	r2, r3, #16
 80014ee:	7dbb      	ldrb	r3, [r7, #22]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	4619      	mov	r1, r3
 80014f4:	7c7b      	ldrb	r3, [r7, #17]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	440b      	add	r3, r1
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	431a      	orrs	r2, r3
 80014fe:	7d7b      	ldrb	r3, [r7, #21]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	4619      	mov	r1, r3
 8001504:	7c7b      	ldrb	r3, [r7, #17]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	440b      	add	r3, r1
 800150a:	4313      	orrs	r3, r2
}
 800150c:	4618      	mov	r0, r3
 800150e:	371c      	adds	r7, #28
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop

08001518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
}
 800151e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001520:	e7fe      	b.n	8001520 <Error_Handler+0x8>

08001522 <scale8>:
// LED write buffer
#define WR_BUF_LEN (NUM_BPP * 8 * 2)
uint8_t wr_buf[WR_BUF_LEN] = {0};
uint_fast8_t wr_buf_p = 0;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	460a      	mov	r2, r1
 800152c:	71fb      	strb	r3, [r7, #7]
 800152e:	4613      	mov	r3, r2
 8001530:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	79ba      	ldrb	r2, [r7, #6]
 8001536:	fb02 f303 	mul.w	r3, r2, r3
 800153a:	121b      	asrs	r3, r3, #8
 800153c:	b2db      	uxtb	r3, r3
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <led_set_RGB>:

// Set a single color (RGB) to index
void led_set_RGB(uint8_t index, uint8_t r, uint8_t g, uint8_t b) {
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4604      	mov	r4, r0
 8001550:	4608      	mov	r0, r1
 8001552:	4611      	mov	r1, r2
 8001554:	461a      	mov	r2, r3
 8001556:	4623      	mov	r3, r4
 8001558:	71fb      	strb	r3, [r7, #7]
 800155a:	4603      	mov	r3, r0
 800155c:	71bb      	strb	r3, [r7, #6]
 800155e:	460b      	mov	r3, r1
 8001560:	717b      	strb	r3, [r7, #5]
 8001562:	4613      	mov	r3, r2
 8001564:	713b      	strb	r3, [r7, #4]
  rgb_arr[4 * index] = scale8(g, 0xB0); // g;
  rgb_arr[4 * index + 1] = r;
  rgb_arr[4 * index + 2] = scale8(b, 0xF0); // b;
  rgb_arr[4 * index + 3] = 0;
#else // WS2812B
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8001566:	79fa      	ldrb	r2, [r7, #7]
 8001568:	4613      	mov	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	189c      	adds	r4, r3, r2
 800156e:	797b      	ldrb	r3, [r7, #5]
 8001570:	21b0      	movs	r1, #176	; 0xb0
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff ffd5 	bl	8001522 <scale8>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <led_set_RGB+0x6c>)
 800157e:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 8001580:	79fa      	ldrb	r2, [r7, #7]
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	3301      	adds	r3, #1
 800158a:	490a      	ldr	r1, [pc, #40]	; (80015b4 <led_set_RGB+0x6c>)
 800158c:	79ba      	ldrb	r2, [r7, #6]
 800158e:	54ca      	strb	r2, [r1, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8001590:	79fa      	ldrb	r2, [r7, #7]
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	1c9c      	adds	r4, r3, #2
 800159a:	793b      	ldrb	r3, [r7, #4]
 800159c:	21f0      	movs	r1, #240	; 0xf0
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff ffbf 	bl	8001522 <scale8>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b02      	ldr	r3, [pc, #8]	; (80015b4 <led_set_RGB+0x6c>)
 80015aa:	551a      	strb	r2, [r3, r4]
#endif // End SK6812 WS2812B case differentiation
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd90      	pop	{r4, r7, pc}
 80015b4:	200003f4 	.word	0x200003f4

080015b8 <led_render>:
void led_set_all_RGBW(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) led_set_RGBW(i, r, g, b, w);
}

// Shuttle the data to the LEDs!
void led_render() {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim1_ch1.State != HAL_DMA_STATE_READY) {
 80015be:	4b4d      	ldr	r3, [pc, #308]	; (80016f4 <led_render+0x13c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d105      	bne.n	80015d2 <led_render+0x1a>
 80015c6:	4b4c      	ldr	r3, [pc, #304]	; (80016f8 <led_render+0x140>)
 80015c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d014      	beq.n	80015fc <led_render+0x44>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	71fb      	strb	r3, [r7, #7]
 80015d6:	e006      	b.n	80015e6 <led_render+0x2e>
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	4a48      	ldr	r2, [pc, #288]	; (80016fc <led_render+0x144>)
 80015dc:	2100      	movs	r1, #0
 80015de:	54d1      	strb	r1, [r2, r3]
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	3301      	adds	r3, #1
 80015e4:	71fb      	strb	r3, [r7, #7]
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	2b2f      	cmp	r3, #47	; 0x2f
 80015ea:	d9f5      	bls.n	80015d8 <led_render+0x20>
    wr_buf_p = 0;
 80015ec:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <led_render+0x13c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80015f2:	2100      	movs	r1, #0
 80015f4:	4842      	ldr	r0, [pc, #264]	; (8001700 <led_render+0x148>)
 80015f6:	f004 fb91 	bl	8005d1c <HAL_TIM_PWM_Stop_DMA>
    return;
 80015fa:	e078      	b.n	80016ee <led_render+0x136>
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
    wr_buf[i + 48] = PWM_LO << (((rgb_arr[6] << i) & 0x80) > 0);
    wr_buf[i + 56] = PWM_LO << (((rgb_arr[7] << i) & 0x80) > 0);
  }
#else // WS2812B
  for(uint_fast8_t i = 0; i < 8; ++i) {
 80015fc:	2300      	movs	r3, #0
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	e069      	b.n	80016d6 <led_render+0x11e>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8001602:	4b40      	ldr	r3, [pc, #256]	; (8001704 <led_render+0x14c>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001612:	2b00      	cmp	r3, #0
 8001614:	dd01      	ble.n	800161a <led_render+0x62>
 8001616:	213a      	movs	r1, #58	; 0x3a
 8001618:	e000      	b.n	800161c <led_render+0x64>
 800161a:	211d      	movs	r1, #29
 800161c:	4a37      	ldr	r2, [pc, #220]	; (80016fc <led_render+0x144>)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	4413      	add	r3, r2
 8001622:	460a      	mov	r2, r1
 8001624:	701a      	strb	r2, [r3, #0]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 8001626:	4b37      	ldr	r3, [pc, #220]	; (8001704 <led_render+0x14c>)
 8001628:	785b      	ldrb	r3, [r3, #1]
 800162a:	461a      	mov	r2, r3
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001636:	2b00      	cmp	r3, #0
 8001638:	dd01      	ble.n	800163e <led_render+0x86>
 800163a:	213a      	movs	r1, #58	; 0x3a
 800163c:	e000      	b.n	8001640 <led_render+0x88>
 800163e:	211d      	movs	r1, #29
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	3308      	adds	r3, #8
 8001644:	4a2d      	ldr	r2, [pc, #180]	; (80016fc <led_render+0x144>)
 8001646:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 8001648:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <led_render+0x14c>)
 800164a:	789b      	ldrb	r3, [r3, #2]
 800164c:	461a      	mov	r2, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001658:	2b00      	cmp	r3, #0
 800165a:	dd01      	ble.n	8001660 <led_render+0xa8>
 800165c:	213a      	movs	r1, #58	; 0x3a
 800165e:	e000      	b.n	8001662 <led_render+0xaa>
 8001660:	211d      	movs	r1, #29
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	3310      	adds	r3, #16
 8001666:	4a25      	ldr	r2, [pc, #148]	; (80016fc <led_render+0x144>)
 8001668:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 800166a:	4b26      	ldr	r3, [pc, #152]	; (8001704 <led_render+0x14c>)
 800166c:	78db      	ldrb	r3, [r3, #3]
 800166e:	461a      	mov	r2, r3
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167a:	2b00      	cmp	r3, #0
 800167c:	dd01      	ble.n	8001682 <led_render+0xca>
 800167e:	213a      	movs	r1, #58	; 0x3a
 8001680:	e000      	b.n	8001684 <led_render+0xcc>
 8001682:	211d      	movs	r1, #29
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	3318      	adds	r3, #24
 8001688:	4a1c      	ldr	r2, [pc, #112]	; (80016fc <led_render+0x144>)
 800168a:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 800168c:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <led_render+0x14c>)
 800168e:	791b      	ldrb	r3, [r3, #4]
 8001690:	461a      	mov	r2, r3
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169c:	2b00      	cmp	r3, #0
 800169e:	dd01      	ble.n	80016a4 <led_render+0xec>
 80016a0:	213a      	movs	r1, #58	; 0x3a
 80016a2:	e000      	b.n	80016a6 <led_render+0xee>
 80016a4:	211d      	movs	r1, #29
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	3320      	adds	r3, #32
 80016aa:	4a14      	ldr	r2, [pc, #80]	; (80016fc <led_render+0x144>)
 80016ac:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <led_render+0x14c>)
 80016b0:	795b      	ldrb	r3, [r3, #5]
 80016b2:	461a      	mov	r2, r3
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016be:	2b00      	cmp	r3, #0
 80016c0:	dd01      	ble.n	80016c6 <led_render+0x10e>
 80016c2:	213a      	movs	r1, #58	; 0x3a
 80016c4:	e000      	b.n	80016c8 <led_render+0x110>
 80016c6:	211d      	movs	r1, #29
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	3328      	adds	r3, #40	; 0x28
 80016cc:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <led_render+0x144>)
 80016ce:	54d1      	strb	r1, [r2, r3]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	2b07      	cmp	r3, #7
 80016da:	d992      	bls.n	8001602 <led_render+0x4a>
//	dmaState = HAL_DMA_GetState(&hdma_tim1_ch1);
//	if(newStatus == HAL_OK){
//		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "newstatus=%02X#\r\n", newStatus), 1000);
//		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "dmaState=%02X#\r\n", dmaState), 1000);
//	}
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)wr_buf, WR_BUF_LEN);
 80016dc:	2330      	movs	r3, #48	; 0x30
 80016de:	4a07      	ldr	r2, [pc, #28]	; (80016fc <led_render+0x144>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4807      	ldr	r0, [pc, #28]	; (8001700 <led_render+0x148>)
 80016e4:	f004 f978 	bl	80059d8 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 80016e8:	4b02      	ldr	r3, [pc, #8]	; (80016f4 <led_render+0x13c>)
 80016ea:	2202      	movs	r2, #2
 80016ec:	601a      	str	r2, [r3, #0]
}
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	2000043c 	.word	0x2000043c
 80016f8:	20000348 	.word	0x20000348
 80016fc:	2000040c 	.word	0x2000040c
 8001700:	200002b8 	.word	0x200002b8
 8001704:	200003f4 	.word	0x200003f4

08001708 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8001710:	4b39      	ldr	r3, [pc, #228]	; (80017f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b07      	cmp	r3, #7
 8001716:	d853      	bhi.n	80017c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb8>
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	e047      	b.n	80017ae <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa6>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800171e:	4b36      	ldr	r3, [pc, #216]	; (80017f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4613      	mov	r3, r2
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4413      	add	r3, r2
 8001728:	4a34      	ldr	r2, [pc, #208]	; (80017fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800172a:	5cd3      	ldrb	r3, [r2, r3]
 800172c:	461a      	mov	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001738:	2b00      	cmp	r3, #0
 800173a:	dd01      	ble.n	8001740 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 800173c:	213a      	movs	r1, #58	; 0x3a
 800173e:	e000      	b.n	8001742 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8001740:	211d      	movs	r1, #29
 8001742:	4a2f      	ldr	r2, [pc, #188]	; (8001800 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	460a      	mov	r2, r1
 800174a:	701a      	strb	r2, [r3, #0]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 800174c:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4613      	mov	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	3301      	adds	r3, #1
 8001758:	4a28      	ldr	r2, [pc, #160]	; (80017fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800175a:	5cd3      	ldrb	r3, [r2, r3]
 800175c:	461a      	mov	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001768:	2b00      	cmp	r3, #0
 800176a:	dd01      	ble.n	8001770 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 800176c:	213a      	movs	r1, #58	; 0x3a
 800176e:	e000      	b.n	8001772 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x6a>
 8001770:	211d      	movs	r1, #29
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	3308      	adds	r3, #8
 8001776:	4a22      	ldr	r2, [pc, #136]	; (8001800 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001778:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 800177a:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4613      	mov	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	3302      	adds	r3, #2
 8001786:	4a1d      	ldr	r2, [pc, #116]	; (80017fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8001788:	5cd3      	ldrb	r3, [r2, r3]
 800178a:	461a      	mov	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001796:	2b00      	cmp	r3, #0
 8001798:	dd01      	ble.n	800179e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 800179a:	213a      	movs	r1, #58	; 0x3a
 800179c:	e000      	b.n	80017a0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 800179e:	211d      	movs	r1, #29
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3310      	adds	r3, #16
 80017a4:	4a16      	ldr	r2, [pc, #88]	; (8001800 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80017a6:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3301      	adds	r3, #1
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b07      	cmp	r3, #7
 80017b2:	d9b4      	bls.n	800171e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	4a0f      	ldr	r2, [pc, #60]	; (80017f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80017bc:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 80017be:	e015      	b.n	80017ec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b09      	cmp	r3, #9
 80017c6:	d811      	bhi.n	80017ec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	72fb      	strb	r3, [r7, #11]
 80017cc:	e006      	b.n	80017dc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd4>
 80017ce:	7afb      	ldrb	r3, [r7, #11]
 80017d0:	4a0b      	ldr	r2, [pc, #44]	; (8001800 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80017d2:	2100      	movs	r1, #0
 80017d4:	54d1      	strb	r1, [r2, r3]
 80017d6:	7afb      	ldrb	r3, [r7, #11]
 80017d8:	3301      	adds	r3, #1
 80017da:	72fb      	strb	r3, [r7, #11]
 80017dc:	7afb      	ldrb	r3, [r7, #11]
 80017de:	2b17      	cmp	r3, #23
 80017e0:	d9f5      	bls.n	80017ce <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc6>
    wr_buf_p++;
 80017e2:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	4a03      	ldr	r2, [pc, #12]	; (80017f8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	2000043c 	.word	0x2000043c
 80017fc:	200003f4 	.word	0x200003f4
 8001800:	2000040c 	.word	0x2000040c

08001804 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 800180c:	4b3c      	ldr	r3, [pc, #240]	; (8001900 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b07      	cmp	r3, #7
 8001812:	d852      	bhi.n	80018ba <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	e046      	b.n	80018a8 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800181a:	4b39      	ldr	r3, [pc, #228]	; (8001900 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	4613      	mov	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	4a37      	ldr	r2, [pc, #220]	; (8001904 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001826:	5cd3      	ldrb	r3, [r2, r3]
 8001828:	461a      	mov	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001834:	2b00      	cmp	r3, #0
 8001836:	dd01      	ble.n	800183c <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8001838:	213a      	movs	r1, #58	; 0x3a
 800183a:	e000      	b.n	800183e <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 800183c:	211d      	movs	r1, #29
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3318      	adds	r3, #24
 8001842:	4a31      	ldr	r2, [pc, #196]	; (8001908 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001844:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001846:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4613      	mov	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	3301      	adds	r3, #1
 8001852:	4a2c      	ldr	r2, [pc, #176]	; (8001904 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001854:	5cd3      	ldrb	r3, [r2, r3]
 8001856:	461a      	mov	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001862:	2b00      	cmp	r3, #0
 8001864:	dd01      	ble.n	800186a <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 8001866:	213a      	movs	r1, #58	; 0x3a
 8001868:	e000      	b.n	800186c <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 800186a:	211d      	movs	r1, #29
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	3320      	adds	r3, #32
 8001870:	4a25      	ldr	r2, [pc, #148]	; (8001908 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001872:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8001874:	4b22      	ldr	r3, [pc, #136]	; (8001900 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4613      	mov	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	3302      	adds	r3, #2
 8001880:	4a20      	ldr	r2, [pc, #128]	; (8001904 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001882:	5cd3      	ldrb	r3, [r2, r3]
 8001884:	461a      	mov	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001890:	2b00      	cmp	r3, #0
 8001892:	dd01      	ble.n	8001898 <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 8001894:	213a      	movs	r1, #58	; 0x3a
 8001896:	e000      	b.n	800189a <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 8001898:	211d      	movs	r1, #29
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	3328      	adds	r3, #40	; 0x28
 800189e:	4a1a      	ldr	r2, [pc, #104]	; (8001908 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80018a0:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	3301      	adds	r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b07      	cmp	r3, #7
 80018ac:	d9b5      	bls.n	800181a <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 80018ae:	4b14      	ldr	r3, [pc, #80]	; (8001900 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	3301      	adds	r3, #1
 80018b4:	4a12      	ldr	r2, [pc, #72]	; (8001900 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80018b6:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
  }
}
 80018b8:	e01d      	b.n	80018f6 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b09      	cmp	r3, #9
 80018c0:	d812      	bhi.n	80018e8 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80018c2:	2318      	movs	r3, #24
 80018c4:	72fb      	strb	r3, [r7, #11]
 80018c6:	e006      	b.n	80018d6 <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 80018c8:	7afb      	ldrb	r3, [r7, #11]
 80018ca:	4a0f      	ldr	r2, [pc, #60]	; (8001908 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80018cc:	2100      	movs	r1, #0
 80018ce:	54d1      	strb	r1, [r2, r3]
 80018d0:	7afb      	ldrb	r3, [r7, #11]
 80018d2:	3301      	adds	r3, #1
 80018d4:	72fb      	strb	r3, [r7, #11]
 80018d6:	7afb      	ldrb	r3, [r7, #11]
 80018d8:	2b2f      	cmp	r3, #47	; 0x2f
 80018da:	d9f5      	bls.n	80018c8 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>
    ++wr_buf_p;
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	3301      	adds	r3, #1
 80018e2:	4a07      	ldr	r2, [pc, #28]	; (8001900 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80018e4:	6013      	str	r3, [r2, #0]
}
 80018e6:	e006      	b.n	80018f6 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
    wr_buf_p = 0;
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80018ee:	2100      	movs	r1, #0
 80018f0:	4806      	ldr	r0, [pc, #24]	; (800190c <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80018f2:	f004 fa13 	bl	8005d1c <HAL_TIM_PWM_Stop_DMA>
}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	2000043c 	.word	0x2000043c
 8001904:	200003f4 	.word	0x200003f4
 8001908:	2000040c 	.word	0x2000040c
 800190c:	200002b8 	.word	0x200002b8

08001910 <SCH_Update>:
    unsigned char i;
    for (i = 0; i < SCH_MAX_TASKS; i++) {
        SCH_Delete_Task(i);
    }
}
void SCH_Update(void){
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
//	                // Not yet ready to run: just decrement the delay
//	                SCH_tasks_G[Index].Delay -= 1;
//	            }
//	        }
//	    }
	if(head != NULL){
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <SCH_Update+0x20>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d004      	beq.n	8001926 <SCH_Update+0x16>
		head->Delay--;
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <SCH_Update+0x20>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	3a01      	subs	r2, #1
 8001924:	605a      	str	r2, [r3, #4]
	}
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000440 	.word	0x20000440

08001934 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <HAL_MspInit+0x5c>)
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	4a14      	ldr	r2, [pc, #80]	; (8001990 <HAL_MspInit+0x5c>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6193      	str	r3, [r2, #24]
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_MspInit+0x5c>)
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <HAL_MspInit+0x5c>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	4a0e      	ldr	r2, [pc, #56]	; (8001990 <HAL_MspInit+0x5c>)
 8001958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195c:	61d3      	str	r3, [r2, #28]
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <HAL_MspInit+0x5c>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <HAL_MspInit+0x60>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	4a04      	ldr	r2, [pc, #16]	; (8001994 <HAL_MspInit+0x60>)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001986:	bf00      	nop
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	40021000 	.word	0x40021000
 8001994:	40010000 	.word	0x40010000

08001998 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <HAL_ADC_MspInit+0x6c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d121      	bne.n	80019fc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <HAL_ADC_MspInit+0x70>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <HAL_ADC_MspInit+0x70>)
 80019be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019c2:	6193      	str	r3, [r2, #24]
 80019c4:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <HAL_ADC_MspInit+0x70>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <HAL_ADC_MspInit+0x70>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4a0c      	ldr	r2, [pc, #48]	; (8001a08 <HAL_ADC_MspInit+0x70>)
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	6193      	str	r3, [r2, #24]
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_ADC_MspInit+0x70>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019e8:	2301      	movs	r3, #1
 80019ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ec:	2303      	movs	r3, #3
 80019ee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f0:	f107 0310 	add.w	r3, r7, #16
 80019f4:	4619      	mov	r1, r3
 80019f6:	4805      	ldr	r0, [pc, #20]	; (8001a0c <HAL_ADC_MspInit+0x74>)
 80019f8:	f001 f92a 	bl	8002c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019fc:	bf00      	nop
 80019fe:	3720      	adds	r7, #32
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40012400 	.word	0x40012400
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40010800 	.word	0x40010800

08001a10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a25      	ldr	r2, [pc, #148]	; (8001ac0 <HAL_I2C_MspInit+0xb0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d142      	bne.n	8001ab6 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a30:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <HAL_I2C_MspInit+0xb4>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	4a23      	ldr	r2, [pc, #140]	; (8001ac4 <HAL_I2C_MspInit+0xb4>)
 8001a36:	f043 0308 	orr.w	r3, r3, #8
 8001a3a:	6193      	str	r3, [r2, #24]
 8001a3c:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <HAL_I2C_MspInit+0xb4>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a4e:	2312      	movs	r3, #18
 8001a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a52:	2303      	movs	r3, #3
 8001a54:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	481a      	ldr	r0, [pc, #104]	; (8001ac8 <HAL_I2C_MspInit+0xb8>)
 8001a5e:	f001 f8f7 	bl	8002c50 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <HAL_I2C_MspInit+0xbc>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	f043 0302 	orr.w	r3, r3, #2
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
 8001a78:	4a14      	ldr	r2, [pc, #80]	; (8001acc <HAL_I2C_MspInit+0xbc>)
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_I2C_MspInit+0xb4>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	4a10      	ldr	r2, [pc, #64]	; (8001ac4 <HAL_I2C_MspInit+0xb4>)
 8001a84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a88:	61d3      	str	r3, [r2, #28]
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_I2C_MspInit+0xb4>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	201f      	movs	r0, #31
 8001a9c:	f000 fdf3 	bl	8002686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001aa0:	201f      	movs	r0, #31
 8001aa2:	f000 fe0c 	bl	80026be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	2020      	movs	r0, #32
 8001aac:	f000 fdeb 	bl	8002686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001ab0:	2020      	movs	r0, #32
 8001ab2:	f000 fe04 	bl	80026be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ab6:	bf00      	nop
 8001ab8:	3728      	adds	r7, #40	; 0x28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40005400 	.word	0x40005400
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40010c00 	.word	0x40010c00
 8001acc:	40010000 	.word	0x40010000

08001ad0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a29      	ldr	r2, [pc, #164]	; (8001b84 <HAL_TIM_Base_MspInit+0xb4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d133      	bne.n	8001b4a <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ae2:	4b29      	ldr	r3, [pc, #164]	; (8001b88 <HAL_TIM_Base_MspInit+0xb8>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	4a28      	ldr	r2, [pc, #160]	; (8001b88 <HAL_TIM_Base_MspInit+0xb8>)
 8001ae8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001aec:	6193      	str	r3, [r2, #24]
 8001aee:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <HAL_TIM_Base_MspInit+0xb8>)
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001afa:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001afc:	4a24      	ldr	r2, [pc, #144]	; (8001b90 <HAL_TIM_Base_MspInit+0xc0>)
 8001afe:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b00:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001b02:	2210      	movs	r2, #16
 8001b04:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b06:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001b0e:	2280      	movs	r2, #128	; 0x80
 8001b10:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b12:	4b1e      	ldr	r3, [pc, #120]	; (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b18:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001b22:	2220      	movs	r2, #32
 8001b24:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001b26:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001b2c:	4817      	ldr	r0, [pc, #92]	; (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001b2e:	f000 fde1 	bl	80026f4 <HAL_DMA_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 8001b38:	f7ff fcee 	bl	8001518 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24
 8001b42:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <HAL_TIM_Base_MspInit+0xbc>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b48:	e018      	b.n	8001b7c <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM2)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b52:	d113      	bne.n	8001b7c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <HAL_TIM_Base_MspInit+0xb8>)
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <HAL_TIM_Base_MspInit+0xb8>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	61d3      	str	r3, [r2, #28]
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_TIM_Base_MspInit+0xb8>)
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	201c      	movs	r0, #28
 8001b72:	f000 fd88 	bl	8002686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b76:	201c      	movs	r0, #28
 8001b78:	f000 fda1 	bl	80026be <HAL_NVIC_EnableIRQ>
}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40012c00 	.word	0x40012c00
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	20000348 	.word	0x20000348
 8001b90:	4002001c 	.word	0x4002001c

08001b94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a10      	ldr	r2, [pc, #64]	; (8001bf0 <HAL_TIM_MspPostInit+0x5c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d118      	bne.n	8001be6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <HAL_TIM_MspPostInit+0x60>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <HAL_TIM_MspPostInit+0x60>)
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	6193      	str	r3, [r2, #24]
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <HAL_TIM_MspPostInit+0x60>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 0310 	add.w	r3, r7, #16
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <HAL_TIM_MspPostInit+0x64>)
 8001be2:	f001 f835 	bl	8002c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001be6:	bf00      	nop
 8001be8:	3720      	adds	r7, #32
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40012c00 	.word	0x40012c00
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40010800 	.word	0x40010800

08001bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 0310 	add.w	r3, r7, #16
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a19      	ldr	r2, [pc, #100]	; (8001c7c <HAL_UART_MspInit+0x80>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d12b      	bne.n	8001c74 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <HAL_UART_MspInit+0x84>)
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	4a17      	ldr	r2, [pc, #92]	; (8001c80 <HAL_UART_MspInit+0x84>)
 8001c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c26:	61d3      	str	r3, [r2, #28]
 8001c28:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <HAL_UART_MspInit+0x84>)
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_UART_MspInit+0x84>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	4a11      	ldr	r2, [pc, #68]	; (8001c80 <HAL_UART_MspInit+0x84>)
 8001c3a:	f043 0304 	orr.w	r3, r3, #4
 8001c3e:	6193      	str	r3, [r2, #24]
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <HAL_UART_MspInit+0x84>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c4c:	230c      	movs	r3, #12
 8001c4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	2302      	movs	r3, #2
 8001c56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c58:	f107 0310 	add.w	r3, r7, #16
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4809      	ldr	r0, [pc, #36]	; (8001c84 <HAL_UART_MspInit+0x88>)
 8001c60:	f000 fff6 	bl	8002c50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2100      	movs	r1, #0
 8001c68:	2026      	movs	r0, #38	; 0x26
 8001c6a:	f000 fd0c 	bl	8002686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c6e:	2026      	movs	r0, #38	; 0x26
 8001c70:	f000 fd25 	bl	80026be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c74:	bf00      	nop
 8001c76:	3720      	adds	r7, #32
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40004400 	.word	0x40004400
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40010800 	.word	0x40010800

08001c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <NMI_Handler+0x4>

08001c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c92:	e7fe      	b.n	8001c92 <HardFault_Handler+0x4>

08001c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <MemManage_Handler+0x4>

08001c9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9e:	e7fe      	b.n	8001c9e <BusFault_Handler+0x4>

08001ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <UsageFault_Handler+0x4>

08001ca6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr

08001cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr

08001cca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cce:	f000 f9b1 	bl	8002034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <DMA1_Channel2_IRQHandler+0x10>)
 8001cde:	f000 fe77 	bl	80029d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000348 	.word	0x20000348

08001cec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cf0:	4802      	ldr	r0, [pc, #8]	; (8001cfc <TIM2_IRQHandler+0x10>)
 8001cf2:	f004 f8d9 	bl	8005ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000300 	.word	0x20000300

08001d00 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <I2C1_EV_IRQHandler+0x10>)
 8001d06:	f001 fad1 	bl	80032ac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000264 	.word	0x20000264

08001d14 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001d18:	4802      	ldr	r0, [pc, #8]	; (8001d24 <I2C1_ER_IRQHandler+0x10>)
 8001d1a:	f001 fc38 	bl	800358e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000264 	.word	0x20000264

08001d28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <USART2_IRQHandler+0x10>)
 8001d2e:	f005 f89f 	bl	8006e70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	2000038c 	.word	0x2000038c

08001d3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001d40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d44:	f001 f938 	bl	8002fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return 1;
 8001d50:	2301      	movs	r3, #1
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr

08001d5a <_kill>:

int _kill(int pid, int sig)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d64:	f005 fe04 	bl	8007970 <__errno>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2216      	movs	r2, #22
 8001d6c:	601a      	str	r2, [r3, #0]
  return -1;
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <_exit>:

void _exit (int status)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d82:	f04f 31ff 	mov.w	r1, #4294967295
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ffe7 	bl	8001d5a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d8c:	e7fe      	b.n	8001d8c <_exit+0x12>

08001d8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e00a      	b.n	8001db6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001da0:	f3af 8000 	nop.w
 8001da4:	4601      	mov	r1, r0
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	60ba      	str	r2, [r7, #8]
 8001dac:	b2ca      	uxtb	r2, r1
 8001dae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3301      	adds	r3, #1
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	dbf0      	blt.n	8001da0 <_read+0x12>
  }

  return len;
 8001dbe:	687b      	ldr	r3, [r7, #4]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	e009      	b.n	8001dee <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	1c5a      	adds	r2, r3, #1
 8001dde:	60ba      	str	r2, [r7, #8]
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	3301      	adds	r3, #1
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	dbf1      	blt.n	8001dda <_write+0x12>
  }
  return len;
 8001df6:	687b      	ldr	r3, [r7, #4]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <_close>:

int _close(int file)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr

08001e16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e26:	605a      	str	r2, [r3, #4]
  return 0;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <_isatty>:

int _isatty(int file)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e3c:	2301      	movs	r3, #1
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e68:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <_sbrk+0x5c>)
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <_sbrk+0x60>)
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e74:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <_sbrk+0x64>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d102      	bne.n	8001e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <_sbrk+0x64>)
 8001e7e:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <_sbrk+0x68>)
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <_sbrk+0x64>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d207      	bcs.n	8001ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e90:	f005 fd6e 	bl	8007970 <__errno>
 8001e94:	4603      	mov	r3, r0
 8001e96:	220c      	movs	r2, #12
 8001e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9e:	e009      	b.n	8001eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <_sbrk+0x64>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <_sbrk+0x64>)
 8001eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20005000 	.word	0x20005000
 8001ec0:	00000400 	.word	0x00000400
 8001ec4:	20000444 	.word	0x20000444
 8001ec8:	20000478 	.word	0x20000478

08001ecc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <timerRun>:
void setTimer3 (int duration) {
	timer3_counter = duration/Timer_Cycle;
	timer3_flag = 0;
}

void timerRun(){
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8001edc:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <timerRun+0x6c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	dd0b      	ble.n	8001efc <timerRun+0x24>
		timer1_counter--;
 8001ee4:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <timerRun+0x6c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	4a16      	ldr	r2, [pc, #88]	; (8001f44 <timerRun+0x6c>)
 8001eec:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <timerRun+0x6c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	dc02      	bgt.n	8001efc <timerRun+0x24>
			timer1_flag = 1;
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <timerRun+0x70>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 8001efc:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <timerRun+0x74>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	dd0b      	ble.n	8001f1c <timerRun+0x44>
		timer2_counter--;
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <timerRun+0x74>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <timerRun+0x74>)
 8001f0c:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 8001f0e:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <timerRun+0x74>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	dc02      	bgt.n	8001f1c <timerRun+0x44>
			timer2_flag = 1;
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <timerRun+0x78>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <timerRun+0x7c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	dd0b      	ble.n	8001f3c <timerRun+0x64>
		timer3_counter--;
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <timerRun+0x7c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <timerRun+0x7c>)
 8001f2c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <timerRun+0x7c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	dc02      	bgt.n	8001f3c <timerRun+0x64>
			timer3_flag = 1;
 8001f36:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <timerRun+0x80>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr
 8001f44:	20000448 	.word	0x20000448
 8001f48:	20000454 	.word	0x20000454
 8001f4c:	2000044c 	.word	0x2000044c
 8001f50:	20000458 	.word	0x20000458
 8001f54:	20000450 	.word	0x20000450
 8001f58:	2000045c 	.word	0x2000045c

08001f5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f5c:	f7ff ffb6 	bl	8001ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f60:	480b      	ldr	r0, [pc, #44]	; (8001f90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f62:	490c      	ldr	r1, [pc, #48]	; (8001f94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f64:	4a0c      	ldr	r2, [pc, #48]	; (8001f98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f68:	e002      	b.n	8001f70 <LoopCopyDataInit>

08001f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6e:	3304      	adds	r3, #4

08001f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f74:	d3f9      	bcc.n	8001f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f76:	4a09      	ldr	r2, [pc, #36]	; (8001f9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f78:	4c09      	ldr	r4, [pc, #36]	; (8001fa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f7c:	e001      	b.n	8001f82 <LoopFillZerobss>

08001f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f80:	3204      	adds	r2, #4

08001f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f84:	d3fb      	bcc.n	8001f7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f86:	f005 fcf9 	bl	800797c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f8a:	f7fe ff1f 	bl	8000dcc <main>
  bx lr
 8001f8e:	4770      	bx	lr
  ldr r0, =_sdata
 8001f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f94:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001f98:	0800a814 	.word	0x0800a814
  ldr r2, =_sbss
 8001f9c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001fa0:	20000474 	.word	0x20000474

08001fa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fa4:	e7fe      	b.n	8001fa4 <ADC1_2_IRQHandler>
	...

08001fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <HAL_Init+0x28>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a07      	ldr	r2, [pc, #28]	; (8001fd0 <HAL_Init+0x28>)
 8001fb2:	f043 0310 	orr.w	r3, r3, #16
 8001fb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb8:	2003      	movs	r0, #3
 8001fba:	f000 fb59 	bl	8002670 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f000 f808 	bl	8001fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc4:	f7ff fcb6 	bl	8001934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40022000 	.word	0x40022000

08001fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fdc:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_InitTick+0x54>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_InitTick+0x58>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fb71 	bl	80026da <HAL_SYSTICK_Config>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00e      	b.n	8002020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b0f      	cmp	r3, #15
 8002006:	d80a      	bhi.n	800201e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002008:	2200      	movs	r2, #0
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	f04f 30ff 	mov.w	r0, #4294967295
 8002010:	f000 fb39 	bl	8002686 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002014:	4a06      	ldr	r2, [pc, #24]	; (8002030 <HAL_InitTick+0x5c>)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e000      	b.n	8002020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	2000000c 	.word	0x2000000c
 800202c:	20000014 	.word	0x20000014
 8002030:	20000010 	.word	0x20000010

08002034 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_IncTick+0x1c>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_IncTick+0x20>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4413      	add	r3, r2
 8002044:	4a03      	ldr	r2, [pc, #12]	; (8002054 <HAL_IncTick+0x20>)
 8002046:	6013      	str	r3, [r2, #0]
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr
 8002050:	20000014 	.word	0x20000014
 8002054:	20000460 	.word	0x20000460

08002058 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return uwTick;
 800205c:	4b02      	ldr	r3, [pc, #8]	; (8002068 <HAL_GetTick+0x10>)
 800205e:	681b      	ldr	r3, [r3, #0]
}
 8002060:	4618      	mov	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	20000460 	.word	0x20000460

0800206c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002074:	f7ff fff0 	bl	8002058 <HAL_GetTick>
 8002078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002084:	d005      	beq.n	8002092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_Delay+0x44>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002092:	bf00      	nop
 8002094:	f7ff ffe0 	bl	8002058 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d8f7      	bhi.n	8002094 <HAL_Delay+0x28>
  {
  }
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000014 	.word	0x20000014

080020b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0be      	b.n	8002254 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d109      	bne.n	80020f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff fc50 	bl	8001998 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f9ab 	bl	8002454 <ADC_ConversionStop_Disable>
 80020fe:	4603      	mov	r3, r0
 8002100:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 8099 	bne.w	8002242 <HAL_ADC_Init+0x18e>
 8002110:	7dfb      	ldrb	r3, [r7, #23]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 8095 	bne.w	8002242 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002120:	f023 0302 	bic.w	r3, r3, #2
 8002124:	f043 0202 	orr.w	r2, r3, #2
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002134:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	7b1b      	ldrb	r3, [r3, #12]
 800213a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800213c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	4313      	orrs	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800214c:	d003      	beq.n	8002156 <HAL_ADC_Init+0xa2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d102      	bne.n	800215c <HAL_ADC_Init+0xa8>
 8002156:	f44f 7380 	mov.w	r3, #256	; 0x100
 800215a:	e000      	b.n	800215e <HAL_ADC_Init+0xaa>
 800215c:	2300      	movs	r3, #0
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7d1b      	ldrb	r3, [r3, #20]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d119      	bne.n	80021a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7b1b      	ldrb	r3, [r3, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d109      	bne.n	8002188 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	3b01      	subs	r3, #1
 800217a:	035a      	lsls	r2, r3, #13
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4313      	orrs	r3, r2
 8002180:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	e00b      	b.n	80021a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218c:	f043 0220 	orr.w	r2, r3, #32
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	f043 0201 	orr.w	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	4b28      	ldr	r3, [pc, #160]	; (800225c <HAL_ADC_Init+0x1a8>)
 80021bc:	4013      	ands	r3, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	68b9      	ldr	r1, [r7, #8]
 80021c4:	430b      	orrs	r3, r1
 80021c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021d0:	d003      	beq.n	80021da <HAL_ADC_Init+0x126>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d104      	bne.n	80021e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	3b01      	subs	r3, #1
 80021e0:	051b      	lsls	r3, r3, #20
 80021e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	4b18      	ldr	r3, [pc, #96]	; (8002260 <HAL_ADC_Init+0x1ac>)
 8002200:	4013      	ands	r3, r2
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	429a      	cmp	r2, r3
 8002206:	d10b      	bne.n	8002220 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	f023 0303 	bic.w	r3, r3, #3
 8002216:	f043 0201 	orr.w	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800221e:	e018      	b.n	8002252 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002224:	f023 0312 	bic.w	r3, r3, #18
 8002228:	f043 0210 	orr.w	r2, r3, #16
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	f043 0201 	orr.w	r2, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002240:	e007      	b.n	8002252 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	f043 0210 	orr.w	r2, r3, #16
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002252:	7dfb      	ldrb	r3, [r7, #23]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	ffe1f7fd 	.word	0xffe1f7fd
 8002260:	ff1f0efe 	.word	0xff1f0efe

08002264 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x20>
 8002280:	2302      	movs	r3, #2
 8002282:	e0dc      	b.n	800243e <HAL_ADC_ConfigChannel+0x1da>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b06      	cmp	r3, #6
 8002292:	d81c      	bhi.n	80022ce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	3b05      	subs	r3, #5
 80022a6:	221f      	movs	r2, #31
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	4019      	ands	r1, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	3b05      	subs	r3, #5
 80022c0:	fa00 f203 	lsl.w	r2, r0, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	635a      	str	r2, [r3, #52]	; 0x34
 80022cc:	e03c      	b.n	8002348 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b0c      	cmp	r3, #12
 80022d4:	d81c      	bhi.n	8002310 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	3b23      	subs	r3, #35	; 0x23
 80022e8:	221f      	movs	r2, #31
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	4019      	ands	r1, r3
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	3b23      	subs	r3, #35	; 0x23
 8002302:	fa00 f203 	lsl.w	r2, r0, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	631a      	str	r2, [r3, #48]	; 0x30
 800230e:	e01b      	b.n	8002348 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	3b41      	subs	r3, #65	; 0x41
 8002322:	221f      	movs	r2, #31
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	4019      	ands	r1, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	3b41      	subs	r3, #65	; 0x41
 800233c:	fa00 f203 	lsl.w	r2, r0, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b09      	cmp	r3, #9
 800234e:	d91c      	bls.n	800238a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68d9      	ldr	r1, [r3, #12]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4613      	mov	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4413      	add	r3, r2
 8002360:	3b1e      	subs	r3, #30
 8002362:	2207      	movs	r2, #7
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	4019      	ands	r1, r3
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	6898      	ldr	r0, [r3, #8]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4613      	mov	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	3b1e      	subs	r3, #30
 800237c:	fa00 f203 	lsl.w	r2, r0, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	60da      	str	r2, [r3, #12]
 8002388:	e019      	b.n	80023be <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6919      	ldr	r1, [r3, #16]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4613      	mov	r3, r2
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4413      	add	r3, r2
 800239a:	2207      	movs	r2, #7
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	4019      	ands	r1, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	6898      	ldr	r0, [r3, #8]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	fa00 f203 	lsl.w	r2, r0, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b10      	cmp	r3, #16
 80023c4:	d003      	beq.n	80023ce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80023ca:	2b11      	cmp	r3, #17
 80023cc:	d132      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a1d      	ldr	r2, [pc, #116]	; (8002448 <HAL_ADC_ConfigChannel+0x1e4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d125      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d126      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023f4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b10      	cmp	r3, #16
 80023fc:	d11a      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023fe:	4b13      	ldr	r3, [pc, #76]	; (800244c <HAL_ADC_ConfigChannel+0x1e8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a13      	ldr	r2, [pc, #76]	; (8002450 <HAL_ADC_ConfigChannel+0x1ec>)
 8002404:	fba2 2303 	umull	r2, r3, r2, r3
 8002408:	0c9a      	lsrs	r2, r3, #18
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002414:	e002      	b.n	800241c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	3b01      	subs	r3, #1
 800241a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f9      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x1b2>
 8002422:	e007      	b.n	8002434 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	f043 0220 	orr.w	r2, r3, #32
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800243c:	7bfb      	ldrb	r3, [r7, #15]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	40012400 	.word	0x40012400
 800244c:	2000000c 	.word	0x2000000c
 8002450:	431bde83 	.word	0x431bde83

08002454 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b01      	cmp	r3, #1
 800246c:	d12e      	bne.n	80024cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0201 	bic.w	r2, r2, #1
 800247c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800247e:	f7ff fdeb 	bl	8002058 <HAL_GetTick>
 8002482:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002484:	e01b      	b.n	80024be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002486:	f7ff fde7 	bl	8002058 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d914      	bls.n	80024be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d10d      	bne.n	80024be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	f043 0210 	orr.w	r2, r3, #16
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b2:	f043 0201 	orr.w	r2, r3, #1
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e007      	b.n	80024ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d0dc      	beq.n	8002486 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <__NVIC_SetPriorityGrouping+0x44>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024f4:	4013      	ands	r3, r2
 80024f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800250a:	4a04      	ldr	r2, [pc, #16]	; (800251c <__NVIC_SetPriorityGrouping+0x44>)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	60d3      	str	r3, [r2, #12]
}
 8002510:	bf00      	nop
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002524:	4b04      	ldr	r3, [pc, #16]	; (8002538 <__NVIC_GetPriorityGrouping+0x18>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	f003 0307 	and.w	r3, r3, #7
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	2b00      	cmp	r3, #0
 800254c:	db0b      	blt.n	8002566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	f003 021f 	and.w	r2, r3, #31
 8002554:	4906      	ldr	r1, [pc, #24]	; (8002570 <__NVIC_EnableIRQ+0x34>)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	2001      	movs	r0, #1
 800255e:	fa00 f202 	lsl.w	r2, r0, r2
 8002562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	e000e100 	.word	0xe000e100

08002574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	6039      	str	r1, [r7, #0]
 800257e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002584:	2b00      	cmp	r3, #0
 8002586:	db0a      	blt.n	800259e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	b2da      	uxtb	r2, r3
 800258c:	490c      	ldr	r1, [pc, #48]	; (80025c0 <__NVIC_SetPriority+0x4c>)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	0112      	lsls	r2, r2, #4
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	440b      	add	r3, r1
 8002598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800259c:	e00a      	b.n	80025b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	4908      	ldr	r1, [pc, #32]	; (80025c4 <__NVIC_SetPriority+0x50>)
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	3b04      	subs	r3, #4
 80025ac:	0112      	lsls	r2, r2, #4
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	440b      	add	r3, r1
 80025b2:	761a      	strb	r2, [r3, #24]
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000e100 	.word	0xe000e100
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b089      	sub	sp, #36	; 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f1c3 0307 	rsb	r3, r3, #7
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	bf28      	it	cs
 80025e6:	2304      	movcs	r3, #4
 80025e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	3304      	adds	r3, #4
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d902      	bls.n	80025f8 <NVIC_EncodePriority+0x30>
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3b03      	subs	r3, #3
 80025f6:	e000      	b.n	80025fa <NVIC_EncodePriority+0x32>
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43da      	mvns	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	401a      	ands	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002610:	f04f 31ff 	mov.w	r1, #4294967295
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	fa01 f303 	lsl.w	r3, r1, r3
 800261a:	43d9      	mvns	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	4313      	orrs	r3, r2
         );
}
 8002622:	4618      	mov	r0, r3
 8002624:	3724      	adds	r7, #36	; 0x24
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3b01      	subs	r3, #1
 8002638:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800263c:	d301      	bcc.n	8002642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800263e:	2301      	movs	r3, #1
 8002640:	e00f      	b.n	8002662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002642:	4a0a      	ldr	r2, [pc, #40]	; (800266c <SysTick_Config+0x40>)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800264a:	210f      	movs	r1, #15
 800264c:	f04f 30ff 	mov.w	r0, #4294967295
 8002650:	f7ff ff90 	bl	8002574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <SysTick_Config+0x40>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265a:	4b04      	ldr	r3, [pc, #16]	; (800266c <SysTick_Config+0x40>)
 800265c:	2207      	movs	r2, #7
 800265e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	e000e010 	.word	0xe000e010

08002670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ff2d 	bl	80024d8 <__NVIC_SetPriorityGrouping>
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002686:	b580      	push	{r7, lr}
 8002688:	b086      	sub	sp, #24
 800268a:	af00      	add	r7, sp, #0
 800268c:	4603      	mov	r3, r0
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002698:	f7ff ff42 	bl	8002520 <__NVIC_GetPriorityGrouping>
 800269c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	6978      	ldr	r0, [r7, #20]
 80026a4:	f7ff ff90 	bl	80025c8 <NVIC_EncodePriority>
 80026a8:	4602      	mov	r2, r0
 80026aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff5f 	bl	8002574 <__NVIC_SetPriority>
}
 80026b6:	bf00      	nop
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ff35 	bl	800253c <__NVIC_EnableIRQ>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff ffa2 	bl	800262c <SysTick_Config>
 80026e8:	4603      	mov	r3, r0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e043      	b.n	8002792 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	4b22      	ldr	r3, [pc, #136]	; (800279c <HAL_DMA_Init+0xa8>)
 8002712:	4413      	add	r3, r2
 8002714:	4a22      	ldr	r2, [pc, #136]	; (80027a0 <HAL_DMA_Init+0xac>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	091b      	lsrs	r3, r3, #4
 800271c:	009a      	lsls	r2, r3, #2
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a1f      	ldr	r2, [pc, #124]	; (80027a4 <HAL_DMA_Init+0xb0>)
 8002726:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800273e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002742:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800274c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002758:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002764:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	bffdfff8 	.word	0xbffdfff8
 80027a0:	cccccccd 	.word	0xcccccccd
 80027a4:	40020000 	.word	0x40020000

080027a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_DMA_Start_IT+0x20>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e04b      	b.n	8002860 <HAL_DMA_Start_IT+0xb8>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d13a      	bne.n	8002852 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0201 	bic.w	r2, r2, #1
 80027f8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	68b9      	ldr	r1, [r7, #8]
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 f9f8 	bl	8002bf6 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	2b00      	cmp	r3, #0
 800280c:	d008      	beq.n	8002820 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f042 020e 	orr.w	r2, r2, #14
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	e00f      	b.n	8002840 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0204 	bic.w	r2, r2, #4
 800282e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 020a 	orr.w	r2, r2, #10
 800283e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	e005      	b.n	800285e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800285a:	2302      	movs	r3, #2
 800285c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800285e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d008      	beq.n	8002892 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2204      	movs	r2, #4
 8002884:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e020      	b.n	80028d4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 020e 	bic.w	r2, r2, #14
 80028a0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0201 	bic.w	r2, r2, #1
 80028b0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	2101      	movs	r1, #1
 80028bc:	fa01 f202 	lsl.w	r2, r1, r2
 80028c0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d005      	beq.n	8002904 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2204      	movs	r2, #4
 80028fc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	73fb      	strb	r3, [r7, #15]
 8002902:	e051      	b.n	80029a8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 020e 	bic.w	r2, r2, #14
 8002912:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0201 	bic.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a22      	ldr	r2, [pc, #136]	; (80029b4 <HAL_DMA_Abort_IT+0xd4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d029      	beq.n	8002982 <HAL_DMA_Abort_IT+0xa2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a21      	ldr	r2, [pc, #132]	; (80029b8 <HAL_DMA_Abort_IT+0xd8>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d022      	beq.n	800297e <HAL_DMA_Abort_IT+0x9e>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1f      	ldr	r2, [pc, #124]	; (80029bc <HAL_DMA_Abort_IT+0xdc>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d01a      	beq.n	8002978 <HAL_DMA_Abort_IT+0x98>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1e      	ldr	r2, [pc, #120]	; (80029c0 <HAL_DMA_Abort_IT+0xe0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d012      	beq.n	8002972 <HAL_DMA_Abort_IT+0x92>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1c      	ldr	r2, [pc, #112]	; (80029c4 <HAL_DMA_Abort_IT+0xe4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00a      	beq.n	800296c <HAL_DMA_Abort_IT+0x8c>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1b      	ldr	r2, [pc, #108]	; (80029c8 <HAL_DMA_Abort_IT+0xe8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d102      	bne.n	8002966 <HAL_DMA_Abort_IT+0x86>
 8002960:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002964:	e00e      	b.n	8002984 <HAL_DMA_Abort_IT+0xa4>
 8002966:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800296a:	e00b      	b.n	8002984 <HAL_DMA_Abort_IT+0xa4>
 800296c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002970:	e008      	b.n	8002984 <HAL_DMA_Abort_IT+0xa4>
 8002972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002976:	e005      	b.n	8002984 <HAL_DMA_Abort_IT+0xa4>
 8002978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800297c:	e002      	b.n	8002984 <HAL_DMA_Abort_IT+0xa4>
 800297e:	2310      	movs	r3, #16
 8002980:	e000      	b.n	8002984 <HAL_DMA_Abort_IT+0xa4>
 8002982:	2301      	movs	r3, #1
 8002984:	4a11      	ldr	r2, [pc, #68]	; (80029cc <HAL_DMA_Abort_IT+0xec>)
 8002986:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	4798      	blx	r3
    } 
  }
  return status;
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40020008 	.word	0x40020008
 80029b8:	4002001c 	.word	0x4002001c
 80029bc:	40020030 	.word	0x40020030
 80029c0:	40020044 	.word	0x40020044
 80029c4:	40020058 	.word	0x40020058
 80029c8:	4002006c 	.word	0x4002006c
 80029cc:	40020000 	.word	0x40020000

080029d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	2204      	movs	r2, #4
 80029ee:	409a      	lsls	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d04f      	beq.n	8002a98 <HAL_DMA_IRQHandler+0xc8>
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d04a      	beq.n	8002a98 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d107      	bne.n	8002a20 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0204 	bic.w	r2, r2, #4
 8002a1e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a66      	ldr	r2, [pc, #408]	; (8002bc0 <HAL_DMA_IRQHandler+0x1f0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d029      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xae>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a65      	ldr	r2, [pc, #404]	; (8002bc4 <HAL_DMA_IRQHandler+0x1f4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d022      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xaa>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a63      	ldr	r2, [pc, #396]	; (8002bc8 <HAL_DMA_IRQHandler+0x1f8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d01a      	beq.n	8002a74 <HAL_DMA_IRQHandler+0xa4>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a62      	ldr	r2, [pc, #392]	; (8002bcc <HAL_DMA_IRQHandler+0x1fc>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d012      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x9e>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a60      	ldr	r2, [pc, #384]	; (8002bd0 <HAL_DMA_IRQHandler+0x200>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00a      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x98>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a5f      	ldr	r2, [pc, #380]	; (8002bd4 <HAL_DMA_IRQHandler+0x204>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d102      	bne.n	8002a62 <HAL_DMA_IRQHandler+0x92>
 8002a5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a60:	e00e      	b.n	8002a80 <HAL_DMA_IRQHandler+0xb0>
 8002a62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a66:	e00b      	b.n	8002a80 <HAL_DMA_IRQHandler+0xb0>
 8002a68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a6c:	e008      	b.n	8002a80 <HAL_DMA_IRQHandler+0xb0>
 8002a6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a72:	e005      	b.n	8002a80 <HAL_DMA_IRQHandler+0xb0>
 8002a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a78:	e002      	b.n	8002a80 <HAL_DMA_IRQHandler+0xb0>
 8002a7a:	2340      	movs	r3, #64	; 0x40
 8002a7c:	e000      	b.n	8002a80 <HAL_DMA_IRQHandler+0xb0>
 8002a7e:	2304      	movs	r3, #4
 8002a80:	4a55      	ldr	r2, [pc, #340]	; (8002bd8 <HAL_DMA_IRQHandler+0x208>)
 8002a82:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 8094 	beq.w	8002bb6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002a96:	e08e      	b.n	8002bb6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d056      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x186>
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d051      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10b      	bne.n	8002ad8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 020a 	bic.w	r2, r2, #10
 8002ace:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a38      	ldr	r2, [pc, #224]	; (8002bc0 <HAL_DMA_IRQHandler+0x1f0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d029      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x166>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a37      	ldr	r2, [pc, #220]	; (8002bc4 <HAL_DMA_IRQHandler+0x1f4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d022      	beq.n	8002b32 <HAL_DMA_IRQHandler+0x162>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a35      	ldr	r2, [pc, #212]	; (8002bc8 <HAL_DMA_IRQHandler+0x1f8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d01a      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x15c>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a34      	ldr	r2, [pc, #208]	; (8002bcc <HAL_DMA_IRQHandler+0x1fc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d012      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x156>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a32      	ldr	r2, [pc, #200]	; (8002bd0 <HAL_DMA_IRQHandler+0x200>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00a      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x150>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a31      	ldr	r2, [pc, #196]	; (8002bd4 <HAL_DMA_IRQHandler+0x204>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d102      	bne.n	8002b1a <HAL_DMA_IRQHandler+0x14a>
 8002b14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b18:	e00e      	b.n	8002b38 <HAL_DMA_IRQHandler+0x168>
 8002b1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b1e:	e00b      	b.n	8002b38 <HAL_DMA_IRQHandler+0x168>
 8002b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b24:	e008      	b.n	8002b38 <HAL_DMA_IRQHandler+0x168>
 8002b26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b2a:	e005      	b.n	8002b38 <HAL_DMA_IRQHandler+0x168>
 8002b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b30:	e002      	b.n	8002b38 <HAL_DMA_IRQHandler+0x168>
 8002b32:	2320      	movs	r3, #32
 8002b34:	e000      	b.n	8002b38 <HAL_DMA_IRQHandler+0x168>
 8002b36:	2302      	movs	r3, #2
 8002b38:	4a27      	ldr	r2, [pc, #156]	; (8002bd8 <HAL_DMA_IRQHandler+0x208>)
 8002b3a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d034      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b54:	e02f      	b.n	8002bb6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	2208      	movs	r2, #8
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d028      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x1e8>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d023      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 020e 	bic.w	r2, r2, #14
 8002b7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b88:	2101      	movs	r1, #1
 8002b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d004      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	4798      	blx	r3
    }
  }
  return;
 8002bb6:	bf00      	nop
 8002bb8:	bf00      	nop
}
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40020008 	.word	0x40020008
 8002bc4:	4002001c 	.word	0x4002001c
 8002bc8:	40020030 	.word	0x40020030
 8002bcc:	40020044 	.word	0x40020044
 8002bd0:	40020058 	.word	0x40020058
 8002bd4:	4002006c 	.word	0x4002006c
 8002bd8:	40020000 	.word	0x40020000

08002bdc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bea:	b2db      	uxtb	r3, r3
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b085      	sub	sp, #20
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c12:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b10      	cmp	r3, #16
 8002c22:	d108      	bne.n	8002c36 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c34:	e007      	b.n	8002c46 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	60da      	str	r2, [r3, #12]
}
 8002c46:	bf00      	nop
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b08b      	sub	sp, #44	; 0x2c
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c62:	e169      	b.n	8002f38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c64:	2201      	movs	r2, #1
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	f040 8158 	bne.w	8002f32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4a9a      	ldr	r2, [pc, #616]	; (8002ef0 <HAL_GPIO_Init+0x2a0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d05e      	beq.n	8002d4a <HAL_GPIO_Init+0xfa>
 8002c8c:	4a98      	ldr	r2, [pc, #608]	; (8002ef0 <HAL_GPIO_Init+0x2a0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d875      	bhi.n	8002d7e <HAL_GPIO_Init+0x12e>
 8002c92:	4a98      	ldr	r2, [pc, #608]	; (8002ef4 <HAL_GPIO_Init+0x2a4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d058      	beq.n	8002d4a <HAL_GPIO_Init+0xfa>
 8002c98:	4a96      	ldr	r2, [pc, #600]	; (8002ef4 <HAL_GPIO_Init+0x2a4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d86f      	bhi.n	8002d7e <HAL_GPIO_Init+0x12e>
 8002c9e:	4a96      	ldr	r2, [pc, #600]	; (8002ef8 <HAL_GPIO_Init+0x2a8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d052      	beq.n	8002d4a <HAL_GPIO_Init+0xfa>
 8002ca4:	4a94      	ldr	r2, [pc, #592]	; (8002ef8 <HAL_GPIO_Init+0x2a8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d869      	bhi.n	8002d7e <HAL_GPIO_Init+0x12e>
 8002caa:	4a94      	ldr	r2, [pc, #592]	; (8002efc <HAL_GPIO_Init+0x2ac>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d04c      	beq.n	8002d4a <HAL_GPIO_Init+0xfa>
 8002cb0:	4a92      	ldr	r2, [pc, #584]	; (8002efc <HAL_GPIO_Init+0x2ac>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d863      	bhi.n	8002d7e <HAL_GPIO_Init+0x12e>
 8002cb6:	4a92      	ldr	r2, [pc, #584]	; (8002f00 <HAL_GPIO_Init+0x2b0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d046      	beq.n	8002d4a <HAL_GPIO_Init+0xfa>
 8002cbc:	4a90      	ldr	r2, [pc, #576]	; (8002f00 <HAL_GPIO_Init+0x2b0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d85d      	bhi.n	8002d7e <HAL_GPIO_Init+0x12e>
 8002cc2:	2b12      	cmp	r3, #18
 8002cc4:	d82a      	bhi.n	8002d1c <HAL_GPIO_Init+0xcc>
 8002cc6:	2b12      	cmp	r3, #18
 8002cc8:	d859      	bhi.n	8002d7e <HAL_GPIO_Init+0x12e>
 8002cca:	a201      	add	r2, pc, #4	; (adr r2, 8002cd0 <HAL_GPIO_Init+0x80>)
 8002ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd0:	08002d4b 	.word	0x08002d4b
 8002cd4:	08002d25 	.word	0x08002d25
 8002cd8:	08002d37 	.word	0x08002d37
 8002cdc:	08002d79 	.word	0x08002d79
 8002ce0:	08002d7f 	.word	0x08002d7f
 8002ce4:	08002d7f 	.word	0x08002d7f
 8002ce8:	08002d7f 	.word	0x08002d7f
 8002cec:	08002d7f 	.word	0x08002d7f
 8002cf0:	08002d7f 	.word	0x08002d7f
 8002cf4:	08002d7f 	.word	0x08002d7f
 8002cf8:	08002d7f 	.word	0x08002d7f
 8002cfc:	08002d7f 	.word	0x08002d7f
 8002d00:	08002d7f 	.word	0x08002d7f
 8002d04:	08002d7f 	.word	0x08002d7f
 8002d08:	08002d7f 	.word	0x08002d7f
 8002d0c:	08002d7f 	.word	0x08002d7f
 8002d10:	08002d7f 	.word	0x08002d7f
 8002d14:	08002d2d 	.word	0x08002d2d
 8002d18:	08002d41 	.word	0x08002d41
 8002d1c:	4a79      	ldr	r2, [pc, #484]	; (8002f04 <HAL_GPIO_Init+0x2b4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d013      	beq.n	8002d4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d22:	e02c      	b.n	8002d7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	623b      	str	r3, [r7, #32]
          break;
 8002d2a:	e029      	b.n	8002d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	3304      	adds	r3, #4
 8002d32:	623b      	str	r3, [r7, #32]
          break;
 8002d34:	e024      	b.n	8002d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	3308      	adds	r3, #8
 8002d3c:	623b      	str	r3, [r7, #32]
          break;
 8002d3e:	e01f      	b.n	8002d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	330c      	adds	r3, #12
 8002d46:	623b      	str	r3, [r7, #32]
          break;
 8002d48:	e01a      	b.n	8002d80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d102      	bne.n	8002d58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d52:	2304      	movs	r3, #4
 8002d54:	623b      	str	r3, [r7, #32]
          break;
 8002d56:	e013      	b.n	8002d80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d105      	bne.n	8002d6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d60:	2308      	movs	r3, #8
 8002d62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69fa      	ldr	r2, [r7, #28]
 8002d68:	611a      	str	r2, [r3, #16]
          break;
 8002d6a:	e009      	b.n	8002d80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d6c:	2308      	movs	r3, #8
 8002d6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69fa      	ldr	r2, [r7, #28]
 8002d74:	615a      	str	r2, [r3, #20]
          break;
 8002d76:	e003      	b.n	8002d80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	623b      	str	r3, [r7, #32]
          break;
 8002d7c:	e000      	b.n	8002d80 <HAL_GPIO_Init+0x130>
          break;
 8002d7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2bff      	cmp	r3, #255	; 0xff
 8002d84:	d801      	bhi.n	8002d8a <HAL_GPIO_Init+0x13a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	e001      	b.n	8002d8e <HAL_GPIO_Init+0x13e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	2bff      	cmp	r3, #255	; 0xff
 8002d94:	d802      	bhi.n	8002d9c <HAL_GPIO_Init+0x14c>
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	e002      	b.n	8002da2 <HAL_GPIO_Init+0x152>
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	3b08      	subs	r3, #8
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	210f      	movs	r1, #15
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	fa01 f303 	lsl.w	r3, r1, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	401a      	ands	r2, r3
 8002db4:	6a39      	ldr	r1, [r7, #32]
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 80b1 	beq.w	8002f32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dd0:	4b4d      	ldr	r3, [pc, #308]	; (8002f08 <HAL_GPIO_Init+0x2b8>)
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	4a4c      	ldr	r2, [pc, #304]	; (8002f08 <HAL_GPIO_Init+0x2b8>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	6193      	str	r3, [r2, #24]
 8002ddc:	4b4a      	ldr	r3, [pc, #296]	; (8002f08 <HAL_GPIO_Init+0x2b8>)
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	60bb      	str	r3, [r7, #8]
 8002de6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002de8:	4a48      	ldr	r2, [pc, #288]	; (8002f0c <HAL_GPIO_Init+0x2bc>)
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	089b      	lsrs	r3, r3, #2
 8002dee:	3302      	adds	r3, #2
 8002df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	220f      	movs	r2, #15
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a40      	ldr	r2, [pc, #256]	; (8002f10 <HAL_GPIO_Init+0x2c0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d013      	beq.n	8002e3c <HAL_GPIO_Init+0x1ec>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a3f      	ldr	r2, [pc, #252]	; (8002f14 <HAL_GPIO_Init+0x2c4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d00d      	beq.n	8002e38 <HAL_GPIO_Init+0x1e8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a3e      	ldr	r2, [pc, #248]	; (8002f18 <HAL_GPIO_Init+0x2c8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d007      	beq.n	8002e34 <HAL_GPIO_Init+0x1e4>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a3d      	ldr	r2, [pc, #244]	; (8002f1c <HAL_GPIO_Init+0x2cc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d101      	bne.n	8002e30 <HAL_GPIO_Init+0x1e0>
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e006      	b.n	8002e3e <HAL_GPIO_Init+0x1ee>
 8002e30:	2304      	movs	r3, #4
 8002e32:	e004      	b.n	8002e3e <HAL_GPIO_Init+0x1ee>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e002      	b.n	8002e3e <HAL_GPIO_Init+0x1ee>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <HAL_GPIO_Init+0x1ee>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e40:	f002 0203 	and.w	r2, r2, #3
 8002e44:	0092      	lsls	r2, r2, #2
 8002e46:	4093      	lsls	r3, r2
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e4e:	492f      	ldr	r1, [pc, #188]	; (8002f0c <HAL_GPIO_Init+0x2bc>)
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	089b      	lsrs	r3, r3, #2
 8002e54:	3302      	adds	r3, #2
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d006      	beq.n	8002e76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e68:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	492c      	ldr	r1, [pc, #176]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	608b      	str	r3, [r1, #8]
 8002e74:	e006      	b.n	8002e84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e76:	4b2a      	ldr	r3, [pc, #168]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	4928      	ldr	r1, [pc, #160]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d006      	beq.n	8002e9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e90:	4b23      	ldr	r3, [pc, #140]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	4922      	ldr	r1, [pc, #136]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60cb      	str	r3, [r1, #12]
 8002e9c:	e006      	b.n	8002eac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e9e:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	491e      	ldr	r1, [pc, #120]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d006      	beq.n	8002ec6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002eb8:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	4918      	ldr	r1, [pc, #96]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	604b      	str	r3, [r1, #4]
 8002ec4:	e006      	b.n	8002ed4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ec6:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	4914      	ldr	r1, [pc, #80]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d021      	beq.n	8002f24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	490e      	ldr	r1, [pc, #56]	; (8002f20 <HAL_GPIO_Init+0x2d0>)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	600b      	str	r3, [r1, #0]
 8002eec:	e021      	b.n	8002f32 <HAL_GPIO_Init+0x2e2>
 8002eee:	bf00      	nop
 8002ef0:	10320000 	.word	0x10320000
 8002ef4:	10310000 	.word	0x10310000
 8002ef8:	10220000 	.word	0x10220000
 8002efc:	10210000 	.word	0x10210000
 8002f00:	10120000 	.word	0x10120000
 8002f04:	10110000 	.word	0x10110000
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40010000 	.word	0x40010000
 8002f10:	40010800 	.word	0x40010800
 8002f14:	40010c00 	.word	0x40010c00
 8002f18:	40011000 	.word	0x40011000
 8002f1c:	40011400 	.word	0x40011400
 8002f20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_GPIO_Init+0x304>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	4909      	ldr	r1, [pc, #36]	; (8002f54 <HAL_GPIO_Init+0x304>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	3301      	adds	r3, #1
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f47f ae8e 	bne.w	8002c64 <HAL_GPIO_Init+0x14>
  }
}
 8002f48:	bf00      	nop
 8002f4a:	bf00      	nop
 8002f4c:	372c      	adds	r7, #44	; 0x2c
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	40010400 	.word	0x40010400

08002f58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	887b      	ldrh	r3, [r7, #2]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f70:	2301      	movs	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
 8002f74:	e001      	b.n	8002f7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f76:	2300      	movs	r3, #0
 8002f78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr

08002f86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	807b      	strh	r3, [r7, #2]
 8002f92:	4613      	mov	r3, r2
 8002f94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f96:	787b      	ldrb	r3, [r7, #1]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f9c:	887a      	ldrh	r2, [r7, #2]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fa2:	e003      	b.n	8002fac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fa4:	887b      	ldrh	r3, [r7, #2]
 8002fa6:	041a      	lsls	r2, r3, #16
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	611a      	str	r2, [r3, #16]
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fc2:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d006      	beq.n	8002fdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fce:	4a05      	ldr	r2, [pc, #20]	; (8002fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fd0:	88fb      	ldrh	r3, [r7, #6]
 8002fd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fd4:	88fb      	ldrh	r3, [r7, #6]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 f806 	bl	8002fe8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40010400 	.word	0x40010400

08002fe8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr

08002ffc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e12b      	b.n	8003266 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fe fcf4 	bl	8001a10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2224      	movs	r2, #36	; 0x24
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800304e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800305e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003060:	f002 f9d4 	bl	800540c <HAL_RCC_GetPCLK1Freq>
 8003064:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	4a81      	ldr	r2, [pc, #516]	; (8003270 <HAL_I2C_Init+0x274>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d807      	bhi.n	8003080 <HAL_I2C_Init+0x84>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4a80      	ldr	r2, [pc, #512]	; (8003274 <HAL_I2C_Init+0x278>)
 8003074:	4293      	cmp	r3, r2
 8003076:	bf94      	ite	ls
 8003078:	2301      	movls	r3, #1
 800307a:	2300      	movhi	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	e006      	b.n	800308e <HAL_I2C_Init+0x92>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4a7d      	ldr	r2, [pc, #500]	; (8003278 <HAL_I2C_Init+0x27c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	bf94      	ite	ls
 8003088:	2301      	movls	r3, #1
 800308a:	2300      	movhi	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e0e7      	b.n	8003266 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4a78      	ldr	r2, [pc, #480]	; (800327c <HAL_I2C_Init+0x280>)
 800309a:	fba2 2303 	umull	r2, r3, r2, r3
 800309e:	0c9b      	lsrs	r3, r3, #18
 80030a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a6a      	ldr	r2, [pc, #424]	; (8003270 <HAL_I2C_Init+0x274>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d802      	bhi.n	80030d0 <HAL_I2C_Init+0xd4>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	3301      	adds	r3, #1
 80030ce:	e009      	b.n	80030e4 <HAL_I2C_Init+0xe8>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	4a69      	ldr	r2, [pc, #420]	; (8003280 <HAL_I2C_Init+0x284>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	099b      	lsrs	r3, r3, #6
 80030e2:	3301      	adds	r3, #1
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6812      	ldr	r2, [r2, #0]
 80030e8:	430b      	orrs	r3, r1
 80030ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	495c      	ldr	r1, [pc, #368]	; (8003270 <HAL_I2C_Init+0x274>)
 8003100:	428b      	cmp	r3, r1
 8003102:	d819      	bhi.n	8003138 <HAL_I2C_Init+0x13c>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1e59      	subs	r1, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003112:	1c59      	adds	r1, r3, #1
 8003114:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003118:	400b      	ands	r3, r1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_I2C_Init+0x138>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1e59      	subs	r1, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	fbb1 f3f3 	udiv	r3, r1, r3
 800312c:	3301      	adds	r3, #1
 800312e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003132:	e051      	b.n	80031d8 <HAL_I2C_Init+0x1dc>
 8003134:	2304      	movs	r3, #4
 8003136:	e04f      	b.n	80031d8 <HAL_I2C_Init+0x1dc>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d111      	bne.n	8003164 <HAL_I2C_Init+0x168>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	1e58      	subs	r0, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	440b      	add	r3, r1
 800314e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003152:	3301      	adds	r3, #1
 8003154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf0c      	ite	eq
 800315c:	2301      	moveq	r3, #1
 800315e:	2300      	movne	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	e012      	b.n	800318a <HAL_I2C_Init+0x18e>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1e58      	subs	r0, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	0099      	lsls	r1, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	fbb0 f3f3 	udiv	r3, r0, r3
 800317a:	3301      	adds	r3, #1
 800317c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003180:	2b00      	cmp	r3, #0
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_Init+0x196>
 800318e:	2301      	movs	r3, #1
 8003190:	e022      	b.n	80031d8 <HAL_I2C_Init+0x1dc>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10e      	bne.n	80031b8 <HAL_I2C_Init+0x1bc>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1e58      	subs	r0, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6859      	ldr	r1, [r3, #4]
 80031a2:	460b      	mov	r3, r1
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	440b      	add	r3, r1
 80031a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ac:	3301      	adds	r3, #1
 80031ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b6:	e00f      	b.n	80031d8 <HAL_I2C_Init+0x1dc>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1e58      	subs	r0, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6859      	ldr	r1, [r3, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	0099      	lsls	r1, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ce:	3301      	adds	r3, #1
 80031d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	6809      	ldr	r1, [r1, #0]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69da      	ldr	r2, [r3, #28]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003206:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6911      	ldr	r1, [r2, #16]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	68d2      	ldr	r2, [r2, #12]
 8003212:	4311      	orrs	r1, r2
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	430b      	orrs	r3, r1
 800321a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	000186a0 	.word	0x000186a0
 8003274:	001e847f 	.word	0x001e847f
 8003278:	003d08ff 	.word	0x003d08ff
 800327c:	431bde83 	.word	0x431bde83
 8003280:	10624dd3 	.word	0x10624dd3

08003284 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003296:	2b80      	cmp	r3, #128	; 0x80
 8003298:	d103      	bne.n	80032a2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2200      	movs	r2, #0
 80032a0:	611a      	str	r2, [r3, #16]
  }
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032cc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	2b10      	cmp	r3, #16
 80032da:	d003      	beq.n	80032e4 <HAL_I2C_EV_IRQHandler+0x38>
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	f040 80c1 	bne.w	8003466 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10d      	bne.n	800331a <HAL_I2C_EV_IRQHandler+0x6e>
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003304:	d003      	beq.n	800330e <HAL_I2C_EV_IRQHandler+0x62>
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800330c:	d101      	bne.n	8003312 <HAL_I2C_EV_IRQHandler+0x66>
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <HAL_I2C_EV_IRQHandler+0x68>
 8003312:	2300      	movs	r3, #0
 8003314:	2b01      	cmp	r3, #1
 8003316:	f000 8132 	beq.w	800357e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00c      	beq.n	800333e <HAL_I2C_EV_IRQHandler+0x92>
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	0a5b      	lsrs	r3, r3, #9
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d006      	beq.n	800333e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f001 fc87 	bl	8004c44 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fd85 	bl	8003e46 <I2C_Master_SB>
 800333c:	e092      	b.n	8003464 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	08db      	lsrs	r3, r3, #3
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <HAL_I2C_EV_IRQHandler+0xb2>
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	0a5b      	lsrs	r3, r3, #9
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fdfa 	bl	8003f50 <I2C_Master_ADD10>
 800335c:	e082      	b.n	8003464 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	085b      	lsrs	r3, r3, #1
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <HAL_I2C_EV_IRQHandler+0xd2>
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	0a5b      	lsrs	r3, r3, #9
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fe13 	bl	8003fa2 <I2C_Master_ADDR>
 800337c:	e072      	b.n	8003464 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	089b      	lsrs	r3, r3, #2
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d03b      	beq.n	8003402 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003398:	f000 80f3 	beq.w	8003582 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	09db      	lsrs	r3, r3, #7
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00f      	beq.n	80033c8 <HAL_I2C_EV_IRQHandler+0x11c>
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	0a9b      	lsrs	r3, r3, #10
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d009      	beq.n	80033c8 <HAL_I2C_EV_IRQHandler+0x11c>
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	089b      	lsrs	r3, r3, #2
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d103      	bne.n	80033c8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f9f1 	bl	80037a8 <I2C_MasterTransmit_TXE>
 80033c6:	e04d      	b.n	8003464 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	089b      	lsrs	r3, r3, #2
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80d6 	beq.w	8003582 <HAL_I2C_EV_IRQHandler+0x2d6>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	0a5b      	lsrs	r3, r3, #9
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 80cf 	beq.w	8003582 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80033e4:	7bbb      	ldrb	r3, [r7, #14]
 80033e6:	2b21      	cmp	r3, #33	; 0x21
 80033e8:	d103      	bne.n	80033f2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fa78 	bl	80038e0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033f0:	e0c7      	b.n	8003582 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	2b40      	cmp	r3, #64	; 0x40
 80033f6:	f040 80c4 	bne.w	8003582 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fae6 	bl	80039cc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003400:	e0bf      	b.n	8003582 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800340c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003410:	f000 80b7 	beq.w	8003582 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	099b      	lsrs	r3, r3, #6
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00f      	beq.n	8003440 <HAL_I2C_EV_IRQHandler+0x194>
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	0a9b      	lsrs	r3, r3, #10
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d009      	beq.n	8003440 <HAL_I2C_EV_IRQHandler+0x194>
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	089b      	lsrs	r3, r3, #2
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d103      	bne.n	8003440 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fb5f 	bl	8003afc <I2C_MasterReceive_RXNE>
 800343e:	e011      	b.n	8003464 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	089b      	lsrs	r3, r3, #2
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 809a 	beq.w	8003582 <HAL_I2C_EV_IRQHandler+0x2d6>
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	0a5b      	lsrs	r3, r3, #9
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 8093 	beq.w	8003582 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 fc08 	bl	8003c72 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003462:	e08e      	b.n	8003582 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003464:	e08d      	b.n	8003582 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	d004      	beq.n	8003478 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	e007      	b.n	8003488 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	085b      	lsrs	r3, r3, #1
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d012      	beq.n	80034ba <HAL_I2C_EV_IRQHandler+0x20e>
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	0a5b      	lsrs	r3, r3, #9
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00c      	beq.n	80034ba <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80034b0:	69b9      	ldr	r1, [r7, #24]
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 ffcc 	bl	8004450 <I2C_Slave_ADDR>
 80034b8:	e066      	b.n	8003588 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <HAL_I2C_EV_IRQHandler+0x22e>
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	0a5b      	lsrs	r3, r3, #9
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f001 f806 	bl	80044e4 <I2C_Slave_STOPF>
 80034d8:	e056      	b.n	8003588 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034da:	7bbb      	ldrb	r3, [r7, #14]
 80034dc:	2b21      	cmp	r3, #33	; 0x21
 80034de:	d002      	beq.n	80034e6 <HAL_I2C_EV_IRQHandler+0x23a>
 80034e0:	7bbb      	ldrb	r3, [r7, #14]
 80034e2:	2b29      	cmp	r3, #41	; 0x29
 80034e4:	d125      	bne.n	8003532 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	09db      	lsrs	r3, r3, #7
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00f      	beq.n	8003512 <HAL_I2C_EV_IRQHandler+0x266>
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	0a9b      	lsrs	r3, r3, #10
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d009      	beq.n	8003512 <HAL_I2C_EV_IRQHandler+0x266>
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	089b      	lsrs	r3, r3, #2
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d103      	bne.n	8003512 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fee4 	bl	80042d8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003510:	e039      	b.n	8003586 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	089b      	lsrs	r3, r3, #2
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d033      	beq.n	8003586 <HAL_I2C_EV_IRQHandler+0x2da>
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	0a5b      	lsrs	r3, r3, #9
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d02d      	beq.n	8003586 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 ff11 	bl	8004352 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003530:	e029      	b.n	8003586 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	099b      	lsrs	r3, r3, #6
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00f      	beq.n	800355e <HAL_I2C_EV_IRQHandler+0x2b2>
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	0a9b      	lsrs	r3, r3, #10
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d009      	beq.n	800355e <HAL_I2C_EV_IRQHandler+0x2b2>
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	089b      	lsrs	r3, r3, #2
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d103      	bne.n	800355e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 ff1b 	bl	8004392 <I2C_SlaveReceive_RXNE>
 800355c:	e014      	b.n	8003588 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	089b      	lsrs	r3, r3, #2
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00e      	beq.n	8003588 <HAL_I2C_EV_IRQHandler+0x2dc>
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	0a5b      	lsrs	r3, r3, #9
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d008      	beq.n	8003588 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 ff49 	bl	800440e <I2C_SlaveReceive_BTF>
 800357c:	e004      	b.n	8003588 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800357e:	bf00      	nop
 8003580:	e002      	b.n	8003588 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003582:	bf00      	nop
 8003584:	e000      	b.n	8003588 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003586:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003588:	3720      	adds	r7, #32
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b08a      	sub	sp, #40	; 0x28
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80035a6:	2300      	movs	r3, #0
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035b0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	0a1b      	lsrs	r3, r3, #8
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d016      	beq.n	80035ec <HAL_I2C_ER_IRQHandler+0x5e>
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	0a1b      	lsrs	r3, r3, #8
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d010      	beq.n	80035ec <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035da:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ea:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	0a5b      	lsrs	r3, r3, #9
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00e      	beq.n	8003616 <HAL_I2C_ER_IRQHandler+0x88>
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	0a1b      	lsrs	r3, r3, #8
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	f043 0302 	orr.w	r3, r3, #2
 800360a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003614:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	0a9b      	lsrs	r3, r3, #10
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d03f      	beq.n	80036a2 <HAL_I2C_ER_IRQHandler+0x114>
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	0a1b      	lsrs	r3, r3, #8
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d039      	beq.n	80036a2 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800362e:	7efb      	ldrb	r3, [r7, #27]
 8003630:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003636:	b29b      	uxth	r3, r3
 8003638:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003640:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003648:	7ebb      	ldrb	r3, [r7, #26]
 800364a:	2b20      	cmp	r3, #32
 800364c:	d112      	bne.n	8003674 <HAL_I2C_ER_IRQHandler+0xe6>
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10f      	bne.n	8003674 <HAL_I2C_ER_IRQHandler+0xe6>
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	2b21      	cmp	r3, #33	; 0x21
 8003658:	d008      	beq.n	800366c <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800365a:	7cfb      	ldrb	r3, [r7, #19]
 800365c:	2b29      	cmp	r3, #41	; 0x29
 800365e:	d005      	beq.n	800366c <HAL_I2C_ER_IRQHandler+0xde>
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	2b28      	cmp	r3, #40	; 0x28
 8003664:	d106      	bne.n	8003674 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2b21      	cmp	r3, #33	; 0x21
 800366a:	d103      	bne.n	8003674 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f001 f869 	bl	8004744 <I2C_Slave_AF>
 8003672:	e016      	b.n	80036a2 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800367c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	f043 0304 	orr.w	r3, r3, #4
 8003684:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003686:	7efb      	ldrb	r3, [r7, #27]
 8003688:	2b10      	cmp	r3, #16
 800368a:	d002      	beq.n	8003692 <HAL_I2C_ER_IRQHandler+0x104>
 800368c:	7efb      	ldrb	r3, [r7, #27]
 800368e:	2b40      	cmp	r3, #64	; 0x40
 8003690:	d107      	bne.n	80036a2 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	0adb      	lsrs	r3, r3, #11
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00e      	beq.n	80036cc <HAL_I2C_ER_IRQHandler+0x13e>
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	0a1b      	lsrs	r3, r3, #8
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d008      	beq.n	80036cc <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	f043 0308 	orr.w	r3, r3, #8
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80036ca:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d008      	beq.n	80036e4 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f001 f8a4 	bl	800482c <I2C_ITError>
  }
}
 80036e4:	bf00      	nop
 80036e6:	3728      	adds	r7, #40	; 0x28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr

080036fe <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr

08003722 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr

08003734 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	70fb      	strb	r3, [r7, #3]
 8003740:	4613      	mov	r3, r2
 8003742:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr

0800374e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr

08003760 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr

08003772 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr

080037a8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037be:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d150      	bne.n	8003870 <I2C_MasterTransmit_TXE+0xc8>
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	2b21      	cmp	r3, #33	; 0x21
 80037d2:	d14d      	bne.n	8003870 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d01d      	beq.n	8003816 <I2C_MasterTransmit_TXE+0x6e>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b20      	cmp	r3, #32
 80037de:	d01a      	beq.n	8003816 <I2C_MasterTransmit_TXE+0x6e>
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037e6:	d016      	beq.n	8003816 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037f6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2211      	movs	r2, #17
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff ff6c 	bl	80036ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003814:	e060      	b.n	80038d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003824:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003834:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b40      	cmp	r3, #64	; 0x40
 800384e:	d107      	bne.n	8003860 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff ff81 	bl	8003760 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800385e:	e03b      	b.n	80038d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff ff3f 	bl	80036ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800386e:	e033      	b.n	80038d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	2b21      	cmp	r3, #33	; 0x21
 8003874:	d005      	beq.n	8003882 <I2C_MasterTransmit_TXE+0xda>
 8003876:	7bbb      	ldrb	r3, [r7, #14]
 8003878:	2b40      	cmp	r3, #64	; 0x40
 800387a:	d12d      	bne.n	80038d8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	2b22      	cmp	r3, #34	; 0x22
 8003880:	d12a      	bne.n	80038d8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d108      	bne.n	800389e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800389a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800389c:	e01c      	b.n	80038d8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b40      	cmp	r3, #64	; 0x40
 80038a8:	d103      	bne.n	80038b2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f88e 	bl	80039cc <I2C_MemoryTransmit_TXE_BTF>
}
 80038b0:	e012      	b.n	80038d8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	781a      	ldrb	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038d6:	e7ff      	b.n	80038d8 <I2C_MasterTransmit_TXE+0x130>
 80038d8:	bf00      	nop
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b21      	cmp	r3, #33	; 0x21
 80038f8:	d164      	bne.n	80039c4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d012      	beq.n	800392a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	781a      	ldrb	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003928:	e04c      	b.n	80039c4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b08      	cmp	r3, #8
 800392e:	d01d      	beq.n	800396c <I2C_MasterTransmit_BTF+0x8c>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2b20      	cmp	r3, #32
 8003934:	d01a      	beq.n	800396c <I2C_MasterTransmit_BTF+0x8c>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800393c:	d016      	beq.n	800396c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800394c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2211      	movs	r2, #17
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff fec1 	bl	80036ec <HAL_I2C_MasterTxCpltCallback>
}
 800396a:	e02b      	b.n	80039c4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800397a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	d107      	bne.n	80039b6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7ff fed6 	bl	8003760 <HAL_I2C_MemTxCpltCallback>
}
 80039b4:	e006      	b.n	80039c4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff fe94 	bl	80036ec <HAL_I2C_MasterTxCpltCallback>
}
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d11d      	bne.n	8003a20 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d10b      	bne.n	8003a04 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fc:	1c9a      	adds	r2, r3, #2
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003a02:	e077      	b.n	8003af4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	121b      	asrs	r3, r3, #8
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a1e:	e069      	b.n	8003af4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d10b      	bne.n	8003a40 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a3e:	e059      	b.n	8003af4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d152      	bne.n	8003aee <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	2b22      	cmp	r3, #34	; 0x22
 8003a4c:	d10d      	bne.n	8003a6a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a5c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a68:	e044      	b.n	8003af4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d015      	beq.n	8003aa0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	2b21      	cmp	r3, #33	; 0x21
 8003a78:	d112      	bne.n	8003aa0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	781a      	ldrb	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a9e:	e029      	b.n	8003af4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d124      	bne.n	8003af4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	2b21      	cmp	r3, #33	; 0x21
 8003aae:	d121      	bne.n	8003af4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003abe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ace:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff fe3a 	bl	8003760 <HAL_I2C_MemTxCpltCallback>
}
 8003aec:	e002      	b.n	8003af4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff fbc8 	bl	8003284 <I2C_Flush_DR>
}
 8003af4:	bf00      	nop
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b22      	cmp	r3, #34	; 0x22
 8003b0e:	f040 80ac 	bne.w	8003c6a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d921      	bls.n	8003b64 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691a      	ldr	r2, [r3, #16]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	f040 808c 	bne.w	8003c6a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b60:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003b62:	e082      	b.n	8003c6a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d075      	beq.n	8003c58 <I2C_MasterReceive_RXNE+0x15c>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d002      	beq.n	8003b78 <I2C_MasterReceive_RXNE+0x7c>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d16f      	bne.n	8003c58 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f001 f831 	bl	8004be0 <I2C_WaitOnSTOPRequestThroughIT>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d142      	bne.n	8003c0a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b92:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ba2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b40      	cmp	r3, #64	; 0x40
 8003bdc:	d10a      	bne.n	8003bf4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff fdc0 	bl	8003772 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bf2:	e03a      	b.n	8003c6a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2212      	movs	r2, #18
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff fd7b 	bl	80036fe <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c08:	e02f      	b.n	8003c6a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c18:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7ff fd97 	bl	8003784 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c56:	e008      	b.n	8003c6a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c66:	605a      	str	r2, [r3, #4]
}
 8003c68:	e7ff      	b.n	8003c6a <I2C_MasterReceive_RXNE+0x16e>
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d11b      	bne.n	8003cc2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c98:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003cc0:	e0bd      	b.n	8003e3e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d129      	bne.n	8003d20 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cda:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d00a      	beq.n	8003cf8 <I2C_MasterReceive_BTF+0x86>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d007      	beq.n	8003cf8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691a      	ldr	r2, [r3, #16]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d1e:	e08e      	b.n	8003e3e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d176      	bne.n	8003e18 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d002      	beq.n	8003d36 <I2C_MasterReceive_BTF+0xc4>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b10      	cmp	r3, #16
 8003d34:	d108      	bne.n	8003d48 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	e019      	b.n	8003d7c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d002      	beq.n	8003d54 <I2C_MasterReceive_BTF+0xe2>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d108      	bne.n	8003d66 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	e00a      	b.n	8003d7c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d007      	beq.n	8003d7c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003dd6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b40      	cmp	r3, #64	; 0x40
 8003dea:	d10a      	bne.n	8003e02 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff fcb9 	bl	8003772 <HAL_I2C_MemRxCpltCallback>
}
 8003e00:	e01d      	b.n	8003e3e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2212      	movs	r2, #18
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff fc74 	bl	80036fe <HAL_I2C_MasterRxCpltCallback>
}
 8003e16:	e012      	b.n	8003e3e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691a      	ldr	r2, [r3, #16]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b40      	cmp	r3, #64	; 0x40
 8003e58:	d117      	bne.n	8003e8a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d109      	bne.n	8003e76 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e72:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003e74:	e067      	b.n	8003f46 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	611a      	str	r2, [r3, #16]
}
 8003e88:	e05d      	b.n	8003f46 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e92:	d133      	bne.n	8003efc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b21      	cmp	r3, #33	; 0x21
 8003e9e:	d109      	bne.n	8003eb4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003eb0:	611a      	str	r2, [r3, #16]
 8003eb2:	e008      	b.n	8003ec6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d004      	beq.n	8003ed8 <I2C_Master_SB+0x92>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d108      	bne.n	8003eea <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d032      	beq.n	8003f46 <I2C_Master_SB+0x100>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d02d      	beq.n	8003f46 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ef8:	605a      	str	r2, [r3, #4]
}
 8003efa:	e024      	b.n	8003f46 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10e      	bne.n	8003f22 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	11db      	asrs	r3, r3, #7
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	f003 0306 	and.w	r3, r3, #6
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f063 030f 	orn	r3, r3, #15
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	611a      	str	r2, [r3, #16]
}
 8003f20:	e011      	b.n	8003f46 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d10d      	bne.n	8003f46 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	11db      	asrs	r3, r3, #7
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f003 0306 	and.w	r3, r3, #6
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	f063 030e 	orn	r3, r3, #14
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	611a      	str	r2, [r3, #16]
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr

08003f50 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d004      	beq.n	8003f76 <I2C_Master_ADD10+0x26>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d108      	bne.n	8003f88 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00c      	beq.n	8003f98 <I2C_Master_ADD10+0x48>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d007      	beq.n	8003f98 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f96:	605a      	str	r2, [r3, #4]
  }
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr

08003fa2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b091      	sub	sp, #68	; 0x44
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b22      	cmp	r3, #34	; 0x22
 8003fca:	f040 8174 	bne.w	80042b6 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10f      	bne.n	8003ff6 <I2C_Master_ADDR+0x54>
 8003fd6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003fda:	2b40      	cmp	r3, #64	; 0x40
 8003fdc:	d10b      	bne.n	8003ff6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fde:	2300      	movs	r3, #0
 8003fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	633b      	str	r3, [r7, #48]	; 0x30
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	e16b      	b.n	80042ce <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d11d      	bne.n	800403a <I2C_Master_ADDR+0x98>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004006:	d118      	bne.n	800403a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004008:	2300      	movs	r3, #0
 800400a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800402c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	651a      	str	r2, [r3, #80]	; 0x50
 8004038:	e149      	b.n	80042ce <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403e:	b29b      	uxth	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d113      	bne.n	800406c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004044:	2300      	movs	r3, #0
 8004046:	62bb      	str	r3, [r7, #40]	; 0x28
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	62bb      	str	r3, [r7, #40]	; 0x28
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	e120      	b.n	80042ae <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b01      	cmp	r3, #1
 8004074:	f040 808a 	bne.w	800418c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800407e:	d137      	bne.n	80040f0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800409a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800409e:	d113      	bne.n	80040c8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ae:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b0:	2300      	movs	r3, #0
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	e0f2      	b.n	80042ae <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c8:	2300      	movs	r3, #0
 80040ca:	623b      	str	r3, [r7, #32]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	623b      	str	r3, [r7, #32]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	623b      	str	r3, [r7, #32]
 80040dc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	e0de      	b.n	80042ae <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80040f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d02e      	beq.n	8004154 <I2C_Master_ADDR+0x1b2>
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	d02b      	beq.n	8004154 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80040fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040fe:	2b12      	cmp	r3, #18
 8004100:	d102      	bne.n	8004108 <I2C_Master_ADDR+0x166>
 8004102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004104:	2b01      	cmp	r3, #1
 8004106:	d125      	bne.n	8004154 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410a:	2b04      	cmp	r3, #4
 800410c:	d00e      	beq.n	800412c <I2C_Master_ADDR+0x18a>
 800410e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004110:	2b02      	cmp	r3, #2
 8004112:	d00b      	beq.n	800412c <I2C_Master_ADDR+0x18a>
 8004114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004116:	2b10      	cmp	r3, #16
 8004118:	d008      	beq.n	800412c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	e007      	b.n	800413c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800413a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800413c:	2300      	movs	r3, #0
 800413e:	61fb      	str	r3, [r7, #28]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	61fb      	str	r3, [r7, #28]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	61fb      	str	r3, [r7, #28]
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	e0ac      	b.n	80042ae <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004162:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004164:	2300      	movs	r3, #0
 8004166:	61bb      	str	r3, [r7, #24]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	61bb      	str	r3, [r7, #24]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	61bb      	str	r3, [r7, #24]
 8004178:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	e090      	b.n	80042ae <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d158      	bne.n	8004248 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004198:	2b04      	cmp	r3, #4
 800419a:	d021      	beq.n	80041e0 <I2C_Master_ADDR+0x23e>
 800419c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d01e      	beq.n	80041e0 <I2C_Master_ADDR+0x23e>
 80041a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a4:	2b10      	cmp	r3, #16
 80041a6:	d01b      	beq.n	80041e0 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041b6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b8:	2300      	movs	r3, #0
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	e012      	b.n	8004206 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041ee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f0:	2300      	movs	r3, #0
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004214:	d14b      	bne.n	80042ae <I2C_Master_ADDR+0x30c>
 8004216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004218:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800421c:	d00b      	beq.n	8004236 <I2C_Master_ADDR+0x294>
 800421e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004220:	2b01      	cmp	r3, #1
 8004222:	d008      	beq.n	8004236 <I2C_Master_ADDR+0x294>
 8004224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004226:	2b08      	cmp	r3, #8
 8004228:	d005      	beq.n	8004236 <I2C_Master_ADDR+0x294>
 800422a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422c:	2b10      	cmp	r3, #16
 800422e:	d002      	beq.n	8004236 <I2C_Master_ADDR+0x294>
 8004230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004232:	2b20      	cmp	r3, #32
 8004234:	d13b      	bne.n	80042ae <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004244:	605a      	str	r2, [r3, #4]
 8004246:	e032      	b.n	80042ae <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004256:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004266:	d117      	bne.n	8004298 <I2C_Master_ADDR+0x2f6>
 8004268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800426e:	d00b      	beq.n	8004288 <I2C_Master_ADDR+0x2e6>
 8004270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004272:	2b01      	cmp	r3, #1
 8004274:	d008      	beq.n	8004288 <I2C_Master_ADDR+0x2e6>
 8004276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004278:	2b08      	cmp	r3, #8
 800427a:	d005      	beq.n	8004288 <I2C_Master_ADDR+0x2e6>
 800427c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427e:	2b10      	cmp	r3, #16
 8004280:	d002      	beq.n	8004288 <I2C_Master_ADDR+0x2e6>
 8004282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004284:	2b20      	cmp	r3, #32
 8004286:	d107      	bne.n	8004298 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004296:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004298:	2300      	movs	r3, #0
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80042b4:	e00b      	b.n	80042ce <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b6:	2300      	movs	r3, #0
 80042b8:	60bb      	str	r3, [r7, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	60bb      	str	r3, [r7, #8]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	68bb      	ldr	r3, [r7, #8]
}
 80042cc:	e7ff      	b.n	80042ce <I2C_Master_ADDR+0x32c>
 80042ce:	bf00      	nop
 80042d0:	3744      	adds	r7, #68	; 0x44
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc80      	pop	{r7}
 80042d6:	4770      	bx	lr

080042d8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d02b      	beq.n	800434a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	781a      	ldrb	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430c:	b29b      	uxth	r3, r3
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d114      	bne.n	800434a <I2C_SlaveTransmit_TXE+0x72>
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	2b29      	cmp	r3, #41	; 0x29
 8004324:	d111      	bne.n	800434a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004334:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2221      	movs	r2, #33	; 0x21
 800433a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2228      	movs	r2, #40	; 0x28
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7ff f9e3 	bl	8003710 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d011      	beq.n	8004388 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	781a      	ldrb	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr

08004392 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d02c      	beq.n	8004406 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d114      	bne.n	8004406 <I2C_SlaveReceive_RXNE+0x74>
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	2b2a      	cmp	r3, #42	; 0x2a
 80043e0:	d111      	bne.n	8004406 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2222      	movs	r2, #34	; 0x22
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2228      	movs	r2, #40	; 0x28
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff f98e 	bl	8003722 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004406:	bf00      	nop
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d012      	beq.n	8004446 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691a      	ldr	r2, [r3, #16]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443c:	b29b      	uxth	r3, r3
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr

08004450 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800445a:	2300      	movs	r3, #0
 800445c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004464:	b2db      	uxtb	r3, r3
 8004466:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800446a:	2b28      	cmp	r3, #40	; 0x28
 800446c:	d127      	bne.n	80044be <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800447c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	089b      	lsrs	r3, r3, #2
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800448a:	2301      	movs	r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	09db      	lsrs	r3, r3, #7
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d103      	bne.n	80044a2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	81bb      	strh	r3, [r7, #12]
 80044a0:	e002      	b.n	80044a8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80044b0:	89ba      	ldrh	r2, [r7, #12]
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	4619      	mov	r1, r3
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff f93c 	bl	8003734 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80044bc:	e00e      	b.n	80044dc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044be:	2300      	movs	r3, #0
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004502:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004504:	2300      	movs	r3, #0
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004530:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800453c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004540:	d172      	bne.n	8004628 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	2b22      	cmp	r3, #34	; 0x22
 8004546:	d002      	beq.n	800454e <I2C_Slave_STOPF+0x6a>
 8004548:	7bfb      	ldrb	r3, [r7, #15]
 800454a:	2b2a      	cmp	r3, #42	; 0x2a
 800454c:	d135      	bne.n	80045ba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	b29a      	uxth	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d005      	beq.n	8004572 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	f043 0204 	orr.w	r2, r3, #4
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004580:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe fb28 	bl	8002bdc <HAL_DMA_GetState>
 800458c:	4603      	mov	r3, r0
 800458e:	2b01      	cmp	r3, #1
 8004590:	d049      	beq.n	8004626 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004596:	4a69      	ldr	r2, [pc, #420]	; (800473c <I2C_Slave_STOPF+0x258>)
 8004598:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fe f99e 	bl	80028e0 <HAL_DMA_Abort_IT>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d03d      	beq.n	8004626 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045b4:	4610      	mov	r0, r2
 80045b6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045b8:	e035      	b.n	8004626 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f043 0204 	orr.w	r2, r3, #4
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fe faf2 	bl	8002bdc <HAL_DMA_GetState>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d014      	beq.n	8004628 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004602:	4a4e      	ldr	r2, [pc, #312]	; (800473c <I2C_Slave_STOPF+0x258>)
 8004604:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460a:	4618      	mov	r0, r3
 800460c:	f7fe f968 	bl	80028e0 <HAL_DMA_Abort_IT>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d008      	beq.n	8004628 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004620:	4610      	mov	r0, r2
 8004622:	4798      	blx	r3
 8004624:	e000      	b.n	8004628 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004626:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d03e      	beq.n	80046b0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b04      	cmp	r3, #4
 800463e:	d112      	bne.n	8004666 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691a      	ldr	r2, [r3, #16]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	3b01      	subs	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004670:	2b40      	cmp	r3, #64	; 0x40
 8004672:	d112      	bne.n	800469a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691a      	ldr	r2, [r3, #16]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d005      	beq.n	80046b0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	f043 0204 	orr.w	r2, r3, #4
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f8b7 	bl	800482c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80046be:	e039      	b.n	8004734 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	2b2a      	cmp	r3, #42	; 0x2a
 80046c4:	d109      	bne.n	80046da <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2228      	movs	r2, #40	; 0x28
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff f824 	bl	8003722 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b28      	cmp	r3, #40	; 0x28
 80046e4:	d111      	bne.n	800470a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a15      	ldr	r2, [pc, #84]	; (8004740 <I2C_Slave_STOPF+0x25c>)
 80046ea:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff f823 	bl	800374e <HAL_I2C_ListenCpltCallback>
}
 8004708:	e014      	b.n	8004734 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	2b22      	cmp	r3, #34	; 0x22
 8004710:	d002      	beq.n	8004718 <I2C_Slave_STOPF+0x234>
 8004712:	7bfb      	ldrb	r3, [r7, #15]
 8004714:	2b22      	cmp	r3, #34	; 0x22
 8004716:	d10d      	bne.n	8004734 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2220      	movs	r2, #32
 8004722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fe fff7 	bl	8003722 <HAL_I2C_SlaveRxCpltCallback>
}
 8004734:	bf00      	nop
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	08004a91 	.word	0x08004a91
 8004740:	ffff0000 	.word	0xffff0000

08004744 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004752:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b08      	cmp	r3, #8
 800475e:	d002      	beq.n	8004766 <I2C_Slave_AF+0x22>
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b20      	cmp	r3, #32
 8004764:	d129      	bne.n	80047ba <I2C_Slave_AF+0x76>
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	2b28      	cmp	r3, #40	; 0x28
 800476a:	d126      	bne.n	80047ba <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a2e      	ldr	r2, [pc, #184]	; (8004828 <I2C_Slave_AF+0xe4>)
 8004770:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004780:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800478a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800479a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fe ffcb 	bl	800374e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80047b8:	e031      	b.n	800481e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	2b21      	cmp	r3, #33	; 0x21
 80047be:	d129      	bne.n	8004814 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a19      	ldr	r2, [pc, #100]	; (8004828 <I2C_Slave_AF+0xe4>)
 80047c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2221      	movs	r2, #33	; 0x21
 80047ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047ea:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047f4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004804:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7fe fd3c 	bl	8003284 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7fe ff7f 	bl	8003710 <HAL_I2C_SlaveTxCpltCallback>
}
 8004812:	e004      	b.n	800481e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800481c:	615a      	str	r2, [r3, #20]
}
 800481e:	bf00      	nop
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	ffff0000 	.word	0xffff0000

0800482c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004842:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004844:	7bbb      	ldrb	r3, [r7, #14]
 8004846:	2b10      	cmp	r3, #16
 8004848:	d002      	beq.n	8004850 <I2C_ITError+0x24>
 800484a:	7bbb      	ldrb	r3, [r7, #14]
 800484c:	2b40      	cmp	r3, #64	; 0x40
 800484e:	d10a      	bne.n	8004866 <I2C_ITError+0x3a>
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	2b22      	cmp	r3, #34	; 0x22
 8004854:	d107      	bne.n	8004866 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004864:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004866:	7bfb      	ldrb	r3, [r7, #15]
 8004868:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800486c:	2b28      	cmp	r3, #40	; 0x28
 800486e:	d107      	bne.n	8004880 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2228      	movs	r2, #40	; 0x28
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800487e:	e015      	b.n	80048ac <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800488a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800488e:	d00a      	beq.n	80048a6 <I2C_ITError+0x7a>
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	2b60      	cmp	r3, #96	; 0x60
 8004894:	d007      	beq.n	80048a6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2220      	movs	r2, #32
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ba:	d162      	bne.n	8004982 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048ca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d020      	beq.n	800491c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048de:	4a6a      	ldr	r2, [pc, #424]	; (8004a88 <I2C_ITError+0x25c>)
 80048e0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fd fffa 	bl	80028e0 <HAL_DMA_Abort_IT>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 8089 	beq.w	8004a06 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0201 	bic.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004916:	4610      	mov	r0, r2
 8004918:	4798      	blx	r3
 800491a:	e074      	b.n	8004a06 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	4a59      	ldr	r2, [pc, #356]	; (8004a88 <I2C_ITError+0x25c>)
 8004922:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004928:	4618      	mov	r0, r3
 800492a:	f7fd ffd9 	bl	80028e0 <HAL_DMA_Abort_IT>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d068      	beq.n	8004a06 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493e:	2b40      	cmp	r3, #64	; 0x40
 8004940:	d10b      	bne.n	800495a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0201 	bic.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2220      	movs	r2, #32
 800496e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800497c:	4610      	mov	r0, r2
 800497e:	4798      	blx	r3
 8004980:	e041      	b.n	8004a06 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b60      	cmp	r3, #96	; 0x60
 800498c:	d125      	bne.n	80049da <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d10b      	bne.n	80049c2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	691a      	ldr	r2, [r3, #16]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0201 	bic.w	r2, r2, #1
 80049d0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7fe fedf 	bl	8003796 <HAL_I2C_AbortCpltCallback>
 80049d8:	e015      	b.n	8004a06 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e4:	2b40      	cmp	r3, #64	; 0x40
 80049e6:	d10b      	bne.n	8004a00 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691a      	ldr	r2, [r3, #16]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7fe febf 	bl	8003784 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10e      	bne.n	8004a34 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d109      	bne.n	8004a34 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d104      	bne.n	8004a34 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d007      	beq.n	8004a44 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a42:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d113      	bne.n	8004a80 <I2C_ITError+0x254>
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
 8004a5a:	2b28      	cmp	r3, #40	; 0x28
 8004a5c:	d110      	bne.n	8004a80 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a0a      	ldr	r2, [pc, #40]	; (8004a8c <I2C_ITError+0x260>)
 8004a62:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fe fe67 	bl	800374e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a80:	bf00      	nop
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	08004a91 	.word	0x08004a91
 8004a8c:	ffff0000 	.word	0xffff0000

08004a90 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004aaa:	4b4b      	ldr	r3, [pc, #300]	; (8004bd8 <I2C_DMAAbort+0x148>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	08db      	lsrs	r3, r3, #3
 8004ab0:	4a4a      	ldr	r2, [pc, #296]	; (8004bdc <I2C_DMAAbort+0x14c>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	0a1a      	lsrs	r2, r3, #8
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	00da      	lsls	r2, r3, #3
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	f043 0220 	orr.w	r2, r3, #32
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004ad6:	e00a      	b.n	8004aee <I2C_DMAAbort+0x5e>
    }
    count--;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aec:	d0ea      	beq.n	8004ac4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afa:	2200      	movs	r2, #0
 8004afc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b1c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2200      	movs	r2, #0
 8004b22:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b30:	2200      	movs	r2, #0
 8004b32:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	2200      	movs	r2, #0
 8004b42:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0201 	bic.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b60      	cmp	r3, #96	; 0x60
 8004b5e:	d10e      	bne.n	8004b7e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2200      	movs	r2, #0
 8004b74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b76:	6978      	ldr	r0, [r7, #20]
 8004b78:	f7fe fe0d 	bl	8003796 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b7c:	e027      	b.n	8004bce <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b7e:	7cfb      	ldrb	r3, [r7, #19]
 8004b80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b84:	2b28      	cmp	r3, #40	; 0x28
 8004b86:	d117      	bne.n	8004bb8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ba6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2200      	movs	r2, #0
 8004bac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2228      	movs	r2, #40	; 0x28
 8004bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004bb6:	e007      	b.n	8004bc8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004bc8:	6978      	ldr	r0, [r7, #20]
 8004bca:	f7fe fddb 	bl	8003784 <HAL_I2C_ErrorCallback>
}
 8004bce:	bf00      	nop
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	2000000c 	.word	0x2000000c
 8004bdc:	14f8b589 	.word	0x14f8b589

08004be0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004bec:	4b13      	ldr	r3, [pc, #76]	; (8004c3c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	08db      	lsrs	r3, r3, #3
 8004bf2:	4a13      	ldr	r2, [pc, #76]	; (8004c40 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf8:	0a1a      	lsrs	r2, r3, #8
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d107      	bne.n	8004c1e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	f043 0220 	orr.w	r2, r3, #32
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e008      	b.n	8004c30 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c2c:	d0e9      	beq.n	8004c02 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bc80      	pop	{r7}
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	2000000c 	.word	0x2000000c
 8004c40:	14f8b589 	.word	0x14f8b589

08004c44 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004c54:	d103      	bne.n	8004c5e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c5c:	e007      	b.n	8004c6e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004c66:	d102      	bne.n	8004c6e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2208      	movs	r2, #8
 8004c6c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bc80      	pop	{r7}
 8004c76:	4770      	bx	lr

08004c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e272      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 8087 	beq.w	8004da6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c98:	4b92      	ldr	r3, [pc, #584]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f003 030c 	and.w	r3, r3, #12
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d00c      	beq.n	8004cbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ca4:	4b8f      	ldr	r3, [pc, #572]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f003 030c 	and.w	r3, r3, #12
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d112      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x5e>
 8004cb0:	4b8c      	ldr	r3, [pc, #560]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cbc:	d10b      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cbe:	4b89      	ldr	r3, [pc, #548]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d06c      	beq.n	8004da4 <HAL_RCC_OscConfig+0x12c>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d168      	bne.n	8004da4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e24c      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cde:	d106      	bne.n	8004cee <HAL_RCC_OscConfig+0x76>
 8004ce0:	4b80      	ldr	r3, [pc, #512]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a7f      	ldr	r2, [pc, #508]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	e02e      	b.n	8004d4c <HAL_RCC_OscConfig+0xd4>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10c      	bne.n	8004d10 <HAL_RCC_OscConfig+0x98>
 8004cf6:	4b7b      	ldr	r3, [pc, #492]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a7a      	ldr	r2, [pc, #488]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	4b78      	ldr	r3, [pc, #480]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a77      	ldr	r2, [pc, #476]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	e01d      	b.n	8004d4c <HAL_RCC_OscConfig+0xd4>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d18:	d10c      	bne.n	8004d34 <HAL_RCC_OscConfig+0xbc>
 8004d1a:	4b72      	ldr	r3, [pc, #456]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a71      	ldr	r2, [pc, #452]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	4b6f      	ldr	r3, [pc, #444]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a6e      	ldr	r2, [pc, #440]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	e00b      	b.n	8004d4c <HAL_RCC_OscConfig+0xd4>
 8004d34:	4b6b      	ldr	r3, [pc, #428]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a6a      	ldr	r2, [pc, #424]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	4b68      	ldr	r3, [pc, #416]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a67      	ldr	r2, [pc, #412]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d013      	beq.n	8004d7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d54:	f7fd f980 	bl	8002058 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d5c:	f7fd f97c 	bl	8002058 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b64      	cmp	r3, #100	; 0x64
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e200      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d6e:	4b5d      	ldr	r3, [pc, #372]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0f0      	beq.n	8004d5c <HAL_RCC_OscConfig+0xe4>
 8004d7a:	e014      	b.n	8004da6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7c:	f7fd f96c 	bl	8002058 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d84:	f7fd f968 	bl	8002058 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b64      	cmp	r3, #100	; 0x64
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e1ec      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d96:	4b53      	ldr	r3, [pc, #332]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f0      	bne.n	8004d84 <HAL_RCC_OscConfig+0x10c>
 8004da2:	e000      	b.n	8004da6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d063      	beq.n	8004e7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004db2:	4b4c      	ldr	r3, [pc, #304]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f003 030c 	and.w	r3, r3, #12
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00b      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004dbe:	4b49      	ldr	r3, [pc, #292]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d11c      	bne.n	8004e04 <HAL_RCC_OscConfig+0x18c>
 8004dca:	4b46      	ldr	r3, [pc, #280]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d116      	bne.n	8004e04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dd6:	4b43      	ldr	r3, [pc, #268]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <HAL_RCC_OscConfig+0x176>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d001      	beq.n	8004dee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e1c0      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dee:	4b3d      	ldr	r3, [pc, #244]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	4939      	ldr	r1, [pc, #228]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e02:	e03a      	b.n	8004e7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d020      	beq.n	8004e4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e0c:	4b36      	ldr	r3, [pc, #216]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e0e:	2201      	movs	r2, #1
 8004e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e12:	f7fd f921 	bl	8002058 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e1a:	f7fd f91d 	bl	8002058 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e1a1      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e2c:	4b2d      	ldr	r3, [pc, #180]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e38:	4b2a      	ldr	r3, [pc, #168]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	4927      	ldr	r1, [pc, #156]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	600b      	str	r3, [r1, #0]
 8004e4c:	e015      	b.n	8004e7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e4e:	4b26      	ldr	r3, [pc, #152]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e54:	f7fd f900 	bl	8002058 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e5c:	f7fd f8fc 	bl	8002058 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e180      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f0      	bne.n	8004e5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d03a      	beq.n	8004efc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d019      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e8e:	4b17      	ldr	r3, [pc, #92]	; (8004eec <HAL_RCC_OscConfig+0x274>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e94:	f7fd f8e0 	bl	8002058 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e9c:	f7fd f8dc 	bl	8002058 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e160      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eae:	4b0d      	ldr	r3, [pc, #52]	; (8004ee4 <HAL_RCC_OscConfig+0x26c>)
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0f0      	beq.n	8004e9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004eba:	2001      	movs	r0, #1
 8004ebc:	f000 face 	bl	800545c <RCC_Delay>
 8004ec0:	e01c      	b.n	8004efc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ec2:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <HAL_RCC_OscConfig+0x274>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ec8:	f7fd f8c6 	bl	8002058 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ece:	e00f      	b.n	8004ef0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ed0:	f7fd f8c2 	bl	8002058 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d908      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e146      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
 8004ee2:	bf00      	nop
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	42420000 	.word	0x42420000
 8004eec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef0:	4b92      	ldr	r3, [pc, #584]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e9      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 80a6 	beq.w	8005056 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f0e:	4b8b      	ldr	r3, [pc, #556]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10d      	bne.n	8004f36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f1a:	4b88      	ldr	r3, [pc, #544]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	4a87      	ldr	r2, [pc, #540]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f24:	61d3      	str	r3, [r2, #28]
 8004f26:	4b85      	ldr	r3, [pc, #532]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	60bb      	str	r3, [r7, #8]
 8004f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f32:	2301      	movs	r3, #1
 8004f34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f36:	4b82      	ldr	r3, [pc, #520]	; (8005140 <HAL_RCC_OscConfig+0x4c8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d118      	bne.n	8004f74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f42:	4b7f      	ldr	r3, [pc, #508]	; (8005140 <HAL_RCC_OscConfig+0x4c8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a7e      	ldr	r2, [pc, #504]	; (8005140 <HAL_RCC_OscConfig+0x4c8>)
 8004f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f4e:	f7fd f883 	bl	8002058 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f56:	f7fd f87f 	bl	8002058 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b64      	cmp	r3, #100	; 0x64
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e103      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f68:	4b75      	ldr	r3, [pc, #468]	; (8005140 <HAL_RCC_OscConfig+0x4c8>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0f0      	beq.n	8004f56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d106      	bne.n	8004f8a <HAL_RCC_OscConfig+0x312>
 8004f7c:	4b6f      	ldr	r3, [pc, #444]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	4a6e      	ldr	r2, [pc, #440]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	6213      	str	r3, [r2, #32]
 8004f88:	e02d      	b.n	8004fe6 <HAL_RCC_OscConfig+0x36e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10c      	bne.n	8004fac <HAL_RCC_OscConfig+0x334>
 8004f92:	4b6a      	ldr	r3, [pc, #424]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	4a69      	ldr	r2, [pc, #420]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004f98:	f023 0301 	bic.w	r3, r3, #1
 8004f9c:	6213      	str	r3, [r2, #32]
 8004f9e:	4b67      	ldr	r3, [pc, #412]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	4a66      	ldr	r2, [pc, #408]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004fa4:	f023 0304 	bic.w	r3, r3, #4
 8004fa8:	6213      	str	r3, [r2, #32]
 8004faa:	e01c      	b.n	8004fe6 <HAL_RCC_OscConfig+0x36e>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	2b05      	cmp	r3, #5
 8004fb2:	d10c      	bne.n	8004fce <HAL_RCC_OscConfig+0x356>
 8004fb4:	4b61      	ldr	r3, [pc, #388]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	4a60      	ldr	r2, [pc, #384]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004fba:	f043 0304 	orr.w	r3, r3, #4
 8004fbe:	6213      	str	r3, [r2, #32]
 8004fc0:	4b5e      	ldr	r3, [pc, #376]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	4a5d      	ldr	r2, [pc, #372]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004fc6:	f043 0301 	orr.w	r3, r3, #1
 8004fca:	6213      	str	r3, [r2, #32]
 8004fcc:	e00b      	b.n	8004fe6 <HAL_RCC_OscConfig+0x36e>
 8004fce:	4b5b      	ldr	r3, [pc, #364]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	4a5a      	ldr	r2, [pc, #360]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004fd4:	f023 0301 	bic.w	r3, r3, #1
 8004fd8:	6213      	str	r3, [r2, #32]
 8004fda:	4b58      	ldr	r3, [pc, #352]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	4a57      	ldr	r2, [pc, #348]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8004fe0:	f023 0304 	bic.w	r3, r3, #4
 8004fe4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d015      	beq.n	800501a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fee:	f7fd f833 	bl	8002058 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff4:	e00a      	b.n	800500c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff6:	f7fd f82f 	bl	8002058 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	f241 3288 	movw	r2, #5000	; 0x1388
 8005004:	4293      	cmp	r3, r2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e0b1      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800500c:	4b4b      	ldr	r3, [pc, #300]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0ee      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x37e>
 8005018:	e014      	b.n	8005044 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800501a:	f7fd f81d 	bl	8002058 <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005020:	e00a      	b.n	8005038 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005022:	f7fd f819 	bl	8002058 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005030:	4293      	cmp	r3, r2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e09b      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005038:	4b40      	ldr	r3, [pc, #256]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1ee      	bne.n	8005022 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005044:	7dfb      	ldrb	r3, [r7, #23]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d105      	bne.n	8005056 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800504a:	4b3c      	ldr	r3, [pc, #240]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	4a3b      	ldr	r2, [pc, #236]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8005050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005054:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 8087 	beq.w	800516e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005060:	4b36      	ldr	r3, [pc, #216]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f003 030c 	and.w	r3, r3, #12
 8005068:	2b08      	cmp	r3, #8
 800506a:	d061      	beq.n	8005130 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	2b02      	cmp	r3, #2
 8005072:	d146      	bne.n	8005102 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005074:	4b33      	ldr	r3, [pc, #204]	; (8005144 <HAL_RCC_OscConfig+0x4cc>)
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507a:	f7fc ffed 	bl	8002058 <HAL_GetTick>
 800507e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005080:	e008      	b.n	8005094 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005082:	f7fc ffe9 	bl	8002058 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e06d      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005094:	4b29      	ldr	r3, [pc, #164]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1f0      	bne.n	8005082 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a8:	d108      	bne.n	80050bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050aa:	4b24      	ldr	r3, [pc, #144]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	4921      	ldr	r1, [pc, #132]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050bc:	4b1f      	ldr	r3, [pc, #124]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a19      	ldr	r1, [r3, #32]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	430b      	orrs	r3, r1
 80050ce:	491b      	ldr	r1, [pc, #108]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050d4:	4b1b      	ldr	r3, [pc, #108]	; (8005144 <HAL_RCC_OscConfig+0x4cc>)
 80050d6:	2201      	movs	r2, #1
 80050d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050da:	f7fc ffbd 	bl	8002058 <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050e0:	e008      	b.n	80050f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e2:	f7fc ffb9 	bl	8002058 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e03d      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050f4:	4b11      	ldr	r3, [pc, #68]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0f0      	beq.n	80050e2 <HAL_RCC_OscConfig+0x46a>
 8005100:	e035      	b.n	800516e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005102:	4b10      	ldr	r3, [pc, #64]	; (8005144 <HAL_RCC_OscConfig+0x4cc>)
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005108:	f7fc ffa6 	bl	8002058 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005110:	f7fc ffa2 	bl	8002058 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e026      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005122:	4b06      	ldr	r3, [pc, #24]	; (800513c <HAL_RCC_OscConfig+0x4c4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f0      	bne.n	8005110 <HAL_RCC_OscConfig+0x498>
 800512e:	e01e      	b.n	800516e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d107      	bne.n	8005148 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e019      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
 800513c:	40021000 	.word	0x40021000
 8005140:	40007000 	.word	0x40007000
 8005144:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005148:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <HAL_RCC_OscConfig+0x500>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	429a      	cmp	r2, r3
 800515a:	d106      	bne.n	800516a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005166:	429a      	cmp	r2, r3
 8005168:	d001      	beq.n	800516e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40021000 	.word	0x40021000

0800517c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0d0      	b.n	8005332 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005190:	4b6a      	ldr	r3, [pc, #424]	; (800533c <HAL_RCC_ClockConfig+0x1c0>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d910      	bls.n	80051c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519e:	4b67      	ldr	r3, [pc, #412]	; (800533c <HAL_RCC_ClockConfig+0x1c0>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f023 0207 	bic.w	r2, r3, #7
 80051a6:	4965      	ldr	r1, [pc, #404]	; (800533c <HAL_RCC_ClockConfig+0x1c0>)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ae:	4b63      	ldr	r3, [pc, #396]	; (800533c <HAL_RCC_ClockConfig+0x1c0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e0b8      	b.n	8005332 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d020      	beq.n	800520e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d005      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d8:	4b59      	ldr	r3, [pc, #356]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	4a58      	ldr	r2, [pc, #352]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 80051de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80051e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0308 	and.w	r3, r3, #8
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051f0:	4b53      	ldr	r3, [pc, #332]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	4a52      	ldr	r2, [pc, #328]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 80051f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80051fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051fc:	4b50      	ldr	r3, [pc, #320]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	494d      	ldr	r1, [pc, #308]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 800520a:	4313      	orrs	r3, r2
 800520c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d040      	beq.n	800529c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d107      	bne.n	8005232 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005222:	4b47      	ldr	r3, [pc, #284]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d115      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e07f      	b.n	8005332 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d107      	bne.n	800524a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523a:	4b41      	ldr	r3, [pc, #260]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d109      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e073      	b.n	8005332 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524a:	4b3d      	ldr	r3, [pc, #244]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e06b      	b.n	8005332 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800525a:	4b39      	ldr	r3, [pc, #228]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f023 0203 	bic.w	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	4936      	ldr	r1, [pc, #216]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 8005268:	4313      	orrs	r3, r2
 800526a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800526c:	f7fc fef4 	bl	8002058 <HAL_GetTick>
 8005270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005272:	e00a      	b.n	800528a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005274:	f7fc fef0 	bl	8002058 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e053      	b.n	8005332 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528a:	4b2d      	ldr	r3, [pc, #180]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f003 020c 	and.w	r2, r3, #12
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	429a      	cmp	r2, r3
 800529a:	d1eb      	bne.n	8005274 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800529c:	4b27      	ldr	r3, [pc, #156]	; (800533c <HAL_RCC_ClockConfig+0x1c0>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d210      	bcs.n	80052cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b24      	ldr	r3, [pc, #144]	; (800533c <HAL_RCC_ClockConfig+0x1c0>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f023 0207 	bic.w	r2, r3, #7
 80052b2:	4922      	ldr	r1, [pc, #136]	; (800533c <HAL_RCC_ClockConfig+0x1c0>)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ba:	4b20      	ldr	r3, [pc, #128]	; (800533c <HAL_RCC_ClockConfig+0x1c0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d001      	beq.n	80052cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e032      	b.n	8005332 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d008      	beq.n	80052ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d8:	4b19      	ldr	r3, [pc, #100]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4916      	ldr	r1, [pc, #88]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052f6:	4b12      	ldr	r3, [pc, #72]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	490e      	ldr	r1, [pc, #56]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 8005306:	4313      	orrs	r3, r2
 8005308:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800530a:	f000 f821 	bl	8005350 <HAL_RCC_GetSysClockFreq>
 800530e:	4602      	mov	r2, r0
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	091b      	lsrs	r3, r3, #4
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	490a      	ldr	r1, [pc, #40]	; (8005344 <HAL_RCC_ClockConfig+0x1c8>)
 800531c:	5ccb      	ldrb	r3, [r1, r3]
 800531e:	fa22 f303 	lsr.w	r3, r2, r3
 8005322:	4a09      	ldr	r2, [pc, #36]	; (8005348 <HAL_RCC_ClockConfig+0x1cc>)
 8005324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005326:	4b09      	ldr	r3, [pc, #36]	; (800534c <HAL_RCC_ClockConfig+0x1d0>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f7fc fe52 	bl	8001fd4 <HAL_InitTick>

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40022000 	.word	0x40022000
 8005340:	40021000 	.word	0x40021000
 8005344:	0800a408 	.word	0x0800a408
 8005348:	2000000c 	.word	0x2000000c
 800534c:	20000010 	.word	0x20000010

08005350 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	2300      	movs	r3, #0
 800535c:	60bb      	str	r3, [r7, #8]
 800535e:	2300      	movs	r3, #0
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	2300      	movs	r3, #0
 8005364:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800536a:	4b1e      	ldr	r3, [pc, #120]	; (80053e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f003 030c 	and.w	r3, r3, #12
 8005376:	2b04      	cmp	r3, #4
 8005378:	d002      	beq.n	8005380 <HAL_RCC_GetSysClockFreq+0x30>
 800537a:	2b08      	cmp	r3, #8
 800537c:	d003      	beq.n	8005386 <HAL_RCC_GetSysClockFreq+0x36>
 800537e:	e027      	b.n	80053d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005380:	4b19      	ldr	r3, [pc, #100]	; (80053e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005382:	613b      	str	r3, [r7, #16]
      break;
 8005384:	e027      	b.n	80053d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	0c9b      	lsrs	r3, r3, #18
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	4a17      	ldr	r2, [pc, #92]	; (80053ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8005390:	5cd3      	ldrb	r3, [r2, r3]
 8005392:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d010      	beq.n	80053c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800539e:	4b11      	ldr	r3, [pc, #68]	; (80053e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	0c5b      	lsrs	r3, r3, #17
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	4a11      	ldr	r2, [pc, #68]	; (80053f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80053aa:	5cd3      	ldrb	r3, [r2, r3]
 80053ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a0d      	ldr	r2, [pc, #52]	; (80053e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80053b2:	fb03 f202 	mul.w	r2, r3, r2
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	e004      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a0c      	ldr	r2, [pc, #48]	; (80053f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80053c4:	fb02 f303 	mul.w	r3, r2, r3
 80053c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	613b      	str	r3, [r7, #16]
      break;
 80053ce:	e002      	b.n	80053d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053d0:	4b05      	ldr	r3, [pc, #20]	; (80053e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80053d2:	613b      	str	r3, [r7, #16]
      break;
 80053d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053d6:	693b      	ldr	r3, [r7, #16]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	bc80      	pop	{r7}
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	40021000 	.word	0x40021000
 80053e8:	007a1200 	.word	0x007a1200
 80053ec:	0800a420 	.word	0x0800a420
 80053f0:	0800a430 	.word	0x0800a430
 80053f4:	003d0900 	.word	0x003d0900

080053f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053fc:	4b02      	ldr	r3, [pc, #8]	; (8005408 <HAL_RCC_GetHCLKFreq+0x10>)
 80053fe:	681b      	ldr	r3, [r3, #0]
}
 8005400:	4618      	mov	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr
 8005408:	2000000c 	.word	0x2000000c

0800540c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005410:	f7ff fff2 	bl	80053f8 <HAL_RCC_GetHCLKFreq>
 8005414:	4602      	mov	r2, r0
 8005416:	4b05      	ldr	r3, [pc, #20]	; (800542c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	0a1b      	lsrs	r3, r3, #8
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	4903      	ldr	r1, [pc, #12]	; (8005430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005422:	5ccb      	ldrb	r3, [r1, r3]
 8005424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005428:	4618      	mov	r0, r3
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40021000 	.word	0x40021000
 8005430:	0800a418 	.word	0x0800a418

08005434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005438:	f7ff ffde 	bl	80053f8 <HAL_RCC_GetHCLKFreq>
 800543c:	4602      	mov	r2, r0
 800543e:	4b05      	ldr	r3, [pc, #20]	; (8005454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	0adb      	lsrs	r3, r3, #11
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	4903      	ldr	r1, [pc, #12]	; (8005458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800544a:	5ccb      	ldrb	r3, [r1, r3]
 800544c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005450:	4618      	mov	r0, r3
 8005452:	bd80      	pop	{r7, pc}
 8005454:	40021000 	.word	0x40021000
 8005458:	0800a418 	.word	0x0800a418

0800545c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005464:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <RCC_Delay+0x34>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a0a      	ldr	r2, [pc, #40]	; (8005494 <RCC_Delay+0x38>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	0a5b      	lsrs	r3, r3, #9
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	fb02 f303 	mul.w	r3, r2, r3
 8005476:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005478:	bf00      	nop
  }
  while (Delay --);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1e5a      	subs	r2, r3, #1
 800547e:	60fa      	str	r2, [r7, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1f9      	bne.n	8005478 <RCC_Delay+0x1c>
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	bc80      	pop	{r7}
 800548e:	4770      	bx	lr
 8005490:	2000000c 	.word	0x2000000c
 8005494:	10624dd3 	.word	0x10624dd3

08005498 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	613b      	str	r3, [r7, #16]
 80054a4:	2300      	movs	r3, #0
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d07d      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80054b4:	2300      	movs	r3, #0
 80054b6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054b8:	4b4f      	ldr	r3, [pc, #316]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10d      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054c4:	4b4c      	ldr	r3, [pc, #304]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	4a4b      	ldr	r2, [pc, #300]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ce:	61d3      	str	r3, [r2, #28]
 80054d0:	4b49      	ldr	r3, [pc, #292]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d8:	60bb      	str	r3, [r7, #8]
 80054da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054dc:	2301      	movs	r3, #1
 80054de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e0:	4b46      	ldr	r3, [pc, #280]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d118      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054ec:	4b43      	ldr	r3, [pc, #268]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a42      	ldr	r2, [pc, #264]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054f8:	f7fc fdae 	bl	8002058 <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054fe:	e008      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005500:	f7fc fdaa 	bl	8002058 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b64      	cmp	r3, #100	; 0x64
 800550c:	d901      	bls.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e06d      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005512:	4b3a      	ldr	r3, [pc, #232]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0f0      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800551e:	4b36      	ldr	r3, [pc, #216]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005526:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d02e      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	429a      	cmp	r2, r3
 800553a:	d027      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800553c:	4b2e      	ldr	r3, [pc, #184]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005544:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005546:	4b2e      	ldr	r3, [pc, #184]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005548:	2201      	movs	r2, #1
 800554a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800554c:	4b2c      	ldr	r3, [pc, #176]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005552:	4a29      	ldr	r2, [pc, #164]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d014      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005562:	f7fc fd79 	bl	8002058 <HAL_GetTick>
 8005566:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005568:	e00a      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800556a:	f7fc fd75 	bl	8002058 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	f241 3288 	movw	r2, #5000	; 0x1388
 8005578:	4293      	cmp	r3, r2
 800557a:	d901      	bls.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e036      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005580:	4b1d      	ldr	r3, [pc, #116]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0ee      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800558c:	4b1a      	ldr	r3, [pc, #104]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	4917      	ldr	r1, [pc, #92]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800559a:	4313      	orrs	r3, r2
 800559c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800559e:	7dfb      	ldrb	r3, [r7, #23]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d105      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055a4:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	4a13      	ldr	r2, [pc, #76]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d008      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055bc:	4b0e      	ldr	r3, [pc, #56]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	490b      	ldr	r1, [pc, #44]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0310 	and.w	r3, r3, #16
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d008      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055da:	4b07      	ldr	r3, [pc, #28]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	4904      	ldr	r1, [pc, #16]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3718      	adds	r7, #24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	40021000 	.word	0x40021000
 80055fc:	40007000 	.word	0x40007000
 8005600:	42420440 	.word	0x42420440

08005604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e041      	b.n	800569a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7fc fa50 	bl	8001ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	3304      	adds	r3, #4
 8005640:	4619      	mov	r1, r3
 8005642:	4610      	mov	r0, r2
 8005644:	f000 ffb6 	bl	80065b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d001      	beq.n	80056bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e03a      	b.n	8005732 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0201 	orr.w	r2, r2, #1
 80056d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a18      	ldr	r2, [pc, #96]	; (800573c <HAL_TIM_Base_Start_IT+0x98>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00e      	beq.n	80056fc <HAL_TIM_Base_Start_IT+0x58>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e6:	d009      	beq.n	80056fc <HAL_TIM_Base_Start_IT+0x58>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a14      	ldr	r2, [pc, #80]	; (8005740 <HAL_TIM_Base_Start_IT+0x9c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d004      	beq.n	80056fc <HAL_TIM_Base_Start_IT+0x58>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a13      	ldr	r2, [pc, #76]	; (8005744 <HAL_TIM_Base_Start_IT+0xa0>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d111      	bne.n	8005720 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2b06      	cmp	r3, #6
 800570c:	d010      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f042 0201 	orr.w	r2, r2, #1
 800571c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571e:	e007      	b.n	8005730 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0201 	orr.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	bc80      	pop	{r7}
 800573a:	4770      	bx	lr
 800573c:	40012c00 	.word	0x40012c00
 8005740:	40000400 	.word	0x40000400
 8005744:	40000800 	.word	0x40000800

08005748 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e041      	b.n	80057de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d106      	bne.n	8005774 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f839 	bl	80057e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	3304      	adds	r3, #4
 8005784:	4619      	mov	r1, r3
 8005786:	4610      	mov	r0, r2
 8005788:	f000 ff14 	bl	80065b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057ee:	bf00      	nop
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bc80      	pop	{r7}
 80057f6:	4770      	bx	lr

080057f8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d109      	bne.n	8005820 <HAL_TIM_PWM_Start_IT+0x28>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b01      	cmp	r3, #1
 8005816:	bf14      	ite	ne
 8005818:	2301      	movne	r3, #1
 800581a:	2300      	moveq	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	e022      	b.n	8005866 <HAL_TIM_PWM_Start_IT+0x6e>
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2b04      	cmp	r3, #4
 8005824:	d109      	bne.n	800583a <HAL_TIM_PWM_Start_IT+0x42>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b01      	cmp	r3, #1
 8005830:	bf14      	ite	ne
 8005832:	2301      	movne	r3, #1
 8005834:	2300      	moveq	r3, #0
 8005836:	b2db      	uxtb	r3, r3
 8005838:	e015      	b.n	8005866 <HAL_TIM_PWM_Start_IT+0x6e>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b08      	cmp	r3, #8
 800583e:	d109      	bne.n	8005854 <HAL_TIM_PWM_Start_IT+0x5c>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b01      	cmp	r3, #1
 800584a:	bf14      	ite	ne
 800584c:	2301      	movne	r3, #1
 800584e:	2300      	moveq	r3, #0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	e008      	b.n	8005866 <HAL_TIM_PWM_Start_IT+0x6e>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b01      	cmp	r3, #1
 800585e:	bf14      	ite	ne
 8005860:	2301      	movne	r3, #1
 8005862:	2300      	moveq	r3, #0
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e0a9      	b.n	80059c2 <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d104      	bne.n	800587e <HAL_TIM_PWM_Start_IT+0x86>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800587c:	e013      	b.n	80058a6 <HAL_TIM_PWM_Start_IT+0xae>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b04      	cmp	r3, #4
 8005882:	d104      	bne.n	800588e <HAL_TIM_PWM_Start_IT+0x96>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800588c:	e00b      	b.n	80058a6 <HAL_TIM_PWM_Start_IT+0xae>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b08      	cmp	r3, #8
 8005892:	d104      	bne.n	800589e <HAL_TIM_PWM_Start_IT+0xa6>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800589c:	e003      	b.n	80058a6 <HAL_TIM_PWM_Start_IT+0xae>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2202      	movs	r2, #2
 80058a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b0c      	cmp	r3, #12
 80058aa:	d841      	bhi.n	8005930 <HAL_TIM_PWM_Start_IT+0x138>
 80058ac:	a201      	add	r2, pc, #4	; (adr r2, 80058b4 <HAL_TIM_PWM_Start_IT+0xbc>)
 80058ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b2:	bf00      	nop
 80058b4:	080058e9 	.word	0x080058e9
 80058b8:	08005931 	.word	0x08005931
 80058bc:	08005931 	.word	0x08005931
 80058c0:	08005931 	.word	0x08005931
 80058c4:	080058fb 	.word	0x080058fb
 80058c8:	08005931 	.word	0x08005931
 80058cc:	08005931 	.word	0x08005931
 80058d0:	08005931 	.word	0x08005931
 80058d4:	0800590d 	.word	0x0800590d
 80058d8:	08005931 	.word	0x08005931
 80058dc:	08005931 	.word	0x08005931
 80058e0:	08005931 	.word	0x08005931
 80058e4:	0800591f 	.word	0x0800591f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0202 	orr.w	r2, r2, #2
 80058f6:	60da      	str	r2, [r3, #12]
      break;
 80058f8:	e01d      	b.n	8005936 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68da      	ldr	r2, [r3, #12]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0204 	orr.w	r2, r2, #4
 8005908:	60da      	str	r2, [r3, #12]
      break;
 800590a:	e014      	b.n	8005936 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0208 	orr.w	r2, r2, #8
 800591a:	60da      	str	r2, [r3, #12]
      break;
 800591c:	e00b      	b.n	8005936 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f042 0210 	orr.w	r2, r2, #16
 800592c:	60da      	str	r2, [r3, #12]
      break;
 800592e:	e002      	b.n	8005936 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	73fb      	strb	r3, [r7, #15]
      break;
 8005934:	bf00      	nop
  }

  if (status == HAL_OK)
 8005936:	7bfb      	ldrb	r3, [r7, #15]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d141      	bne.n	80059c0 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2201      	movs	r2, #1
 8005942:	6839      	ldr	r1, [r7, #0]
 8005944:	4618      	mov	r0, r3
 8005946:	f001 f8b5 	bl	8006ab4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a1f      	ldr	r2, [pc, #124]	; (80059cc <HAL_TIM_PWM_Start_IT+0x1d4>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d107      	bne.n	8005964 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005962:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a18      	ldr	r2, [pc, #96]	; (80059cc <HAL_TIM_PWM_Start_IT+0x1d4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00e      	beq.n	800598c <HAL_TIM_PWM_Start_IT+0x194>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005976:	d009      	beq.n	800598c <HAL_TIM_PWM_Start_IT+0x194>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a14      	ldr	r2, [pc, #80]	; (80059d0 <HAL_TIM_PWM_Start_IT+0x1d8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d004      	beq.n	800598c <HAL_TIM_PWM_Start_IT+0x194>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a13      	ldr	r2, [pc, #76]	; (80059d4 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d111      	bne.n	80059b0 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 0307 	and.w	r3, r3, #7
 8005996:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2b06      	cmp	r3, #6
 800599c:	d010      	beq.n	80059c0 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f042 0201 	orr.w	r2, r2, #1
 80059ac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ae:	e007      	b.n	80059c0 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0201 	orr.w	r2, r2, #1
 80059be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	40012c00 	.word	0x40012c00
 80059d0:	40000400 	.word	0x40000400
 80059d4:	40000800 	.word	0x40000800

080059d8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d109      	bne.n	8005a04 <HAL_TIM_PWM_Start_DMA+0x2c>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	bf0c      	ite	eq
 80059fc:	2301      	moveq	r3, #1
 80059fe:	2300      	movne	r3, #0
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	e022      	b.n	8005a4a <HAL_TIM_PWM_Start_DMA+0x72>
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d109      	bne.n	8005a1e <HAL_TIM_PWM_Start_DMA+0x46>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	bf0c      	ite	eq
 8005a16:	2301      	moveq	r3, #1
 8005a18:	2300      	movne	r3, #0
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	e015      	b.n	8005a4a <HAL_TIM_PWM_Start_DMA+0x72>
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d109      	bne.n	8005a38 <HAL_TIM_PWM_Start_DMA+0x60>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	bf0c      	ite	eq
 8005a30:	2301      	moveq	r3, #1
 8005a32:	2300      	movne	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	e008      	b.n	8005a4a <HAL_TIM_PWM_Start_DMA+0x72>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	bf0c      	ite	eq
 8005a44:	2301      	moveq	r3, #1
 8005a46:	2300      	movne	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005a4e:	2302      	movs	r3, #2
 8005a50:	e153      	b.n	8005cfa <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d109      	bne.n	8005a6c <HAL_TIM_PWM_Start_DMA+0x94>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	bf0c      	ite	eq
 8005a64:	2301      	moveq	r3, #1
 8005a66:	2300      	movne	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	e022      	b.n	8005ab2 <HAL_TIM_PWM_Start_DMA+0xda>
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d109      	bne.n	8005a86 <HAL_TIM_PWM_Start_DMA+0xae>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	bf0c      	ite	eq
 8005a7e:	2301      	moveq	r3, #1
 8005a80:	2300      	movne	r3, #0
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	e015      	b.n	8005ab2 <HAL_TIM_PWM_Start_DMA+0xda>
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d109      	bne.n	8005aa0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	bf0c      	ite	eq
 8005a98:	2301      	moveq	r3, #1
 8005a9a:	2300      	movne	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	e008      	b.n	8005ab2 <HAL_TIM_PWM_Start_DMA+0xda>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	bf0c      	ite	eq
 8005aac:	2301      	moveq	r3, #1
 8005aae:	2300      	movne	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d024      	beq.n	8005b00 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <HAL_TIM_PWM_Start_DMA+0xea>
 8005abc:	887b      	ldrh	r3, [r7, #2]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e119      	b.n	8005cfa <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d104      	bne.n	8005ad6 <HAL_TIM_PWM_Start_DMA+0xfe>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ad4:	e016      	b.n	8005b04 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d104      	bne.n	8005ae6 <HAL_TIM_PWM_Start_DMA+0x10e>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ae4:	e00e      	b.n	8005b04 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d104      	bne.n	8005af6 <HAL_TIM_PWM_Start_DMA+0x11e>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005af4:	e006      	b.n	8005b04 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2202      	movs	r2, #2
 8005afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005afe:	e001      	b.n	8005b04 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e0fa      	b.n	8005cfa <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2b0c      	cmp	r3, #12
 8005b08:	f200 80ae 	bhi.w	8005c68 <HAL_TIM_PWM_Start_DMA+0x290>
 8005b0c:	a201      	add	r2, pc, #4	; (adr r2, 8005b14 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b12:	bf00      	nop
 8005b14:	08005b49 	.word	0x08005b49
 8005b18:	08005c69 	.word	0x08005c69
 8005b1c:	08005c69 	.word	0x08005c69
 8005b20:	08005c69 	.word	0x08005c69
 8005b24:	08005b91 	.word	0x08005b91
 8005b28:	08005c69 	.word	0x08005c69
 8005b2c:	08005c69 	.word	0x08005c69
 8005b30:	08005c69 	.word	0x08005c69
 8005b34:	08005bd9 	.word	0x08005bd9
 8005b38:	08005c69 	.word	0x08005c69
 8005b3c:	08005c69 	.word	0x08005c69
 8005b40:	08005c69 	.word	0x08005c69
 8005b44:	08005c21 	.word	0x08005c21
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	4a6d      	ldr	r2, [pc, #436]	; (8005d04 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005b4e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	4a6c      	ldr	r2, [pc, #432]	; (8005d08 <HAL_TIM_PWM_Start_DMA+0x330>)
 8005b56:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	4a6b      	ldr	r2, [pc, #428]	; (8005d0c <HAL_TIM_PWM_Start_DMA+0x334>)
 8005b5e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3334      	adds	r3, #52	; 0x34
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	887b      	ldrh	r3, [r7, #2]
 8005b70:	f7fc fe1a 	bl	80027a8 <HAL_DMA_Start_IT>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e0bd      	b.n	8005cfa <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b8c:	60da      	str	r2, [r3, #12]
      break;
 8005b8e:	e06e      	b.n	8005c6e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b94:	4a5b      	ldr	r2, [pc, #364]	; (8005d04 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005b96:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	4a5a      	ldr	r2, [pc, #360]	; (8005d08 <HAL_TIM_PWM_Start_DMA+0x330>)
 8005b9e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba4:	4a59      	ldr	r2, [pc, #356]	; (8005d0c <HAL_TIM_PWM_Start_DMA+0x334>)
 8005ba6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005bac:	6879      	ldr	r1, [r7, #4]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3338      	adds	r3, #56	; 0x38
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	887b      	ldrh	r3, [r7, #2]
 8005bb8:	f7fc fdf6 	bl	80027a8 <HAL_DMA_Start_IT>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e099      	b.n	8005cfa <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bd4:	60da      	str	r2, [r3, #12]
      break;
 8005bd6:	e04a      	b.n	8005c6e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bdc:	4a49      	ldr	r2, [pc, #292]	; (8005d04 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005bde:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	4a48      	ldr	r2, [pc, #288]	; (8005d08 <HAL_TIM_PWM_Start_DMA+0x330>)
 8005be6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	4a47      	ldr	r2, [pc, #284]	; (8005d0c <HAL_TIM_PWM_Start_DMA+0x334>)
 8005bee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005bf4:	6879      	ldr	r1, [r7, #4]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	333c      	adds	r3, #60	; 0x3c
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	887b      	ldrh	r3, [r7, #2]
 8005c00:	f7fc fdd2 	bl	80027a8 <HAL_DMA_Start_IT>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e075      	b.n	8005cfa <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68da      	ldr	r2, [r3, #12]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c1c:	60da      	str	r2, [r3, #12]
      break;
 8005c1e:	e026      	b.n	8005c6e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c24:	4a37      	ldr	r2, [pc, #220]	; (8005d04 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005c26:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2c:	4a36      	ldr	r2, [pc, #216]	; (8005d08 <HAL_TIM_PWM_Start_DMA+0x330>)
 8005c2e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c34:	4a35      	ldr	r2, [pc, #212]	; (8005d0c <HAL_TIM_PWM_Start_DMA+0x334>)
 8005c36:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c3c:	6879      	ldr	r1, [r7, #4]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3340      	adds	r3, #64	; 0x40
 8005c44:	461a      	mov	r2, r3
 8005c46:	887b      	ldrh	r3, [r7, #2]
 8005c48:	f7fc fdae 	bl	80027a8 <HAL_DMA_Start_IT>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e051      	b.n	8005cfa <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c64:	60da      	str	r2, [r3, #12]
      break;
 8005c66:	e002      	b.n	8005c6e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c6c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005c6e:	7dfb      	ldrb	r3, [r7, #23]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d141      	bne.n	8005cf8 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	68b9      	ldr	r1, [r7, #8]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 ff19 	bl	8006ab4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a22      	ldr	r2, [pc, #136]	; (8005d10 <HAL_TIM_PWM_Start_DMA+0x338>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d107      	bne.n	8005c9c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c9a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a1b      	ldr	r2, [pc, #108]	; (8005d10 <HAL_TIM_PWM_Start_DMA+0x338>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00e      	beq.n	8005cc4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cae:	d009      	beq.n	8005cc4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a17      	ldr	r2, [pc, #92]	; (8005d14 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d004      	beq.n	8005cc4 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a16      	ldr	r2, [pc, #88]	; (8005d18 <HAL_TIM_PWM_Start_DMA+0x340>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d111      	bne.n	8005ce8 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	2b06      	cmp	r3, #6
 8005cd4:	d010      	beq.n	8005cf8 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 0201 	orr.w	r2, r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce6:	e007      	b.n	8005cf8 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f042 0201 	orr.w	r2, r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3718      	adds	r7, #24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	080064a5 	.word	0x080064a5
 8005d08:	0800654d 	.word	0x0800654d
 8005d0c:	08006413 	.word	0x08006413
 8005d10:	40012c00 	.word	0x40012c00
 8005d14:	40000400 	.word	0x40000400
 8005d18:	40000800 	.word	0x40000800

08005d1c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b0c      	cmp	r3, #12
 8005d2e:	d855      	bhi.n	8005ddc <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005d30:	a201      	add	r2, pc, #4	; (adr r2, 8005d38 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d36:	bf00      	nop
 8005d38:	08005d6d 	.word	0x08005d6d
 8005d3c:	08005ddd 	.word	0x08005ddd
 8005d40:	08005ddd 	.word	0x08005ddd
 8005d44:	08005ddd 	.word	0x08005ddd
 8005d48:	08005d89 	.word	0x08005d89
 8005d4c:	08005ddd 	.word	0x08005ddd
 8005d50:	08005ddd 	.word	0x08005ddd
 8005d54:	08005ddd 	.word	0x08005ddd
 8005d58:	08005da5 	.word	0x08005da5
 8005d5c:	08005ddd 	.word	0x08005ddd
 8005d60:	08005ddd 	.word	0x08005ddd
 8005d64:	08005ddd 	.word	0x08005ddd
 8005d68:	08005dc1 	.word	0x08005dc1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005d7a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7fc fdad 	bl	80028e0 <HAL_DMA_Abort_IT>
      break;
 8005d86:	e02c      	b.n	8005de2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d96:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7fc fd9f 	bl	80028e0 <HAL_DMA_Abort_IT>
      break;
 8005da2:	e01e      	b.n	8005de2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005db2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7fc fd91 	bl	80028e0 <HAL_DMA_Abort_IT>
      break;
 8005dbe:	e010      	b.n	8005de2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fc fd83 	bl	80028e0 <HAL_DMA_Abort_IT>
      break;
 8005dda:	e002      	b.n	8005de2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	73fb      	strb	r3, [r7, #15]
      break;
 8005de0:	bf00      	nop
  }

  if (status == HAL_OK)
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d157      	bne.n	8005e98 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2200      	movs	r2, #0
 8005dee:	6839      	ldr	r1, [r7, #0]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 fe5f 	bl	8006ab4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a2a      	ldr	r2, [pc, #168]	; (8005ea4 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d117      	bne.n	8005e30 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6a1a      	ldr	r2, [r3, #32]
 8005e06:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10f      	bne.n	8005e30 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6a1a      	ldr	r2, [r3, #32]
 8005e16:	f240 4344 	movw	r3, #1092	; 0x444
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d107      	bne.n	8005e30 <HAL_TIM_PWM_Stop_DMA+0x114>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e2e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6a1a      	ldr	r2, [r3, #32]
 8005e36:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10f      	bne.n	8005e60 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6a1a      	ldr	r2, [r3, #32]
 8005e46:	f240 4344 	movw	r3, #1092	; 0x444
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d107      	bne.n	8005e60 <HAL_TIM_PWM_Stop_DMA+0x144>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0201 	bic.w	r2, r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d104      	bne.n	8005e70 <HAL_TIM_PWM_Stop_DMA+0x154>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e6e:	e013      	b.n	8005e98 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d104      	bne.n	8005e80 <HAL_TIM_PWM_Stop_DMA+0x164>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e7e:	e00b      	b.n	8005e98 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2b08      	cmp	r3, #8
 8005e84:	d104      	bne.n	8005e90 <HAL_TIM_PWM_Stop_DMA+0x174>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e8e:	e003      	b.n	8005e98 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	40012c00 	.word	0x40012c00

08005ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d122      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d11b      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f06f 0202 	mvn.w	r2, #2
 8005ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fa76 	bl	80063dc <HAL_TIM_IC_CaptureCallback>
 8005ef0:	e005      	b.n	8005efe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fa69 	bl	80063ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7fb fc83 	bl	8001804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f003 0304 	and.w	r3, r3, #4
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	d122      	bne.n	8005f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d11b      	bne.n	8005f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0204 	mvn.w	r2, #4
 8005f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fa4c 	bl	80063dc <HAL_TIM_IC_CaptureCallback>
 8005f44:	e005      	b.n	8005f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fa3f 	bl	80063ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7fb fc59 	bl	8001804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f003 0308 	and.w	r3, r3, #8
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	d122      	bne.n	8005fac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d11b      	bne.n	8005fac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0208 	mvn.w	r2, #8
 8005f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2204      	movs	r2, #4
 8005f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fa22 	bl	80063dc <HAL_TIM_IC_CaptureCallback>
 8005f98:	e005      	b.n	8005fa6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fa15 	bl	80063ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7fb fc2f 	bl	8001804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	f003 0310 	and.w	r3, r3, #16
 8005fb6:	2b10      	cmp	r3, #16
 8005fb8:	d122      	bne.n	8006000 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f003 0310 	and.w	r3, r3, #16
 8005fc4:	2b10      	cmp	r3, #16
 8005fc6:	d11b      	bne.n	8006000 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f06f 0210 	mvn.w	r2, #16
 8005fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2208      	movs	r2, #8
 8005fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f9f8 	bl	80063dc <HAL_TIM_IC_CaptureCallback>
 8005fec:	e005      	b.n	8005ffa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f9eb 	bl	80063ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7fb fc05 	bl	8001804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b01      	cmp	r3, #1
 800600c:	d10e      	bne.n	800602c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b01      	cmp	r3, #1
 800601a:	d107      	bne.n	800602c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0201 	mvn.w	r2, #1
 8006024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7fb f99c 	bl	8001364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006036:	2b80      	cmp	r3, #128	; 0x80
 8006038:	d10e      	bne.n	8006058 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006044:	2b80      	cmp	r3, #128	; 0x80
 8006046:	d107      	bne.n	8006058 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fe0a 	bl	8006c6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006062:	2b40      	cmp	r3, #64	; 0x40
 8006064:	d10e      	bne.n	8006084 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006070:	2b40      	cmp	r3, #64	; 0x40
 8006072:	d107      	bne.n	8006084 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800607c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f9b5 	bl	80063ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b20      	cmp	r3, #32
 8006090:	d10e      	bne.n	80060b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f003 0320 	and.w	r3, r3, #32
 800609c:	2b20      	cmp	r3, #32
 800609e:	d107      	bne.n	80060b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f06f 0220 	mvn.w	r2, #32
 80060a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fdd5 	bl	8006c5a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060b0:	bf00      	nop
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060d2:	2302      	movs	r3, #2
 80060d4:	e0ae      	b.n	8006234 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2201      	movs	r2, #1
 80060da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b0c      	cmp	r3, #12
 80060e2:	f200 809f 	bhi.w	8006224 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060e6:	a201      	add	r2, pc, #4	; (adr r2, 80060ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ec:	08006121 	.word	0x08006121
 80060f0:	08006225 	.word	0x08006225
 80060f4:	08006225 	.word	0x08006225
 80060f8:	08006225 	.word	0x08006225
 80060fc:	08006161 	.word	0x08006161
 8006100:	08006225 	.word	0x08006225
 8006104:	08006225 	.word	0x08006225
 8006108:	08006225 	.word	0x08006225
 800610c:	080061a3 	.word	0x080061a3
 8006110:	08006225 	.word	0x08006225
 8006114:	08006225 	.word	0x08006225
 8006118:	08006225 	.word	0x08006225
 800611c:	080061e3 	.word	0x080061e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68b9      	ldr	r1, [r7, #8]
 8006126:	4618      	mov	r0, r3
 8006128:	f000 faa6 	bl	8006678 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699a      	ldr	r2, [r3, #24]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0208 	orr.w	r2, r2, #8
 800613a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 0204 	bic.w	r2, r2, #4
 800614a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6999      	ldr	r1, [r3, #24]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	691a      	ldr	r2, [r3, #16]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	619a      	str	r2, [r3, #24]
      break;
 800615e:	e064      	b.n	800622a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68b9      	ldr	r1, [r7, #8]
 8006166:	4618      	mov	r0, r3
 8006168:	f000 faec 	bl	8006744 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800617a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800618a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6999      	ldr	r1, [r3, #24]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	021a      	lsls	r2, r3, #8
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	619a      	str	r2, [r3, #24]
      break;
 80061a0:	e043      	b.n	800622a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68b9      	ldr	r1, [r7, #8]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 fb35 	bl	8006818 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69da      	ldr	r2, [r3, #28]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f042 0208 	orr.w	r2, r2, #8
 80061bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69da      	ldr	r2, [r3, #28]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0204 	bic.w	r2, r2, #4
 80061cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69d9      	ldr	r1, [r3, #28]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	691a      	ldr	r2, [r3, #16]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	61da      	str	r2, [r3, #28]
      break;
 80061e0:	e023      	b.n	800622a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 fb7f 	bl	80068ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800620c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69d9      	ldr	r1, [r3, #28]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	021a      	lsls	r2, r3, #8
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	61da      	str	r2, [r3, #28]
      break;
 8006222:	e002      	b.n	800622a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	75fb      	strb	r3, [r7, #23]
      break;
 8006228:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006232:	7dfb      	ldrb	r3, [r7, #23]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3718      	adds	r7, #24
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006250:	2b01      	cmp	r3, #1
 8006252:	d101      	bne.n	8006258 <HAL_TIM_ConfigClockSource+0x1c>
 8006254:	2302      	movs	r3, #2
 8006256:	e0b4      	b.n	80063c2 <HAL_TIM_ConfigClockSource+0x186>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800627e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006290:	d03e      	beq.n	8006310 <HAL_TIM_ConfigClockSource+0xd4>
 8006292:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006296:	f200 8087 	bhi.w	80063a8 <HAL_TIM_ConfigClockSource+0x16c>
 800629a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800629e:	f000 8086 	beq.w	80063ae <HAL_TIM_ConfigClockSource+0x172>
 80062a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062a6:	d87f      	bhi.n	80063a8 <HAL_TIM_ConfigClockSource+0x16c>
 80062a8:	2b70      	cmp	r3, #112	; 0x70
 80062aa:	d01a      	beq.n	80062e2 <HAL_TIM_ConfigClockSource+0xa6>
 80062ac:	2b70      	cmp	r3, #112	; 0x70
 80062ae:	d87b      	bhi.n	80063a8 <HAL_TIM_ConfigClockSource+0x16c>
 80062b0:	2b60      	cmp	r3, #96	; 0x60
 80062b2:	d050      	beq.n	8006356 <HAL_TIM_ConfigClockSource+0x11a>
 80062b4:	2b60      	cmp	r3, #96	; 0x60
 80062b6:	d877      	bhi.n	80063a8 <HAL_TIM_ConfigClockSource+0x16c>
 80062b8:	2b50      	cmp	r3, #80	; 0x50
 80062ba:	d03c      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0xfa>
 80062bc:	2b50      	cmp	r3, #80	; 0x50
 80062be:	d873      	bhi.n	80063a8 <HAL_TIM_ConfigClockSource+0x16c>
 80062c0:	2b40      	cmp	r3, #64	; 0x40
 80062c2:	d058      	beq.n	8006376 <HAL_TIM_ConfigClockSource+0x13a>
 80062c4:	2b40      	cmp	r3, #64	; 0x40
 80062c6:	d86f      	bhi.n	80063a8 <HAL_TIM_ConfigClockSource+0x16c>
 80062c8:	2b30      	cmp	r3, #48	; 0x30
 80062ca:	d064      	beq.n	8006396 <HAL_TIM_ConfigClockSource+0x15a>
 80062cc:	2b30      	cmp	r3, #48	; 0x30
 80062ce:	d86b      	bhi.n	80063a8 <HAL_TIM_ConfigClockSource+0x16c>
 80062d0:	2b20      	cmp	r3, #32
 80062d2:	d060      	beq.n	8006396 <HAL_TIM_ConfigClockSource+0x15a>
 80062d4:	2b20      	cmp	r3, #32
 80062d6:	d867      	bhi.n	80063a8 <HAL_TIM_ConfigClockSource+0x16c>
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d05c      	beq.n	8006396 <HAL_TIM_ConfigClockSource+0x15a>
 80062dc:	2b10      	cmp	r3, #16
 80062de:	d05a      	beq.n	8006396 <HAL_TIM_ConfigClockSource+0x15a>
 80062e0:	e062      	b.n	80063a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6818      	ldr	r0, [r3, #0]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	6899      	ldr	r1, [r3, #8]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f000 fbc0 	bl	8006a76 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006304:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	609a      	str	r2, [r3, #8]
      break;
 800630e:	e04f      	b.n	80063b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	6899      	ldr	r1, [r3, #8]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f000 fba9 	bl	8006a76 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689a      	ldr	r2, [r3, #8]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006332:	609a      	str	r2, [r3, #8]
      break;
 8006334:	e03c      	b.n	80063b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6818      	ldr	r0, [r3, #0]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	6859      	ldr	r1, [r3, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	461a      	mov	r2, r3
 8006344:	f000 fb20 	bl	8006988 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2150      	movs	r1, #80	; 0x50
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fb77 	bl	8006a42 <TIM_ITRx_SetConfig>
      break;
 8006354:	e02c      	b.n	80063b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6818      	ldr	r0, [r3, #0]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	6859      	ldr	r1, [r3, #4]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	461a      	mov	r2, r3
 8006364:	f000 fb3e 	bl	80069e4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2160      	movs	r1, #96	; 0x60
 800636e:	4618      	mov	r0, r3
 8006370:	f000 fb67 	bl	8006a42 <TIM_ITRx_SetConfig>
      break;
 8006374:	e01c      	b.n	80063b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6818      	ldr	r0, [r3, #0]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	6859      	ldr	r1, [r3, #4]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	461a      	mov	r2, r3
 8006384:	f000 fb00 	bl	8006988 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2140      	movs	r1, #64	; 0x40
 800638e:	4618      	mov	r0, r3
 8006390:	f000 fb57 	bl	8006a42 <TIM_ITRx_SetConfig>
      break;
 8006394:	e00c      	b.n	80063b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4619      	mov	r1, r3
 80063a0:	4610      	mov	r0, r2
 80063a2:	f000 fb4e 	bl	8006a42 <TIM_ITRx_SetConfig>
      break;
 80063a6:	e003      	b.n	80063b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	73fb      	strb	r3, [r7, #15]
      break;
 80063ac:	e000      	b.n	80063b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b083      	sub	sp, #12
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063d2:	bf00      	nop
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bc80      	pop	{r7}
 80063da:	4770      	bx	lr

080063dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bc80      	pop	{r7}
 80063ec:	4770      	bx	lr

080063ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bc80      	pop	{r7}
 80063fe:	4770      	bx	lr

08006400 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	bc80      	pop	{r7}
 8006410:	4770      	bx	lr

08006412 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	429a      	cmp	r2, r3
 8006428:	d107      	bne.n	800643a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2201      	movs	r2, #1
 800642e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006438:	e02a      	b.n	8006490 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	429a      	cmp	r2, r3
 8006442:	d107      	bne.n	8006454 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2202      	movs	r2, #2
 8006448:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006452:	e01d      	b.n	8006490 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	429a      	cmp	r2, r3
 800645c:	d107      	bne.n	800646e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2204      	movs	r2, #4
 8006462:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800646c:	e010      	b.n	8006490 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	429a      	cmp	r2, r3
 8006476:	d107      	bne.n	8006488 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2208      	movs	r2, #8
 800647c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006486:	e003      	b.n	8006490 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f7ff ffb5 	bl	8006400 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	771a      	strb	r2, [r3, #28]
}
 800649c:	bf00      	nop
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d10b      	bne.n	80064d4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2201      	movs	r2, #1
 80064c0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d136      	bne.n	8006538 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064d2:	e031      	b.n	8006538 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d10b      	bne.n	80064f6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2202      	movs	r2, #2
 80064e2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d125      	bne.n	8006538 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064f4:	e020      	b.n	8006538 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d10b      	bne.n	8006518 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2204      	movs	r2, #4
 8006504:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d114      	bne.n	8006538 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006516:	e00f      	b.n	8006538 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	429a      	cmp	r2, r3
 8006520:	d10a      	bne.n	8006538 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2208      	movs	r2, #8
 8006526:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d103      	bne.n	8006538 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f7fb f963 	bl	8001804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	771a      	strb	r2, [r3, #28]
}
 8006544:	bf00      	nop
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	429a      	cmp	r2, r3
 8006562:	d103      	bne.n	800656c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2201      	movs	r2, #1
 8006568:	771a      	strb	r2, [r3, #28]
 800656a:	e019      	b.n	80065a0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	429a      	cmp	r2, r3
 8006574:	d103      	bne.n	800657e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2202      	movs	r2, #2
 800657a:	771a      	strb	r2, [r3, #28]
 800657c:	e010      	b.n	80065a0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	429a      	cmp	r2, r3
 8006586:	d103      	bne.n	8006590 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2204      	movs	r2, #4
 800658c:	771a      	strb	r2, [r3, #28]
 800658e:	e007      	b.n	80065a0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	429a      	cmp	r2, r3
 8006598:	d102      	bne.n	80065a0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2208      	movs	r2, #8
 800659e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f7fb f8b1 	bl	8001708 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	771a      	strb	r2, [r3, #28]
}
 80065ac:	bf00      	nop
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a29      	ldr	r2, [pc, #164]	; (800666c <TIM_Base_SetConfig+0xb8>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d00b      	beq.n	80065e4 <TIM_Base_SetConfig+0x30>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d2:	d007      	beq.n	80065e4 <TIM_Base_SetConfig+0x30>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a26      	ldr	r2, [pc, #152]	; (8006670 <TIM_Base_SetConfig+0xbc>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d003      	beq.n	80065e4 <TIM_Base_SetConfig+0x30>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a25      	ldr	r2, [pc, #148]	; (8006674 <TIM_Base_SetConfig+0xc0>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d108      	bne.n	80065f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a1c      	ldr	r2, [pc, #112]	; (800666c <TIM_Base_SetConfig+0xb8>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00b      	beq.n	8006616 <TIM_Base_SetConfig+0x62>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006604:	d007      	beq.n	8006616 <TIM_Base_SetConfig+0x62>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a19      	ldr	r2, [pc, #100]	; (8006670 <TIM_Base_SetConfig+0xbc>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d003      	beq.n	8006616 <TIM_Base_SetConfig+0x62>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a18      	ldr	r2, [pc, #96]	; (8006674 <TIM_Base_SetConfig+0xc0>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d108      	bne.n	8006628 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800661c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	4313      	orrs	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a07      	ldr	r2, [pc, #28]	; (800666c <TIM_Base_SetConfig+0xb8>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d103      	bne.n	800665c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	691a      	ldr	r2, [r3, #16]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	615a      	str	r2, [r3, #20]
}
 8006662:	bf00      	nop
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	bc80      	pop	{r7}
 800666a:	4770      	bx	lr
 800666c:	40012c00 	.word	0x40012c00
 8006670:	40000400 	.word	0x40000400
 8006674:	40000800 	.word	0x40000800

08006678 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	f023 0201 	bic.w	r2, r3, #1
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 0303 	bic.w	r3, r3, #3
 80066ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f023 0302 	bic.w	r3, r3, #2
 80066c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a1c      	ldr	r2, [pc, #112]	; (8006740 <TIM_OC1_SetConfig+0xc8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d10c      	bne.n	80066ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f023 0308 	bic.w	r3, r3, #8
 80066da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f023 0304 	bic.w	r3, r3, #4
 80066ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a13      	ldr	r2, [pc, #76]	; (8006740 <TIM_OC1_SetConfig+0xc8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d111      	bne.n	800671a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	4313      	orrs	r3, r2
 800670e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	4313      	orrs	r3, r2
 8006718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	621a      	str	r2, [r3, #32]
}
 8006734:	bf00      	nop
 8006736:	371c      	adds	r7, #28
 8006738:	46bd      	mov	sp, r7
 800673a:	bc80      	pop	{r7}
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	40012c00 	.word	0x40012c00

08006744 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	f023 0210 	bic.w	r2, r3, #16
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800677a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	021b      	lsls	r3, r3, #8
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	4313      	orrs	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f023 0320 	bic.w	r3, r3, #32
 800678e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	4313      	orrs	r3, r2
 800679a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a1d      	ldr	r2, [pc, #116]	; (8006814 <TIM_OC2_SetConfig+0xd0>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d10d      	bne.n	80067c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	011b      	lsls	r3, r3, #4
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a14      	ldr	r2, [pc, #80]	; (8006814 <TIM_OC2_SetConfig+0xd0>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d113      	bne.n	80067f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	621a      	str	r2, [r3, #32]
}
 800680a:	bf00      	nop
 800680c:	371c      	adds	r7, #28
 800680e:	46bd      	mov	sp, r7
 8006810:	bc80      	pop	{r7}
 8006812:	4770      	bx	lr
 8006814:	40012c00 	.word	0x40012c00

08006818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 0303 	bic.w	r3, r3, #3
 800684e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	021b      	lsls	r3, r3, #8
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	4313      	orrs	r3, r2
 800686c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a1d      	ldr	r2, [pc, #116]	; (80068e8 <TIM_OC3_SetConfig+0xd0>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d10d      	bne.n	8006892 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800687c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	021b      	lsls	r3, r3, #8
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	4313      	orrs	r3, r2
 8006888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a14      	ldr	r2, [pc, #80]	; (80068e8 <TIM_OC3_SetConfig+0xd0>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d113      	bne.n	80068c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	621a      	str	r2, [r3, #32]
}
 80068dc:	bf00      	nop
 80068de:	371c      	adds	r7, #28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bc80      	pop	{r7}
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	40012c00 	.word	0x40012c00

080068ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800691a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	021b      	lsls	r3, r3, #8
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	4313      	orrs	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006936:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	031b      	lsls	r3, r3, #12
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a0f      	ldr	r2, [pc, #60]	; (8006984 <TIM_OC4_SetConfig+0x98>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d109      	bne.n	8006960 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006952:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	019b      	lsls	r3, r3, #6
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	4313      	orrs	r3, r2
 800695e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	621a      	str	r2, [r3, #32]
}
 800697a:	bf00      	nop
 800697c:	371c      	adds	r7, #28
 800697e:	46bd      	mov	sp, r7
 8006980:	bc80      	pop	{r7}
 8006982:	4770      	bx	lr
 8006984:	40012c00 	.word	0x40012c00

08006988 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006988:	b480      	push	{r7}
 800698a:	b087      	sub	sp, #28
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6a1b      	ldr	r3, [r3, #32]
 8006998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	f023 0201 	bic.w	r2, r3, #1
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	011b      	lsls	r3, r3, #4
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f023 030a 	bic.w	r3, r3, #10
 80069c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	621a      	str	r2, [r3, #32]
}
 80069da:	bf00      	nop
 80069dc:	371c      	adds	r7, #28
 80069de:	46bd      	mov	sp, r7
 80069e0:	bc80      	pop	{r7}
 80069e2:	4770      	bx	lr

080069e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	f023 0210 	bic.w	r2, r3, #16
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	031b      	lsls	r3, r3, #12
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a20:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	011b      	lsls	r3, r3, #4
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	621a      	str	r2, [r3, #32]
}
 8006a38:	bf00      	nop
 8006a3a:	371c      	adds	r7, #28
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bc80      	pop	{r7}
 8006a40:	4770      	bx	lr

08006a42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b085      	sub	sp, #20
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	f043 0307 	orr.w	r3, r3, #7
 8006a64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	609a      	str	r2, [r3, #8]
}
 8006a6c:	bf00      	nop
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bc80      	pop	{r7}
 8006a74:	4770      	bx	lr

08006a76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b087      	sub	sp, #28
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	60f8      	str	r0, [r7, #12]
 8006a7e:	60b9      	str	r1, [r7, #8]
 8006a80:	607a      	str	r2, [r7, #4]
 8006a82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	021a      	lsls	r2, r3, #8
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	609a      	str	r2, [r3, #8]
}
 8006aaa:	bf00      	nop
 8006aac:	371c      	adds	r7, #28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bc80      	pop	{r7}
 8006ab2:	4770      	bx	lr

08006ab4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f003 031f 	and.w	r3, r3, #31
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8006acc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6a1a      	ldr	r2, [r3, #32]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	43db      	mvns	r3, r3
 8006ad6:	401a      	ands	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6a1a      	ldr	r2, [r3, #32]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f003 031f 	and.w	r3, r3, #31
 8006ae6:	6879      	ldr	r1, [r7, #4]
 8006ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8006aec:	431a      	orrs	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	621a      	str	r2, [r3, #32]
}
 8006af2:	bf00      	nop
 8006af4:	371c      	adds	r7, #28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bc80      	pop	{r7}
 8006afa:	4770      	bx	lr

08006afc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d101      	bne.n	8006b14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b10:	2302      	movs	r3, #2
 8006b12:	e046      	b.n	8006ba2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a16      	ldr	r2, [pc, #88]	; (8006bac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00e      	beq.n	8006b76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b60:	d009      	beq.n	8006b76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a12      	ldr	r2, [pc, #72]	; (8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d004      	beq.n	8006b76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a10      	ldr	r2, [pc, #64]	; (8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d10c      	bne.n	8006b90 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bc80      	pop	{r7}
 8006baa:	4770      	bx	lr
 8006bac:	40012c00 	.word	0x40012c00
 8006bb0:	40000400 	.word	0x40000400
 8006bb4:	40000800 	.word	0x40000800

08006bb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d101      	bne.n	8006bd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e03d      	b.n	8006c50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bc80      	pop	{r7}
 8006c58:	4770      	bx	lr

08006c5a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b083      	sub	sp, #12
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c62:	bf00      	nop
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bc80      	pop	{r7}
 8006c6a:	4770      	bx	lr

08006c6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bc80      	pop	{r7}
 8006c7c:	4770      	bx	lr

08006c7e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b082      	sub	sp, #8
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e042      	b.n	8006d16 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d106      	bne.n	8006caa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f7fa ffa9 	bl	8001bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2224      	movs	r2, #36	; 0x24
 8006cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68da      	ldr	r2, [r3, #12]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cc0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fdc6 	bl	8007854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	691a      	ldr	r2, [r3, #16]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cd6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	695a      	ldr	r2, [r3, #20]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ce6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cf6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2220      	movs	r2, #32
 8006d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b08a      	sub	sp, #40	; 0x28
 8006d22:	af02      	add	r7, sp, #8
 8006d24:	60f8      	str	r0, [r7, #12]
 8006d26:	60b9      	str	r1, [r7, #8]
 8006d28:	603b      	str	r3, [r7, #0]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b20      	cmp	r3, #32
 8006d3c:	d16d      	bne.n	8006e1a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <HAL_UART_Transmit+0x2c>
 8006d44:	88fb      	ldrh	r3, [r7, #6]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e066      	b.n	8006e1c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2221      	movs	r2, #33	; 0x21
 8006d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d5c:	f7fb f97c 	bl	8002058 <HAL_GetTick>
 8006d60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	88fa      	ldrh	r2, [r7, #6]
 8006d66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	88fa      	ldrh	r2, [r7, #6]
 8006d6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d76:	d108      	bne.n	8006d8a <HAL_UART_Transmit+0x6c>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d104      	bne.n	8006d8a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d80:	2300      	movs	r3, #0
 8006d82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	61bb      	str	r3, [r7, #24]
 8006d88:	e003      	b.n	8006d92 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d92:	e02a      	b.n	8006dea <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2180      	movs	r1, #128	; 0x80
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f000 fb15 	bl	80073ce <UART_WaitOnFlagUntilTimeout>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e036      	b.n	8006e1c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10b      	bne.n	8006dcc <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	461a      	mov	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dc2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	3302      	adds	r3, #2
 8006dc8:	61bb      	str	r3, [r7, #24]
 8006dca:	e007      	b.n	8006ddc <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	781a      	ldrb	r2, [r3, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	3b01      	subs	r3, #1
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1cf      	bne.n	8006d94 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	2140      	movs	r1, #64	; 0x40
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f000 fae5 	bl	80073ce <UART_WaitOnFlagUntilTimeout>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e006      	b.n	8006e1c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	e000      	b.n	8006e1c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006e1a:	2302      	movs	r3, #2
  }
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3720      	adds	r7, #32
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b20      	cmp	r3, #32
 8006e3c:	d112      	bne.n	8006e64 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d002      	beq.n	8006e4a <HAL_UART_Receive_IT+0x26>
 8006e44:	88fb      	ldrh	r3, [r7, #6]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e00b      	b.n	8006e66 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e54:	88fb      	ldrh	r3, [r7, #6]
 8006e56:	461a      	mov	r2, r3
 8006e58:	68b9      	ldr	r1, [r7, #8]
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 fb25 	bl	80074aa <UART_Start_Receive_IT>
 8006e60:	4603      	mov	r3, r0
 8006e62:	e000      	b.n	8006e66 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006e64:	2302      	movs	r3, #2
  }
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
	...

08006e70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b0ba      	sub	sp, #232	; 0xe8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006e96:	2300      	movs	r3, #0
 8006e98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea6:	f003 030f 	and.w	r3, r3, #15
 8006eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006eae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10f      	bne.n	8006ed6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eba:	f003 0320 	and.w	r3, r3, #32
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d009      	beq.n	8006ed6 <HAL_UART_IRQHandler+0x66>
 8006ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec6:	f003 0320 	and.w	r3, r3, #32
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fc01 	bl	80076d6 <UART_Receive_IT>
      return;
 8006ed4:	e25b      	b.n	800738e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006ed6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 80de 	beq.w	800709c <HAL_UART_IRQHandler+0x22c>
 8006ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d106      	bne.n	8006efa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ef0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 80d1 	beq.w	800709c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00b      	beq.n	8006f1e <HAL_UART_IRQHandler+0xae>
 8006f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d005      	beq.n	8006f1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f16:	f043 0201 	orr.w	r2, r3, #1
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f22:	f003 0304 	and.w	r3, r3, #4
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00b      	beq.n	8006f42 <HAL_UART_IRQHandler+0xd2>
 8006f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d005      	beq.n	8006f42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f3a:	f043 0202 	orr.w	r2, r3, #2
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00b      	beq.n	8006f66 <HAL_UART_IRQHandler+0xf6>
 8006f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d005      	beq.n	8006f66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5e:	f043 0204 	orr.w	r2, r3, #4
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f6a:	f003 0308 	and.w	r3, r3, #8
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d011      	beq.n	8006f96 <HAL_UART_IRQHandler+0x126>
 8006f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f76:	f003 0320 	and.w	r3, r3, #32
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d105      	bne.n	8006f8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d005      	beq.n	8006f96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f8e:	f043 0208 	orr.w	r2, r3, #8
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 81f2 	beq.w	8007384 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa4:	f003 0320 	and.w	r3, r3, #32
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d008      	beq.n	8006fbe <HAL_UART_IRQHandler+0x14e>
 8006fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fb0:	f003 0320 	and.w	r3, r3, #32
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fb8c 	bl	80076d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	bf14      	ite	ne
 8006fcc:	2301      	movne	r3, #1
 8006fce:	2300      	moveq	r3, #0
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fda:	f003 0308 	and.w	r3, r3, #8
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d103      	bne.n	8006fea <HAL_UART_IRQHandler+0x17a>
 8006fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d04f      	beq.n	800708a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fa96 	bl	800751c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d041      	beq.n	8007082 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3314      	adds	r3, #20
 8007004:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007008:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007014:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800701c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3314      	adds	r3, #20
 8007026:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800702a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800702e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007032:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007036:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800703a:	e841 2300 	strex	r3, r2, [r1]
 800703e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1d9      	bne.n	8006ffe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704e:	2b00      	cmp	r3, #0
 8007050:	d013      	beq.n	800707a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007056:	4a7e      	ldr	r2, [pc, #504]	; (8007250 <HAL_UART_IRQHandler+0x3e0>)
 8007058:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800705e:	4618      	mov	r0, r3
 8007060:	f7fb fc3e 	bl	80028e0 <HAL_DMA_Abort_IT>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d016      	beq.n	8007098 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007074:	4610      	mov	r0, r2
 8007076:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007078:	e00e      	b.n	8007098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f993 	bl	80073a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007080:	e00a      	b.n	8007098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f98f 	bl	80073a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007088:	e006      	b.n	8007098 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f98b 	bl	80073a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007096:	e175      	b.n	8007384 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007098:	bf00      	nop
    return;
 800709a:	e173      	b.n	8007384 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	f040 814f 	bne.w	8007344 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80070a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070aa:	f003 0310 	and.w	r3, r3, #16
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f000 8148 	beq.w	8007344 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80070b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b8:	f003 0310 	and.w	r3, r3, #16
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 8141 	beq.w	8007344 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070c2:	2300      	movs	r3, #0
 80070c4:	60bb      	str	r3, [r7, #8]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	60bb      	str	r3, [r7, #8]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	60bb      	str	r3, [r7, #8]
 80070d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 80b6 	beq.w	8007254 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 8145 	beq.w	8007388 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007102:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007106:	429a      	cmp	r2, r3
 8007108:	f080 813e 	bcs.w	8007388 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007112:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	2b20      	cmp	r3, #32
 800711c:	f000 8088 	beq.w	8007230 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	330c      	adds	r3, #12
 8007126:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800712e:	e853 3f00 	ldrex	r3, [r3]
 8007132:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007136:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800713a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800713e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	330c      	adds	r3, #12
 8007148:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800714c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007150:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007154:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007158:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800715c:	e841 2300 	strex	r3, r2, [r1]
 8007160:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007164:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1d9      	bne.n	8007120 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3314      	adds	r3, #20
 8007172:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800717c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800717e:	f023 0301 	bic.w	r3, r3, #1
 8007182:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3314      	adds	r3, #20
 800718c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007190:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007194:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007196:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007198:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800719c:	e841 2300 	strex	r3, r2, [r1]
 80071a0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80071a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1e1      	bne.n	800716c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3314      	adds	r3, #20
 80071ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071b2:	e853 3f00 	ldrex	r3, [r3]
 80071b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3314      	adds	r3, #20
 80071c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80071cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80071ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071d4:	e841 2300 	strex	r3, r2, [r1]
 80071d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80071da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e3      	bne.n	80071a8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2220      	movs	r2, #32
 80071e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	330c      	adds	r3, #12
 80071f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071f8:	e853 3f00 	ldrex	r3, [r3]
 80071fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007200:	f023 0310 	bic.w	r3, r3, #16
 8007204:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	330c      	adds	r3, #12
 800720e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007212:	65ba      	str	r2, [r7, #88]	; 0x58
 8007214:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007216:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007218:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800721a:	e841 2300 	strex	r3, r2, [r1]
 800721e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007220:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1e3      	bne.n	80071ee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722a:	4618      	mov	r0, r3
 800722c:	f7fb fb1c 	bl	8002868 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800723e:	b29b      	uxth	r3, r3
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	b29b      	uxth	r3, r3
 8007244:	4619      	mov	r1, r3
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f8b6 	bl	80073b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800724c:	e09c      	b.n	8007388 <HAL_UART_IRQHandler+0x518>
 800724e:	bf00      	nop
 8007250:	080075e1 	.word	0x080075e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800725c:	b29b      	uxth	r3, r3
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007268:	b29b      	uxth	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 808e 	beq.w	800738c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007270:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 8089 	beq.w	800738c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	330c      	adds	r3, #12
 8007280:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007284:	e853 3f00 	ldrex	r3, [r3]
 8007288:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800728a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800728c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007290:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	330c      	adds	r3, #12
 800729a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800729e:	647a      	str	r2, [r7, #68]	; 0x44
 80072a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072a6:	e841 2300 	strex	r3, r2, [r1]
 80072aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1e3      	bne.n	800727a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3314      	adds	r3, #20
 80072b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	e853 3f00 	ldrex	r3, [r3]
 80072c0:	623b      	str	r3, [r7, #32]
   return(result);
 80072c2:	6a3b      	ldr	r3, [r7, #32]
 80072c4:	f023 0301 	bic.w	r3, r3, #1
 80072c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	3314      	adds	r3, #20
 80072d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80072d6:	633a      	str	r2, [r7, #48]	; 0x30
 80072d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072de:	e841 2300 	strex	r3, r2, [r1]
 80072e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1e3      	bne.n	80072b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2220      	movs	r2, #32
 80072ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	330c      	adds	r3, #12
 80072fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	e853 3f00 	ldrex	r3, [r3]
 8007306:	60fb      	str	r3, [r7, #12]
   return(result);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f023 0310 	bic.w	r3, r3, #16
 800730e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	330c      	adds	r3, #12
 8007318:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800731c:	61fa      	str	r2, [r7, #28]
 800731e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	69b9      	ldr	r1, [r7, #24]
 8007322:	69fa      	ldr	r2, [r7, #28]
 8007324:	e841 2300 	strex	r3, r2, [r1]
 8007328:	617b      	str	r3, [r7, #20]
   return(result);
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e3      	bne.n	80072f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007336:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f83b 	bl	80073b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007342:	e023      	b.n	800738c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800734c:	2b00      	cmp	r3, #0
 800734e:	d009      	beq.n	8007364 <HAL_UART_IRQHandler+0x4f4>
 8007350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f953 	bl	8007608 <UART_Transmit_IT>
    return;
 8007362:	e014      	b.n	800738e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00e      	beq.n	800738e <HAL_UART_IRQHandler+0x51e>
 8007370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007378:	2b00      	cmp	r3, #0
 800737a:	d008      	beq.n	800738e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f992 	bl	80076a6 <UART_EndTransmit_IT>
    return;
 8007382:	e004      	b.n	800738e <HAL_UART_IRQHandler+0x51e>
    return;
 8007384:	bf00      	nop
 8007386:	e002      	b.n	800738e <HAL_UART_IRQHandler+0x51e>
      return;
 8007388:	bf00      	nop
 800738a:	e000      	b.n	800738e <HAL_UART_IRQHandler+0x51e>
      return;
 800738c:	bf00      	nop
  }
}
 800738e:	37e8      	adds	r7, #232	; 0xe8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bc80      	pop	{r7}
 80073a4:	4770      	bx	lr

080073a6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b083      	sub	sp, #12
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073ae:	bf00      	nop
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bc80      	pop	{r7}
 80073b6:	4770      	bx	lr

080073b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bc80      	pop	{r7}
 80073cc:	4770      	bx	lr

080073ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b090      	sub	sp, #64	; 0x40
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	60f8      	str	r0, [r7, #12]
 80073d6:	60b9      	str	r1, [r7, #8]
 80073d8:	603b      	str	r3, [r7, #0]
 80073da:	4613      	mov	r3, r2
 80073dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073de:	e050      	b.n	8007482 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e6:	d04c      	beq.n	8007482 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80073e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d007      	beq.n	80073fe <UART_WaitOnFlagUntilTimeout+0x30>
 80073ee:	f7fa fe33 	bl	8002058 <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d241      	bcs.n	8007482 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	330c      	adds	r3, #12
 8007404:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	330c      	adds	r3, #12
 800741c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800741e:	637a      	str	r2, [r7, #52]	; 0x34
 8007420:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007422:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007424:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007426:	e841 2300 	strex	r3, r2, [r1]
 800742a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800742c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1e5      	bne.n	80073fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3314      	adds	r3, #20
 8007438:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	613b      	str	r3, [r7, #16]
   return(result);
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	f023 0301 	bic.w	r3, r3, #1
 8007448:	63bb      	str	r3, [r7, #56]	; 0x38
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3314      	adds	r3, #20
 8007450:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007452:	623a      	str	r2, [r7, #32]
 8007454:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	69f9      	ldr	r1, [r7, #28]
 8007458:	6a3a      	ldr	r2, [r7, #32]
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e5      	bne.n	8007432 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2220      	movs	r2, #32
 800746a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2220      	movs	r2, #32
 8007472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e00f      	b.n	80074a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	4013      	ands	r3, r2
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	429a      	cmp	r2, r3
 8007490:	bf0c      	ite	eq
 8007492:	2301      	moveq	r3, #1
 8007494:	2300      	movne	r3, #0
 8007496:	b2db      	uxtb	r3, r3
 8007498:	461a      	mov	r2, r3
 800749a:	79fb      	ldrb	r3, [r7, #7]
 800749c:	429a      	cmp	r2, r3
 800749e:	d09f      	beq.n	80073e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3740      	adds	r7, #64	; 0x40
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b085      	sub	sp, #20
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	60f8      	str	r0, [r7, #12]
 80074b2:	60b9      	str	r1, [r7, #8]
 80074b4:	4613      	mov	r3, r2
 80074b6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	88fa      	ldrh	r2, [r7, #6]
 80074c2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	88fa      	ldrh	r2, [r7, #6]
 80074c8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2222      	movs	r2, #34	; 0x22
 80074d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d007      	beq.n	80074f0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68da      	ldr	r2, [r3, #12]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074ee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	695a      	ldr	r2, [r3, #20]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f042 0201 	orr.w	r2, r2, #1
 80074fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f042 0220 	orr.w	r2, r2, #32
 800750e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	bc80      	pop	{r7}
 800751a:	4770      	bx	lr

0800751c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800751c:	b480      	push	{r7}
 800751e:	b095      	sub	sp, #84	; 0x54
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	330c      	adds	r3, #12
 800752a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752e:	e853 3f00 	ldrex	r3, [r3]
 8007532:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800753a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	330c      	adds	r3, #12
 8007542:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007544:	643a      	str	r2, [r7, #64]	; 0x40
 8007546:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007548:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800754a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800754c:	e841 2300 	strex	r3, r2, [r1]
 8007550:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1e5      	bne.n	8007524 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3314      	adds	r3, #20
 800755e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	e853 3f00 	ldrex	r3, [r3]
 8007566:	61fb      	str	r3, [r7, #28]
   return(result);
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	f023 0301 	bic.w	r3, r3, #1
 800756e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3314      	adds	r3, #20
 8007576:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007578:	62fa      	str	r2, [r7, #44]	; 0x2c
 800757a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800757e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e5      	bne.n	8007558 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007590:	2b01      	cmp	r3, #1
 8007592:	d119      	bne.n	80075c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	330c      	adds	r3, #12
 800759a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	e853 3f00 	ldrex	r3, [r3]
 80075a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f023 0310 	bic.w	r3, r3, #16
 80075aa:	647b      	str	r3, [r7, #68]	; 0x44
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	330c      	adds	r3, #12
 80075b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075b4:	61ba      	str	r2, [r7, #24]
 80075b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b8:	6979      	ldr	r1, [r7, #20]
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	e841 2300 	strex	r3, r2, [r1]
 80075c0:	613b      	str	r3, [r7, #16]
   return(result);
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1e5      	bne.n	8007594 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2220      	movs	r2, #32
 80075cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80075d6:	bf00      	nop
 80075d8:	3754      	adds	r7, #84	; 0x54
 80075da:	46bd      	mov	sp, r7
 80075dc:	bc80      	pop	{r7}
 80075de:	4770      	bx	lr

080075e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f7ff fed3 	bl	80073a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007600:	bf00      	nop
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b21      	cmp	r3, #33	; 0x21
 800761a:	d13e      	bne.n	800769a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007624:	d114      	bne.n	8007650 <UART_Transmit_IT+0x48>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d110      	bne.n	8007650 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	881b      	ldrh	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007642:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a1b      	ldr	r3, [r3, #32]
 8007648:	1c9a      	adds	r2, r3, #2
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	621a      	str	r2, [r3, #32]
 800764e:	e008      	b.n	8007662 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	1c59      	adds	r1, r3, #1
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	6211      	str	r1, [r2, #32]
 800765a:	781a      	ldrb	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007666:	b29b      	uxth	r3, r3
 8007668:	3b01      	subs	r3, #1
 800766a:	b29b      	uxth	r3, r3
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	4619      	mov	r1, r3
 8007670:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10f      	bne.n	8007696 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007684:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68da      	ldr	r2, [r3, #12]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007694:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	e000      	b.n	800769c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800769a:	2302      	movs	r3, #2
  }
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bc80      	pop	{r7}
 80076a4:	4770      	bx	lr

080076a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b082      	sub	sp, #8
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68da      	ldr	r2, [r3, #12]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2220      	movs	r2, #32
 80076c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7ff fe64 	bl	8007394 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b08c      	sub	sp, #48	; 0x30
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b22      	cmp	r3, #34	; 0x22
 80076e8:	f040 80ae 	bne.w	8007848 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076f4:	d117      	bne.n	8007726 <UART_Receive_IT+0x50>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d113      	bne.n	8007726 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80076fe:	2300      	movs	r3, #0
 8007700:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007706:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	b29b      	uxth	r3, r3
 8007710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007714:	b29a      	uxth	r2, r3
 8007716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007718:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771e:	1c9a      	adds	r2, r3, #2
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	629a      	str	r2, [r3, #40]	; 0x28
 8007724:	e026      	b.n	8007774 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800772c:	2300      	movs	r3, #0
 800772e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007738:	d007      	beq.n	800774a <UART_Receive_IT+0x74>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10a      	bne.n	8007758 <UART_Receive_IT+0x82>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d106      	bne.n	8007758 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	b2da      	uxtb	r2, r3
 8007752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007754:	701a      	strb	r2, [r3, #0]
 8007756:	e008      	b.n	800776a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	b2db      	uxtb	r3, r3
 8007760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007764:	b2da      	uxtb	r2, r3
 8007766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007768:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007778:	b29b      	uxth	r3, r3
 800777a:	3b01      	subs	r3, #1
 800777c:	b29b      	uxth	r3, r3
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	4619      	mov	r1, r3
 8007782:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007784:	2b00      	cmp	r3, #0
 8007786:	d15d      	bne.n	8007844 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68da      	ldr	r2, [r3, #12]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 0220 	bic.w	r2, r2, #32
 8007796:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68da      	ldr	r2, [r3, #12]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	695a      	ldr	r2, [r3, #20]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 0201 	bic.w	r2, r2, #1
 80077b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2220      	movs	r2, #32
 80077bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d135      	bne.n	800783a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	330c      	adds	r3, #12
 80077da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	e853 3f00 	ldrex	r3, [r3]
 80077e2:	613b      	str	r3, [r7, #16]
   return(result);
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	f023 0310 	bic.w	r3, r3, #16
 80077ea:	627b      	str	r3, [r7, #36]	; 0x24
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	330c      	adds	r3, #12
 80077f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077f4:	623a      	str	r2, [r7, #32]
 80077f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f8:	69f9      	ldr	r1, [r7, #28]
 80077fa:	6a3a      	ldr	r2, [r7, #32]
 80077fc:	e841 2300 	strex	r3, r2, [r1]
 8007800:	61bb      	str	r3, [r7, #24]
   return(result);
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1e5      	bne.n	80077d4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 0310 	and.w	r3, r3, #16
 8007812:	2b10      	cmp	r3, #16
 8007814:	d10a      	bne.n	800782c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007816:	2300      	movs	r3, #0
 8007818:	60fb      	str	r3, [r7, #12]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	60fb      	str	r3, [r7, #12]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	60fb      	str	r3, [r7, #12]
 800782a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007830:	4619      	mov	r1, r3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7ff fdc0 	bl	80073b8 <HAL_UARTEx_RxEventCallback>
 8007838:	e002      	b.n	8007840 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7f9 fa8c 	bl	8000d58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007840:	2300      	movs	r3, #0
 8007842:	e002      	b.n	800784a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007844:	2300      	movs	r3, #0
 8007846:	e000      	b.n	800784a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007848:	2302      	movs	r3, #2
  }
}
 800784a:	4618      	mov	r0, r3
 800784c:	3730      	adds	r7, #48	; 0x30
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
	...

08007854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68da      	ldr	r2, [r3, #12]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	430a      	orrs	r2, r1
 8007870:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	431a      	orrs	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	4313      	orrs	r3, r2
 8007882:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800788e:	f023 030c 	bic.w	r3, r3, #12
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	6812      	ldr	r2, [r2, #0]
 8007896:	68b9      	ldr	r1, [r7, #8]
 8007898:	430b      	orrs	r3, r1
 800789a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	699a      	ldr	r2, [r3, #24]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	430a      	orrs	r2, r1
 80078b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a2c      	ldr	r2, [pc, #176]	; (8007968 <UART_SetConfig+0x114>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d103      	bne.n	80078c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80078bc:	f7fd fdba 	bl	8005434 <HAL_RCC_GetPCLK2Freq>
 80078c0:	60f8      	str	r0, [r7, #12]
 80078c2:	e002      	b.n	80078ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80078c4:	f7fd fda2 	bl	800540c <HAL_RCC_GetPCLK1Freq>
 80078c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	4613      	mov	r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	4413      	add	r3, r2
 80078d2:	009a      	lsls	r2, r3, #2
 80078d4:	441a      	add	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e0:	4a22      	ldr	r2, [pc, #136]	; (800796c <UART_SetConfig+0x118>)
 80078e2:	fba2 2303 	umull	r2, r3, r2, r3
 80078e6:	095b      	lsrs	r3, r3, #5
 80078e8:	0119      	lsls	r1, r3, #4
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	4613      	mov	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4413      	add	r3, r2
 80078f2:	009a      	lsls	r2, r3, #2
 80078f4:	441a      	add	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007900:	4b1a      	ldr	r3, [pc, #104]	; (800796c <UART_SetConfig+0x118>)
 8007902:	fba3 0302 	umull	r0, r3, r3, r2
 8007906:	095b      	lsrs	r3, r3, #5
 8007908:	2064      	movs	r0, #100	; 0x64
 800790a:	fb00 f303 	mul.w	r3, r0, r3
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	011b      	lsls	r3, r3, #4
 8007912:	3332      	adds	r3, #50	; 0x32
 8007914:	4a15      	ldr	r2, [pc, #84]	; (800796c <UART_SetConfig+0x118>)
 8007916:	fba2 2303 	umull	r2, r3, r2, r3
 800791a:	095b      	lsrs	r3, r3, #5
 800791c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007920:	4419      	add	r1, r3
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	4613      	mov	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	009a      	lsls	r2, r3, #2
 800792c:	441a      	add	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	fbb2 f2f3 	udiv	r2, r2, r3
 8007938:	4b0c      	ldr	r3, [pc, #48]	; (800796c <UART_SetConfig+0x118>)
 800793a:	fba3 0302 	umull	r0, r3, r3, r2
 800793e:	095b      	lsrs	r3, r3, #5
 8007940:	2064      	movs	r0, #100	; 0x64
 8007942:	fb00 f303 	mul.w	r3, r0, r3
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	011b      	lsls	r3, r3, #4
 800794a:	3332      	adds	r3, #50	; 0x32
 800794c:	4a07      	ldr	r2, [pc, #28]	; (800796c <UART_SetConfig+0x118>)
 800794e:	fba2 2303 	umull	r2, r3, r2, r3
 8007952:	095b      	lsrs	r3, r3, #5
 8007954:	f003 020f 	and.w	r2, r3, #15
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	440a      	add	r2, r1
 800795e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007960:	bf00      	nop
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	40013800 	.word	0x40013800
 800796c:	51eb851f 	.word	0x51eb851f

08007970 <__errno>:
 8007970:	4b01      	ldr	r3, [pc, #4]	; (8007978 <__errno+0x8>)
 8007972:	6818      	ldr	r0, [r3, #0]
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	20000018 	.word	0x20000018

0800797c <__libc_init_array>:
 800797c:	b570      	push	{r4, r5, r6, lr}
 800797e:	2600      	movs	r6, #0
 8007980:	4d0c      	ldr	r5, [pc, #48]	; (80079b4 <__libc_init_array+0x38>)
 8007982:	4c0d      	ldr	r4, [pc, #52]	; (80079b8 <__libc_init_array+0x3c>)
 8007984:	1b64      	subs	r4, r4, r5
 8007986:	10a4      	asrs	r4, r4, #2
 8007988:	42a6      	cmp	r6, r4
 800798a:	d109      	bne.n	80079a0 <__libc_init_array+0x24>
 800798c:	f002 fd30 	bl	800a3f0 <_init>
 8007990:	2600      	movs	r6, #0
 8007992:	4d0a      	ldr	r5, [pc, #40]	; (80079bc <__libc_init_array+0x40>)
 8007994:	4c0a      	ldr	r4, [pc, #40]	; (80079c0 <__libc_init_array+0x44>)
 8007996:	1b64      	subs	r4, r4, r5
 8007998:	10a4      	asrs	r4, r4, #2
 800799a:	42a6      	cmp	r6, r4
 800799c:	d105      	bne.n	80079aa <__libc_init_array+0x2e>
 800799e:	bd70      	pop	{r4, r5, r6, pc}
 80079a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a4:	4798      	blx	r3
 80079a6:	3601      	adds	r6, #1
 80079a8:	e7ee      	b.n	8007988 <__libc_init_array+0xc>
 80079aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ae:	4798      	blx	r3
 80079b0:	3601      	adds	r6, #1
 80079b2:	e7f2      	b.n	800799a <__libc_init_array+0x1e>
 80079b4:	0800a80c 	.word	0x0800a80c
 80079b8:	0800a80c 	.word	0x0800a80c
 80079bc:	0800a80c 	.word	0x0800a80c
 80079c0:	0800a810 	.word	0x0800a810

080079c4 <memset>:
 80079c4:	4603      	mov	r3, r0
 80079c6:	4402      	add	r2, r0
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d100      	bne.n	80079ce <memset+0xa>
 80079cc:	4770      	bx	lr
 80079ce:	f803 1b01 	strb.w	r1, [r3], #1
 80079d2:	e7f9      	b.n	80079c8 <memset+0x4>

080079d4 <__cvt>:
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079da:	461f      	mov	r7, r3
 80079dc:	bfbb      	ittet	lt
 80079de:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80079e2:	461f      	movlt	r7, r3
 80079e4:	2300      	movge	r3, #0
 80079e6:	232d      	movlt	r3, #45	; 0x2d
 80079e8:	b088      	sub	sp, #32
 80079ea:	4614      	mov	r4, r2
 80079ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80079f0:	7013      	strb	r3, [r2, #0]
 80079f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80079f8:	f023 0820 	bic.w	r8, r3, #32
 80079fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a00:	d005      	beq.n	8007a0e <__cvt+0x3a>
 8007a02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007a06:	d100      	bne.n	8007a0a <__cvt+0x36>
 8007a08:	3501      	adds	r5, #1
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	e000      	b.n	8007a10 <__cvt+0x3c>
 8007a0e:	2303      	movs	r3, #3
 8007a10:	aa07      	add	r2, sp, #28
 8007a12:	9204      	str	r2, [sp, #16]
 8007a14:	aa06      	add	r2, sp, #24
 8007a16:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007a1a:	e9cd 3500 	strd	r3, r5, [sp]
 8007a1e:	4622      	mov	r2, r4
 8007a20:	463b      	mov	r3, r7
 8007a22:	f000 fcc5 	bl	80083b0 <_dtoa_r>
 8007a26:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	d102      	bne.n	8007a34 <__cvt+0x60>
 8007a2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a30:	07db      	lsls	r3, r3, #31
 8007a32:	d522      	bpl.n	8007a7a <__cvt+0xa6>
 8007a34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a38:	eb06 0905 	add.w	r9, r6, r5
 8007a3c:	d110      	bne.n	8007a60 <__cvt+0x8c>
 8007a3e:	7833      	ldrb	r3, [r6, #0]
 8007a40:	2b30      	cmp	r3, #48	; 0x30
 8007a42:	d10a      	bne.n	8007a5a <__cvt+0x86>
 8007a44:	2200      	movs	r2, #0
 8007a46:	2300      	movs	r3, #0
 8007a48:	4620      	mov	r0, r4
 8007a4a:	4639      	mov	r1, r7
 8007a4c:	f7f8 ffac 	bl	80009a8 <__aeabi_dcmpeq>
 8007a50:	b918      	cbnz	r0, 8007a5a <__cvt+0x86>
 8007a52:	f1c5 0501 	rsb	r5, r5, #1
 8007a56:	f8ca 5000 	str.w	r5, [sl]
 8007a5a:	f8da 3000 	ldr.w	r3, [sl]
 8007a5e:	4499      	add	r9, r3
 8007a60:	2200      	movs	r2, #0
 8007a62:	2300      	movs	r3, #0
 8007a64:	4620      	mov	r0, r4
 8007a66:	4639      	mov	r1, r7
 8007a68:	f7f8 ff9e 	bl	80009a8 <__aeabi_dcmpeq>
 8007a6c:	b108      	cbz	r0, 8007a72 <__cvt+0x9e>
 8007a6e:	f8cd 901c 	str.w	r9, [sp, #28]
 8007a72:	2230      	movs	r2, #48	; 0x30
 8007a74:	9b07      	ldr	r3, [sp, #28]
 8007a76:	454b      	cmp	r3, r9
 8007a78:	d307      	bcc.n	8007a8a <__cvt+0xb6>
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	9b07      	ldr	r3, [sp, #28]
 8007a7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007a80:	1b9b      	subs	r3, r3, r6
 8007a82:	6013      	str	r3, [r2, #0]
 8007a84:	b008      	add	sp, #32
 8007a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a8a:	1c59      	adds	r1, r3, #1
 8007a8c:	9107      	str	r1, [sp, #28]
 8007a8e:	701a      	strb	r2, [r3, #0]
 8007a90:	e7f0      	b.n	8007a74 <__cvt+0xa0>

08007a92 <__exponent>:
 8007a92:	4603      	mov	r3, r0
 8007a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a96:	2900      	cmp	r1, #0
 8007a98:	f803 2b02 	strb.w	r2, [r3], #2
 8007a9c:	bfb6      	itet	lt
 8007a9e:	222d      	movlt	r2, #45	; 0x2d
 8007aa0:	222b      	movge	r2, #43	; 0x2b
 8007aa2:	4249      	neglt	r1, r1
 8007aa4:	2909      	cmp	r1, #9
 8007aa6:	7042      	strb	r2, [r0, #1]
 8007aa8:	dd2b      	ble.n	8007b02 <__exponent+0x70>
 8007aaa:	f10d 0407 	add.w	r4, sp, #7
 8007aae:	46a4      	mov	ip, r4
 8007ab0:	270a      	movs	r7, #10
 8007ab2:	fb91 f6f7 	sdiv	r6, r1, r7
 8007ab6:	460a      	mov	r2, r1
 8007ab8:	46a6      	mov	lr, r4
 8007aba:	fb07 1516 	mls	r5, r7, r6, r1
 8007abe:	2a63      	cmp	r2, #99	; 0x63
 8007ac0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007ac4:	4631      	mov	r1, r6
 8007ac6:	f104 34ff 	add.w	r4, r4, #4294967295
 8007aca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007ace:	dcf0      	bgt.n	8007ab2 <__exponent+0x20>
 8007ad0:	3130      	adds	r1, #48	; 0x30
 8007ad2:	f1ae 0502 	sub.w	r5, lr, #2
 8007ad6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007ada:	4629      	mov	r1, r5
 8007adc:	1c44      	adds	r4, r0, #1
 8007ade:	4561      	cmp	r1, ip
 8007ae0:	d30a      	bcc.n	8007af8 <__exponent+0x66>
 8007ae2:	f10d 0209 	add.w	r2, sp, #9
 8007ae6:	eba2 020e 	sub.w	r2, r2, lr
 8007aea:	4565      	cmp	r5, ip
 8007aec:	bf88      	it	hi
 8007aee:	2200      	movhi	r2, #0
 8007af0:	4413      	add	r3, r2
 8007af2:	1a18      	subs	r0, r3, r0
 8007af4:	b003      	add	sp, #12
 8007af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007af8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007afc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007b00:	e7ed      	b.n	8007ade <__exponent+0x4c>
 8007b02:	2330      	movs	r3, #48	; 0x30
 8007b04:	3130      	adds	r1, #48	; 0x30
 8007b06:	7083      	strb	r3, [r0, #2]
 8007b08:	70c1      	strb	r1, [r0, #3]
 8007b0a:	1d03      	adds	r3, r0, #4
 8007b0c:	e7f1      	b.n	8007af2 <__exponent+0x60>
	...

08007b10 <_printf_float>:
 8007b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b14:	b091      	sub	sp, #68	; 0x44
 8007b16:	460c      	mov	r4, r1
 8007b18:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007b1c:	4616      	mov	r6, r2
 8007b1e:	461f      	mov	r7, r3
 8007b20:	4605      	mov	r5, r0
 8007b22:	f001 fa33 	bl	8008f8c <_localeconv_r>
 8007b26:	6803      	ldr	r3, [r0, #0]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b2c:	f7f8 fb10 	bl	8000150 <strlen>
 8007b30:	2300      	movs	r3, #0
 8007b32:	930e      	str	r3, [sp, #56]	; 0x38
 8007b34:	f8d8 3000 	ldr.w	r3, [r8]
 8007b38:	900a      	str	r0, [sp, #40]	; 0x28
 8007b3a:	3307      	adds	r3, #7
 8007b3c:	f023 0307 	bic.w	r3, r3, #7
 8007b40:	f103 0208 	add.w	r2, r3, #8
 8007b44:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007b48:	f8d4 b000 	ldr.w	fp, [r4]
 8007b4c:	f8c8 2000 	str.w	r2, [r8]
 8007b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b54:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007b58:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007b5c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007b60:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b62:	f04f 32ff 	mov.w	r2, #4294967295
 8007b66:	4640      	mov	r0, r8
 8007b68:	4b9c      	ldr	r3, [pc, #624]	; (8007ddc <_printf_float+0x2cc>)
 8007b6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b6c:	f7f8 ff4e 	bl	8000a0c <__aeabi_dcmpun>
 8007b70:	bb70      	cbnz	r0, 8007bd0 <_printf_float+0xc0>
 8007b72:	f04f 32ff 	mov.w	r2, #4294967295
 8007b76:	4640      	mov	r0, r8
 8007b78:	4b98      	ldr	r3, [pc, #608]	; (8007ddc <_printf_float+0x2cc>)
 8007b7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b7c:	f7f8 ff28 	bl	80009d0 <__aeabi_dcmple>
 8007b80:	bb30      	cbnz	r0, 8007bd0 <_printf_float+0xc0>
 8007b82:	2200      	movs	r2, #0
 8007b84:	2300      	movs	r3, #0
 8007b86:	4640      	mov	r0, r8
 8007b88:	4651      	mov	r1, sl
 8007b8a:	f7f8 ff17 	bl	80009bc <__aeabi_dcmplt>
 8007b8e:	b110      	cbz	r0, 8007b96 <_printf_float+0x86>
 8007b90:	232d      	movs	r3, #45	; 0x2d
 8007b92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b96:	4b92      	ldr	r3, [pc, #584]	; (8007de0 <_printf_float+0x2d0>)
 8007b98:	4892      	ldr	r0, [pc, #584]	; (8007de4 <_printf_float+0x2d4>)
 8007b9a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007b9e:	bf94      	ite	ls
 8007ba0:	4698      	movls	r8, r3
 8007ba2:	4680      	movhi	r8, r0
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	f04f 0a00 	mov.w	sl, #0
 8007baa:	6123      	str	r3, [r4, #16]
 8007bac:	f02b 0304 	bic.w	r3, fp, #4
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	4633      	mov	r3, r6
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	9700      	str	r7, [sp, #0]
 8007bba:	aa0f      	add	r2, sp, #60	; 0x3c
 8007bbc:	f000 f9d4 	bl	8007f68 <_printf_common>
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	f040 8090 	bne.w	8007ce6 <_printf_float+0x1d6>
 8007bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bca:	b011      	add	sp, #68	; 0x44
 8007bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd0:	4642      	mov	r2, r8
 8007bd2:	4653      	mov	r3, sl
 8007bd4:	4640      	mov	r0, r8
 8007bd6:	4651      	mov	r1, sl
 8007bd8:	f7f8 ff18 	bl	8000a0c <__aeabi_dcmpun>
 8007bdc:	b148      	cbz	r0, 8007bf2 <_printf_float+0xe2>
 8007bde:	f1ba 0f00 	cmp.w	sl, #0
 8007be2:	bfb8      	it	lt
 8007be4:	232d      	movlt	r3, #45	; 0x2d
 8007be6:	4880      	ldr	r0, [pc, #512]	; (8007de8 <_printf_float+0x2d8>)
 8007be8:	bfb8      	it	lt
 8007bea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007bee:	4b7f      	ldr	r3, [pc, #508]	; (8007dec <_printf_float+0x2dc>)
 8007bf0:	e7d3      	b.n	8007b9a <_printf_float+0x8a>
 8007bf2:	6863      	ldr	r3, [r4, #4]
 8007bf4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007bf8:	1c5a      	adds	r2, r3, #1
 8007bfa:	d142      	bne.n	8007c82 <_printf_float+0x172>
 8007bfc:	2306      	movs	r3, #6
 8007bfe:	6063      	str	r3, [r4, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	9206      	str	r2, [sp, #24]
 8007c04:	aa0e      	add	r2, sp, #56	; 0x38
 8007c06:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007c0a:	aa0d      	add	r2, sp, #52	; 0x34
 8007c0c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007c10:	9203      	str	r2, [sp, #12]
 8007c12:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007c16:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007c1a:	6023      	str	r3, [r4, #0]
 8007c1c:	6863      	ldr	r3, [r4, #4]
 8007c1e:	4642      	mov	r2, r8
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	4628      	mov	r0, r5
 8007c24:	4653      	mov	r3, sl
 8007c26:	910b      	str	r1, [sp, #44]	; 0x2c
 8007c28:	f7ff fed4 	bl	80079d4 <__cvt>
 8007c2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c2e:	4680      	mov	r8, r0
 8007c30:	2947      	cmp	r1, #71	; 0x47
 8007c32:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007c34:	d108      	bne.n	8007c48 <_printf_float+0x138>
 8007c36:	1cc8      	adds	r0, r1, #3
 8007c38:	db02      	blt.n	8007c40 <_printf_float+0x130>
 8007c3a:	6863      	ldr	r3, [r4, #4]
 8007c3c:	4299      	cmp	r1, r3
 8007c3e:	dd40      	ble.n	8007cc2 <_printf_float+0x1b2>
 8007c40:	f1a9 0902 	sub.w	r9, r9, #2
 8007c44:	fa5f f989 	uxtb.w	r9, r9
 8007c48:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007c4c:	d81f      	bhi.n	8007c8e <_printf_float+0x17e>
 8007c4e:	464a      	mov	r2, r9
 8007c50:	3901      	subs	r1, #1
 8007c52:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007c56:	910d      	str	r1, [sp, #52]	; 0x34
 8007c58:	f7ff ff1b 	bl	8007a92 <__exponent>
 8007c5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c5e:	4682      	mov	sl, r0
 8007c60:	1813      	adds	r3, r2, r0
 8007c62:	2a01      	cmp	r2, #1
 8007c64:	6123      	str	r3, [r4, #16]
 8007c66:	dc02      	bgt.n	8007c6e <_printf_float+0x15e>
 8007c68:	6822      	ldr	r2, [r4, #0]
 8007c6a:	07d2      	lsls	r2, r2, #31
 8007c6c:	d501      	bpl.n	8007c72 <_printf_float+0x162>
 8007c6e:	3301      	adds	r3, #1
 8007c70:	6123      	str	r3, [r4, #16]
 8007c72:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d09b      	beq.n	8007bb2 <_printf_float+0xa2>
 8007c7a:	232d      	movs	r3, #45	; 0x2d
 8007c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c80:	e797      	b.n	8007bb2 <_printf_float+0xa2>
 8007c82:	2947      	cmp	r1, #71	; 0x47
 8007c84:	d1bc      	bne.n	8007c00 <_printf_float+0xf0>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1ba      	bne.n	8007c00 <_printf_float+0xf0>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e7b7      	b.n	8007bfe <_printf_float+0xee>
 8007c8e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007c92:	d118      	bne.n	8007cc6 <_printf_float+0x1b6>
 8007c94:	2900      	cmp	r1, #0
 8007c96:	6863      	ldr	r3, [r4, #4]
 8007c98:	dd0b      	ble.n	8007cb2 <_printf_float+0x1a2>
 8007c9a:	6121      	str	r1, [r4, #16]
 8007c9c:	b913      	cbnz	r3, 8007ca4 <_printf_float+0x194>
 8007c9e:	6822      	ldr	r2, [r4, #0]
 8007ca0:	07d0      	lsls	r0, r2, #31
 8007ca2:	d502      	bpl.n	8007caa <_printf_float+0x19a>
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	440b      	add	r3, r1
 8007ca8:	6123      	str	r3, [r4, #16]
 8007caa:	f04f 0a00 	mov.w	sl, #0
 8007cae:	65a1      	str	r1, [r4, #88]	; 0x58
 8007cb0:	e7df      	b.n	8007c72 <_printf_float+0x162>
 8007cb2:	b913      	cbnz	r3, 8007cba <_printf_float+0x1aa>
 8007cb4:	6822      	ldr	r2, [r4, #0]
 8007cb6:	07d2      	lsls	r2, r2, #31
 8007cb8:	d501      	bpl.n	8007cbe <_printf_float+0x1ae>
 8007cba:	3302      	adds	r3, #2
 8007cbc:	e7f4      	b.n	8007ca8 <_printf_float+0x198>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e7f2      	b.n	8007ca8 <_printf_float+0x198>
 8007cc2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007cc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cc8:	4299      	cmp	r1, r3
 8007cca:	db05      	blt.n	8007cd8 <_printf_float+0x1c8>
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	6121      	str	r1, [r4, #16]
 8007cd0:	07d8      	lsls	r0, r3, #31
 8007cd2:	d5ea      	bpl.n	8007caa <_printf_float+0x19a>
 8007cd4:	1c4b      	adds	r3, r1, #1
 8007cd6:	e7e7      	b.n	8007ca8 <_printf_float+0x198>
 8007cd8:	2900      	cmp	r1, #0
 8007cda:	bfcc      	ite	gt
 8007cdc:	2201      	movgt	r2, #1
 8007cde:	f1c1 0202 	rsble	r2, r1, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	e7e0      	b.n	8007ca8 <_printf_float+0x198>
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	055a      	lsls	r2, r3, #21
 8007cea:	d407      	bmi.n	8007cfc <_printf_float+0x1ec>
 8007cec:	6923      	ldr	r3, [r4, #16]
 8007cee:	4642      	mov	r2, r8
 8007cf0:	4631      	mov	r1, r6
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	47b8      	blx	r7
 8007cf6:	3001      	adds	r0, #1
 8007cf8:	d12b      	bne.n	8007d52 <_printf_float+0x242>
 8007cfa:	e764      	b.n	8007bc6 <_printf_float+0xb6>
 8007cfc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007d00:	f240 80dd 	bls.w	8007ebe <_printf_float+0x3ae>
 8007d04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	f7f8 fe4c 	bl	80009a8 <__aeabi_dcmpeq>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	d033      	beq.n	8007d7c <_printf_float+0x26c>
 8007d14:	2301      	movs	r3, #1
 8007d16:	4631      	mov	r1, r6
 8007d18:	4628      	mov	r0, r5
 8007d1a:	4a35      	ldr	r2, [pc, #212]	; (8007df0 <_printf_float+0x2e0>)
 8007d1c:	47b8      	blx	r7
 8007d1e:	3001      	adds	r0, #1
 8007d20:	f43f af51 	beq.w	8007bc6 <_printf_float+0xb6>
 8007d24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	db02      	blt.n	8007d32 <_printf_float+0x222>
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	07d8      	lsls	r0, r3, #31
 8007d30:	d50f      	bpl.n	8007d52 <_printf_float+0x242>
 8007d32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d36:	4631      	mov	r1, r6
 8007d38:	4628      	mov	r0, r5
 8007d3a:	47b8      	blx	r7
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	f43f af42 	beq.w	8007bc6 <_printf_float+0xb6>
 8007d42:	f04f 0800 	mov.w	r8, #0
 8007d46:	f104 091a 	add.w	r9, r4, #26
 8007d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	4543      	cmp	r3, r8
 8007d50:	dc09      	bgt.n	8007d66 <_printf_float+0x256>
 8007d52:	6823      	ldr	r3, [r4, #0]
 8007d54:	079b      	lsls	r3, r3, #30
 8007d56:	f100 8102 	bmi.w	8007f5e <_printf_float+0x44e>
 8007d5a:	68e0      	ldr	r0, [r4, #12]
 8007d5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d5e:	4298      	cmp	r0, r3
 8007d60:	bfb8      	it	lt
 8007d62:	4618      	movlt	r0, r3
 8007d64:	e731      	b.n	8007bca <_printf_float+0xba>
 8007d66:	2301      	movs	r3, #1
 8007d68:	464a      	mov	r2, r9
 8007d6a:	4631      	mov	r1, r6
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	47b8      	blx	r7
 8007d70:	3001      	adds	r0, #1
 8007d72:	f43f af28 	beq.w	8007bc6 <_printf_float+0xb6>
 8007d76:	f108 0801 	add.w	r8, r8, #1
 8007d7a:	e7e6      	b.n	8007d4a <_printf_float+0x23a>
 8007d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	dc38      	bgt.n	8007df4 <_printf_float+0x2e4>
 8007d82:	2301      	movs	r3, #1
 8007d84:	4631      	mov	r1, r6
 8007d86:	4628      	mov	r0, r5
 8007d88:	4a19      	ldr	r2, [pc, #100]	; (8007df0 <_printf_float+0x2e0>)
 8007d8a:	47b8      	blx	r7
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	f43f af1a 	beq.w	8007bc6 <_printf_float+0xb6>
 8007d92:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007d96:	4313      	orrs	r3, r2
 8007d98:	d102      	bne.n	8007da0 <_printf_float+0x290>
 8007d9a:	6823      	ldr	r3, [r4, #0]
 8007d9c:	07d9      	lsls	r1, r3, #31
 8007d9e:	d5d8      	bpl.n	8007d52 <_printf_float+0x242>
 8007da0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007da4:	4631      	mov	r1, r6
 8007da6:	4628      	mov	r0, r5
 8007da8:	47b8      	blx	r7
 8007daa:	3001      	adds	r0, #1
 8007dac:	f43f af0b 	beq.w	8007bc6 <_printf_float+0xb6>
 8007db0:	f04f 0900 	mov.w	r9, #0
 8007db4:	f104 0a1a 	add.w	sl, r4, #26
 8007db8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dba:	425b      	negs	r3, r3
 8007dbc:	454b      	cmp	r3, r9
 8007dbe:	dc01      	bgt.n	8007dc4 <_printf_float+0x2b4>
 8007dc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dc2:	e794      	b.n	8007cee <_printf_float+0x1de>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	4652      	mov	r2, sl
 8007dc8:	4631      	mov	r1, r6
 8007dca:	4628      	mov	r0, r5
 8007dcc:	47b8      	blx	r7
 8007dce:	3001      	adds	r0, #1
 8007dd0:	f43f aef9 	beq.w	8007bc6 <_printf_float+0xb6>
 8007dd4:	f109 0901 	add.w	r9, r9, #1
 8007dd8:	e7ee      	b.n	8007db8 <_printf_float+0x2a8>
 8007dda:	bf00      	nop
 8007ddc:	7fefffff 	.word	0x7fefffff
 8007de0:	0800a438 	.word	0x0800a438
 8007de4:	0800a43c 	.word	0x0800a43c
 8007de8:	0800a444 	.word	0x0800a444
 8007dec:	0800a440 	.word	0x0800a440
 8007df0:	0800a448 	.word	0x0800a448
 8007df4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007df6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	bfa8      	it	ge
 8007dfc:	461a      	movge	r2, r3
 8007dfe:	2a00      	cmp	r2, #0
 8007e00:	4691      	mov	r9, r2
 8007e02:	dc37      	bgt.n	8007e74 <_printf_float+0x364>
 8007e04:	f04f 0b00 	mov.w	fp, #0
 8007e08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e0c:	f104 021a 	add.w	r2, r4, #26
 8007e10:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007e14:	ebaa 0309 	sub.w	r3, sl, r9
 8007e18:	455b      	cmp	r3, fp
 8007e1a:	dc33      	bgt.n	8007e84 <_printf_float+0x374>
 8007e1c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007e20:	429a      	cmp	r2, r3
 8007e22:	db3b      	blt.n	8007e9c <_printf_float+0x38c>
 8007e24:	6823      	ldr	r3, [r4, #0]
 8007e26:	07da      	lsls	r2, r3, #31
 8007e28:	d438      	bmi.n	8007e9c <_printf_float+0x38c>
 8007e2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007e2e:	eba3 020a 	sub.w	r2, r3, sl
 8007e32:	eba3 0901 	sub.w	r9, r3, r1
 8007e36:	4591      	cmp	r9, r2
 8007e38:	bfa8      	it	ge
 8007e3a:	4691      	movge	r9, r2
 8007e3c:	f1b9 0f00 	cmp.w	r9, #0
 8007e40:	dc34      	bgt.n	8007eac <_printf_float+0x39c>
 8007e42:	f04f 0800 	mov.w	r8, #0
 8007e46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e4a:	f104 0a1a 	add.w	sl, r4, #26
 8007e4e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007e52:	1a9b      	subs	r3, r3, r2
 8007e54:	eba3 0309 	sub.w	r3, r3, r9
 8007e58:	4543      	cmp	r3, r8
 8007e5a:	f77f af7a 	ble.w	8007d52 <_printf_float+0x242>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	4652      	mov	r2, sl
 8007e62:	4631      	mov	r1, r6
 8007e64:	4628      	mov	r0, r5
 8007e66:	47b8      	blx	r7
 8007e68:	3001      	adds	r0, #1
 8007e6a:	f43f aeac 	beq.w	8007bc6 <_printf_float+0xb6>
 8007e6e:	f108 0801 	add.w	r8, r8, #1
 8007e72:	e7ec      	b.n	8007e4e <_printf_float+0x33e>
 8007e74:	4613      	mov	r3, r2
 8007e76:	4631      	mov	r1, r6
 8007e78:	4642      	mov	r2, r8
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	47b8      	blx	r7
 8007e7e:	3001      	adds	r0, #1
 8007e80:	d1c0      	bne.n	8007e04 <_printf_float+0x2f4>
 8007e82:	e6a0      	b.n	8007bc6 <_printf_float+0xb6>
 8007e84:	2301      	movs	r3, #1
 8007e86:	4631      	mov	r1, r6
 8007e88:	4628      	mov	r0, r5
 8007e8a:	920b      	str	r2, [sp, #44]	; 0x2c
 8007e8c:	47b8      	blx	r7
 8007e8e:	3001      	adds	r0, #1
 8007e90:	f43f ae99 	beq.w	8007bc6 <_printf_float+0xb6>
 8007e94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e96:	f10b 0b01 	add.w	fp, fp, #1
 8007e9a:	e7b9      	b.n	8007e10 <_printf_float+0x300>
 8007e9c:	4631      	mov	r1, r6
 8007e9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	47b8      	blx	r7
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	d1bf      	bne.n	8007e2a <_printf_float+0x31a>
 8007eaa:	e68c      	b.n	8007bc6 <_printf_float+0xb6>
 8007eac:	464b      	mov	r3, r9
 8007eae:	4631      	mov	r1, r6
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	eb08 020a 	add.w	r2, r8, sl
 8007eb6:	47b8      	blx	r7
 8007eb8:	3001      	adds	r0, #1
 8007eba:	d1c2      	bne.n	8007e42 <_printf_float+0x332>
 8007ebc:	e683      	b.n	8007bc6 <_printf_float+0xb6>
 8007ebe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ec0:	2a01      	cmp	r2, #1
 8007ec2:	dc01      	bgt.n	8007ec8 <_printf_float+0x3b8>
 8007ec4:	07db      	lsls	r3, r3, #31
 8007ec6:	d537      	bpl.n	8007f38 <_printf_float+0x428>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	4642      	mov	r2, r8
 8007ecc:	4631      	mov	r1, r6
 8007ece:	4628      	mov	r0, r5
 8007ed0:	47b8      	blx	r7
 8007ed2:	3001      	adds	r0, #1
 8007ed4:	f43f ae77 	beq.w	8007bc6 <_printf_float+0xb6>
 8007ed8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007edc:	4631      	mov	r1, r6
 8007ede:	4628      	mov	r0, r5
 8007ee0:	47b8      	blx	r7
 8007ee2:	3001      	adds	r0, #1
 8007ee4:	f43f ae6f 	beq.w	8007bc6 <_printf_float+0xb6>
 8007ee8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007eec:	2200      	movs	r2, #0
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f7f8 fd5a 	bl	80009a8 <__aeabi_dcmpeq>
 8007ef4:	b9d8      	cbnz	r0, 8007f2e <_printf_float+0x41e>
 8007ef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ef8:	f108 0201 	add.w	r2, r8, #1
 8007efc:	3b01      	subs	r3, #1
 8007efe:	4631      	mov	r1, r6
 8007f00:	4628      	mov	r0, r5
 8007f02:	47b8      	blx	r7
 8007f04:	3001      	adds	r0, #1
 8007f06:	d10e      	bne.n	8007f26 <_printf_float+0x416>
 8007f08:	e65d      	b.n	8007bc6 <_printf_float+0xb6>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	464a      	mov	r2, r9
 8007f0e:	4631      	mov	r1, r6
 8007f10:	4628      	mov	r0, r5
 8007f12:	47b8      	blx	r7
 8007f14:	3001      	adds	r0, #1
 8007f16:	f43f ae56 	beq.w	8007bc6 <_printf_float+0xb6>
 8007f1a:	f108 0801 	add.w	r8, r8, #1
 8007f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f20:	3b01      	subs	r3, #1
 8007f22:	4543      	cmp	r3, r8
 8007f24:	dcf1      	bgt.n	8007f0a <_printf_float+0x3fa>
 8007f26:	4653      	mov	r3, sl
 8007f28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f2c:	e6e0      	b.n	8007cf0 <_printf_float+0x1e0>
 8007f2e:	f04f 0800 	mov.w	r8, #0
 8007f32:	f104 091a 	add.w	r9, r4, #26
 8007f36:	e7f2      	b.n	8007f1e <_printf_float+0x40e>
 8007f38:	2301      	movs	r3, #1
 8007f3a:	4642      	mov	r2, r8
 8007f3c:	e7df      	b.n	8007efe <_printf_float+0x3ee>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	464a      	mov	r2, r9
 8007f42:	4631      	mov	r1, r6
 8007f44:	4628      	mov	r0, r5
 8007f46:	47b8      	blx	r7
 8007f48:	3001      	adds	r0, #1
 8007f4a:	f43f ae3c 	beq.w	8007bc6 <_printf_float+0xb6>
 8007f4e:	f108 0801 	add.w	r8, r8, #1
 8007f52:	68e3      	ldr	r3, [r4, #12]
 8007f54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007f56:	1a5b      	subs	r3, r3, r1
 8007f58:	4543      	cmp	r3, r8
 8007f5a:	dcf0      	bgt.n	8007f3e <_printf_float+0x42e>
 8007f5c:	e6fd      	b.n	8007d5a <_printf_float+0x24a>
 8007f5e:	f04f 0800 	mov.w	r8, #0
 8007f62:	f104 0919 	add.w	r9, r4, #25
 8007f66:	e7f4      	b.n	8007f52 <_printf_float+0x442>

08007f68 <_printf_common>:
 8007f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f6c:	4616      	mov	r6, r2
 8007f6e:	4699      	mov	r9, r3
 8007f70:	688a      	ldr	r2, [r1, #8]
 8007f72:	690b      	ldr	r3, [r1, #16]
 8007f74:	4607      	mov	r7, r0
 8007f76:	4293      	cmp	r3, r2
 8007f78:	bfb8      	it	lt
 8007f7a:	4613      	movlt	r3, r2
 8007f7c:	6033      	str	r3, [r6, #0]
 8007f7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f82:	460c      	mov	r4, r1
 8007f84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f88:	b10a      	cbz	r2, 8007f8e <_printf_common+0x26>
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	6033      	str	r3, [r6, #0]
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	0699      	lsls	r1, r3, #26
 8007f92:	bf42      	ittt	mi
 8007f94:	6833      	ldrmi	r3, [r6, #0]
 8007f96:	3302      	addmi	r3, #2
 8007f98:	6033      	strmi	r3, [r6, #0]
 8007f9a:	6825      	ldr	r5, [r4, #0]
 8007f9c:	f015 0506 	ands.w	r5, r5, #6
 8007fa0:	d106      	bne.n	8007fb0 <_printf_common+0x48>
 8007fa2:	f104 0a19 	add.w	sl, r4, #25
 8007fa6:	68e3      	ldr	r3, [r4, #12]
 8007fa8:	6832      	ldr	r2, [r6, #0]
 8007faa:	1a9b      	subs	r3, r3, r2
 8007fac:	42ab      	cmp	r3, r5
 8007fae:	dc28      	bgt.n	8008002 <_printf_common+0x9a>
 8007fb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fb4:	1e13      	subs	r3, r2, #0
 8007fb6:	6822      	ldr	r2, [r4, #0]
 8007fb8:	bf18      	it	ne
 8007fba:	2301      	movne	r3, #1
 8007fbc:	0692      	lsls	r2, r2, #26
 8007fbe:	d42d      	bmi.n	800801c <_printf_common+0xb4>
 8007fc0:	4649      	mov	r1, r9
 8007fc2:	4638      	mov	r0, r7
 8007fc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fc8:	47c0      	blx	r8
 8007fca:	3001      	adds	r0, #1
 8007fcc:	d020      	beq.n	8008010 <_printf_common+0xa8>
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	68e5      	ldr	r5, [r4, #12]
 8007fd2:	f003 0306 	and.w	r3, r3, #6
 8007fd6:	2b04      	cmp	r3, #4
 8007fd8:	bf18      	it	ne
 8007fda:	2500      	movne	r5, #0
 8007fdc:	6832      	ldr	r2, [r6, #0]
 8007fde:	f04f 0600 	mov.w	r6, #0
 8007fe2:	68a3      	ldr	r3, [r4, #8]
 8007fe4:	bf08      	it	eq
 8007fe6:	1aad      	subeq	r5, r5, r2
 8007fe8:	6922      	ldr	r2, [r4, #16]
 8007fea:	bf08      	it	eq
 8007fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	bfc4      	itt	gt
 8007ff4:	1a9b      	subgt	r3, r3, r2
 8007ff6:	18ed      	addgt	r5, r5, r3
 8007ff8:	341a      	adds	r4, #26
 8007ffa:	42b5      	cmp	r5, r6
 8007ffc:	d11a      	bne.n	8008034 <_printf_common+0xcc>
 8007ffe:	2000      	movs	r0, #0
 8008000:	e008      	b.n	8008014 <_printf_common+0xac>
 8008002:	2301      	movs	r3, #1
 8008004:	4652      	mov	r2, sl
 8008006:	4649      	mov	r1, r9
 8008008:	4638      	mov	r0, r7
 800800a:	47c0      	blx	r8
 800800c:	3001      	adds	r0, #1
 800800e:	d103      	bne.n	8008018 <_printf_common+0xb0>
 8008010:	f04f 30ff 	mov.w	r0, #4294967295
 8008014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008018:	3501      	adds	r5, #1
 800801a:	e7c4      	b.n	8007fa6 <_printf_common+0x3e>
 800801c:	2030      	movs	r0, #48	; 0x30
 800801e:	18e1      	adds	r1, r4, r3
 8008020:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008024:	1c5a      	adds	r2, r3, #1
 8008026:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800802a:	4422      	add	r2, r4
 800802c:	3302      	adds	r3, #2
 800802e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008032:	e7c5      	b.n	8007fc0 <_printf_common+0x58>
 8008034:	2301      	movs	r3, #1
 8008036:	4622      	mov	r2, r4
 8008038:	4649      	mov	r1, r9
 800803a:	4638      	mov	r0, r7
 800803c:	47c0      	blx	r8
 800803e:	3001      	adds	r0, #1
 8008040:	d0e6      	beq.n	8008010 <_printf_common+0xa8>
 8008042:	3601      	adds	r6, #1
 8008044:	e7d9      	b.n	8007ffa <_printf_common+0x92>
	...

08008048 <_printf_i>:
 8008048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800804c:	7e0f      	ldrb	r7, [r1, #24]
 800804e:	4691      	mov	r9, r2
 8008050:	2f78      	cmp	r7, #120	; 0x78
 8008052:	4680      	mov	r8, r0
 8008054:	460c      	mov	r4, r1
 8008056:	469a      	mov	sl, r3
 8008058:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800805a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800805e:	d807      	bhi.n	8008070 <_printf_i+0x28>
 8008060:	2f62      	cmp	r7, #98	; 0x62
 8008062:	d80a      	bhi.n	800807a <_printf_i+0x32>
 8008064:	2f00      	cmp	r7, #0
 8008066:	f000 80d9 	beq.w	800821c <_printf_i+0x1d4>
 800806a:	2f58      	cmp	r7, #88	; 0x58
 800806c:	f000 80a4 	beq.w	80081b8 <_printf_i+0x170>
 8008070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008078:	e03a      	b.n	80080f0 <_printf_i+0xa8>
 800807a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800807e:	2b15      	cmp	r3, #21
 8008080:	d8f6      	bhi.n	8008070 <_printf_i+0x28>
 8008082:	a101      	add	r1, pc, #4	; (adr r1, 8008088 <_printf_i+0x40>)
 8008084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008088:	080080e1 	.word	0x080080e1
 800808c:	080080f5 	.word	0x080080f5
 8008090:	08008071 	.word	0x08008071
 8008094:	08008071 	.word	0x08008071
 8008098:	08008071 	.word	0x08008071
 800809c:	08008071 	.word	0x08008071
 80080a0:	080080f5 	.word	0x080080f5
 80080a4:	08008071 	.word	0x08008071
 80080a8:	08008071 	.word	0x08008071
 80080ac:	08008071 	.word	0x08008071
 80080b0:	08008071 	.word	0x08008071
 80080b4:	08008203 	.word	0x08008203
 80080b8:	08008125 	.word	0x08008125
 80080bc:	080081e5 	.word	0x080081e5
 80080c0:	08008071 	.word	0x08008071
 80080c4:	08008071 	.word	0x08008071
 80080c8:	08008225 	.word	0x08008225
 80080cc:	08008071 	.word	0x08008071
 80080d0:	08008125 	.word	0x08008125
 80080d4:	08008071 	.word	0x08008071
 80080d8:	08008071 	.word	0x08008071
 80080dc:	080081ed 	.word	0x080081ed
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	1d1a      	adds	r2, r3, #4
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	602a      	str	r2, [r5, #0]
 80080e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080f0:	2301      	movs	r3, #1
 80080f2:	e0a4      	b.n	800823e <_printf_i+0x1f6>
 80080f4:	6820      	ldr	r0, [r4, #0]
 80080f6:	6829      	ldr	r1, [r5, #0]
 80080f8:	0606      	lsls	r6, r0, #24
 80080fa:	f101 0304 	add.w	r3, r1, #4
 80080fe:	d50a      	bpl.n	8008116 <_printf_i+0xce>
 8008100:	680e      	ldr	r6, [r1, #0]
 8008102:	602b      	str	r3, [r5, #0]
 8008104:	2e00      	cmp	r6, #0
 8008106:	da03      	bge.n	8008110 <_printf_i+0xc8>
 8008108:	232d      	movs	r3, #45	; 0x2d
 800810a:	4276      	negs	r6, r6
 800810c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008110:	230a      	movs	r3, #10
 8008112:	485e      	ldr	r0, [pc, #376]	; (800828c <_printf_i+0x244>)
 8008114:	e019      	b.n	800814a <_printf_i+0x102>
 8008116:	680e      	ldr	r6, [r1, #0]
 8008118:	f010 0f40 	tst.w	r0, #64	; 0x40
 800811c:	602b      	str	r3, [r5, #0]
 800811e:	bf18      	it	ne
 8008120:	b236      	sxthne	r6, r6
 8008122:	e7ef      	b.n	8008104 <_printf_i+0xbc>
 8008124:	682b      	ldr	r3, [r5, #0]
 8008126:	6820      	ldr	r0, [r4, #0]
 8008128:	1d19      	adds	r1, r3, #4
 800812a:	6029      	str	r1, [r5, #0]
 800812c:	0601      	lsls	r1, r0, #24
 800812e:	d501      	bpl.n	8008134 <_printf_i+0xec>
 8008130:	681e      	ldr	r6, [r3, #0]
 8008132:	e002      	b.n	800813a <_printf_i+0xf2>
 8008134:	0646      	lsls	r6, r0, #25
 8008136:	d5fb      	bpl.n	8008130 <_printf_i+0xe8>
 8008138:	881e      	ldrh	r6, [r3, #0]
 800813a:	2f6f      	cmp	r7, #111	; 0x6f
 800813c:	bf0c      	ite	eq
 800813e:	2308      	moveq	r3, #8
 8008140:	230a      	movne	r3, #10
 8008142:	4852      	ldr	r0, [pc, #328]	; (800828c <_printf_i+0x244>)
 8008144:	2100      	movs	r1, #0
 8008146:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800814a:	6865      	ldr	r5, [r4, #4]
 800814c:	2d00      	cmp	r5, #0
 800814e:	bfa8      	it	ge
 8008150:	6821      	ldrge	r1, [r4, #0]
 8008152:	60a5      	str	r5, [r4, #8]
 8008154:	bfa4      	itt	ge
 8008156:	f021 0104 	bicge.w	r1, r1, #4
 800815a:	6021      	strge	r1, [r4, #0]
 800815c:	b90e      	cbnz	r6, 8008162 <_printf_i+0x11a>
 800815e:	2d00      	cmp	r5, #0
 8008160:	d04d      	beq.n	80081fe <_printf_i+0x1b6>
 8008162:	4615      	mov	r5, r2
 8008164:	fbb6 f1f3 	udiv	r1, r6, r3
 8008168:	fb03 6711 	mls	r7, r3, r1, r6
 800816c:	5dc7      	ldrb	r7, [r0, r7]
 800816e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008172:	4637      	mov	r7, r6
 8008174:	42bb      	cmp	r3, r7
 8008176:	460e      	mov	r6, r1
 8008178:	d9f4      	bls.n	8008164 <_printf_i+0x11c>
 800817a:	2b08      	cmp	r3, #8
 800817c:	d10b      	bne.n	8008196 <_printf_i+0x14e>
 800817e:	6823      	ldr	r3, [r4, #0]
 8008180:	07de      	lsls	r6, r3, #31
 8008182:	d508      	bpl.n	8008196 <_printf_i+0x14e>
 8008184:	6923      	ldr	r3, [r4, #16]
 8008186:	6861      	ldr	r1, [r4, #4]
 8008188:	4299      	cmp	r1, r3
 800818a:	bfde      	ittt	le
 800818c:	2330      	movle	r3, #48	; 0x30
 800818e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008192:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008196:	1b52      	subs	r2, r2, r5
 8008198:	6122      	str	r2, [r4, #16]
 800819a:	464b      	mov	r3, r9
 800819c:	4621      	mov	r1, r4
 800819e:	4640      	mov	r0, r8
 80081a0:	f8cd a000 	str.w	sl, [sp]
 80081a4:	aa03      	add	r2, sp, #12
 80081a6:	f7ff fedf 	bl	8007f68 <_printf_common>
 80081aa:	3001      	adds	r0, #1
 80081ac:	d14c      	bne.n	8008248 <_printf_i+0x200>
 80081ae:	f04f 30ff 	mov.w	r0, #4294967295
 80081b2:	b004      	add	sp, #16
 80081b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b8:	4834      	ldr	r0, [pc, #208]	; (800828c <_printf_i+0x244>)
 80081ba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80081be:	6829      	ldr	r1, [r5, #0]
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	f851 6b04 	ldr.w	r6, [r1], #4
 80081c6:	6029      	str	r1, [r5, #0]
 80081c8:	061d      	lsls	r5, r3, #24
 80081ca:	d514      	bpl.n	80081f6 <_printf_i+0x1ae>
 80081cc:	07df      	lsls	r7, r3, #31
 80081ce:	bf44      	itt	mi
 80081d0:	f043 0320 	orrmi.w	r3, r3, #32
 80081d4:	6023      	strmi	r3, [r4, #0]
 80081d6:	b91e      	cbnz	r6, 80081e0 <_printf_i+0x198>
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	f023 0320 	bic.w	r3, r3, #32
 80081de:	6023      	str	r3, [r4, #0]
 80081e0:	2310      	movs	r3, #16
 80081e2:	e7af      	b.n	8008144 <_printf_i+0xfc>
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	f043 0320 	orr.w	r3, r3, #32
 80081ea:	6023      	str	r3, [r4, #0]
 80081ec:	2378      	movs	r3, #120	; 0x78
 80081ee:	4828      	ldr	r0, [pc, #160]	; (8008290 <_printf_i+0x248>)
 80081f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081f4:	e7e3      	b.n	80081be <_printf_i+0x176>
 80081f6:	0659      	lsls	r1, r3, #25
 80081f8:	bf48      	it	mi
 80081fa:	b2b6      	uxthmi	r6, r6
 80081fc:	e7e6      	b.n	80081cc <_printf_i+0x184>
 80081fe:	4615      	mov	r5, r2
 8008200:	e7bb      	b.n	800817a <_printf_i+0x132>
 8008202:	682b      	ldr	r3, [r5, #0]
 8008204:	6826      	ldr	r6, [r4, #0]
 8008206:	1d18      	adds	r0, r3, #4
 8008208:	6961      	ldr	r1, [r4, #20]
 800820a:	6028      	str	r0, [r5, #0]
 800820c:	0635      	lsls	r5, r6, #24
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	d501      	bpl.n	8008216 <_printf_i+0x1ce>
 8008212:	6019      	str	r1, [r3, #0]
 8008214:	e002      	b.n	800821c <_printf_i+0x1d4>
 8008216:	0670      	lsls	r0, r6, #25
 8008218:	d5fb      	bpl.n	8008212 <_printf_i+0x1ca>
 800821a:	8019      	strh	r1, [r3, #0]
 800821c:	2300      	movs	r3, #0
 800821e:	4615      	mov	r5, r2
 8008220:	6123      	str	r3, [r4, #16]
 8008222:	e7ba      	b.n	800819a <_printf_i+0x152>
 8008224:	682b      	ldr	r3, [r5, #0]
 8008226:	2100      	movs	r1, #0
 8008228:	1d1a      	adds	r2, r3, #4
 800822a:	602a      	str	r2, [r5, #0]
 800822c:	681d      	ldr	r5, [r3, #0]
 800822e:	6862      	ldr	r2, [r4, #4]
 8008230:	4628      	mov	r0, r5
 8008232:	f000 feb7 	bl	8008fa4 <memchr>
 8008236:	b108      	cbz	r0, 800823c <_printf_i+0x1f4>
 8008238:	1b40      	subs	r0, r0, r5
 800823a:	6060      	str	r0, [r4, #4]
 800823c:	6863      	ldr	r3, [r4, #4]
 800823e:	6123      	str	r3, [r4, #16]
 8008240:	2300      	movs	r3, #0
 8008242:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008246:	e7a8      	b.n	800819a <_printf_i+0x152>
 8008248:	462a      	mov	r2, r5
 800824a:	4649      	mov	r1, r9
 800824c:	4640      	mov	r0, r8
 800824e:	6923      	ldr	r3, [r4, #16]
 8008250:	47d0      	blx	sl
 8008252:	3001      	adds	r0, #1
 8008254:	d0ab      	beq.n	80081ae <_printf_i+0x166>
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	079b      	lsls	r3, r3, #30
 800825a:	d413      	bmi.n	8008284 <_printf_i+0x23c>
 800825c:	68e0      	ldr	r0, [r4, #12]
 800825e:	9b03      	ldr	r3, [sp, #12]
 8008260:	4298      	cmp	r0, r3
 8008262:	bfb8      	it	lt
 8008264:	4618      	movlt	r0, r3
 8008266:	e7a4      	b.n	80081b2 <_printf_i+0x16a>
 8008268:	2301      	movs	r3, #1
 800826a:	4632      	mov	r2, r6
 800826c:	4649      	mov	r1, r9
 800826e:	4640      	mov	r0, r8
 8008270:	47d0      	blx	sl
 8008272:	3001      	adds	r0, #1
 8008274:	d09b      	beq.n	80081ae <_printf_i+0x166>
 8008276:	3501      	adds	r5, #1
 8008278:	68e3      	ldr	r3, [r4, #12]
 800827a:	9903      	ldr	r1, [sp, #12]
 800827c:	1a5b      	subs	r3, r3, r1
 800827e:	42ab      	cmp	r3, r5
 8008280:	dcf2      	bgt.n	8008268 <_printf_i+0x220>
 8008282:	e7eb      	b.n	800825c <_printf_i+0x214>
 8008284:	2500      	movs	r5, #0
 8008286:	f104 0619 	add.w	r6, r4, #25
 800828a:	e7f5      	b.n	8008278 <_printf_i+0x230>
 800828c:	0800a44a 	.word	0x0800a44a
 8008290:	0800a45b 	.word	0x0800a45b

08008294 <quorem>:
 8008294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008298:	6903      	ldr	r3, [r0, #16]
 800829a:	690c      	ldr	r4, [r1, #16]
 800829c:	4607      	mov	r7, r0
 800829e:	42a3      	cmp	r3, r4
 80082a0:	f2c0 8082 	blt.w	80083a8 <quorem+0x114>
 80082a4:	3c01      	subs	r4, #1
 80082a6:	f100 0514 	add.w	r5, r0, #20
 80082aa:	f101 0814 	add.w	r8, r1, #20
 80082ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082b2:	9301      	str	r3, [sp, #4]
 80082b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80082b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082bc:	3301      	adds	r3, #1
 80082be:	429a      	cmp	r2, r3
 80082c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80082c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80082c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80082cc:	d331      	bcc.n	8008332 <quorem+0x9e>
 80082ce:	f04f 0e00 	mov.w	lr, #0
 80082d2:	4640      	mov	r0, r8
 80082d4:	46ac      	mov	ip, r5
 80082d6:	46f2      	mov	sl, lr
 80082d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80082dc:	b293      	uxth	r3, r2
 80082de:	fb06 e303 	mla	r3, r6, r3, lr
 80082e2:	0c12      	lsrs	r2, r2, #16
 80082e4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	fb06 e202 	mla	r2, r6, r2, lr
 80082ee:	ebaa 0303 	sub.w	r3, sl, r3
 80082f2:	f8dc a000 	ldr.w	sl, [ip]
 80082f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082fa:	fa1f fa8a 	uxth.w	sl, sl
 80082fe:	4453      	add	r3, sl
 8008300:	f8dc a000 	ldr.w	sl, [ip]
 8008304:	b292      	uxth	r2, r2
 8008306:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800830a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800830e:	b29b      	uxth	r3, r3
 8008310:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008314:	4581      	cmp	r9, r0
 8008316:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800831a:	f84c 3b04 	str.w	r3, [ip], #4
 800831e:	d2db      	bcs.n	80082d8 <quorem+0x44>
 8008320:	f855 300b 	ldr.w	r3, [r5, fp]
 8008324:	b92b      	cbnz	r3, 8008332 <quorem+0x9e>
 8008326:	9b01      	ldr	r3, [sp, #4]
 8008328:	3b04      	subs	r3, #4
 800832a:	429d      	cmp	r5, r3
 800832c:	461a      	mov	r2, r3
 800832e:	d32f      	bcc.n	8008390 <quorem+0xfc>
 8008330:	613c      	str	r4, [r7, #16]
 8008332:	4638      	mov	r0, r7
 8008334:	f001 f8d0 	bl	80094d8 <__mcmp>
 8008338:	2800      	cmp	r0, #0
 800833a:	db25      	blt.n	8008388 <quorem+0xf4>
 800833c:	4628      	mov	r0, r5
 800833e:	f04f 0c00 	mov.w	ip, #0
 8008342:	3601      	adds	r6, #1
 8008344:	f858 1b04 	ldr.w	r1, [r8], #4
 8008348:	f8d0 e000 	ldr.w	lr, [r0]
 800834c:	b28b      	uxth	r3, r1
 800834e:	ebac 0303 	sub.w	r3, ip, r3
 8008352:	fa1f f28e 	uxth.w	r2, lr
 8008356:	4413      	add	r3, r2
 8008358:	0c0a      	lsrs	r2, r1, #16
 800835a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800835e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008362:	b29b      	uxth	r3, r3
 8008364:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008368:	45c1      	cmp	r9, r8
 800836a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800836e:	f840 3b04 	str.w	r3, [r0], #4
 8008372:	d2e7      	bcs.n	8008344 <quorem+0xb0>
 8008374:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008378:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800837c:	b922      	cbnz	r2, 8008388 <quorem+0xf4>
 800837e:	3b04      	subs	r3, #4
 8008380:	429d      	cmp	r5, r3
 8008382:	461a      	mov	r2, r3
 8008384:	d30a      	bcc.n	800839c <quorem+0x108>
 8008386:	613c      	str	r4, [r7, #16]
 8008388:	4630      	mov	r0, r6
 800838a:	b003      	add	sp, #12
 800838c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008390:	6812      	ldr	r2, [r2, #0]
 8008392:	3b04      	subs	r3, #4
 8008394:	2a00      	cmp	r2, #0
 8008396:	d1cb      	bne.n	8008330 <quorem+0x9c>
 8008398:	3c01      	subs	r4, #1
 800839a:	e7c6      	b.n	800832a <quorem+0x96>
 800839c:	6812      	ldr	r2, [r2, #0]
 800839e:	3b04      	subs	r3, #4
 80083a0:	2a00      	cmp	r2, #0
 80083a2:	d1f0      	bne.n	8008386 <quorem+0xf2>
 80083a4:	3c01      	subs	r4, #1
 80083a6:	e7eb      	b.n	8008380 <quorem+0xec>
 80083a8:	2000      	movs	r0, #0
 80083aa:	e7ee      	b.n	800838a <quorem+0xf6>
 80083ac:	0000      	movs	r0, r0
	...

080083b0 <_dtoa_r>:
 80083b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b4:	4616      	mov	r6, r2
 80083b6:	461f      	mov	r7, r3
 80083b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80083ba:	b099      	sub	sp, #100	; 0x64
 80083bc:	4605      	mov	r5, r0
 80083be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80083c2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80083c6:	b974      	cbnz	r4, 80083e6 <_dtoa_r+0x36>
 80083c8:	2010      	movs	r0, #16
 80083ca:	f000 fde3 	bl	8008f94 <malloc>
 80083ce:	4602      	mov	r2, r0
 80083d0:	6268      	str	r0, [r5, #36]	; 0x24
 80083d2:	b920      	cbnz	r0, 80083de <_dtoa_r+0x2e>
 80083d4:	21ea      	movs	r1, #234	; 0xea
 80083d6:	4ba8      	ldr	r3, [pc, #672]	; (8008678 <_dtoa_r+0x2c8>)
 80083d8:	48a8      	ldr	r0, [pc, #672]	; (800867c <_dtoa_r+0x2cc>)
 80083da:	f001 fa81 	bl	80098e0 <__assert_func>
 80083de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083e2:	6004      	str	r4, [r0, #0]
 80083e4:	60c4      	str	r4, [r0, #12]
 80083e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083e8:	6819      	ldr	r1, [r3, #0]
 80083ea:	b151      	cbz	r1, 8008402 <_dtoa_r+0x52>
 80083ec:	685a      	ldr	r2, [r3, #4]
 80083ee:	2301      	movs	r3, #1
 80083f0:	4093      	lsls	r3, r2
 80083f2:	604a      	str	r2, [r1, #4]
 80083f4:	608b      	str	r3, [r1, #8]
 80083f6:	4628      	mov	r0, r5
 80083f8:	f000 fe30 	bl	800905c <_Bfree>
 80083fc:	2200      	movs	r2, #0
 80083fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008400:	601a      	str	r2, [r3, #0]
 8008402:	1e3b      	subs	r3, r7, #0
 8008404:	bfaf      	iteee	ge
 8008406:	2300      	movge	r3, #0
 8008408:	2201      	movlt	r2, #1
 800840a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800840e:	9305      	strlt	r3, [sp, #20]
 8008410:	bfa8      	it	ge
 8008412:	f8c8 3000 	strge.w	r3, [r8]
 8008416:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800841a:	4b99      	ldr	r3, [pc, #612]	; (8008680 <_dtoa_r+0x2d0>)
 800841c:	bfb8      	it	lt
 800841e:	f8c8 2000 	strlt.w	r2, [r8]
 8008422:	ea33 0309 	bics.w	r3, r3, r9
 8008426:	d119      	bne.n	800845c <_dtoa_r+0xac>
 8008428:	f242 730f 	movw	r3, #9999	; 0x270f
 800842c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008434:	4333      	orrs	r3, r6
 8008436:	f000 857f 	beq.w	8008f38 <_dtoa_r+0xb88>
 800843a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800843c:	b953      	cbnz	r3, 8008454 <_dtoa_r+0xa4>
 800843e:	4b91      	ldr	r3, [pc, #580]	; (8008684 <_dtoa_r+0x2d4>)
 8008440:	e022      	b.n	8008488 <_dtoa_r+0xd8>
 8008442:	4b91      	ldr	r3, [pc, #580]	; (8008688 <_dtoa_r+0x2d8>)
 8008444:	9303      	str	r3, [sp, #12]
 8008446:	3308      	adds	r3, #8
 8008448:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800844a:	6013      	str	r3, [r2, #0]
 800844c:	9803      	ldr	r0, [sp, #12]
 800844e:	b019      	add	sp, #100	; 0x64
 8008450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008454:	4b8b      	ldr	r3, [pc, #556]	; (8008684 <_dtoa_r+0x2d4>)
 8008456:	9303      	str	r3, [sp, #12]
 8008458:	3303      	adds	r3, #3
 800845a:	e7f5      	b.n	8008448 <_dtoa_r+0x98>
 800845c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008460:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008464:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008468:	2200      	movs	r2, #0
 800846a:	2300      	movs	r3, #0
 800846c:	f7f8 fa9c 	bl	80009a8 <__aeabi_dcmpeq>
 8008470:	4680      	mov	r8, r0
 8008472:	b158      	cbz	r0, 800848c <_dtoa_r+0xdc>
 8008474:	2301      	movs	r3, #1
 8008476:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 8558 	beq.w	8008f32 <_dtoa_r+0xb82>
 8008482:	4882      	ldr	r0, [pc, #520]	; (800868c <_dtoa_r+0x2dc>)
 8008484:	6018      	str	r0, [r3, #0]
 8008486:	1e43      	subs	r3, r0, #1
 8008488:	9303      	str	r3, [sp, #12]
 800848a:	e7df      	b.n	800844c <_dtoa_r+0x9c>
 800848c:	ab16      	add	r3, sp, #88	; 0x58
 800848e:	9301      	str	r3, [sp, #4]
 8008490:	ab17      	add	r3, sp, #92	; 0x5c
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	4628      	mov	r0, r5
 8008496:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800849a:	f001 f8c5 	bl	8009628 <__d2b>
 800849e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80084a2:	4683      	mov	fp, r0
 80084a4:	2c00      	cmp	r4, #0
 80084a6:	d07f      	beq.n	80085a8 <_dtoa_r+0x1f8>
 80084a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084ae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80084b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084b6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80084ba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80084be:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80084c2:	2200      	movs	r2, #0
 80084c4:	4b72      	ldr	r3, [pc, #456]	; (8008690 <_dtoa_r+0x2e0>)
 80084c6:	f7f7 fe4f 	bl	8000168 <__aeabi_dsub>
 80084ca:	a365      	add	r3, pc, #404	; (adr r3, 8008660 <_dtoa_r+0x2b0>)
 80084cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d0:	f7f8 f802 	bl	80004d8 <__aeabi_dmul>
 80084d4:	a364      	add	r3, pc, #400	; (adr r3, 8008668 <_dtoa_r+0x2b8>)
 80084d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084da:	f7f7 fe47 	bl	800016c <__adddf3>
 80084de:	4606      	mov	r6, r0
 80084e0:	4620      	mov	r0, r4
 80084e2:	460f      	mov	r7, r1
 80084e4:	f7f7 ff8e 	bl	8000404 <__aeabi_i2d>
 80084e8:	a361      	add	r3, pc, #388	; (adr r3, 8008670 <_dtoa_r+0x2c0>)
 80084ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ee:	f7f7 fff3 	bl	80004d8 <__aeabi_dmul>
 80084f2:	4602      	mov	r2, r0
 80084f4:	460b      	mov	r3, r1
 80084f6:	4630      	mov	r0, r6
 80084f8:	4639      	mov	r1, r7
 80084fa:	f7f7 fe37 	bl	800016c <__adddf3>
 80084fe:	4606      	mov	r6, r0
 8008500:	460f      	mov	r7, r1
 8008502:	f7f8 fa99 	bl	8000a38 <__aeabi_d2iz>
 8008506:	2200      	movs	r2, #0
 8008508:	4682      	mov	sl, r0
 800850a:	2300      	movs	r3, #0
 800850c:	4630      	mov	r0, r6
 800850e:	4639      	mov	r1, r7
 8008510:	f7f8 fa54 	bl	80009bc <__aeabi_dcmplt>
 8008514:	b148      	cbz	r0, 800852a <_dtoa_r+0x17a>
 8008516:	4650      	mov	r0, sl
 8008518:	f7f7 ff74 	bl	8000404 <__aeabi_i2d>
 800851c:	4632      	mov	r2, r6
 800851e:	463b      	mov	r3, r7
 8008520:	f7f8 fa42 	bl	80009a8 <__aeabi_dcmpeq>
 8008524:	b908      	cbnz	r0, 800852a <_dtoa_r+0x17a>
 8008526:	f10a 3aff 	add.w	sl, sl, #4294967295
 800852a:	f1ba 0f16 	cmp.w	sl, #22
 800852e:	d858      	bhi.n	80085e2 <_dtoa_r+0x232>
 8008530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008534:	4b57      	ldr	r3, [pc, #348]	; (8008694 <_dtoa_r+0x2e4>)
 8008536:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800853a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853e:	f7f8 fa3d 	bl	80009bc <__aeabi_dcmplt>
 8008542:	2800      	cmp	r0, #0
 8008544:	d04f      	beq.n	80085e6 <_dtoa_r+0x236>
 8008546:	2300      	movs	r3, #0
 8008548:	f10a 3aff 	add.w	sl, sl, #4294967295
 800854c:	930f      	str	r3, [sp, #60]	; 0x3c
 800854e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008550:	1b1c      	subs	r4, r3, r4
 8008552:	1e63      	subs	r3, r4, #1
 8008554:	9309      	str	r3, [sp, #36]	; 0x24
 8008556:	bf49      	itett	mi
 8008558:	f1c4 0301 	rsbmi	r3, r4, #1
 800855c:	2300      	movpl	r3, #0
 800855e:	9306      	strmi	r3, [sp, #24]
 8008560:	2300      	movmi	r3, #0
 8008562:	bf54      	ite	pl
 8008564:	9306      	strpl	r3, [sp, #24]
 8008566:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008568:	f1ba 0f00 	cmp.w	sl, #0
 800856c:	db3d      	blt.n	80085ea <_dtoa_r+0x23a>
 800856e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008570:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008574:	4453      	add	r3, sl
 8008576:	9309      	str	r3, [sp, #36]	; 0x24
 8008578:	2300      	movs	r3, #0
 800857a:	930a      	str	r3, [sp, #40]	; 0x28
 800857c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800857e:	2b09      	cmp	r3, #9
 8008580:	f200 808c 	bhi.w	800869c <_dtoa_r+0x2ec>
 8008584:	2b05      	cmp	r3, #5
 8008586:	bfc4      	itt	gt
 8008588:	3b04      	subgt	r3, #4
 800858a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800858c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800858e:	bfc8      	it	gt
 8008590:	2400      	movgt	r4, #0
 8008592:	f1a3 0302 	sub.w	r3, r3, #2
 8008596:	bfd8      	it	le
 8008598:	2401      	movle	r4, #1
 800859a:	2b03      	cmp	r3, #3
 800859c:	f200 808a 	bhi.w	80086b4 <_dtoa_r+0x304>
 80085a0:	e8df f003 	tbb	[pc, r3]
 80085a4:	5b4d4f2d 	.word	0x5b4d4f2d
 80085a8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80085ac:	441c      	add	r4, r3
 80085ae:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80085b2:	2b20      	cmp	r3, #32
 80085b4:	bfc3      	ittte	gt
 80085b6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80085ba:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80085be:	fa09 f303 	lslgt.w	r3, r9, r3
 80085c2:	f1c3 0320 	rsble	r3, r3, #32
 80085c6:	bfc6      	itte	gt
 80085c8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80085cc:	4318      	orrgt	r0, r3
 80085ce:	fa06 f003 	lslle.w	r0, r6, r3
 80085d2:	f7f7 ff07 	bl	80003e4 <__aeabi_ui2d>
 80085d6:	2301      	movs	r3, #1
 80085d8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80085dc:	3c01      	subs	r4, #1
 80085de:	9313      	str	r3, [sp, #76]	; 0x4c
 80085e0:	e76f      	b.n	80084c2 <_dtoa_r+0x112>
 80085e2:	2301      	movs	r3, #1
 80085e4:	e7b2      	b.n	800854c <_dtoa_r+0x19c>
 80085e6:	900f      	str	r0, [sp, #60]	; 0x3c
 80085e8:	e7b1      	b.n	800854e <_dtoa_r+0x19e>
 80085ea:	9b06      	ldr	r3, [sp, #24]
 80085ec:	eba3 030a 	sub.w	r3, r3, sl
 80085f0:	9306      	str	r3, [sp, #24]
 80085f2:	f1ca 0300 	rsb	r3, sl, #0
 80085f6:	930a      	str	r3, [sp, #40]	; 0x28
 80085f8:	2300      	movs	r3, #0
 80085fa:	930e      	str	r3, [sp, #56]	; 0x38
 80085fc:	e7be      	b.n	800857c <_dtoa_r+0x1cc>
 80085fe:	2300      	movs	r3, #0
 8008600:	930b      	str	r3, [sp, #44]	; 0x2c
 8008602:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008604:	2b00      	cmp	r3, #0
 8008606:	dc58      	bgt.n	80086ba <_dtoa_r+0x30a>
 8008608:	f04f 0901 	mov.w	r9, #1
 800860c:	464b      	mov	r3, r9
 800860e:	f8cd 9020 	str.w	r9, [sp, #32]
 8008612:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008616:	2200      	movs	r2, #0
 8008618:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800861a:	6042      	str	r2, [r0, #4]
 800861c:	2204      	movs	r2, #4
 800861e:	f102 0614 	add.w	r6, r2, #20
 8008622:	429e      	cmp	r6, r3
 8008624:	6841      	ldr	r1, [r0, #4]
 8008626:	d94e      	bls.n	80086c6 <_dtoa_r+0x316>
 8008628:	4628      	mov	r0, r5
 800862a:	f000 fcd7 	bl	8008fdc <_Balloc>
 800862e:	9003      	str	r0, [sp, #12]
 8008630:	2800      	cmp	r0, #0
 8008632:	d14c      	bne.n	80086ce <_dtoa_r+0x31e>
 8008634:	4602      	mov	r2, r0
 8008636:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800863a:	4b17      	ldr	r3, [pc, #92]	; (8008698 <_dtoa_r+0x2e8>)
 800863c:	e6cc      	b.n	80083d8 <_dtoa_r+0x28>
 800863e:	2301      	movs	r3, #1
 8008640:	e7de      	b.n	8008600 <_dtoa_r+0x250>
 8008642:	2300      	movs	r3, #0
 8008644:	930b      	str	r3, [sp, #44]	; 0x2c
 8008646:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008648:	eb0a 0903 	add.w	r9, sl, r3
 800864c:	f109 0301 	add.w	r3, r9, #1
 8008650:	2b01      	cmp	r3, #1
 8008652:	9308      	str	r3, [sp, #32]
 8008654:	bfb8      	it	lt
 8008656:	2301      	movlt	r3, #1
 8008658:	e7dd      	b.n	8008616 <_dtoa_r+0x266>
 800865a:	2301      	movs	r3, #1
 800865c:	e7f2      	b.n	8008644 <_dtoa_r+0x294>
 800865e:	bf00      	nop
 8008660:	636f4361 	.word	0x636f4361
 8008664:	3fd287a7 	.word	0x3fd287a7
 8008668:	8b60c8b3 	.word	0x8b60c8b3
 800866c:	3fc68a28 	.word	0x3fc68a28
 8008670:	509f79fb 	.word	0x509f79fb
 8008674:	3fd34413 	.word	0x3fd34413
 8008678:	0800a479 	.word	0x0800a479
 800867c:	0800a490 	.word	0x0800a490
 8008680:	7ff00000 	.word	0x7ff00000
 8008684:	0800a475 	.word	0x0800a475
 8008688:	0800a46c 	.word	0x0800a46c
 800868c:	0800a449 	.word	0x0800a449
 8008690:	3ff80000 	.word	0x3ff80000
 8008694:	0800a580 	.word	0x0800a580
 8008698:	0800a4eb 	.word	0x0800a4eb
 800869c:	2401      	movs	r4, #1
 800869e:	2300      	movs	r3, #0
 80086a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80086a2:	9322      	str	r3, [sp, #136]	; 0x88
 80086a4:	f04f 39ff 	mov.w	r9, #4294967295
 80086a8:	2200      	movs	r2, #0
 80086aa:	2312      	movs	r3, #18
 80086ac:	f8cd 9020 	str.w	r9, [sp, #32]
 80086b0:	9223      	str	r2, [sp, #140]	; 0x8c
 80086b2:	e7b0      	b.n	8008616 <_dtoa_r+0x266>
 80086b4:	2301      	movs	r3, #1
 80086b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80086b8:	e7f4      	b.n	80086a4 <_dtoa_r+0x2f4>
 80086ba:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80086be:	464b      	mov	r3, r9
 80086c0:	f8cd 9020 	str.w	r9, [sp, #32]
 80086c4:	e7a7      	b.n	8008616 <_dtoa_r+0x266>
 80086c6:	3101      	adds	r1, #1
 80086c8:	6041      	str	r1, [r0, #4]
 80086ca:	0052      	lsls	r2, r2, #1
 80086cc:	e7a7      	b.n	800861e <_dtoa_r+0x26e>
 80086ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80086d0:	9a03      	ldr	r2, [sp, #12]
 80086d2:	601a      	str	r2, [r3, #0]
 80086d4:	9b08      	ldr	r3, [sp, #32]
 80086d6:	2b0e      	cmp	r3, #14
 80086d8:	f200 80a8 	bhi.w	800882c <_dtoa_r+0x47c>
 80086dc:	2c00      	cmp	r4, #0
 80086de:	f000 80a5 	beq.w	800882c <_dtoa_r+0x47c>
 80086e2:	f1ba 0f00 	cmp.w	sl, #0
 80086e6:	dd34      	ble.n	8008752 <_dtoa_r+0x3a2>
 80086e8:	4a9a      	ldr	r2, [pc, #616]	; (8008954 <_dtoa_r+0x5a4>)
 80086ea:	f00a 030f 	and.w	r3, sl, #15
 80086ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80086f2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80086f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80086fe:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008702:	d016      	beq.n	8008732 <_dtoa_r+0x382>
 8008704:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008708:	4b93      	ldr	r3, [pc, #588]	; (8008958 <_dtoa_r+0x5a8>)
 800870a:	2703      	movs	r7, #3
 800870c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008710:	f7f8 f80c 	bl	800072c <__aeabi_ddiv>
 8008714:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008718:	f004 040f 	and.w	r4, r4, #15
 800871c:	4e8e      	ldr	r6, [pc, #568]	; (8008958 <_dtoa_r+0x5a8>)
 800871e:	b954      	cbnz	r4, 8008736 <_dtoa_r+0x386>
 8008720:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008724:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008728:	f7f8 f800 	bl	800072c <__aeabi_ddiv>
 800872c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008730:	e029      	b.n	8008786 <_dtoa_r+0x3d6>
 8008732:	2702      	movs	r7, #2
 8008734:	e7f2      	b.n	800871c <_dtoa_r+0x36c>
 8008736:	07e1      	lsls	r1, r4, #31
 8008738:	d508      	bpl.n	800874c <_dtoa_r+0x39c>
 800873a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800873e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008742:	f7f7 fec9 	bl	80004d8 <__aeabi_dmul>
 8008746:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800874a:	3701      	adds	r7, #1
 800874c:	1064      	asrs	r4, r4, #1
 800874e:	3608      	adds	r6, #8
 8008750:	e7e5      	b.n	800871e <_dtoa_r+0x36e>
 8008752:	f000 80a5 	beq.w	80088a0 <_dtoa_r+0x4f0>
 8008756:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800875a:	f1ca 0400 	rsb	r4, sl, #0
 800875e:	4b7d      	ldr	r3, [pc, #500]	; (8008954 <_dtoa_r+0x5a4>)
 8008760:	f004 020f 	and.w	r2, r4, #15
 8008764:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876c:	f7f7 feb4 	bl	80004d8 <__aeabi_dmul>
 8008770:	2702      	movs	r7, #2
 8008772:	2300      	movs	r3, #0
 8008774:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008778:	4e77      	ldr	r6, [pc, #476]	; (8008958 <_dtoa_r+0x5a8>)
 800877a:	1124      	asrs	r4, r4, #4
 800877c:	2c00      	cmp	r4, #0
 800877e:	f040 8084 	bne.w	800888a <_dtoa_r+0x4da>
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1d2      	bne.n	800872c <_dtoa_r+0x37c>
 8008786:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008788:	2b00      	cmp	r3, #0
 800878a:	f000 808b 	beq.w	80088a4 <_dtoa_r+0x4f4>
 800878e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008792:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008796:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800879a:	2200      	movs	r2, #0
 800879c:	4b6f      	ldr	r3, [pc, #444]	; (800895c <_dtoa_r+0x5ac>)
 800879e:	f7f8 f90d 	bl	80009bc <__aeabi_dcmplt>
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d07e      	beq.n	80088a4 <_dtoa_r+0x4f4>
 80087a6:	9b08      	ldr	r3, [sp, #32]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d07b      	beq.n	80088a4 <_dtoa_r+0x4f4>
 80087ac:	f1b9 0f00 	cmp.w	r9, #0
 80087b0:	dd38      	ble.n	8008824 <_dtoa_r+0x474>
 80087b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80087b6:	2200      	movs	r2, #0
 80087b8:	4b69      	ldr	r3, [pc, #420]	; (8008960 <_dtoa_r+0x5b0>)
 80087ba:	f7f7 fe8d 	bl	80004d8 <__aeabi_dmul>
 80087be:	464c      	mov	r4, r9
 80087c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087c4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80087c8:	3701      	adds	r7, #1
 80087ca:	4638      	mov	r0, r7
 80087cc:	f7f7 fe1a 	bl	8000404 <__aeabi_i2d>
 80087d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087d4:	f7f7 fe80 	bl	80004d8 <__aeabi_dmul>
 80087d8:	2200      	movs	r2, #0
 80087da:	4b62      	ldr	r3, [pc, #392]	; (8008964 <_dtoa_r+0x5b4>)
 80087dc:	f7f7 fcc6 	bl	800016c <__adddf3>
 80087e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80087e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80087e8:	9611      	str	r6, [sp, #68]	; 0x44
 80087ea:	2c00      	cmp	r4, #0
 80087ec:	d15d      	bne.n	80088aa <_dtoa_r+0x4fa>
 80087ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087f2:	2200      	movs	r2, #0
 80087f4:	4b5c      	ldr	r3, [pc, #368]	; (8008968 <_dtoa_r+0x5b8>)
 80087f6:	f7f7 fcb7 	bl	8000168 <__aeabi_dsub>
 80087fa:	4602      	mov	r2, r0
 80087fc:	460b      	mov	r3, r1
 80087fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008802:	4633      	mov	r3, r6
 8008804:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008806:	f7f8 f8f7 	bl	80009f8 <__aeabi_dcmpgt>
 800880a:	2800      	cmp	r0, #0
 800880c:	f040 829c 	bne.w	8008d48 <_dtoa_r+0x998>
 8008810:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008814:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008816:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800881a:	f7f8 f8cf 	bl	80009bc <__aeabi_dcmplt>
 800881e:	2800      	cmp	r0, #0
 8008820:	f040 8290 	bne.w	8008d44 <_dtoa_r+0x994>
 8008824:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008828:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800882c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800882e:	2b00      	cmp	r3, #0
 8008830:	f2c0 8152 	blt.w	8008ad8 <_dtoa_r+0x728>
 8008834:	f1ba 0f0e 	cmp.w	sl, #14
 8008838:	f300 814e 	bgt.w	8008ad8 <_dtoa_r+0x728>
 800883c:	4b45      	ldr	r3, [pc, #276]	; (8008954 <_dtoa_r+0x5a4>)
 800883e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008842:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008846:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800884a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800884c:	2b00      	cmp	r3, #0
 800884e:	f280 80db 	bge.w	8008a08 <_dtoa_r+0x658>
 8008852:	9b08      	ldr	r3, [sp, #32]
 8008854:	2b00      	cmp	r3, #0
 8008856:	f300 80d7 	bgt.w	8008a08 <_dtoa_r+0x658>
 800885a:	f040 8272 	bne.w	8008d42 <_dtoa_r+0x992>
 800885e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008862:	2200      	movs	r2, #0
 8008864:	4b40      	ldr	r3, [pc, #256]	; (8008968 <_dtoa_r+0x5b8>)
 8008866:	f7f7 fe37 	bl	80004d8 <__aeabi_dmul>
 800886a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800886e:	f7f8 f8b9 	bl	80009e4 <__aeabi_dcmpge>
 8008872:	9c08      	ldr	r4, [sp, #32]
 8008874:	4626      	mov	r6, r4
 8008876:	2800      	cmp	r0, #0
 8008878:	f040 8248 	bne.w	8008d0c <_dtoa_r+0x95c>
 800887c:	2331      	movs	r3, #49	; 0x31
 800887e:	9f03      	ldr	r7, [sp, #12]
 8008880:	f10a 0a01 	add.w	sl, sl, #1
 8008884:	f807 3b01 	strb.w	r3, [r7], #1
 8008888:	e244      	b.n	8008d14 <_dtoa_r+0x964>
 800888a:	07e2      	lsls	r2, r4, #31
 800888c:	d505      	bpl.n	800889a <_dtoa_r+0x4ea>
 800888e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008892:	f7f7 fe21 	bl	80004d8 <__aeabi_dmul>
 8008896:	2301      	movs	r3, #1
 8008898:	3701      	adds	r7, #1
 800889a:	1064      	asrs	r4, r4, #1
 800889c:	3608      	adds	r6, #8
 800889e:	e76d      	b.n	800877c <_dtoa_r+0x3cc>
 80088a0:	2702      	movs	r7, #2
 80088a2:	e770      	b.n	8008786 <_dtoa_r+0x3d6>
 80088a4:	46d0      	mov	r8, sl
 80088a6:	9c08      	ldr	r4, [sp, #32]
 80088a8:	e78f      	b.n	80087ca <_dtoa_r+0x41a>
 80088aa:	9903      	ldr	r1, [sp, #12]
 80088ac:	4b29      	ldr	r3, [pc, #164]	; (8008954 <_dtoa_r+0x5a4>)
 80088ae:	4421      	add	r1, r4
 80088b0:	9112      	str	r1, [sp, #72]	; 0x48
 80088b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088b8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80088bc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088c0:	2900      	cmp	r1, #0
 80088c2:	d055      	beq.n	8008970 <_dtoa_r+0x5c0>
 80088c4:	2000      	movs	r0, #0
 80088c6:	4929      	ldr	r1, [pc, #164]	; (800896c <_dtoa_r+0x5bc>)
 80088c8:	f7f7 ff30 	bl	800072c <__aeabi_ddiv>
 80088cc:	463b      	mov	r3, r7
 80088ce:	4632      	mov	r2, r6
 80088d0:	f7f7 fc4a 	bl	8000168 <__aeabi_dsub>
 80088d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80088d8:	9f03      	ldr	r7, [sp, #12]
 80088da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088de:	f7f8 f8ab 	bl	8000a38 <__aeabi_d2iz>
 80088e2:	4604      	mov	r4, r0
 80088e4:	f7f7 fd8e 	bl	8000404 <__aeabi_i2d>
 80088e8:	4602      	mov	r2, r0
 80088ea:	460b      	mov	r3, r1
 80088ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088f0:	f7f7 fc3a 	bl	8000168 <__aeabi_dsub>
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	3430      	adds	r4, #48	; 0x30
 80088fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80088fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008902:	f807 4b01 	strb.w	r4, [r7], #1
 8008906:	f7f8 f859 	bl	80009bc <__aeabi_dcmplt>
 800890a:	2800      	cmp	r0, #0
 800890c:	d174      	bne.n	80089f8 <_dtoa_r+0x648>
 800890e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008912:	2000      	movs	r0, #0
 8008914:	4911      	ldr	r1, [pc, #68]	; (800895c <_dtoa_r+0x5ac>)
 8008916:	f7f7 fc27 	bl	8000168 <__aeabi_dsub>
 800891a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800891e:	f7f8 f84d 	bl	80009bc <__aeabi_dcmplt>
 8008922:	2800      	cmp	r0, #0
 8008924:	f040 80b7 	bne.w	8008a96 <_dtoa_r+0x6e6>
 8008928:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800892a:	429f      	cmp	r7, r3
 800892c:	f43f af7a 	beq.w	8008824 <_dtoa_r+0x474>
 8008930:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008934:	2200      	movs	r2, #0
 8008936:	4b0a      	ldr	r3, [pc, #40]	; (8008960 <_dtoa_r+0x5b0>)
 8008938:	f7f7 fdce 	bl	80004d8 <__aeabi_dmul>
 800893c:	2200      	movs	r2, #0
 800893e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008942:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008946:	4b06      	ldr	r3, [pc, #24]	; (8008960 <_dtoa_r+0x5b0>)
 8008948:	f7f7 fdc6 	bl	80004d8 <__aeabi_dmul>
 800894c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008950:	e7c3      	b.n	80088da <_dtoa_r+0x52a>
 8008952:	bf00      	nop
 8008954:	0800a580 	.word	0x0800a580
 8008958:	0800a558 	.word	0x0800a558
 800895c:	3ff00000 	.word	0x3ff00000
 8008960:	40240000 	.word	0x40240000
 8008964:	401c0000 	.word	0x401c0000
 8008968:	40140000 	.word	0x40140000
 800896c:	3fe00000 	.word	0x3fe00000
 8008970:	4630      	mov	r0, r6
 8008972:	4639      	mov	r1, r7
 8008974:	f7f7 fdb0 	bl	80004d8 <__aeabi_dmul>
 8008978:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800897a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800897e:	9c03      	ldr	r4, [sp, #12]
 8008980:	9314      	str	r3, [sp, #80]	; 0x50
 8008982:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008986:	f7f8 f857 	bl	8000a38 <__aeabi_d2iz>
 800898a:	9015      	str	r0, [sp, #84]	; 0x54
 800898c:	f7f7 fd3a 	bl	8000404 <__aeabi_i2d>
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008998:	f7f7 fbe6 	bl	8000168 <__aeabi_dsub>
 800899c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800899e:	4606      	mov	r6, r0
 80089a0:	3330      	adds	r3, #48	; 0x30
 80089a2:	f804 3b01 	strb.w	r3, [r4], #1
 80089a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089a8:	460f      	mov	r7, r1
 80089aa:	429c      	cmp	r4, r3
 80089ac:	f04f 0200 	mov.w	r2, #0
 80089b0:	d124      	bne.n	80089fc <_dtoa_r+0x64c>
 80089b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089b6:	4bb0      	ldr	r3, [pc, #704]	; (8008c78 <_dtoa_r+0x8c8>)
 80089b8:	f7f7 fbd8 	bl	800016c <__adddf3>
 80089bc:	4602      	mov	r2, r0
 80089be:	460b      	mov	r3, r1
 80089c0:	4630      	mov	r0, r6
 80089c2:	4639      	mov	r1, r7
 80089c4:	f7f8 f818 	bl	80009f8 <__aeabi_dcmpgt>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	d163      	bne.n	8008a94 <_dtoa_r+0x6e4>
 80089cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80089d0:	2000      	movs	r0, #0
 80089d2:	49a9      	ldr	r1, [pc, #676]	; (8008c78 <_dtoa_r+0x8c8>)
 80089d4:	f7f7 fbc8 	bl	8000168 <__aeabi_dsub>
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	4630      	mov	r0, r6
 80089de:	4639      	mov	r1, r7
 80089e0:	f7f7 ffec 	bl	80009bc <__aeabi_dcmplt>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	f43f af1d 	beq.w	8008824 <_dtoa_r+0x474>
 80089ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80089ec:	1e7b      	subs	r3, r7, #1
 80089ee:	9314      	str	r3, [sp, #80]	; 0x50
 80089f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80089f4:	2b30      	cmp	r3, #48	; 0x30
 80089f6:	d0f8      	beq.n	80089ea <_dtoa_r+0x63a>
 80089f8:	46c2      	mov	sl, r8
 80089fa:	e03b      	b.n	8008a74 <_dtoa_r+0x6c4>
 80089fc:	4b9f      	ldr	r3, [pc, #636]	; (8008c7c <_dtoa_r+0x8cc>)
 80089fe:	f7f7 fd6b 	bl	80004d8 <__aeabi_dmul>
 8008a02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a06:	e7bc      	b.n	8008982 <_dtoa_r+0x5d2>
 8008a08:	9f03      	ldr	r7, [sp, #12]
 8008a0a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008a0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a12:	4640      	mov	r0, r8
 8008a14:	4649      	mov	r1, r9
 8008a16:	f7f7 fe89 	bl	800072c <__aeabi_ddiv>
 8008a1a:	f7f8 f80d 	bl	8000a38 <__aeabi_d2iz>
 8008a1e:	4604      	mov	r4, r0
 8008a20:	f7f7 fcf0 	bl	8000404 <__aeabi_i2d>
 8008a24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a28:	f7f7 fd56 	bl	80004d8 <__aeabi_dmul>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	4640      	mov	r0, r8
 8008a32:	4649      	mov	r1, r9
 8008a34:	f7f7 fb98 	bl	8000168 <__aeabi_dsub>
 8008a38:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008a3c:	f807 6b01 	strb.w	r6, [r7], #1
 8008a40:	9e03      	ldr	r6, [sp, #12]
 8008a42:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008a46:	1bbe      	subs	r6, r7, r6
 8008a48:	45b4      	cmp	ip, r6
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	d136      	bne.n	8008abe <_dtoa_r+0x70e>
 8008a50:	f7f7 fb8c 	bl	800016c <__adddf3>
 8008a54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a58:	4680      	mov	r8, r0
 8008a5a:	4689      	mov	r9, r1
 8008a5c:	f7f7 ffcc 	bl	80009f8 <__aeabi_dcmpgt>
 8008a60:	bb58      	cbnz	r0, 8008aba <_dtoa_r+0x70a>
 8008a62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a66:	4640      	mov	r0, r8
 8008a68:	4649      	mov	r1, r9
 8008a6a:	f7f7 ff9d 	bl	80009a8 <__aeabi_dcmpeq>
 8008a6e:	b108      	cbz	r0, 8008a74 <_dtoa_r+0x6c4>
 8008a70:	07e1      	lsls	r1, r4, #31
 8008a72:	d422      	bmi.n	8008aba <_dtoa_r+0x70a>
 8008a74:	4628      	mov	r0, r5
 8008a76:	4659      	mov	r1, fp
 8008a78:	f000 faf0 	bl	800905c <_Bfree>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	703b      	strb	r3, [r7, #0]
 8008a80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008a82:	f10a 0001 	add.w	r0, sl, #1
 8008a86:	6018      	str	r0, [r3, #0]
 8008a88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f43f acde 	beq.w	800844c <_dtoa_r+0x9c>
 8008a90:	601f      	str	r7, [r3, #0]
 8008a92:	e4db      	b.n	800844c <_dtoa_r+0x9c>
 8008a94:	4627      	mov	r7, r4
 8008a96:	463b      	mov	r3, r7
 8008a98:	461f      	mov	r7, r3
 8008a9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a9e:	2a39      	cmp	r2, #57	; 0x39
 8008aa0:	d107      	bne.n	8008ab2 <_dtoa_r+0x702>
 8008aa2:	9a03      	ldr	r2, [sp, #12]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d1f7      	bne.n	8008a98 <_dtoa_r+0x6e8>
 8008aa8:	2230      	movs	r2, #48	; 0x30
 8008aaa:	9903      	ldr	r1, [sp, #12]
 8008aac:	f108 0801 	add.w	r8, r8, #1
 8008ab0:	700a      	strb	r2, [r1, #0]
 8008ab2:	781a      	ldrb	r2, [r3, #0]
 8008ab4:	3201      	adds	r2, #1
 8008ab6:	701a      	strb	r2, [r3, #0]
 8008ab8:	e79e      	b.n	80089f8 <_dtoa_r+0x648>
 8008aba:	46d0      	mov	r8, sl
 8008abc:	e7eb      	b.n	8008a96 <_dtoa_r+0x6e6>
 8008abe:	2200      	movs	r2, #0
 8008ac0:	4b6e      	ldr	r3, [pc, #440]	; (8008c7c <_dtoa_r+0x8cc>)
 8008ac2:	f7f7 fd09 	bl	80004d8 <__aeabi_dmul>
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	2300      	movs	r3, #0
 8008aca:	4680      	mov	r8, r0
 8008acc:	4689      	mov	r9, r1
 8008ace:	f7f7 ff6b 	bl	80009a8 <__aeabi_dcmpeq>
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	d09b      	beq.n	8008a0e <_dtoa_r+0x65e>
 8008ad6:	e7cd      	b.n	8008a74 <_dtoa_r+0x6c4>
 8008ad8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ada:	2a00      	cmp	r2, #0
 8008adc:	f000 80d0 	beq.w	8008c80 <_dtoa_r+0x8d0>
 8008ae0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008ae2:	2a01      	cmp	r2, #1
 8008ae4:	f300 80ae 	bgt.w	8008c44 <_dtoa_r+0x894>
 8008ae8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008aea:	2a00      	cmp	r2, #0
 8008aec:	f000 80a6 	beq.w	8008c3c <_dtoa_r+0x88c>
 8008af0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008af4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008af6:	9f06      	ldr	r7, [sp, #24]
 8008af8:	9a06      	ldr	r2, [sp, #24]
 8008afa:	2101      	movs	r1, #1
 8008afc:	441a      	add	r2, r3
 8008afe:	9206      	str	r2, [sp, #24]
 8008b00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b02:	4628      	mov	r0, r5
 8008b04:	441a      	add	r2, r3
 8008b06:	9209      	str	r2, [sp, #36]	; 0x24
 8008b08:	f000 fb5e 	bl	80091c8 <__i2b>
 8008b0c:	4606      	mov	r6, r0
 8008b0e:	2f00      	cmp	r7, #0
 8008b10:	dd0c      	ble.n	8008b2c <_dtoa_r+0x77c>
 8008b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	dd09      	ble.n	8008b2c <_dtoa_r+0x77c>
 8008b18:	42bb      	cmp	r3, r7
 8008b1a:	bfa8      	it	ge
 8008b1c:	463b      	movge	r3, r7
 8008b1e:	9a06      	ldr	r2, [sp, #24]
 8008b20:	1aff      	subs	r7, r7, r3
 8008b22:	1ad2      	subs	r2, r2, r3
 8008b24:	9206      	str	r2, [sp, #24]
 8008b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b2e:	b1f3      	cbz	r3, 8008b6e <_dtoa_r+0x7be>
 8008b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f000 80a8 	beq.w	8008c88 <_dtoa_r+0x8d8>
 8008b38:	2c00      	cmp	r4, #0
 8008b3a:	dd10      	ble.n	8008b5e <_dtoa_r+0x7ae>
 8008b3c:	4631      	mov	r1, r6
 8008b3e:	4622      	mov	r2, r4
 8008b40:	4628      	mov	r0, r5
 8008b42:	f000 fbff 	bl	8009344 <__pow5mult>
 8008b46:	465a      	mov	r2, fp
 8008b48:	4601      	mov	r1, r0
 8008b4a:	4606      	mov	r6, r0
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	f000 fb51 	bl	80091f4 <__multiply>
 8008b52:	4680      	mov	r8, r0
 8008b54:	4659      	mov	r1, fp
 8008b56:	4628      	mov	r0, r5
 8008b58:	f000 fa80 	bl	800905c <_Bfree>
 8008b5c:	46c3      	mov	fp, r8
 8008b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b60:	1b1a      	subs	r2, r3, r4
 8008b62:	d004      	beq.n	8008b6e <_dtoa_r+0x7be>
 8008b64:	4659      	mov	r1, fp
 8008b66:	4628      	mov	r0, r5
 8008b68:	f000 fbec 	bl	8009344 <__pow5mult>
 8008b6c:	4683      	mov	fp, r0
 8008b6e:	2101      	movs	r1, #1
 8008b70:	4628      	mov	r0, r5
 8008b72:	f000 fb29 	bl	80091c8 <__i2b>
 8008b76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b78:	4604      	mov	r4, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	f340 8086 	ble.w	8008c8c <_dtoa_r+0x8dc>
 8008b80:	461a      	mov	r2, r3
 8008b82:	4601      	mov	r1, r0
 8008b84:	4628      	mov	r0, r5
 8008b86:	f000 fbdd 	bl	8009344 <__pow5mult>
 8008b8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	dd7f      	ble.n	8008c92 <_dtoa_r+0x8e2>
 8008b92:	f04f 0800 	mov.w	r8, #0
 8008b96:	6923      	ldr	r3, [r4, #16]
 8008b98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b9c:	6918      	ldr	r0, [r3, #16]
 8008b9e:	f000 fac5 	bl	800912c <__hi0bits>
 8008ba2:	f1c0 0020 	rsb	r0, r0, #32
 8008ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba8:	4418      	add	r0, r3
 8008baa:	f010 001f 	ands.w	r0, r0, #31
 8008bae:	f000 8092 	beq.w	8008cd6 <_dtoa_r+0x926>
 8008bb2:	f1c0 0320 	rsb	r3, r0, #32
 8008bb6:	2b04      	cmp	r3, #4
 8008bb8:	f340 808a 	ble.w	8008cd0 <_dtoa_r+0x920>
 8008bbc:	f1c0 001c 	rsb	r0, r0, #28
 8008bc0:	9b06      	ldr	r3, [sp, #24]
 8008bc2:	4407      	add	r7, r0
 8008bc4:	4403      	add	r3, r0
 8008bc6:	9306      	str	r3, [sp, #24]
 8008bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bca:	4403      	add	r3, r0
 8008bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8008bce:	9b06      	ldr	r3, [sp, #24]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	dd05      	ble.n	8008be0 <_dtoa_r+0x830>
 8008bd4:	4659      	mov	r1, fp
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	4628      	mov	r0, r5
 8008bda:	f000 fc0d 	bl	80093f8 <__lshift>
 8008bde:	4683      	mov	fp, r0
 8008be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	dd05      	ble.n	8008bf2 <_dtoa_r+0x842>
 8008be6:	4621      	mov	r1, r4
 8008be8:	461a      	mov	r2, r3
 8008bea:	4628      	mov	r0, r5
 8008bec:	f000 fc04 	bl	80093f8 <__lshift>
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d070      	beq.n	8008cda <_dtoa_r+0x92a>
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	4658      	mov	r0, fp
 8008bfc:	f000 fc6c 	bl	80094d8 <__mcmp>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	da6a      	bge.n	8008cda <_dtoa_r+0x92a>
 8008c04:	2300      	movs	r3, #0
 8008c06:	4659      	mov	r1, fp
 8008c08:	220a      	movs	r2, #10
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	f000 fa48 	bl	80090a0 <__multadd>
 8008c10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c12:	4683      	mov	fp, r0
 8008c14:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f000 8194 	beq.w	8008f46 <_dtoa_r+0xb96>
 8008c1e:	4631      	mov	r1, r6
 8008c20:	2300      	movs	r3, #0
 8008c22:	220a      	movs	r2, #10
 8008c24:	4628      	mov	r0, r5
 8008c26:	f000 fa3b 	bl	80090a0 <__multadd>
 8008c2a:	f1b9 0f00 	cmp.w	r9, #0
 8008c2e:	4606      	mov	r6, r0
 8008c30:	f300 8093 	bgt.w	8008d5a <_dtoa_r+0x9aa>
 8008c34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	dc57      	bgt.n	8008cea <_dtoa_r+0x93a>
 8008c3a:	e08e      	b.n	8008d5a <_dtoa_r+0x9aa>
 8008c3c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008c3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c42:	e757      	b.n	8008af4 <_dtoa_r+0x744>
 8008c44:	9b08      	ldr	r3, [sp, #32]
 8008c46:	1e5c      	subs	r4, r3, #1
 8008c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c4a:	42a3      	cmp	r3, r4
 8008c4c:	bfb7      	itett	lt
 8008c4e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008c50:	1b1c      	subge	r4, r3, r4
 8008c52:	1ae2      	sublt	r2, r4, r3
 8008c54:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008c56:	bfbe      	ittt	lt
 8008c58:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008c5a:	189b      	addlt	r3, r3, r2
 8008c5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008c5e:	9b08      	ldr	r3, [sp, #32]
 8008c60:	bfb8      	it	lt
 8008c62:	2400      	movlt	r4, #0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	bfbb      	ittet	lt
 8008c68:	9b06      	ldrlt	r3, [sp, #24]
 8008c6a:	9a08      	ldrlt	r2, [sp, #32]
 8008c6c:	9f06      	ldrge	r7, [sp, #24]
 8008c6e:	1a9f      	sublt	r7, r3, r2
 8008c70:	bfac      	ite	ge
 8008c72:	9b08      	ldrge	r3, [sp, #32]
 8008c74:	2300      	movlt	r3, #0
 8008c76:	e73f      	b.n	8008af8 <_dtoa_r+0x748>
 8008c78:	3fe00000 	.word	0x3fe00000
 8008c7c:	40240000 	.word	0x40240000
 8008c80:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008c82:	9f06      	ldr	r7, [sp, #24]
 8008c84:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008c86:	e742      	b.n	8008b0e <_dtoa_r+0x75e>
 8008c88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c8a:	e76b      	b.n	8008b64 <_dtoa_r+0x7b4>
 8008c8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	dc19      	bgt.n	8008cc6 <_dtoa_r+0x916>
 8008c92:	9b04      	ldr	r3, [sp, #16]
 8008c94:	b9bb      	cbnz	r3, 8008cc6 <_dtoa_r+0x916>
 8008c96:	9b05      	ldr	r3, [sp, #20]
 8008c98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c9c:	b99b      	cbnz	r3, 8008cc6 <_dtoa_r+0x916>
 8008c9e:	9b05      	ldr	r3, [sp, #20]
 8008ca0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ca4:	0d1b      	lsrs	r3, r3, #20
 8008ca6:	051b      	lsls	r3, r3, #20
 8008ca8:	b183      	cbz	r3, 8008ccc <_dtoa_r+0x91c>
 8008caa:	f04f 0801 	mov.w	r8, #1
 8008cae:	9b06      	ldr	r3, [sp, #24]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	9306      	str	r3, [sp, #24]
 8008cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f47f af6a 	bne.w	8008b96 <_dtoa_r+0x7e6>
 8008cc2:	2001      	movs	r0, #1
 8008cc4:	e76f      	b.n	8008ba6 <_dtoa_r+0x7f6>
 8008cc6:	f04f 0800 	mov.w	r8, #0
 8008cca:	e7f6      	b.n	8008cba <_dtoa_r+0x90a>
 8008ccc:	4698      	mov	r8, r3
 8008cce:	e7f4      	b.n	8008cba <_dtoa_r+0x90a>
 8008cd0:	f43f af7d 	beq.w	8008bce <_dtoa_r+0x81e>
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	301c      	adds	r0, #28
 8008cd8:	e772      	b.n	8008bc0 <_dtoa_r+0x810>
 8008cda:	9b08      	ldr	r3, [sp, #32]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	dc36      	bgt.n	8008d4e <_dtoa_r+0x99e>
 8008ce0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	dd33      	ble.n	8008d4e <_dtoa_r+0x99e>
 8008ce6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008cea:	f1b9 0f00 	cmp.w	r9, #0
 8008cee:	d10d      	bne.n	8008d0c <_dtoa_r+0x95c>
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	464b      	mov	r3, r9
 8008cf4:	2205      	movs	r2, #5
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	f000 f9d2 	bl	80090a0 <__multadd>
 8008cfc:	4601      	mov	r1, r0
 8008cfe:	4604      	mov	r4, r0
 8008d00:	4658      	mov	r0, fp
 8008d02:	f000 fbe9 	bl	80094d8 <__mcmp>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	f73f adb8 	bgt.w	800887c <_dtoa_r+0x4cc>
 8008d0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d0e:	9f03      	ldr	r7, [sp, #12]
 8008d10:	ea6f 0a03 	mvn.w	sl, r3
 8008d14:	f04f 0800 	mov.w	r8, #0
 8008d18:	4621      	mov	r1, r4
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	f000 f99e 	bl	800905c <_Bfree>
 8008d20:	2e00      	cmp	r6, #0
 8008d22:	f43f aea7 	beq.w	8008a74 <_dtoa_r+0x6c4>
 8008d26:	f1b8 0f00 	cmp.w	r8, #0
 8008d2a:	d005      	beq.n	8008d38 <_dtoa_r+0x988>
 8008d2c:	45b0      	cmp	r8, r6
 8008d2e:	d003      	beq.n	8008d38 <_dtoa_r+0x988>
 8008d30:	4641      	mov	r1, r8
 8008d32:	4628      	mov	r0, r5
 8008d34:	f000 f992 	bl	800905c <_Bfree>
 8008d38:	4631      	mov	r1, r6
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	f000 f98e 	bl	800905c <_Bfree>
 8008d40:	e698      	b.n	8008a74 <_dtoa_r+0x6c4>
 8008d42:	2400      	movs	r4, #0
 8008d44:	4626      	mov	r6, r4
 8008d46:	e7e1      	b.n	8008d0c <_dtoa_r+0x95c>
 8008d48:	46c2      	mov	sl, r8
 8008d4a:	4626      	mov	r6, r4
 8008d4c:	e596      	b.n	800887c <_dtoa_r+0x4cc>
 8008d4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f000 80fd 	beq.w	8008f54 <_dtoa_r+0xba4>
 8008d5a:	2f00      	cmp	r7, #0
 8008d5c:	dd05      	ble.n	8008d6a <_dtoa_r+0x9ba>
 8008d5e:	4631      	mov	r1, r6
 8008d60:	463a      	mov	r2, r7
 8008d62:	4628      	mov	r0, r5
 8008d64:	f000 fb48 	bl	80093f8 <__lshift>
 8008d68:	4606      	mov	r6, r0
 8008d6a:	f1b8 0f00 	cmp.w	r8, #0
 8008d6e:	d05c      	beq.n	8008e2a <_dtoa_r+0xa7a>
 8008d70:	4628      	mov	r0, r5
 8008d72:	6871      	ldr	r1, [r6, #4]
 8008d74:	f000 f932 	bl	8008fdc <_Balloc>
 8008d78:	4607      	mov	r7, r0
 8008d7a:	b928      	cbnz	r0, 8008d88 <_dtoa_r+0x9d8>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008d82:	4b7f      	ldr	r3, [pc, #508]	; (8008f80 <_dtoa_r+0xbd0>)
 8008d84:	f7ff bb28 	b.w	80083d8 <_dtoa_r+0x28>
 8008d88:	6932      	ldr	r2, [r6, #16]
 8008d8a:	f106 010c 	add.w	r1, r6, #12
 8008d8e:	3202      	adds	r2, #2
 8008d90:	0092      	lsls	r2, r2, #2
 8008d92:	300c      	adds	r0, #12
 8008d94:	f000 f914 	bl	8008fc0 <memcpy>
 8008d98:	2201      	movs	r2, #1
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	f000 fb2b 	bl	80093f8 <__lshift>
 8008da2:	46b0      	mov	r8, r6
 8008da4:	4606      	mov	r6, r0
 8008da6:	9b03      	ldr	r3, [sp, #12]
 8008da8:	3301      	adds	r3, #1
 8008daa:	9308      	str	r3, [sp, #32]
 8008dac:	9b03      	ldr	r3, [sp, #12]
 8008dae:	444b      	add	r3, r9
 8008db0:	930a      	str	r3, [sp, #40]	; 0x28
 8008db2:	9b04      	ldr	r3, [sp, #16]
 8008db4:	f003 0301 	and.w	r3, r3, #1
 8008db8:	9309      	str	r3, [sp, #36]	; 0x24
 8008dba:	9b08      	ldr	r3, [sp, #32]
 8008dbc:	4621      	mov	r1, r4
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	4658      	mov	r0, fp
 8008dc2:	9304      	str	r3, [sp, #16]
 8008dc4:	f7ff fa66 	bl	8008294 <quorem>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	4641      	mov	r1, r8
 8008dcc:	3330      	adds	r3, #48	; 0x30
 8008dce:	9006      	str	r0, [sp, #24]
 8008dd0:	4658      	mov	r0, fp
 8008dd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dd4:	f000 fb80 	bl	80094d8 <__mcmp>
 8008dd8:	4632      	mov	r2, r6
 8008dda:	4681      	mov	r9, r0
 8008ddc:	4621      	mov	r1, r4
 8008dde:	4628      	mov	r0, r5
 8008de0:	f000 fb96 	bl	8009510 <__mdiff>
 8008de4:	68c2      	ldr	r2, [r0, #12]
 8008de6:	4607      	mov	r7, r0
 8008de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dea:	bb02      	cbnz	r2, 8008e2e <_dtoa_r+0xa7e>
 8008dec:	4601      	mov	r1, r0
 8008dee:	4658      	mov	r0, fp
 8008df0:	f000 fb72 	bl	80094d8 <__mcmp>
 8008df4:	4602      	mov	r2, r0
 8008df6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008df8:	4639      	mov	r1, r7
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008e00:	f000 f92c 	bl	800905c <_Bfree>
 8008e04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e08:	9f08      	ldr	r7, [sp, #32]
 8008e0a:	ea43 0102 	orr.w	r1, r3, r2
 8008e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e10:	430b      	orrs	r3, r1
 8008e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e14:	d10d      	bne.n	8008e32 <_dtoa_r+0xa82>
 8008e16:	2b39      	cmp	r3, #57	; 0x39
 8008e18:	d029      	beq.n	8008e6e <_dtoa_r+0xabe>
 8008e1a:	f1b9 0f00 	cmp.w	r9, #0
 8008e1e:	dd01      	ble.n	8008e24 <_dtoa_r+0xa74>
 8008e20:	9b06      	ldr	r3, [sp, #24]
 8008e22:	3331      	adds	r3, #49	; 0x31
 8008e24:	9a04      	ldr	r2, [sp, #16]
 8008e26:	7013      	strb	r3, [r2, #0]
 8008e28:	e776      	b.n	8008d18 <_dtoa_r+0x968>
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	e7b9      	b.n	8008da2 <_dtoa_r+0x9f2>
 8008e2e:	2201      	movs	r2, #1
 8008e30:	e7e2      	b.n	8008df8 <_dtoa_r+0xa48>
 8008e32:	f1b9 0f00 	cmp.w	r9, #0
 8008e36:	db06      	blt.n	8008e46 <_dtoa_r+0xa96>
 8008e38:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008e3a:	ea41 0909 	orr.w	r9, r1, r9
 8008e3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e40:	ea59 0101 	orrs.w	r1, r9, r1
 8008e44:	d120      	bne.n	8008e88 <_dtoa_r+0xad8>
 8008e46:	2a00      	cmp	r2, #0
 8008e48:	ddec      	ble.n	8008e24 <_dtoa_r+0xa74>
 8008e4a:	4659      	mov	r1, fp
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	4628      	mov	r0, r5
 8008e50:	9308      	str	r3, [sp, #32]
 8008e52:	f000 fad1 	bl	80093f8 <__lshift>
 8008e56:	4621      	mov	r1, r4
 8008e58:	4683      	mov	fp, r0
 8008e5a:	f000 fb3d 	bl	80094d8 <__mcmp>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	9b08      	ldr	r3, [sp, #32]
 8008e62:	dc02      	bgt.n	8008e6a <_dtoa_r+0xaba>
 8008e64:	d1de      	bne.n	8008e24 <_dtoa_r+0xa74>
 8008e66:	07da      	lsls	r2, r3, #31
 8008e68:	d5dc      	bpl.n	8008e24 <_dtoa_r+0xa74>
 8008e6a:	2b39      	cmp	r3, #57	; 0x39
 8008e6c:	d1d8      	bne.n	8008e20 <_dtoa_r+0xa70>
 8008e6e:	2339      	movs	r3, #57	; 0x39
 8008e70:	9a04      	ldr	r2, [sp, #16]
 8008e72:	7013      	strb	r3, [r2, #0]
 8008e74:	463b      	mov	r3, r7
 8008e76:	461f      	mov	r7, r3
 8008e78:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	2a39      	cmp	r2, #57	; 0x39
 8008e80:	d050      	beq.n	8008f24 <_dtoa_r+0xb74>
 8008e82:	3201      	adds	r2, #1
 8008e84:	701a      	strb	r2, [r3, #0]
 8008e86:	e747      	b.n	8008d18 <_dtoa_r+0x968>
 8008e88:	2a00      	cmp	r2, #0
 8008e8a:	dd03      	ble.n	8008e94 <_dtoa_r+0xae4>
 8008e8c:	2b39      	cmp	r3, #57	; 0x39
 8008e8e:	d0ee      	beq.n	8008e6e <_dtoa_r+0xabe>
 8008e90:	3301      	adds	r3, #1
 8008e92:	e7c7      	b.n	8008e24 <_dtoa_r+0xa74>
 8008e94:	9a08      	ldr	r2, [sp, #32]
 8008e96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e98:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008e9c:	428a      	cmp	r2, r1
 8008e9e:	d02a      	beq.n	8008ef6 <_dtoa_r+0xb46>
 8008ea0:	4659      	mov	r1, fp
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	220a      	movs	r2, #10
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	f000 f8fa 	bl	80090a0 <__multadd>
 8008eac:	45b0      	cmp	r8, r6
 8008eae:	4683      	mov	fp, r0
 8008eb0:	f04f 0300 	mov.w	r3, #0
 8008eb4:	f04f 020a 	mov.w	r2, #10
 8008eb8:	4641      	mov	r1, r8
 8008eba:	4628      	mov	r0, r5
 8008ebc:	d107      	bne.n	8008ece <_dtoa_r+0xb1e>
 8008ebe:	f000 f8ef 	bl	80090a0 <__multadd>
 8008ec2:	4680      	mov	r8, r0
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	9b08      	ldr	r3, [sp, #32]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	9308      	str	r3, [sp, #32]
 8008ecc:	e775      	b.n	8008dba <_dtoa_r+0xa0a>
 8008ece:	f000 f8e7 	bl	80090a0 <__multadd>
 8008ed2:	4631      	mov	r1, r6
 8008ed4:	4680      	mov	r8, r0
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	220a      	movs	r2, #10
 8008eda:	4628      	mov	r0, r5
 8008edc:	f000 f8e0 	bl	80090a0 <__multadd>
 8008ee0:	4606      	mov	r6, r0
 8008ee2:	e7f0      	b.n	8008ec6 <_dtoa_r+0xb16>
 8008ee4:	f1b9 0f00 	cmp.w	r9, #0
 8008ee8:	bfcc      	ite	gt
 8008eea:	464f      	movgt	r7, r9
 8008eec:	2701      	movle	r7, #1
 8008eee:	f04f 0800 	mov.w	r8, #0
 8008ef2:	9a03      	ldr	r2, [sp, #12]
 8008ef4:	4417      	add	r7, r2
 8008ef6:	4659      	mov	r1, fp
 8008ef8:	2201      	movs	r2, #1
 8008efa:	4628      	mov	r0, r5
 8008efc:	9308      	str	r3, [sp, #32]
 8008efe:	f000 fa7b 	bl	80093f8 <__lshift>
 8008f02:	4621      	mov	r1, r4
 8008f04:	4683      	mov	fp, r0
 8008f06:	f000 fae7 	bl	80094d8 <__mcmp>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	dcb2      	bgt.n	8008e74 <_dtoa_r+0xac4>
 8008f0e:	d102      	bne.n	8008f16 <_dtoa_r+0xb66>
 8008f10:	9b08      	ldr	r3, [sp, #32]
 8008f12:	07db      	lsls	r3, r3, #31
 8008f14:	d4ae      	bmi.n	8008e74 <_dtoa_r+0xac4>
 8008f16:	463b      	mov	r3, r7
 8008f18:	461f      	mov	r7, r3
 8008f1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f1e:	2a30      	cmp	r2, #48	; 0x30
 8008f20:	d0fa      	beq.n	8008f18 <_dtoa_r+0xb68>
 8008f22:	e6f9      	b.n	8008d18 <_dtoa_r+0x968>
 8008f24:	9a03      	ldr	r2, [sp, #12]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d1a5      	bne.n	8008e76 <_dtoa_r+0xac6>
 8008f2a:	2331      	movs	r3, #49	; 0x31
 8008f2c:	f10a 0a01 	add.w	sl, sl, #1
 8008f30:	e779      	b.n	8008e26 <_dtoa_r+0xa76>
 8008f32:	4b14      	ldr	r3, [pc, #80]	; (8008f84 <_dtoa_r+0xbd4>)
 8008f34:	f7ff baa8 	b.w	8008488 <_dtoa_r+0xd8>
 8008f38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f47f aa81 	bne.w	8008442 <_dtoa_r+0x92>
 8008f40:	4b11      	ldr	r3, [pc, #68]	; (8008f88 <_dtoa_r+0xbd8>)
 8008f42:	f7ff baa1 	b.w	8008488 <_dtoa_r+0xd8>
 8008f46:	f1b9 0f00 	cmp.w	r9, #0
 8008f4a:	dc03      	bgt.n	8008f54 <_dtoa_r+0xba4>
 8008f4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	f73f aecb 	bgt.w	8008cea <_dtoa_r+0x93a>
 8008f54:	9f03      	ldr	r7, [sp, #12]
 8008f56:	4621      	mov	r1, r4
 8008f58:	4658      	mov	r0, fp
 8008f5a:	f7ff f99b 	bl	8008294 <quorem>
 8008f5e:	9a03      	ldr	r2, [sp, #12]
 8008f60:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008f64:	f807 3b01 	strb.w	r3, [r7], #1
 8008f68:	1aba      	subs	r2, r7, r2
 8008f6a:	4591      	cmp	r9, r2
 8008f6c:	ddba      	ble.n	8008ee4 <_dtoa_r+0xb34>
 8008f6e:	4659      	mov	r1, fp
 8008f70:	2300      	movs	r3, #0
 8008f72:	220a      	movs	r2, #10
 8008f74:	4628      	mov	r0, r5
 8008f76:	f000 f893 	bl	80090a0 <__multadd>
 8008f7a:	4683      	mov	fp, r0
 8008f7c:	e7eb      	b.n	8008f56 <_dtoa_r+0xba6>
 8008f7e:	bf00      	nop
 8008f80:	0800a4eb 	.word	0x0800a4eb
 8008f84:	0800a448 	.word	0x0800a448
 8008f88:	0800a46c 	.word	0x0800a46c

08008f8c <_localeconv_r>:
 8008f8c:	4800      	ldr	r0, [pc, #0]	; (8008f90 <_localeconv_r+0x4>)
 8008f8e:	4770      	bx	lr
 8008f90:	2000016c 	.word	0x2000016c

08008f94 <malloc>:
 8008f94:	4b02      	ldr	r3, [pc, #8]	; (8008fa0 <malloc+0xc>)
 8008f96:	4601      	mov	r1, r0
 8008f98:	6818      	ldr	r0, [r3, #0]
 8008f9a:	f000 bc1d 	b.w	80097d8 <_malloc_r>
 8008f9e:	bf00      	nop
 8008fa0:	20000018 	.word	0x20000018

08008fa4 <memchr>:
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	b510      	push	{r4, lr}
 8008fa8:	b2c9      	uxtb	r1, r1
 8008faa:	4402      	add	r2, r0
 8008fac:	4293      	cmp	r3, r2
 8008fae:	4618      	mov	r0, r3
 8008fb0:	d101      	bne.n	8008fb6 <memchr+0x12>
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	e003      	b.n	8008fbe <memchr+0x1a>
 8008fb6:	7804      	ldrb	r4, [r0, #0]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	428c      	cmp	r4, r1
 8008fbc:	d1f6      	bne.n	8008fac <memchr+0x8>
 8008fbe:	bd10      	pop	{r4, pc}

08008fc0 <memcpy>:
 8008fc0:	440a      	add	r2, r1
 8008fc2:	4291      	cmp	r1, r2
 8008fc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fc8:	d100      	bne.n	8008fcc <memcpy+0xc>
 8008fca:	4770      	bx	lr
 8008fcc:	b510      	push	{r4, lr}
 8008fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fd2:	4291      	cmp	r1, r2
 8008fd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fd8:	d1f9      	bne.n	8008fce <memcpy+0xe>
 8008fda:	bd10      	pop	{r4, pc}

08008fdc <_Balloc>:
 8008fdc:	b570      	push	{r4, r5, r6, lr}
 8008fde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	460d      	mov	r5, r1
 8008fe4:	b976      	cbnz	r6, 8009004 <_Balloc+0x28>
 8008fe6:	2010      	movs	r0, #16
 8008fe8:	f7ff ffd4 	bl	8008f94 <malloc>
 8008fec:	4602      	mov	r2, r0
 8008fee:	6260      	str	r0, [r4, #36]	; 0x24
 8008ff0:	b920      	cbnz	r0, 8008ffc <_Balloc+0x20>
 8008ff2:	2166      	movs	r1, #102	; 0x66
 8008ff4:	4b17      	ldr	r3, [pc, #92]	; (8009054 <_Balloc+0x78>)
 8008ff6:	4818      	ldr	r0, [pc, #96]	; (8009058 <_Balloc+0x7c>)
 8008ff8:	f000 fc72 	bl	80098e0 <__assert_func>
 8008ffc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009000:	6006      	str	r6, [r0, #0]
 8009002:	60c6      	str	r6, [r0, #12]
 8009004:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009006:	68f3      	ldr	r3, [r6, #12]
 8009008:	b183      	cbz	r3, 800902c <_Balloc+0x50>
 800900a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009012:	b9b8      	cbnz	r0, 8009044 <_Balloc+0x68>
 8009014:	2101      	movs	r1, #1
 8009016:	fa01 f605 	lsl.w	r6, r1, r5
 800901a:	1d72      	adds	r2, r6, #5
 800901c:	4620      	mov	r0, r4
 800901e:	0092      	lsls	r2, r2, #2
 8009020:	f000 fb5e 	bl	80096e0 <_calloc_r>
 8009024:	b160      	cbz	r0, 8009040 <_Balloc+0x64>
 8009026:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800902a:	e00e      	b.n	800904a <_Balloc+0x6e>
 800902c:	2221      	movs	r2, #33	; 0x21
 800902e:	2104      	movs	r1, #4
 8009030:	4620      	mov	r0, r4
 8009032:	f000 fb55 	bl	80096e0 <_calloc_r>
 8009036:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009038:	60f0      	str	r0, [r6, #12]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1e4      	bne.n	800900a <_Balloc+0x2e>
 8009040:	2000      	movs	r0, #0
 8009042:	bd70      	pop	{r4, r5, r6, pc}
 8009044:	6802      	ldr	r2, [r0, #0]
 8009046:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800904a:	2300      	movs	r3, #0
 800904c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009050:	e7f7      	b.n	8009042 <_Balloc+0x66>
 8009052:	bf00      	nop
 8009054:	0800a479 	.word	0x0800a479
 8009058:	0800a4fc 	.word	0x0800a4fc

0800905c <_Bfree>:
 800905c:	b570      	push	{r4, r5, r6, lr}
 800905e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009060:	4605      	mov	r5, r0
 8009062:	460c      	mov	r4, r1
 8009064:	b976      	cbnz	r6, 8009084 <_Bfree+0x28>
 8009066:	2010      	movs	r0, #16
 8009068:	f7ff ff94 	bl	8008f94 <malloc>
 800906c:	4602      	mov	r2, r0
 800906e:	6268      	str	r0, [r5, #36]	; 0x24
 8009070:	b920      	cbnz	r0, 800907c <_Bfree+0x20>
 8009072:	218a      	movs	r1, #138	; 0x8a
 8009074:	4b08      	ldr	r3, [pc, #32]	; (8009098 <_Bfree+0x3c>)
 8009076:	4809      	ldr	r0, [pc, #36]	; (800909c <_Bfree+0x40>)
 8009078:	f000 fc32 	bl	80098e0 <__assert_func>
 800907c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009080:	6006      	str	r6, [r0, #0]
 8009082:	60c6      	str	r6, [r0, #12]
 8009084:	b13c      	cbz	r4, 8009096 <_Bfree+0x3a>
 8009086:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009088:	6862      	ldr	r2, [r4, #4]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009090:	6021      	str	r1, [r4, #0]
 8009092:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009096:	bd70      	pop	{r4, r5, r6, pc}
 8009098:	0800a479 	.word	0x0800a479
 800909c:	0800a4fc 	.word	0x0800a4fc

080090a0 <__multadd>:
 80090a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a4:	4607      	mov	r7, r0
 80090a6:	460c      	mov	r4, r1
 80090a8:	461e      	mov	r6, r3
 80090aa:	2000      	movs	r0, #0
 80090ac:	690d      	ldr	r5, [r1, #16]
 80090ae:	f101 0c14 	add.w	ip, r1, #20
 80090b2:	f8dc 3000 	ldr.w	r3, [ip]
 80090b6:	3001      	adds	r0, #1
 80090b8:	b299      	uxth	r1, r3
 80090ba:	fb02 6101 	mla	r1, r2, r1, r6
 80090be:	0c1e      	lsrs	r6, r3, #16
 80090c0:	0c0b      	lsrs	r3, r1, #16
 80090c2:	fb02 3306 	mla	r3, r2, r6, r3
 80090c6:	b289      	uxth	r1, r1
 80090c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80090cc:	4285      	cmp	r5, r0
 80090ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80090d2:	f84c 1b04 	str.w	r1, [ip], #4
 80090d6:	dcec      	bgt.n	80090b2 <__multadd+0x12>
 80090d8:	b30e      	cbz	r6, 800911e <__multadd+0x7e>
 80090da:	68a3      	ldr	r3, [r4, #8]
 80090dc:	42ab      	cmp	r3, r5
 80090de:	dc19      	bgt.n	8009114 <__multadd+0x74>
 80090e0:	6861      	ldr	r1, [r4, #4]
 80090e2:	4638      	mov	r0, r7
 80090e4:	3101      	adds	r1, #1
 80090e6:	f7ff ff79 	bl	8008fdc <_Balloc>
 80090ea:	4680      	mov	r8, r0
 80090ec:	b928      	cbnz	r0, 80090fa <__multadd+0x5a>
 80090ee:	4602      	mov	r2, r0
 80090f0:	21b5      	movs	r1, #181	; 0xb5
 80090f2:	4b0c      	ldr	r3, [pc, #48]	; (8009124 <__multadd+0x84>)
 80090f4:	480c      	ldr	r0, [pc, #48]	; (8009128 <__multadd+0x88>)
 80090f6:	f000 fbf3 	bl	80098e0 <__assert_func>
 80090fa:	6922      	ldr	r2, [r4, #16]
 80090fc:	f104 010c 	add.w	r1, r4, #12
 8009100:	3202      	adds	r2, #2
 8009102:	0092      	lsls	r2, r2, #2
 8009104:	300c      	adds	r0, #12
 8009106:	f7ff ff5b 	bl	8008fc0 <memcpy>
 800910a:	4621      	mov	r1, r4
 800910c:	4638      	mov	r0, r7
 800910e:	f7ff ffa5 	bl	800905c <_Bfree>
 8009112:	4644      	mov	r4, r8
 8009114:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009118:	3501      	adds	r5, #1
 800911a:	615e      	str	r6, [r3, #20]
 800911c:	6125      	str	r5, [r4, #16]
 800911e:	4620      	mov	r0, r4
 8009120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009124:	0800a4eb 	.word	0x0800a4eb
 8009128:	0800a4fc 	.word	0x0800a4fc

0800912c <__hi0bits>:
 800912c:	0c02      	lsrs	r2, r0, #16
 800912e:	0412      	lsls	r2, r2, #16
 8009130:	4603      	mov	r3, r0
 8009132:	b9ca      	cbnz	r2, 8009168 <__hi0bits+0x3c>
 8009134:	0403      	lsls	r3, r0, #16
 8009136:	2010      	movs	r0, #16
 8009138:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800913c:	bf04      	itt	eq
 800913e:	021b      	lsleq	r3, r3, #8
 8009140:	3008      	addeq	r0, #8
 8009142:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009146:	bf04      	itt	eq
 8009148:	011b      	lsleq	r3, r3, #4
 800914a:	3004      	addeq	r0, #4
 800914c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009150:	bf04      	itt	eq
 8009152:	009b      	lsleq	r3, r3, #2
 8009154:	3002      	addeq	r0, #2
 8009156:	2b00      	cmp	r3, #0
 8009158:	db05      	blt.n	8009166 <__hi0bits+0x3a>
 800915a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800915e:	f100 0001 	add.w	r0, r0, #1
 8009162:	bf08      	it	eq
 8009164:	2020      	moveq	r0, #32
 8009166:	4770      	bx	lr
 8009168:	2000      	movs	r0, #0
 800916a:	e7e5      	b.n	8009138 <__hi0bits+0xc>

0800916c <__lo0bits>:
 800916c:	6803      	ldr	r3, [r0, #0]
 800916e:	4602      	mov	r2, r0
 8009170:	f013 0007 	ands.w	r0, r3, #7
 8009174:	d00b      	beq.n	800918e <__lo0bits+0x22>
 8009176:	07d9      	lsls	r1, r3, #31
 8009178:	d421      	bmi.n	80091be <__lo0bits+0x52>
 800917a:	0798      	lsls	r0, r3, #30
 800917c:	bf49      	itett	mi
 800917e:	085b      	lsrmi	r3, r3, #1
 8009180:	089b      	lsrpl	r3, r3, #2
 8009182:	2001      	movmi	r0, #1
 8009184:	6013      	strmi	r3, [r2, #0]
 8009186:	bf5c      	itt	pl
 8009188:	2002      	movpl	r0, #2
 800918a:	6013      	strpl	r3, [r2, #0]
 800918c:	4770      	bx	lr
 800918e:	b299      	uxth	r1, r3
 8009190:	b909      	cbnz	r1, 8009196 <__lo0bits+0x2a>
 8009192:	2010      	movs	r0, #16
 8009194:	0c1b      	lsrs	r3, r3, #16
 8009196:	b2d9      	uxtb	r1, r3
 8009198:	b909      	cbnz	r1, 800919e <__lo0bits+0x32>
 800919a:	3008      	adds	r0, #8
 800919c:	0a1b      	lsrs	r3, r3, #8
 800919e:	0719      	lsls	r1, r3, #28
 80091a0:	bf04      	itt	eq
 80091a2:	091b      	lsreq	r3, r3, #4
 80091a4:	3004      	addeq	r0, #4
 80091a6:	0799      	lsls	r1, r3, #30
 80091a8:	bf04      	itt	eq
 80091aa:	089b      	lsreq	r3, r3, #2
 80091ac:	3002      	addeq	r0, #2
 80091ae:	07d9      	lsls	r1, r3, #31
 80091b0:	d403      	bmi.n	80091ba <__lo0bits+0x4e>
 80091b2:	085b      	lsrs	r3, r3, #1
 80091b4:	f100 0001 	add.w	r0, r0, #1
 80091b8:	d003      	beq.n	80091c2 <__lo0bits+0x56>
 80091ba:	6013      	str	r3, [r2, #0]
 80091bc:	4770      	bx	lr
 80091be:	2000      	movs	r0, #0
 80091c0:	4770      	bx	lr
 80091c2:	2020      	movs	r0, #32
 80091c4:	4770      	bx	lr
	...

080091c8 <__i2b>:
 80091c8:	b510      	push	{r4, lr}
 80091ca:	460c      	mov	r4, r1
 80091cc:	2101      	movs	r1, #1
 80091ce:	f7ff ff05 	bl	8008fdc <_Balloc>
 80091d2:	4602      	mov	r2, r0
 80091d4:	b928      	cbnz	r0, 80091e2 <__i2b+0x1a>
 80091d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80091da:	4b04      	ldr	r3, [pc, #16]	; (80091ec <__i2b+0x24>)
 80091dc:	4804      	ldr	r0, [pc, #16]	; (80091f0 <__i2b+0x28>)
 80091de:	f000 fb7f 	bl	80098e0 <__assert_func>
 80091e2:	2301      	movs	r3, #1
 80091e4:	6144      	str	r4, [r0, #20]
 80091e6:	6103      	str	r3, [r0, #16]
 80091e8:	bd10      	pop	{r4, pc}
 80091ea:	bf00      	nop
 80091ec:	0800a4eb 	.word	0x0800a4eb
 80091f0:	0800a4fc 	.word	0x0800a4fc

080091f4 <__multiply>:
 80091f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f8:	4691      	mov	r9, r2
 80091fa:	690a      	ldr	r2, [r1, #16]
 80091fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009200:	460c      	mov	r4, r1
 8009202:	429a      	cmp	r2, r3
 8009204:	bfbe      	ittt	lt
 8009206:	460b      	movlt	r3, r1
 8009208:	464c      	movlt	r4, r9
 800920a:	4699      	movlt	r9, r3
 800920c:	6927      	ldr	r7, [r4, #16]
 800920e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009212:	68a3      	ldr	r3, [r4, #8]
 8009214:	6861      	ldr	r1, [r4, #4]
 8009216:	eb07 060a 	add.w	r6, r7, sl
 800921a:	42b3      	cmp	r3, r6
 800921c:	b085      	sub	sp, #20
 800921e:	bfb8      	it	lt
 8009220:	3101      	addlt	r1, #1
 8009222:	f7ff fedb 	bl	8008fdc <_Balloc>
 8009226:	b930      	cbnz	r0, 8009236 <__multiply+0x42>
 8009228:	4602      	mov	r2, r0
 800922a:	f240 115d 	movw	r1, #349	; 0x15d
 800922e:	4b43      	ldr	r3, [pc, #268]	; (800933c <__multiply+0x148>)
 8009230:	4843      	ldr	r0, [pc, #268]	; (8009340 <__multiply+0x14c>)
 8009232:	f000 fb55 	bl	80098e0 <__assert_func>
 8009236:	f100 0514 	add.w	r5, r0, #20
 800923a:	462b      	mov	r3, r5
 800923c:	2200      	movs	r2, #0
 800923e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009242:	4543      	cmp	r3, r8
 8009244:	d321      	bcc.n	800928a <__multiply+0x96>
 8009246:	f104 0314 	add.w	r3, r4, #20
 800924a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800924e:	f109 0314 	add.w	r3, r9, #20
 8009252:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009256:	9202      	str	r2, [sp, #8]
 8009258:	1b3a      	subs	r2, r7, r4
 800925a:	3a15      	subs	r2, #21
 800925c:	f022 0203 	bic.w	r2, r2, #3
 8009260:	3204      	adds	r2, #4
 8009262:	f104 0115 	add.w	r1, r4, #21
 8009266:	428f      	cmp	r7, r1
 8009268:	bf38      	it	cc
 800926a:	2204      	movcc	r2, #4
 800926c:	9201      	str	r2, [sp, #4]
 800926e:	9a02      	ldr	r2, [sp, #8]
 8009270:	9303      	str	r3, [sp, #12]
 8009272:	429a      	cmp	r2, r3
 8009274:	d80c      	bhi.n	8009290 <__multiply+0x9c>
 8009276:	2e00      	cmp	r6, #0
 8009278:	dd03      	ble.n	8009282 <__multiply+0x8e>
 800927a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800927e:	2b00      	cmp	r3, #0
 8009280:	d059      	beq.n	8009336 <__multiply+0x142>
 8009282:	6106      	str	r6, [r0, #16]
 8009284:	b005      	add	sp, #20
 8009286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800928a:	f843 2b04 	str.w	r2, [r3], #4
 800928e:	e7d8      	b.n	8009242 <__multiply+0x4e>
 8009290:	f8b3 a000 	ldrh.w	sl, [r3]
 8009294:	f1ba 0f00 	cmp.w	sl, #0
 8009298:	d023      	beq.n	80092e2 <__multiply+0xee>
 800929a:	46a9      	mov	r9, r5
 800929c:	f04f 0c00 	mov.w	ip, #0
 80092a0:	f104 0e14 	add.w	lr, r4, #20
 80092a4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80092a8:	f8d9 1000 	ldr.w	r1, [r9]
 80092ac:	fa1f fb82 	uxth.w	fp, r2
 80092b0:	b289      	uxth	r1, r1
 80092b2:	fb0a 110b 	mla	r1, sl, fp, r1
 80092b6:	4461      	add	r1, ip
 80092b8:	f8d9 c000 	ldr.w	ip, [r9]
 80092bc:	0c12      	lsrs	r2, r2, #16
 80092be:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80092c2:	fb0a c202 	mla	r2, sl, r2, ip
 80092c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80092ca:	b289      	uxth	r1, r1
 80092cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80092d0:	4577      	cmp	r7, lr
 80092d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80092d6:	f849 1b04 	str.w	r1, [r9], #4
 80092da:	d8e3      	bhi.n	80092a4 <__multiply+0xb0>
 80092dc:	9a01      	ldr	r2, [sp, #4]
 80092de:	f845 c002 	str.w	ip, [r5, r2]
 80092e2:	9a03      	ldr	r2, [sp, #12]
 80092e4:	3304      	adds	r3, #4
 80092e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80092ea:	f1b9 0f00 	cmp.w	r9, #0
 80092ee:	d020      	beq.n	8009332 <__multiply+0x13e>
 80092f0:	46ae      	mov	lr, r5
 80092f2:	f04f 0a00 	mov.w	sl, #0
 80092f6:	6829      	ldr	r1, [r5, #0]
 80092f8:	f104 0c14 	add.w	ip, r4, #20
 80092fc:	f8bc b000 	ldrh.w	fp, [ip]
 8009300:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009304:	b289      	uxth	r1, r1
 8009306:	fb09 220b 	mla	r2, r9, fp, r2
 800930a:	4492      	add	sl, r2
 800930c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009310:	f84e 1b04 	str.w	r1, [lr], #4
 8009314:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009318:	f8be 1000 	ldrh.w	r1, [lr]
 800931c:	0c12      	lsrs	r2, r2, #16
 800931e:	fb09 1102 	mla	r1, r9, r2, r1
 8009322:	4567      	cmp	r7, ip
 8009324:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009328:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800932c:	d8e6      	bhi.n	80092fc <__multiply+0x108>
 800932e:	9a01      	ldr	r2, [sp, #4]
 8009330:	50a9      	str	r1, [r5, r2]
 8009332:	3504      	adds	r5, #4
 8009334:	e79b      	b.n	800926e <__multiply+0x7a>
 8009336:	3e01      	subs	r6, #1
 8009338:	e79d      	b.n	8009276 <__multiply+0x82>
 800933a:	bf00      	nop
 800933c:	0800a4eb 	.word	0x0800a4eb
 8009340:	0800a4fc 	.word	0x0800a4fc

08009344 <__pow5mult>:
 8009344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009348:	4615      	mov	r5, r2
 800934a:	f012 0203 	ands.w	r2, r2, #3
 800934e:	4606      	mov	r6, r0
 8009350:	460f      	mov	r7, r1
 8009352:	d007      	beq.n	8009364 <__pow5mult+0x20>
 8009354:	4c25      	ldr	r4, [pc, #148]	; (80093ec <__pow5mult+0xa8>)
 8009356:	3a01      	subs	r2, #1
 8009358:	2300      	movs	r3, #0
 800935a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800935e:	f7ff fe9f 	bl	80090a0 <__multadd>
 8009362:	4607      	mov	r7, r0
 8009364:	10ad      	asrs	r5, r5, #2
 8009366:	d03d      	beq.n	80093e4 <__pow5mult+0xa0>
 8009368:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800936a:	b97c      	cbnz	r4, 800938c <__pow5mult+0x48>
 800936c:	2010      	movs	r0, #16
 800936e:	f7ff fe11 	bl	8008f94 <malloc>
 8009372:	4602      	mov	r2, r0
 8009374:	6270      	str	r0, [r6, #36]	; 0x24
 8009376:	b928      	cbnz	r0, 8009384 <__pow5mult+0x40>
 8009378:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800937c:	4b1c      	ldr	r3, [pc, #112]	; (80093f0 <__pow5mult+0xac>)
 800937e:	481d      	ldr	r0, [pc, #116]	; (80093f4 <__pow5mult+0xb0>)
 8009380:	f000 faae 	bl	80098e0 <__assert_func>
 8009384:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009388:	6004      	str	r4, [r0, #0]
 800938a:	60c4      	str	r4, [r0, #12]
 800938c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009390:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009394:	b94c      	cbnz	r4, 80093aa <__pow5mult+0x66>
 8009396:	f240 2171 	movw	r1, #625	; 0x271
 800939a:	4630      	mov	r0, r6
 800939c:	f7ff ff14 	bl	80091c8 <__i2b>
 80093a0:	2300      	movs	r3, #0
 80093a2:	4604      	mov	r4, r0
 80093a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80093a8:	6003      	str	r3, [r0, #0]
 80093aa:	f04f 0900 	mov.w	r9, #0
 80093ae:	07eb      	lsls	r3, r5, #31
 80093b0:	d50a      	bpl.n	80093c8 <__pow5mult+0x84>
 80093b2:	4639      	mov	r1, r7
 80093b4:	4622      	mov	r2, r4
 80093b6:	4630      	mov	r0, r6
 80093b8:	f7ff ff1c 	bl	80091f4 <__multiply>
 80093bc:	4680      	mov	r8, r0
 80093be:	4639      	mov	r1, r7
 80093c0:	4630      	mov	r0, r6
 80093c2:	f7ff fe4b 	bl	800905c <_Bfree>
 80093c6:	4647      	mov	r7, r8
 80093c8:	106d      	asrs	r5, r5, #1
 80093ca:	d00b      	beq.n	80093e4 <__pow5mult+0xa0>
 80093cc:	6820      	ldr	r0, [r4, #0]
 80093ce:	b938      	cbnz	r0, 80093e0 <__pow5mult+0x9c>
 80093d0:	4622      	mov	r2, r4
 80093d2:	4621      	mov	r1, r4
 80093d4:	4630      	mov	r0, r6
 80093d6:	f7ff ff0d 	bl	80091f4 <__multiply>
 80093da:	6020      	str	r0, [r4, #0]
 80093dc:	f8c0 9000 	str.w	r9, [r0]
 80093e0:	4604      	mov	r4, r0
 80093e2:	e7e4      	b.n	80093ae <__pow5mult+0x6a>
 80093e4:	4638      	mov	r0, r7
 80093e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ea:	bf00      	nop
 80093ec:	0800a648 	.word	0x0800a648
 80093f0:	0800a479 	.word	0x0800a479
 80093f4:	0800a4fc 	.word	0x0800a4fc

080093f8 <__lshift>:
 80093f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093fc:	460c      	mov	r4, r1
 80093fe:	4607      	mov	r7, r0
 8009400:	4691      	mov	r9, r2
 8009402:	6923      	ldr	r3, [r4, #16]
 8009404:	6849      	ldr	r1, [r1, #4]
 8009406:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800940a:	68a3      	ldr	r3, [r4, #8]
 800940c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009410:	f108 0601 	add.w	r6, r8, #1
 8009414:	42b3      	cmp	r3, r6
 8009416:	db0b      	blt.n	8009430 <__lshift+0x38>
 8009418:	4638      	mov	r0, r7
 800941a:	f7ff fddf 	bl	8008fdc <_Balloc>
 800941e:	4605      	mov	r5, r0
 8009420:	b948      	cbnz	r0, 8009436 <__lshift+0x3e>
 8009422:	4602      	mov	r2, r0
 8009424:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009428:	4b29      	ldr	r3, [pc, #164]	; (80094d0 <__lshift+0xd8>)
 800942a:	482a      	ldr	r0, [pc, #168]	; (80094d4 <__lshift+0xdc>)
 800942c:	f000 fa58 	bl	80098e0 <__assert_func>
 8009430:	3101      	adds	r1, #1
 8009432:	005b      	lsls	r3, r3, #1
 8009434:	e7ee      	b.n	8009414 <__lshift+0x1c>
 8009436:	2300      	movs	r3, #0
 8009438:	f100 0114 	add.w	r1, r0, #20
 800943c:	f100 0210 	add.w	r2, r0, #16
 8009440:	4618      	mov	r0, r3
 8009442:	4553      	cmp	r3, sl
 8009444:	db37      	blt.n	80094b6 <__lshift+0xbe>
 8009446:	6920      	ldr	r0, [r4, #16]
 8009448:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800944c:	f104 0314 	add.w	r3, r4, #20
 8009450:	f019 091f 	ands.w	r9, r9, #31
 8009454:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009458:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800945c:	d02f      	beq.n	80094be <__lshift+0xc6>
 800945e:	468a      	mov	sl, r1
 8009460:	f04f 0c00 	mov.w	ip, #0
 8009464:	f1c9 0e20 	rsb	lr, r9, #32
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	fa02 f209 	lsl.w	r2, r2, r9
 800946e:	ea42 020c 	orr.w	r2, r2, ip
 8009472:	f84a 2b04 	str.w	r2, [sl], #4
 8009476:	f853 2b04 	ldr.w	r2, [r3], #4
 800947a:	4298      	cmp	r0, r3
 800947c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009480:	d8f2      	bhi.n	8009468 <__lshift+0x70>
 8009482:	1b03      	subs	r3, r0, r4
 8009484:	3b15      	subs	r3, #21
 8009486:	f023 0303 	bic.w	r3, r3, #3
 800948a:	3304      	adds	r3, #4
 800948c:	f104 0215 	add.w	r2, r4, #21
 8009490:	4290      	cmp	r0, r2
 8009492:	bf38      	it	cc
 8009494:	2304      	movcc	r3, #4
 8009496:	f841 c003 	str.w	ip, [r1, r3]
 800949a:	f1bc 0f00 	cmp.w	ip, #0
 800949e:	d001      	beq.n	80094a4 <__lshift+0xac>
 80094a0:	f108 0602 	add.w	r6, r8, #2
 80094a4:	3e01      	subs	r6, #1
 80094a6:	4638      	mov	r0, r7
 80094a8:	4621      	mov	r1, r4
 80094aa:	612e      	str	r6, [r5, #16]
 80094ac:	f7ff fdd6 	bl	800905c <_Bfree>
 80094b0:	4628      	mov	r0, r5
 80094b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80094ba:	3301      	adds	r3, #1
 80094bc:	e7c1      	b.n	8009442 <__lshift+0x4a>
 80094be:	3904      	subs	r1, #4
 80094c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80094c4:	4298      	cmp	r0, r3
 80094c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80094ca:	d8f9      	bhi.n	80094c0 <__lshift+0xc8>
 80094cc:	e7ea      	b.n	80094a4 <__lshift+0xac>
 80094ce:	bf00      	nop
 80094d0:	0800a4eb 	.word	0x0800a4eb
 80094d4:	0800a4fc 	.word	0x0800a4fc

080094d8 <__mcmp>:
 80094d8:	4603      	mov	r3, r0
 80094da:	690a      	ldr	r2, [r1, #16]
 80094dc:	6900      	ldr	r0, [r0, #16]
 80094de:	b530      	push	{r4, r5, lr}
 80094e0:	1a80      	subs	r0, r0, r2
 80094e2:	d10d      	bne.n	8009500 <__mcmp+0x28>
 80094e4:	3314      	adds	r3, #20
 80094e6:	3114      	adds	r1, #20
 80094e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80094ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80094f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80094f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80094f8:	4295      	cmp	r5, r2
 80094fa:	d002      	beq.n	8009502 <__mcmp+0x2a>
 80094fc:	d304      	bcc.n	8009508 <__mcmp+0x30>
 80094fe:	2001      	movs	r0, #1
 8009500:	bd30      	pop	{r4, r5, pc}
 8009502:	42a3      	cmp	r3, r4
 8009504:	d3f4      	bcc.n	80094f0 <__mcmp+0x18>
 8009506:	e7fb      	b.n	8009500 <__mcmp+0x28>
 8009508:	f04f 30ff 	mov.w	r0, #4294967295
 800950c:	e7f8      	b.n	8009500 <__mcmp+0x28>
	...

08009510 <__mdiff>:
 8009510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009514:	460d      	mov	r5, r1
 8009516:	4607      	mov	r7, r0
 8009518:	4611      	mov	r1, r2
 800951a:	4628      	mov	r0, r5
 800951c:	4614      	mov	r4, r2
 800951e:	f7ff ffdb 	bl	80094d8 <__mcmp>
 8009522:	1e06      	subs	r6, r0, #0
 8009524:	d111      	bne.n	800954a <__mdiff+0x3a>
 8009526:	4631      	mov	r1, r6
 8009528:	4638      	mov	r0, r7
 800952a:	f7ff fd57 	bl	8008fdc <_Balloc>
 800952e:	4602      	mov	r2, r0
 8009530:	b928      	cbnz	r0, 800953e <__mdiff+0x2e>
 8009532:	f240 2132 	movw	r1, #562	; 0x232
 8009536:	4b3a      	ldr	r3, [pc, #232]	; (8009620 <__mdiff+0x110>)
 8009538:	483a      	ldr	r0, [pc, #232]	; (8009624 <__mdiff+0x114>)
 800953a:	f000 f9d1 	bl	80098e0 <__assert_func>
 800953e:	2301      	movs	r3, #1
 8009540:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009544:	4610      	mov	r0, r2
 8009546:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954a:	bfa4      	itt	ge
 800954c:	4623      	movge	r3, r4
 800954e:	462c      	movge	r4, r5
 8009550:	4638      	mov	r0, r7
 8009552:	6861      	ldr	r1, [r4, #4]
 8009554:	bfa6      	itte	ge
 8009556:	461d      	movge	r5, r3
 8009558:	2600      	movge	r6, #0
 800955a:	2601      	movlt	r6, #1
 800955c:	f7ff fd3e 	bl	8008fdc <_Balloc>
 8009560:	4602      	mov	r2, r0
 8009562:	b918      	cbnz	r0, 800956c <__mdiff+0x5c>
 8009564:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009568:	4b2d      	ldr	r3, [pc, #180]	; (8009620 <__mdiff+0x110>)
 800956a:	e7e5      	b.n	8009538 <__mdiff+0x28>
 800956c:	f102 0814 	add.w	r8, r2, #20
 8009570:	46c2      	mov	sl, r8
 8009572:	f04f 0c00 	mov.w	ip, #0
 8009576:	6927      	ldr	r7, [r4, #16]
 8009578:	60c6      	str	r6, [r0, #12]
 800957a:	692e      	ldr	r6, [r5, #16]
 800957c:	f104 0014 	add.w	r0, r4, #20
 8009580:	f105 0914 	add.w	r9, r5, #20
 8009584:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009588:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800958c:	3410      	adds	r4, #16
 800958e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009592:	f859 3b04 	ldr.w	r3, [r9], #4
 8009596:	fa1f f18b 	uxth.w	r1, fp
 800959a:	448c      	add	ip, r1
 800959c:	b299      	uxth	r1, r3
 800959e:	0c1b      	lsrs	r3, r3, #16
 80095a0:	ebac 0101 	sub.w	r1, ip, r1
 80095a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80095a8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80095ac:	b289      	uxth	r1, r1
 80095ae:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80095b2:	454e      	cmp	r6, r9
 80095b4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80095b8:	f84a 3b04 	str.w	r3, [sl], #4
 80095bc:	d8e7      	bhi.n	800958e <__mdiff+0x7e>
 80095be:	1b73      	subs	r3, r6, r5
 80095c0:	3b15      	subs	r3, #21
 80095c2:	f023 0303 	bic.w	r3, r3, #3
 80095c6:	3515      	adds	r5, #21
 80095c8:	3304      	adds	r3, #4
 80095ca:	42ae      	cmp	r6, r5
 80095cc:	bf38      	it	cc
 80095ce:	2304      	movcc	r3, #4
 80095d0:	4418      	add	r0, r3
 80095d2:	4443      	add	r3, r8
 80095d4:	461e      	mov	r6, r3
 80095d6:	4605      	mov	r5, r0
 80095d8:	4575      	cmp	r5, lr
 80095da:	d30e      	bcc.n	80095fa <__mdiff+0xea>
 80095dc:	f10e 0103 	add.w	r1, lr, #3
 80095e0:	1a09      	subs	r1, r1, r0
 80095e2:	f021 0103 	bic.w	r1, r1, #3
 80095e6:	3803      	subs	r0, #3
 80095e8:	4586      	cmp	lr, r0
 80095ea:	bf38      	it	cc
 80095ec:	2100      	movcc	r1, #0
 80095ee:	4419      	add	r1, r3
 80095f0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80095f4:	b18b      	cbz	r3, 800961a <__mdiff+0x10a>
 80095f6:	6117      	str	r7, [r2, #16]
 80095f8:	e7a4      	b.n	8009544 <__mdiff+0x34>
 80095fa:	f855 8b04 	ldr.w	r8, [r5], #4
 80095fe:	fa1f f188 	uxth.w	r1, r8
 8009602:	4461      	add	r1, ip
 8009604:	140c      	asrs	r4, r1, #16
 8009606:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800960a:	b289      	uxth	r1, r1
 800960c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009610:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009614:	f846 1b04 	str.w	r1, [r6], #4
 8009618:	e7de      	b.n	80095d8 <__mdiff+0xc8>
 800961a:	3f01      	subs	r7, #1
 800961c:	e7e8      	b.n	80095f0 <__mdiff+0xe0>
 800961e:	bf00      	nop
 8009620:	0800a4eb 	.word	0x0800a4eb
 8009624:	0800a4fc 	.word	0x0800a4fc

08009628 <__d2b>:
 8009628:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800962c:	2101      	movs	r1, #1
 800962e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009632:	4690      	mov	r8, r2
 8009634:	461d      	mov	r5, r3
 8009636:	f7ff fcd1 	bl	8008fdc <_Balloc>
 800963a:	4604      	mov	r4, r0
 800963c:	b930      	cbnz	r0, 800964c <__d2b+0x24>
 800963e:	4602      	mov	r2, r0
 8009640:	f240 310a 	movw	r1, #778	; 0x30a
 8009644:	4b24      	ldr	r3, [pc, #144]	; (80096d8 <__d2b+0xb0>)
 8009646:	4825      	ldr	r0, [pc, #148]	; (80096dc <__d2b+0xb4>)
 8009648:	f000 f94a 	bl	80098e0 <__assert_func>
 800964c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009650:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009654:	bb2d      	cbnz	r5, 80096a2 <__d2b+0x7a>
 8009656:	9301      	str	r3, [sp, #4]
 8009658:	f1b8 0300 	subs.w	r3, r8, #0
 800965c:	d026      	beq.n	80096ac <__d2b+0x84>
 800965e:	4668      	mov	r0, sp
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	f7ff fd83 	bl	800916c <__lo0bits>
 8009666:	9900      	ldr	r1, [sp, #0]
 8009668:	b1f0      	cbz	r0, 80096a8 <__d2b+0x80>
 800966a:	9a01      	ldr	r2, [sp, #4]
 800966c:	f1c0 0320 	rsb	r3, r0, #32
 8009670:	fa02 f303 	lsl.w	r3, r2, r3
 8009674:	430b      	orrs	r3, r1
 8009676:	40c2      	lsrs	r2, r0
 8009678:	6163      	str	r3, [r4, #20]
 800967a:	9201      	str	r2, [sp, #4]
 800967c:	9b01      	ldr	r3, [sp, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	bf14      	ite	ne
 8009682:	2102      	movne	r1, #2
 8009684:	2101      	moveq	r1, #1
 8009686:	61a3      	str	r3, [r4, #24]
 8009688:	6121      	str	r1, [r4, #16]
 800968a:	b1c5      	cbz	r5, 80096be <__d2b+0x96>
 800968c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009690:	4405      	add	r5, r0
 8009692:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009696:	603d      	str	r5, [r7, #0]
 8009698:	6030      	str	r0, [r6, #0]
 800969a:	4620      	mov	r0, r4
 800969c:	b002      	add	sp, #8
 800969e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096a6:	e7d6      	b.n	8009656 <__d2b+0x2e>
 80096a8:	6161      	str	r1, [r4, #20]
 80096aa:	e7e7      	b.n	800967c <__d2b+0x54>
 80096ac:	a801      	add	r0, sp, #4
 80096ae:	f7ff fd5d 	bl	800916c <__lo0bits>
 80096b2:	2101      	movs	r1, #1
 80096b4:	9b01      	ldr	r3, [sp, #4]
 80096b6:	6121      	str	r1, [r4, #16]
 80096b8:	6163      	str	r3, [r4, #20]
 80096ba:	3020      	adds	r0, #32
 80096bc:	e7e5      	b.n	800968a <__d2b+0x62>
 80096be:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80096c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80096c6:	6038      	str	r0, [r7, #0]
 80096c8:	6918      	ldr	r0, [r3, #16]
 80096ca:	f7ff fd2f 	bl	800912c <__hi0bits>
 80096ce:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80096d2:	6031      	str	r1, [r6, #0]
 80096d4:	e7e1      	b.n	800969a <__d2b+0x72>
 80096d6:	bf00      	nop
 80096d8:	0800a4eb 	.word	0x0800a4eb
 80096dc:	0800a4fc 	.word	0x0800a4fc

080096e0 <_calloc_r>:
 80096e0:	b570      	push	{r4, r5, r6, lr}
 80096e2:	fba1 5402 	umull	r5, r4, r1, r2
 80096e6:	b934      	cbnz	r4, 80096f6 <_calloc_r+0x16>
 80096e8:	4629      	mov	r1, r5
 80096ea:	f000 f875 	bl	80097d8 <_malloc_r>
 80096ee:	4606      	mov	r6, r0
 80096f0:	b928      	cbnz	r0, 80096fe <_calloc_r+0x1e>
 80096f2:	4630      	mov	r0, r6
 80096f4:	bd70      	pop	{r4, r5, r6, pc}
 80096f6:	220c      	movs	r2, #12
 80096f8:	2600      	movs	r6, #0
 80096fa:	6002      	str	r2, [r0, #0]
 80096fc:	e7f9      	b.n	80096f2 <_calloc_r+0x12>
 80096fe:	462a      	mov	r2, r5
 8009700:	4621      	mov	r1, r4
 8009702:	f7fe f95f 	bl	80079c4 <memset>
 8009706:	e7f4      	b.n	80096f2 <_calloc_r+0x12>

08009708 <_free_r>:
 8009708:	b538      	push	{r3, r4, r5, lr}
 800970a:	4605      	mov	r5, r0
 800970c:	2900      	cmp	r1, #0
 800970e:	d040      	beq.n	8009792 <_free_r+0x8a>
 8009710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009714:	1f0c      	subs	r4, r1, #4
 8009716:	2b00      	cmp	r3, #0
 8009718:	bfb8      	it	lt
 800971a:	18e4      	addlt	r4, r4, r3
 800971c:	f000 f922 	bl	8009964 <__malloc_lock>
 8009720:	4a1c      	ldr	r2, [pc, #112]	; (8009794 <_free_r+0x8c>)
 8009722:	6813      	ldr	r3, [r2, #0]
 8009724:	b933      	cbnz	r3, 8009734 <_free_r+0x2c>
 8009726:	6063      	str	r3, [r4, #4]
 8009728:	6014      	str	r4, [r2, #0]
 800972a:	4628      	mov	r0, r5
 800972c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009730:	f000 b91e 	b.w	8009970 <__malloc_unlock>
 8009734:	42a3      	cmp	r3, r4
 8009736:	d908      	bls.n	800974a <_free_r+0x42>
 8009738:	6820      	ldr	r0, [r4, #0]
 800973a:	1821      	adds	r1, r4, r0
 800973c:	428b      	cmp	r3, r1
 800973e:	bf01      	itttt	eq
 8009740:	6819      	ldreq	r1, [r3, #0]
 8009742:	685b      	ldreq	r3, [r3, #4]
 8009744:	1809      	addeq	r1, r1, r0
 8009746:	6021      	streq	r1, [r4, #0]
 8009748:	e7ed      	b.n	8009726 <_free_r+0x1e>
 800974a:	461a      	mov	r2, r3
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	b10b      	cbz	r3, 8009754 <_free_r+0x4c>
 8009750:	42a3      	cmp	r3, r4
 8009752:	d9fa      	bls.n	800974a <_free_r+0x42>
 8009754:	6811      	ldr	r1, [r2, #0]
 8009756:	1850      	adds	r0, r2, r1
 8009758:	42a0      	cmp	r0, r4
 800975a:	d10b      	bne.n	8009774 <_free_r+0x6c>
 800975c:	6820      	ldr	r0, [r4, #0]
 800975e:	4401      	add	r1, r0
 8009760:	1850      	adds	r0, r2, r1
 8009762:	4283      	cmp	r3, r0
 8009764:	6011      	str	r1, [r2, #0]
 8009766:	d1e0      	bne.n	800972a <_free_r+0x22>
 8009768:	6818      	ldr	r0, [r3, #0]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	4401      	add	r1, r0
 800976e:	6011      	str	r1, [r2, #0]
 8009770:	6053      	str	r3, [r2, #4]
 8009772:	e7da      	b.n	800972a <_free_r+0x22>
 8009774:	d902      	bls.n	800977c <_free_r+0x74>
 8009776:	230c      	movs	r3, #12
 8009778:	602b      	str	r3, [r5, #0]
 800977a:	e7d6      	b.n	800972a <_free_r+0x22>
 800977c:	6820      	ldr	r0, [r4, #0]
 800977e:	1821      	adds	r1, r4, r0
 8009780:	428b      	cmp	r3, r1
 8009782:	bf01      	itttt	eq
 8009784:	6819      	ldreq	r1, [r3, #0]
 8009786:	685b      	ldreq	r3, [r3, #4]
 8009788:	1809      	addeq	r1, r1, r0
 800978a:	6021      	streq	r1, [r4, #0]
 800978c:	6063      	str	r3, [r4, #4]
 800978e:	6054      	str	r4, [r2, #4]
 8009790:	e7cb      	b.n	800972a <_free_r+0x22>
 8009792:	bd38      	pop	{r3, r4, r5, pc}
 8009794:	20000464 	.word	0x20000464

08009798 <sbrk_aligned>:
 8009798:	b570      	push	{r4, r5, r6, lr}
 800979a:	4e0e      	ldr	r6, [pc, #56]	; (80097d4 <sbrk_aligned+0x3c>)
 800979c:	460c      	mov	r4, r1
 800979e:	6831      	ldr	r1, [r6, #0]
 80097a0:	4605      	mov	r5, r0
 80097a2:	b911      	cbnz	r1, 80097aa <sbrk_aligned+0x12>
 80097a4:	f000 f88c 	bl	80098c0 <_sbrk_r>
 80097a8:	6030      	str	r0, [r6, #0]
 80097aa:	4621      	mov	r1, r4
 80097ac:	4628      	mov	r0, r5
 80097ae:	f000 f887 	bl	80098c0 <_sbrk_r>
 80097b2:	1c43      	adds	r3, r0, #1
 80097b4:	d00a      	beq.n	80097cc <sbrk_aligned+0x34>
 80097b6:	1cc4      	adds	r4, r0, #3
 80097b8:	f024 0403 	bic.w	r4, r4, #3
 80097bc:	42a0      	cmp	r0, r4
 80097be:	d007      	beq.n	80097d0 <sbrk_aligned+0x38>
 80097c0:	1a21      	subs	r1, r4, r0
 80097c2:	4628      	mov	r0, r5
 80097c4:	f000 f87c 	bl	80098c0 <_sbrk_r>
 80097c8:	3001      	adds	r0, #1
 80097ca:	d101      	bne.n	80097d0 <sbrk_aligned+0x38>
 80097cc:	f04f 34ff 	mov.w	r4, #4294967295
 80097d0:	4620      	mov	r0, r4
 80097d2:	bd70      	pop	{r4, r5, r6, pc}
 80097d4:	20000468 	.word	0x20000468

080097d8 <_malloc_r>:
 80097d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097dc:	1ccd      	adds	r5, r1, #3
 80097de:	f025 0503 	bic.w	r5, r5, #3
 80097e2:	3508      	adds	r5, #8
 80097e4:	2d0c      	cmp	r5, #12
 80097e6:	bf38      	it	cc
 80097e8:	250c      	movcc	r5, #12
 80097ea:	2d00      	cmp	r5, #0
 80097ec:	4607      	mov	r7, r0
 80097ee:	db01      	blt.n	80097f4 <_malloc_r+0x1c>
 80097f0:	42a9      	cmp	r1, r5
 80097f2:	d905      	bls.n	8009800 <_malloc_r+0x28>
 80097f4:	230c      	movs	r3, #12
 80097f6:	2600      	movs	r6, #0
 80097f8:	603b      	str	r3, [r7, #0]
 80097fa:	4630      	mov	r0, r6
 80097fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009800:	4e2e      	ldr	r6, [pc, #184]	; (80098bc <_malloc_r+0xe4>)
 8009802:	f000 f8af 	bl	8009964 <__malloc_lock>
 8009806:	6833      	ldr	r3, [r6, #0]
 8009808:	461c      	mov	r4, r3
 800980a:	bb34      	cbnz	r4, 800985a <_malloc_r+0x82>
 800980c:	4629      	mov	r1, r5
 800980e:	4638      	mov	r0, r7
 8009810:	f7ff ffc2 	bl	8009798 <sbrk_aligned>
 8009814:	1c43      	adds	r3, r0, #1
 8009816:	4604      	mov	r4, r0
 8009818:	d14d      	bne.n	80098b6 <_malloc_r+0xde>
 800981a:	6834      	ldr	r4, [r6, #0]
 800981c:	4626      	mov	r6, r4
 800981e:	2e00      	cmp	r6, #0
 8009820:	d140      	bne.n	80098a4 <_malloc_r+0xcc>
 8009822:	6823      	ldr	r3, [r4, #0]
 8009824:	4631      	mov	r1, r6
 8009826:	4638      	mov	r0, r7
 8009828:	eb04 0803 	add.w	r8, r4, r3
 800982c:	f000 f848 	bl	80098c0 <_sbrk_r>
 8009830:	4580      	cmp	r8, r0
 8009832:	d13a      	bne.n	80098aa <_malloc_r+0xd2>
 8009834:	6821      	ldr	r1, [r4, #0]
 8009836:	3503      	adds	r5, #3
 8009838:	1a6d      	subs	r5, r5, r1
 800983a:	f025 0503 	bic.w	r5, r5, #3
 800983e:	3508      	adds	r5, #8
 8009840:	2d0c      	cmp	r5, #12
 8009842:	bf38      	it	cc
 8009844:	250c      	movcc	r5, #12
 8009846:	4638      	mov	r0, r7
 8009848:	4629      	mov	r1, r5
 800984a:	f7ff ffa5 	bl	8009798 <sbrk_aligned>
 800984e:	3001      	adds	r0, #1
 8009850:	d02b      	beq.n	80098aa <_malloc_r+0xd2>
 8009852:	6823      	ldr	r3, [r4, #0]
 8009854:	442b      	add	r3, r5
 8009856:	6023      	str	r3, [r4, #0]
 8009858:	e00e      	b.n	8009878 <_malloc_r+0xa0>
 800985a:	6822      	ldr	r2, [r4, #0]
 800985c:	1b52      	subs	r2, r2, r5
 800985e:	d41e      	bmi.n	800989e <_malloc_r+0xc6>
 8009860:	2a0b      	cmp	r2, #11
 8009862:	d916      	bls.n	8009892 <_malloc_r+0xba>
 8009864:	1961      	adds	r1, r4, r5
 8009866:	42a3      	cmp	r3, r4
 8009868:	6025      	str	r5, [r4, #0]
 800986a:	bf18      	it	ne
 800986c:	6059      	strne	r1, [r3, #4]
 800986e:	6863      	ldr	r3, [r4, #4]
 8009870:	bf08      	it	eq
 8009872:	6031      	streq	r1, [r6, #0]
 8009874:	5162      	str	r2, [r4, r5]
 8009876:	604b      	str	r3, [r1, #4]
 8009878:	4638      	mov	r0, r7
 800987a:	f104 060b 	add.w	r6, r4, #11
 800987e:	f000 f877 	bl	8009970 <__malloc_unlock>
 8009882:	f026 0607 	bic.w	r6, r6, #7
 8009886:	1d23      	adds	r3, r4, #4
 8009888:	1af2      	subs	r2, r6, r3
 800988a:	d0b6      	beq.n	80097fa <_malloc_r+0x22>
 800988c:	1b9b      	subs	r3, r3, r6
 800988e:	50a3      	str	r3, [r4, r2]
 8009890:	e7b3      	b.n	80097fa <_malloc_r+0x22>
 8009892:	6862      	ldr	r2, [r4, #4]
 8009894:	42a3      	cmp	r3, r4
 8009896:	bf0c      	ite	eq
 8009898:	6032      	streq	r2, [r6, #0]
 800989a:	605a      	strne	r2, [r3, #4]
 800989c:	e7ec      	b.n	8009878 <_malloc_r+0xa0>
 800989e:	4623      	mov	r3, r4
 80098a0:	6864      	ldr	r4, [r4, #4]
 80098a2:	e7b2      	b.n	800980a <_malloc_r+0x32>
 80098a4:	4634      	mov	r4, r6
 80098a6:	6876      	ldr	r6, [r6, #4]
 80098a8:	e7b9      	b.n	800981e <_malloc_r+0x46>
 80098aa:	230c      	movs	r3, #12
 80098ac:	4638      	mov	r0, r7
 80098ae:	603b      	str	r3, [r7, #0]
 80098b0:	f000 f85e 	bl	8009970 <__malloc_unlock>
 80098b4:	e7a1      	b.n	80097fa <_malloc_r+0x22>
 80098b6:	6025      	str	r5, [r4, #0]
 80098b8:	e7de      	b.n	8009878 <_malloc_r+0xa0>
 80098ba:	bf00      	nop
 80098bc:	20000464 	.word	0x20000464

080098c0 <_sbrk_r>:
 80098c0:	b538      	push	{r3, r4, r5, lr}
 80098c2:	2300      	movs	r3, #0
 80098c4:	4d05      	ldr	r5, [pc, #20]	; (80098dc <_sbrk_r+0x1c>)
 80098c6:	4604      	mov	r4, r0
 80098c8:	4608      	mov	r0, r1
 80098ca:	602b      	str	r3, [r5, #0]
 80098cc:	f7f8 fac8 	bl	8001e60 <_sbrk>
 80098d0:	1c43      	adds	r3, r0, #1
 80098d2:	d102      	bne.n	80098da <_sbrk_r+0x1a>
 80098d4:	682b      	ldr	r3, [r5, #0]
 80098d6:	b103      	cbz	r3, 80098da <_sbrk_r+0x1a>
 80098d8:	6023      	str	r3, [r4, #0]
 80098da:	bd38      	pop	{r3, r4, r5, pc}
 80098dc:	2000046c 	.word	0x2000046c

080098e0 <__assert_func>:
 80098e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098e2:	4614      	mov	r4, r2
 80098e4:	461a      	mov	r2, r3
 80098e6:	4b09      	ldr	r3, [pc, #36]	; (800990c <__assert_func+0x2c>)
 80098e8:	4605      	mov	r5, r0
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68d8      	ldr	r0, [r3, #12]
 80098ee:	b14c      	cbz	r4, 8009904 <__assert_func+0x24>
 80098f0:	4b07      	ldr	r3, [pc, #28]	; (8009910 <__assert_func+0x30>)
 80098f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098f6:	9100      	str	r1, [sp, #0]
 80098f8:	462b      	mov	r3, r5
 80098fa:	4906      	ldr	r1, [pc, #24]	; (8009914 <__assert_func+0x34>)
 80098fc:	f000 f80e 	bl	800991c <fiprintf>
 8009900:	f000 fa62 	bl	8009dc8 <abort>
 8009904:	4b04      	ldr	r3, [pc, #16]	; (8009918 <__assert_func+0x38>)
 8009906:	461c      	mov	r4, r3
 8009908:	e7f3      	b.n	80098f2 <__assert_func+0x12>
 800990a:	bf00      	nop
 800990c:	20000018 	.word	0x20000018
 8009910:	0800a654 	.word	0x0800a654
 8009914:	0800a661 	.word	0x0800a661
 8009918:	0800a68f 	.word	0x0800a68f

0800991c <fiprintf>:
 800991c:	b40e      	push	{r1, r2, r3}
 800991e:	b503      	push	{r0, r1, lr}
 8009920:	4601      	mov	r1, r0
 8009922:	ab03      	add	r3, sp, #12
 8009924:	4805      	ldr	r0, [pc, #20]	; (800993c <fiprintf+0x20>)
 8009926:	f853 2b04 	ldr.w	r2, [r3], #4
 800992a:	6800      	ldr	r0, [r0, #0]
 800992c:	9301      	str	r3, [sp, #4]
 800992e:	f000 f84d 	bl	80099cc <_vfiprintf_r>
 8009932:	b002      	add	sp, #8
 8009934:	f85d eb04 	ldr.w	lr, [sp], #4
 8009938:	b003      	add	sp, #12
 800993a:	4770      	bx	lr
 800993c:	20000018 	.word	0x20000018

08009940 <__ascii_mbtowc>:
 8009940:	b082      	sub	sp, #8
 8009942:	b901      	cbnz	r1, 8009946 <__ascii_mbtowc+0x6>
 8009944:	a901      	add	r1, sp, #4
 8009946:	b142      	cbz	r2, 800995a <__ascii_mbtowc+0x1a>
 8009948:	b14b      	cbz	r3, 800995e <__ascii_mbtowc+0x1e>
 800994a:	7813      	ldrb	r3, [r2, #0]
 800994c:	600b      	str	r3, [r1, #0]
 800994e:	7812      	ldrb	r2, [r2, #0]
 8009950:	1e10      	subs	r0, r2, #0
 8009952:	bf18      	it	ne
 8009954:	2001      	movne	r0, #1
 8009956:	b002      	add	sp, #8
 8009958:	4770      	bx	lr
 800995a:	4610      	mov	r0, r2
 800995c:	e7fb      	b.n	8009956 <__ascii_mbtowc+0x16>
 800995e:	f06f 0001 	mvn.w	r0, #1
 8009962:	e7f8      	b.n	8009956 <__ascii_mbtowc+0x16>

08009964 <__malloc_lock>:
 8009964:	4801      	ldr	r0, [pc, #4]	; (800996c <__malloc_lock+0x8>)
 8009966:	f000 bbeb 	b.w	800a140 <__retarget_lock_acquire_recursive>
 800996a:	bf00      	nop
 800996c:	20000470 	.word	0x20000470

08009970 <__malloc_unlock>:
 8009970:	4801      	ldr	r0, [pc, #4]	; (8009978 <__malloc_unlock+0x8>)
 8009972:	f000 bbe6 	b.w	800a142 <__retarget_lock_release_recursive>
 8009976:	bf00      	nop
 8009978:	20000470 	.word	0x20000470

0800997c <__sfputc_r>:
 800997c:	6893      	ldr	r3, [r2, #8]
 800997e:	b410      	push	{r4}
 8009980:	3b01      	subs	r3, #1
 8009982:	2b00      	cmp	r3, #0
 8009984:	6093      	str	r3, [r2, #8]
 8009986:	da07      	bge.n	8009998 <__sfputc_r+0x1c>
 8009988:	6994      	ldr	r4, [r2, #24]
 800998a:	42a3      	cmp	r3, r4
 800998c:	db01      	blt.n	8009992 <__sfputc_r+0x16>
 800998e:	290a      	cmp	r1, #10
 8009990:	d102      	bne.n	8009998 <__sfputc_r+0x1c>
 8009992:	bc10      	pop	{r4}
 8009994:	f000 b94a 	b.w	8009c2c <__swbuf_r>
 8009998:	6813      	ldr	r3, [r2, #0]
 800999a:	1c58      	adds	r0, r3, #1
 800999c:	6010      	str	r0, [r2, #0]
 800999e:	7019      	strb	r1, [r3, #0]
 80099a0:	4608      	mov	r0, r1
 80099a2:	bc10      	pop	{r4}
 80099a4:	4770      	bx	lr

080099a6 <__sfputs_r>:
 80099a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a8:	4606      	mov	r6, r0
 80099aa:	460f      	mov	r7, r1
 80099ac:	4614      	mov	r4, r2
 80099ae:	18d5      	adds	r5, r2, r3
 80099b0:	42ac      	cmp	r4, r5
 80099b2:	d101      	bne.n	80099b8 <__sfputs_r+0x12>
 80099b4:	2000      	movs	r0, #0
 80099b6:	e007      	b.n	80099c8 <__sfputs_r+0x22>
 80099b8:	463a      	mov	r2, r7
 80099ba:	4630      	mov	r0, r6
 80099bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099c0:	f7ff ffdc 	bl	800997c <__sfputc_r>
 80099c4:	1c43      	adds	r3, r0, #1
 80099c6:	d1f3      	bne.n	80099b0 <__sfputs_r+0xa>
 80099c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080099cc <_vfiprintf_r>:
 80099cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d0:	460d      	mov	r5, r1
 80099d2:	4614      	mov	r4, r2
 80099d4:	4698      	mov	r8, r3
 80099d6:	4606      	mov	r6, r0
 80099d8:	b09d      	sub	sp, #116	; 0x74
 80099da:	b118      	cbz	r0, 80099e4 <_vfiprintf_r+0x18>
 80099dc:	6983      	ldr	r3, [r0, #24]
 80099de:	b90b      	cbnz	r3, 80099e4 <_vfiprintf_r+0x18>
 80099e0:	f000 fb10 	bl	800a004 <__sinit>
 80099e4:	4b89      	ldr	r3, [pc, #548]	; (8009c0c <_vfiprintf_r+0x240>)
 80099e6:	429d      	cmp	r5, r3
 80099e8:	d11b      	bne.n	8009a22 <_vfiprintf_r+0x56>
 80099ea:	6875      	ldr	r5, [r6, #4]
 80099ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099ee:	07d9      	lsls	r1, r3, #31
 80099f0:	d405      	bmi.n	80099fe <_vfiprintf_r+0x32>
 80099f2:	89ab      	ldrh	r3, [r5, #12]
 80099f4:	059a      	lsls	r2, r3, #22
 80099f6:	d402      	bmi.n	80099fe <_vfiprintf_r+0x32>
 80099f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099fa:	f000 fba1 	bl	800a140 <__retarget_lock_acquire_recursive>
 80099fe:	89ab      	ldrh	r3, [r5, #12]
 8009a00:	071b      	lsls	r3, r3, #28
 8009a02:	d501      	bpl.n	8009a08 <_vfiprintf_r+0x3c>
 8009a04:	692b      	ldr	r3, [r5, #16]
 8009a06:	b9eb      	cbnz	r3, 8009a44 <_vfiprintf_r+0x78>
 8009a08:	4629      	mov	r1, r5
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	f000 f96e 	bl	8009cec <__swsetup_r>
 8009a10:	b1c0      	cbz	r0, 8009a44 <_vfiprintf_r+0x78>
 8009a12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a14:	07dc      	lsls	r4, r3, #31
 8009a16:	d50e      	bpl.n	8009a36 <_vfiprintf_r+0x6a>
 8009a18:	f04f 30ff 	mov.w	r0, #4294967295
 8009a1c:	b01d      	add	sp, #116	; 0x74
 8009a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a22:	4b7b      	ldr	r3, [pc, #492]	; (8009c10 <_vfiprintf_r+0x244>)
 8009a24:	429d      	cmp	r5, r3
 8009a26:	d101      	bne.n	8009a2c <_vfiprintf_r+0x60>
 8009a28:	68b5      	ldr	r5, [r6, #8]
 8009a2a:	e7df      	b.n	80099ec <_vfiprintf_r+0x20>
 8009a2c:	4b79      	ldr	r3, [pc, #484]	; (8009c14 <_vfiprintf_r+0x248>)
 8009a2e:	429d      	cmp	r5, r3
 8009a30:	bf08      	it	eq
 8009a32:	68f5      	ldreq	r5, [r6, #12]
 8009a34:	e7da      	b.n	80099ec <_vfiprintf_r+0x20>
 8009a36:	89ab      	ldrh	r3, [r5, #12]
 8009a38:	0598      	lsls	r0, r3, #22
 8009a3a:	d4ed      	bmi.n	8009a18 <_vfiprintf_r+0x4c>
 8009a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a3e:	f000 fb80 	bl	800a142 <__retarget_lock_release_recursive>
 8009a42:	e7e9      	b.n	8009a18 <_vfiprintf_r+0x4c>
 8009a44:	2300      	movs	r3, #0
 8009a46:	9309      	str	r3, [sp, #36]	; 0x24
 8009a48:	2320      	movs	r3, #32
 8009a4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a4e:	2330      	movs	r3, #48	; 0x30
 8009a50:	f04f 0901 	mov.w	r9, #1
 8009a54:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a58:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009c18 <_vfiprintf_r+0x24c>
 8009a5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a60:	4623      	mov	r3, r4
 8009a62:	469a      	mov	sl, r3
 8009a64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a68:	b10a      	cbz	r2, 8009a6e <_vfiprintf_r+0xa2>
 8009a6a:	2a25      	cmp	r2, #37	; 0x25
 8009a6c:	d1f9      	bne.n	8009a62 <_vfiprintf_r+0x96>
 8009a6e:	ebba 0b04 	subs.w	fp, sl, r4
 8009a72:	d00b      	beq.n	8009a8c <_vfiprintf_r+0xc0>
 8009a74:	465b      	mov	r3, fp
 8009a76:	4622      	mov	r2, r4
 8009a78:	4629      	mov	r1, r5
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f7ff ff93 	bl	80099a6 <__sfputs_r>
 8009a80:	3001      	adds	r0, #1
 8009a82:	f000 80aa 	beq.w	8009bda <_vfiprintf_r+0x20e>
 8009a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a88:	445a      	add	r2, fp
 8009a8a:	9209      	str	r2, [sp, #36]	; 0x24
 8009a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f000 80a2 	beq.w	8009bda <_vfiprintf_r+0x20e>
 8009a96:	2300      	movs	r3, #0
 8009a98:	f04f 32ff 	mov.w	r2, #4294967295
 8009a9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aa0:	f10a 0a01 	add.w	sl, sl, #1
 8009aa4:	9304      	str	r3, [sp, #16]
 8009aa6:	9307      	str	r3, [sp, #28]
 8009aa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009aac:	931a      	str	r3, [sp, #104]	; 0x68
 8009aae:	4654      	mov	r4, sl
 8009ab0:	2205      	movs	r2, #5
 8009ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ab6:	4858      	ldr	r0, [pc, #352]	; (8009c18 <_vfiprintf_r+0x24c>)
 8009ab8:	f7ff fa74 	bl	8008fa4 <memchr>
 8009abc:	9a04      	ldr	r2, [sp, #16]
 8009abe:	b9d8      	cbnz	r0, 8009af8 <_vfiprintf_r+0x12c>
 8009ac0:	06d1      	lsls	r1, r2, #27
 8009ac2:	bf44      	itt	mi
 8009ac4:	2320      	movmi	r3, #32
 8009ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009aca:	0713      	lsls	r3, r2, #28
 8009acc:	bf44      	itt	mi
 8009ace:	232b      	movmi	r3, #43	; 0x2b
 8009ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8009ada:	d015      	beq.n	8009b08 <_vfiprintf_r+0x13c>
 8009adc:	4654      	mov	r4, sl
 8009ade:	2000      	movs	r0, #0
 8009ae0:	f04f 0c0a 	mov.w	ip, #10
 8009ae4:	9a07      	ldr	r2, [sp, #28]
 8009ae6:	4621      	mov	r1, r4
 8009ae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009aec:	3b30      	subs	r3, #48	; 0x30
 8009aee:	2b09      	cmp	r3, #9
 8009af0:	d94e      	bls.n	8009b90 <_vfiprintf_r+0x1c4>
 8009af2:	b1b0      	cbz	r0, 8009b22 <_vfiprintf_r+0x156>
 8009af4:	9207      	str	r2, [sp, #28]
 8009af6:	e014      	b.n	8009b22 <_vfiprintf_r+0x156>
 8009af8:	eba0 0308 	sub.w	r3, r0, r8
 8009afc:	fa09 f303 	lsl.w	r3, r9, r3
 8009b00:	4313      	orrs	r3, r2
 8009b02:	46a2      	mov	sl, r4
 8009b04:	9304      	str	r3, [sp, #16]
 8009b06:	e7d2      	b.n	8009aae <_vfiprintf_r+0xe2>
 8009b08:	9b03      	ldr	r3, [sp, #12]
 8009b0a:	1d19      	adds	r1, r3, #4
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	9103      	str	r1, [sp, #12]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	bfbb      	ittet	lt
 8009b14:	425b      	neglt	r3, r3
 8009b16:	f042 0202 	orrlt.w	r2, r2, #2
 8009b1a:	9307      	strge	r3, [sp, #28]
 8009b1c:	9307      	strlt	r3, [sp, #28]
 8009b1e:	bfb8      	it	lt
 8009b20:	9204      	strlt	r2, [sp, #16]
 8009b22:	7823      	ldrb	r3, [r4, #0]
 8009b24:	2b2e      	cmp	r3, #46	; 0x2e
 8009b26:	d10c      	bne.n	8009b42 <_vfiprintf_r+0x176>
 8009b28:	7863      	ldrb	r3, [r4, #1]
 8009b2a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b2c:	d135      	bne.n	8009b9a <_vfiprintf_r+0x1ce>
 8009b2e:	9b03      	ldr	r3, [sp, #12]
 8009b30:	3402      	adds	r4, #2
 8009b32:	1d1a      	adds	r2, r3, #4
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	9203      	str	r2, [sp, #12]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	bfb8      	it	lt
 8009b3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b40:	9305      	str	r3, [sp, #20]
 8009b42:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009c1c <_vfiprintf_r+0x250>
 8009b46:	2203      	movs	r2, #3
 8009b48:	4650      	mov	r0, sl
 8009b4a:	7821      	ldrb	r1, [r4, #0]
 8009b4c:	f7ff fa2a 	bl	8008fa4 <memchr>
 8009b50:	b140      	cbz	r0, 8009b64 <_vfiprintf_r+0x198>
 8009b52:	2340      	movs	r3, #64	; 0x40
 8009b54:	eba0 000a 	sub.w	r0, r0, sl
 8009b58:	fa03 f000 	lsl.w	r0, r3, r0
 8009b5c:	9b04      	ldr	r3, [sp, #16]
 8009b5e:	3401      	adds	r4, #1
 8009b60:	4303      	orrs	r3, r0
 8009b62:	9304      	str	r3, [sp, #16]
 8009b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b68:	2206      	movs	r2, #6
 8009b6a:	482d      	ldr	r0, [pc, #180]	; (8009c20 <_vfiprintf_r+0x254>)
 8009b6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b70:	f7ff fa18 	bl	8008fa4 <memchr>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d03f      	beq.n	8009bf8 <_vfiprintf_r+0x22c>
 8009b78:	4b2a      	ldr	r3, [pc, #168]	; (8009c24 <_vfiprintf_r+0x258>)
 8009b7a:	bb1b      	cbnz	r3, 8009bc4 <_vfiprintf_r+0x1f8>
 8009b7c:	9b03      	ldr	r3, [sp, #12]
 8009b7e:	3307      	adds	r3, #7
 8009b80:	f023 0307 	bic.w	r3, r3, #7
 8009b84:	3308      	adds	r3, #8
 8009b86:	9303      	str	r3, [sp, #12]
 8009b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b8a:	443b      	add	r3, r7
 8009b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b8e:	e767      	b.n	8009a60 <_vfiprintf_r+0x94>
 8009b90:	460c      	mov	r4, r1
 8009b92:	2001      	movs	r0, #1
 8009b94:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b98:	e7a5      	b.n	8009ae6 <_vfiprintf_r+0x11a>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	f04f 0c0a 	mov.w	ip, #10
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	3401      	adds	r4, #1
 8009ba4:	9305      	str	r3, [sp, #20]
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bac:	3a30      	subs	r2, #48	; 0x30
 8009bae:	2a09      	cmp	r2, #9
 8009bb0:	d903      	bls.n	8009bba <_vfiprintf_r+0x1ee>
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d0c5      	beq.n	8009b42 <_vfiprintf_r+0x176>
 8009bb6:	9105      	str	r1, [sp, #20]
 8009bb8:	e7c3      	b.n	8009b42 <_vfiprintf_r+0x176>
 8009bba:	4604      	mov	r4, r0
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bc2:	e7f0      	b.n	8009ba6 <_vfiprintf_r+0x1da>
 8009bc4:	ab03      	add	r3, sp, #12
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	462a      	mov	r2, r5
 8009bca:	4630      	mov	r0, r6
 8009bcc:	4b16      	ldr	r3, [pc, #88]	; (8009c28 <_vfiprintf_r+0x25c>)
 8009bce:	a904      	add	r1, sp, #16
 8009bd0:	f7fd ff9e 	bl	8007b10 <_printf_float>
 8009bd4:	4607      	mov	r7, r0
 8009bd6:	1c78      	adds	r0, r7, #1
 8009bd8:	d1d6      	bne.n	8009b88 <_vfiprintf_r+0x1bc>
 8009bda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bdc:	07d9      	lsls	r1, r3, #31
 8009bde:	d405      	bmi.n	8009bec <_vfiprintf_r+0x220>
 8009be0:	89ab      	ldrh	r3, [r5, #12]
 8009be2:	059a      	lsls	r2, r3, #22
 8009be4:	d402      	bmi.n	8009bec <_vfiprintf_r+0x220>
 8009be6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009be8:	f000 faab 	bl	800a142 <__retarget_lock_release_recursive>
 8009bec:	89ab      	ldrh	r3, [r5, #12]
 8009bee:	065b      	lsls	r3, r3, #25
 8009bf0:	f53f af12 	bmi.w	8009a18 <_vfiprintf_r+0x4c>
 8009bf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bf6:	e711      	b.n	8009a1c <_vfiprintf_r+0x50>
 8009bf8:	ab03      	add	r3, sp, #12
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	462a      	mov	r2, r5
 8009bfe:	4630      	mov	r0, r6
 8009c00:	4b09      	ldr	r3, [pc, #36]	; (8009c28 <_vfiprintf_r+0x25c>)
 8009c02:	a904      	add	r1, sp, #16
 8009c04:	f7fe fa20 	bl	8008048 <_printf_i>
 8009c08:	e7e4      	b.n	8009bd4 <_vfiprintf_r+0x208>
 8009c0a:	bf00      	nop
 8009c0c:	0800a7cc 	.word	0x0800a7cc
 8009c10:	0800a7ec 	.word	0x0800a7ec
 8009c14:	0800a7ac 	.word	0x0800a7ac
 8009c18:	0800a69a 	.word	0x0800a69a
 8009c1c:	0800a6a0 	.word	0x0800a6a0
 8009c20:	0800a6a4 	.word	0x0800a6a4
 8009c24:	08007b11 	.word	0x08007b11
 8009c28:	080099a7 	.word	0x080099a7

08009c2c <__swbuf_r>:
 8009c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2e:	460e      	mov	r6, r1
 8009c30:	4614      	mov	r4, r2
 8009c32:	4605      	mov	r5, r0
 8009c34:	b118      	cbz	r0, 8009c3e <__swbuf_r+0x12>
 8009c36:	6983      	ldr	r3, [r0, #24]
 8009c38:	b90b      	cbnz	r3, 8009c3e <__swbuf_r+0x12>
 8009c3a:	f000 f9e3 	bl	800a004 <__sinit>
 8009c3e:	4b21      	ldr	r3, [pc, #132]	; (8009cc4 <__swbuf_r+0x98>)
 8009c40:	429c      	cmp	r4, r3
 8009c42:	d12b      	bne.n	8009c9c <__swbuf_r+0x70>
 8009c44:	686c      	ldr	r4, [r5, #4]
 8009c46:	69a3      	ldr	r3, [r4, #24]
 8009c48:	60a3      	str	r3, [r4, #8]
 8009c4a:	89a3      	ldrh	r3, [r4, #12]
 8009c4c:	071a      	lsls	r2, r3, #28
 8009c4e:	d52f      	bpl.n	8009cb0 <__swbuf_r+0x84>
 8009c50:	6923      	ldr	r3, [r4, #16]
 8009c52:	b36b      	cbz	r3, 8009cb0 <__swbuf_r+0x84>
 8009c54:	6923      	ldr	r3, [r4, #16]
 8009c56:	6820      	ldr	r0, [r4, #0]
 8009c58:	b2f6      	uxtb	r6, r6
 8009c5a:	1ac0      	subs	r0, r0, r3
 8009c5c:	6963      	ldr	r3, [r4, #20]
 8009c5e:	4637      	mov	r7, r6
 8009c60:	4283      	cmp	r3, r0
 8009c62:	dc04      	bgt.n	8009c6e <__swbuf_r+0x42>
 8009c64:	4621      	mov	r1, r4
 8009c66:	4628      	mov	r0, r5
 8009c68:	f000 f938 	bl	8009edc <_fflush_r>
 8009c6c:	bb30      	cbnz	r0, 8009cbc <__swbuf_r+0x90>
 8009c6e:	68a3      	ldr	r3, [r4, #8]
 8009c70:	3001      	adds	r0, #1
 8009c72:	3b01      	subs	r3, #1
 8009c74:	60a3      	str	r3, [r4, #8]
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	1c5a      	adds	r2, r3, #1
 8009c7a:	6022      	str	r2, [r4, #0]
 8009c7c:	701e      	strb	r6, [r3, #0]
 8009c7e:	6963      	ldr	r3, [r4, #20]
 8009c80:	4283      	cmp	r3, r0
 8009c82:	d004      	beq.n	8009c8e <__swbuf_r+0x62>
 8009c84:	89a3      	ldrh	r3, [r4, #12]
 8009c86:	07db      	lsls	r3, r3, #31
 8009c88:	d506      	bpl.n	8009c98 <__swbuf_r+0x6c>
 8009c8a:	2e0a      	cmp	r6, #10
 8009c8c:	d104      	bne.n	8009c98 <__swbuf_r+0x6c>
 8009c8e:	4621      	mov	r1, r4
 8009c90:	4628      	mov	r0, r5
 8009c92:	f000 f923 	bl	8009edc <_fflush_r>
 8009c96:	b988      	cbnz	r0, 8009cbc <__swbuf_r+0x90>
 8009c98:	4638      	mov	r0, r7
 8009c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c9c:	4b0a      	ldr	r3, [pc, #40]	; (8009cc8 <__swbuf_r+0x9c>)
 8009c9e:	429c      	cmp	r4, r3
 8009ca0:	d101      	bne.n	8009ca6 <__swbuf_r+0x7a>
 8009ca2:	68ac      	ldr	r4, [r5, #8]
 8009ca4:	e7cf      	b.n	8009c46 <__swbuf_r+0x1a>
 8009ca6:	4b09      	ldr	r3, [pc, #36]	; (8009ccc <__swbuf_r+0xa0>)
 8009ca8:	429c      	cmp	r4, r3
 8009caa:	bf08      	it	eq
 8009cac:	68ec      	ldreq	r4, [r5, #12]
 8009cae:	e7ca      	b.n	8009c46 <__swbuf_r+0x1a>
 8009cb0:	4621      	mov	r1, r4
 8009cb2:	4628      	mov	r0, r5
 8009cb4:	f000 f81a 	bl	8009cec <__swsetup_r>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d0cb      	beq.n	8009c54 <__swbuf_r+0x28>
 8009cbc:	f04f 37ff 	mov.w	r7, #4294967295
 8009cc0:	e7ea      	b.n	8009c98 <__swbuf_r+0x6c>
 8009cc2:	bf00      	nop
 8009cc4:	0800a7cc 	.word	0x0800a7cc
 8009cc8:	0800a7ec 	.word	0x0800a7ec
 8009ccc:	0800a7ac 	.word	0x0800a7ac

08009cd0 <__ascii_wctomb>:
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	4608      	mov	r0, r1
 8009cd4:	b141      	cbz	r1, 8009ce8 <__ascii_wctomb+0x18>
 8009cd6:	2aff      	cmp	r2, #255	; 0xff
 8009cd8:	d904      	bls.n	8009ce4 <__ascii_wctomb+0x14>
 8009cda:	228a      	movs	r2, #138	; 0x8a
 8009cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce0:	601a      	str	r2, [r3, #0]
 8009ce2:	4770      	bx	lr
 8009ce4:	2001      	movs	r0, #1
 8009ce6:	700a      	strb	r2, [r1, #0]
 8009ce8:	4770      	bx	lr
	...

08009cec <__swsetup_r>:
 8009cec:	4b32      	ldr	r3, [pc, #200]	; (8009db8 <__swsetup_r+0xcc>)
 8009cee:	b570      	push	{r4, r5, r6, lr}
 8009cf0:	681d      	ldr	r5, [r3, #0]
 8009cf2:	4606      	mov	r6, r0
 8009cf4:	460c      	mov	r4, r1
 8009cf6:	b125      	cbz	r5, 8009d02 <__swsetup_r+0x16>
 8009cf8:	69ab      	ldr	r3, [r5, #24]
 8009cfa:	b913      	cbnz	r3, 8009d02 <__swsetup_r+0x16>
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	f000 f981 	bl	800a004 <__sinit>
 8009d02:	4b2e      	ldr	r3, [pc, #184]	; (8009dbc <__swsetup_r+0xd0>)
 8009d04:	429c      	cmp	r4, r3
 8009d06:	d10f      	bne.n	8009d28 <__swsetup_r+0x3c>
 8009d08:	686c      	ldr	r4, [r5, #4]
 8009d0a:	89a3      	ldrh	r3, [r4, #12]
 8009d0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d10:	0719      	lsls	r1, r3, #28
 8009d12:	d42c      	bmi.n	8009d6e <__swsetup_r+0x82>
 8009d14:	06dd      	lsls	r5, r3, #27
 8009d16:	d411      	bmi.n	8009d3c <__swsetup_r+0x50>
 8009d18:	2309      	movs	r3, #9
 8009d1a:	6033      	str	r3, [r6, #0]
 8009d1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d20:	f04f 30ff 	mov.w	r0, #4294967295
 8009d24:	81a3      	strh	r3, [r4, #12]
 8009d26:	e03e      	b.n	8009da6 <__swsetup_r+0xba>
 8009d28:	4b25      	ldr	r3, [pc, #148]	; (8009dc0 <__swsetup_r+0xd4>)
 8009d2a:	429c      	cmp	r4, r3
 8009d2c:	d101      	bne.n	8009d32 <__swsetup_r+0x46>
 8009d2e:	68ac      	ldr	r4, [r5, #8]
 8009d30:	e7eb      	b.n	8009d0a <__swsetup_r+0x1e>
 8009d32:	4b24      	ldr	r3, [pc, #144]	; (8009dc4 <__swsetup_r+0xd8>)
 8009d34:	429c      	cmp	r4, r3
 8009d36:	bf08      	it	eq
 8009d38:	68ec      	ldreq	r4, [r5, #12]
 8009d3a:	e7e6      	b.n	8009d0a <__swsetup_r+0x1e>
 8009d3c:	0758      	lsls	r0, r3, #29
 8009d3e:	d512      	bpl.n	8009d66 <__swsetup_r+0x7a>
 8009d40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d42:	b141      	cbz	r1, 8009d56 <__swsetup_r+0x6a>
 8009d44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d48:	4299      	cmp	r1, r3
 8009d4a:	d002      	beq.n	8009d52 <__swsetup_r+0x66>
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	f7ff fcdb 	bl	8009708 <_free_r>
 8009d52:	2300      	movs	r3, #0
 8009d54:	6363      	str	r3, [r4, #52]	; 0x34
 8009d56:	89a3      	ldrh	r3, [r4, #12]
 8009d58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d5c:	81a3      	strh	r3, [r4, #12]
 8009d5e:	2300      	movs	r3, #0
 8009d60:	6063      	str	r3, [r4, #4]
 8009d62:	6923      	ldr	r3, [r4, #16]
 8009d64:	6023      	str	r3, [r4, #0]
 8009d66:	89a3      	ldrh	r3, [r4, #12]
 8009d68:	f043 0308 	orr.w	r3, r3, #8
 8009d6c:	81a3      	strh	r3, [r4, #12]
 8009d6e:	6923      	ldr	r3, [r4, #16]
 8009d70:	b94b      	cbnz	r3, 8009d86 <__swsetup_r+0x9a>
 8009d72:	89a3      	ldrh	r3, [r4, #12]
 8009d74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d7c:	d003      	beq.n	8009d86 <__swsetup_r+0x9a>
 8009d7e:	4621      	mov	r1, r4
 8009d80:	4630      	mov	r0, r6
 8009d82:	f000 fa05 	bl	800a190 <__smakebuf_r>
 8009d86:	89a0      	ldrh	r0, [r4, #12]
 8009d88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d8c:	f010 0301 	ands.w	r3, r0, #1
 8009d90:	d00a      	beq.n	8009da8 <__swsetup_r+0xbc>
 8009d92:	2300      	movs	r3, #0
 8009d94:	60a3      	str	r3, [r4, #8]
 8009d96:	6963      	ldr	r3, [r4, #20]
 8009d98:	425b      	negs	r3, r3
 8009d9a:	61a3      	str	r3, [r4, #24]
 8009d9c:	6923      	ldr	r3, [r4, #16]
 8009d9e:	b943      	cbnz	r3, 8009db2 <__swsetup_r+0xc6>
 8009da0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009da4:	d1ba      	bne.n	8009d1c <__swsetup_r+0x30>
 8009da6:	bd70      	pop	{r4, r5, r6, pc}
 8009da8:	0781      	lsls	r1, r0, #30
 8009daa:	bf58      	it	pl
 8009dac:	6963      	ldrpl	r3, [r4, #20]
 8009dae:	60a3      	str	r3, [r4, #8]
 8009db0:	e7f4      	b.n	8009d9c <__swsetup_r+0xb0>
 8009db2:	2000      	movs	r0, #0
 8009db4:	e7f7      	b.n	8009da6 <__swsetup_r+0xba>
 8009db6:	bf00      	nop
 8009db8:	20000018 	.word	0x20000018
 8009dbc:	0800a7cc 	.word	0x0800a7cc
 8009dc0:	0800a7ec 	.word	0x0800a7ec
 8009dc4:	0800a7ac 	.word	0x0800a7ac

08009dc8 <abort>:
 8009dc8:	2006      	movs	r0, #6
 8009dca:	b508      	push	{r3, lr}
 8009dcc:	f000 fa48 	bl	800a260 <raise>
 8009dd0:	2001      	movs	r0, #1
 8009dd2:	f7f7 ffd2 	bl	8001d7a <_exit>
	...

08009dd8 <__sflush_r>:
 8009dd8:	898a      	ldrh	r2, [r1, #12]
 8009dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ddc:	4605      	mov	r5, r0
 8009dde:	0710      	lsls	r0, r2, #28
 8009de0:	460c      	mov	r4, r1
 8009de2:	d457      	bmi.n	8009e94 <__sflush_r+0xbc>
 8009de4:	684b      	ldr	r3, [r1, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	dc04      	bgt.n	8009df4 <__sflush_r+0x1c>
 8009dea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	dc01      	bgt.n	8009df4 <__sflush_r+0x1c>
 8009df0:	2000      	movs	r0, #0
 8009df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009df4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009df6:	2e00      	cmp	r6, #0
 8009df8:	d0fa      	beq.n	8009df0 <__sflush_r+0x18>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e00:	682f      	ldr	r7, [r5, #0]
 8009e02:	602b      	str	r3, [r5, #0]
 8009e04:	d032      	beq.n	8009e6c <__sflush_r+0x94>
 8009e06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e08:	89a3      	ldrh	r3, [r4, #12]
 8009e0a:	075a      	lsls	r2, r3, #29
 8009e0c:	d505      	bpl.n	8009e1a <__sflush_r+0x42>
 8009e0e:	6863      	ldr	r3, [r4, #4]
 8009e10:	1ac0      	subs	r0, r0, r3
 8009e12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e14:	b10b      	cbz	r3, 8009e1a <__sflush_r+0x42>
 8009e16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e18:	1ac0      	subs	r0, r0, r3
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e20:	4628      	mov	r0, r5
 8009e22:	6a21      	ldr	r1, [r4, #32]
 8009e24:	47b0      	blx	r6
 8009e26:	1c43      	adds	r3, r0, #1
 8009e28:	89a3      	ldrh	r3, [r4, #12]
 8009e2a:	d106      	bne.n	8009e3a <__sflush_r+0x62>
 8009e2c:	6829      	ldr	r1, [r5, #0]
 8009e2e:	291d      	cmp	r1, #29
 8009e30:	d82c      	bhi.n	8009e8c <__sflush_r+0xb4>
 8009e32:	4a29      	ldr	r2, [pc, #164]	; (8009ed8 <__sflush_r+0x100>)
 8009e34:	40ca      	lsrs	r2, r1
 8009e36:	07d6      	lsls	r6, r2, #31
 8009e38:	d528      	bpl.n	8009e8c <__sflush_r+0xb4>
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	6062      	str	r2, [r4, #4]
 8009e3e:	6922      	ldr	r2, [r4, #16]
 8009e40:	04d9      	lsls	r1, r3, #19
 8009e42:	6022      	str	r2, [r4, #0]
 8009e44:	d504      	bpl.n	8009e50 <__sflush_r+0x78>
 8009e46:	1c42      	adds	r2, r0, #1
 8009e48:	d101      	bne.n	8009e4e <__sflush_r+0x76>
 8009e4a:	682b      	ldr	r3, [r5, #0]
 8009e4c:	b903      	cbnz	r3, 8009e50 <__sflush_r+0x78>
 8009e4e:	6560      	str	r0, [r4, #84]	; 0x54
 8009e50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e52:	602f      	str	r7, [r5, #0]
 8009e54:	2900      	cmp	r1, #0
 8009e56:	d0cb      	beq.n	8009df0 <__sflush_r+0x18>
 8009e58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e5c:	4299      	cmp	r1, r3
 8009e5e:	d002      	beq.n	8009e66 <__sflush_r+0x8e>
 8009e60:	4628      	mov	r0, r5
 8009e62:	f7ff fc51 	bl	8009708 <_free_r>
 8009e66:	2000      	movs	r0, #0
 8009e68:	6360      	str	r0, [r4, #52]	; 0x34
 8009e6a:	e7c2      	b.n	8009df2 <__sflush_r+0x1a>
 8009e6c:	6a21      	ldr	r1, [r4, #32]
 8009e6e:	2301      	movs	r3, #1
 8009e70:	4628      	mov	r0, r5
 8009e72:	47b0      	blx	r6
 8009e74:	1c41      	adds	r1, r0, #1
 8009e76:	d1c7      	bne.n	8009e08 <__sflush_r+0x30>
 8009e78:	682b      	ldr	r3, [r5, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d0c4      	beq.n	8009e08 <__sflush_r+0x30>
 8009e7e:	2b1d      	cmp	r3, #29
 8009e80:	d001      	beq.n	8009e86 <__sflush_r+0xae>
 8009e82:	2b16      	cmp	r3, #22
 8009e84:	d101      	bne.n	8009e8a <__sflush_r+0xb2>
 8009e86:	602f      	str	r7, [r5, #0]
 8009e88:	e7b2      	b.n	8009df0 <__sflush_r+0x18>
 8009e8a:	89a3      	ldrh	r3, [r4, #12]
 8009e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e90:	81a3      	strh	r3, [r4, #12]
 8009e92:	e7ae      	b.n	8009df2 <__sflush_r+0x1a>
 8009e94:	690f      	ldr	r7, [r1, #16]
 8009e96:	2f00      	cmp	r7, #0
 8009e98:	d0aa      	beq.n	8009df0 <__sflush_r+0x18>
 8009e9a:	0793      	lsls	r3, r2, #30
 8009e9c:	bf18      	it	ne
 8009e9e:	2300      	movne	r3, #0
 8009ea0:	680e      	ldr	r6, [r1, #0]
 8009ea2:	bf08      	it	eq
 8009ea4:	694b      	ldreq	r3, [r1, #20]
 8009ea6:	1bf6      	subs	r6, r6, r7
 8009ea8:	600f      	str	r7, [r1, #0]
 8009eaa:	608b      	str	r3, [r1, #8]
 8009eac:	2e00      	cmp	r6, #0
 8009eae:	dd9f      	ble.n	8009df0 <__sflush_r+0x18>
 8009eb0:	4633      	mov	r3, r6
 8009eb2:	463a      	mov	r2, r7
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	6a21      	ldr	r1, [r4, #32]
 8009eb8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009ebc:	47e0      	blx	ip
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	dc06      	bgt.n	8009ed0 <__sflush_r+0xf8>
 8009ec2:	89a3      	ldrh	r3, [r4, #12]
 8009ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ecc:	81a3      	strh	r3, [r4, #12]
 8009ece:	e790      	b.n	8009df2 <__sflush_r+0x1a>
 8009ed0:	4407      	add	r7, r0
 8009ed2:	1a36      	subs	r6, r6, r0
 8009ed4:	e7ea      	b.n	8009eac <__sflush_r+0xd4>
 8009ed6:	bf00      	nop
 8009ed8:	20400001 	.word	0x20400001

08009edc <_fflush_r>:
 8009edc:	b538      	push	{r3, r4, r5, lr}
 8009ede:	690b      	ldr	r3, [r1, #16]
 8009ee0:	4605      	mov	r5, r0
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	b913      	cbnz	r3, 8009eec <_fflush_r+0x10>
 8009ee6:	2500      	movs	r5, #0
 8009ee8:	4628      	mov	r0, r5
 8009eea:	bd38      	pop	{r3, r4, r5, pc}
 8009eec:	b118      	cbz	r0, 8009ef6 <_fflush_r+0x1a>
 8009eee:	6983      	ldr	r3, [r0, #24]
 8009ef0:	b90b      	cbnz	r3, 8009ef6 <_fflush_r+0x1a>
 8009ef2:	f000 f887 	bl	800a004 <__sinit>
 8009ef6:	4b14      	ldr	r3, [pc, #80]	; (8009f48 <_fflush_r+0x6c>)
 8009ef8:	429c      	cmp	r4, r3
 8009efa:	d11b      	bne.n	8009f34 <_fflush_r+0x58>
 8009efc:	686c      	ldr	r4, [r5, #4]
 8009efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d0ef      	beq.n	8009ee6 <_fflush_r+0xa>
 8009f06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f08:	07d0      	lsls	r0, r2, #31
 8009f0a:	d404      	bmi.n	8009f16 <_fflush_r+0x3a>
 8009f0c:	0599      	lsls	r1, r3, #22
 8009f0e:	d402      	bmi.n	8009f16 <_fflush_r+0x3a>
 8009f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f12:	f000 f915 	bl	800a140 <__retarget_lock_acquire_recursive>
 8009f16:	4628      	mov	r0, r5
 8009f18:	4621      	mov	r1, r4
 8009f1a:	f7ff ff5d 	bl	8009dd8 <__sflush_r>
 8009f1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f20:	4605      	mov	r5, r0
 8009f22:	07da      	lsls	r2, r3, #31
 8009f24:	d4e0      	bmi.n	8009ee8 <_fflush_r+0xc>
 8009f26:	89a3      	ldrh	r3, [r4, #12]
 8009f28:	059b      	lsls	r3, r3, #22
 8009f2a:	d4dd      	bmi.n	8009ee8 <_fflush_r+0xc>
 8009f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f2e:	f000 f908 	bl	800a142 <__retarget_lock_release_recursive>
 8009f32:	e7d9      	b.n	8009ee8 <_fflush_r+0xc>
 8009f34:	4b05      	ldr	r3, [pc, #20]	; (8009f4c <_fflush_r+0x70>)
 8009f36:	429c      	cmp	r4, r3
 8009f38:	d101      	bne.n	8009f3e <_fflush_r+0x62>
 8009f3a:	68ac      	ldr	r4, [r5, #8]
 8009f3c:	e7df      	b.n	8009efe <_fflush_r+0x22>
 8009f3e:	4b04      	ldr	r3, [pc, #16]	; (8009f50 <_fflush_r+0x74>)
 8009f40:	429c      	cmp	r4, r3
 8009f42:	bf08      	it	eq
 8009f44:	68ec      	ldreq	r4, [r5, #12]
 8009f46:	e7da      	b.n	8009efe <_fflush_r+0x22>
 8009f48:	0800a7cc 	.word	0x0800a7cc
 8009f4c:	0800a7ec 	.word	0x0800a7ec
 8009f50:	0800a7ac 	.word	0x0800a7ac

08009f54 <std>:
 8009f54:	2300      	movs	r3, #0
 8009f56:	b510      	push	{r4, lr}
 8009f58:	4604      	mov	r4, r0
 8009f5a:	e9c0 3300 	strd	r3, r3, [r0]
 8009f5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f62:	6083      	str	r3, [r0, #8]
 8009f64:	8181      	strh	r1, [r0, #12]
 8009f66:	6643      	str	r3, [r0, #100]	; 0x64
 8009f68:	81c2      	strh	r2, [r0, #14]
 8009f6a:	6183      	str	r3, [r0, #24]
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	2208      	movs	r2, #8
 8009f70:	305c      	adds	r0, #92	; 0x5c
 8009f72:	f7fd fd27 	bl	80079c4 <memset>
 8009f76:	4b05      	ldr	r3, [pc, #20]	; (8009f8c <std+0x38>)
 8009f78:	6224      	str	r4, [r4, #32]
 8009f7a:	6263      	str	r3, [r4, #36]	; 0x24
 8009f7c:	4b04      	ldr	r3, [pc, #16]	; (8009f90 <std+0x3c>)
 8009f7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f80:	4b04      	ldr	r3, [pc, #16]	; (8009f94 <std+0x40>)
 8009f82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f84:	4b04      	ldr	r3, [pc, #16]	; (8009f98 <std+0x44>)
 8009f86:	6323      	str	r3, [r4, #48]	; 0x30
 8009f88:	bd10      	pop	{r4, pc}
 8009f8a:	bf00      	nop
 8009f8c:	0800a299 	.word	0x0800a299
 8009f90:	0800a2bb 	.word	0x0800a2bb
 8009f94:	0800a2f3 	.word	0x0800a2f3
 8009f98:	0800a317 	.word	0x0800a317

08009f9c <_cleanup_r>:
 8009f9c:	4901      	ldr	r1, [pc, #4]	; (8009fa4 <_cleanup_r+0x8>)
 8009f9e:	f000 b8af 	b.w	800a100 <_fwalk_reent>
 8009fa2:	bf00      	nop
 8009fa4:	08009edd 	.word	0x08009edd

08009fa8 <__sfmoreglue>:
 8009fa8:	2268      	movs	r2, #104	; 0x68
 8009faa:	b570      	push	{r4, r5, r6, lr}
 8009fac:	1e4d      	subs	r5, r1, #1
 8009fae:	4355      	muls	r5, r2
 8009fb0:	460e      	mov	r6, r1
 8009fb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009fb6:	f7ff fc0f 	bl	80097d8 <_malloc_r>
 8009fba:	4604      	mov	r4, r0
 8009fbc:	b140      	cbz	r0, 8009fd0 <__sfmoreglue+0x28>
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	e9c0 1600 	strd	r1, r6, [r0]
 8009fc4:	300c      	adds	r0, #12
 8009fc6:	60a0      	str	r0, [r4, #8]
 8009fc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009fcc:	f7fd fcfa 	bl	80079c4 <memset>
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	bd70      	pop	{r4, r5, r6, pc}

08009fd4 <__sfp_lock_acquire>:
 8009fd4:	4801      	ldr	r0, [pc, #4]	; (8009fdc <__sfp_lock_acquire+0x8>)
 8009fd6:	f000 b8b3 	b.w	800a140 <__retarget_lock_acquire_recursive>
 8009fda:	bf00      	nop
 8009fdc:	20000471 	.word	0x20000471

08009fe0 <__sfp_lock_release>:
 8009fe0:	4801      	ldr	r0, [pc, #4]	; (8009fe8 <__sfp_lock_release+0x8>)
 8009fe2:	f000 b8ae 	b.w	800a142 <__retarget_lock_release_recursive>
 8009fe6:	bf00      	nop
 8009fe8:	20000471 	.word	0x20000471

08009fec <__sinit_lock_acquire>:
 8009fec:	4801      	ldr	r0, [pc, #4]	; (8009ff4 <__sinit_lock_acquire+0x8>)
 8009fee:	f000 b8a7 	b.w	800a140 <__retarget_lock_acquire_recursive>
 8009ff2:	bf00      	nop
 8009ff4:	20000472 	.word	0x20000472

08009ff8 <__sinit_lock_release>:
 8009ff8:	4801      	ldr	r0, [pc, #4]	; (800a000 <__sinit_lock_release+0x8>)
 8009ffa:	f000 b8a2 	b.w	800a142 <__retarget_lock_release_recursive>
 8009ffe:	bf00      	nop
 800a000:	20000472 	.word	0x20000472

0800a004 <__sinit>:
 800a004:	b510      	push	{r4, lr}
 800a006:	4604      	mov	r4, r0
 800a008:	f7ff fff0 	bl	8009fec <__sinit_lock_acquire>
 800a00c:	69a3      	ldr	r3, [r4, #24]
 800a00e:	b11b      	cbz	r3, 800a018 <__sinit+0x14>
 800a010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a014:	f7ff bff0 	b.w	8009ff8 <__sinit_lock_release>
 800a018:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a01c:	6523      	str	r3, [r4, #80]	; 0x50
 800a01e:	4b13      	ldr	r3, [pc, #76]	; (800a06c <__sinit+0x68>)
 800a020:	4a13      	ldr	r2, [pc, #76]	; (800a070 <__sinit+0x6c>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	62a2      	str	r2, [r4, #40]	; 0x28
 800a026:	42a3      	cmp	r3, r4
 800a028:	bf08      	it	eq
 800a02a:	2301      	moveq	r3, #1
 800a02c:	4620      	mov	r0, r4
 800a02e:	bf08      	it	eq
 800a030:	61a3      	streq	r3, [r4, #24]
 800a032:	f000 f81f 	bl	800a074 <__sfp>
 800a036:	6060      	str	r0, [r4, #4]
 800a038:	4620      	mov	r0, r4
 800a03a:	f000 f81b 	bl	800a074 <__sfp>
 800a03e:	60a0      	str	r0, [r4, #8]
 800a040:	4620      	mov	r0, r4
 800a042:	f000 f817 	bl	800a074 <__sfp>
 800a046:	2200      	movs	r2, #0
 800a048:	2104      	movs	r1, #4
 800a04a:	60e0      	str	r0, [r4, #12]
 800a04c:	6860      	ldr	r0, [r4, #4]
 800a04e:	f7ff ff81 	bl	8009f54 <std>
 800a052:	2201      	movs	r2, #1
 800a054:	2109      	movs	r1, #9
 800a056:	68a0      	ldr	r0, [r4, #8]
 800a058:	f7ff ff7c 	bl	8009f54 <std>
 800a05c:	2202      	movs	r2, #2
 800a05e:	2112      	movs	r1, #18
 800a060:	68e0      	ldr	r0, [r4, #12]
 800a062:	f7ff ff77 	bl	8009f54 <std>
 800a066:	2301      	movs	r3, #1
 800a068:	61a3      	str	r3, [r4, #24]
 800a06a:	e7d1      	b.n	800a010 <__sinit+0xc>
 800a06c:	0800a434 	.word	0x0800a434
 800a070:	08009f9d 	.word	0x08009f9d

0800a074 <__sfp>:
 800a074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a076:	4607      	mov	r7, r0
 800a078:	f7ff ffac 	bl	8009fd4 <__sfp_lock_acquire>
 800a07c:	4b1e      	ldr	r3, [pc, #120]	; (800a0f8 <__sfp+0x84>)
 800a07e:	681e      	ldr	r6, [r3, #0]
 800a080:	69b3      	ldr	r3, [r6, #24]
 800a082:	b913      	cbnz	r3, 800a08a <__sfp+0x16>
 800a084:	4630      	mov	r0, r6
 800a086:	f7ff ffbd 	bl	800a004 <__sinit>
 800a08a:	3648      	adds	r6, #72	; 0x48
 800a08c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a090:	3b01      	subs	r3, #1
 800a092:	d503      	bpl.n	800a09c <__sfp+0x28>
 800a094:	6833      	ldr	r3, [r6, #0]
 800a096:	b30b      	cbz	r3, 800a0dc <__sfp+0x68>
 800a098:	6836      	ldr	r6, [r6, #0]
 800a09a:	e7f7      	b.n	800a08c <__sfp+0x18>
 800a09c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a0a0:	b9d5      	cbnz	r5, 800a0d8 <__sfp+0x64>
 800a0a2:	4b16      	ldr	r3, [pc, #88]	; (800a0fc <__sfp+0x88>)
 800a0a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0a8:	60e3      	str	r3, [r4, #12]
 800a0aa:	6665      	str	r5, [r4, #100]	; 0x64
 800a0ac:	f000 f847 	bl	800a13e <__retarget_lock_init_recursive>
 800a0b0:	f7ff ff96 	bl	8009fe0 <__sfp_lock_release>
 800a0b4:	2208      	movs	r2, #8
 800a0b6:	4629      	mov	r1, r5
 800a0b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a0bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a0c0:	6025      	str	r5, [r4, #0]
 800a0c2:	61a5      	str	r5, [r4, #24]
 800a0c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a0c8:	f7fd fc7c 	bl	80079c4 <memset>
 800a0cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0d8:	3468      	adds	r4, #104	; 0x68
 800a0da:	e7d9      	b.n	800a090 <__sfp+0x1c>
 800a0dc:	2104      	movs	r1, #4
 800a0de:	4638      	mov	r0, r7
 800a0e0:	f7ff ff62 	bl	8009fa8 <__sfmoreglue>
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	6030      	str	r0, [r6, #0]
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d1d5      	bne.n	800a098 <__sfp+0x24>
 800a0ec:	f7ff ff78 	bl	8009fe0 <__sfp_lock_release>
 800a0f0:	230c      	movs	r3, #12
 800a0f2:	603b      	str	r3, [r7, #0]
 800a0f4:	e7ee      	b.n	800a0d4 <__sfp+0x60>
 800a0f6:	bf00      	nop
 800a0f8:	0800a434 	.word	0x0800a434
 800a0fc:	ffff0001 	.word	0xffff0001

0800a100 <_fwalk_reent>:
 800a100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a104:	4606      	mov	r6, r0
 800a106:	4688      	mov	r8, r1
 800a108:	2700      	movs	r7, #0
 800a10a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a10e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a112:	f1b9 0901 	subs.w	r9, r9, #1
 800a116:	d505      	bpl.n	800a124 <_fwalk_reent+0x24>
 800a118:	6824      	ldr	r4, [r4, #0]
 800a11a:	2c00      	cmp	r4, #0
 800a11c:	d1f7      	bne.n	800a10e <_fwalk_reent+0xe>
 800a11e:	4638      	mov	r0, r7
 800a120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a124:	89ab      	ldrh	r3, [r5, #12]
 800a126:	2b01      	cmp	r3, #1
 800a128:	d907      	bls.n	800a13a <_fwalk_reent+0x3a>
 800a12a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a12e:	3301      	adds	r3, #1
 800a130:	d003      	beq.n	800a13a <_fwalk_reent+0x3a>
 800a132:	4629      	mov	r1, r5
 800a134:	4630      	mov	r0, r6
 800a136:	47c0      	blx	r8
 800a138:	4307      	orrs	r7, r0
 800a13a:	3568      	adds	r5, #104	; 0x68
 800a13c:	e7e9      	b.n	800a112 <_fwalk_reent+0x12>

0800a13e <__retarget_lock_init_recursive>:
 800a13e:	4770      	bx	lr

0800a140 <__retarget_lock_acquire_recursive>:
 800a140:	4770      	bx	lr

0800a142 <__retarget_lock_release_recursive>:
 800a142:	4770      	bx	lr

0800a144 <__swhatbuf_r>:
 800a144:	b570      	push	{r4, r5, r6, lr}
 800a146:	460e      	mov	r6, r1
 800a148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a14c:	4614      	mov	r4, r2
 800a14e:	2900      	cmp	r1, #0
 800a150:	461d      	mov	r5, r3
 800a152:	b096      	sub	sp, #88	; 0x58
 800a154:	da08      	bge.n	800a168 <__swhatbuf_r+0x24>
 800a156:	2200      	movs	r2, #0
 800a158:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a15c:	602a      	str	r2, [r5, #0]
 800a15e:	061a      	lsls	r2, r3, #24
 800a160:	d410      	bmi.n	800a184 <__swhatbuf_r+0x40>
 800a162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a166:	e00e      	b.n	800a186 <__swhatbuf_r+0x42>
 800a168:	466a      	mov	r2, sp
 800a16a:	f000 f8fb 	bl	800a364 <_fstat_r>
 800a16e:	2800      	cmp	r0, #0
 800a170:	dbf1      	blt.n	800a156 <__swhatbuf_r+0x12>
 800a172:	9a01      	ldr	r2, [sp, #4]
 800a174:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a178:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a17c:	425a      	negs	r2, r3
 800a17e:	415a      	adcs	r2, r3
 800a180:	602a      	str	r2, [r5, #0]
 800a182:	e7ee      	b.n	800a162 <__swhatbuf_r+0x1e>
 800a184:	2340      	movs	r3, #64	; 0x40
 800a186:	2000      	movs	r0, #0
 800a188:	6023      	str	r3, [r4, #0]
 800a18a:	b016      	add	sp, #88	; 0x58
 800a18c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a190 <__smakebuf_r>:
 800a190:	898b      	ldrh	r3, [r1, #12]
 800a192:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a194:	079d      	lsls	r5, r3, #30
 800a196:	4606      	mov	r6, r0
 800a198:	460c      	mov	r4, r1
 800a19a:	d507      	bpl.n	800a1ac <__smakebuf_r+0x1c>
 800a19c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1a0:	6023      	str	r3, [r4, #0]
 800a1a2:	6123      	str	r3, [r4, #16]
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	6163      	str	r3, [r4, #20]
 800a1a8:	b002      	add	sp, #8
 800a1aa:	bd70      	pop	{r4, r5, r6, pc}
 800a1ac:	466a      	mov	r2, sp
 800a1ae:	ab01      	add	r3, sp, #4
 800a1b0:	f7ff ffc8 	bl	800a144 <__swhatbuf_r>
 800a1b4:	9900      	ldr	r1, [sp, #0]
 800a1b6:	4605      	mov	r5, r0
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	f7ff fb0d 	bl	80097d8 <_malloc_r>
 800a1be:	b948      	cbnz	r0, 800a1d4 <__smakebuf_r+0x44>
 800a1c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1c4:	059a      	lsls	r2, r3, #22
 800a1c6:	d4ef      	bmi.n	800a1a8 <__smakebuf_r+0x18>
 800a1c8:	f023 0303 	bic.w	r3, r3, #3
 800a1cc:	f043 0302 	orr.w	r3, r3, #2
 800a1d0:	81a3      	strh	r3, [r4, #12]
 800a1d2:	e7e3      	b.n	800a19c <__smakebuf_r+0xc>
 800a1d4:	4b0d      	ldr	r3, [pc, #52]	; (800a20c <__smakebuf_r+0x7c>)
 800a1d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1d8:	89a3      	ldrh	r3, [r4, #12]
 800a1da:	6020      	str	r0, [r4, #0]
 800a1dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1e0:	81a3      	strh	r3, [r4, #12]
 800a1e2:	9b00      	ldr	r3, [sp, #0]
 800a1e4:	6120      	str	r0, [r4, #16]
 800a1e6:	6163      	str	r3, [r4, #20]
 800a1e8:	9b01      	ldr	r3, [sp, #4]
 800a1ea:	b15b      	cbz	r3, 800a204 <__smakebuf_r+0x74>
 800a1ec:	4630      	mov	r0, r6
 800a1ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1f2:	f000 f8c9 	bl	800a388 <_isatty_r>
 800a1f6:	b128      	cbz	r0, 800a204 <__smakebuf_r+0x74>
 800a1f8:	89a3      	ldrh	r3, [r4, #12]
 800a1fa:	f023 0303 	bic.w	r3, r3, #3
 800a1fe:	f043 0301 	orr.w	r3, r3, #1
 800a202:	81a3      	strh	r3, [r4, #12]
 800a204:	89a0      	ldrh	r0, [r4, #12]
 800a206:	4305      	orrs	r5, r0
 800a208:	81a5      	strh	r5, [r4, #12]
 800a20a:	e7cd      	b.n	800a1a8 <__smakebuf_r+0x18>
 800a20c:	08009f9d 	.word	0x08009f9d

0800a210 <_raise_r>:
 800a210:	291f      	cmp	r1, #31
 800a212:	b538      	push	{r3, r4, r5, lr}
 800a214:	4604      	mov	r4, r0
 800a216:	460d      	mov	r5, r1
 800a218:	d904      	bls.n	800a224 <_raise_r+0x14>
 800a21a:	2316      	movs	r3, #22
 800a21c:	6003      	str	r3, [r0, #0]
 800a21e:	f04f 30ff 	mov.w	r0, #4294967295
 800a222:	bd38      	pop	{r3, r4, r5, pc}
 800a224:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a226:	b112      	cbz	r2, 800a22e <_raise_r+0x1e>
 800a228:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a22c:	b94b      	cbnz	r3, 800a242 <_raise_r+0x32>
 800a22e:	4620      	mov	r0, r4
 800a230:	f000 f830 	bl	800a294 <_getpid_r>
 800a234:	462a      	mov	r2, r5
 800a236:	4601      	mov	r1, r0
 800a238:	4620      	mov	r0, r4
 800a23a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a23e:	f000 b817 	b.w	800a270 <_kill_r>
 800a242:	2b01      	cmp	r3, #1
 800a244:	d00a      	beq.n	800a25c <_raise_r+0x4c>
 800a246:	1c59      	adds	r1, r3, #1
 800a248:	d103      	bne.n	800a252 <_raise_r+0x42>
 800a24a:	2316      	movs	r3, #22
 800a24c:	6003      	str	r3, [r0, #0]
 800a24e:	2001      	movs	r0, #1
 800a250:	e7e7      	b.n	800a222 <_raise_r+0x12>
 800a252:	2400      	movs	r4, #0
 800a254:	4628      	mov	r0, r5
 800a256:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a25a:	4798      	blx	r3
 800a25c:	2000      	movs	r0, #0
 800a25e:	e7e0      	b.n	800a222 <_raise_r+0x12>

0800a260 <raise>:
 800a260:	4b02      	ldr	r3, [pc, #8]	; (800a26c <raise+0xc>)
 800a262:	4601      	mov	r1, r0
 800a264:	6818      	ldr	r0, [r3, #0]
 800a266:	f7ff bfd3 	b.w	800a210 <_raise_r>
 800a26a:	bf00      	nop
 800a26c:	20000018 	.word	0x20000018

0800a270 <_kill_r>:
 800a270:	b538      	push	{r3, r4, r5, lr}
 800a272:	2300      	movs	r3, #0
 800a274:	4d06      	ldr	r5, [pc, #24]	; (800a290 <_kill_r+0x20>)
 800a276:	4604      	mov	r4, r0
 800a278:	4608      	mov	r0, r1
 800a27a:	4611      	mov	r1, r2
 800a27c:	602b      	str	r3, [r5, #0]
 800a27e:	f7f7 fd6c 	bl	8001d5a <_kill>
 800a282:	1c43      	adds	r3, r0, #1
 800a284:	d102      	bne.n	800a28c <_kill_r+0x1c>
 800a286:	682b      	ldr	r3, [r5, #0]
 800a288:	b103      	cbz	r3, 800a28c <_kill_r+0x1c>
 800a28a:	6023      	str	r3, [r4, #0]
 800a28c:	bd38      	pop	{r3, r4, r5, pc}
 800a28e:	bf00      	nop
 800a290:	2000046c 	.word	0x2000046c

0800a294 <_getpid_r>:
 800a294:	f7f7 bd5a 	b.w	8001d4c <_getpid>

0800a298 <__sread>:
 800a298:	b510      	push	{r4, lr}
 800a29a:	460c      	mov	r4, r1
 800a29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a0:	f000 f894 	bl	800a3cc <_read_r>
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	bfab      	itete	ge
 800a2a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a2ac:	181b      	addge	r3, r3, r0
 800a2ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2b2:	bfac      	ite	ge
 800a2b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2b6:	81a3      	strhlt	r3, [r4, #12]
 800a2b8:	bd10      	pop	{r4, pc}

0800a2ba <__swrite>:
 800a2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2be:	461f      	mov	r7, r3
 800a2c0:	898b      	ldrh	r3, [r1, #12]
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	05db      	lsls	r3, r3, #23
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	4616      	mov	r6, r2
 800a2ca:	d505      	bpl.n	800a2d8 <__swrite+0x1e>
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2d4:	f000 f868 	bl	800a3a8 <_lseek_r>
 800a2d8:	89a3      	ldrh	r3, [r4, #12]
 800a2da:	4632      	mov	r2, r6
 800a2dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2e0:	81a3      	strh	r3, [r4, #12]
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	463b      	mov	r3, r7
 800a2e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ee:	f000 b817 	b.w	800a320 <_write_r>

0800a2f2 <__sseek>:
 800a2f2:	b510      	push	{r4, lr}
 800a2f4:	460c      	mov	r4, r1
 800a2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2fa:	f000 f855 	bl	800a3a8 <_lseek_r>
 800a2fe:	1c43      	adds	r3, r0, #1
 800a300:	89a3      	ldrh	r3, [r4, #12]
 800a302:	bf15      	itete	ne
 800a304:	6560      	strne	r0, [r4, #84]	; 0x54
 800a306:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a30a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a30e:	81a3      	strheq	r3, [r4, #12]
 800a310:	bf18      	it	ne
 800a312:	81a3      	strhne	r3, [r4, #12]
 800a314:	bd10      	pop	{r4, pc}

0800a316 <__sclose>:
 800a316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a31a:	f000 b813 	b.w	800a344 <_close_r>
	...

0800a320 <_write_r>:
 800a320:	b538      	push	{r3, r4, r5, lr}
 800a322:	4604      	mov	r4, r0
 800a324:	4608      	mov	r0, r1
 800a326:	4611      	mov	r1, r2
 800a328:	2200      	movs	r2, #0
 800a32a:	4d05      	ldr	r5, [pc, #20]	; (800a340 <_write_r+0x20>)
 800a32c:	602a      	str	r2, [r5, #0]
 800a32e:	461a      	mov	r2, r3
 800a330:	f7f7 fd4a 	bl	8001dc8 <_write>
 800a334:	1c43      	adds	r3, r0, #1
 800a336:	d102      	bne.n	800a33e <_write_r+0x1e>
 800a338:	682b      	ldr	r3, [r5, #0]
 800a33a:	b103      	cbz	r3, 800a33e <_write_r+0x1e>
 800a33c:	6023      	str	r3, [r4, #0]
 800a33e:	bd38      	pop	{r3, r4, r5, pc}
 800a340:	2000046c 	.word	0x2000046c

0800a344 <_close_r>:
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	2300      	movs	r3, #0
 800a348:	4d05      	ldr	r5, [pc, #20]	; (800a360 <_close_r+0x1c>)
 800a34a:	4604      	mov	r4, r0
 800a34c:	4608      	mov	r0, r1
 800a34e:	602b      	str	r3, [r5, #0]
 800a350:	f7f7 fd56 	bl	8001e00 <_close>
 800a354:	1c43      	adds	r3, r0, #1
 800a356:	d102      	bne.n	800a35e <_close_r+0x1a>
 800a358:	682b      	ldr	r3, [r5, #0]
 800a35a:	b103      	cbz	r3, 800a35e <_close_r+0x1a>
 800a35c:	6023      	str	r3, [r4, #0]
 800a35e:	bd38      	pop	{r3, r4, r5, pc}
 800a360:	2000046c 	.word	0x2000046c

0800a364 <_fstat_r>:
 800a364:	b538      	push	{r3, r4, r5, lr}
 800a366:	2300      	movs	r3, #0
 800a368:	4d06      	ldr	r5, [pc, #24]	; (800a384 <_fstat_r+0x20>)
 800a36a:	4604      	mov	r4, r0
 800a36c:	4608      	mov	r0, r1
 800a36e:	4611      	mov	r1, r2
 800a370:	602b      	str	r3, [r5, #0]
 800a372:	f7f7 fd50 	bl	8001e16 <_fstat>
 800a376:	1c43      	adds	r3, r0, #1
 800a378:	d102      	bne.n	800a380 <_fstat_r+0x1c>
 800a37a:	682b      	ldr	r3, [r5, #0]
 800a37c:	b103      	cbz	r3, 800a380 <_fstat_r+0x1c>
 800a37e:	6023      	str	r3, [r4, #0]
 800a380:	bd38      	pop	{r3, r4, r5, pc}
 800a382:	bf00      	nop
 800a384:	2000046c 	.word	0x2000046c

0800a388 <_isatty_r>:
 800a388:	b538      	push	{r3, r4, r5, lr}
 800a38a:	2300      	movs	r3, #0
 800a38c:	4d05      	ldr	r5, [pc, #20]	; (800a3a4 <_isatty_r+0x1c>)
 800a38e:	4604      	mov	r4, r0
 800a390:	4608      	mov	r0, r1
 800a392:	602b      	str	r3, [r5, #0]
 800a394:	f7f7 fd4e 	bl	8001e34 <_isatty>
 800a398:	1c43      	adds	r3, r0, #1
 800a39a:	d102      	bne.n	800a3a2 <_isatty_r+0x1a>
 800a39c:	682b      	ldr	r3, [r5, #0]
 800a39e:	b103      	cbz	r3, 800a3a2 <_isatty_r+0x1a>
 800a3a0:	6023      	str	r3, [r4, #0]
 800a3a2:	bd38      	pop	{r3, r4, r5, pc}
 800a3a4:	2000046c 	.word	0x2000046c

0800a3a8 <_lseek_r>:
 800a3a8:	b538      	push	{r3, r4, r5, lr}
 800a3aa:	4604      	mov	r4, r0
 800a3ac:	4608      	mov	r0, r1
 800a3ae:	4611      	mov	r1, r2
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	4d05      	ldr	r5, [pc, #20]	; (800a3c8 <_lseek_r+0x20>)
 800a3b4:	602a      	str	r2, [r5, #0]
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	f7f7 fd46 	bl	8001e48 <_lseek>
 800a3bc:	1c43      	adds	r3, r0, #1
 800a3be:	d102      	bne.n	800a3c6 <_lseek_r+0x1e>
 800a3c0:	682b      	ldr	r3, [r5, #0]
 800a3c2:	b103      	cbz	r3, 800a3c6 <_lseek_r+0x1e>
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	bd38      	pop	{r3, r4, r5, pc}
 800a3c8:	2000046c 	.word	0x2000046c

0800a3cc <_read_r>:
 800a3cc:	b538      	push	{r3, r4, r5, lr}
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	4608      	mov	r0, r1
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	4d05      	ldr	r5, [pc, #20]	; (800a3ec <_read_r+0x20>)
 800a3d8:	602a      	str	r2, [r5, #0]
 800a3da:	461a      	mov	r2, r3
 800a3dc:	f7f7 fcd7 	bl	8001d8e <_read>
 800a3e0:	1c43      	adds	r3, r0, #1
 800a3e2:	d102      	bne.n	800a3ea <_read_r+0x1e>
 800a3e4:	682b      	ldr	r3, [r5, #0]
 800a3e6:	b103      	cbz	r3, 800a3ea <_read_r+0x1e>
 800a3e8:	6023      	str	r3, [r4, #0]
 800a3ea:	bd38      	pop	{r3, r4, r5, pc}
 800a3ec:	2000046c 	.word	0x2000046c

0800a3f0 <_init>:
 800a3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3f2:	bf00      	nop
 800a3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3f6:	bc08      	pop	{r3}
 800a3f8:	469e      	mov	lr, r3
 800a3fa:	4770      	bx	lr

0800a3fc <_fini>:
 800a3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fe:	bf00      	nop
 800a400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a402:	bc08      	pop	{r3}
 800a404:	469e      	mov	lr, r3
 800a406:	4770      	bx	lr
