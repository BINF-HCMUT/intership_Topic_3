
week1_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d150  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  0800d260  0800d260  0001d260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6f4  0800d6f4  0002023c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d6f4  0800d6f4  0002023c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d6f4  0800d6f4  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d6f4  0800d6f4  0001d6f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d6f8  0800d6f8  0001d6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  0800d6fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000740  2000023c  0800d938  0002023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000097c  0800d938  0002097c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170bf  00000000  00000000  00020265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034ca  00000000  00000000  00037324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  0003a7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001340  00000000  00000000  0003bc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af4e  00000000  00000000  0003cfd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000192a7  00000000  00000000  00057f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094f76  00000000  00000000  000711cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106143  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006724  00000000  00000000  00106194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000023c 	.word	0x2000023c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d248 	.word	0x0800d248

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000240 	.word	0x20000240
 800014c:	0800d248 	.word	0x0800d248

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <DHT20_isConnected>:
uint8_t readCMD[3] = {0xAC, 0x33, 0x00};
uint32_t _lastRequest = 0;
uint32_t _lastRead = 0;


uint8_t DHT20_isConnected(){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, DHT20, 1, 100);
 8000d4a:	2364      	movs	r3, #100	; 0x64
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2170      	movs	r1, #112	; 0x70
 8000d50:	480b      	ldr	r0, [pc, #44]	; (8000d80 <DHT20_isConnected+0x3c>)
 8000d52:	f004 fab7 	bl	80052c4 <HAL_I2C_IsDeviceReady>
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!connectDHT=%02X#\r\n", status), 1000);
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4909      	ldr	r1, [pc, #36]	; (8000d84 <DHT20_isConnected+0x40>)
 8000d60:	4809      	ldr	r0, [pc, #36]	; (8000d88 <DHT20_isConnected+0x44>)
 8000d62:	f009 fff9 	bl	800ad58 <siprintf>
 8000d66:	4603      	mov	r3, r0
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	4906      	ldr	r1, [pc, #24]	; (8000d88 <DHT20_isConnected+0x44>)
 8000d70:	4806      	ldr	r0, [pc, #24]	; (8000d8c <DHT20_isConnected+0x48>)
 8000d72:	f008 fd36 	bl	80097e2 <HAL_UART_Transmit>
    return status;
 8000d76:	79fb      	ldrb	r3, [r7, #7]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	2000031c 	.word	0x2000031c
 8000d84:	0800d260 	.word	0x0800d260
 8000d88:	20000010 	.word	0x20000010
 8000d8c:	200004d4 	.word	0x200004d4

08000d90 <DHT20_getHumidity>:

uint8_t DHT20_getAddress(){
	return DHT20;
}

float DHT20_getHumidity (){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	return (humidity + humidityOffset);
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <DHT20_getHumidity+0x1c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <DHT20_getHumidity+0x20>)
 8000d9a:	6812      	ldr	r2, [r2, #0]
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fec8 	bl	8000b34 <__addsf3>
 8000da4:	4603      	mov	r3, r0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000258 	.word	0x20000258
 8000db0:	20000260 	.word	0x20000260

08000db4 <DHT20_getTemperature>:

float DHT20_getTemperature(){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	return temperature + temperatureOffset;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <DHT20_getTemperature+0x1c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <DHT20_getTemperature+0x20>)
 8000dbe:	6812      	ldr	r2, [r2, #0]
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff feb6 	bl	8000b34 <__addsf3>
 8000dc8:	4603      	mov	r3, r0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000025c 	.word	0x2000025c
 8000dd4:	20000264 	.word	0x20000264

08000dd8 <DHT20_requestData>:
     return humidityOffset;
}
float DHT20_getTemperatureOffset(){
	return temperatureOffset;
}
uint8_t DHT20_requestData(){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af02      	add	r7, sp, #8
	  HAL_StatusTypeDef ret;
	  ret =  HAL_I2C_Master_Transmit(&hi2c1, DHT20, readCMD, 3, 1000);
 8000dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2303      	movs	r3, #3
 8000de6:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <DHT20_requestData+0x28>)
 8000de8:	2170      	movs	r1, #112	; 0x70
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <DHT20_requestData+0x2c>)
 8000dec:	f003 ff00 	bl	8004bf0 <HAL_I2C_Master_Transmit>
 8000df0:	4603      	mov	r3, r0
 8000df2:	71fb      	strb	r3, [r7, #7]
      return ret;
 8000df4:	79fb      	ldrb	r3, [r7, #7]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000000 	.word	0x20000000
 8000e04:	2000031c 	.word	0x2000031c

08000e08 <DHT20_crc8>:
    	   if(DHT20_resetRegister(0x1E)) count++;
    	   HAL_Delay(20);
       }
}
uint8_t DHT20_crc8(uint8_t *ptr, uint8_t len)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0xFF;
 8000e14:	23ff      	movs	r3, #255	; 0xff
 8000e16:	73fb      	strb	r3, [r7, #15]
	while(len--){
 8000e18:	e01e      	b.n	8000e58 <DHT20_crc8+0x50>
		crc ^= *ptr++;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	1c5a      	adds	r2, r3, #1
 8000e1e:	607a      	str	r2, [r7, #4]
 8000e20:	781a      	ldrb	r2, [r3, #0]
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	4053      	eors	r3, r2
 8000e26:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 0; i< 8; ++i)
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73bb      	strb	r3, [r7, #14]
 8000e2c:	e011      	b.n	8000e52 <DHT20_crc8+0x4a>
		{
			if(crc & 0x80)
 8000e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	da07      	bge.n	8000e46 <DHT20_crc8+0x3e>
			{
				crc <<= 1;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	73fb      	strb	r3, [r7, #15]
				crc ^= 0x31;
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	e002      	b.n	8000e4c <DHT20_crc8+0x44>
			}
			else
			{
				crc <<= 1;
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 0; i< 8; ++i)
 8000e4c:	7bbb      	ldrb	r3, [r7, #14]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	73bb      	strb	r3, [r7, #14]
 8000e52:	7bbb      	ldrb	r3, [r7, #14]
 8000e54:	2b07      	cmp	r3, #7
 8000e56:	d9ea      	bls.n	8000e2e <DHT20_crc8+0x26>
	while(len--){
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	1e5a      	subs	r2, r3, #1
 8000e5c:	70fa      	strb	r2, [r7, #3]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1db      	bne.n	8000e1a <DHT20_crc8+0x12>
			}
		}
	}
	return crc;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
	...

08000e70 <DHT20_Read>:
int DHT20_Read(){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret ;
	if(DHT20_isConnected() != HAL_OK){
 8000e76:	f7ff ff65 	bl	8000d44 <DHT20_isConnected>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d002      	beq.n	8000e86 <DHT20_Read+0x16>
		return DHT20_ERROR_CONNECT;
 8000e80:	f06f 030a 	mvn.w	r3, #10
 8000e84:	e02d      	b.n	8000ee2 <DHT20_Read+0x72>
	}
    uint8_t request_data = DHT20_requestData();
 8000e86:	f7ff ffa7 	bl	8000dd8 <DHT20_requestData>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
    if(request_data == HAL_OK){
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d124      	bne.n	8000ede <DHT20_Read+0x6e>
    	HAL_Delay(1000);
 8000e94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e98:	f002 fba8 	bl	80035ec <HAL_Delay>
    	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!result=%s#\r\n", "OK"), 1000);
 8000e9c:	4a13      	ldr	r2, [pc, #76]	; (8000eec <DHT20_Read+0x7c>)
 8000e9e:	4914      	ldr	r1, [pc, #80]	; (8000ef0 <DHT20_Read+0x80>)
 8000ea0:	4814      	ldr	r0, [pc, #80]	; (8000ef4 <DHT20_Read+0x84>)
 8000ea2:	f009 ff59 	bl	800ad58 <siprintf>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	4911      	ldr	r1, [pc, #68]	; (8000ef4 <DHT20_Read+0x84>)
 8000eb0:	4811      	ldr	r0, [pc, #68]	; (8000ef8 <DHT20_Read+0x88>)
 8000eb2:	f008 fc96 	bl	80097e2 <HAL_UART_Transmit>
    	ret = HAL_I2C_Master_Receive(&hi2c1, DHT20, buf, 7, 100);
 8000eb6:	2364      	movs	r3, #100	; 0x64
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	2307      	movs	r3, #7
 8000ebc:	4a0f      	ldr	r2, [pc, #60]	; (8000efc <DHT20_Read+0x8c>)
 8000ebe:	2170      	movs	r1, #112	; 0x70
 8000ec0:	480f      	ldr	r0, [pc, #60]	; (8000f00 <DHT20_Read+0x90>)
 8000ec2:	f003 ff93 	bl	8004dec <HAL_I2C_Master_Receive>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71bb      	strb	r3, [r7, #6]
    	HAL_Delay(100);
 8000eca:	2064      	movs	r0, #100	; 0x64
 8000ecc:	f002 fb8e 	bl	80035ec <HAL_Delay>
    	   if(ret == HAL_OK){
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d103      	bne.n	8000ede <DHT20_Read+0x6e>
    		   return DHT20_Convert();
 8000ed6:	f000 f815 	bl	8000f04 <DHT20_Convert>
 8000eda:	4603      	mov	r3, r0
 8000edc:	e001      	b.n	8000ee2 <DHT20_Read+0x72>
    	   }

    }
    return DHT20_ERROR_BYTES_ALL_ZERO;
 8000ede:	f06f 030c 	mvn.w	r3, #12
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	0800d274 	.word	0x0800d274
 8000ef0:	0800d278 	.word	0x0800d278
 8000ef4:	20000010 	.word	0x20000010
 8000ef8:	200004d4 	.word	0x200004d4
 8000efc:	20000268 	.word	0x20000268
 8000f00:	2000031c 	.word	0x2000031c

08000f04 <DHT20_Convert>:

int DHT20_Convert(){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
	   //  convert temperature
	   uint32_t raw = buf[1];
 8000f0a:	4b56      	ldr	r3, [pc, #344]	; (8001064 <DHT20_Convert+0x160>)
 8000f0c:	785b      	ldrb	r3, [r3, #1]
 8000f0e:	607b      	str	r3, [r7, #4]
	   raw <<= 8;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	607b      	str	r3, [r7, #4]
	   raw += buf[2];
 8000f16:	4b53      	ldr	r3, [pc, #332]	; (8001064 <DHT20_Convert+0x160>)
 8000f18:	789b      	ldrb	r3, [r3, #2]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4413      	add	r3, r2
 8000f20:	607b      	str	r3, [r7, #4]
	   raw <<= 4;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	607b      	str	r3, [r7, #4]
	   raw += (buf[3] >> 4);
 8000f28:	4b4e      	ldr	r3, [pc, #312]	; (8001064 <DHT20_Convert+0x160>)
 8000f2a:	78db      	ldrb	r3, [r3, #3]
 8000f2c:	091b      	lsrs	r3, r3, #4
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	461a      	mov	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	607b      	str	r3, [r7, #4]
	   humidity = raw * 9.5367431640625e-5;   // ==> / 1048576.0 * 100%;
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff fa53 	bl	80003e4 <__aeabi_ui2d>
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	4b49      	ldr	r3, [pc, #292]	; (8001068 <DHT20_Convert+0x164>)
 8000f44:	f7ff fac8 	bl	80004d8 <__aeabi_dmul>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f7ff fd9a 	bl	8000a88 <__aeabi_d2f>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4a45      	ldr	r2, [pc, #276]	; (800106c <DHT20_Convert+0x168>)
 8000f58:	6013      	str	r3, [r2, #0]
	   HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "Humid=%f\r\n", humidity), 1000);
 8000f5a:	4b44      	ldr	r3, [pc, #272]	; (800106c <DHT20_Convert+0x168>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fa62 	bl	8000428 <__aeabi_f2d>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4941      	ldr	r1, [pc, #260]	; (8001070 <DHT20_Convert+0x16c>)
 8000f6a:	4842      	ldr	r0, [pc, #264]	; (8001074 <DHT20_Convert+0x170>)
 8000f6c:	f009 fef4 	bl	800ad58 <siprintf>
 8000f70:	4603      	mov	r3, r0
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f78:	493e      	ldr	r1, [pc, #248]	; (8001074 <DHT20_Convert+0x170>)
 8000f7a:	483f      	ldr	r0, [pc, #252]	; (8001078 <DHT20_Convert+0x174>)
 8000f7c:	f008 fc31 	bl	80097e2 <HAL_UART_Transmit>

		//  convert humidity
	    raw = (buf[3] & 0x0F);
 8000f80:	4b38      	ldr	r3, [pc, #224]	; (8001064 <DHT20_Convert+0x160>)
 8000f82:	78db      	ldrb	r3, [r3, #3]
 8000f84:	f003 030f 	and.w	r3, r3, #15
 8000f88:	607b      	str	r3, [r7, #4]
	    raw <<= 8;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	021b      	lsls	r3, r3, #8
 8000f8e:	607b      	str	r3, [r7, #4]
	    raw += buf[4];
 8000f90:	4b34      	ldr	r3, [pc, #208]	; (8001064 <DHT20_Convert+0x160>)
 8000f92:	791b      	ldrb	r3, [r3, #4]
 8000f94:	461a      	mov	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	607b      	str	r3, [r7, #4]
	    raw <<= 8;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	607b      	str	r3, [r7, #4]
	    raw += buf[5];
 8000fa2:	4b30      	ldr	r3, [pc, #192]	; (8001064 <DHT20_Convert+0x160>)
 8000fa4:	795b      	ldrb	r3, [r3, #5]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4413      	add	r3, r2
 8000fac:	607b      	str	r3, [r7, #4]
	    temperature = raw * 1.9073486328125e-4 - 50;  //  ==> / 1048576.0 * 200 - 50;
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff fa18 	bl	80003e4 <__aeabi_ui2d>
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	4b30      	ldr	r3, [pc, #192]	; (800107c <DHT20_Convert+0x178>)
 8000fba:	f7ff fa8d 	bl	80004d8 <__aeabi_dmul>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <DHT20_Convert+0x17c>)
 8000fcc:	f7ff f8cc 	bl	8000168 <__aeabi_dsub>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f7ff fd56 	bl	8000a88 <__aeabi_d2f>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	4a29      	ldr	r2, [pc, #164]	; (8001084 <DHT20_Convert+0x180>)
 8000fe0:	6013      	str	r3, [r2, #0]
	    HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "temp=%f\r\n", temperature), 1000);
 8000fe2:	4b28      	ldr	r3, [pc, #160]	; (8001084 <DHT20_Convert+0x180>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fa1e 	bl	8000428 <__aeabi_f2d>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4925      	ldr	r1, [pc, #148]	; (8001088 <DHT20_Convert+0x184>)
 8000ff2:	4820      	ldr	r0, [pc, #128]	; (8001074 <DHT20_Convert+0x170>)
 8000ff4:	f009 feb0 	bl	800ad58 <siprintf>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001000:	491c      	ldr	r1, [pc, #112]	; (8001074 <DHT20_Convert+0x170>)
 8001002:	481d      	ldr	r0, [pc, #116]	; (8001078 <DHT20_Convert+0x174>)
 8001004:	f008 fbed 	bl	80097e2 <HAL_UART_Transmit>

	    // Checksum
	    uint8_t crc = DHT20_crc8(buf, 6);
 8001008:	2106      	movs	r1, #6
 800100a:	4816      	ldr	r0, [pc, #88]	; (8001064 <DHT20_Convert+0x160>)
 800100c:	f7ff fefc 	bl	8000e08 <DHT20_crc8>
 8001010:	4603      	mov	r3, r0
 8001012:	70fb      	strb	r3, [r7, #3]
	    if(crc != buf[6]){
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <DHT20_Convert+0x160>)
 8001016:	799b      	ldrb	r3, [r3, #6]
 8001018:	78fa      	ldrb	r2, [r7, #3]
 800101a:	429a      	cmp	r2, r3
 800101c:	d00f      	beq.n	800103e <DHT20_Convert+0x13a>
	      	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!CRC=%s#\r\n", "NOT OK"), 1000);
 800101e:	4a1b      	ldr	r2, [pc, #108]	; (800108c <DHT20_Convert+0x188>)
 8001020:	491b      	ldr	r1, [pc, #108]	; (8001090 <DHT20_Convert+0x18c>)
 8001022:	4814      	ldr	r0, [pc, #80]	; (8001074 <DHT20_Convert+0x170>)
 8001024:	f009 fe98 	bl	800ad58 <siprintf>
 8001028:	4603      	mov	r3, r0
 800102a:	b29a      	uxth	r2, r3
 800102c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001030:	4910      	ldr	r1, [pc, #64]	; (8001074 <DHT20_Convert+0x170>)
 8001032:	4811      	ldr	r0, [pc, #68]	; (8001078 <DHT20_Convert+0x174>)
 8001034:	f008 fbd5 	bl	80097e2 <HAL_UART_Transmit>
	    	return DHT20_ERROR_CHECKSUM;
 8001038:	f06f 0309 	mvn.w	r3, #9
 800103c:	e00d      	b.n	800105a <DHT20_Convert+0x156>
	    }
		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!CRC=%s#\r\n", "OK"), 1000);
 800103e:	4a15      	ldr	r2, [pc, #84]	; (8001094 <DHT20_Convert+0x190>)
 8001040:	4913      	ldr	r1, [pc, #76]	; (8001090 <DHT20_Convert+0x18c>)
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <DHT20_Convert+0x170>)
 8001044:	f009 fe88 	bl	800ad58 <siprintf>
 8001048:	4603      	mov	r3, r0
 800104a:	b29a      	uxth	r2, r3
 800104c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001050:	4908      	ldr	r1, [pc, #32]	; (8001074 <DHT20_Convert+0x170>)
 8001052:	4809      	ldr	r0, [pc, #36]	; (8001078 <DHT20_Convert+0x174>)
 8001054:	f008 fbc5 	bl	80097e2 <HAL_UART_Transmit>
	    return DHT20_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000268 	.word	0x20000268
 8001068:	3f190000 	.word	0x3f190000
 800106c:	20000258 	.word	0x20000258
 8001070:	0800d288 	.word	0x0800d288
 8001074:	20000010 	.word	0x20000010
 8001078:	200004d4 	.word	0x200004d4
 800107c:	3f290000 	.word	0x3f290000
 8001080:	40490000 	.word	0x40490000
 8001084:	2000025c 	.word	0x2000025c
 8001088:	0800d294 	.word	0x0800d294
 800108c:	0800d2a0 	.word	0x0800d2a0
 8001090:	0800d2a8 	.word	0x0800d2a8
 8001094:	0800d274 	.word	0x0800d274

08001098 <lcdSendCmd>:
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, SLAVE_ADDRESS_LCD, 1, 100);
	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!Connect=%02X#\r\n", status), 100);
}

void lcdSendCmd (char cmd)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af02      	add	r7, sp, #8
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f023 030f 	bic.w	r3, r3, #15
 80010a8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	f043 030c 	orr.w	r3, r3, #12
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80010c4:	7bbb      	ldrb	r3, [r7, #14]
 80010c6:	f043 030c 	orr.w	r3, r3, #12
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	f043 0308 	orr.w	r3, r3, #8
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80010d8:	f107 0208 	add.w	r2, r7, #8
 80010dc:	2364      	movs	r3, #100	; 0x64
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2304      	movs	r3, #4
 80010e2:	2142      	movs	r1, #66	; 0x42
 80010e4:	4803      	ldr	r0, [pc, #12]	; (80010f4 <lcdSendCmd+0x5c>)
 80010e6:	f003 fd83 	bl	8004bf0 <HAL_I2C_Master_Transmit>
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000031c 	.word	0x2000031c

080010f8 <lcdSendData>:
        	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!address=%02X#\r\n", address), 100);
        }
    }
}
void lcdSendData(char data)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f023 030f 	bic.w	r3, r3, #15
 8001108:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	011b      	lsls	r3, r3, #4
 800110e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	f043 030d 	orr.w	r3, r3, #13
 8001116:	b2db      	uxtb	r3, r3
 8001118:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	f043 0309 	orr.w	r3, r3, #9
 8001120:	b2db      	uxtb	r3, r3
 8001122:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001124:	7bbb      	ldrb	r3, [r7, #14]
 8001126:	f043 030d 	orr.w	r3, r3, #13
 800112a:	b2db      	uxtb	r3, r3
 800112c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	f043 0309 	orr.w	r3, r3, #9
 8001134:	b2db      	uxtb	r3, r3
 8001136:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, data_t, 4, 1000);
 8001138:	f107 0208 	add.w	r2, r7, #8
 800113c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2304      	movs	r3, #4
 8001144:	2142      	movs	r1, #66	; 0x42
 8001146:	4803      	ldr	r0, [pc, #12]	; (8001154 <lcdSendData+0x5c>)
 8001148:	f003 fd52 	bl	8004bf0 <HAL_I2C_Master_Transmit>
}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000031c 	.word	0x2000031c

08001158 <lcdSetCursor>:
	lcdSendCmd(LCD_CLEARDISPLAY);
	HAL_Delay(2);
}

void lcdSetCursor(int row, int col)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
    switch (row)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <lcdSetCursor+0x18>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d005      	beq.n	800117a <lcdSetCursor+0x22>
 800116e:	e009      	b.n	8001184 <lcdSetCursor+0x2c>
    {
        case 0:
            col |= 0x80;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001176:	603b      	str	r3, [r7, #0]
            break;
 8001178:	e004      	b.n	8001184 <lcdSetCursor+0x2c>
        case 1:
            col |= 0xC0;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001180:	603b      	str	r3, [r7, #0]
            break;
 8001182:	bf00      	nop
    }

    lcdSendCmd (col);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff85 	bl	8001098 <lcdSendCmd>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <lcdInit>:
	displayControl |= LCD_BLINKON;
	lcdSendCmd(LCD_DISPLAYCONTROL | displayControl);
}

void lcdInit (void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800119a:	2032      	movs	r0, #50	; 0x32
 800119c:	f002 fa26 	bl	80035ec <HAL_Delay>
	lcdSendCmd (0x30);
 80011a0:	2030      	movs	r0, #48	; 0x30
 80011a2:	f7ff ff79 	bl	8001098 <lcdSendCmd>
	HAL_Delay(5);  // wait for >4.1ms
 80011a6:	2005      	movs	r0, #5
 80011a8:	f002 fa20 	bl	80035ec <HAL_Delay>
	lcdSendCmd (0x30);
 80011ac:	2030      	movs	r0, #48	; 0x30
 80011ae:	f7ff ff73 	bl	8001098 <lcdSendCmd>
	HAL_Delay(1);  // wait for >100us
 80011b2:	2001      	movs	r0, #1
 80011b4:	f002 fa1a 	bl	80035ec <HAL_Delay>
	lcdSendCmd (0x30);
 80011b8:	2030      	movs	r0, #48	; 0x30
 80011ba:	f7ff ff6d 	bl	8001098 <lcdSendCmd>
	HAL_Delay(10);
 80011be:	200a      	movs	r0, #10
 80011c0:	f002 fa14 	bl	80035ec <HAL_Delay>
	lcdSendCmd (0x20);  // 4bit mode
 80011c4:	2020      	movs	r0, #32
 80011c6:	f7ff ff67 	bl	8001098 <lcdSendCmd>
	HAL_Delay(10);
 80011ca:	200a      	movs	r0, #10
 80011cc:	f002 fa0e 	bl	80035ec <HAL_Delay>

  // dislay initialisation
	lcdSendCmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80011d0:	2028      	movs	r0, #40	; 0x28
 80011d2:	f7ff ff61 	bl	8001098 <lcdSendCmd>
	HAL_Delay(1);
 80011d6:	2001      	movs	r0, #1
 80011d8:	f002 fa08 	bl	80035ec <HAL_Delay>
	lcdSendCmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80011dc:	2008      	movs	r0, #8
 80011de:	f7ff ff5b 	bl	8001098 <lcdSendCmd>
	HAL_Delay(1);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f002 fa02 	bl	80035ec <HAL_Delay>
	lcdSendCmd (0x01);  // clear display
 80011e8:	2001      	movs	r0, #1
 80011ea:	f7ff ff55 	bl	8001098 <lcdSendCmd>
	HAL_Delay(1);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f002 f9fc 	bl	80035ec <HAL_Delay>
	lcdSendCmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80011f4:	2006      	movs	r0, #6
 80011f6:	f7ff ff4f 	bl	8001098 <lcdSendCmd>
	HAL_Delay(1);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f002 f9f6 	bl	80035ec <HAL_Delay>
	lcdSendCmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001200:	200c      	movs	r0, #12
 8001202:	f7ff ff49 	bl	8001098 <lcdSendCmd>
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}

0800120a <lcdSendString>:

void lcdSendString (char *str)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
	while (*str) lcdSendData (*str++);
 8001212:	e006      	b.n	8001222 <lcdSendString+0x18>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff6b 	bl	80010f8 <lcdSendData>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f4      	bne.n	8001214 <lcdSendString+0xa>
}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <lcdSendNumber>:

void lcdSendNumber(float number)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	char buffer[8];
	sprintf(buffer,"%f",number);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff f8f3 	bl	8000428 <__aeabi_f2d>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	f107 0008 	add.w	r0, r7, #8
 800124a:	4906      	ldr	r1, [pc, #24]	; (8001264 <lcdSendNumber+0x30>)
 800124c:	f009 fd84 	bl	800ad58 <siprintf>
	lcdSendString(buffer);
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ffd8 	bl	800120a <lcdSendString>
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	0800d2dc 	.word	0x0800d2dc

08001268 <getKeyProcess>:
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress3s[N0_OF_BUTTONS];
static int buttonState[N0_OF_BUTTONS] = {BUTTON_IS_RELEASED, BUTTON_IS_RELEASED, BUTTON_IS_RELEASED};
static int button_flag[N0_OF_BUTTONS];
void getKeyProcess(int index){// turn on button_flag
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db07      	blt.n	8001286 <getKeyProcess+0x1e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b02      	cmp	r3, #2
 800127a:	dc04      	bgt.n	8001286 <getKeyProcess+0x1e>
		button_flag[index] = 1;
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <getKeyProcess+0x28>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2101      	movs	r1, #1
 8001282:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	20000290 	.word	0x20000290

08001294 <get3sFlag>:
// this function turn on flagForButtonPress3s when button is pressed more than 3s
void get3sFlag(int index){
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	db07      	blt.n	80012b2 <get3sFlag+0x1e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	dc04      	bgt.n	80012b2 <get3sFlag+0x1e>
			flagForButtonPress3s[index] = 1;
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <get3sFlag+0x28>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
		}
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	20000280 	.word	0x20000280

080012c0 <get1sFlag>:
void clear3sFlag(int index){
	if(index >= 0 && index < N0_OF_BUTTONS){
			flagForButtonPress3s[index] = 0;
		}
}
void get1sFlag(int index){
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db07      	blt.n	80012de <get1sFlag+0x1e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	dc04      	bgt.n	80012de <get1sFlag+0x1e>
				flag1s[index] = 1;
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <get1sFlag+0x28>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
			}
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	20000284 	.word	0x20000284

080012ec <fsm_input_processing>:
void fsm_input_processing(GPIO_PinState buttonBuffer[], int index){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
	switch(buttonState[index]){
 80012f6:	4a55      	ldr	r2, [pc, #340]	; (800144c <fsm_input_processing+0x160>)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d04f      	beq.n	80013a2 <fsm_input_processing+0xb6>
 8001302:	2b02      	cmp	r3, #2
 8001304:	f300 8096 	bgt.w	8001434 <fsm_input_processing+0x148>
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <fsm_input_processing+0x26>
 800130c:	2b01      	cmp	r3, #1
 800130e:	d039      	beq.n	8001384 <fsm_input_processing+0x98>
			flag1s[index] = 0;
			button_flag[index] = 0;
		}
		break;
	default:
		break;
 8001310:	e090      	b.n	8001434 <fsm_input_processing+0x148>
		if(counterForButtonPress3s[index] < DURATION_FOR_AUTO_INCREASING){
 8001312:	4a4f      	ldr	r2, [pc, #316]	; (8001450 <fsm_input_processing+0x164>)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800131a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800131e:	d220      	bcs.n	8001362 <fsm_input_processing+0x76>
			counterForButtonPress3s[index]++;
 8001320:	4a4b      	ldr	r2, [pc, #300]	; (8001450 <fsm_input_processing+0x164>)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001328:	3301      	adds	r3, #1
 800132a:	b299      	uxth	r1, r3
 800132c:	4a48      	ldr	r2, [pc, #288]	; (8001450 <fsm_input_processing+0x164>)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(counterForButtonPress3s[index] == DURATION_FOR_AUTO_INCREASING){
 8001334:	4a46      	ldr	r2, [pc, #280]	; (8001450 <fsm_input_processing+0x164>)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800133c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001340:	d10f      	bne.n	8001362 <fsm_input_processing+0x76>
				buttonState[index] = BUTTON_PRESSED_MORE_THAN_3s;
 8001342:	4a42      	ldr	r2, [pc, #264]	; (800144c <fsm_input_processing+0x160>)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	2102      	movs	r1, #2
 8001348:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				counterForButtonPress3s[index] = 0;
 800134c:	4a40      	ldr	r2, [pc, #256]	; (8001450 <fsm_input_processing+0x164>)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	2100      	movs	r1, #0
 8001352:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				getKeyProcess(index);
 8001356:	6838      	ldr	r0, [r7, #0]
 8001358:	f7ff ff86 	bl	8001268 <getKeyProcess>
				get3sFlag(index);
 800135c:	6838      	ldr	r0, [r7, #0]
 800135e:	f7ff ff99 	bl	8001294 <get3sFlag>
		if(buttonBuffer[index] == BUTTON_RELEASED){
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d164      	bne.n	8001438 <fsm_input_processing+0x14c>
			buttonState[index] = BUTTON_IS_RELEASED;
 800136e:	4a37      	ldr	r2, [pc, #220]	; (800144c <fsm_input_processing+0x160>)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	2101      	movs	r1, #1
 8001374:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress3s[index] = 0;
 8001378:	4a35      	ldr	r2, [pc, #212]	; (8001450 <fsm_input_processing+0x164>)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	2100      	movs	r1, #0
 800137e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		break;
 8001382:	e059      	b.n	8001438 <fsm_input_processing+0x14c>
		if(buttonBuffer[index] == BUTTON_PRESSED){
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d155      	bne.n	800143c <fsm_input_processing+0x150>
			buttonState[index] = BUTTON_IS_PRESSED;
 8001390:	4a2e      	ldr	r2, [pc, #184]	; (800144c <fsm_input_processing+0x160>)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	2100      	movs	r1, #0
 8001396:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			getKeyProcess(index);
 800139a:	6838      	ldr	r0, [r7, #0]
 800139c:	f7ff ff64 	bl	8001268 <getKeyProcess>
		break;
 80013a0:	e04c      	b.n	800143c <fsm_input_processing+0x150>
		if(counterForButtonPress3s[index] < DURATION_FOR_MORE_THAN_3s ){
 80013a2:	4a2b      	ldr	r2, [pc, #172]	; (8001450 <fsm_input_processing+0x164>)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013aa:	2b63      	cmp	r3, #99	; 0x63
 80013ac:	d822      	bhi.n	80013f4 <fsm_input_processing+0x108>
					counterForButtonPress3s[index]++;
 80013ae:	4a28      	ldr	r2, [pc, #160]	; (8001450 <fsm_input_processing+0x164>)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013b6:	3301      	adds	r3, #1
 80013b8:	b299      	uxth	r1, r3
 80013ba:	4a25      	ldr	r2, [pc, #148]	; (8001450 <fsm_input_processing+0x164>)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(counterForButtonPress3s[index] == DURATION_FOR_MORE_THAN_3s){
 80013c2:	4a23      	ldr	r2, [pc, #140]	; (8001450 <fsm_input_processing+0x164>)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ca:	2b64      	cmp	r3, #100	; 0x64
 80013cc:	d112      	bne.n	80013f4 <fsm_input_processing+0x108>
						buttonState[index] = BUTTON_PRESSED_MORE_THAN_3s;
 80013ce:	4a1f      	ldr	r2, [pc, #124]	; (800144c <fsm_input_processing+0x160>)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	2102      	movs	r1, #2
 80013d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						counterForButtonPress3s[index] = 0;
 80013d8:	4a1d      	ldr	r2, [pc, #116]	; (8001450 <fsm_input_processing+0x164>)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	2100      	movs	r1, #0
 80013de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						get1sFlag(index);
 80013e2:	6838      	ldr	r0, [r7, #0]
 80013e4:	f7ff ff6c 	bl	80012c0 <get1sFlag>
						getKeyProcess(index);
 80013e8:	6838      	ldr	r0, [r7, #0]
 80013ea:	f7ff ff3d 	bl	8001268 <getKeyProcess>
						get3sFlag(index);
 80013ee:	6838      	ldr	r0, [r7, #0]
 80013f0:	f7ff ff50 	bl	8001294 <get3sFlag>
		if(buttonBuffer[index] == BUTTON_RELEASED){
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d11f      	bne.n	8001440 <fsm_input_processing+0x154>
			buttonState[index] = BUTTON_IS_RELEASED;
 8001400:	4a12      	ldr	r2, [pc, #72]	; (800144c <fsm_input_processing+0x160>)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	2101      	movs	r1, #1
 8001406:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress3s[index] = 0;
 800140a:	4a11      	ldr	r2, [pc, #68]	; (8001450 <fsm_input_processing+0x164>)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	2100      	movs	r1, #0
 8001410:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress3s[index] = 0;
 8001414:	4a0f      	ldr	r2, [pc, #60]	; (8001454 <fsm_input_processing+0x168>)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	4413      	add	r3, r2
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
			flag1s[index] = 0;
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <fsm_input_processing+0x16c>)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	4413      	add	r3, r2
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
			button_flag[index] = 0;
 8001428:	4a0c      	ldr	r2, [pc, #48]	; (800145c <fsm_input_processing+0x170>)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	2100      	movs	r1, #0
 800142e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		break;
 8001432:	e005      	b.n	8001440 <fsm_input_processing+0x154>
		break;
 8001434:	bf00      	nop
 8001436:	e004      	b.n	8001442 <fsm_input_processing+0x156>
		break;
 8001438:	bf00      	nop
 800143a:	e002      	b.n	8001442 <fsm_input_processing+0x156>
		break;
 800143c:	bf00      	nop
 800143e:	e000      	b.n	8001442 <fsm_input_processing+0x156>
		break;
 8001440:	bf00      	nop
	}
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000004 	.word	0x20000004
 8001450:	20000288 	.word	0x20000288
 8001454:	20000280 	.word	0x20000280
 8001458:	20000284 	.word	0x20000284
 800145c:	20000290 	.word	0x20000290

08001460 <button_reading>:
void button_reading(void){
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i++){
 8001466:	2300      	movs	r3, #0
 8001468:	71fb      	strb	r3, [r7, #7]
 800146a:	e052      	b.n	8001512 <button_reading+0xb2>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 800146c:	79fa      	ldrb	r2, [r7, #7]
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	492c      	ldr	r1, [pc, #176]	; (8001524 <button_reading+0xc4>)
 8001472:	5c89      	ldrb	r1, [r1, r2]
 8001474:	4a2c      	ldr	r2, [pc, #176]	; (8001528 <button_reading+0xc8>)
 8001476:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8001478:	79fa      	ldrb	r2, [r7, #7]
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	492b      	ldr	r1, [pc, #172]	; (800152c <button_reading+0xcc>)
 800147e:	5c89      	ldrb	r1, [r1, r2]
 8001480:	4a28      	ldr	r2, [pc, #160]	; (8001524 <button_reading+0xc4>)
 8001482:	54d1      	strb	r1, [r2, r3]
		// Chosing Which button is pressed.
		switch(i){
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d01a      	beq.n	80014c0 <button_reading+0x60>
 800148a:	2b02      	cmp	r3, #2
 800148c:	dc22      	bgt.n	80014d4 <button_reading+0x74>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d002      	beq.n	8001498 <button_reading+0x38>
 8001492:	2b01      	cmp	r3, #1
 8001494:	d00a      	beq.n	80014ac <button_reading+0x4c>
			break;
		case 2://  read signal from button0
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
			break;
		default:
			break;
 8001496:	e01d      	b.n	80014d4 <button_reading+0x74>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button0_GPIO_Port, Button0_Pin);
 8001498:	79fc      	ldrb	r4, [r7, #7]
 800149a:	2101      	movs	r1, #1
 800149c:	4824      	ldr	r0, [pc, #144]	; (8001530 <button_reading+0xd0>)
 800149e:	f003 f9fd 	bl	800489c <HAL_GPIO_ReadPin>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b21      	ldr	r3, [pc, #132]	; (800152c <button_reading+0xcc>)
 80014a8:	551a      	strb	r2, [r3, r4]
			break;
 80014aa:	e014      	b.n	80014d6 <button_reading+0x76>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80014ac:	79fc      	ldrb	r4, [r7, #7]
 80014ae:	2102      	movs	r1, #2
 80014b0:	481f      	ldr	r0, [pc, #124]	; (8001530 <button_reading+0xd0>)
 80014b2:	f003 f9f3 	bl	800489c <HAL_GPIO_ReadPin>
 80014b6:	4603      	mov	r3, r0
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b1c      	ldr	r3, [pc, #112]	; (800152c <button_reading+0xcc>)
 80014bc:	551a      	strb	r2, [r3, r4]
			break;
 80014be:	e00a      	b.n	80014d6 <button_reading+0x76>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80014c0:	79fc      	ldrb	r4, [r7, #7]
 80014c2:	2104      	movs	r1, #4
 80014c4:	481a      	ldr	r0, [pc, #104]	; (8001530 <button_reading+0xd0>)
 80014c6:	f003 f9e9 	bl	800489c <HAL_GPIO_ReadPin>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b17      	ldr	r3, [pc, #92]	; (800152c <button_reading+0xcc>)
 80014d0:	551a      	strb	r2, [r3, r4]
			break;
 80014d2:	e000      	b.n	80014d6 <button_reading+0x76>
			break;
 80014d4:	bf00      	nop
		}
		if((debounceButtonBuffer3[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer2[i] == debounceButtonBuffer1[i])){
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	4a13      	ldr	r2, [pc, #76]	; (8001528 <button_reading+0xc8>)
 80014da:	5cd2      	ldrb	r2, [r2, r3]
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	4911      	ldr	r1, [pc, #68]	; (8001524 <button_reading+0xc4>)
 80014e0:	5ccb      	ldrb	r3, [r1, r3]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d112      	bne.n	800150c <button_reading+0xac>
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <button_reading+0xc4>)
 80014ea:	5cd2      	ldrb	r2, [r2, r3]
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	490f      	ldr	r1, [pc, #60]	; (800152c <button_reading+0xcc>)
 80014f0:	5ccb      	ldrb	r3, [r1, r3]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d10a      	bne.n	800150c <button_reading+0xac>
			buttonBuffer[i] = debounceButtonBuffer3[i];
 80014f6:	79fa      	ldrb	r2, [r7, #7]
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	490b      	ldr	r1, [pc, #44]	; (8001528 <button_reading+0xc8>)
 80014fc:	5c89      	ldrb	r1, [r1, r2]
 80014fe:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <button_reading+0xd4>)
 8001500:	54d1      	strb	r1, [r2, r3]
			fsm_input_processing(buttonBuffer,i);
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	4619      	mov	r1, r3
 8001506:	480b      	ldr	r0, [pc, #44]	; (8001534 <button_reading+0xd4>)
 8001508:	f7ff fef0 	bl	80012ec <fsm_input_processing>
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i++){
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	3301      	adds	r3, #1
 8001510:	71fb      	strb	r3, [r7, #7]
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d9a9      	bls.n	800146c <button_reading+0xc>
		}

	}
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bd90      	pop	{r4, r7, pc}
 8001522:	bf00      	nop
 8001524:	20000278 	.word	0x20000278
 8001528:	2000027c 	.word	0x2000027c
 800152c:	20000274 	.word	0x20000274
 8001530:	40010c00 	.word	0x40010c00
 8001534:	20000270 	.word	0x20000270

08001538 <pwmDMA>:
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 }

 void pwmDMA(void){
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
	 /* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <pwmDMA+0x38>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <pwmDMA+0x38>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6153      	str	r3, [r2, #20]
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <pwmDMA+0x38>)
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA1_Channel2_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	200c      	movs	r0, #12
 800155c:	f002 fd35 	bl	8003fca <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001560:	200c      	movs	r0, #12
 8001562:	f002 fd4e 	bl	8004002 <HAL_NVIC_EnableIRQ>

 }
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000

08001574 <pwmMode>:
void pwmMode(TIM_HandleTypeDef *htim, uint8_t indexTim, uint8_t indexChannel, uint32_t prescaler, uint32_t period, uint8_t dmaFlag){
 8001574:	b580      	push	{r7, lr}
 8001576:	b0a0      	sub	sp, #128	; 0x80
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	460b      	mov	r3, r1
 8001580:	72fb      	strb	r3, [r7, #11]
 8001582:	4613      	mov	r3, r2
 8001584:	72bb      	strb	r3, [r7, #10]
	if((indexTim < 1 || indexTim > 4) || (indexChannel < 1 || indexChannel > 4)){
 8001586:	7afb      	ldrb	r3, [r7, #11]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <pwmMode+0x2a>
 800158c:	7afb      	ldrb	r3, [r7, #11]
 800158e:	2b04      	cmp	r3, #4
 8001590:	d805      	bhi.n	800159e <pwmMode+0x2a>
 8001592:	7abb      	ldrb	r3, [r7, #10]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <pwmMode+0x2a>
 8001598:	7abb      	ldrb	r3, [r7, #10]
 800159a:	2b04      	cmp	r3, #4
 800159c:	d901      	bls.n	80015a2 <pwmMode+0x2e>
 	    Error_Handler();
 800159e:	f000 ffba 	bl	8002516 <Error_Handler>
	}
	indexTim -= 1;
 80015a2:	7afb      	ldrb	r3, [r7, #11]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	72fb      	strb	r3, [r7, #11]
	indexChannel -=1;
 80015a8:	7abb      	ldrb	r3, [r7, #10]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	72bb      	strb	r3, [r7, #10]

      TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
 	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015bc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 	  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]
 80015d6:	615a      	str	r2, [r3, #20]
 80015d8:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015de:	2220      	movs	r2, #32
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f008 ff50 	bl	800a488 <memset>
    	  	  if(dmaFlag == 0){
 80015e8:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d14b      	bne.n	8001688 <pwmMode+0x114>
    	  		 htim->Instance = arrayTim[indexTim];
 80015f0:	7afb      	ldrb	r3, [r7, #11]
 80015f2:	4aa2      	ldr	r2, [pc, #648]	; (800187c <pwmMode+0x308>)
 80015f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	601a      	str	r2, [r3, #0]
    	  		    	  	  htim->Init.Prescaler = prescaler;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	605a      	str	r2, [r3, #4]
    	  		    	  	  htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
    	  		    	  	  htim->Init.Period = period;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800160e:	60da      	str	r2, [r3, #12]
    	  		    	  	  htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
    	  		    	  	  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
    	  		    	  	  if (HAL_TIM_Base_Init(htim) != HAL_OK)
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f006 fcb1 	bl	8007f84 <HAL_TIM_Base_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <pwmMode+0xb8>
    	  		    	  	  {
    	  		    	  	    Error_Handler();
 8001628:	f000 ff75 	bl	8002516 <Error_Handler>
    	  		    	  	  }
    	  		    	  	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001630:	66bb      	str	r3, [r7, #104]	; 0x68
    	  		    	  	  if (HAL_TIM_ConfigClockSource(htim, &sClockSourceConfig) != HAL_OK)
 8001632:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001636:	4619      	mov	r1, r3
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f007 fb61 	bl	8008d00 <HAL_TIM_ConfigClockSource>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <pwmMode+0xd4>
    	  		    	  	  {
    	  		    	  	    Error_Handler();
 8001644:	f000 ff67 	bl	8002516 <Error_Handler>
    	  		    	  	  }
    	  		    	  	  if (HAL_TIM_PWM_Init(htim) != HAL_OK)
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f006 fd3d 	bl	80080c8 <HAL_TIM_PWM_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <pwmMode+0xe4>
    	  		    	  	  {
    	  		    	  	    Error_Handler();
 8001654:	f000 ff5f 	bl	8002516 <Error_Handler>
    	  		    	  	  }
    	  		    	  	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001658:	2300      	movs	r3, #0
 800165a:	663b      	str	r3, [r7, #96]	; 0x60
    	  		    	  	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	667b      	str	r3, [r7, #100]	; 0x64
    	  		    	  	  if (HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig) != HAL_OK)
 8001660:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001664:	4619      	mov	r1, r3
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f007 ffaa 	bl	80095c0 <HAL_TIMEx_MasterConfigSynchronization>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <pwmMode+0x102>
    	  		    	  	  {
    	  		    	  	    Error_Handler();
 8001672:	f000 ff50 	bl	8002516 <Error_Handler>
    	  		    	  	  }
    	  		    	  	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001676:	2360      	movs	r3, #96	; 0x60
 8001678:	647b      	str	r3, [r7, #68]	; 0x44
    	  		    	  	  sConfigOC.Pulse = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	64bb      	str	r3, [r7, #72]	; 0x48
    	  		    	  	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167e:	2300      	movs	r3, #0
 8001680:	64fb      	str	r3, [r7, #76]	; 0x4c
    	  		    	  	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	657b      	str	r3, [r7, #84]	; 0x54
 8001686:	e077      	b.n	8001778 <pwmMode+0x204>
    	  	  }
    	  	  else{
    	  		  pwmDMA();
 8001688:	f7ff ff56 	bl	8001538 <pwmDMA>
    	  		  htim->Instance = TIM1;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4a7c      	ldr	r2, [pc, #496]	; (8001880 <pwmMode+0x30c>)
 8001690:	601a      	str	r2, [r3, #0]
    	  		  htim->Init.Prescaler = 0;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2200      	movs	r2, #0
 8001696:	605a      	str	r2, [r3, #4]
    	  		  htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
    	  		  htim->Init.Period = 89;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2259      	movs	r2, #89	; 0x59
 80016a2:	60da      	str	r2, [r3, #12]
    	  		  htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
    	  		  htim->Init.RepetitionCounter = 0;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	615a      	str	r2, [r3, #20]
    	  		  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	619a      	str	r2, [r3, #24]
    	  		  if (HAL_TIM_Base_Init(htim) != HAL_OK)
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f006 fc64 	bl	8007f84 <HAL_TIM_Base_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <pwmMode+0x152>
    	  		  {
    	  		    Error_Handler();
 80016c2:	f000 ff28 	bl	8002516 <Error_Handler>
    	  		  }
    	  		  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ca:	66bb      	str	r3, [r7, #104]	; 0x68
    	  		  if (HAL_TIM_ConfigClockSource(htim, &sClockSourceConfig) != HAL_OK)
 80016cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016d0:	4619      	mov	r1, r3
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f007 fb14 	bl	8008d00 <HAL_TIM_ConfigClockSource>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <pwmMode+0x16e>
    	  		  {
    	  		    Error_Handler();
 80016de:	f000 ff1a 	bl	8002516 <Error_Handler>
    	  		  }
    	  		  if (HAL_TIM_PWM_Init(htim) != HAL_OK)
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f006 fcf0 	bl	80080c8 <HAL_TIM_PWM_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <pwmMode+0x17e>
    	  		  {
    	  		    Error_Handler();
 80016ee:	f000 ff12 	bl	8002516 <Error_Handler>
    	  		  }
    	  		  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	663b      	str	r3, [r7, #96]	; 0x60
    	  		  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	667b      	str	r3, [r7, #100]	; 0x64
    	  		  if (HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig) != HAL_OK)
 80016fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80016fe:	4619      	mov	r1, r3
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f007 ff5d 	bl	80095c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <pwmMode+0x19c>
    	  		  {
    	  		    Error_Handler();
 800170c:	f000 ff03 	bl	8002516 <Error_Handler>
    	  		  }
    	  		  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001710:	2360      	movs	r3, #96	; 0x60
 8001712:	647b      	str	r3, [r7, #68]	; 0x44
    	  		  sConfigOC.Pulse = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	64bb      	str	r3, [r7, #72]	; 0x48
    	  		  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001718:	2300      	movs	r3, #0
 800171a:	64fb      	str	r3, [r7, #76]	; 0x4c
    	  		  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800171c:	2300      	movs	r3, #0
 800171e:	653b      	str	r3, [r7, #80]	; 0x50
    	  		  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	657b      	str	r3, [r7, #84]	; 0x54
    	  		  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001724:	2300      	movs	r3, #0
 8001726:	65bb      	str	r3, [r7, #88]	; 0x58
    	  		  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001728:	2300      	movs	r3, #0
 800172a:	65fb      	str	r3, [r7, #92]	; 0x5c
    	  		  if (HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800172c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001730:	2200      	movs	r2, #0
 8001732:	4619      	mov	r1, r3
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f007 fa21 	bl	8008b7c <HAL_TIM_PWM_ConfigChannel>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <pwmMode+0x1d0>
    	  		  {
    	  		    Error_Handler();
 8001740:	f000 fee9 	bl	8002516 <Error_Handler>
    	  		  }
    	  		  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
    	  		  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
    	  		  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800174c:	2300      	movs	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
    	  		  sBreakDeadTimeConfig.DeadTime = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	633b      	str	r3, [r7, #48]	; 0x30
    	  		  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	637b      	str	r3, [r7, #52]	; 0x34
    	  		  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800175c:	63bb      	str	r3, [r7, #56]	; 0x38
    	  		  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	643b      	str	r3, [r7, #64]	; 0x40
    	  		  if (HAL_TIMEx_ConfigBreakDeadTime(htim, &sBreakDeadTimeConfig) != HAL_OK)
 8001762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001766:	4619      	mov	r1, r3
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f007 ff87 	bl	800967c <HAL_TIMEx_ConfigBreakDeadTime>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <pwmMode+0x204>
    	  		  {
    	  		    Error_Handler();
 8001774:	f000 fecf 	bl	8002516 <Error_Handler>
    	  		  }
    	  	  }
 	  //TIM1
 	  if(arrayTim[indexTim] == TIM1){
 8001778:	7afb      	ldrb	r3, [r7, #11]
 800177a:	4a40      	ldr	r2, [pc, #256]	; (800187c <pwmMode+0x308>)
 800177c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001780:	4a3f      	ldr	r2, [pc, #252]	; (8001880 <pwmMode+0x30c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	f040 80d2 	bne.w	800192c <pwmMode+0x3b8>
 		  if (HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, arrayChannel[indexChannel]) != HAL_OK)
 8001788:	7abb      	ldrb	r3, [r7, #10]
 800178a:	4a3e      	ldr	r2, [pc, #248]	; (8001884 <pwmMode+0x310>)
 800178c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001790:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001794:	4619      	mov	r1, r3
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f007 f9f0 	bl	8008b7c <HAL_TIM_PWM_ConfigChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <pwmMode+0x232>
 		 	  {
 		 	    Error_Handler();
 80017a2:	f000 feb8 	bl	8002516 <Error_Handler>
 		 	  }
 	 	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	4b38      	ldr	r3, [pc, #224]	; (8001888 <pwmMode+0x314>)
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	4a37      	ldr	r2, [pc, #220]	; (8001888 <pwmMode+0x314>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	6193      	str	r3, [r2, #24]
 80017b2:	4b35      	ldr	r3, [pc, #212]	; (8001888 <pwmMode+0x314>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	623b      	str	r3, [r7, #32]
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 	 	  switch (indexChannel) {
 80017be:	7abb      	ldrb	r3, [r7, #10]
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	f200 80a4 	bhi.w	800190e <pwmMode+0x39a>
 80017c6:	a201      	add	r2, pc, #4	; (adr r2, 80017cc <pwmMode+0x258>)
 80017c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017cc:	080017dd 	.word	0x080017dd
 80017d0:	08001823 	.word	0x08001823
 80017d4:	08001869 	.word	0x08001869
 80017d8:	080018c9 	.word	0x080018c9
			case 0:
				if(gpioPWMFlag1 == 0){
 80017dc:	4b2b      	ldr	r3, [pc, #172]	; (800188c <pwmMode+0x318>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d104      	bne.n	80017ee <pwmMode+0x27a>
					GPIO_PWM_InitStruct[0].Pin = GPIO_PIN_8;
 80017e4:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <pwmMode+0x31c>)
 80017e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e005      	b.n	80017fa <pwmMode+0x286>
				}
				else{
					GPIO_PWM_InitStruct[0].Pin |= GPIO_PIN_8;
 80017ee:	4b28      	ldr	r3, [pc, #160]	; (8001890 <pwmMode+0x31c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f6:	4a26      	ldr	r2, [pc, #152]	; (8001890 <pwmMode+0x31c>)
 80017f8:	6013      	str	r3, [r2, #0]
				}
				   gpioPWMFlag1++;
 80017fa:	4b24      	ldr	r3, [pc, #144]	; (800188c <pwmMode+0x318>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	3301      	adds	r3, #1
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <pwmMode+0x318>)
 8001804:	701a      	strb	r2, [r3, #0]
				   if(dmaFlag == 0){
 8001806:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800180a:	2b00      	cmp	r3, #0
 800180c:	d104      	bne.n	8001818 <pwmMode+0x2a4>
					   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 800180e:	2100      	movs	r1, #0
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f006 fcb1 	bl	8008178 <HAL_TIM_PWM_Start>
				   }
				   else{
					   HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_1);
				   }
				break;
 8001816:	e07b      	b.n	8001910 <pwmMode+0x39c>
					   HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_1);
 8001818:	2100      	movs	r1, #0
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f006 fd4e 	bl	80082bc <HAL_TIM_PWM_Start_IT>
				break;
 8001820:	e076      	b.n	8001910 <pwmMode+0x39c>
			case 1:
				if(gpioPWMFlag1 == 0){
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <pwmMode+0x318>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d104      	bne.n	8001834 <pwmMode+0x2c0>
					GPIO_PWM_InitStruct[0].Pin = GPIO_PIN_9;
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <pwmMode+0x31c>)
 800182c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	e005      	b.n	8001840 <pwmMode+0x2cc>
				}
				else{
					GPIO_PWM_InitStruct[0].Pin |= GPIO_PIN_9;
 8001834:	4b16      	ldr	r3, [pc, #88]	; (8001890 <pwmMode+0x31c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800183c:	4a14      	ldr	r2, [pc, #80]	; (8001890 <pwmMode+0x31c>)
 800183e:	6013      	str	r3, [r2, #0]
				}
					gpioPWMFlag1++;
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <pwmMode+0x318>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	b2da      	uxtb	r2, r3
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <pwmMode+0x318>)
 800184a:	701a      	strb	r2, [r3, #0]
				   if(dmaFlag == 0){
 800184c:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001850:	2b00      	cmp	r3, #0
 8001852:	d104      	bne.n	800185e <pwmMode+0x2ea>
					   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 8001854:	2104      	movs	r1, #4
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f006 fc8e 	bl	8008178 <HAL_TIM_PWM_Start>
				   }
				   else{
					   HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_2);
				   }
				break;
 800185c:	e058      	b.n	8001910 <pwmMode+0x39c>
					   HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_2);
 800185e:	2104      	movs	r1, #4
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f006 fd2b 	bl	80082bc <HAL_TIM_PWM_Start_IT>
				break;
 8001866:	e053      	b.n	8001910 <pwmMode+0x39c>
			case 2:
				if(gpioPWMFlag1 == 0){
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <pwmMode+0x318>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d111      	bne.n	8001894 <pwmMode+0x320>
					GPIO_PWM_InitStruct[0].Pin = GPIO_PIN_10;
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <pwmMode+0x31c>)
 8001872:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	e012      	b.n	80018a0 <pwmMode+0x32c>
 800187a:	bf00      	nop
 800187c:	20000020 	.word	0x20000020
 8001880:	40012c00 	.word	0x40012c00
 8001884:	20000030 	.word	0x20000030
 8001888:	40021000 	.word	0x40021000
 800188c:	200002a0 	.word	0x200002a0
 8001890:	200002a8 	.word	0x200002a8
				}
				else{
					GPIO_PWM_InitStruct[0].Pin |= GPIO_PIN_10;
 8001894:	4b96      	ldr	r3, [pc, #600]	; (8001af0 <pwmMode+0x57c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800189c:	4a94      	ldr	r2, [pc, #592]	; (8001af0 <pwmMode+0x57c>)
 800189e:	6013      	str	r3, [r2, #0]
				}
					gpioPWMFlag1++;
 80018a0:	4b94      	ldr	r3, [pc, #592]	; (8001af4 <pwmMode+0x580>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b92      	ldr	r3, [pc, #584]	; (8001af4 <pwmMode+0x580>)
 80018aa:	701a      	strb	r2, [r3, #0]
				   if(dmaFlag == 0){
 80018ac:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d104      	bne.n	80018be <pwmMode+0x34a>
					   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 80018b4:	2108      	movs	r1, #8
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f006 fc5e 	bl	8008178 <HAL_TIM_PWM_Start>
				   }
				   else{
					   HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_3);
				   }
				break;
 80018bc:	e028      	b.n	8001910 <pwmMode+0x39c>
					   HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_3);
 80018be:	2108      	movs	r1, #8
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f006 fcfb 	bl	80082bc <HAL_TIM_PWM_Start_IT>
				break;
 80018c6:	e023      	b.n	8001910 <pwmMode+0x39c>
			case 3:
				if(gpioPWMFlag1 == 0){
 80018c8:	4b8a      	ldr	r3, [pc, #552]	; (8001af4 <pwmMode+0x580>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d104      	bne.n	80018da <pwmMode+0x366>
					GPIO_PWM_InitStruct[0].Pin = GPIO_PIN_11;
 80018d0:	4b87      	ldr	r3, [pc, #540]	; (8001af0 <pwmMode+0x57c>)
 80018d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	e005      	b.n	80018e6 <pwmMode+0x372>
				}
				else{
					GPIO_PWM_InitStruct[0].Pin |= GPIO_PIN_11;
 80018da:	4b85      	ldr	r3, [pc, #532]	; (8001af0 <pwmMode+0x57c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018e2:	4a83      	ldr	r2, [pc, #524]	; (8001af0 <pwmMode+0x57c>)
 80018e4:	6013      	str	r3, [r2, #0]
				}
					gpioPWMFlag1++;
 80018e6:	4b83      	ldr	r3, [pc, #524]	; (8001af4 <pwmMode+0x580>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	3301      	adds	r3, #1
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b81      	ldr	r3, [pc, #516]	; (8001af4 <pwmMode+0x580>)
 80018f0:	701a      	strb	r2, [r3, #0]
					   if(dmaFlag == 0){
 80018f2:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d104      	bne.n	8001904 <pwmMode+0x390>
						   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 80018fa:	210c      	movs	r1, #12
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f006 fc3b 	bl	8008178 <HAL_TIM_PWM_Start>
					   }
					   else{
						  HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_4);
					   }
				break;
 8001902:	e005      	b.n	8001910 <pwmMode+0x39c>
						  HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_4);
 8001904:	210c      	movs	r1, #12
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f006 fcd8 	bl	80082bc <HAL_TIM_PWM_Start_IT>
				break;
 800190c:	e000      	b.n	8001910 <pwmMode+0x39c>
			default:
				break;
 800190e:	bf00      	nop
		}
 	 	 	GPIO_PWM_InitStruct[0].Mode = GPIO_MODE_AF_PP;
 8001910:	4b77      	ldr	r3, [pc, #476]	; (8001af0 <pwmMode+0x57c>)
 8001912:	2202      	movs	r2, #2
 8001914:	605a      	str	r2, [r3, #4]
 	 	 	GPIO_PWM_InitStruct[0].Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	4b76      	ldr	r3, [pc, #472]	; (8001af0 <pwmMode+0x57c>)
 8001918:	2202      	movs	r2, #2
 800191a:	60da      	str	r2, [r3, #12]
 	 	 	HAL_GPIO_Init(GPIOA, &GPIO_PWM_InitStruct[0]);
 800191c:	4974      	ldr	r1, [pc, #464]	; (8001af0 <pwmMode+0x57c>)
 800191e:	4876      	ldr	r0, [pc, #472]	; (8001af8 <pwmMode+0x584>)
 8001920:	f002 fe38 	bl	8004594 <HAL_GPIO_Init>
 	  		HAL_TIM_Base_Start_IT(htim);
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f006 fb7d 	bl	8008024 <HAL_TIM_Base_Start_IT>
 	 	 	GPIO_PWM_InitStruct[3].Speed = GPIO_SPEED_FREQ_LOW;
 	 	 	HAL_GPIO_Init(GPIOB, &GPIO_PWM_InitStruct[3]);
 	  		HAL_TIM_Base_Start_IT(htim);
 	  		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "GPIO_PWM=%04X\r\n", GPIO_PWM_InitStruct[3].Pin), 1000);
 	  }
}
 800192a:	e286      	b.n	8001e3a <pwmMode+0x8c6>
 	  else if(arrayTim[indexTim] == TIM2){
 800192c:	7afb      	ldrb	r3, [r7, #11]
 800192e:	4a73      	ldr	r2, [pc, #460]	; (8001afc <pwmMode+0x588>)
 8001930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001938:	f040 80f0 	bne.w	8001b1c <pwmMode+0x5a8>
 		  if (HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, arrayChannel[indexChannel]) != HAL_OK)
 800193c:	7abb      	ldrb	r3, [r7, #10]
 800193e:	4a70      	ldr	r2, [pc, #448]	; (8001b00 <pwmMode+0x58c>)
 8001940:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001944:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001948:	4619      	mov	r1, r3
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f007 f916 	bl	8008b7c <HAL_TIM_PWM_ConfigChannel>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <pwmMode+0x3e6>
 		 	    Error_Handler();
 8001956:	f000 fdde 	bl	8002516 <Error_Handler>
 	 	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	4b6a      	ldr	r3, [pc, #424]	; (8001b04 <pwmMode+0x590>)
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	4a69      	ldr	r2, [pc, #420]	; (8001b04 <pwmMode+0x590>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	6193      	str	r3, [r2, #24]
 8001966:	4b67      	ldr	r3, [pc, #412]	; (8001b04 <pwmMode+0x590>)
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	61fb      	str	r3, [r7, #28]
 8001970:	69fb      	ldr	r3, [r7, #28]
 	 	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001972:	4b64      	ldr	r3, [pc, #400]	; (8001b04 <pwmMode+0x590>)
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	4a63      	ldr	r2, [pc, #396]	; (8001b04 <pwmMode+0x590>)
 8001978:	f043 0308 	orr.w	r3, r3, #8
 800197c:	6193      	str	r3, [r2, #24]
 800197e:	4b61      	ldr	r3, [pc, #388]	; (8001b04 <pwmMode+0x590>)
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	61bb      	str	r3, [r7, #24]
 8001988:	69bb      	ldr	r3, [r7, #24]
 		  switch (indexChannel) {
 800198a:	7abb      	ldrb	r3, [r7, #10]
 800198c:	2b03      	cmp	r3, #3
 800198e:	f200 8098 	bhi.w	8001ac2 <pwmMode+0x54e>
 8001992:	a201      	add	r2, pc, #4	; (adr r2, 8001998 <pwmMode+0x424>)
 8001994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001998:	080019a9 	.word	0x080019a9
 800199c:	080019f1 	.word	0x080019f1
 80019a0:	08001a37 	.word	0x08001a37
 80019a4:	08001a7f 	.word	0x08001a7f
				if(gpioPWMFlag2A == 0){
 80019a8:	4b57      	ldr	r3, [pc, #348]	; (8001b08 <pwmMode+0x594>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d104      	bne.n	80019ba <pwmMode+0x446>
					GPIO_PWM_InitStruct[0].Pin = GPIO_PIN_15;
 80019b0:	4b4f      	ldr	r3, [pc, #316]	; (8001af0 <pwmMode+0x57c>)
 80019b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	e005      	b.n	80019c6 <pwmMode+0x452>
					GPIO_PWM_InitStruct[0].Pin |= GPIO_PIN_15;
 80019ba:	4b4d      	ldr	r3, [pc, #308]	; (8001af0 <pwmMode+0x57c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019c2:	4a4b      	ldr	r2, [pc, #300]	; (8001af0 <pwmMode+0x57c>)
 80019c4:	6013      	str	r3, [r2, #0]
		 	 	GPIO_PWM_InitStruct[1].Mode = GPIO_MODE_AF_PP;
 80019c6:	4b4a      	ldr	r3, [pc, #296]	; (8001af0 <pwmMode+0x57c>)
 80019c8:	2202      	movs	r2, #2
 80019ca:	615a      	str	r2, [r3, #20]
		 	 	GPIO_PWM_InitStruct[1].Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	4b48      	ldr	r3, [pc, #288]	; (8001af0 <pwmMode+0x57c>)
 80019ce:	2202      	movs	r2, #2
 80019d0:	61da      	str	r2, [r3, #28]
		 	 	HAL_GPIO_Init(GPIOA, &GPIO_PWM_InitStruct[1]);
 80019d2:	494e      	ldr	r1, [pc, #312]	; (8001b0c <pwmMode+0x598>)
 80019d4:	4848      	ldr	r0, [pc, #288]	; (8001af8 <pwmMode+0x584>)
 80019d6:	f002 fddd 	bl	8004594 <HAL_GPIO_Init>
				gpioPWMFlag2A++;
 80019da:	4b4b      	ldr	r3, [pc, #300]	; (8001b08 <pwmMode+0x594>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	3301      	adds	r3, #1
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4b49      	ldr	r3, [pc, #292]	; (8001b08 <pwmMode+0x594>)
 80019e4:	701a      	strb	r2, [r3, #0]
				  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 80019e6:	2100      	movs	r1, #0
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f006 fbc5 	bl	8008178 <HAL_TIM_PWM_Start>
				break;
 80019ee:	e069      	b.n	8001ac4 <pwmMode+0x550>
				if(gpioPWMFlag2A == 0){
 80019f0:	4b45      	ldr	r3, [pc, #276]	; (8001b08 <pwmMode+0x594>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d103      	bne.n	8001a00 <pwmMode+0x48c>
					GPIO_PWM_InitStruct[0].Pin = GPIO_PIN_1;
 80019f8:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <pwmMode+0x57c>)
 80019fa:	2202      	movs	r2, #2
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	e005      	b.n	8001a0c <pwmMode+0x498>
					GPIO_PWM_InitStruct[0].Pin |= GPIO_PIN_1;
 8001a00:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <pwmMode+0x57c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	4a39      	ldr	r2, [pc, #228]	; (8001af0 <pwmMode+0x57c>)
 8001a0a:	6013      	str	r3, [r2, #0]
				gpioPWMFlag2A++;
 8001a0c:	4b3e      	ldr	r3, [pc, #248]	; (8001b08 <pwmMode+0x594>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	4b3c      	ldr	r3, [pc, #240]	; (8001b08 <pwmMode+0x594>)
 8001a16:	701a      	strb	r2, [r3, #0]
		 	 	GPIO_PWM_InitStruct[1].Mode = GPIO_MODE_AF_PP;
 8001a18:	4b35      	ldr	r3, [pc, #212]	; (8001af0 <pwmMode+0x57c>)
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	615a      	str	r2, [r3, #20]
		 	 	GPIO_PWM_InitStruct[1].Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	4b34      	ldr	r3, [pc, #208]	; (8001af0 <pwmMode+0x57c>)
 8001a20:	2202      	movs	r2, #2
 8001a22:	61da      	str	r2, [r3, #28]
		 	 	HAL_GPIO_Init(GPIOA, &GPIO_PWM_InitStruct[1]);
 8001a24:	4939      	ldr	r1, [pc, #228]	; (8001b0c <pwmMode+0x598>)
 8001a26:	4834      	ldr	r0, [pc, #208]	; (8001af8 <pwmMode+0x584>)
 8001a28:	f002 fdb4 	bl	8004594 <HAL_GPIO_Init>
				HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 8001a2c:	2104      	movs	r1, #4
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f006 fba2 	bl	8008178 <HAL_TIM_PWM_Start>
				break;
 8001a34:	e046      	b.n	8001ac4 <pwmMode+0x550>
				if(gpioPWMFlag2B == 0){
 8001a36:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <pwmMode+0x59c>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d104      	bne.n	8001a48 <pwmMode+0x4d4>
					GPIO_PWM_InitStruct[0].Pin = GPIO_PIN_10;
 8001a3e:	4b2c      	ldr	r3, [pc, #176]	; (8001af0 <pwmMode+0x57c>)
 8001a40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	e005      	b.n	8001a54 <pwmMode+0x4e0>
					GPIO_PWM_InitStruct[0].Pin |= GPIO_PIN_10;
 8001a48:	4b29      	ldr	r3, [pc, #164]	; (8001af0 <pwmMode+0x57c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a50:	4a27      	ldr	r2, [pc, #156]	; (8001af0 <pwmMode+0x57c>)
 8001a52:	6013      	str	r3, [r2, #0]
				gpioPWMFlag2B++;
 8001a54:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <pwmMode+0x59c>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	4b2c      	ldr	r3, [pc, #176]	; (8001b10 <pwmMode+0x59c>)
 8001a5e:	701a      	strb	r2, [r3, #0]
		 	 	GPIO_PWM_InitStruct[1].Mode = GPIO_MODE_AF_PP;
 8001a60:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <pwmMode+0x57c>)
 8001a62:	2202      	movs	r2, #2
 8001a64:	615a      	str	r2, [r3, #20]
		 	 	GPIO_PWM_InitStruct[1].Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	4b22      	ldr	r3, [pc, #136]	; (8001af0 <pwmMode+0x57c>)
 8001a68:	2202      	movs	r2, #2
 8001a6a:	61da      	str	r2, [r3, #28]
		 	 	HAL_GPIO_Init(GPIOB, &GPIO_PWM_InitStruct[1]);
 8001a6c:	4927      	ldr	r1, [pc, #156]	; (8001b0c <pwmMode+0x598>)
 8001a6e:	4829      	ldr	r0, [pc, #164]	; (8001b14 <pwmMode+0x5a0>)
 8001a70:	f002 fd90 	bl	8004594 <HAL_GPIO_Init>
				  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8001a74:	2108      	movs	r1, #8
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f006 fb7e 	bl	8008178 <HAL_TIM_PWM_Start>
				break;
 8001a7c:	e022      	b.n	8001ac4 <pwmMode+0x550>
				if(gpioPWMFlag2B == 0){
 8001a7e:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <pwmMode+0x59c>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d104      	bne.n	8001a90 <pwmMode+0x51c>
					GPIO_PWM_InitStruct[0].Pin = GPIO_PIN_11;
 8001a86:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <pwmMode+0x57c>)
 8001a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	e003      	b.n	8001a98 <pwmMode+0x524>
					GPIO_PWM_InitStruct[0].Pin = GPIO_PIN_11;
 8001a90:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <pwmMode+0x57c>)
 8001a92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a96:	601a      	str	r2, [r3, #0]
				  gpioPWMFlag2B++;
 8001a98:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <pwmMode+0x59c>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <pwmMode+0x59c>)
 8001aa2:	701a      	strb	r2, [r3, #0]
			 	 	GPIO_PWM_InitStruct[1].Mode = GPIO_MODE_AF_PP;
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <pwmMode+0x57c>)
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	615a      	str	r2, [r3, #20]
			 	 	GPIO_PWM_InitStruct[1].Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <pwmMode+0x57c>)
 8001aac:	2202      	movs	r2, #2
 8001aae:	61da      	str	r2, [r3, #28]
			 	 	HAL_GPIO_Init(GPIOB, &GPIO_PWM_InitStruct[1]);
 8001ab0:	4916      	ldr	r1, [pc, #88]	; (8001b0c <pwmMode+0x598>)
 8001ab2:	4818      	ldr	r0, [pc, #96]	; (8001b14 <pwmMode+0x5a0>)
 8001ab4:	f002 fd6e 	bl	8004594 <HAL_GPIO_Init>
				  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 8001ab8:	210c      	movs	r1, #12
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f006 fb5c 	bl	8008178 <HAL_TIM_PWM_Start>
				break;
 8001ac0:	e000      	b.n	8001ac4 <pwmMode+0x550>
				break;
 8001ac2:	bf00      	nop
 		    __HAL_AFIO_REMAP_TIM2_ENABLE();
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <pwmMode+0x5a4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	67bb      	str	r3, [r7, #120]	; 0x78
 8001aca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ad0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ad4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ad8:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001adc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ae0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ae2:	4a0d      	ldr	r2, [pc, #52]	; (8001b18 <pwmMode+0x5a4>)
 8001ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ae6:	6053      	str	r3, [r2, #4]
	  		HAL_TIM_Base_Start_IT(htim);
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f006 fa9b 	bl	8008024 <HAL_TIM_Base_Start_IT>
}
 8001aee:	e1a4      	b.n	8001e3a <pwmMode+0x8c6>
 8001af0:	200002a8 	.word	0x200002a8
 8001af4:	200002a0 	.word	0x200002a0
 8001af8:	40010800 	.word	0x40010800
 8001afc:	20000020 	.word	0x20000020
 8001b00:	20000030 	.word	0x20000030
 8001b04:	40021000 	.word	0x40021000
 8001b08:	200002a1 	.word	0x200002a1
 8001b0c:	200002b8 	.word	0x200002b8
 8001b10:	200002a2 	.word	0x200002a2
 8001b14:	40010c00 	.word	0x40010c00
 8001b18:	40010000 	.word	0x40010000
 	  else if(arrayTim[indexTim] == TIM3){
 8001b1c:	7afb      	ldrb	r3, [r7, #11]
 8001b1e:	4a9e      	ldr	r2, [pc, #632]	; (8001d98 <pwmMode+0x824>)
 8001b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b24:	4a9d      	ldr	r2, [pc, #628]	; (8001d9c <pwmMode+0x828>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	f040 80c0 	bne.w	8001cac <pwmMode+0x738>
 		  if (HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, arrayChannel[indexChannel]) != HAL_OK)
 8001b2c:	7abb      	ldrb	r3, [r7, #10]
 8001b2e:	4a9c      	ldr	r2, [pc, #624]	; (8001da0 <pwmMode+0x82c>)
 8001b30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b38:	4619      	mov	r1, r3
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f007 f81e 	bl	8008b7c <HAL_TIM_PWM_ConfigChannel>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <pwmMode+0x5d6>
 		 	    Error_Handler();
 8001b46:	f000 fce6 	bl	8002516 <Error_Handler>
 	 	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4a:	4b96      	ldr	r3, [pc, #600]	; (8001da4 <pwmMode+0x830>)
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	4a95      	ldr	r2, [pc, #596]	; (8001da4 <pwmMode+0x830>)
 8001b50:	f043 0310 	orr.w	r3, r3, #16
 8001b54:	6193      	str	r3, [r2, #24]
 8001b56:	4b93      	ldr	r3, [pc, #588]	; (8001da4 <pwmMode+0x830>)
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	697b      	ldr	r3, [r7, #20]
 	 	  switch (indexChannel) {
 8001b62:	7abb      	ldrb	r3, [r7, #10]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d871      	bhi.n	8001c4c <pwmMode+0x6d8>
 8001b68:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <pwmMode+0x5fc>)
 8001b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6e:	bf00      	nop
 8001b70:	08001b81 	.word	0x08001b81
 8001b74:	08001bb3 	.word	0x08001bb3
 8001b78:	08001be5 	.word	0x08001be5
 8001b7c:	08001c19 	.word	0x08001c19
				if(gpioPWMFlag3 == 0){
 8001b80:	4b89      	ldr	r3, [pc, #548]	; (8001da8 <pwmMode+0x834>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d103      	bne.n	8001b90 <pwmMode+0x61c>
					GPIO_PWM_InitStruct[2].Pin = GPIO_PIN_6;
 8001b88:	4b88      	ldr	r3, [pc, #544]	; (8001dac <pwmMode+0x838>)
 8001b8a:	2240      	movs	r2, #64	; 0x40
 8001b8c:	621a      	str	r2, [r3, #32]
 8001b8e:	e005      	b.n	8001b9c <pwmMode+0x628>
					GPIO_PWM_InitStruct[2].Pin |= GPIO_PIN_6;
 8001b90:	4b86      	ldr	r3, [pc, #536]	; (8001dac <pwmMode+0x838>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b98:	4a84      	ldr	r2, [pc, #528]	; (8001dac <pwmMode+0x838>)
 8001b9a:	6213      	str	r3, [r2, #32]
				gpioPWMFlag3++;
 8001b9c:	4b82      	ldr	r3, [pc, #520]	; (8001da8 <pwmMode+0x834>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	4b80      	ldr	r3, [pc, #512]	; (8001da8 <pwmMode+0x834>)
 8001ba6:	701a      	strb	r2, [r3, #0]
				   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8001ba8:	2100      	movs	r1, #0
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f006 fae4 	bl	8008178 <HAL_TIM_PWM_Start>
				break;
 8001bb0:	e04d      	b.n	8001c4e <pwmMode+0x6da>
				if(gpioPWMFlag3 == 0){
 8001bb2:	4b7d      	ldr	r3, [pc, #500]	; (8001da8 <pwmMode+0x834>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d103      	bne.n	8001bc2 <pwmMode+0x64e>
					GPIO_PWM_InitStruct[2].Pin = GPIO_PIN_7;
 8001bba:	4b7c      	ldr	r3, [pc, #496]	; (8001dac <pwmMode+0x838>)
 8001bbc:	2280      	movs	r2, #128	; 0x80
 8001bbe:	621a      	str	r2, [r3, #32]
 8001bc0:	e005      	b.n	8001bce <pwmMode+0x65a>
					GPIO_PWM_InitStruct[2].Pin |= GPIO_PIN_7;
 8001bc2:	4b7a      	ldr	r3, [pc, #488]	; (8001dac <pwmMode+0x838>)
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bca:	4a78      	ldr	r2, [pc, #480]	; (8001dac <pwmMode+0x838>)
 8001bcc:	6213      	str	r3, [r2, #32]
					gpioPWMFlag3++;
 8001bce:	4b76      	ldr	r3, [pc, #472]	; (8001da8 <pwmMode+0x834>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4b74      	ldr	r3, [pc, #464]	; (8001da8 <pwmMode+0x834>)
 8001bd8:	701a      	strb	r2, [r3, #0]
				  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 8001bda:	2104      	movs	r1, #4
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f006 facb 	bl	8008178 <HAL_TIM_PWM_Start>
				break;
 8001be2:	e034      	b.n	8001c4e <pwmMode+0x6da>
				if(gpioPWMFlag3 == 0){
 8001be4:	4b70      	ldr	r3, [pc, #448]	; (8001da8 <pwmMode+0x834>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d104      	bne.n	8001bf6 <pwmMode+0x682>
					GPIO_PWM_InitStruct[2].Pin = GPIO_PIN_8;
 8001bec:	4b6f      	ldr	r3, [pc, #444]	; (8001dac <pwmMode+0x838>)
 8001bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bf2:	621a      	str	r2, [r3, #32]
 8001bf4:	e005      	b.n	8001c02 <pwmMode+0x68e>
					GPIO_PWM_InitStruct[2].Pin |= GPIO_PIN_8;
 8001bf6:	4b6d      	ldr	r3, [pc, #436]	; (8001dac <pwmMode+0x838>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfe:	4a6b      	ldr	r2, [pc, #428]	; (8001dac <pwmMode+0x838>)
 8001c00:	6213      	str	r3, [r2, #32]
					gpioPWMFlag3++;
 8001c02:	4b69      	ldr	r3, [pc, #420]	; (8001da8 <pwmMode+0x834>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	3301      	adds	r3, #1
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b67      	ldr	r3, [pc, #412]	; (8001da8 <pwmMode+0x834>)
 8001c0c:	701a      	strb	r2, [r3, #0]
				  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8001c0e:	2108      	movs	r1, #8
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f006 fab1 	bl	8008178 <HAL_TIM_PWM_Start>
				break;
 8001c16:	e01a      	b.n	8001c4e <pwmMode+0x6da>
				if(gpioPWMFlag3 == 0){
 8001c18:	4b63      	ldr	r3, [pc, #396]	; (8001da8 <pwmMode+0x834>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d104      	bne.n	8001c2a <pwmMode+0x6b6>
					GPIO_PWM_InitStruct[2].Pin = GPIO_PIN_9;
 8001c20:	4b62      	ldr	r3, [pc, #392]	; (8001dac <pwmMode+0x838>)
 8001c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c26:	621a      	str	r2, [r3, #32]
 8001c28:	e005      	b.n	8001c36 <pwmMode+0x6c2>
					GPIO_PWM_InitStruct[2].Pin |= GPIO_PIN_9;
 8001c2a:	4b60      	ldr	r3, [pc, #384]	; (8001dac <pwmMode+0x838>)
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c32:	4a5e      	ldr	r2, [pc, #376]	; (8001dac <pwmMode+0x838>)
 8001c34:	6213      	str	r3, [r2, #32]
				  gpioPWMFlag3++;
 8001c36:	4b5c      	ldr	r3, [pc, #368]	; (8001da8 <pwmMode+0x834>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4b5a      	ldr	r3, [pc, #360]	; (8001da8 <pwmMode+0x834>)
 8001c40:	701a      	strb	r2, [r3, #0]
				  HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 8001c42:	210c      	movs	r1, #12
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f006 fa97 	bl	8008178 <HAL_TIM_PWM_Start>
				break;
 8001c4a:	e000      	b.n	8001c4e <pwmMode+0x6da>
				break;
 8001c4c:	bf00      	nop
 	 	GPIO_PWM_InitStruct[2].Mode = GPIO_MODE_AF_PP;
 8001c4e:	4b57      	ldr	r3, [pc, #348]	; (8001dac <pwmMode+0x838>)
 8001c50:	2202      	movs	r2, #2
 8001c52:	625a      	str	r2, [r3, #36]	; 0x24
 	 	GPIO_PWM_InitStruct[2].Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	4b55      	ldr	r3, [pc, #340]	; (8001dac <pwmMode+0x838>)
 8001c56:	2202      	movs	r2, #2
 8001c58:	62da      	str	r2, [r3, #44]	; 0x2c
 	 	HAL_GPIO_Init(GPIOC, &GPIO_PWM_InitStruct[2]);
 8001c5a:	4955      	ldr	r1, [pc, #340]	; (8001db0 <pwmMode+0x83c>)
 8001c5c:	4855      	ldr	r0, [pc, #340]	; (8001db4 <pwmMode+0x840>)
 8001c5e:	f002 fc99 	bl	8004594 <HAL_GPIO_Init>
 	 	__HAL_AFIO_REMAP_TIM3_ENABLE();
 8001c62:	4b55      	ldr	r3, [pc, #340]	; (8001db8 <pwmMode+0x844>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c6a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001c6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c72:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c7a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001c7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c80:	4a4d      	ldr	r2, [pc, #308]	; (8001db8 <pwmMode+0x844>)
 8001c82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c84:	6053      	str	r3, [r2, #4]
  		  HAL_TIM_Base_Start_IT(htim);
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f006 f9cc 	bl	8008024 <HAL_TIM_Base_Start_IT>
  		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "GPIO_PWM=%04X\r\n", GPIO_PWM_InitStruct[2].Pin), 1000);
 8001c8c:	4b47      	ldr	r3, [pc, #284]	; (8001dac <pwmMode+0x838>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	461a      	mov	r2, r3
 8001c92:	494a      	ldr	r1, [pc, #296]	; (8001dbc <pwmMode+0x848>)
 8001c94:	484a      	ldr	r0, [pc, #296]	; (8001dc0 <pwmMode+0x84c>)
 8001c96:	f009 f85f 	bl	800ad58 <siprintf>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca2:	4947      	ldr	r1, [pc, #284]	; (8001dc0 <pwmMode+0x84c>)
 8001ca4:	4847      	ldr	r0, [pc, #284]	; (8001dc4 <pwmMode+0x850>)
 8001ca6:	f007 fd9c 	bl	80097e2 <HAL_UART_Transmit>
}
 8001caa:	e0c6      	b.n	8001e3a <pwmMode+0x8c6>
 		  if (HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, arrayChannel[indexChannel]) != HAL_OK)
 8001cac:	7abb      	ldrb	r3, [r7, #10]
 8001cae:	4a3c      	ldr	r2, [pc, #240]	; (8001da0 <pwmMode+0x82c>)
 8001cb0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cb4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cb8:	4619      	mov	r1, r3
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f006 ff5e 	bl	8008b7c <HAL_TIM_PWM_ConfigChannel>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <pwmMode+0x756>
 		 	    Error_Handler();
 8001cc6:	f000 fc26 	bl	8002516 <Error_Handler>
 	 	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cca:	4b36      	ldr	r3, [pc, #216]	; (8001da4 <pwmMode+0x830>)
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	4a35      	ldr	r2, [pc, #212]	; (8001da4 <pwmMode+0x830>)
 8001cd0:	f043 0308 	orr.w	r3, r3, #8
 8001cd4:	6193      	str	r3, [r2, #24]
 8001cd6:	4b33      	ldr	r3, [pc, #204]	; (8001da4 <pwmMode+0x830>)
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 	 	  switch (indexChannel) {
 8001ce2:	7abb      	ldrb	r3, [r7, #10]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	f200 808b 	bhi.w	8001e00 <pwmMode+0x88c>
 8001cea:	a201      	add	r2, pc, #4	; (adr r2, 8001cf0 <pwmMode+0x77c>)
 8001cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf0:	08001d01 	.word	0x08001d01
 8001cf4:	08001d33 	.word	0x08001d33
 8001cf8:	08001d65 	.word	0x08001d65
 8001cfc:	08001dcd 	.word	0x08001dcd
				if(gpioPWMFlag4 == 0){
 8001d00:	4b31      	ldr	r3, [pc, #196]	; (8001dc8 <pwmMode+0x854>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d103      	bne.n	8001d10 <pwmMode+0x79c>
					GPIO_PWM_InitStruct[3].Pin = GPIO_PIN_6;
 8001d08:	4b28      	ldr	r3, [pc, #160]	; (8001dac <pwmMode+0x838>)
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d0e:	e005      	b.n	8001d1c <pwmMode+0x7a8>
					GPIO_PWM_InitStruct[3].Pin |= GPIO_PIN_6;
 8001d10:	4b26      	ldr	r3, [pc, #152]	; (8001dac <pwmMode+0x838>)
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d18:	4a24      	ldr	r2, [pc, #144]	; (8001dac <pwmMode+0x838>)
 8001d1a:	6313      	str	r3, [r2, #48]	; 0x30
				   gpioPWMFlag4++;
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <pwmMode+0x854>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	3301      	adds	r3, #1
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <pwmMode+0x854>)
 8001d26:	701a      	strb	r2, [r3, #0]
				   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8001d28:	2100      	movs	r1, #0
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f006 fa24 	bl	8008178 <HAL_TIM_PWM_Start>
				break;
 8001d30:	e067      	b.n	8001e02 <pwmMode+0x88e>
				if(gpioPWMFlag4 == 0){
 8001d32:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <pwmMode+0x854>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d103      	bne.n	8001d42 <pwmMode+0x7ce>
					GPIO_PWM_InitStruct[3].Pin = GPIO_PIN_7;
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <pwmMode+0x838>)
 8001d3c:	2280      	movs	r2, #128	; 0x80
 8001d3e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d40:	e005      	b.n	8001d4e <pwmMode+0x7da>
					GPIO_PWM_InitStruct[3].Pin |= GPIO_PIN_7;
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <pwmMode+0x838>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d4a:	4a18      	ldr	r2, [pc, #96]	; (8001dac <pwmMode+0x838>)
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
				   gpioPWMFlag4++;
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <pwmMode+0x854>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	3301      	adds	r3, #1
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <pwmMode+0x854>)
 8001d58:	701a      	strb	r2, [r3, #0]
				   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 8001d5a:	2104      	movs	r1, #4
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f006 fa0b 	bl	8008178 <HAL_TIM_PWM_Start>
				break;
 8001d62:	e04e      	b.n	8001e02 <pwmMode+0x88e>
				if(gpioPWMFlag4 == 0){
 8001d64:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <pwmMode+0x854>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d104      	bne.n	8001d76 <pwmMode+0x802>
						GPIO_PWM_InitStruct[3].Pin = GPIO_PIN_8;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <pwmMode+0x838>)
 8001d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d72:	631a      	str	r2, [r3, #48]	; 0x30
 8001d74:	e005      	b.n	8001d82 <pwmMode+0x80e>
						GPIO_PWM_InitStruct[3].Pin |= GPIO_PIN_8;
 8001d76:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <pwmMode+0x838>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7e:	4a0b      	ldr	r2, [pc, #44]	; (8001dac <pwmMode+0x838>)
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
				   gpioPWMFlag4++;
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <pwmMode+0x854>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	3301      	adds	r3, #1
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <pwmMode+0x854>)
 8001d8c:	701a      	strb	r2, [r3, #0]
				   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8001d8e:	2108      	movs	r1, #8
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f006 f9f1 	bl	8008178 <HAL_TIM_PWM_Start>
				break;
 8001d96:	e034      	b.n	8001e02 <pwmMode+0x88e>
 8001d98:	20000020 	.word	0x20000020
 8001d9c:	40000400 	.word	0x40000400
 8001da0:	20000030 	.word	0x20000030
 8001da4:	40021000 	.word	0x40021000
 8001da8:	200002a3 	.word	0x200002a3
 8001dac:	200002a8 	.word	0x200002a8
 8001db0:	200002c8 	.word	0x200002c8
 8001db4:	40011000 	.word	0x40011000
 8001db8:	40010000 	.word	0x40010000
 8001dbc:	0800d2e0 	.word	0x0800d2e0
 8001dc0:	20000010 	.word	0x20000010
 8001dc4:	200004d4 	.word	0x200004d4
 8001dc8:	200002a4 	.word	0x200002a4
				if(gpioPWMFlag4 == 0){
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <pwmMode+0x8d0>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d104      	bne.n	8001dde <pwmMode+0x86a>
						GPIO_PWM_InitStruct[3].Pin = GPIO_PIN_9;
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <pwmMode+0x8d4>)
 8001dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dda:	631a      	str	r2, [r3, #48]	; 0x30
 8001ddc:	e005      	b.n	8001dea <pwmMode+0x876>
						GPIO_PWM_InitStruct[3].Pin |= GPIO_PIN_9;
 8001dde:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <pwmMode+0x8d4>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001de6:	4a18      	ldr	r2, [pc, #96]	; (8001e48 <pwmMode+0x8d4>)
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
				   gpioPWMFlag4++;
 8001dea:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <pwmMode+0x8d0>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	3301      	adds	r3, #1
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <pwmMode+0x8d0>)
 8001df4:	701a      	strb	r2, [r3, #0]
				   HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 8001df6:	210c      	movs	r1, #12
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f006 f9bd 	bl	8008178 <HAL_TIM_PWM_Start>
				break;
 8001dfe:	e000      	b.n	8001e02 <pwmMode+0x88e>
				break;
 8001e00:	bf00      	nop
 	 	 	GPIO_PWM_InitStruct[3].Mode = GPIO_MODE_AF_PP;
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <pwmMode+0x8d4>)
 8001e04:	2202      	movs	r2, #2
 8001e06:	635a      	str	r2, [r3, #52]	; 0x34
 	 	 	GPIO_PWM_InitStruct[3].Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <pwmMode+0x8d4>)
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	63da      	str	r2, [r3, #60]	; 0x3c
 	 	 	HAL_GPIO_Init(GPIOB, &GPIO_PWM_InitStruct[3]);
 8001e0e:	490f      	ldr	r1, [pc, #60]	; (8001e4c <pwmMode+0x8d8>)
 8001e10:	480f      	ldr	r0, [pc, #60]	; (8001e50 <pwmMode+0x8dc>)
 8001e12:	f002 fbbf 	bl	8004594 <HAL_GPIO_Init>
 	  		HAL_TIM_Base_Start_IT(htim);
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f006 f904 	bl	8008024 <HAL_TIM_Base_Start_IT>
 	  		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "GPIO_PWM=%04X\r\n", GPIO_PWM_InitStruct[3].Pin), 1000);
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <pwmMode+0x8d4>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	461a      	mov	r2, r3
 8001e22:	490c      	ldr	r1, [pc, #48]	; (8001e54 <pwmMode+0x8e0>)
 8001e24:	480c      	ldr	r0, [pc, #48]	; (8001e58 <pwmMode+0x8e4>)
 8001e26:	f008 ff97 	bl	800ad58 <siprintf>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e32:	4909      	ldr	r1, [pc, #36]	; (8001e58 <pwmMode+0x8e4>)
 8001e34:	4809      	ldr	r0, [pc, #36]	; (8001e5c <pwmMode+0x8e8>)
 8001e36:	f007 fcd4 	bl	80097e2 <HAL_UART_Transmit>
}
 8001e3a:	bf00      	nop
 8001e3c:	3780      	adds	r7, #128	; 0x80
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200002a4 	.word	0x200002a4
 8001e48:	200002a8 	.word	0x200002a8
 8001e4c:	200002d8 	.word	0x200002d8
 8001e50:	40010c00 	.word	0x40010c00
 8001e54:	0800d2e0 	.word	0x0800d2e0
 8001e58:	20000010 	.word	0x20000010
 8001e5c:	200004d4 	.word	0x200004d4

08001e60 <ADC_MspInit>:
void ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <ADC_MspInit+0x6c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d121      	bne.n	8001ec4 <ADC_MspInit+0x64>
  {
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <ADC_MspInit+0x70>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <ADC_MspInit+0x70>)
 8001e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e8a:	6193      	str	r3, [r2, #24]
 8001e8c:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <ADC_MspInit+0x70>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e98:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <ADC_MspInit+0x70>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	4a0c      	ldr	r2, [pc, #48]	; (8001ed0 <ADC_MspInit+0x70>)
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	6193      	str	r3, [r2, #24]
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <ADC_MspInit+0x70>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb8:	f107 0310 	add.w	r3, r7, #16
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <ADC_MspInit+0x74>)
 8001ec0:	f002 fb68 	bl	8004594 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	3720      	adds	r7, #32
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40012400 	.word	0x40012400
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40010800 	.word	0x40010800

08001ed8 <ADC_Config>:
void ADC_Config(ADC_HandleTypeDef *hadc, uint8_t index){
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	70fb      	strb	r3, [r7, #3]
	 /* USER CODE BEGIN ADC1_Init 0 */

	  /* USER CODE END ADC1_Init 0 */

	  ADC_ChannelConfTypeDef sConfig = {0};
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]

	  /* USER CODE END ADC1_Init 1 */

	  /** Common config
	  */
	  hadc->Instance = ADC1;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a1d      	ldr	r2, [pc, #116]	; (8001f68 <ADC_Config+0x90>)
 8001ef4:	601a      	str	r2, [r3, #0]
	  hadc->Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
	  hadc->Init.ContinuousConvMode = ENABLE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	731a      	strb	r2, [r3, #12]
	  hadc->Init.DiscontinuousConvMode = DISABLE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	751a      	strb	r2, [r3, #20]
	  hadc->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001f0e:	61da      	str	r2, [r3, #28]
	  hadc->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	605a      	str	r2, [r3, #4]
	  hadc->Init.NbrOfConversion = 1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	611a      	str	r2, [r3, #16]
	  if (HAL_ADC_Init(hadc) != HAL_OK)
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f001 fb89 	bl	8003634 <HAL_ADC_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <ADC_Config+0x54>
	  {
	    Error_Handler();
 8001f28:	f000 faf5 	bl	8002516 <Error_Handler>
	  }

	  /** Configure Regular Channel
	  */
	  sConfig.Channel = ADC_CHANNEL_0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f30:	2301      	movs	r3, #1
 8001f32:	613b      	str	r3, [r7, #16]
	  sConfig.SamplingTime = adcSamplingTime[index];
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	4a0d      	ldr	r2, [pc, #52]	; (8001f6c <ADC_Config+0x94>)
 8001f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3c:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8001f3e:	f107 030c 	add.w	r3, r7, #12
 8001f42:	4619      	mov	r1, r3
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f001 fdcd 	bl	8003ae4 <HAL_ADC_ConfigChannel>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <ADC_Config+0x7c>
	  {
	    Error_Handler();
 8001f50:	f000 fae1 	bl	8002516 <Error_Handler>
	  }
	  ADC_MspInit(hadc);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ff83 	bl	8001e60 <ADC_MspInit>
	  HAL_ADC_Start(hadc);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f001 fc42 	bl	80037e4 <HAL_ADC_Start>
}
 8001f60:	bf00      	nop
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40012400 	.word	0x40012400
 8001f6c:	20000040 	.word	0x20000040

08001f70 <HAL_UART_RxCpltCallback>:
//		  NeoPixel_led_set_all_RGB();
//	}
//}
uint8_t buffer[MAX_BUFFER_SIZE];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	if( huart -> Instance == USART2 ) {
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a13      	ldr	r2, [pc, #76]	; (8001fcc <HAL_UART_RxCpltCallback+0x5c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d11f      	bne.n	8001fc2 <HAL_UART_RxCpltCallback+0x52>
		buffer[index_buffer++] = temp;
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_UART_RxCpltCallback+0x60>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	b2d1      	uxtb	r1, r2
 8001f8a:	4a11      	ldr	r2, [pc, #68]	; (8001fd0 <HAL_UART_RxCpltCallback+0x60>)
 8001f8c:	7011      	strb	r1, [r2, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <HAL_UART_RxCpltCallback+0x64>)
 8001f92:	7819      	ldrb	r1, [r3, #0]
 8001f94:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <HAL_UART_RxCpltCallback+0x68>)
 8001f96:	5499      	strb	r1, [r3, r2]
		if(index_buffer == 30) index_buffer = 0;
 8001f98:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <HAL_UART_RxCpltCallback+0x60>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b1e      	cmp	r3, #30
 8001f9e:	d102      	bne.n	8001fa6 <HAL_UART_RxCpltCallback+0x36>
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_UART_RxCpltCallback+0x60>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_UART_RxCpltCallback+0x6c>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit (&huart2, &temp, 1, 50) ;
 8001fac:	2332      	movs	r3, #50	; 0x32
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4908      	ldr	r1, [pc, #32]	; (8001fd4 <HAL_UART_RxCpltCallback+0x64>)
 8001fb2:	480b      	ldr	r0, [pc, #44]	; (8001fe0 <HAL_UART_RxCpltCallback+0x70>)
 8001fb4:	f007 fc15 	bl	80097e2 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, & temp, 1);
 8001fb8:	2201      	movs	r2, #1
 8001fba:	4906      	ldr	r1, [pc, #24]	; (8001fd4 <HAL_UART_RxCpltCallback+0x64>)
 8001fbc:	4808      	ldr	r0, [pc, #32]	; (8001fe0 <HAL_UART_RxCpltCallback+0x70>)
 8001fbe:	f007 fc93 	bl	80098e8 <HAL_UART_Receive_IT>
	}
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40004400 	.word	0x40004400
 8001fd0:	2000029d 	.word	0x2000029d
 8001fd4:	2000029c 	.word	0x2000029c
 8001fd8:	2000051c 	.word	0x2000051c
 8001fdc:	2000029e 	.word	0x2000029e
 8001fe0:	200004d4 	.word	0x200004d4

08001fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fea:	f001 fa9d 	bl	8003528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fee:	f000 f89b 	bl	8002128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ff2:	f000 fa01 	bl	80023f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ff6:	f000 f9d5 	bl	80023a4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001ffa:	f000 f95d 	bl	80022b8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001ffe:	f000 f8ef 	bl	80021e0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002002:	f000 f92b 	bl	800225c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  pwmMode(&htim3, 3, 1, 0, 89, 0);
 8002006:	2300      	movs	r3, #0
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	2359      	movs	r3, #89	; 0x59
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	2300      	movs	r3, #0
 8002010:	2201      	movs	r2, #1
 8002012:	2103      	movs	r1, #3
 8002014:	483b      	ldr	r0, [pc, #236]	; (8002104 <main+0x120>)
 8002016:	f7ff faad 	bl	8001574 <pwmMode>
  pwmMode(&htim3, 3, 2, 0, 89, 0);
 800201a:	2300      	movs	r3, #0
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	2359      	movs	r3, #89	; 0x59
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	2300      	movs	r3, #0
 8002024:	2202      	movs	r2, #2
 8002026:	2103      	movs	r1, #3
 8002028:	4836      	ldr	r0, [pc, #216]	; (8002104 <main+0x120>)
 800202a:	f7ff faa3 	bl	8001574 <pwmMode>
  pwmMode(&htim4, 4, 1, 0, 89, 0);
 800202e:	2300      	movs	r3, #0
 8002030:	9301      	str	r3, [sp, #4]
 8002032:	2359      	movs	r3, #89	; 0x59
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	2300      	movs	r3, #0
 8002038:	2201      	movs	r2, #1
 800203a:	2104      	movs	r1, #4
 800203c:	4832      	ldr	r0, [pc, #200]	; (8002108 <main+0x124>)
 800203e:	f7ff fa99 	bl	8001574 <pwmMode>
  pwmMode(&htim4, 4, 2, 0, 89, 0);
 8002042:	2300      	movs	r3, #0
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	2359      	movs	r3, #89	; 0x59
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2300      	movs	r3, #0
 800204c:	2202      	movs	r2, #2
 800204e:	2104      	movs	r1, #4
 8002050:	482d      	ldr	r0, [pc, #180]	; (8002108 <main+0x124>)
 8002052:	f7ff fa8f 	bl	8001574 <pwmMode>
  pwmMode(&htim1, 1, 1, 0, 89, 1);
 8002056:	2301      	movs	r3, #1
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	2359      	movs	r3, #89	; 0x59
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2300      	movs	r3, #0
 8002060:	2201      	movs	r2, #1
 8002062:	2101      	movs	r1, #1
 8002064:	4829      	ldr	r0, [pc, #164]	; (800210c <main+0x128>)
 8002066:	f7ff fa85 	bl	8001574 <pwmMode>

  ADC_Config(&hadc1, 7);
 800206a:	2107      	movs	r1, #7
 800206c:	4828      	ldr	r0, [pc, #160]	; (8002110 <main+0x12c>)
 800206e:	f7ff ff33 	bl	8001ed8 <ADC_Config>
  HAL_TIM_Base_Start_IT(&htim2);
 8002072:	4828      	ldr	r0, [pc, #160]	; (8002114 <main+0x130>)
 8002074:	f005 ffd6 	bl	8008024 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8002078:	2201      	movs	r2, #1
 800207a:	4927      	ldr	r1, [pc, #156]	; (8002118 <main+0x134>)
 800207c:	4827      	ldr	r0, [pc, #156]	; (800211c <main+0x138>)
 800207e:	f007 fc33 	bl	80098e8 <HAL_UART_Receive_IT>
  SCH_Init();
 8002082:	f000 fd91 	bl	8002ba8 <SCH_Init>
  DHT20_Read();
 8002086:	f7fe fef3 	bl	8000e70 <DHT20_Read>
  lcdInit();
 800208a:	f7ff f884 	bl	8001196 <lcdInit>
  lcdSetCursor(1, 1);
 800208e:	2101      	movs	r1, #1
 8002090:	2001      	movs	r0, #1
 8002092:	f7ff f861 	bl	8001158 <lcdSetCursor>
  lcdSendNumber(DHT20_getHumidity());
 8002096:	f7fe fe7b 	bl	8000d90 <DHT20_getHumidity>
 800209a:	4603      	mov	r3, r0
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff f8c9 	bl	8001234 <lcdSendNumber>
  HAL_Delay(10);
 80020a2:	200a      	movs	r0, #10
 80020a4:	f001 faa2 	bl	80035ec <HAL_Delay>
  lcdSetCursor(0, 1);
 80020a8:	2101      	movs	r1, #1
 80020aa:	2000      	movs	r0, #0
 80020ac:	f7ff f854 	bl	8001158 <lcdSetCursor>
  lcdSendNumber(DHT20_getTemperature());
 80020b0:	f7fe fe80 	bl	8000db4 <DHT20_getTemperature>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff f8bc 	bl	8001234 <lcdSendNumber>
  NeoPixel_status = 0;
 80020bc:	4b18      	ldr	r3, [pc, #96]	; (8002120 <main+0x13c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
  neopixelStatus = neopixelInit;
 80020c2:	4b18      	ldr	r3, [pc, #96]	; (8002124 <main+0x140>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
	NeoPixel_clear_all_led();
 80020c8:	f000 fa3e 	bl	8002548 <NeoPixel_clear_all_led>
	HAL_Delay(10);
 80020cc:	200a      	movs	r0, #10
 80020ce:	f001 fa8d 	bl	80035ec <HAL_Delay>
  uint8_t high = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	71fb      	strb	r3, [r7, #7]
  uint8_t low = 1;
 80020d6:	2301      	movs	r3, #1
 80020d8:	71bb      	strb	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  fsmNeopixelRgbLed();
	  NeoPixel_set_led_cycle();
 80020da:	f000 fc57 	bl	800298c <NeoPixel_set_led_cycle>
      SCH_Dispatch_Tasks();
 80020de:	f000 fde9 	bl	8002cb4 <SCH_Dispatch_Tasks>
//      if( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET){
//    	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
//      }
       __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 100);
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <main+0x120>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2264      	movs	r2, #100	; 0x64
 80020e8:	639a      	str	r2, [r3, #56]	; 0x38
       __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 50);
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <main+0x120>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2232      	movs	r2, #50	; 0x32
 80020f0:	635a      	str	r2, [r3, #52]	; 0x34
//      __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, 100);
//      __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4, 100);
      __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 100);
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <main+0x124>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2264      	movs	r2, #100	; 0x64
 80020f8:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 50);
 80020fa:	4b03      	ldr	r3, [pc, #12]	; (8002108 <main+0x124>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2232      	movs	r2, #50	; 0x32
 8002100:	635a      	str	r2, [r3, #52]	; 0x34
	  NeoPixel_set_led_cycle();
 8002102:	e7ea      	b.n	80020da <main+0xf6>
 8002104:	20000400 	.word	0x20000400
 8002108:	20000448 	.word	0x20000448
 800210c:	20000370 	.word	0x20000370
 8002110:	200002ec 	.word	0x200002ec
 8002114:	200003b8 	.word	0x200003b8
 8002118:	2000029c 	.word	0x2000029c
 800211c:	200004d4 	.word	0x200004d4
 8002120:	2000029f 	.word	0x2000029f
 8002124:	200002e8 	.word	0x200002e8

08002128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b094      	sub	sp, #80	; 0x50
 800212c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800212e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002132:	2228      	movs	r2, #40	; 0x28
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f008 f9a6 	bl	800a488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800214c:	1d3b      	adds	r3, r7, #4
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002158:	2301      	movs	r3, #1
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800215c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002162:	2300      	movs	r3, #0
 8002164:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002166:	2301      	movs	r3, #1
 8002168:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800216a:	2302      	movs	r3, #2
 800216c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800216e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002172:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002174:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002178:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800217a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800217e:	4618      	mov	r0, r3
 8002180:	f005 fa3a 	bl	80075f8 <HAL_RCC_OscConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800218a:	f000 f9c4 	bl	8002516 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800218e:	230f      	movs	r3, #15
 8002190:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002192:	2302      	movs	r3, #2
 8002194:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800219a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800219e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021a0:	2300      	movs	r3, #0
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	2102      	movs	r1, #2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f005 fca6 	bl	8007afc <HAL_RCC_ClockConfig>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80021b6:	f000 f9ae 	bl	8002516 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80021ba:	2302      	movs	r3, #2
 80021bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80021be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021c2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	4618      	mov	r0, r3
 80021c8:	f005 fe26 	bl	8007e18 <HAL_RCCEx_PeriphCLKConfig>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80021d2:	f000 f9a0 	bl	8002516 <Error_Handler>
  }
}
 80021d6:	bf00      	nop
 80021d8:	3750      	adds	r7, #80	; 0x50
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80021f0:	4b18      	ldr	r3, [pc, #96]	; (8002254 <MX_ADC1_Init+0x74>)
 80021f2:	4a19      	ldr	r2, [pc, #100]	; (8002258 <MX_ADC1_Init+0x78>)
 80021f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80021f6:	4b17      	ldr	r3, [pc, #92]	; (8002254 <MX_ADC1_Init+0x74>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80021fc:	4b15      	ldr	r3, [pc, #84]	; (8002254 <MX_ADC1_Init+0x74>)
 80021fe:	2201      	movs	r2, #1
 8002200:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002202:	4b14      	ldr	r3, [pc, #80]	; (8002254 <MX_ADC1_Init+0x74>)
 8002204:	2200      	movs	r2, #0
 8002206:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <MX_ADC1_Init+0x74>)
 800220a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800220e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002210:	4b10      	ldr	r3, [pc, #64]	; (8002254 <MX_ADC1_Init+0x74>)
 8002212:	2200      	movs	r2, #0
 8002214:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002216:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <MX_ADC1_Init+0x74>)
 8002218:	2201      	movs	r2, #1
 800221a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800221c:	480d      	ldr	r0, [pc, #52]	; (8002254 <MX_ADC1_Init+0x74>)
 800221e:	f001 fa09 	bl	8003634 <HAL_ADC_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002228:	f000 f975 	bl	8002516 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800222c:	2300      	movs	r3, #0
 800222e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002230:	2301      	movs	r3, #1
 8002232:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002234:	2307      	movs	r3, #7
 8002236:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002238:	1d3b      	adds	r3, r7, #4
 800223a:	4619      	mov	r1, r3
 800223c:	4805      	ldr	r0, [pc, #20]	; (8002254 <MX_ADC1_Init+0x74>)
 800223e:	f001 fc51 	bl	8003ae4 <HAL_ADC_ConfigChannel>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002248:	f000 f965 	bl	8002516 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800224c:	bf00      	nop
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	200002ec 	.word	0x200002ec
 8002258:	40012400 	.word	0x40012400

0800225c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002260:	4b12      	ldr	r3, [pc, #72]	; (80022ac <MX_I2C1_Init+0x50>)
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <MX_I2C1_Init+0x54>)
 8002264:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002266:	4b11      	ldr	r3, [pc, #68]	; (80022ac <MX_I2C1_Init+0x50>)
 8002268:	4a12      	ldr	r2, [pc, #72]	; (80022b4 <MX_I2C1_Init+0x58>)
 800226a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <MX_I2C1_Init+0x50>)
 800226e:	2200      	movs	r2, #0
 8002270:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <MX_I2C1_Init+0x50>)
 8002274:	2200      	movs	r2, #0
 8002276:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <MX_I2C1_Init+0x50>)
 800227a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800227e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002280:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <MX_I2C1_Init+0x50>)
 8002282:	2200      	movs	r2, #0
 8002284:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <MX_I2C1_Init+0x50>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800228c:	4b07      	ldr	r3, [pc, #28]	; (80022ac <MX_I2C1_Init+0x50>)
 800228e:	2200      	movs	r2, #0
 8002290:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002292:	4b06      	ldr	r3, [pc, #24]	; (80022ac <MX_I2C1_Init+0x50>)
 8002294:	2200      	movs	r2, #0
 8002296:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002298:	4804      	ldr	r0, [pc, #16]	; (80022ac <MX_I2C1_Init+0x50>)
 800229a:	f002 fb51 	bl	8004940 <HAL_I2C_Init>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80022a4:	f000 f937 	bl	8002516 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	2000031c 	.word	0x2000031c
 80022b0:	40005400 	.word	0x40005400
 80022b4:	000186a0 	.word	0x000186a0

080022b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08e      	sub	sp, #56	; 0x38
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022cc:	f107 0320 	add.w	r3, r7, #32
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
 80022e4:	615a      	str	r2, [r3, #20]
 80022e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022e8:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <MX_TIM2_Init+0xe8>)
 80022ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80022f0:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <MX_TIM2_Init+0xe8>)
 80022f2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80022f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f8:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <MX_TIM2_Init+0xe8>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80022fe:	4b28      	ldr	r3, [pc, #160]	; (80023a0 <MX_TIM2_Init+0xe8>)
 8002300:	2209      	movs	r2, #9
 8002302:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002304:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <MX_TIM2_Init+0xe8>)
 8002306:	2200      	movs	r2, #0
 8002308:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800230a:	4b25      	ldr	r3, [pc, #148]	; (80023a0 <MX_TIM2_Init+0xe8>)
 800230c:	2200      	movs	r2, #0
 800230e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002310:	4823      	ldr	r0, [pc, #140]	; (80023a0 <MX_TIM2_Init+0xe8>)
 8002312:	f005 fe37 	bl	8007f84 <HAL_TIM_Base_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800231c:	f000 f8fb 	bl	8002516 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002324:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800232a:	4619      	mov	r1, r3
 800232c:	481c      	ldr	r0, [pc, #112]	; (80023a0 <MX_TIM2_Init+0xe8>)
 800232e:	f006 fce7 	bl	8008d00 <HAL_TIM_ConfigClockSource>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002338:	f000 f8ed 	bl	8002516 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800233c:	4818      	ldr	r0, [pc, #96]	; (80023a0 <MX_TIM2_Init+0xe8>)
 800233e:	f005 fec3 	bl	80080c8 <HAL_TIM_PWM_Init>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002348:	f000 f8e5 	bl	8002516 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800234c:	2300      	movs	r3, #0
 800234e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002350:	2300      	movs	r3, #0
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002354:	f107 0320 	add.w	r3, r7, #32
 8002358:	4619      	mov	r1, r3
 800235a:	4811      	ldr	r0, [pc, #68]	; (80023a0 <MX_TIM2_Init+0xe8>)
 800235c:	f007 f930 	bl	80095c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002366:	f000 f8d6 	bl	8002516 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800236a:	2360      	movs	r3, #96	; 0x60
 800236c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	2200      	movs	r2, #0
 800237e:	4619      	mov	r1, r3
 8002380:	4807      	ldr	r0, [pc, #28]	; (80023a0 <MX_TIM2_Init+0xe8>)
 8002382:	f006 fbfb 	bl	8008b7c <HAL_TIM_PWM_ConfigChannel>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800238c:	f000 f8c3 	bl	8002516 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002390:	4803      	ldr	r0, [pc, #12]	; (80023a0 <MX_TIM2_Init+0xe8>)
 8002392:	f000 fe83 	bl	800309c <HAL_TIM_MspPostInit>

}
 8002396:	bf00      	nop
 8002398:	3738      	adds	r7, #56	; 0x38
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200003b8 	.word	0x200003b8

080023a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023aa:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <MX_USART2_UART_Init+0x50>)
 80023ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023b6:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023ca:	220c      	movs	r2, #12
 80023cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023da:	4805      	ldr	r0, [pc, #20]	; (80023f0 <MX_USART2_UART_Init+0x4c>)
 80023dc:	f007 f9b1 	bl	8009742 <HAL_UART_Init>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023e6:	f000 f896 	bl	8002516 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200004d4 	.word	0x200004d4
 80023f4:	40004400 	.word	0x40004400

080023f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fe:	f107 0310 	add.w	r3, r7, #16
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	609a      	str	r2, [r3, #8]
 800240a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800240c:	4b33      	ldr	r3, [pc, #204]	; (80024dc <MX_GPIO_Init+0xe4>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	4a32      	ldr	r2, [pc, #200]	; (80024dc <MX_GPIO_Init+0xe4>)
 8002412:	f043 0310 	orr.w	r3, r3, #16
 8002416:	6193      	str	r3, [r2, #24]
 8002418:	4b30      	ldr	r3, [pc, #192]	; (80024dc <MX_GPIO_Init+0xe4>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002424:	4b2d      	ldr	r3, [pc, #180]	; (80024dc <MX_GPIO_Init+0xe4>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	4a2c      	ldr	r2, [pc, #176]	; (80024dc <MX_GPIO_Init+0xe4>)
 800242a:	f043 0320 	orr.w	r3, r3, #32
 800242e:	6193      	str	r3, [r2, #24]
 8002430:	4b2a      	ldr	r3, [pc, #168]	; (80024dc <MX_GPIO_Init+0xe4>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f003 0320 	and.w	r3, r3, #32
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800243c:	4b27      	ldr	r3, [pc, #156]	; (80024dc <MX_GPIO_Init+0xe4>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	4a26      	ldr	r2, [pc, #152]	; (80024dc <MX_GPIO_Init+0xe4>)
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	6193      	str	r3, [r2, #24]
 8002448:	4b24      	ldr	r3, [pc, #144]	; (80024dc <MX_GPIO_Init+0xe4>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002454:	4b21      	ldr	r3, [pc, #132]	; (80024dc <MX_GPIO_Init+0xe4>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	4a20      	ldr	r2, [pc, #128]	; (80024dc <MX_GPIO_Init+0xe4>)
 800245a:	f043 0308 	orr.w	r3, r3, #8
 800245e:	6193      	str	r3, [r2, #24]
 8002460:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <MX_GPIO_Init+0xe4>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	603b      	str	r3, [r7, #0]
 800246a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 800246c:	2200      	movs	r2, #0
 800246e:	21e0      	movs	r1, #224	; 0xe0
 8002470:	481b      	ldr	r0, [pc, #108]	; (80024e0 <MX_GPIO_Init+0xe8>)
 8002472:	f002 fa2a 	bl	80048ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002476:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800247a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800247c:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <MX_GPIO_Init+0xec>)
 800247e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002484:	f107 0310 	add.w	r3, r7, #16
 8002488:	4619      	mov	r1, r3
 800248a:	4817      	ldr	r0, [pc, #92]	; (80024e8 <MX_GPIO_Init+0xf0>)
 800248c:	f002 f882 	bl	8004594 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin;
 8002490:	23e0      	movs	r3, #224	; 0xe0
 8002492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002494:	2301      	movs	r3, #1
 8002496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249c:	2302      	movs	r3, #2
 800249e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a0:	f107 0310 	add.w	r3, r7, #16
 80024a4:	4619      	mov	r1, r3
 80024a6:	480e      	ldr	r0, [pc, #56]	; (80024e0 <MX_GPIO_Init+0xe8>)
 80024a8:	f002 f874 	bl	8004594 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button0_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button0_Pin|Button1_Pin|Button2_Pin;
 80024ac:	2307      	movs	r3, #7
 80024ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024b4:	2301      	movs	r3, #1
 80024b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b8:	f107 0310 	add.w	r3, r7, #16
 80024bc:	4619      	mov	r1, r3
 80024be:	480b      	ldr	r0, [pc, #44]	; (80024ec <MX_GPIO_Init+0xf4>)
 80024c0:	f002 f868 	bl	8004594 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024c4:	2200      	movs	r2, #0
 80024c6:	2100      	movs	r1, #0
 80024c8:	2028      	movs	r0, #40	; 0x28
 80024ca:	f001 fd7e 	bl	8003fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024ce:	2028      	movs	r0, #40	; 0x28
 80024d0:	f001 fd97 	bl	8004002 <HAL_NVIC_EnableIRQ>

}
 80024d4:	bf00      	nop
 80024d6:	3720      	adds	r7, #32
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40010800 	.word	0x40010800
 80024e4:	10110000 	.word	0x10110000
 80024e8:	40011000 	.word	0x40011000
 80024ec:	40010c00 	.word	0x40010c00

080024f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002500:	d101      	bne.n	8002506 <HAL_TIM_PeriodElapsedCallback+0x16>
		button_reading();
 8002502:	f7fe ffad 	bl	8001460 <button_reading>
	}
	timerRun();
 8002506:	f000 ffa7 	bl	8003458 <timerRun>
	SCH_Update();
 800250a:	f000 fb63 	bl	8002bd4 <SCH_Update>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800251a:	b672      	cpsid	i
}
 800251c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800251e:	e7fe      	b.n	800251e <Error_Handler+0x8>

08002520 <scale8>:
uint8_t b;

uint8_t angle = 0;
const uint8_t angle_difference = 11;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	460a      	mov	r2, r1
 800252a:	71fb      	strb	r3, [r7, #7]
 800252c:	4613      	mov	r3, r2
 800252e:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	79ba      	ldrb	r2, [r7, #6]
 8002534:	fb02 f303 	mul.w	r3, r2, r3
 8002538:	121b      	asrs	r3, r3, #8
 800253a:	b2db      	uxtb	r3, r3
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
	...

08002548 <NeoPixel_clear_all_led>:

void NeoPixel_clear_all_led(){
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
	   for (uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	e019      	b.n	8002588 <NeoPixel_clear_all_led+0x40>
	        rgb_arr[4 * i] = 0;          // G = 0
	        rgb_arr[4 * i + 1] = 0;      // R = 0
	        rgb_arr[4 * i + 2] = 0;      // B = 0
	        rgb_arr[4 * i + 3] = 0;      // Reserved = 0
	#else // WS2812B
	        rgb_arr[3 * i] = 0;          // G = 0
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4413      	add	r3, r2
 800255c:	4a10      	ldr	r2, [pc, #64]	; (80025a0 <NeoPixel_clear_all_led+0x58>)
 800255e:	2100      	movs	r1, #0
 8002560:	54d1      	strb	r1, [r2, r3]
	        rgb_arr[3 * i + 1] = 0;      // R = 0
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	3301      	adds	r3, #1
 800256c:	4a0c      	ldr	r2, [pc, #48]	; (80025a0 <NeoPixel_clear_all_led+0x58>)
 800256e:	2100      	movs	r1, #0
 8002570:	54d1      	strb	r1, [r2, r3]
	        rgb_arr[3 * i + 2] = 0;      // B = 0
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4413      	add	r3, r2
 800257a:	3302      	adds	r3, #2
 800257c:	4a08      	ldr	r2, [pc, #32]	; (80025a0 <NeoPixel_clear_all_led+0x58>)
 800257e:	2100      	movs	r1, #0
 8002580:	54d1      	strb	r1, [r2, r3]
	   for (uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3301      	adds	r3, #1
 8002586:	607b      	str	r3, [r7, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b07      	cmp	r3, #7
 800258c:	d9e2      	bls.n	8002554 <NeoPixel_clear_all_led+0xc>
	#endif // End SK6812 WS2812B case differentiation
	    }
	    NeoPixel_led_render(); // Ghi dữ liệu mới vào LED
 800258e:	f000 f851 	bl	8002634 <NeoPixel_led_render>
		HAL_Delay(200);
 8002592:	20c8      	movs	r0, #200	; 0xc8
 8002594:	f001 f82a 	bl	80035ec <HAL_Delay>
}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	2000053c 	.word	0x2000053c

080025a4 <NeoPixel_led_set_RGB>:
		 NeoPixel_led_set_all_RGB();
	}
	NeoPixel_status =  !NeoPixel_status;
}
// Set a single color (RGB) to index
void NeoPixel_led_set_RGB(uint8_t index) {
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
	r = (NeoPixel_RGB_Color >> 16) & 0xFF;
 80025ae:	4b1c      	ldr	r3, [pc, #112]	; (8002620 <NeoPixel_led_set_RGB+0x7c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	0c1b      	lsrs	r3, r3, #16
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <NeoPixel_led_set_RGB+0x80>)
 80025b8:	701a      	strb	r2, [r3, #0]
	g = (NeoPixel_RGB_Color >> 8) & 0xFF;
 80025ba:	4b19      	ldr	r3, [pc, #100]	; (8002620 <NeoPixel_led_set_RGB+0x7c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	4b19      	ldr	r3, [pc, #100]	; (8002628 <NeoPixel_led_set_RGB+0x84>)
 80025c4:	701a      	strb	r2, [r3, #0]
	b =  NeoPixel_RGB_Color & 0xFF;
 80025c6:	4b16      	ldr	r3, [pc, #88]	; (8002620 <NeoPixel_led_set_RGB+0x7c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	4b17      	ldr	r3, [pc, #92]	; (800262c <NeoPixel_led_set_RGB+0x88>)
 80025ce:	701a      	strb	r2, [r3, #0]
  rgb_arr[4 * index] = scale8(g, 0xB0); // g;
  rgb_arr[4 * index + 1] = r;
  rgb_arr[4 * index + 2] = scale8(b, 0xF0); // b;
  rgb_arr[4 * index + 3] = 0;
#else // WS2812B
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 80025d0:	4b15      	ldr	r3, [pc, #84]	; (8002628 <NeoPixel_led_set_RGB+0x84>)
 80025d2:	7818      	ldrb	r0, [r3, #0]
 80025d4:	79fa      	ldrb	r2, [r7, #7]
 80025d6:	4613      	mov	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	189c      	adds	r4, r3, r2
 80025dc:	21b0      	movs	r1, #176	; 0xb0
 80025de:	f7ff ff9f 	bl	8002520 <scale8>
 80025e2:	4603      	mov	r3, r0
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <NeoPixel_led_set_RGB+0x8c>)
 80025e8:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 80025ea:	79fa      	ldrb	r2, [r7, #7]
 80025ec:	4613      	mov	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	3301      	adds	r3, #1
 80025f4:	4a0b      	ldr	r2, [pc, #44]	; (8002624 <NeoPixel_led_set_RGB+0x80>)
 80025f6:	7811      	ldrb	r1, [r2, #0]
 80025f8:	4a0d      	ldr	r2, [pc, #52]	; (8002630 <NeoPixel_led_set_RGB+0x8c>)
 80025fa:	54d1      	strb	r1, [r2, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <NeoPixel_led_set_RGB+0x88>)
 80025fe:	7818      	ldrb	r0, [r3, #0]
 8002600:	79fa      	ldrb	r2, [r7, #7]
 8002602:	4613      	mov	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4413      	add	r3, r2
 8002608:	1c9c      	adds	r4, r3, #2
 800260a:	21f0      	movs	r1, #240	; 0xf0
 800260c:	f7ff ff88 	bl	8002520 <scale8>
 8002610:	4603      	mov	r3, r0
 8002612:	461a      	mov	r2, r3
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <NeoPixel_led_set_RGB+0x8c>)
 8002616:	551a      	strb	r2, [r3, r4]
#endif // End SK6812 WS2812B case differentiation
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bd90      	pop	{r4, r7, pc}
 8002620:	2000001c 	.word	0x2000001c
 8002624:	20000588 	.word	0x20000588
 8002628:	20000589 	.word	0x20000589
 800262c:	2000058a 	.word	0x2000058a
 8002630:	2000053c 	.word	0x2000053c

08002634 <NeoPixel_led_render>:
  }
	NeoPixel_led_render();
}

// Shuttle the data to the LEDs!
void NeoPixel_led_render() {
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim1_ch1.State != HAL_DMA_STATE_READY) {
 800263a:	4b4d      	ldr	r3, [pc, #308]	; (8002770 <NeoPixel_led_render+0x13c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d105      	bne.n	800264e <NeoPixel_led_render+0x1a>
 8002642:	4b4c      	ldr	r3, [pc, #304]	; (8002774 <NeoPixel_led_render+0x140>)
 8002644:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d014      	beq.n	8002678 <NeoPixel_led_render+0x44>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	71fb      	strb	r3, [r7, #7]
 8002652:	e006      	b.n	8002662 <NeoPixel_led_render+0x2e>
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	4a48      	ldr	r2, [pc, #288]	; (8002778 <NeoPixel_led_render+0x144>)
 8002658:	2100      	movs	r1, #0
 800265a:	54d1      	strb	r1, [r2, r3]
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	3301      	adds	r3, #1
 8002660:	71fb      	strb	r3, [r7, #7]
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	2b2f      	cmp	r3, #47	; 0x2f
 8002666:	d9f5      	bls.n	8002654 <NeoPixel_led_render+0x20>
    wr_buf_p = 0;
 8002668:	4b41      	ldr	r3, [pc, #260]	; (8002770 <NeoPixel_led_render+0x13c>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800266e:	2100      	movs	r1, #0
 8002670:	4842      	ldr	r0, [pc, #264]	; (800277c <NeoPixel_led_render+0x148>)
 8002672:	f006 f8b5 	bl	80087e0 <HAL_TIM_PWM_Stop_DMA>
    return;
 8002676:	e078      	b.n	800276a <NeoPixel_led_render+0x136>
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
    wr_buf[i + 48] = PWM_LO << (((rgb_arr[6] << i) & 0x80) > 0);
    wr_buf[i + 56] = PWM_LO << (((rgb_arr[7] << i) & 0x80) > 0);
  }
#else // WS2812B
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8002678:	2300      	movs	r3, #0
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	e069      	b.n	8002752 <NeoPixel_led_render+0x11e>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 800267e:	4b40      	ldr	r3, [pc, #256]	; (8002780 <NeoPixel_led_render+0x14c>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268e:	2b00      	cmp	r3, #0
 8002690:	dd01      	ble.n	8002696 <NeoPixel_led_render+0x62>
 8002692:	213a      	movs	r1, #58	; 0x3a
 8002694:	e000      	b.n	8002698 <NeoPixel_led_render+0x64>
 8002696:	211d      	movs	r1, #29
 8002698:	4a37      	ldr	r2, [pc, #220]	; (8002778 <NeoPixel_led_render+0x144>)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	4413      	add	r3, r2
 800269e:	460a      	mov	r2, r1
 80026a0:	701a      	strb	r2, [r3, #0]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 80026a2:	4b37      	ldr	r3, [pc, #220]	; (8002780 <NeoPixel_led_render+0x14c>)
 80026a4:	785b      	ldrb	r3, [r3, #1]
 80026a6:	461a      	mov	r2, r3
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	dd01      	ble.n	80026ba <NeoPixel_led_render+0x86>
 80026b6:	213a      	movs	r1, #58	; 0x3a
 80026b8:	e000      	b.n	80026bc <NeoPixel_led_render+0x88>
 80026ba:	211d      	movs	r1, #29
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	3308      	adds	r3, #8
 80026c0:	4a2d      	ldr	r2, [pc, #180]	; (8002778 <NeoPixel_led_render+0x144>)
 80026c2:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 80026c4:	4b2e      	ldr	r3, [pc, #184]	; (8002780 <NeoPixel_led_render+0x14c>)
 80026c6:	789b      	ldrb	r3, [r3, #2]
 80026c8:	461a      	mov	r2, r3
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	dd01      	ble.n	80026dc <NeoPixel_led_render+0xa8>
 80026d8:	213a      	movs	r1, #58	; 0x3a
 80026da:	e000      	b.n	80026de <NeoPixel_led_render+0xaa>
 80026dc:	211d      	movs	r1, #29
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	3310      	adds	r3, #16
 80026e2:	4a25      	ldr	r2, [pc, #148]	; (8002778 <NeoPixel_led_render+0x144>)
 80026e4:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 80026e6:	4b26      	ldr	r3, [pc, #152]	; (8002780 <NeoPixel_led_render+0x14c>)
 80026e8:	78db      	ldrb	r3, [r3, #3]
 80026ea:	461a      	mov	r2, r3
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	dd01      	ble.n	80026fe <NeoPixel_led_render+0xca>
 80026fa:	213a      	movs	r1, #58	; 0x3a
 80026fc:	e000      	b.n	8002700 <NeoPixel_led_render+0xcc>
 80026fe:	211d      	movs	r1, #29
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	3318      	adds	r3, #24
 8002704:	4a1c      	ldr	r2, [pc, #112]	; (8002778 <NeoPixel_led_render+0x144>)
 8002706:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 8002708:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <NeoPixel_led_render+0x14c>)
 800270a:	791b      	ldrb	r3, [r3, #4]
 800270c:	461a      	mov	r2, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002718:	2b00      	cmp	r3, #0
 800271a:	dd01      	ble.n	8002720 <NeoPixel_led_render+0xec>
 800271c:	213a      	movs	r1, #58	; 0x3a
 800271e:	e000      	b.n	8002722 <NeoPixel_led_render+0xee>
 8002720:	211d      	movs	r1, #29
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	3320      	adds	r3, #32
 8002726:	4a14      	ldr	r2, [pc, #80]	; (8002778 <NeoPixel_led_render+0x144>)
 8002728:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 800272a:	4b15      	ldr	r3, [pc, #84]	; (8002780 <NeoPixel_led_render+0x14c>)
 800272c:	795b      	ldrb	r3, [r3, #5]
 800272e:	461a      	mov	r2, r3
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273a:	2b00      	cmp	r3, #0
 800273c:	dd01      	ble.n	8002742 <NeoPixel_led_render+0x10e>
 800273e:	213a      	movs	r1, #58	; 0x3a
 8002740:	e000      	b.n	8002744 <NeoPixel_led_render+0x110>
 8002742:	211d      	movs	r1, #29
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	3328      	adds	r3, #40	; 0x28
 8002748:	4a0b      	ldr	r2, [pc, #44]	; (8002778 <NeoPixel_led_render+0x144>)
 800274a:	54d1      	strb	r1, [r2, r3]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	3301      	adds	r3, #1
 8002750:	603b      	str	r3, [r7, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b07      	cmp	r3, #7
 8002756:	d992      	bls.n	800267e <NeoPixel_led_render+0x4a>
//	dmaState = HAL_DMA_GetState(&hdma_tim1_ch1);
//	if(newStatus == HAL_OK){
//		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "newstatus=%02X#\r\n", newStatus), 1000);
//		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "dmaState=%02X#\r\n", dmaState), 1000);
//	}
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)wr_buf, WR_BUF_LEN);
 8002758:	2330      	movs	r3, #48	; 0x30
 800275a:	4a07      	ldr	r2, [pc, #28]	; (8002778 <NeoPixel_led_render+0x144>)
 800275c:	2100      	movs	r1, #0
 800275e:	4807      	ldr	r0, [pc, #28]	; (800277c <NeoPixel_led_render+0x148>)
 8002760:	f005 fe9c 	bl	800849c <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 8002764:	4b02      	ldr	r3, [pc, #8]	; (8002770 <NeoPixel_led_render+0x13c>)
 8002766:	2202      	movs	r2, #2
 8002768:	601a      	str	r2, [r3, #0]
}
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000584 	.word	0x20000584
 8002774:	20000490 	.word	0x20000490
 8002778:	20000554 	.word	0x20000554
 800277c:	20000370 	.word	0x20000370
 8002780:	2000053c 	.word	0x2000053c

08002784 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 800278c:	4b39      	ldr	r3, [pc, #228]	; (8002874 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b07      	cmp	r3, #7
 8002792:	d853      	bhi.n	800283c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb8>
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e047      	b.n	800282a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa6>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800279a:	4b36      	ldr	r3, [pc, #216]	; (8002874 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4613      	mov	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	4a34      	ldr	r2, [pc, #208]	; (8002878 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80027a6:	5cd3      	ldrb	r3, [r2, r3]
 80027a8:	461a      	mov	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	dd01      	ble.n	80027bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 80027b8:	213a      	movs	r1, #58	; 0x3a
 80027ba:	e000      	b.n	80027be <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 80027bc:	211d      	movs	r1, #29
 80027be:	4a2f      	ldr	r2, [pc, #188]	; (800287c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4413      	add	r3, r2
 80027c4:	460a      	mov	r2, r1
 80027c6:	701a      	strb	r2, [r3, #0]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 80027c8:	4b2a      	ldr	r3, [pc, #168]	; (8002874 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4613      	mov	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4413      	add	r3, r2
 80027d2:	3301      	adds	r3, #1
 80027d4:	4a28      	ldr	r2, [pc, #160]	; (8002878 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80027d6:	5cd3      	ldrb	r3, [r2, r3]
 80027d8:	461a      	mov	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	dd01      	ble.n	80027ec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 80027e8:	213a      	movs	r1, #58	; 0x3a
 80027ea:	e000      	b.n	80027ee <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x6a>
 80027ec:	211d      	movs	r1, #29
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	3308      	adds	r3, #8
 80027f2:	4a22      	ldr	r2, [pc, #136]	; (800287c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80027f4:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 80027f6:	4b1f      	ldr	r3, [pc, #124]	; (8002874 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	4613      	mov	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	3302      	adds	r3, #2
 8002802:	4a1d      	ldr	r2, [pc, #116]	; (8002878 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 8002804:	5cd3      	ldrb	r3, [r2, r3]
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002812:	2b00      	cmp	r3, #0
 8002814:	dd01      	ble.n	800281a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 8002816:	213a      	movs	r1, #58	; 0x3a
 8002818:	e000      	b.n	800281c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 800281a:	211d      	movs	r1, #29
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	3310      	adds	r3, #16
 8002820:	4a16      	ldr	r2, [pc, #88]	; (800287c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8002822:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3301      	adds	r3, #1
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b07      	cmp	r3, #7
 800282e:	d9b4      	bls.n	800279a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 8002830:	4b10      	ldr	r3, [pc, #64]	; (8002874 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3301      	adds	r3, #1
 8002836:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002838:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 800283a:	e015      	b.n	8002868 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 800283c:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b09      	cmp	r3, #9
 8002842:	d811      	bhi.n	8002868 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	72fb      	strb	r3, [r7, #11]
 8002848:	e006      	b.n	8002858 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd4>
 800284a:	7afb      	ldrb	r3, [r7, #11]
 800284c:	4a0b      	ldr	r2, [pc, #44]	; (800287c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 800284e:	2100      	movs	r1, #0
 8002850:	54d1      	strb	r1, [r2, r3]
 8002852:	7afb      	ldrb	r3, [r7, #11]
 8002854:	3301      	adds	r3, #1
 8002856:	72fb      	strb	r3, [r7, #11]
 8002858:	7afb      	ldrb	r3, [r7, #11]
 800285a:	2b17      	cmp	r3, #23
 800285c:	d9f5      	bls.n	800284a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc6>
    wr_buf_p++;
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	3301      	adds	r3, #1
 8002864:	4a03      	ldr	r2, [pc, #12]	; (8002874 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8002866:	6013      	str	r3, [r2, #0]
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	20000584 	.word	0x20000584
 8002878:	2000053c 	.word	0x2000053c
 800287c:	20000554 	.word	0x20000554

08002880 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8002888:	4b3c      	ldr	r3, [pc, #240]	; (800297c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b07      	cmp	r3, #7
 800288e:	d852      	bhi.n	8002936 <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	e046      	b.n	8002924 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8002896:	4b39      	ldr	r3, [pc, #228]	; (800297c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	4a37      	ldr	r2, [pc, #220]	; (8002980 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80028a2:	5cd3      	ldrb	r3, [r2, r3]
 80028a4:	461a      	mov	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	dd01      	ble.n	80028b8 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 80028b4:	213a      	movs	r1, #58	; 0x3a
 80028b6:	e000      	b.n	80028ba <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 80028b8:	211d      	movs	r1, #29
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	3318      	adds	r3, #24
 80028be:	4a31      	ldr	r2, [pc, #196]	; (8002984 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80028c0:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 80028c2:	4b2e      	ldr	r3, [pc, #184]	; (800297c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	4613      	mov	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	3301      	adds	r3, #1
 80028ce:	4a2c      	ldr	r2, [pc, #176]	; (8002980 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80028d0:	5cd3      	ldrb	r3, [r2, r3]
 80028d2:	461a      	mov	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028de:	2b00      	cmp	r3, #0
 80028e0:	dd01      	ble.n	80028e6 <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 80028e2:	213a      	movs	r1, #58	; 0x3a
 80028e4:	e000      	b.n	80028e8 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 80028e6:	211d      	movs	r1, #29
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	3320      	adds	r3, #32
 80028ec:	4a25      	ldr	r2, [pc, #148]	; (8002984 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80028ee:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 80028f0:	4b22      	ldr	r3, [pc, #136]	; (800297c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4613      	mov	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	3302      	adds	r3, #2
 80028fc:	4a20      	ldr	r2, [pc, #128]	; (8002980 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80028fe:	5cd3      	ldrb	r3, [r2, r3]
 8002900:	461a      	mov	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290c:	2b00      	cmp	r3, #0
 800290e:	dd01      	ble.n	8002914 <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 8002910:	213a      	movs	r1, #58	; 0x3a
 8002912:	e000      	b.n	8002916 <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 8002914:	211d      	movs	r1, #29
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3328      	adds	r3, #40	; 0x28
 800291a:	4a1a      	ldr	r2, [pc, #104]	; (8002984 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800291c:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	3301      	adds	r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b07      	cmp	r3, #7
 8002928:	d9b5      	bls.n	8002896 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 800292a:	4b14      	ldr	r3, [pc, #80]	; (800297c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	3301      	adds	r3, #1
 8002930:	4a12      	ldr	r2, [pc, #72]	; (800297c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002932:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
  }
}
 8002934:	e01d      	b.n	8002972 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b09      	cmp	r3, #9
 800293c:	d812      	bhi.n	8002964 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 800293e:	2318      	movs	r3, #24
 8002940:	72fb      	strb	r3, [r7, #11]
 8002942:	e006      	b.n	8002952 <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 8002944:	7afb      	ldrb	r3, [r7, #11]
 8002946:	4a0f      	ldr	r2, [pc, #60]	; (8002984 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8002948:	2100      	movs	r1, #0
 800294a:	54d1      	strb	r1, [r2, r3]
 800294c:	7afb      	ldrb	r3, [r7, #11]
 800294e:	3301      	adds	r3, #1
 8002950:	72fb      	strb	r3, [r7, #11]
 8002952:	7afb      	ldrb	r3, [r7, #11]
 8002954:	2b2f      	cmp	r3, #47	; 0x2f
 8002956:	d9f5      	bls.n	8002944 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>
    ++wr_buf_p;
 8002958:	4b08      	ldr	r3, [pc, #32]	; (800297c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	3301      	adds	r3, #1
 800295e:	4a07      	ldr	r2, [pc, #28]	; (800297c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002960:	6013      	str	r3, [r2, #0]
}
 8002962:	e006      	b.n	8002972 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
    wr_buf_p = 0;
 8002964:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800296a:	2100      	movs	r1, #0
 800296c:	4806      	ldr	r0, [pc, #24]	; (8002988 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 800296e:	f005 ff37 	bl	80087e0 <HAL_TIM_PWM_Stop_DMA>
}
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000584 	.word	0x20000584
 8002980:	2000053c 	.word	0x2000053c
 8002984:	20000554 	.word	0x20000554
 8002988:	20000370 	.word	0x20000370

0800298c <NeoPixel_set_led_cycle>:

void NeoPixel_set_led_cycle(){
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_LED; i++) {
 8002992:	2300      	movs	r3, #0
 8002994:	71fb      	strb	r3, [r7, #7]
 8002996:	e014      	b.n	80029c2 <NeoPixel_set_led_cycle+0x36>
		 NeoPixel_hslColor(angle + (i * angle_difference), 255, 127);
 8002998:	220b      	movs	r2, #11
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	fb02 f303 	mul.w	r3, r2, r3
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <NeoPixel_set_led_cycle+0x5c>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	4413      	add	r3, r2
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	227f      	movs	r2, #127	; 0x7f
 80029ac:	21ff      	movs	r1, #255	; 0xff
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 f81c 	bl	80029ec <NeoPixel_hslColor>
		 NeoPixel_led_set_RGB(i);
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff fdf4 	bl	80025a4 <NeoPixel_led_set_RGB>
	for(uint8_t i = 0; i < MAX_LED; i++) {
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	3301      	adds	r3, #1
 80029c0:	71fb      	strb	r3, [r7, #7]
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d9e7      	bls.n	8002998 <NeoPixel_set_led_cycle+0xc>
	}
	++angle;
 80029c8:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <NeoPixel_set_led_cycle+0x5c>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	3301      	adds	r3, #1
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <NeoPixel_set_led_cycle+0x5c>)
 80029d2:	701a      	strb	r2, [r3, #0]
	NeoPixel_led_render();
 80029d4:	f7ff fe2e 	bl	8002634 <NeoPixel_led_render>
	HAL_Delay(10);
 80029d8:	200a      	movs	r0, #10
 80029da:	f000 fe07 	bl	80035ec <HAL_Delay>
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	2000058b 	.word	0x2000058b

080029ec <NeoPixel_hslColor>:

void  NeoPixel_hslColor(uint8_t h, uint8_t s, uint8_t l){
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
 80029f6:	460b      	mov	r3, r1
 80029f8:	71bb      	strb	r3, [r7, #6]
 80029fa:	4613      	mov	r3, r2
 80029fc:	717b      	strb	r3, [r7, #5]
	NeoPixel_hsl_to_rgb(h, s, l);
 80029fe:	797a      	ldrb	r2, [r7, #5]
 8002a00:	79b9      	ldrb	r1, [r7, #6]
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 f805 	bl	8002a14 <NeoPixel_hsl_to_rgb>
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <NeoPixel_hsl_to_rgb>:
void NeoPixel_hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	71fb      	strb	r3, [r7, #7]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	71bb      	strb	r3, [r7, #6]
 8002a22:	4613      	mov	r3, r2
 8002a24:	717b      	strb	r3, [r7, #5]
	if(l == 0) return;
 8002a26:	797b      	ldrb	r3, [r7, #5]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 80b6 	beq.w	8002b9a <NeoPixel_hsl_to_rgb+0x186>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8002a2e:	797b      	ldrb	r3, [r7, #5]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	3301      	adds	r3, #1
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8002a38:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	db09      	blt.n	8002a54 <NeoPixel_hsl_to_rgb+0x40>
 8002a40:	89bb      	ldrh	r3, [r7, #12]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	79ba      	ldrb	r2, [r7, #6]
 8002a48:	fb02 f303 	mul.w	r3, r2, r3
 8002a4c:	121b      	asrs	r3, r3, #8
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	74fb      	strb	r3, [r7, #19]
 8002a52:	e00a      	b.n	8002a6a <NeoPixel_hsl_to_rgb+0x56>
	else            c = (512 - (l1 << 1)) * s >> 8;
 8002a54:	89bb      	ldrh	r3, [r7, #12]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002a5e:	79ba      	ldrb	r2, [r7, #6]
 8002a60:	fb02 f303 	mul.w	r3, r2, r3
 8002a64:	121b      	asrs	r3, r3, #8
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	461a      	mov	r2, r3
 8002a70:	0052      	lsls	r2, r2, #1
 8002a72:	4413      	add	r3, r2
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8002a7a:	897b      	ldrh	r3, [r7, #10]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 8002a82:	7d3b      	ldrb	r3, [r7, #20]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3301      	adds	r3, #1
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8002a8e:	897b      	ldrh	r3, [r7, #10]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <NeoPixel_hsl_to_rgb+0x9a>
 8002a9a:	89fb      	ldrh	r3, [r7, #14]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	7cfa      	ldrb	r2, [r7, #19]
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	121b      	asrs	r3, r3, #8
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	74bb      	strb	r3, [r7, #18]
 8002aac:	e00a      	b.n	8002ac4 <NeoPixel_hsl_to_rgb+0xb0>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8002aae:	89fb      	ldrh	r3, [r7, #14]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002ab6:	7cfa      	ldrb	r2, [r7, #19]
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	121b      	asrs	r3, r3, #8
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	74bb      	strb	r3, [r7, #18]

	 m = l - (c >> 1);
 8002ac4:	7cfb      	ldrb	r3, [r7, #19]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	797a      	ldrb	r2, [r7, #5]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	747b      	strb	r3, [r7, #17]
	 switch(H >> 8) {       // High byte = sextant of colorwheel
 8002ad4:	897b      	ldrh	r3, [r7, #10]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	0a1b      	lsrs	r3, r3, #8
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d83a      	bhi.n	8002b56 <NeoPixel_hsl_to_rgb+0x142>
 8002ae0:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <NeoPixel_hsl_to_rgb+0xd4>)
 8002ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae6:	bf00      	nop
 8002ae8:	08002afd 	.word	0x08002afd
 8002aec:	08002b0f 	.word	0x08002b0f
 8002af0:	08002b21 	.word	0x08002b21
 8002af4:	08002b33 	.word	0x08002b33
 8002af8:	08002b45 	.word	0x08002b45
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8002afc:	7cfb      	ldrb	r3, [r7, #19]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	75fb      	strb	r3, [r7, #23]
 8002b02:	7cbb      	ldrb	r3, [r7, #18]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	75bb      	strb	r3, [r7, #22]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	757b      	strb	r3, [r7, #21]
 8002b0c:	e02c      	b.n	8002b68 <NeoPixel_hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8002b0e:	7cbb      	ldrb	r3, [r7, #18]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	75fb      	strb	r3, [r7, #23]
 8002b14:	7cfb      	ldrb	r3, [r7, #19]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	75bb      	strb	r3, [r7, #22]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	757b      	strb	r3, [r7, #21]
 8002b1e:	e023      	b.n	8002b68 <NeoPixel_hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8002b20:	2300      	movs	r3, #0
 8002b22:	75fb      	strb	r3, [r7, #23]
 8002b24:	7cfb      	ldrb	r3, [r7, #19]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	75bb      	strb	r3, [r7, #22]
 8002b2a:	7cbb      	ldrb	r3, [r7, #18]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	757b      	strb	r3, [r7, #21]
 8002b30:	e01a      	b.n	8002b68 <NeoPixel_hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 8002b32:	2300      	movs	r3, #0
 8002b34:	75fb      	strb	r3, [r7, #23]
 8002b36:	7cbb      	ldrb	r3, [r7, #18]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	75bb      	strb	r3, [r7, #22]
 8002b3c:	7cfb      	ldrb	r3, [r7, #19]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	757b      	strb	r3, [r7, #21]
 8002b42:	e011      	b.n	8002b68 <NeoPixel_hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 8002b44:	7cbb      	ldrb	r3, [r7, #18]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	75fb      	strb	r3, [r7, #23]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	75bb      	strb	r3, [r7, #22]
 8002b4e:	7cfb      	ldrb	r3, [r7, #19]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	757b      	strb	r3, [r7, #21]
 8002b54:	e008      	b.n	8002b68 <NeoPixel_hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 8002b56:	7cfb      	ldrb	r3, [r7, #19]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	75fb      	strb	r3, [r7, #23]
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	75bb      	strb	r3, [r7, #22]
 8002b60:	7cbb      	ldrb	r3, [r7, #18]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	757b      	strb	r3, [r7, #21]
 8002b66:	bf00      	nop
	}
     NeoPixel_RGB_Color = (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8002b68:	7dfb      	ldrb	r3, [r7, #23]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	7c7b      	ldrb	r3, [r7, #17]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	041a      	lsls	r2, r3, #16
 8002b76:	7dbb      	ldrb	r3, [r7, #22]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	7c7b      	ldrb	r3, [r7, #17]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	440b      	add	r3, r1
 8002b82:	021b      	lsls	r3, r3, #8
 8002b84:	431a      	orrs	r2, r3
 8002b86:	7d7b      	ldrb	r3, [r7, #21]
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	7c7b      	ldrb	r3, [r7, #17]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	440b      	add	r3, r1
 8002b92:	4313      	orrs	r3, r2
 8002b94:	4a03      	ldr	r2, [pc, #12]	; (8002ba4 <NeoPixel_hsl_to_rgb+0x190>)
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	e000      	b.n	8002b9c <NeoPixel_hsl_to_rgb+0x188>
	if(l == 0) return;
 8002b9a:	bf00      	nop
}
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr
 8002ba4:	2000001c 	.word	0x2000001c

08002ba8 <SCH_Init>:

sTask SCH_tasks_G[SCH_MAX_TASKS];

sTask* head = NULL;

void SCH_Init(void){
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
    unsigned char i;
    for (i = 0; i < SCH_MAX_TASKS; i++) {
 8002bae:	2300      	movs	r3, #0
 8002bb0:	71fb      	strb	r3, [r7, #7]
 8002bb2:	e006      	b.n	8002bc2 <SCH_Init+0x1a>
        SCH_Delete_Task(i);
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 f8c8 	bl	8002d4c <SCH_Delete_Task>
    for (i = 0; i < SCH_MAX_TASKS; i++) {
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	71fb      	strb	r3, [r7, #7]
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	2b27      	cmp	r3, #39	; 0x27
 8002bc6:	d9f5      	bls.n	8002bb4 <SCH_Init+0xc>
    }
}
 8002bc8:	bf00      	nop
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <SCH_Update>:
void SCH_Update(void){
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
	 unsigned char Index;
	    // NOTE: calculations are in *TICKS* (not milliseconds)
	    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8002bda:	2300      	movs	r3, #0
 8002bdc:	71fb      	strb	r3, [r7, #7]
 8002bde:	e05d      	b.n	8002c9c <SCH_Update+0xc8>
	        // Check if there is a task at this location
	        if (SCH_tasks_G[Index].pTask){
 8002be0:	79fa      	ldrb	r2, [r7, #7]
 8002be2:	4933      	ldr	r1, [pc, #204]	; (8002cb0 <SCH_Update+0xdc>)
 8002be4:	4613      	mov	r3, r2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	4413      	add	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	440b      	add	r3, r1
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d050      	beq.n	8002c96 <SCH_Update+0xc2>
	            if (SCH_tasks_G[Index].Delay == 0) {
 8002bf4:	79fa      	ldrb	r2, [r7, #7]
 8002bf6:	492e      	ldr	r1, [pc, #184]	; (8002cb0 <SCH_Update+0xdc>)
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	3304      	adds	r3, #4
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d132      	bne.n	8002c70 <SCH_Update+0x9c>
	                // The task is due to run
	                // Inc. the 'RunMe' flag
	                SCH_tasks_G[Index].RunMe += 1;
 8002c0a:	79fa      	ldrb	r2, [r7, #7]
 8002c0c:	4928      	ldr	r1, [pc, #160]	; (8002cb0 <SCH_Update+0xdc>)
 8002c0e:	4613      	mov	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	4413      	add	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	440b      	add	r3, r1
 8002c18:	330c      	adds	r3, #12
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	79fa      	ldrb	r2, [r7, #7]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	b2d8      	uxtb	r0, r3
 8002c22:	4923      	ldr	r1, [pc, #140]	; (8002cb0 <SCH_Update+0xdc>)
 8002c24:	4613      	mov	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	440b      	add	r3, r1
 8002c2e:	330c      	adds	r3, #12
 8002c30:	4602      	mov	r2, r0
 8002c32:	701a      	strb	r2, [r3, #0]
	                if (SCH_tasks_G[Index].Period) {
 8002c34:	79fa      	ldrb	r2, [r7, #7]
 8002c36:	491e      	ldr	r1, [pc, #120]	; (8002cb0 <SCH_Update+0xdc>)
 8002c38:	4613      	mov	r3, r2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4413      	add	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	440b      	add	r3, r1
 8002c42:	3308      	adds	r3, #8
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d025      	beq.n	8002c96 <SCH_Update+0xc2>
	                    // Schedule periodic tasks to run again
	                    SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8002c4a:	79f9      	ldrb	r1, [r7, #7]
 8002c4c:	79fa      	ldrb	r2, [r7, #7]
 8002c4e:	4818      	ldr	r0, [pc, #96]	; (8002cb0 <SCH_Update+0xdc>)
 8002c50:	460b      	mov	r3, r1
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	440b      	add	r3, r1
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4403      	add	r3, r0
 8002c5a:	3308      	adds	r3, #8
 8002c5c:	6819      	ldr	r1, [r3, #0]
 8002c5e:	4814      	ldr	r0, [pc, #80]	; (8002cb0 <SCH_Update+0xdc>)
 8002c60:	4613      	mov	r3, r2
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	4413      	add	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4403      	add	r3, r0
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	6019      	str	r1, [r3, #0]
 8002c6e:	e012      	b.n	8002c96 <SCH_Update+0xc2>
	                }
	            } else {
	                // Not yet ready to run: just decrement the delay
	                SCH_tasks_G[Index].Delay -= 1;
 8002c70:	79fa      	ldrb	r2, [r7, #7]
 8002c72:	490f      	ldr	r1, [pc, #60]	; (8002cb0 <SCH_Update+0xdc>)
 8002c74:	4613      	mov	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4413      	add	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	440b      	add	r3, r1
 8002c7e:	3304      	adds	r3, #4
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	79fa      	ldrb	r2, [r7, #7]
 8002c84:	1e59      	subs	r1, r3, #1
 8002c86:	480a      	ldr	r0, [pc, #40]	; (8002cb0 <SCH_Update+0xdc>)
 8002c88:	4613      	mov	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4403      	add	r3, r0
 8002c92:	3304      	adds	r3, #4
 8002c94:	6019      	str	r1, [r3, #0]
	    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	71fb      	strb	r3, [r7, #7]
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	2b27      	cmp	r3, #39	; 0x27
 8002ca0:	d99e      	bls.n	8002be0 <SCH_Update+0xc>
/* O(1)
 * 	if(head != NULL){
		head->Delay--;
	}
 * */
}
 8002ca2:	bf00      	nop
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	2000058c 	.word	0x2000058c

08002cb4 <SCH_Dispatch_Tasks>:
	 return index;
	 * */

}
void SCH_Dispatch_Tasks(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
    unsigned char Index;
    // Dispatches (runs) the next task (if one is ready)
    for (Index = 0; Index < SCH_MAX_TASKS; Index++){
 8002cba:	2300      	movs	r3, #0
 8002cbc:	71fb      	strb	r3, [r7, #7]
 8002cbe:	e03a      	b.n	8002d36 <SCH_Dispatch_Tasks+0x82>
        if (SCH_tasks_G[Index].RunMe > 0) {
 8002cc0:	79fa      	ldrb	r2, [r7, #7]
 8002cc2:	4921      	ldr	r1, [pc, #132]	; (8002d48 <SCH_Dispatch_Tasks+0x94>)
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4413      	add	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	440b      	add	r3, r1
 8002cce:	330c      	adds	r3, #12
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d02c      	beq.n	8002d30 <SCH_Dispatch_Tasks+0x7c>
            (*SCH_tasks_G[Index].pTask)(); // Run the task
 8002cd6:	79fa      	ldrb	r2, [r7, #7]
 8002cd8:	491b      	ldr	r1, [pc, #108]	; (8002d48 <SCH_Dispatch_Tasks+0x94>)
 8002cda:	4613      	mov	r3, r2
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	4413      	add	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	440b      	add	r3, r1
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4798      	blx	r3
            SCH_tasks_G[Index].RunMe -= 1; // Reset / reduce RunMe flag
 8002ce8:	79fa      	ldrb	r2, [r7, #7]
 8002cea:	4917      	ldr	r1, [pc, #92]	; (8002d48 <SCH_Dispatch_Tasks+0x94>)
 8002cec:	4613      	mov	r3, r2
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	330c      	adds	r3, #12
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	79fa      	ldrb	r2, [r7, #7]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b2d8      	uxtb	r0, r3
 8002d00:	4911      	ldr	r1, [pc, #68]	; (8002d48 <SCH_Dispatch_Tasks+0x94>)
 8002d02:	4613      	mov	r3, r2
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	4413      	add	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	440b      	add	r3, r1
 8002d0c:	330c      	adds	r3, #12
 8002d0e:	4602      	mov	r2, r0
 8002d10:	701a      	strb	r2, [r3, #0]
            // Periodic tasks will automatically run again
            // - if this is a 'one shot' task, remove it from the array
            if (SCH_tasks_G[Index].Period == 0)
 8002d12:	79fa      	ldrb	r2, [r7, #7]
 8002d14:	490c      	ldr	r1, [pc, #48]	; (8002d48 <SCH_Dispatch_Tasks+0x94>)
 8002d16:	4613      	mov	r3, r2
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	4413      	add	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	440b      	add	r3, r1
 8002d20:	3308      	adds	r3, #8
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d103      	bne.n	8002d30 <SCH_Dispatch_Tasks+0x7c>
            {
                SCH_Delete_Task(Index);
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f80e 	bl	8002d4c <SCH_Delete_Task>
    for (Index = 0; Index < SCH_MAX_TASKS; Index++){
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	3301      	adds	r3, #1
 8002d34:	71fb      	strb	r3, [r7, #7]
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	2b27      	cmp	r3, #39	; 0x27
 8002d3a:	d9c1      	bls.n	8002cc0 <SCH_Dispatch_Tasks+0xc>
		head = head->pNext;
		SCH_Delete_Task(del_index);
	}
	*/

}
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	2000058c 	.word	0x2000058c

08002d4c <SCH_Delete_Task>:
void SCH_Delete_Task(const unsigned char TASK_INDEX){
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	71fb      	strb	r3, [r7, #7]
	if(SCH_tasks_G[TASK_INDEX].pTask == 0){
 8002d56:	79fa      	ldrb	r2, [r7, #7]
 8002d58:	491f      	ldr	r1, [pc, #124]	; (8002dd8 <SCH_Delete_Task+0x8c>)
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	440b      	add	r3, r1
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d031      	beq.n	8002dce <SCH_Delete_Task+0x82>
		return ;
	}
	else{
	    SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 8002d6a:	79fa      	ldrb	r2, [r7, #7]
 8002d6c:	491a      	ldr	r1, [pc, #104]	; (8002dd8 <SCH_Delete_Task+0x8c>)
 8002d6e:	4613      	mov	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	440b      	add	r3, r1
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
	    SCH_tasks_G[TASK_INDEX].Delay = 0;
 8002d7c:	79fa      	ldrb	r2, [r7, #7]
 8002d7e:	4916      	ldr	r1, [pc, #88]	; (8002dd8 <SCH_Delete_Task+0x8c>)
 8002d80:	4613      	mov	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4413      	add	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	440b      	add	r3, r1
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
	    SCH_tasks_G[TASK_INDEX].Period = 0;
 8002d90:	79fa      	ldrb	r2, [r7, #7]
 8002d92:	4911      	ldr	r1, [pc, #68]	; (8002dd8 <SCH_Delete_Task+0x8c>)
 8002d94:	4613      	mov	r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	4413      	add	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3308      	adds	r3, #8
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
	    SCH_tasks_G[TASK_INDEX].pNext = 0;
 8002da4:	79fa      	ldrb	r2, [r7, #7]
 8002da6:	490c      	ldr	r1, [pc, #48]	; (8002dd8 <SCH_Delete_Task+0x8c>)
 8002da8:	4613      	mov	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	4413      	add	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	440b      	add	r3, r1
 8002db2:	3310      	adds	r3, #16
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
	    SCH_tasks_G[TASK_INDEX].TaskID = 0;
 8002db8:	79fa      	ldrb	r2, [r7, #7]
 8002dba:	4907      	ldr	r1, [pc, #28]	; (8002dd8 <SCH_Delete_Task+0x8c>)
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4413      	add	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	440b      	add	r3, r1
 8002dc6:	3314      	adds	r3, #20
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	e000      	b.n	8002dd0 <SCH_Delete_Task+0x84>
		return ;
 8002dce:	bf00      	nop
	}
}
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr
 8002dd8:	2000058c 	.word	0x2000058c

08002ddc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002de2:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <HAL_MspInit+0x5c>)
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	4a14      	ldr	r2, [pc, #80]	; (8002e38 <HAL_MspInit+0x5c>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	6193      	str	r3, [r2, #24]
 8002dee:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_MspInit+0x5c>)
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <HAL_MspInit+0x5c>)
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	4a0e      	ldr	r2, [pc, #56]	; (8002e38 <HAL_MspInit+0x5c>)
 8002e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e04:	61d3      	str	r3, [r2, #28]
 8002e06:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <HAL_MspInit+0x5c>)
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	607b      	str	r3, [r7, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e12:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <HAL_MspInit+0x60>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	4a04      	ldr	r2, [pc, #16]	; (8002e3c <HAL_MspInit+0x60>)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40010000 	.word	0x40010000

08002e40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e48:	f107 0310 	add.w	r3, r7, #16
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a18      	ldr	r2, [pc, #96]	; (8002ebc <HAL_ADC_MspInit+0x7c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d129      	bne.n	8002eb4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e60:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <HAL_ADC_MspInit+0x80>)
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	4a16      	ldr	r2, [pc, #88]	; (8002ec0 <HAL_ADC_MspInit+0x80>)
 8002e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e6a:	6193      	str	r3, [r2, #24]
 8002e6c:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <HAL_ADC_MspInit+0x80>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_ADC_MspInit+0x80>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	4a10      	ldr	r2, [pc, #64]	; (8002ec0 <HAL_ADC_MspInit+0x80>)
 8002e7e:	f043 0304 	orr.w	r3, r3, #4
 8002e82:	6193      	str	r3, [r2, #24]
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_ADC_MspInit+0x80>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e90:	2301      	movs	r3, #1
 8002e92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e94:	2303      	movs	r3, #3
 8002e96:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e98:	f107 0310 	add.w	r3, r7, #16
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4809      	ldr	r0, [pc, #36]	; (8002ec4 <HAL_ADC_MspInit+0x84>)
 8002ea0:	f001 fb78 	bl	8004594 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	2012      	movs	r0, #18
 8002eaa:	f001 f88e 	bl	8003fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002eae:	2012      	movs	r0, #18
 8002eb0:	f001 f8a7 	bl	8004002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002eb4:	bf00      	nop
 8002eb6:	3720      	adds	r7, #32
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40012400 	.word	0x40012400
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40010800 	.word	0x40010800

08002ec8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	; 0x28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 0314 	add.w	r3, r7, #20
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a25      	ldr	r2, [pc, #148]	; (8002f78 <HAL_I2C_MspInit+0xb0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d142      	bne.n	8002f6e <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee8:	4b24      	ldr	r3, [pc, #144]	; (8002f7c <HAL_I2C_MspInit+0xb4>)
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	4a23      	ldr	r2, [pc, #140]	; (8002f7c <HAL_I2C_MspInit+0xb4>)
 8002eee:	f043 0308 	orr.w	r3, r3, #8
 8002ef2:	6193      	str	r3, [r2, #24]
 8002ef4:	4b21      	ldr	r3, [pc, #132]	; (8002f7c <HAL_I2C_MspInit+0xb4>)
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f06:	2312      	movs	r3, #18
 8002f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f0e:	f107 0314 	add.w	r3, r7, #20
 8002f12:	4619      	mov	r1, r3
 8002f14:	481a      	ldr	r0, [pc, #104]	; (8002f80 <HAL_I2C_MspInit+0xb8>)
 8002f16:	f001 fb3d 	bl	8004594 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002f1a:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <HAL_I2C_MspInit+0xbc>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	f043 0302 	orr.w	r3, r3, #2
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f30:	4a14      	ldr	r2, [pc, #80]	; (8002f84 <HAL_I2C_MspInit+0xbc>)
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f36:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <HAL_I2C_MspInit+0xb4>)
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	4a10      	ldr	r2, [pc, #64]	; (8002f7c <HAL_I2C_MspInit+0xb4>)
 8002f3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f40:	61d3      	str	r3, [r2, #28]
 8002f42:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <HAL_I2C_MspInit+0xb4>)
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2100      	movs	r1, #0
 8002f52:	201f      	movs	r0, #31
 8002f54:	f001 f839 	bl	8003fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002f58:	201f      	movs	r0, #31
 8002f5a:	f001 f852 	bl	8004002 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2100      	movs	r1, #0
 8002f62:	2020      	movs	r0, #32
 8002f64:	f001 f831 	bl	8003fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002f68:	2020      	movs	r0, #32
 8002f6a:	f001 f84a 	bl	8004002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f6e:	bf00      	nop
 8002f70:	3728      	adds	r7, #40	; 0x28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40005400 	.word	0x40005400
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40010c00 	.word	0x40010c00
 8002f84:	40010000 	.word	0x40010000

08002f88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a3b      	ldr	r2, [pc, #236]	; (8003084 <HAL_TIM_Base_MspInit+0xfc>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d133      	bne.n	8003002 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f9a:	4b3b      	ldr	r3, [pc, #236]	; (8003088 <HAL_TIM_Base_MspInit+0x100>)
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	4a3a      	ldr	r2, [pc, #232]	; (8003088 <HAL_TIM_Base_MspInit+0x100>)
 8002fa0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fa4:	6193      	str	r3, [r2, #24]
 8002fa6:	4b38      	ldr	r3, [pc, #224]	; (8003088 <HAL_TIM_Base_MspInit+0x100>)
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8002fb2:	4b36      	ldr	r3, [pc, #216]	; (800308c <HAL_TIM_Base_MspInit+0x104>)
 8002fb4:	4a36      	ldr	r2, [pc, #216]	; (8003090 <HAL_TIM_Base_MspInit+0x108>)
 8002fb6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fb8:	4b34      	ldr	r3, [pc, #208]	; (800308c <HAL_TIM_Base_MspInit+0x104>)
 8002fba:	2210      	movs	r2, #16
 8002fbc:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fbe:	4b33      	ldr	r3, [pc, #204]	; (800308c <HAL_TIM_Base_MspInit+0x104>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002fc4:	4b31      	ldr	r3, [pc, #196]	; (800308c <HAL_TIM_Base_MspInit+0x104>)
 8002fc6:	2280      	movs	r2, #128	; 0x80
 8002fc8:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fca:	4b30      	ldr	r3, [pc, #192]	; (800308c <HAL_TIM_Base_MspInit+0x104>)
 8002fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd0:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fd2:	4b2e      	ldr	r3, [pc, #184]	; (800308c <HAL_TIM_Base_MspInit+0x104>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8002fd8:	4b2c      	ldr	r3, [pc, #176]	; (800308c <HAL_TIM_Base_MspInit+0x104>)
 8002fda:	2220      	movs	r2, #32
 8002fdc:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002fde:	4b2b      	ldr	r3, [pc, #172]	; (800308c <HAL_TIM_Base_MspInit+0x104>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002fe4:	4829      	ldr	r0, [pc, #164]	; (800308c <HAL_TIM_Base_MspInit+0x104>)
 8002fe6:	f001 f827 	bl	8004038 <HAL_DMA_Init>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 8002ff0:	f7ff fa91 	bl	8002516 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a25      	ldr	r2, [pc, #148]	; (800308c <HAL_TIM_Base_MspInit+0x104>)
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24
 8002ffa:	4a24      	ldr	r2, [pc, #144]	; (800308c <HAL_TIM_Base_MspInit+0x104>)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003000:	e03c      	b.n	800307c <HAL_TIM_Base_MspInit+0xf4>
  else if(htim_base->Instance==TIM2)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300a:	d114      	bne.n	8003036 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800300c:	4b1e      	ldr	r3, [pc, #120]	; (8003088 <HAL_TIM_Base_MspInit+0x100>)
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	4a1d      	ldr	r2, [pc, #116]	; (8003088 <HAL_TIM_Base_MspInit+0x100>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	61d3      	str	r3, [r2, #28]
 8003018:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <HAL_TIM_Base_MspInit+0x100>)
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003024:	2200      	movs	r2, #0
 8003026:	2100      	movs	r1, #0
 8003028:	201c      	movs	r0, #28
 800302a:	f000 ffce 	bl	8003fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800302e:	201c      	movs	r0, #28
 8003030:	f000 ffe7 	bl	8004002 <HAL_NVIC_EnableIRQ>
}
 8003034:	e022      	b.n	800307c <HAL_TIM_Base_MspInit+0xf4>
  else if(htim_base->Instance==TIM3)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a16      	ldr	r2, [pc, #88]	; (8003094 <HAL_TIM_Base_MspInit+0x10c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d10c      	bne.n	800305a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003040:	4b11      	ldr	r3, [pc, #68]	; (8003088 <HAL_TIM_Base_MspInit+0x100>)
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	4a10      	ldr	r2, [pc, #64]	; (8003088 <HAL_TIM_Base_MspInit+0x100>)
 8003046:	f043 0302 	orr.w	r3, r3, #2
 800304a:	61d3      	str	r3, [r2, #28]
 800304c:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <HAL_TIM_Base_MspInit+0x100>)
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	68fb      	ldr	r3, [r7, #12]
}
 8003058:	e010      	b.n	800307c <HAL_TIM_Base_MspInit+0xf4>
  else if(htim_base->Instance==TIM4)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a0e      	ldr	r2, [pc, #56]	; (8003098 <HAL_TIM_Base_MspInit+0x110>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d10b      	bne.n	800307c <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003064:	4b08      	ldr	r3, [pc, #32]	; (8003088 <HAL_TIM_Base_MspInit+0x100>)
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	4a07      	ldr	r2, [pc, #28]	; (8003088 <HAL_TIM_Base_MspInit+0x100>)
 800306a:	f043 0304 	orr.w	r3, r3, #4
 800306e:	61d3      	str	r3, [r2, #28]
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <HAL_TIM_Base_MspInit+0x100>)
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	68bb      	ldr	r3, [r7, #8]
}
 800307c:	bf00      	nop
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40012c00 	.word	0x40012c00
 8003088:	40021000 	.word	0x40021000
 800308c:	20000490 	.word	0x20000490
 8003090:	4002001c 	.word	0x4002001c
 8003094:	40000400 	.word	0x40000400
 8003098:	40000800 	.word	0x40000800

0800309c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a4:	f107 0314 	add.w	r3, r7, #20
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a28      	ldr	r2, [pc, #160]	; (8003158 <HAL_TIM_MspPostInit+0xbc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d119      	bne.n	80030f0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030bc:	4b27      	ldr	r3, [pc, #156]	; (800315c <HAL_TIM_MspPostInit+0xc0>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	4a26      	ldr	r2, [pc, #152]	; (800315c <HAL_TIM_MspPostInit+0xc0>)
 80030c2:	f043 0304 	orr.w	r3, r3, #4
 80030c6:	6193      	str	r3, [r2, #24]
 80030c8:	4b24      	ldr	r3, [pc, #144]	; (800315c <HAL_TIM_MspPostInit+0xc0>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80030d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030da:	2302      	movs	r3, #2
 80030dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030de:	2302      	movs	r3, #2
 80030e0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e2:	f107 0314 	add.w	r3, r7, #20
 80030e6:	4619      	mov	r1, r3
 80030e8:	481d      	ldr	r0, [pc, #116]	; (8003160 <HAL_TIM_MspPostInit+0xc4>)
 80030ea:	f001 fa53 	bl	8004594 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80030ee:	e02f      	b.n	8003150 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f8:	d12a      	bne.n	8003150 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fa:	4b18      	ldr	r3, [pc, #96]	; (800315c <HAL_TIM_MspPostInit+0xc0>)
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	4a17      	ldr	r2, [pc, #92]	; (800315c <HAL_TIM_MspPostInit+0xc0>)
 8003100:	f043 0304 	orr.w	r3, r3, #4
 8003104:	6193      	str	r3, [r2, #24]
 8003106:	4b15      	ldr	r3, [pc, #84]	; (800315c <HAL_TIM_MspPostInit+0xc0>)
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003118:	2302      	movs	r3, #2
 800311a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311c:	2302      	movs	r3, #2
 800311e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003120:	f107 0314 	add.w	r3, r7, #20
 8003124:	4619      	mov	r1, r3
 8003126:	480e      	ldr	r0, [pc, #56]	; (8003160 <HAL_TIM_MspPostInit+0xc4>)
 8003128:	f001 fa34 	bl	8004594 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800312c:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <HAL_TIM_MspPostInit+0xc8>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
 800314a:	4a06      	ldr	r2, [pc, #24]	; (8003164 <HAL_TIM_MspPostInit+0xc8>)
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	6053      	str	r3, [r2, #4]
}
 8003150:	bf00      	nop
 8003152:	3728      	adds	r7, #40	; 0x28
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40012c00 	.word	0x40012c00
 800315c:	40021000 	.word	0x40021000
 8003160:	40010800 	.word	0x40010800
 8003164:	40010000 	.word	0x40010000

08003168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003170:	f107 0310 	add.w	r3, r7, #16
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a19      	ldr	r2, [pc, #100]	; (80031e8 <HAL_UART_MspInit+0x80>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d12b      	bne.n	80031e0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003188:	4b18      	ldr	r3, [pc, #96]	; (80031ec <HAL_UART_MspInit+0x84>)
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	4a17      	ldr	r2, [pc, #92]	; (80031ec <HAL_UART_MspInit+0x84>)
 800318e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003192:	61d3      	str	r3, [r2, #28]
 8003194:	4b15      	ldr	r3, [pc, #84]	; (80031ec <HAL_UART_MspInit+0x84>)
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a0:	4b12      	ldr	r3, [pc, #72]	; (80031ec <HAL_UART_MspInit+0x84>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	4a11      	ldr	r2, [pc, #68]	; (80031ec <HAL_UART_MspInit+0x84>)
 80031a6:	f043 0304 	orr.w	r3, r3, #4
 80031aa:	6193      	str	r3, [r2, #24]
 80031ac:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <HAL_UART_MspInit+0x84>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80031b8:	230c      	movs	r3, #12
 80031ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031bc:	2302      	movs	r3, #2
 80031be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c0:	2302      	movs	r3, #2
 80031c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c4:	f107 0310 	add.w	r3, r7, #16
 80031c8:	4619      	mov	r1, r3
 80031ca:	4809      	ldr	r0, [pc, #36]	; (80031f0 <HAL_UART_MspInit+0x88>)
 80031cc:	f001 f9e2 	bl	8004594 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80031d0:	2200      	movs	r2, #0
 80031d2:	2100      	movs	r1, #0
 80031d4:	2026      	movs	r0, #38	; 0x26
 80031d6:	f000 fef8 	bl	8003fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031da:	2026      	movs	r0, #38	; 0x26
 80031dc:	f000 ff11 	bl	8004002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031e0:	bf00      	nop
 80031e2:	3720      	adds	r7, #32
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40004400 	.word	0x40004400
 80031ec:	40021000 	.word	0x40021000
 80031f0:	40010800 	.word	0x40010800

080031f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031f8:	e7fe      	b.n	80031f8 <NMI_Handler+0x4>

080031fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031fa:	b480      	push	{r7}
 80031fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031fe:	e7fe      	b.n	80031fe <HardFault_Handler+0x4>

08003200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003204:	e7fe      	b.n	8003204 <MemManage_Handler+0x4>

08003206 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800320a:	e7fe      	b.n	800320a <BusFault_Handler+0x4>

0800320c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003210:	e7fe      	b.n	8003210 <UsageFault_Handler+0x4>

08003212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003212:	b480      	push	{r7}
 8003214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr

0800321e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800321e:	b480      	push	{r7}
 8003220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr

0800322a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800322a:	b480      	push	{r7}
 800322c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr

08003236 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800323a:	f000 f9bb 	bl	80035b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003248:	4802      	ldr	r0, [pc, #8]	; (8003254 <DMA1_Channel2_IRQHandler+0x10>)
 800324a:	f001 f863 	bl	8004314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20000490 	.word	0x20000490

08003258 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800325c:	4802      	ldr	r0, [pc, #8]	; (8003268 <ADC1_2_IRQHandler+0x10>)
 800325e:	f000 fb6f 	bl	8003940 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	200002ec 	.word	0x200002ec

0800326c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003270:	4802      	ldr	r0, [pc, #8]	; (800327c <TIM2_IRQHandler+0x10>)
 8003272:	f005 fb7b 	bl	800896c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	200003b8 	.word	0x200003b8

08003280 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003284:	4802      	ldr	r0, [pc, #8]	; (8003290 <I2C1_EV_IRQHandler+0x10>)
 8003286:	f002 f94b 	bl	8005520 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	2000031c 	.word	0x2000031c

08003294 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003298:	4802      	ldr	r0, [pc, #8]	; (80032a4 <I2C1_ER_IRQHandler+0x10>)
 800329a:	f002 fab2 	bl	8005802 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	2000031c 	.word	0x2000031c

080032a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80032ac:	4802      	ldr	r0, [pc, #8]	; (80032b8 <USART2_IRQHandler+0x10>)
 80032ae:	f006 fb41 	bl	8009934 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	200004d4 	.word	0x200004d4

080032bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80032c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80032c4:	f001 fb1a 	bl	80048fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80032c8:	bf00      	nop
 80032ca:	bd80      	pop	{r7, pc}

080032cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return 1;
 80032d0:	2301      	movs	r3, #1
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <_kill>:

int _kill(int pid, int sig)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032e4:	f007 f8a6 	bl	800a434 <__errno>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2216      	movs	r2, #22
 80032ec:	601a      	str	r2, [r3, #0]
  return -1;
 80032ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <_exit>:

void _exit (int status)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003302:	f04f 31ff 	mov.w	r1, #4294967295
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ffe7 	bl	80032da <_kill>
  while (1) {}    /* Make sure we hang here */
 800330c:	e7fe      	b.n	800330c <_exit+0x12>

0800330e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b086      	sub	sp, #24
 8003312:	af00      	add	r7, sp, #0
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	e00a      	b.n	8003336 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003320:	f3af 8000 	nop.w
 8003324:	4601      	mov	r1, r0
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	1c5a      	adds	r2, r3, #1
 800332a:	60ba      	str	r2, [r7, #8]
 800332c:	b2ca      	uxtb	r2, r1
 800332e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	3301      	adds	r3, #1
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	429a      	cmp	r2, r3
 800333c:	dbf0      	blt.n	8003320 <_read+0x12>
  }

  return len;
 800333e:	687b      	ldr	r3, [r7, #4]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	e009      	b.n	800336e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	60ba      	str	r2, [r7, #8]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	3301      	adds	r3, #1
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	429a      	cmp	r2, r3
 8003374:	dbf1      	blt.n	800335a <_write+0x12>
  }
  return len;
 8003376:	687b      	ldr	r3, [r7, #4]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <_close>:

int _close(int file)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003388:	f04f 33ff 	mov.w	r3, #4294967295
}
 800338c:	4618      	mov	r0, r3
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr

08003396 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033a6:	605a      	str	r2, [r3, #4]
  return 0;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <_isatty>:

int _isatty(int file)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033bc:	2301      	movs	r3, #1
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr

080033c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr

080033e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033e8:	4a14      	ldr	r2, [pc, #80]	; (800343c <_sbrk+0x5c>)
 80033ea:	4b15      	ldr	r3, [pc, #84]	; (8003440 <_sbrk+0x60>)
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033f4:	4b13      	ldr	r3, [pc, #76]	; (8003444 <_sbrk+0x64>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d102      	bne.n	8003402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033fc:	4b11      	ldr	r3, [pc, #68]	; (8003444 <_sbrk+0x64>)
 80033fe:	4a12      	ldr	r2, [pc, #72]	; (8003448 <_sbrk+0x68>)
 8003400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003402:	4b10      	ldr	r3, [pc, #64]	; (8003444 <_sbrk+0x64>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4413      	add	r3, r2
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	429a      	cmp	r2, r3
 800340e:	d207      	bcs.n	8003420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003410:	f007 f810 	bl	800a434 <__errno>
 8003414:	4603      	mov	r3, r0
 8003416:	220c      	movs	r2, #12
 8003418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800341a:	f04f 33ff 	mov.w	r3, #4294967295
 800341e:	e009      	b.n	8003434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003420:	4b08      	ldr	r3, [pc, #32]	; (8003444 <_sbrk+0x64>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003426:	4b07      	ldr	r3, [pc, #28]	; (8003444 <_sbrk+0x64>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4413      	add	r3, r2
 800342e:	4a05      	ldr	r2, [pc, #20]	; (8003444 <_sbrk+0x64>)
 8003430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003432:	68fb      	ldr	r3, [r7, #12]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20005000 	.word	0x20005000
 8003440:	00000400 	.word	0x00000400
 8003444:	2000094c 	.word	0x2000094c
 8003448:	20000980 	.word	0x20000980

0800344c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <timerRun>:
void setTimer3 (int duration) {
	timer3_counter = duration/Timer_Cycle;
	timer3_flag = 0;
}

void timerRun(){
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 800345c:	4b19      	ldr	r3, [pc, #100]	; (80034c4 <timerRun+0x6c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	dd0b      	ble.n	800347c <timerRun+0x24>
		timer1_counter--;
 8003464:	4b17      	ldr	r3, [pc, #92]	; (80034c4 <timerRun+0x6c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3b01      	subs	r3, #1
 800346a:	4a16      	ldr	r2, [pc, #88]	; (80034c4 <timerRun+0x6c>)
 800346c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 800346e:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <timerRun+0x6c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	dc02      	bgt.n	800347c <timerRun+0x24>
			timer1_flag = 1;
 8003476:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <timerRun+0x70>)
 8003478:	2201      	movs	r2, #1
 800347a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 800347c:	4b13      	ldr	r3, [pc, #76]	; (80034cc <timerRun+0x74>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	dd0b      	ble.n	800349c <timerRun+0x44>
		timer2_counter--;
 8003484:	4b11      	ldr	r3, [pc, #68]	; (80034cc <timerRun+0x74>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3b01      	subs	r3, #1
 800348a:	4a10      	ldr	r2, [pc, #64]	; (80034cc <timerRun+0x74>)
 800348c:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 800348e:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <timerRun+0x74>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	dc02      	bgt.n	800349c <timerRun+0x44>
			timer2_flag = 1;
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <timerRun+0x78>)
 8003498:	2201      	movs	r2, #1
 800349a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 800349c:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <timerRun+0x7c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	dd0b      	ble.n	80034bc <timerRun+0x64>
		timer3_counter--;
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <timerRun+0x7c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3b01      	subs	r3, #1
 80034aa:	4a0a      	ldr	r2, [pc, #40]	; (80034d4 <timerRun+0x7c>)
 80034ac:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <timerRun+0x7c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	dc02      	bgt.n	80034bc <timerRun+0x64>
			timer3_flag = 1;
 80034b6:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <timerRun+0x80>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	601a      	str	r2, [r3, #0]
		}
	}
}
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr
 80034c4:	20000950 	.word	0x20000950
 80034c8:	2000095c 	.word	0x2000095c
 80034cc:	20000954 	.word	0x20000954
 80034d0:	20000960 	.word	0x20000960
 80034d4:	20000958 	.word	0x20000958
 80034d8:	20000964 	.word	0x20000964

080034dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034dc:	f7ff ffb6 	bl	800344c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034e0:	480b      	ldr	r0, [pc, #44]	; (8003510 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80034e2:	490c      	ldr	r1, [pc, #48]	; (8003514 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80034e4:	4a0c      	ldr	r2, [pc, #48]	; (8003518 <LoopFillZerobss+0x16>)
  movs r3, #0
 80034e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034e8:	e002      	b.n	80034f0 <LoopCopyDataInit>

080034ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ee:	3304      	adds	r3, #4

080034f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034f4:	d3f9      	bcc.n	80034ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034f6:	4a09      	ldr	r2, [pc, #36]	; (800351c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80034f8:	4c09      	ldr	r4, [pc, #36]	; (8003520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034fc:	e001      	b.n	8003502 <LoopFillZerobss>

080034fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003500:	3204      	adds	r2, #4

08003502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003504:	d3fb      	bcc.n	80034fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003506:	f006 ff9b 	bl	800a440 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800350a:	f7fe fd6b 	bl	8001fe4 <main>
  bx lr
 800350e:	4770      	bx	lr
  ldr r0, =_sdata
 8003510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003514:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 8003518:	0800d6fc 	.word	0x0800d6fc
  ldr r2, =_sbss
 800351c:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 8003520:	2000097c 	.word	0x2000097c

08003524 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003524:	e7fe      	b.n	8003524 <CAN1_RX1_IRQHandler>
	...

08003528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800352c:	4b08      	ldr	r3, [pc, #32]	; (8003550 <HAL_Init+0x28>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a07      	ldr	r2, [pc, #28]	; (8003550 <HAL_Init+0x28>)
 8003532:	f043 0310 	orr.w	r3, r3, #16
 8003536:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003538:	2003      	movs	r0, #3
 800353a:	f000 fd3b 	bl	8003fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800353e:	2000      	movs	r0, #0
 8003540:	f000 f808 	bl	8003554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003544:	f7ff fc4a 	bl	8002ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40022000 	.word	0x40022000

08003554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800355c:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <HAL_InitTick+0x54>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	4b12      	ldr	r3, [pc, #72]	; (80035ac <HAL_InitTick+0x58>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	4619      	mov	r1, r3
 8003566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800356a:	fbb3 f3f1 	udiv	r3, r3, r1
 800356e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fd53 	bl	800401e <HAL_SYSTICK_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e00e      	b.n	80035a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b0f      	cmp	r3, #15
 8003586:	d80a      	bhi.n	800359e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003588:	2200      	movs	r2, #0
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	f04f 30ff 	mov.w	r0, #4294967295
 8003590:	f000 fd1b 	bl	8003fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003594:	4a06      	ldr	r2, [pc, #24]	; (80035b0 <HAL_InitTick+0x5c>)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	e000      	b.n	80035a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20000060 	.word	0x20000060
 80035ac:	20000068 	.word	0x20000068
 80035b0:	20000064 	.word	0x20000064

080035b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_IncTick+0x1c>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	461a      	mov	r2, r3
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <HAL_IncTick+0x20>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4413      	add	r3, r2
 80035c4:	4a03      	ldr	r2, [pc, #12]	; (80035d4 <HAL_IncTick+0x20>)
 80035c6:	6013      	str	r3, [r2, #0]
}
 80035c8:	bf00      	nop
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr
 80035d0:	20000068 	.word	0x20000068
 80035d4:	20000968 	.word	0x20000968

080035d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  return uwTick;
 80035dc:	4b02      	ldr	r3, [pc, #8]	; (80035e8 <HAL_GetTick+0x10>)
 80035de:	681b      	ldr	r3, [r3, #0]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr
 80035e8:	20000968 	.word	0x20000968

080035ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035f4:	f7ff fff0 	bl	80035d8 <HAL_GetTick>
 80035f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	d005      	beq.n	8003612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003606:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <HAL_Delay+0x44>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4413      	add	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003612:	bf00      	nop
 8003614:	f7ff ffe0 	bl	80035d8 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	429a      	cmp	r2, r3
 8003622:	d8f7      	bhi.n	8003614 <HAL_Delay+0x28>
  {
  }
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000068 	.word	0x20000068

08003634 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800363c:	2300      	movs	r3, #0
 800363e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e0be      	b.n	80037d4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003660:	2b00      	cmp	r3, #0
 8003662:	d109      	bne.n	8003678 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff fbe4 	bl	8002e40 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 fb85 	bl	8003d88 <ADC_ConversionStop_Disable>
 800367e:	4603      	mov	r3, r0
 8003680:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b00      	cmp	r3, #0
 800368c:	f040 8099 	bne.w	80037c2 <HAL_ADC_Init+0x18e>
 8003690:	7dfb      	ldrb	r3, [r7, #23]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f040 8095 	bne.w	80037c2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036a0:	f023 0302 	bic.w	r3, r3, #2
 80036a4:	f043 0202 	orr.w	r2, r3, #2
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80036b4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	7b1b      	ldrb	r3, [r3, #12]
 80036ba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80036bc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036cc:	d003      	beq.n	80036d6 <HAL_ADC_Init+0xa2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d102      	bne.n	80036dc <HAL_ADC_Init+0xa8>
 80036d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036da:	e000      	b.n	80036de <HAL_ADC_Init+0xaa>
 80036dc:	2300      	movs	r3, #0
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	7d1b      	ldrb	r3, [r3, #20]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d119      	bne.n	8003720 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	7b1b      	ldrb	r3, [r3, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d109      	bne.n	8003708 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	3b01      	subs	r3, #1
 80036fa:	035a      	lsls	r2, r3, #13
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	e00b      	b.n	8003720 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	f043 0220 	orr.w	r2, r3, #32
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	f043 0201 	orr.w	r2, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	430a      	orrs	r2, r1
 8003732:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	4b28      	ldr	r3, [pc, #160]	; (80037dc <HAL_ADC_Init+0x1a8>)
 800373c:	4013      	ands	r3, r2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6812      	ldr	r2, [r2, #0]
 8003742:	68b9      	ldr	r1, [r7, #8]
 8003744:	430b      	orrs	r3, r1
 8003746:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003750:	d003      	beq.n	800375a <HAL_ADC_Init+0x126>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d104      	bne.n	8003764 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	3b01      	subs	r3, #1
 8003760:	051b      	lsls	r3, r3, #20
 8003762:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	430a      	orrs	r2, r1
 8003776:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	4b18      	ldr	r3, [pc, #96]	; (80037e0 <HAL_ADC_Init+0x1ac>)
 8003780:	4013      	ands	r3, r2
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	429a      	cmp	r2, r3
 8003786:	d10b      	bne.n	80037a0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	f023 0303 	bic.w	r3, r3, #3
 8003796:	f043 0201 	orr.w	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800379e:	e018      	b.n	80037d2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	f023 0312 	bic.w	r3, r3, #18
 80037a8:	f043 0210 	orr.w	r2, r3, #16
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	f043 0201 	orr.w	r2, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80037c0:	e007      	b.n	80037d2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	f043 0210 	orr.w	r2, r3, #16
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	ffe1f7fd 	.word	0xffe1f7fd
 80037e0:	ff1f0efe 	.word	0xff1f0efe

080037e4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_ADC_Start+0x1a>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e098      	b.n	8003930 <HAL_ADC_Start+0x14c>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fa64 	bl	8003cd4 <ADC_Enable>
 800380c:	4603      	mov	r3, r0
 800380e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	2b00      	cmp	r3, #0
 8003814:	f040 8087 	bne.w	8003926 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003820:	f023 0301 	bic.w	r3, r3, #1
 8003824:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a41      	ldr	r2, [pc, #260]	; (8003938 <HAL_ADC_Start+0x154>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d105      	bne.n	8003842 <HAL_ADC_Start+0x5e>
 8003836:	4b41      	ldr	r3, [pc, #260]	; (800393c <HAL_ADC_Start+0x158>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d115      	bne.n	800386e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003858:	2b00      	cmp	r3, #0
 800385a:	d026      	beq.n	80038aa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003860:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003864:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800386c:	e01d      	b.n	80038aa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a2f      	ldr	r2, [pc, #188]	; (800393c <HAL_ADC_Start+0x158>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d004      	beq.n	800388e <HAL_ADC_Start+0xaa>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a2b      	ldr	r2, [pc, #172]	; (8003938 <HAL_ADC_Start+0x154>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d10d      	bne.n	80038aa <HAL_ADC_Start+0xc6>
 800388e:	4b2b      	ldr	r3, [pc, #172]	; (800393c <HAL_ADC_Start+0x158>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003896:	2b00      	cmp	r3, #0
 8003898:	d007      	beq.n	80038aa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d006      	beq.n	80038c4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	f023 0206 	bic.w	r2, r3, #6
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80038c2:	e002      	b.n	80038ca <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f06f 0202 	mvn.w	r2, #2
 80038da:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80038e6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80038ea:	d113      	bne.n	8003914 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80038f0:	4a11      	ldr	r2, [pc, #68]	; (8003938 <HAL_ADC_Start+0x154>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d105      	bne.n	8003902 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80038f6:	4b11      	ldr	r3, [pc, #68]	; (800393c <HAL_ADC_Start+0x158>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d108      	bne.n	8003914 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003910:	609a      	str	r2, [r3, #8]
 8003912:	e00c      	b.n	800392e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	e003      	b.n	800392e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800392e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40012800 	.word	0x40012800
 800393c:	40012400 	.word	0x40012400

08003940 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	2b00      	cmp	r3, #0
 8003960:	d03e      	beq.n	80039e0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d039      	beq.n	80039e0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b00      	cmp	r3, #0
 8003976:	d105      	bne.n	8003984 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800398e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003992:	d11d      	bne.n	80039d0 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003998:	2b00      	cmp	r3, #0
 800399a:	d119      	bne.n	80039d0 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0220 	bic.w	r2, r2, #32
 80039aa:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d105      	bne.n	80039d0 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	f043 0201 	orr.w	r2, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f874 	bl	8003abe <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f06f 0212 	mvn.w	r2, #18
 80039de:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d04d      	beq.n	8003a86 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d048      	beq.n	8003a86 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	f003 0310 	and.w	r3, r3, #16
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d105      	bne.n	8003a0c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a04:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003a16:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003a1a:	d012      	beq.n	8003a42 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d125      	bne.n	8003a76 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003a34:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003a38:	d11d      	bne.n	8003a76 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d119      	bne.n	8003a76 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a50:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d105      	bne.n	8003a76 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6e:	f043 0201 	orr.w	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f9c7 	bl	8003e0a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f06f 020c 	mvn.w	r2, #12
 8003a84:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d012      	beq.n	8003ab6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00d      	beq.n	8003ab6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f812 	bl	8003ad0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0201 	mvn.w	r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003ab6:	bf00      	nop
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr

08003ad0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr
	...

08003ae4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_ADC_ConfigChannel+0x20>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e0dc      	b.n	8003cbe <HAL_ADC_ConfigChannel+0x1da>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b06      	cmp	r3, #6
 8003b12:	d81c      	bhi.n	8003b4e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	3b05      	subs	r3, #5
 8003b26:	221f      	movs	r2, #31
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	4019      	ands	r1, r3
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3b05      	subs	r3, #5
 8003b40:	fa00 f203 	lsl.w	r2, r0, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	635a      	str	r2, [r3, #52]	; 0x34
 8003b4c:	e03c      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d81c      	bhi.n	8003b90 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	3b23      	subs	r3, #35	; 0x23
 8003b68:	221f      	movs	r2, #31
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	4019      	ands	r1, r3
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	3b23      	subs	r3, #35	; 0x23
 8003b82:	fa00 f203 	lsl.w	r2, r0, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	631a      	str	r2, [r3, #48]	; 0x30
 8003b8e:	e01b      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	3b41      	subs	r3, #65	; 0x41
 8003ba2:	221f      	movs	r2, #31
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	4019      	ands	r1, r3
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	3b41      	subs	r3, #65	; 0x41
 8003bbc:	fa00 f203 	lsl.w	r2, r0, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b09      	cmp	r3, #9
 8003bce:	d91c      	bls.n	8003c0a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68d9      	ldr	r1, [r3, #12]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	4413      	add	r3, r2
 8003be0:	3b1e      	subs	r3, #30
 8003be2:	2207      	movs	r2, #7
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	4019      	ands	r1, r3
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	6898      	ldr	r0, [r3, #8]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	4413      	add	r3, r2
 8003bfa:	3b1e      	subs	r3, #30
 8003bfc:	fa00 f203 	lsl.w	r2, r0, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	60da      	str	r2, [r3, #12]
 8003c08:	e019      	b.n	8003c3e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6919      	ldr	r1, [r3, #16]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4613      	mov	r3, r2
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	4413      	add	r3, r2
 8003c1a:	2207      	movs	r2, #7
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	43db      	mvns	r3, r3
 8003c22:	4019      	ands	r1, r3
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	6898      	ldr	r0, [r3, #8]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	4413      	add	r3, r2
 8003c32:	fa00 f203 	lsl.w	r2, r0, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b10      	cmp	r3, #16
 8003c44:	d003      	beq.n	8003c4e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003c4a:	2b11      	cmp	r3, #17
 8003c4c:	d132      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d125      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d126      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003c74:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b10      	cmp	r3, #16
 8003c7c:	d11a      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c7e:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <HAL_ADC_ConfigChannel+0x1e8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a13      	ldr	r2, [pc, #76]	; (8003cd0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003c84:	fba2 2303 	umull	r2, r3, r2, r3
 8003c88:	0c9a      	lsrs	r2, r3, #18
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c94:	e002      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f9      	bne.n	8003c96 <HAL_ADC_ConfigChannel+0x1b2>
 8003ca2:	e007      	b.n	8003cb4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca8:	f043 0220 	orr.w	r2, r3, #32
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr
 8003cc8:	40012400 	.word	0x40012400
 8003ccc:	20000060 	.word	0x20000060
 8003cd0:	431bde83 	.word	0x431bde83

08003cd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d040      	beq.n	8003d74 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0201 	orr.w	r2, r2, #1
 8003d00:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d02:	4b1f      	ldr	r3, [pc, #124]	; (8003d80 <ADC_Enable+0xac>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a1f      	ldr	r2, [pc, #124]	; (8003d84 <ADC_Enable+0xb0>)
 8003d08:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0c:	0c9b      	lsrs	r3, r3, #18
 8003d0e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003d10:	e002      	b.n	8003d18 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	3b01      	subs	r3, #1
 8003d16:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f9      	bne.n	8003d12 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d1e:	f7ff fc5b 	bl	80035d8 <HAL_GetTick>
 8003d22:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003d24:	e01f      	b.n	8003d66 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d26:	f7ff fc57 	bl	80035d8 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d918      	bls.n	8003d66 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d011      	beq.n	8003d66 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	f043 0210 	orr.w	r2, r3, #16
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	f043 0201 	orr.w	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e007      	b.n	8003d76 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d1d8      	bne.n	8003d26 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000060 	.word	0x20000060
 8003d84:	431bde83 	.word	0x431bde83

08003d88 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d12e      	bne.n	8003e00 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0201 	bic.w	r2, r2, #1
 8003db0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003db2:	f7ff fc11 	bl	80035d8 <HAL_GetTick>
 8003db6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003db8:	e01b      	b.n	8003df2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003dba:	f7ff fc0d 	bl	80035d8 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d914      	bls.n	8003df2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d10d      	bne.n	8003df2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dda:	f043 0210 	orr.w	r2, r3, #16
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de6:	f043 0201 	orr.w	r2, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e007      	b.n	8003e02 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d0dc      	beq.n	8003dba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr

08003e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <__NVIC_SetPriorityGrouping+0x44>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e38:	4013      	ands	r3, r2
 8003e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e4e:	4a04      	ldr	r2, [pc, #16]	; (8003e60 <__NVIC_SetPriorityGrouping+0x44>)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	60d3      	str	r3, [r2, #12]
}
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	e000ed00 	.word	0xe000ed00

08003e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e68:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <__NVIC_GetPriorityGrouping+0x18>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	0a1b      	lsrs	r3, r3, #8
 8003e6e:	f003 0307 	and.w	r3, r3, #7
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	e000ed00 	.word	0xe000ed00

08003e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	db0b      	blt.n	8003eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	f003 021f 	and.w	r2, r3, #31
 8003e98:	4906      	ldr	r1, [pc, #24]	; (8003eb4 <__NVIC_EnableIRQ+0x34>)
 8003e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9e:	095b      	lsrs	r3, r3, #5
 8003ea0:	2001      	movs	r0, #1
 8003ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	e000e100 	.word	0xe000e100

08003eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	6039      	str	r1, [r7, #0]
 8003ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	db0a      	blt.n	8003ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	490c      	ldr	r1, [pc, #48]	; (8003f04 <__NVIC_SetPriority+0x4c>)
 8003ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed6:	0112      	lsls	r2, r2, #4
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	440b      	add	r3, r1
 8003edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ee0:	e00a      	b.n	8003ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	4908      	ldr	r1, [pc, #32]	; (8003f08 <__NVIC_SetPriority+0x50>)
 8003ee8:	79fb      	ldrb	r3, [r7, #7]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	3b04      	subs	r3, #4
 8003ef0:	0112      	lsls	r2, r2, #4
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	761a      	strb	r2, [r3, #24]
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	e000e100 	.word	0xe000e100
 8003f08:	e000ed00 	.word	0xe000ed00

08003f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b089      	sub	sp, #36	; 0x24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f1c3 0307 	rsb	r3, r3, #7
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	bf28      	it	cs
 8003f2a:	2304      	movcs	r3, #4
 8003f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	3304      	adds	r3, #4
 8003f32:	2b06      	cmp	r3, #6
 8003f34:	d902      	bls.n	8003f3c <NVIC_EncodePriority+0x30>
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	3b03      	subs	r3, #3
 8003f3a:	e000      	b.n	8003f3e <NVIC_EncodePriority+0x32>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f40:	f04f 32ff 	mov.w	r2, #4294967295
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	43da      	mvns	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	401a      	ands	r2, r3
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f54:	f04f 31ff 	mov.w	r1, #4294967295
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5e:	43d9      	mvns	r1, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f64:	4313      	orrs	r3, r2
         );
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3724      	adds	r7, #36	; 0x24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr

08003f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f80:	d301      	bcc.n	8003f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f82:	2301      	movs	r3, #1
 8003f84:	e00f      	b.n	8003fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f86:	4a0a      	ldr	r2, [pc, #40]	; (8003fb0 <SysTick_Config+0x40>)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f8e:	210f      	movs	r1, #15
 8003f90:	f04f 30ff 	mov.w	r0, #4294967295
 8003f94:	f7ff ff90 	bl	8003eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f98:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <SysTick_Config+0x40>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f9e:	4b04      	ldr	r3, [pc, #16]	; (8003fb0 <SysTick_Config+0x40>)
 8003fa0:	2207      	movs	r2, #7
 8003fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	e000e010 	.word	0xe000e010

08003fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7ff ff2d 	bl	8003e1c <__NVIC_SetPriorityGrouping>
}
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b086      	sub	sp, #24
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	60b9      	str	r1, [r7, #8]
 8003fd4:	607a      	str	r2, [r7, #4]
 8003fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fdc:	f7ff ff42 	bl	8003e64 <__NVIC_GetPriorityGrouping>
 8003fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	68b9      	ldr	r1, [r7, #8]
 8003fe6:	6978      	ldr	r0, [r7, #20]
 8003fe8:	f7ff ff90 	bl	8003f0c <NVIC_EncodePriority>
 8003fec:	4602      	mov	r2, r0
 8003fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff ff5f 	bl	8003eb8 <__NVIC_SetPriority>
}
 8003ffa:	bf00      	nop
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b082      	sub	sp, #8
 8004006:	af00      	add	r7, sp, #0
 8004008:	4603      	mov	r3, r0
 800400a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800400c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff ff35 	bl	8003e80 <__NVIC_EnableIRQ>
}
 8004016:	bf00      	nop
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b082      	sub	sp, #8
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff ffa2 	bl	8003f70 <SysTick_Config>
 800402c:	4603      	mov	r3, r0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e043      	b.n	80040d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	4b22      	ldr	r3, [pc, #136]	; (80040e0 <HAL_DMA_Init+0xa8>)
 8004056:	4413      	add	r3, r2
 8004058:	4a22      	ldr	r2, [pc, #136]	; (80040e4 <HAL_DMA_Init+0xac>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	091b      	lsrs	r3, r3, #4
 8004060:	009a      	lsls	r2, r3, #2
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a1f      	ldr	r2, [pc, #124]	; (80040e8 <HAL_DMA_Init+0xb0>)
 800406a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004082:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004086:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004090:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800409c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr
 80040e0:	bffdfff8 	.word	0xbffdfff8
 80040e4:	cccccccd 	.word	0xcccccccd
 80040e8:	40020000 	.word	0x40020000

080040ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_DMA_Start_IT+0x20>
 8004108:	2302      	movs	r3, #2
 800410a:	e04b      	b.n	80041a4 <HAL_DMA_Start_IT+0xb8>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b01      	cmp	r3, #1
 800411e:	d13a      	bne.n	8004196 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0201 	bic.w	r2, r2, #1
 800413c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	68b9      	ldr	r1, [r7, #8]
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f9f8 	bl	800453a <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	2b00      	cmp	r3, #0
 8004150:	d008      	beq.n	8004164 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 020e 	orr.w	r2, r2, #14
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	e00f      	b.n	8004184 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0204 	bic.w	r2, r2, #4
 8004172:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 020a 	orr.w	r2, r2, #10
 8004182:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	e005      	b.n	80041a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800419e:	2302      	movs	r3, #2
 80041a0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80041a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d008      	beq.n	80041d6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2204      	movs	r2, #4
 80041c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e020      	b.n	8004218 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 020e 	bic.w	r2, r2, #14
 80041e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0201 	bic.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	2101      	movs	r1, #1
 8004200:	fa01 f202 	lsl.w	r2, r1, r2
 8004204:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004216:	7bfb      	ldrb	r3, [r7, #15]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr
	...

08004224 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d005      	beq.n	8004248 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2204      	movs	r2, #4
 8004240:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	73fb      	strb	r3, [r7, #15]
 8004246:	e051      	b.n	80042ec <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 020e 	bic.w	r2, r2, #14
 8004256:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0201 	bic.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a22      	ldr	r2, [pc, #136]	; (80042f8 <HAL_DMA_Abort_IT+0xd4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d029      	beq.n	80042c6 <HAL_DMA_Abort_IT+0xa2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a21      	ldr	r2, [pc, #132]	; (80042fc <HAL_DMA_Abort_IT+0xd8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d022      	beq.n	80042c2 <HAL_DMA_Abort_IT+0x9e>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a1f      	ldr	r2, [pc, #124]	; (8004300 <HAL_DMA_Abort_IT+0xdc>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d01a      	beq.n	80042bc <HAL_DMA_Abort_IT+0x98>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a1e      	ldr	r2, [pc, #120]	; (8004304 <HAL_DMA_Abort_IT+0xe0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d012      	beq.n	80042b6 <HAL_DMA_Abort_IT+0x92>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a1c      	ldr	r2, [pc, #112]	; (8004308 <HAL_DMA_Abort_IT+0xe4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00a      	beq.n	80042b0 <HAL_DMA_Abort_IT+0x8c>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1b      	ldr	r2, [pc, #108]	; (800430c <HAL_DMA_Abort_IT+0xe8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d102      	bne.n	80042aa <HAL_DMA_Abort_IT+0x86>
 80042a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80042a8:	e00e      	b.n	80042c8 <HAL_DMA_Abort_IT+0xa4>
 80042aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042ae:	e00b      	b.n	80042c8 <HAL_DMA_Abort_IT+0xa4>
 80042b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042b4:	e008      	b.n	80042c8 <HAL_DMA_Abort_IT+0xa4>
 80042b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042ba:	e005      	b.n	80042c8 <HAL_DMA_Abort_IT+0xa4>
 80042bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042c0:	e002      	b.n	80042c8 <HAL_DMA_Abort_IT+0xa4>
 80042c2:	2310      	movs	r3, #16
 80042c4:	e000      	b.n	80042c8 <HAL_DMA_Abort_IT+0xa4>
 80042c6:	2301      	movs	r3, #1
 80042c8:	4a11      	ldr	r2, [pc, #68]	; (8004310 <HAL_DMA_Abort_IT+0xec>)
 80042ca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	4798      	blx	r3
    } 
  }
  return status;
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40020008 	.word	0x40020008
 80042fc:	4002001c 	.word	0x4002001c
 8004300:	40020030 	.word	0x40020030
 8004304:	40020044 	.word	0x40020044
 8004308:	40020058 	.word	0x40020058
 800430c:	4002006c 	.word	0x4002006c
 8004310:	40020000 	.word	0x40020000

08004314 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004330:	2204      	movs	r2, #4
 8004332:	409a      	lsls	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4013      	ands	r3, r2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d04f      	beq.n	80043dc <HAL_DMA_IRQHandler+0xc8>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b00      	cmp	r3, #0
 8004344:	d04a      	beq.n	80043dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	2b00      	cmp	r3, #0
 8004352:	d107      	bne.n	8004364 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0204 	bic.w	r2, r2, #4
 8004362:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a66      	ldr	r2, [pc, #408]	; (8004504 <HAL_DMA_IRQHandler+0x1f0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d029      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xae>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a65      	ldr	r2, [pc, #404]	; (8004508 <HAL_DMA_IRQHandler+0x1f4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d022      	beq.n	80043be <HAL_DMA_IRQHandler+0xaa>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a63      	ldr	r2, [pc, #396]	; (800450c <HAL_DMA_IRQHandler+0x1f8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d01a      	beq.n	80043b8 <HAL_DMA_IRQHandler+0xa4>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a62      	ldr	r2, [pc, #392]	; (8004510 <HAL_DMA_IRQHandler+0x1fc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d012      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x9e>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a60      	ldr	r2, [pc, #384]	; (8004514 <HAL_DMA_IRQHandler+0x200>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00a      	beq.n	80043ac <HAL_DMA_IRQHandler+0x98>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a5f      	ldr	r2, [pc, #380]	; (8004518 <HAL_DMA_IRQHandler+0x204>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d102      	bne.n	80043a6 <HAL_DMA_IRQHandler+0x92>
 80043a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043a4:	e00e      	b.n	80043c4 <HAL_DMA_IRQHandler+0xb0>
 80043a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80043aa:	e00b      	b.n	80043c4 <HAL_DMA_IRQHandler+0xb0>
 80043ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80043b0:	e008      	b.n	80043c4 <HAL_DMA_IRQHandler+0xb0>
 80043b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80043b6:	e005      	b.n	80043c4 <HAL_DMA_IRQHandler+0xb0>
 80043b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043bc:	e002      	b.n	80043c4 <HAL_DMA_IRQHandler+0xb0>
 80043be:	2340      	movs	r3, #64	; 0x40
 80043c0:	e000      	b.n	80043c4 <HAL_DMA_IRQHandler+0xb0>
 80043c2:	2304      	movs	r3, #4
 80043c4:	4a55      	ldr	r2, [pc, #340]	; (800451c <HAL_DMA_IRQHandler+0x208>)
 80043c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8094 	beq.w	80044fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80043da:	e08e      	b.n	80044fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	2202      	movs	r2, #2
 80043e2:	409a      	lsls	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d056      	beq.n	800449a <HAL_DMA_IRQHandler+0x186>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d051      	beq.n	800449a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10b      	bne.n	800441c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 020a 	bic.w	r2, r2, #10
 8004412:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a38      	ldr	r2, [pc, #224]	; (8004504 <HAL_DMA_IRQHandler+0x1f0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d029      	beq.n	800447a <HAL_DMA_IRQHandler+0x166>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a37      	ldr	r2, [pc, #220]	; (8004508 <HAL_DMA_IRQHandler+0x1f4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d022      	beq.n	8004476 <HAL_DMA_IRQHandler+0x162>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a35      	ldr	r2, [pc, #212]	; (800450c <HAL_DMA_IRQHandler+0x1f8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d01a      	beq.n	8004470 <HAL_DMA_IRQHandler+0x15c>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a34      	ldr	r2, [pc, #208]	; (8004510 <HAL_DMA_IRQHandler+0x1fc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d012      	beq.n	800446a <HAL_DMA_IRQHandler+0x156>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a32      	ldr	r2, [pc, #200]	; (8004514 <HAL_DMA_IRQHandler+0x200>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00a      	beq.n	8004464 <HAL_DMA_IRQHandler+0x150>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a31      	ldr	r2, [pc, #196]	; (8004518 <HAL_DMA_IRQHandler+0x204>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d102      	bne.n	800445e <HAL_DMA_IRQHandler+0x14a>
 8004458:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800445c:	e00e      	b.n	800447c <HAL_DMA_IRQHandler+0x168>
 800445e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004462:	e00b      	b.n	800447c <HAL_DMA_IRQHandler+0x168>
 8004464:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004468:	e008      	b.n	800447c <HAL_DMA_IRQHandler+0x168>
 800446a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800446e:	e005      	b.n	800447c <HAL_DMA_IRQHandler+0x168>
 8004470:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004474:	e002      	b.n	800447c <HAL_DMA_IRQHandler+0x168>
 8004476:	2320      	movs	r3, #32
 8004478:	e000      	b.n	800447c <HAL_DMA_IRQHandler+0x168>
 800447a:	2302      	movs	r3, #2
 800447c:	4a27      	ldr	r2, [pc, #156]	; (800451c <HAL_DMA_IRQHandler+0x208>)
 800447e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448c:	2b00      	cmp	r3, #0
 800448e:	d034      	beq.n	80044fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004498:	e02f      	b.n	80044fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	2208      	movs	r2, #8
 80044a0:	409a      	lsls	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d028      	beq.n	80044fc <HAL_DMA_IRQHandler+0x1e8>
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d023      	beq.n	80044fc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 020e 	bic.w	r2, r2, #14
 80044c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044cc:	2101      	movs	r1, #1
 80044ce:	fa01 f202 	lsl.w	r2, r1, r2
 80044d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d004      	beq.n	80044fc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	4798      	blx	r3
    }
  }
  return;
 80044fa:	bf00      	nop
 80044fc:	bf00      	nop
}
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40020008 	.word	0x40020008
 8004508:	4002001c 	.word	0x4002001c
 800450c:	40020030 	.word	0x40020030
 8004510:	40020044 	.word	0x40020044
 8004514:	40020058 	.word	0x40020058
 8004518:	4002006c 	.word	0x4002006c
 800451c:	40020000 	.word	0x40020000

08004520 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800452e:	b2db      	uxtb	r3, r3
}
 8004530:	4618      	mov	r0, r3
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr

0800453a <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800453a:	b480      	push	{r7}
 800453c:	b085      	sub	sp, #20
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	607a      	str	r2, [r7, #4]
 8004546:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004550:	2101      	movs	r1, #1
 8004552:	fa01 f202 	lsl.w	r2, r1, r2
 8004556:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b10      	cmp	r3, #16
 8004566:	d108      	bne.n	800457a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004578:	e007      	b.n	800458a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	60da      	str	r2, [r3, #12]
}
 800458a:	bf00      	nop
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr

08004594 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004594:	b480      	push	{r7}
 8004596:	b08b      	sub	sp, #44	; 0x2c
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800459e:	2300      	movs	r3, #0
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80045a2:	2300      	movs	r3, #0
 80045a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045a6:	e169      	b.n	800487c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80045a8:	2201      	movs	r2, #1
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	4013      	ands	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	f040 8158 	bne.w	8004876 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	4a9a      	ldr	r2, [pc, #616]	; (8004834 <HAL_GPIO_Init+0x2a0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d05e      	beq.n	800468e <HAL_GPIO_Init+0xfa>
 80045d0:	4a98      	ldr	r2, [pc, #608]	; (8004834 <HAL_GPIO_Init+0x2a0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d875      	bhi.n	80046c2 <HAL_GPIO_Init+0x12e>
 80045d6:	4a98      	ldr	r2, [pc, #608]	; (8004838 <HAL_GPIO_Init+0x2a4>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d058      	beq.n	800468e <HAL_GPIO_Init+0xfa>
 80045dc:	4a96      	ldr	r2, [pc, #600]	; (8004838 <HAL_GPIO_Init+0x2a4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d86f      	bhi.n	80046c2 <HAL_GPIO_Init+0x12e>
 80045e2:	4a96      	ldr	r2, [pc, #600]	; (800483c <HAL_GPIO_Init+0x2a8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d052      	beq.n	800468e <HAL_GPIO_Init+0xfa>
 80045e8:	4a94      	ldr	r2, [pc, #592]	; (800483c <HAL_GPIO_Init+0x2a8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d869      	bhi.n	80046c2 <HAL_GPIO_Init+0x12e>
 80045ee:	4a94      	ldr	r2, [pc, #592]	; (8004840 <HAL_GPIO_Init+0x2ac>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d04c      	beq.n	800468e <HAL_GPIO_Init+0xfa>
 80045f4:	4a92      	ldr	r2, [pc, #584]	; (8004840 <HAL_GPIO_Init+0x2ac>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d863      	bhi.n	80046c2 <HAL_GPIO_Init+0x12e>
 80045fa:	4a92      	ldr	r2, [pc, #584]	; (8004844 <HAL_GPIO_Init+0x2b0>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d046      	beq.n	800468e <HAL_GPIO_Init+0xfa>
 8004600:	4a90      	ldr	r2, [pc, #576]	; (8004844 <HAL_GPIO_Init+0x2b0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d85d      	bhi.n	80046c2 <HAL_GPIO_Init+0x12e>
 8004606:	2b12      	cmp	r3, #18
 8004608:	d82a      	bhi.n	8004660 <HAL_GPIO_Init+0xcc>
 800460a:	2b12      	cmp	r3, #18
 800460c:	d859      	bhi.n	80046c2 <HAL_GPIO_Init+0x12e>
 800460e:	a201      	add	r2, pc, #4	; (adr r2, 8004614 <HAL_GPIO_Init+0x80>)
 8004610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004614:	0800468f 	.word	0x0800468f
 8004618:	08004669 	.word	0x08004669
 800461c:	0800467b 	.word	0x0800467b
 8004620:	080046bd 	.word	0x080046bd
 8004624:	080046c3 	.word	0x080046c3
 8004628:	080046c3 	.word	0x080046c3
 800462c:	080046c3 	.word	0x080046c3
 8004630:	080046c3 	.word	0x080046c3
 8004634:	080046c3 	.word	0x080046c3
 8004638:	080046c3 	.word	0x080046c3
 800463c:	080046c3 	.word	0x080046c3
 8004640:	080046c3 	.word	0x080046c3
 8004644:	080046c3 	.word	0x080046c3
 8004648:	080046c3 	.word	0x080046c3
 800464c:	080046c3 	.word	0x080046c3
 8004650:	080046c3 	.word	0x080046c3
 8004654:	080046c3 	.word	0x080046c3
 8004658:	08004671 	.word	0x08004671
 800465c:	08004685 	.word	0x08004685
 8004660:	4a79      	ldr	r2, [pc, #484]	; (8004848 <HAL_GPIO_Init+0x2b4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d013      	beq.n	800468e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004666:	e02c      	b.n	80046c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	623b      	str	r3, [r7, #32]
          break;
 800466e:	e029      	b.n	80046c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	3304      	adds	r3, #4
 8004676:	623b      	str	r3, [r7, #32]
          break;
 8004678:	e024      	b.n	80046c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	3308      	adds	r3, #8
 8004680:	623b      	str	r3, [r7, #32]
          break;
 8004682:	e01f      	b.n	80046c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	330c      	adds	r3, #12
 800468a:	623b      	str	r3, [r7, #32]
          break;
 800468c:	e01a      	b.n	80046c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d102      	bne.n	800469c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004696:	2304      	movs	r3, #4
 8004698:	623b      	str	r3, [r7, #32]
          break;
 800469a:	e013      	b.n	80046c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d105      	bne.n	80046b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046a4:	2308      	movs	r3, #8
 80046a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	611a      	str	r2, [r3, #16]
          break;
 80046ae:	e009      	b.n	80046c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046b0:	2308      	movs	r3, #8
 80046b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69fa      	ldr	r2, [r7, #28]
 80046b8:	615a      	str	r2, [r3, #20]
          break;
 80046ba:	e003      	b.n	80046c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80046bc:	2300      	movs	r3, #0
 80046be:	623b      	str	r3, [r7, #32]
          break;
 80046c0:	e000      	b.n	80046c4 <HAL_GPIO_Init+0x130>
          break;
 80046c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	2bff      	cmp	r3, #255	; 0xff
 80046c8:	d801      	bhi.n	80046ce <HAL_GPIO_Init+0x13a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	e001      	b.n	80046d2 <HAL_GPIO_Init+0x13e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	3304      	adds	r3, #4
 80046d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	2bff      	cmp	r3, #255	; 0xff
 80046d8:	d802      	bhi.n	80046e0 <HAL_GPIO_Init+0x14c>
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	e002      	b.n	80046e6 <HAL_GPIO_Init+0x152>
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	3b08      	subs	r3, #8
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	210f      	movs	r1, #15
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	fa01 f303 	lsl.w	r3, r1, r3
 80046f4:	43db      	mvns	r3, r3
 80046f6:	401a      	ands	r2, r3
 80046f8:	6a39      	ldr	r1, [r7, #32]
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004700:	431a      	orrs	r2, r3
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 80b1 	beq.w	8004876 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004714:	4b4d      	ldr	r3, [pc, #308]	; (800484c <HAL_GPIO_Init+0x2b8>)
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	4a4c      	ldr	r2, [pc, #304]	; (800484c <HAL_GPIO_Init+0x2b8>)
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	6193      	str	r3, [r2, #24]
 8004720:	4b4a      	ldr	r3, [pc, #296]	; (800484c <HAL_GPIO_Init+0x2b8>)
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	60bb      	str	r3, [r7, #8]
 800472a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800472c:	4a48      	ldr	r2, [pc, #288]	; (8004850 <HAL_GPIO_Init+0x2bc>)
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	089b      	lsrs	r3, r3, #2
 8004732:	3302      	adds	r3, #2
 8004734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004738:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	220f      	movs	r2, #15
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	43db      	mvns	r3, r3
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4013      	ands	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a40      	ldr	r2, [pc, #256]	; (8004854 <HAL_GPIO_Init+0x2c0>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d013      	beq.n	8004780 <HAL_GPIO_Init+0x1ec>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a3f      	ldr	r2, [pc, #252]	; (8004858 <HAL_GPIO_Init+0x2c4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00d      	beq.n	800477c <HAL_GPIO_Init+0x1e8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a3e      	ldr	r2, [pc, #248]	; (800485c <HAL_GPIO_Init+0x2c8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d007      	beq.n	8004778 <HAL_GPIO_Init+0x1e4>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a3d      	ldr	r2, [pc, #244]	; (8004860 <HAL_GPIO_Init+0x2cc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d101      	bne.n	8004774 <HAL_GPIO_Init+0x1e0>
 8004770:	2303      	movs	r3, #3
 8004772:	e006      	b.n	8004782 <HAL_GPIO_Init+0x1ee>
 8004774:	2304      	movs	r3, #4
 8004776:	e004      	b.n	8004782 <HAL_GPIO_Init+0x1ee>
 8004778:	2302      	movs	r3, #2
 800477a:	e002      	b.n	8004782 <HAL_GPIO_Init+0x1ee>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <HAL_GPIO_Init+0x1ee>
 8004780:	2300      	movs	r3, #0
 8004782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004784:	f002 0203 	and.w	r2, r2, #3
 8004788:	0092      	lsls	r2, r2, #2
 800478a:	4093      	lsls	r3, r2
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004792:	492f      	ldr	r1, [pc, #188]	; (8004850 <HAL_GPIO_Init+0x2bc>)
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	089b      	lsrs	r3, r3, #2
 8004798:	3302      	adds	r3, #2
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d006      	beq.n	80047ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80047ac:	4b2d      	ldr	r3, [pc, #180]	; (8004864 <HAL_GPIO_Init+0x2d0>)
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	492c      	ldr	r1, [pc, #176]	; (8004864 <HAL_GPIO_Init+0x2d0>)
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	608b      	str	r3, [r1, #8]
 80047b8:	e006      	b.n	80047c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80047ba:	4b2a      	ldr	r3, [pc, #168]	; (8004864 <HAL_GPIO_Init+0x2d0>)
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	43db      	mvns	r3, r3
 80047c2:	4928      	ldr	r1, [pc, #160]	; (8004864 <HAL_GPIO_Init+0x2d0>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d006      	beq.n	80047e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80047d4:	4b23      	ldr	r3, [pc, #140]	; (8004864 <HAL_GPIO_Init+0x2d0>)
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	4922      	ldr	r1, [pc, #136]	; (8004864 <HAL_GPIO_Init+0x2d0>)
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	4313      	orrs	r3, r2
 80047de:	60cb      	str	r3, [r1, #12]
 80047e0:	e006      	b.n	80047f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80047e2:	4b20      	ldr	r3, [pc, #128]	; (8004864 <HAL_GPIO_Init+0x2d0>)
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	43db      	mvns	r3, r3
 80047ea:	491e      	ldr	r1, [pc, #120]	; (8004864 <HAL_GPIO_Init+0x2d0>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d006      	beq.n	800480a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80047fc:	4b19      	ldr	r3, [pc, #100]	; (8004864 <HAL_GPIO_Init+0x2d0>)
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	4918      	ldr	r1, [pc, #96]	; (8004864 <HAL_GPIO_Init+0x2d0>)
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	4313      	orrs	r3, r2
 8004806:	604b      	str	r3, [r1, #4]
 8004808:	e006      	b.n	8004818 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800480a:	4b16      	ldr	r3, [pc, #88]	; (8004864 <HAL_GPIO_Init+0x2d0>)
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	43db      	mvns	r3, r3
 8004812:	4914      	ldr	r1, [pc, #80]	; (8004864 <HAL_GPIO_Init+0x2d0>)
 8004814:	4013      	ands	r3, r2
 8004816:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d021      	beq.n	8004868 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004824:	4b0f      	ldr	r3, [pc, #60]	; (8004864 <HAL_GPIO_Init+0x2d0>)
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	490e      	ldr	r1, [pc, #56]	; (8004864 <HAL_GPIO_Init+0x2d0>)
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	4313      	orrs	r3, r2
 800482e:	600b      	str	r3, [r1, #0]
 8004830:	e021      	b.n	8004876 <HAL_GPIO_Init+0x2e2>
 8004832:	bf00      	nop
 8004834:	10320000 	.word	0x10320000
 8004838:	10310000 	.word	0x10310000
 800483c:	10220000 	.word	0x10220000
 8004840:	10210000 	.word	0x10210000
 8004844:	10120000 	.word	0x10120000
 8004848:	10110000 	.word	0x10110000
 800484c:	40021000 	.word	0x40021000
 8004850:	40010000 	.word	0x40010000
 8004854:	40010800 	.word	0x40010800
 8004858:	40010c00 	.word	0x40010c00
 800485c:	40011000 	.word	0x40011000
 8004860:	40011400 	.word	0x40011400
 8004864:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004868:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <HAL_GPIO_Init+0x304>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	43db      	mvns	r3, r3
 8004870:	4909      	ldr	r1, [pc, #36]	; (8004898 <HAL_GPIO_Init+0x304>)
 8004872:	4013      	ands	r3, r2
 8004874:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	3301      	adds	r3, #1
 800487a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	fa22 f303 	lsr.w	r3, r2, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	f47f ae8e 	bne.w	80045a8 <HAL_GPIO_Init+0x14>
  }
}
 800488c:	bf00      	nop
 800488e:	bf00      	nop
 8004890:	372c      	adds	r7, #44	; 0x2c
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr
 8004898:	40010400 	.word	0x40010400

0800489c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	460b      	mov	r3, r1
 80048a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	887b      	ldrh	r3, [r7, #2]
 80048ae:	4013      	ands	r3, r2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048b4:	2301      	movs	r3, #1
 80048b6:	73fb      	strb	r3, [r7, #15]
 80048b8:	e001      	b.n	80048be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048ba:	2300      	movs	r3, #0
 80048bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048be:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr

080048ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	460b      	mov	r3, r1
 80048d4:	807b      	strh	r3, [r7, #2]
 80048d6:	4613      	mov	r3, r2
 80048d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048da:	787b      	ldrb	r3, [r7, #1]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048e0:	887a      	ldrh	r2, [r7, #2]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80048e6:	e003      	b.n	80048f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048e8:	887b      	ldrh	r3, [r7, #2]
 80048ea:	041a      	lsls	r2, r3, #16
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	611a      	str	r2, [r3, #16]
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bc80      	pop	{r7}
 80048f8:	4770      	bx	lr
	...

080048fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004906:	4b08      	ldr	r3, [pc, #32]	; (8004928 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004908:	695a      	ldr	r2, [r3, #20]
 800490a:	88fb      	ldrh	r3, [r7, #6]
 800490c:	4013      	ands	r3, r2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d006      	beq.n	8004920 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004912:	4a05      	ldr	r2, [pc, #20]	; (8004928 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004914:	88fb      	ldrh	r3, [r7, #6]
 8004916:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004918:	88fb      	ldrh	r3, [r7, #6]
 800491a:	4618      	mov	r0, r3
 800491c:	f000 f806 	bl	800492c <HAL_GPIO_EXTI_Callback>
  }
}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40010400 	.word	0x40010400

0800492c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	4603      	mov	r3, r0
 8004934:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr

08004940 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e12b      	b.n	8004baa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7fe faae 	bl	8002ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2224      	movs	r2, #36	; 0x24
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0201 	bic.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004992:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049a4:	f003 f9f2 	bl	8007d8c <HAL_RCC_GetPCLK1Freq>
 80049a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	4a81      	ldr	r2, [pc, #516]	; (8004bb4 <HAL_I2C_Init+0x274>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d807      	bhi.n	80049c4 <HAL_I2C_Init+0x84>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4a80      	ldr	r2, [pc, #512]	; (8004bb8 <HAL_I2C_Init+0x278>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	bf94      	ite	ls
 80049bc:	2301      	movls	r3, #1
 80049be:	2300      	movhi	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	e006      	b.n	80049d2 <HAL_I2C_Init+0x92>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4a7d      	ldr	r2, [pc, #500]	; (8004bbc <HAL_I2C_Init+0x27c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	bf94      	ite	ls
 80049cc:	2301      	movls	r3, #1
 80049ce:	2300      	movhi	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e0e7      	b.n	8004baa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4a78      	ldr	r2, [pc, #480]	; (8004bc0 <HAL_I2C_Init+0x280>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	0c9b      	lsrs	r3, r3, #18
 80049e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	4a6a      	ldr	r2, [pc, #424]	; (8004bb4 <HAL_I2C_Init+0x274>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d802      	bhi.n	8004a14 <HAL_I2C_Init+0xd4>
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	3301      	adds	r3, #1
 8004a12:	e009      	b.n	8004a28 <HAL_I2C_Init+0xe8>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a1a:	fb02 f303 	mul.w	r3, r2, r3
 8004a1e:	4a69      	ldr	r2, [pc, #420]	; (8004bc4 <HAL_I2C_Init+0x284>)
 8004a20:	fba2 2303 	umull	r2, r3, r2, r3
 8004a24:	099b      	lsrs	r3, r3, #6
 8004a26:	3301      	adds	r3, #1
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6812      	ldr	r2, [r2, #0]
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	495c      	ldr	r1, [pc, #368]	; (8004bb4 <HAL_I2C_Init+0x274>)
 8004a44:	428b      	cmp	r3, r1
 8004a46:	d819      	bhi.n	8004a7c <HAL_I2C_Init+0x13c>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	1e59      	subs	r1, r3, #1
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a56:	1c59      	adds	r1, r3, #1
 8004a58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a5c:	400b      	ands	r3, r1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <HAL_I2C_Init+0x138>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	1e59      	subs	r1, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a70:	3301      	adds	r3, #1
 8004a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a76:	e051      	b.n	8004b1c <HAL_I2C_Init+0x1dc>
 8004a78:	2304      	movs	r3, #4
 8004a7a:	e04f      	b.n	8004b1c <HAL_I2C_Init+0x1dc>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d111      	bne.n	8004aa8 <HAL_I2C_Init+0x168>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	1e58      	subs	r0, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6859      	ldr	r1, [r3, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	440b      	add	r3, r1
 8004a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a96:	3301      	adds	r3, #1
 8004a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2301      	moveq	r3, #1
 8004aa2:	2300      	movne	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	e012      	b.n	8004ace <HAL_I2C_Init+0x18e>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	1e58      	subs	r0, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6859      	ldr	r1, [r3, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	0099      	lsls	r1, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004abe:	3301      	adds	r3, #1
 8004ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	bf0c      	ite	eq
 8004ac8:	2301      	moveq	r3, #1
 8004aca:	2300      	movne	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <HAL_I2C_Init+0x196>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e022      	b.n	8004b1c <HAL_I2C_Init+0x1dc>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10e      	bne.n	8004afc <HAL_I2C_Init+0x1bc>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1e58      	subs	r0, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6859      	ldr	r1, [r3, #4]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	440b      	add	r3, r1
 8004aec:	fbb0 f3f3 	udiv	r3, r0, r3
 8004af0:	3301      	adds	r3, #1
 8004af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afa:	e00f      	b.n	8004b1c <HAL_I2C_Init+0x1dc>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	1e58      	subs	r0, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6859      	ldr	r1, [r3, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	440b      	add	r3, r1
 8004b0a:	0099      	lsls	r1, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b12:	3301      	adds	r3, #1
 8004b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	6809      	ldr	r1, [r1, #0]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69da      	ldr	r2, [r3, #28]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6911      	ldr	r1, [r2, #16]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	68d2      	ldr	r2, [r2, #12]
 8004b56:	4311      	orrs	r1, r2
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	695a      	ldr	r2, [r3, #20]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0201 	orr.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	000186a0 	.word	0x000186a0
 8004bb8:	001e847f 	.word	0x001e847f
 8004bbc:	003d08ff 	.word	0x003d08ff
 8004bc0:	431bde83 	.word	0x431bde83
 8004bc4:	10624dd3 	.word	0x10624dd3

08004bc8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bda:	2b80      	cmp	r3, #128	; 0x80
 8004bdc:	d103      	bne.n	8004be6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2200      	movs	r2, #0
 8004be4:	611a      	str	r2, [r3, #16]
  }
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bc80      	pop	{r7}
 8004bee:	4770      	bx	lr

08004bf0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b088      	sub	sp, #32
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	607a      	str	r2, [r7, #4]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	817b      	strh	r3, [r7, #10]
 8004c00:	4613      	mov	r3, r2
 8004c02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c04:	f7fe fce8 	bl	80035d8 <HAL_GetTick>
 8004c08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b20      	cmp	r3, #32
 8004c14:	f040 80e0 	bne.w	8004dd8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	2319      	movs	r3, #25
 8004c1e:	2201      	movs	r2, #1
 8004c20:	4970      	ldr	r1, [pc, #448]	; (8004de4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f002 fa66 	bl	80070f4 <I2C_WaitOnFlagUntilTimeout>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	e0d3      	b.n	8004dda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_I2C_Master_Transmit+0x50>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e0cc      	b.n	8004dda <HAL_I2C_Master_Transmit+0x1ea>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d007      	beq.n	8004c66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f042 0201 	orr.w	r2, r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2221      	movs	r2, #33	; 0x21
 8004c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2210      	movs	r2, #16
 8004c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	893a      	ldrh	r2, [r7, #8]
 8004c96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4a50      	ldr	r2, [pc, #320]	; (8004de8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004ca6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ca8:	8979      	ldrh	r1, [r7, #10]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	6a3a      	ldr	r2, [r7, #32]
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f002 f828 	bl	8006d04 <I2C_MasterRequestWrite>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e08d      	b.n	8004dda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	613b      	str	r3, [r7, #16]
 8004cd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004cd4:	e066      	b.n	8004da4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	6a39      	ldr	r1, [r7, #32]
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f002 fb24 	bl	8007328 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00d      	beq.n	8004d02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d107      	bne.n	8004cfe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e06b      	b.n	8004dda <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	781a      	ldrb	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d11b      	bne.n	8004d78 <HAL_I2C_Master_Transmit+0x188>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d017      	beq.n	8004d78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	781a      	ldrb	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	6a39      	ldr	r1, [r7, #32]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f002 fb1b 	bl	80073b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00d      	beq.n	8004da4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d107      	bne.n	8004da0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e01a      	b.n	8004dda <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d194      	bne.n	8004cd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	e000      	b.n	8004dda <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004dd8:	2302      	movs	r3, #2
  }
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	00100002 	.word	0x00100002
 8004de8:	ffff0000 	.word	0xffff0000

08004dec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08c      	sub	sp, #48	; 0x30
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	607a      	str	r2, [r7, #4]
 8004df6:	461a      	mov	r2, r3
 8004df8:	460b      	mov	r3, r1
 8004dfa:	817b      	strh	r3, [r7, #10]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e04:	f7fe fbe8 	bl	80035d8 <HAL_GetTick>
 8004e08:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	f040 824b 	bne.w	80052ae <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	2319      	movs	r3, #25
 8004e1e:	2201      	movs	r2, #1
 8004e20:	497f      	ldr	r1, [pc, #508]	; (8005020 <HAL_I2C_Master_Receive+0x234>)
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f002 f966 	bl	80070f4 <I2C_WaitOnFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e23e      	b.n	80052b0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_I2C_Master_Receive+0x54>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e237      	b.n	80052b0 <HAL_I2C_Master_Receive+0x4c4>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d007      	beq.n	8004e66 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 0201 	orr.w	r2, r2, #1
 8004e64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2222      	movs	r2, #34	; 0x22
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2210      	movs	r2, #16
 8004e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	893a      	ldrh	r2, [r7, #8]
 8004e96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4a5f      	ldr	r2, [pc, #380]	; (8005024 <HAL_I2C_Master_Receive+0x238>)
 8004ea6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ea8:	8979      	ldrh	r1, [r7, #10]
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f001 ffaa 	bl	8006e08 <I2C_MasterRequestRead>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e1f8      	b.n	80052b0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d113      	bne.n	8004eee <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61fb      	str	r3, [r7, #28]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	61fb      	str	r3, [r7, #28]
 8004eda:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	e1cc      	b.n	8005288 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d11e      	bne.n	8004f34 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f06:	b672      	cpsid	i
}
 8004f08:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61bb      	str	r3, [r7, #24]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004f30:	b662      	cpsie	i
}
 8004f32:	e035      	b.n	8004fa0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d11e      	bne.n	8004f7a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f4c:	b672      	cpsid	i
}
 8004f4e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004f76:	b662      	cpsie	i
}
 8004f78:	e012      	b.n	8004fa0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	613b      	str	r3, [r7, #16]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004fa0:	e172      	b.n	8005288 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	f200 811f 	bhi.w	80051ea <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d123      	bne.n	8004ffc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f002 fa77 	bl	80074ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e173      	b.n	80052b0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	691a      	ldr	r2, [r3, #16]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ffa:	e145      	b.n	8005288 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005000:	2b02      	cmp	r3, #2
 8005002:	d152      	bne.n	80050aa <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500a:	2200      	movs	r2, #0
 800500c:	4906      	ldr	r1, [pc, #24]	; (8005028 <HAL_I2C_Master_Receive+0x23c>)
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f002 f870 	bl	80070f4 <I2C_WaitOnFlagUntilTimeout>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d008      	beq.n	800502c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e148      	b.n	80052b0 <HAL_I2C_Master_Receive+0x4c4>
 800501e:	bf00      	nop
 8005020:	00100002 	.word	0x00100002
 8005024:	ffff0000 	.word	0xffff0000
 8005028:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800502c:	b672      	cpsid	i
}
 800502e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800503e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691a      	ldr	r2, [r3, #16]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005068:	b29b      	uxth	r3, r3
 800506a:	3b01      	subs	r3, #1
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005072:	b662      	cpsie	i
}
 8005074:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	b2d2      	uxtb	r2, r2
 8005082:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050a8:	e0ee      	b.n	8005288 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	2200      	movs	r2, #0
 80050b2:	4981      	ldr	r1, [pc, #516]	; (80052b8 <HAL_I2C_Master_Receive+0x4cc>)
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f002 f81d 	bl	80070f4 <I2C_WaitOnFlagUntilTimeout>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e0f5      	b.n	80052b0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80050d4:	b672      	cpsid	i
}
 80050d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691a      	ldr	r2, [r3, #16]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005100:	b29b      	uxth	r3, r3
 8005102:	3b01      	subs	r3, #1
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800510a:	4b6c      	ldr	r3, [pc, #432]	; (80052bc <HAL_I2C_Master_Receive+0x4d0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	08db      	lsrs	r3, r3, #3
 8005110:	4a6b      	ldr	r2, [pc, #428]	; (80052c0 <HAL_I2C_Master_Receive+0x4d4>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	0a1a      	lsrs	r2, r3, #8
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	00da      	lsls	r2, r3, #3
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	3b01      	subs	r3, #1
 8005128:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d118      	bne.n	8005162 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2220      	movs	r2, #32
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	f043 0220 	orr.w	r2, r3, #32
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005152:	b662      	cpsie	i
}
 8005154:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e0a6      	b.n	80052b0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b04      	cmp	r3, #4
 800516e:	d1d9      	bne.n	8005124 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800517e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691a      	ldr	r2, [r3, #16]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	b2d2      	uxtb	r2, r2
 800518c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519c:	3b01      	subs	r3, #1
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80051b2:	b662      	cpsie	i
}
 80051b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d2:	3b01      	subs	r3, #1
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051de:	b29b      	uxth	r3, r3
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051e8:	e04e      	b.n	8005288 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f002 f95c 	bl	80074ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e058      	b.n	80052b0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f003 0304 	and.w	r3, r3, #4
 800523a:	2b04      	cmp	r3, #4
 800523c:	d124      	bne.n	8005288 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005242:	2b03      	cmp	r3, #3
 8005244:	d107      	bne.n	8005256 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005254:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800528c:	2b00      	cmp	r3, #0
 800528e:	f47f ae88 	bne.w	8004fa2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2220      	movs	r2, #32
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	e000      	b.n	80052b0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80052ae:	2302      	movs	r3, #2
  }
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3728      	adds	r7, #40	; 0x28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	00010004 	.word	0x00010004
 80052bc:	20000060 	.word	0x20000060
 80052c0:	14f8b589 	.word	0x14f8b589

080052c4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08a      	sub	sp, #40	; 0x28
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	607a      	str	r2, [r7, #4]
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	460b      	mov	r3, r1
 80052d2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80052d4:	f7fe f980 	bl	80035d8 <HAL_GetTick>
 80052d8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	f040 8111 	bne.w	800550e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	2319      	movs	r3, #25
 80052f2:	2201      	movs	r2, #1
 80052f4:	4988      	ldr	r1, [pc, #544]	; (8005518 <HAL_I2C_IsDeviceReady+0x254>)
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f001 fefc 	bl	80070f4 <I2C_WaitOnFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005302:	2302      	movs	r3, #2
 8005304:	e104      	b.n	8005510 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_I2C_IsDeviceReady+0x50>
 8005310:	2302      	movs	r3, #2
 8005312:	e0fd      	b.n	8005510 <HAL_I2C_IsDeviceReady+0x24c>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b01      	cmp	r3, #1
 8005328:	d007      	beq.n	800533a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0201 	orr.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005348:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2224      	movs	r2, #36	; 0x24
 800534e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4a70      	ldr	r2, [pc, #448]	; (800551c <HAL_I2C_IsDeviceReady+0x258>)
 800535c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800536c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2200      	movs	r2, #0
 8005376:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f001 feba 	bl	80070f4 <I2C_WaitOnFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00d      	beq.n	80053a2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005394:	d103      	bne.n	800539e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800539c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e0b6      	b.n	8005510 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053a2:	897b      	ldrh	r3, [r7, #10]
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	461a      	mov	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80053b2:	f7fe f911 	bl	80035d8 <HAL_GetTick>
 80053b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	bf0c      	ite	eq
 80053c6:	2301      	moveq	r3, #1
 80053c8:	2300      	movne	r3, #0
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053dc:	bf0c      	ite	eq
 80053de:	2301      	moveq	r3, #1
 80053e0:	2300      	movne	r3, #0
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80053e6:	e025      	b.n	8005434 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053e8:	f7fe f8f6 	bl	80035d8 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d302      	bcc.n	80053fe <HAL_I2C_IsDeviceReady+0x13a>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d103      	bne.n	8005406 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	22a0      	movs	r2, #160	; 0xa0
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b02      	cmp	r3, #2
 8005412:	bf0c      	ite	eq
 8005414:	2301      	moveq	r3, #1
 8005416:	2300      	movne	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800542a:	bf0c      	ite	eq
 800542c:	2301      	moveq	r3, #1
 800542e:	2300      	movne	r3, #0
 8005430:	b2db      	uxtb	r3, r3
 8005432:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2ba0      	cmp	r3, #160	; 0xa0
 800543e:	d005      	beq.n	800544c <HAL_I2C_IsDeviceReady+0x188>
 8005440:	7dfb      	ldrb	r3, [r7, #23]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d102      	bne.n	800544c <HAL_I2C_IsDeviceReady+0x188>
 8005446:	7dbb      	ldrb	r3, [r7, #22]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0cd      	beq.n	80053e8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b02      	cmp	r3, #2
 8005460:	d129      	bne.n	80054b6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005470:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005472:	2300      	movs	r3, #0
 8005474:	613b      	str	r3, [r7, #16]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	613b      	str	r3, [r7, #16]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	2319      	movs	r3, #25
 800548e:	2201      	movs	r2, #1
 8005490:	4921      	ldr	r1, [pc, #132]	; (8005518 <HAL_I2C_IsDeviceReady+0x254>)
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f001 fe2e 	bl	80070f4 <I2C_WaitOnFlagUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e036      	b.n	8005510 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	e02c      	b.n	8005510 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054ce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	2319      	movs	r3, #25
 80054d6:	2201      	movs	r2, #1
 80054d8:	490f      	ldr	r1, [pc, #60]	; (8005518 <HAL_I2C_IsDeviceReady+0x254>)
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f001 fe0a 	bl	80070f4 <I2C_WaitOnFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e012      	b.n	8005510 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	3301      	adds	r3, #1
 80054ee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	f4ff af32 	bcc.w	800535e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800550e:	2302      	movs	r3, #2
  }
}
 8005510:	4618      	mov	r0, r3
 8005512:	3720      	adds	r7, #32
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	00100002 	.word	0x00100002
 800551c:	ffff0000 	.word	0xffff0000

08005520 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005538:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005540:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005548:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800554a:	7bfb      	ldrb	r3, [r7, #15]
 800554c:	2b10      	cmp	r3, #16
 800554e:	d003      	beq.n	8005558 <HAL_I2C_EV_IRQHandler+0x38>
 8005550:	7bfb      	ldrb	r3, [r7, #15]
 8005552:	2b40      	cmp	r3, #64	; 0x40
 8005554:	f040 80c1 	bne.w	80056da <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10d      	bne.n	800558e <HAL_I2C_EV_IRQHandler+0x6e>
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005578:	d003      	beq.n	8005582 <HAL_I2C_EV_IRQHandler+0x62>
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005580:	d101      	bne.n	8005586 <HAL_I2C_EV_IRQHandler+0x66>
 8005582:	2301      	movs	r3, #1
 8005584:	e000      	b.n	8005588 <HAL_I2C_EV_IRQHandler+0x68>
 8005586:	2300      	movs	r3, #0
 8005588:	2b01      	cmp	r3, #1
 800558a:	f000 8132 	beq.w	80057f2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00c      	beq.n	80055b2 <HAL_I2C_EV_IRQHandler+0x92>
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	0a5b      	lsrs	r3, r3, #9
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d006      	beq.n	80055b2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f002 f80c 	bl	80075c2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fd85 	bl	80060ba <I2C_Master_SB>
 80055b0:	e092      	b.n	80056d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	08db      	lsrs	r3, r3, #3
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d009      	beq.n	80055d2 <HAL_I2C_EV_IRQHandler+0xb2>
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	0a5b      	lsrs	r3, r3, #9
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fdfa 	bl	80061c4 <I2C_Master_ADD10>
 80055d0:	e082      	b.n	80056d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	085b      	lsrs	r3, r3, #1
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d009      	beq.n	80055f2 <HAL_I2C_EV_IRQHandler+0xd2>
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	0a5b      	lsrs	r3, r3, #9
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fe13 	bl	8006216 <I2C_Master_ADDR>
 80055f0:	e072      	b.n	80056d8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	089b      	lsrs	r3, r3, #2
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d03b      	beq.n	8005676 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800560c:	f000 80f3 	beq.w	80057f6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	09db      	lsrs	r3, r3, #7
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00f      	beq.n	800563c <HAL_I2C_EV_IRQHandler+0x11c>
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	0a9b      	lsrs	r3, r3, #10
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b00      	cmp	r3, #0
 8005626:	d009      	beq.n	800563c <HAL_I2C_EV_IRQHandler+0x11c>
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	089b      	lsrs	r3, r3, #2
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d103      	bne.n	800563c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f9f1 	bl	8005a1c <I2C_MasterTransmit_TXE>
 800563a:	e04d      	b.n	80056d8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	089b      	lsrs	r3, r3, #2
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 80d6 	beq.w	80057f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	0a5b      	lsrs	r3, r3, #9
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 80cf 	beq.w	80057f6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005658:	7bbb      	ldrb	r3, [r7, #14]
 800565a:	2b21      	cmp	r3, #33	; 0x21
 800565c:	d103      	bne.n	8005666 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fa78 	bl	8005b54 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005664:	e0c7      	b.n	80057f6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	2b40      	cmp	r3, #64	; 0x40
 800566a:	f040 80c4 	bne.w	80057f6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fae6 	bl	8005c40 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005674:	e0bf      	b.n	80057f6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005684:	f000 80b7 	beq.w	80057f6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	099b      	lsrs	r3, r3, #6
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00f      	beq.n	80056b4 <HAL_I2C_EV_IRQHandler+0x194>
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	0a9b      	lsrs	r3, r3, #10
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d009      	beq.n	80056b4 <HAL_I2C_EV_IRQHandler+0x194>
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	089b      	lsrs	r3, r3, #2
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d103      	bne.n	80056b4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 fb5f 	bl	8005d70 <I2C_MasterReceive_RXNE>
 80056b2:	e011      	b.n	80056d8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	089b      	lsrs	r3, r3, #2
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 809a 	beq.w	80057f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	0a5b      	lsrs	r3, r3, #9
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 8093 	beq.w	80057f6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 fc08 	bl	8005ee6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056d6:	e08e      	b.n	80057f6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80056d8:	e08d      	b.n	80057f6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d004      	beq.n	80056ec <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	61fb      	str	r3, [r7, #28]
 80056ea:	e007      	b.n	80056fc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	085b      	lsrs	r3, r3, #1
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d012      	beq.n	800572e <HAL_I2C_EV_IRQHandler+0x20e>
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	0a5b      	lsrs	r3, r3, #9
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00c      	beq.n	800572e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005724:	69b9      	ldr	r1, [r7, #24]
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 ffcc 	bl	80066c4 <I2C_Slave_ADDR>
 800572c:	e066      	b.n	80057fc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	091b      	lsrs	r3, r3, #4
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d009      	beq.n	800574e <HAL_I2C_EV_IRQHandler+0x22e>
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	0a5b      	lsrs	r3, r3, #9
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f001 f806 	bl	8006758 <I2C_Slave_STOPF>
 800574c:	e056      	b.n	80057fc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800574e:	7bbb      	ldrb	r3, [r7, #14]
 8005750:	2b21      	cmp	r3, #33	; 0x21
 8005752:	d002      	beq.n	800575a <HAL_I2C_EV_IRQHandler+0x23a>
 8005754:	7bbb      	ldrb	r3, [r7, #14]
 8005756:	2b29      	cmp	r3, #41	; 0x29
 8005758:	d125      	bne.n	80057a6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	09db      	lsrs	r3, r3, #7
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00f      	beq.n	8005786 <HAL_I2C_EV_IRQHandler+0x266>
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	0a9b      	lsrs	r3, r3, #10
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <HAL_I2C_EV_IRQHandler+0x266>
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	089b      	lsrs	r3, r3, #2
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d103      	bne.n	8005786 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fee4 	bl	800654c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005784:	e039      	b.n	80057fa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	089b      	lsrs	r3, r3, #2
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d033      	beq.n	80057fa <HAL_I2C_EV_IRQHandler+0x2da>
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	0a5b      	lsrs	r3, r3, #9
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d02d      	beq.n	80057fa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 ff11 	bl	80065c6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80057a4:	e029      	b.n	80057fa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	099b      	lsrs	r3, r3, #6
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00f      	beq.n	80057d2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	0a9b      	lsrs	r3, r3, #10
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d009      	beq.n	80057d2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	089b      	lsrs	r3, r3, #2
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d103      	bne.n	80057d2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 ff1b 	bl	8006606 <I2C_SlaveReceive_RXNE>
 80057d0:	e014      	b.n	80057fc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	089b      	lsrs	r3, r3, #2
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00e      	beq.n	80057fc <HAL_I2C_EV_IRQHandler+0x2dc>
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	0a5b      	lsrs	r3, r3, #9
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d008      	beq.n	80057fc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 ff49 	bl	8006682 <I2C_SlaveReceive_BTF>
 80057f0:	e004      	b.n	80057fc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80057f2:	bf00      	nop
 80057f4:	e002      	b.n	80057fc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057f6:	bf00      	nop
 80057f8:	e000      	b.n	80057fc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80057fa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80057fc:	3720      	adds	r7, #32
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b08a      	sub	sp, #40	; 0x28
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800581a:	2300      	movs	r3, #0
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005824:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	0a1b      	lsrs	r3, r3, #8
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d016      	beq.n	8005860 <HAL_I2C_ER_IRQHandler+0x5e>
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	0a1b      	lsrs	r3, r3, #8
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d010      	beq.n	8005860 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	f043 0301 	orr.w	r3, r3, #1
 8005844:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800584e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800585e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	0a5b      	lsrs	r3, r3, #9
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00e      	beq.n	800588a <HAL_I2C_ER_IRQHandler+0x88>
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	0a1b      	lsrs	r3, r3, #8
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	d008      	beq.n	800588a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	f043 0302 	orr.w	r3, r3, #2
 800587e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005888:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	0a9b      	lsrs	r3, r3, #10
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d03f      	beq.n	8005916 <HAL_I2C_ER_IRQHandler+0x114>
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	0a1b      	lsrs	r3, r3, #8
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d039      	beq.n	8005916 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80058a2:	7efb      	ldrb	r3, [r7, #27]
 80058a4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80058bc:	7ebb      	ldrb	r3, [r7, #26]
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d112      	bne.n	80058e8 <HAL_I2C_ER_IRQHandler+0xe6>
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10f      	bne.n	80058e8 <HAL_I2C_ER_IRQHandler+0xe6>
 80058c8:	7cfb      	ldrb	r3, [r7, #19]
 80058ca:	2b21      	cmp	r3, #33	; 0x21
 80058cc:	d008      	beq.n	80058e0 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80058ce:	7cfb      	ldrb	r3, [r7, #19]
 80058d0:	2b29      	cmp	r3, #41	; 0x29
 80058d2:	d005      	beq.n	80058e0 <HAL_I2C_ER_IRQHandler+0xde>
 80058d4:	7cfb      	ldrb	r3, [r7, #19]
 80058d6:	2b28      	cmp	r3, #40	; 0x28
 80058d8:	d106      	bne.n	80058e8 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2b21      	cmp	r3, #33	; 0x21
 80058de:	d103      	bne.n	80058e8 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f001 f869 	bl	80069b8 <I2C_Slave_AF>
 80058e6:	e016      	b.n	8005916 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058f0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	f043 0304 	orr.w	r3, r3, #4
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80058fa:	7efb      	ldrb	r3, [r7, #27]
 80058fc:	2b10      	cmp	r3, #16
 80058fe:	d002      	beq.n	8005906 <HAL_I2C_ER_IRQHandler+0x104>
 8005900:	7efb      	ldrb	r3, [r7, #27]
 8005902:	2b40      	cmp	r3, #64	; 0x40
 8005904:	d107      	bne.n	8005916 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005914:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	0adb      	lsrs	r3, r3, #11
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00e      	beq.n	8005940 <HAL_I2C_ER_IRQHandler+0x13e>
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	0a1b      	lsrs	r3, r3, #8
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d008      	beq.n	8005940 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	f043 0308 	orr.w	r3, r3, #8
 8005934:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800593e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	2b00      	cmp	r3, #0
 8005944:	d008      	beq.n	8005958 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	431a      	orrs	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f001 f8a4 	bl	8006aa0 <I2C_ITError>
  }
}
 8005958:	bf00      	nop
 800595a:	3728      	adds	r7, #40	; 0x28
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	bc80      	pop	{r7}
 8005970:	4770      	bx	lr

08005972 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005972:	b480      	push	{r7}
 8005974:	b083      	sub	sp, #12
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr

08005984 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	bc80      	pop	{r7}
 8005994:	4770      	bx	lr

08005996 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bc80      	pop	{r7}
 80059a6:	4770      	bx	lr

080059a8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	70fb      	strb	r3, [r7, #3]
 80059b4:	4613      	mov	r3, r2
 80059b6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr

080059c2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr

080059d4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bc80      	pop	{r7}
 80059e4:	4770      	bx	lr

080059e6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bc80      	pop	{r7}
 80059f6:	4770      	bx	lr

080059f8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bc80      	pop	{r7}
 8005a08:	4770      	bx	lr

08005a0a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005a12:	bf00      	nop
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr

08005a1c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a32:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d150      	bne.n	8005ae4 <I2C_MasterTransmit_TXE+0xc8>
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	2b21      	cmp	r3, #33	; 0x21
 8005a46:	d14d      	bne.n	8005ae4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b08      	cmp	r3, #8
 8005a4c:	d01d      	beq.n	8005a8a <I2C_MasterTransmit_TXE+0x6e>
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	d01a      	beq.n	8005a8a <I2C_MasterTransmit_TXE+0x6e>
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a5a:	d016      	beq.n	8005a8a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a6a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2211      	movs	r2, #17
 8005a70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7ff ff6c 	bl	8005960 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005a88:	e060      	b.n	8005b4c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a98:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b40      	cmp	r3, #64	; 0x40
 8005ac2:	d107      	bne.n	8005ad4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff ff81 	bl	80059d4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005ad2:	e03b      	b.n	8005b4c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f7ff ff3f 	bl	8005960 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005ae2:	e033      	b.n	8005b4c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
 8005ae6:	2b21      	cmp	r3, #33	; 0x21
 8005ae8:	d005      	beq.n	8005af6 <I2C_MasterTransmit_TXE+0xda>
 8005aea:	7bbb      	ldrb	r3, [r7, #14]
 8005aec:	2b40      	cmp	r3, #64	; 0x40
 8005aee:	d12d      	bne.n	8005b4c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	2b22      	cmp	r3, #34	; 0x22
 8005af4:	d12a      	bne.n	8005b4c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d108      	bne.n	8005b12 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b0e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005b10:	e01c      	b.n	8005b4c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b40      	cmp	r3, #64	; 0x40
 8005b1c:	d103      	bne.n	8005b26 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f88e 	bl	8005c40 <I2C_MemoryTransmit_TXE_BTF>
}
 8005b24:	e012      	b.n	8005b4c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	781a      	ldrb	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005b4a:	e7ff      	b.n	8005b4c <I2C_MasterTransmit_TXE+0x130>
 8005b4c:	bf00      	nop
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b21      	cmp	r3, #33	; 0x21
 8005b6c:	d164      	bne.n	8005c38 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d012      	beq.n	8005b9e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	781a      	ldrb	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005b9c:	e04c      	b.n	8005c38 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d01d      	beq.n	8005be0 <I2C_MasterTransmit_BTF+0x8c>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d01a      	beq.n	8005be0 <I2C_MasterTransmit_BTF+0x8c>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bb0:	d016      	beq.n	8005be0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bc0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2211      	movs	r2, #17
 8005bc6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff fec1 	bl	8005960 <HAL_I2C_MasterTxCpltCallback>
}
 8005bde:	e02b      	b.n	8005c38 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bee:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bfe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b40      	cmp	r3, #64	; 0x40
 8005c18:	d107      	bne.n	8005c2a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff fed6 	bl	80059d4 <HAL_I2C_MemTxCpltCallback>
}
 8005c28:	e006      	b.n	8005c38 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7ff fe94 	bl	8005960 <HAL_I2C_MasterTxCpltCallback>
}
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c4e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d11d      	bne.n	8005c94 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d10b      	bne.n	8005c78 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c70:	1c9a      	adds	r2, r3, #2
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005c76:	e077      	b.n	8005d68 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	121b      	asrs	r3, r3, #8
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005c92:	e069      	b.n	8005d68 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d10b      	bne.n	8005cb4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005cb2:	e059      	b.n	8005d68 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d152      	bne.n	8005d62 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	2b22      	cmp	r3, #34	; 0x22
 8005cc0:	d10d      	bne.n	8005cde <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cd0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005cdc:	e044      	b.n	8005d68 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d015      	beq.n	8005d14 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	2b21      	cmp	r3, #33	; 0x21
 8005cec:	d112      	bne.n	8005d14 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	781a      	ldrb	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005d12:	e029      	b.n	8005d68 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d124      	bne.n	8005d68 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	2b21      	cmp	r3, #33	; 0x21
 8005d22:	d121      	bne.n	8005d68 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d32:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d42:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff fe3a 	bl	80059d4 <HAL_I2C_MemTxCpltCallback>
}
 8005d60:	e002      	b.n	8005d68 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7fe ff30 	bl	8004bc8 <I2C_Flush_DR>
}
 8005d68:	bf00      	nop
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b22      	cmp	r3, #34	; 0x22
 8005d82:	f040 80ac 	bne.w	8005ede <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d921      	bls.n	8005dd8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691a      	ldr	r2, [r3, #16]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da6:	1c5a      	adds	r2, r3, #1
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	f040 808c 	bne.w	8005ede <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dd4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005dd6:	e082      	b.n	8005ede <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d075      	beq.n	8005ecc <I2C_MasterReceive_RXNE+0x15c>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d002      	beq.n	8005dec <I2C_MasterReceive_RXNE+0x7c>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d16f      	bne.n	8005ecc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f001 fb2b 	bl	8007448 <I2C_WaitOnSTOPRequestThroughIT>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d142      	bne.n	8005e7e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e06:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e16:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691a      	ldr	r2, [r3, #16]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	3b01      	subs	r3, #1
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b40      	cmp	r3, #64	; 0x40
 8005e50:	d10a      	bne.n	8005e68 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7ff fdc0 	bl	80059e6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005e66:	e03a      	b.n	8005ede <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2212      	movs	r2, #18
 8005e74:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff fd7b 	bl	8005972 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005e7c:	e02f      	b.n	8005ede <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e8c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	691a      	ldr	r2, [r3, #16]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	b2d2      	uxtb	r2, r2
 8005e9a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7ff fd97 	bl	80059f8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005eca:	e008      	b.n	8005ede <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eda:	605a      	str	r2, [r3, #4]
}
 8005edc:	e7ff      	b.n	8005ede <I2C_MasterReceive_RXNE+0x16e>
 8005ede:	bf00      	nop
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b084      	sub	sp, #16
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d11b      	bne.n	8005f36 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f0c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	691a      	ldr	r2, [r3, #16]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005f34:	e0bd      	b.n	80060b2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d129      	bne.n	8005f94 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f4e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2b04      	cmp	r3, #4
 8005f54:	d00a      	beq.n	8005f6c <I2C_MasterReceive_BTF+0x86>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d007      	beq.n	8005f6c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f6a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691a      	ldr	r2, [r3, #16]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	b2d2      	uxtb	r2, r2
 8005f78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	1c5a      	adds	r2, r3, #1
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005f92:	e08e      	b.n	80060b2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d176      	bne.n	800608c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d002      	beq.n	8005faa <I2C_MasterReceive_BTF+0xc4>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2b10      	cmp	r3, #16
 8005fa8:	d108      	bne.n	8005fbc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	e019      	b.n	8005ff0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d002      	beq.n	8005fc8 <I2C_MasterReceive_BTF+0xe2>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d108      	bne.n	8005fda <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	e00a      	b.n	8005ff0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2b10      	cmp	r3, #16
 8005fde:	d007      	beq.n	8005ff0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691a      	ldr	r2, [r3, #16]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600c:	b29b      	uxth	r3, r3
 800600e:	3b01      	subs	r3, #1
 8006010:	b29a      	uxth	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	b2d2      	uxtb	r2, r2
 8006022:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	1c5a      	adds	r2, r3, #1
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006032:	b29b      	uxth	r3, r3
 8006034:	3b01      	subs	r3, #1
 8006036:	b29a      	uxth	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800604a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2220      	movs	r2, #32
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b40      	cmp	r3, #64	; 0x40
 800605e:	d10a      	bne.n	8006076 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7ff fcb9 	bl	80059e6 <HAL_I2C_MemRxCpltCallback>
}
 8006074:	e01d      	b.n	80060b2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2212      	movs	r2, #18
 8006082:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7ff fc74 	bl	8005972 <HAL_I2C_MasterRxCpltCallback>
}
 800608a:	e012      	b.n	80060b2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691a      	ldr	r2, [r3, #16]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	3b01      	subs	r3, #1
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80060b2:	bf00      	nop
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b40      	cmp	r3, #64	; 0x40
 80060cc:	d117      	bne.n	80060fe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d109      	bne.n	80060ea <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	461a      	mov	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80060e6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80060e8:	e067      	b.n	80061ba <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	f043 0301 	orr.w	r3, r3, #1
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	611a      	str	r2, [r3, #16]
}
 80060fc:	e05d      	b.n	80061ba <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006106:	d133      	bne.n	8006170 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b21      	cmp	r3, #33	; 0x21
 8006112:	d109      	bne.n	8006128 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006118:	b2db      	uxtb	r3, r3
 800611a:	461a      	mov	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006124:	611a      	str	r2, [r3, #16]
 8006126:	e008      	b.n	800613a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612c:	b2db      	uxtb	r3, r3
 800612e:	f043 0301 	orr.w	r3, r3, #1
 8006132:	b2da      	uxtb	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800613e:	2b00      	cmp	r3, #0
 8006140:	d004      	beq.n	800614c <I2C_Master_SB+0x92>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006148:	2b00      	cmp	r3, #0
 800614a:	d108      	bne.n	800615e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006150:	2b00      	cmp	r3, #0
 8006152:	d032      	beq.n	80061ba <I2C_Master_SB+0x100>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615a:	2b00      	cmp	r3, #0
 800615c:	d02d      	beq.n	80061ba <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800616c:	605a      	str	r2, [r3, #4]
}
 800616e:	e024      	b.n	80061ba <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10e      	bne.n	8006196 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617c:	b29b      	uxth	r3, r3
 800617e:	11db      	asrs	r3, r3, #7
 8006180:	b2db      	uxtb	r3, r3
 8006182:	f003 0306 	and.w	r3, r3, #6
 8006186:	b2db      	uxtb	r3, r3
 8006188:	f063 030f 	orn	r3, r3, #15
 800618c:	b2da      	uxtb	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	611a      	str	r2, [r3, #16]
}
 8006194:	e011      	b.n	80061ba <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800619a:	2b01      	cmp	r3, #1
 800619c:	d10d      	bne.n	80061ba <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	11db      	asrs	r3, r3, #7
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	f003 0306 	and.w	r3, r3, #6
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	f063 030e 	orn	r3, r3, #14
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	611a      	str	r2, [r3, #16]
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	bc80      	pop	{r7}
 80061c2:	4770      	bx	lr

080061c4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d004      	beq.n	80061ea <I2C_Master_ADD10+0x26>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d108      	bne.n	80061fc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00c      	beq.n	800620c <I2C_Master_ADD10+0x48>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d007      	beq.n	800620c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800620a:	605a      	str	r2, [r3, #4]
  }
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	bc80      	pop	{r7}
 8006214:	4770      	bx	lr

08006216 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006216:	b480      	push	{r7}
 8006218:	b091      	sub	sp, #68	; 0x44
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006224:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006232:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b22      	cmp	r3, #34	; 0x22
 800623e:	f040 8174 	bne.w	800652a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10f      	bne.n	800626a <I2C_Master_ADDR+0x54>
 800624a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800624e:	2b40      	cmp	r3, #64	; 0x40
 8006250:	d10b      	bne.n	800626a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006252:	2300      	movs	r3, #0
 8006254:	633b      	str	r3, [r7, #48]	; 0x30
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	633b      	str	r3, [r7, #48]	; 0x30
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	633b      	str	r3, [r7, #48]	; 0x30
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	e16b      	b.n	8006542 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800626e:	2b00      	cmp	r3, #0
 8006270:	d11d      	bne.n	80062ae <I2C_Master_ADDR+0x98>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800627a:	d118      	bne.n	80062ae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800627c:	2300      	movs	r3, #0
 800627e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006290:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062a0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a6:	1c5a      	adds	r2, r3, #1
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	651a      	str	r2, [r3, #80]	; 0x50
 80062ac:	e149      	b.n	8006542 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d113      	bne.n	80062e0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062b8:	2300      	movs	r3, #0
 80062ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	e120      	b.n	8006522 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	f040 808a 	bne.w	8006400 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80062ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062f2:	d137      	bne.n	8006364 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006302:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800630e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006312:	d113      	bne.n	800633c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006322:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006324:	2300      	movs	r3, #0
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	627b      	str	r3, [r7, #36]	; 0x24
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	627b      	str	r3, [r7, #36]	; 0x24
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	e0f2      	b.n	8006522 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800633c:	2300      	movs	r3, #0
 800633e:	623b      	str	r3, [r7, #32]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	623b      	str	r3, [r7, #32]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	623b      	str	r3, [r7, #32]
 8006350:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	e0de      	b.n	8006522 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	2b08      	cmp	r3, #8
 8006368:	d02e      	beq.n	80063c8 <I2C_Master_ADDR+0x1b2>
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	2b20      	cmp	r3, #32
 800636e:	d02b      	beq.n	80063c8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006372:	2b12      	cmp	r3, #18
 8006374:	d102      	bne.n	800637c <I2C_Master_ADDR+0x166>
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	2b01      	cmp	r3, #1
 800637a:	d125      	bne.n	80063c8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800637c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637e:	2b04      	cmp	r3, #4
 8006380:	d00e      	beq.n	80063a0 <I2C_Master_ADDR+0x18a>
 8006382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006384:	2b02      	cmp	r3, #2
 8006386:	d00b      	beq.n	80063a0 <I2C_Master_ADDR+0x18a>
 8006388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638a:	2b10      	cmp	r3, #16
 800638c:	d008      	beq.n	80063a0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	e007      	b.n	80063b0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063ae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063b0:	2300      	movs	r3, #0
 80063b2:	61fb      	str	r3, [r7, #28]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	61fb      	str	r3, [r7, #28]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	61fb      	str	r3, [r7, #28]
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	e0ac      	b.n	8006522 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063d8:	2300      	movs	r3, #0
 80063da:	61bb      	str	r3, [r7, #24]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	61bb      	str	r3, [r7, #24]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	61bb      	str	r3, [r7, #24]
 80063ec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	e090      	b.n	8006522 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006404:	b29b      	uxth	r3, r3
 8006406:	2b02      	cmp	r3, #2
 8006408:	d158      	bne.n	80064bc <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800640a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640c:	2b04      	cmp	r3, #4
 800640e:	d021      	beq.n	8006454 <I2C_Master_ADDR+0x23e>
 8006410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006412:	2b02      	cmp	r3, #2
 8006414:	d01e      	beq.n	8006454 <I2C_Master_ADDR+0x23e>
 8006416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006418:	2b10      	cmp	r3, #16
 800641a:	d01b      	beq.n	8006454 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800642a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800642c:	2300      	movs	r3, #0
 800642e:	617b      	str	r3, [r7, #20]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	e012      	b.n	800647a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006462:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006464:	2300      	movs	r3, #0
 8006466:	613b      	str	r3, [r7, #16]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	613b      	str	r3, [r7, #16]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	613b      	str	r3, [r7, #16]
 8006478:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006488:	d14b      	bne.n	8006522 <I2C_Master_ADDR+0x30c>
 800648a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006490:	d00b      	beq.n	80064aa <I2C_Master_ADDR+0x294>
 8006492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006494:	2b01      	cmp	r3, #1
 8006496:	d008      	beq.n	80064aa <I2C_Master_ADDR+0x294>
 8006498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649a:	2b08      	cmp	r3, #8
 800649c:	d005      	beq.n	80064aa <I2C_Master_ADDR+0x294>
 800649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a0:	2b10      	cmp	r3, #16
 80064a2:	d002      	beq.n	80064aa <I2C_Master_ADDR+0x294>
 80064a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a6:	2b20      	cmp	r3, #32
 80064a8:	d13b      	bne.n	8006522 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064b8:	605a      	str	r2, [r3, #4]
 80064ba:	e032      	b.n	8006522 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064ca:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064da:	d117      	bne.n	800650c <I2C_Master_ADDR+0x2f6>
 80064dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064e2:	d00b      	beq.n	80064fc <I2C_Master_ADDR+0x2e6>
 80064e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d008      	beq.n	80064fc <I2C_Master_ADDR+0x2e6>
 80064ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	d005      	beq.n	80064fc <I2C_Master_ADDR+0x2e6>
 80064f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f2:	2b10      	cmp	r3, #16
 80064f4:	d002      	beq.n	80064fc <I2C_Master_ADDR+0x2e6>
 80064f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f8:	2b20      	cmp	r3, #32
 80064fa:	d107      	bne.n	800650c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800650a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800650c:	2300      	movs	r3, #0
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	60fb      	str	r3, [r7, #12]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006528:	e00b      	b.n	8006542 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800652a:	2300      	movs	r3, #0
 800652c:	60bb      	str	r3, [r7, #8]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	60bb      	str	r3, [r7, #8]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	60bb      	str	r3, [r7, #8]
 800653e:	68bb      	ldr	r3, [r7, #8]
}
 8006540:	e7ff      	b.n	8006542 <I2C_Master_ADDR+0x32c>
 8006542:	bf00      	nop
 8006544:	3744      	adds	r7, #68	; 0x44
 8006546:	46bd      	mov	sp, r7
 8006548:	bc80      	pop	{r7}
 800654a:	4770      	bx	lr

0800654c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800655a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006560:	b29b      	uxth	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d02b      	beq.n	80065be <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656a:	781a      	ldrb	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	1c5a      	adds	r2, r3, #1
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006580:	b29b      	uxth	r3, r3
 8006582:	3b01      	subs	r3, #1
 8006584:	b29a      	uxth	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800658e:	b29b      	uxth	r3, r3
 8006590:	2b00      	cmp	r3, #0
 8006592:	d114      	bne.n	80065be <I2C_SlaveTransmit_TXE+0x72>
 8006594:	7bfb      	ldrb	r3, [r7, #15]
 8006596:	2b29      	cmp	r3, #41	; 0x29
 8006598:	d111      	bne.n	80065be <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065a8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2221      	movs	r2, #33	; 0x21
 80065ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2228      	movs	r2, #40	; 0x28
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f7ff f9e3 	bl	8005984 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80065be:	bf00      	nop
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b083      	sub	sp, #12
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d011      	beq.n	80065fc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065dc:	781a      	ldrb	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	3b01      	subs	r3, #1
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	bc80      	pop	{r7}
 8006604:	4770      	bx	lr

08006606 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006614:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661a:	b29b      	uxth	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d02c      	beq.n	800667a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691a      	ldr	r2, [r3, #16]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	b2d2      	uxtb	r2, r2
 800662c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663c:	b29b      	uxth	r3, r3
 800663e:	3b01      	subs	r3, #1
 8006640:	b29a      	uxth	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664a:	b29b      	uxth	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	d114      	bne.n	800667a <I2C_SlaveReceive_RXNE+0x74>
 8006650:	7bfb      	ldrb	r3, [r7, #15]
 8006652:	2b2a      	cmp	r3, #42	; 0x2a
 8006654:	d111      	bne.n	800667a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006664:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2222      	movs	r2, #34	; 0x22
 800666a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2228      	movs	r2, #40	; 0x28
 8006670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f7ff f98e 	bl	8005996 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800667a:	bf00      	nop
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006682:	b480      	push	{r7}
 8006684:	b083      	sub	sp, #12
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668e:	b29b      	uxth	r3, r3
 8006690:	2b00      	cmp	r3, #0
 8006692:	d012      	beq.n	80066ba <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	691a      	ldr	r2, [r3, #16]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	1c5a      	adds	r2, r3, #1
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	3b01      	subs	r3, #1
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80066ba:	bf00      	nop
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	bc80      	pop	{r7}
 80066c2:	4770      	bx	lr

080066c4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80066ce:	2300      	movs	r3, #0
 80066d0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80066de:	2b28      	cmp	r3, #40	; 0x28
 80066e0:	d127      	bne.n	8006732 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066f0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	089b      	lsrs	r3, r3, #2
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80066fe:	2301      	movs	r3, #1
 8006700:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	09db      	lsrs	r3, r3, #7
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d103      	bne.n	8006716 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	81bb      	strh	r3, [r7, #12]
 8006714:	e002      	b.n	800671c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006724:	89ba      	ldrh	r2, [r7, #12]
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	4619      	mov	r1, r3
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7ff f93c 	bl	80059a8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006730:	e00e      	b.n	8006750 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006732:	2300      	movs	r3, #0
 8006734:	60bb      	str	r3, [r7, #8]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	60bb      	str	r3, [r7, #8]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	60bb      	str	r3, [r7, #8]
 8006746:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006750:	bf00      	nop
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006766:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006776:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006778:	2300      	movs	r3, #0
 800677a:	60bb      	str	r3, [r7, #8]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	60bb      	str	r3, [r7, #8]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f042 0201 	orr.w	r2, r2, #1
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067b4:	d172      	bne.n	800689c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
 80067b8:	2b22      	cmp	r3, #34	; 0x22
 80067ba:	d002      	beq.n	80067c2 <I2C_Slave_STOPF+0x6a>
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
 80067be:	2b2a      	cmp	r3, #42	; 0x2a
 80067c0:	d135      	bne.n	800682e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d005      	beq.n	80067e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	f043 0204 	orr.w	r2, r3, #4
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fd fe90 	bl	8004520 <HAL_DMA_GetState>
 8006800:	4603      	mov	r3, r0
 8006802:	2b01      	cmp	r3, #1
 8006804:	d049      	beq.n	800689a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680a:	4a69      	ldr	r2, [pc, #420]	; (80069b0 <I2C_Slave_STOPF+0x258>)
 800680c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006812:	4618      	mov	r0, r3
 8006814:	f7fd fd06 	bl	8004224 <HAL_DMA_Abort_IT>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d03d      	beq.n	800689a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006828:	4610      	mov	r0, r2
 800682a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800682c:	e035      	b.n	800689a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	b29a      	uxth	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006840:	b29b      	uxth	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d005      	beq.n	8006852 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	f043 0204 	orr.w	r2, r3, #4
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006860:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006866:	4618      	mov	r0, r3
 8006868:	f7fd fe5a 	bl	8004520 <HAL_DMA_GetState>
 800686c:	4603      	mov	r3, r0
 800686e:	2b01      	cmp	r3, #1
 8006870:	d014      	beq.n	800689c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006876:	4a4e      	ldr	r2, [pc, #312]	; (80069b0 <I2C_Slave_STOPF+0x258>)
 8006878:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687e:	4618      	mov	r0, r3
 8006880:	f7fd fcd0 	bl	8004224 <HAL_DMA_Abort_IT>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d008      	beq.n	800689c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800688e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006894:	4610      	mov	r0, r2
 8006896:	4798      	blx	r3
 8006898:	e000      	b.n	800689c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800689a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d03e      	beq.n	8006924 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d112      	bne.n	80068da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	691a      	ldr	r2, [r3, #16]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e4:	2b40      	cmp	r3, #64	; 0x40
 80068e6:	d112      	bne.n	800690e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	691a      	ldr	r2, [r3, #16]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f2:	b2d2      	uxtb	r2, r2
 80068f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006904:	b29b      	uxth	r3, r3
 8006906:	3b01      	subs	r3, #1
 8006908:	b29a      	uxth	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006912:	b29b      	uxth	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	d005      	beq.n	8006924 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691c:	f043 0204 	orr.w	r2, r3, #4
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f8b7 	bl	8006aa0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006932:	e039      	b.n	80069a8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006934:	7bfb      	ldrb	r3, [r7, #15]
 8006936:	2b2a      	cmp	r3, #42	; 0x2a
 8006938:	d109      	bne.n	800694e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2228      	movs	r2, #40	; 0x28
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff f824 	bl	8005996 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b28      	cmp	r3, #40	; 0x28
 8006958:	d111      	bne.n	800697e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a15      	ldr	r2, [pc, #84]	; (80069b4 <I2C_Slave_STOPF+0x25c>)
 800695e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2220      	movs	r2, #32
 800696a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff f823 	bl	80059c2 <HAL_I2C_ListenCpltCallback>
}
 800697c:	e014      	b.n	80069a8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006982:	2b22      	cmp	r3, #34	; 0x22
 8006984:	d002      	beq.n	800698c <I2C_Slave_STOPF+0x234>
 8006986:	7bfb      	ldrb	r3, [r7, #15]
 8006988:	2b22      	cmp	r3, #34	; 0x22
 800698a:	d10d      	bne.n	80069a8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2220      	movs	r2, #32
 8006996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7fe fff7 	bl	8005996 <HAL_I2C_SlaveRxCpltCallback>
}
 80069a8:	bf00      	nop
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	08006fa5 	.word	0x08006fa5
 80069b4:	ffff0000 	.word	0xffff0000

080069b8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069cc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d002      	beq.n	80069da <I2C_Slave_AF+0x22>
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2b20      	cmp	r3, #32
 80069d8:	d129      	bne.n	8006a2e <I2C_Slave_AF+0x76>
 80069da:	7bfb      	ldrb	r3, [r7, #15]
 80069dc:	2b28      	cmp	r3, #40	; 0x28
 80069de:	d126      	bne.n	8006a2e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a2e      	ldr	r2, [pc, #184]	; (8006a9c <I2C_Slave_AF+0xe4>)
 80069e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80069f4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069fe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a0e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7fe ffcb 	bl	80059c2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006a2c:	e031      	b.n	8006a92 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	2b21      	cmp	r3, #33	; 0x21
 8006a32:	d129      	bne.n	8006a88 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a19      	ldr	r2, [pc, #100]	; (8006a9c <I2C_Slave_AF+0xe4>)
 8006a38:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2221      	movs	r2, #33	; 0x21
 8006a3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a5e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a68:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a78:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7fe f8a4 	bl	8004bc8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7fe ff7f 	bl	8005984 <HAL_I2C_SlaveTxCpltCallback>
}
 8006a86:	e004      	b.n	8006a92 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a90:	615a      	str	r2, [r3, #20]
}
 8006a92:	bf00      	nop
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	ffff0000 	.word	0xffff0000

08006aa0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ab6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006ab8:	7bbb      	ldrb	r3, [r7, #14]
 8006aba:	2b10      	cmp	r3, #16
 8006abc:	d002      	beq.n	8006ac4 <I2C_ITError+0x24>
 8006abe:	7bbb      	ldrb	r3, [r7, #14]
 8006ac0:	2b40      	cmp	r3, #64	; 0x40
 8006ac2:	d10a      	bne.n	8006ada <I2C_ITError+0x3a>
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
 8006ac6:	2b22      	cmp	r3, #34	; 0x22
 8006ac8:	d107      	bne.n	8006ada <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ad8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
 8006adc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ae0:	2b28      	cmp	r3, #40	; 0x28
 8006ae2:	d107      	bne.n	8006af4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2228      	movs	r2, #40	; 0x28
 8006aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006af2:	e015      	b.n	8006b20 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b02:	d00a      	beq.n	8006b1a <I2C_ITError+0x7a>
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	2b60      	cmp	r3, #96	; 0x60
 8006b08:	d007      	beq.n	8006b1a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b2e:	d162      	bne.n	8006bf6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b3e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d020      	beq.n	8006b90 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b52:	4a6a      	ldr	r2, [pc, #424]	; (8006cfc <I2C_ITError+0x25c>)
 8006b54:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fd fb62 	bl	8004224 <HAL_DMA_Abort_IT>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 8089 	beq.w	8006c7a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 0201 	bic.w	r2, r2, #1
 8006b76:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	4798      	blx	r3
 8006b8e:	e074      	b.n	8006c7a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b94:	4a59      	ldr	r2, [pc, #356]	; (8006cfc <I2C_ITError+0x25c>)
 8006b96:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fd fb41 	bl	8004224 <HAL_DMA_Abort_IT>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d068      	beq.n	8006c7a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb2:	2b40      	cmp	r3, #64	; 0x40
 8006bb4:	d10b      	bne.n	8006bce <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	691a      	ldr	r2, [r3, #16]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 0201 	bic.w	r2, r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2220      	movs	r2, #32
 8006be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	4798      	blx	r3
 8006bf4:	e041      	b.n	8006c7a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b60      	cmp	r3, #96	; 0x60
 8006c00:	d125      	bne.n	8006c4e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1a:	2b40      	cmp	r3, #64	; 0x40
 8006c1c:	d10b      	bne.n	8006c36 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	691a      	ldr	r2, [r3, #16]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c28:	b2d2      	uxtb	r2, r2
 8006c2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f022 0201 	bic.w	r2, r2, #1
 8006c44:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7fe fedf 	bl	8005a0a <HAL_I2C_AbortCpltCallback>
 8006c4c:	e015      	b.n	8006c7a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c58:	2b40      	cmp	r3, #64	; 0x40
 8006c5a:	d10b      	bne.n	8006c74 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	691a      	ldr	r2, [r3, #16]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7fe febf 	bl	80059f8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10e      	bne.n	8006ca8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d109      	bne.n	8006ca8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d104      	bne.n	8006ca8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d007      	beq.n	8006cb8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006cb6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cbe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	2b04      	cmp	r3, #4
 8006cca:	d113      	bne.n	8006cf4 <I2C_ITError+0x254>
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
 8006cce:	2b28      	cmp	r3, #40	; 0x28
 8006cd0:	d110      	bne.n	8006cf4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a0a      	ldr	r2, [pc, #40]	; (8006d00 <I2C_ITError+0x260>)
 8006cd6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7fe fe67 	bl	80059c2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006cf4:	bf00      	nop
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	08006fa5 	.word	0x08006fa5
 8006d00:	ffff0000 	.word	0xffff0000

08006d04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b088      	sub	sp, #32
 8006d08:	af02      	add	r7, sp, #8
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	607a      	str	r2, [r7, #4]
 8006d0e:	603b      	str	r3, [r7, #0]
 8006d10:	460b      	mov	r3, r1
 8006d12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d006      	beq.n	8006d2e <I2C_MasterRequestWrite+0x2a>
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d003      	beq.n	8006d2e <I2C_MasterRequestWrite+0x2a>
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d2c:	d108      	bne.n	8006d40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	e00b      	b.n	8006d58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d44:	2b12      	cmp	r3, #18
 8006d46:	d107      	bne.n	8006d58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 f9c5 	bl	80070f4 <I2C_WaitOnFlagUntilTimeout>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00d      	beq.n	8006d8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d7e:	d103      	bne.n	8006d88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e035      	b.n	8006df8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d94:	d108      	bne.n	8006da8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d96:	897b      	ldrh	r3, [r7, #10]
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006da4:	611a      	str	r2, [r3, #16]
 8006da6:	e01b      	b.n	8006de0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006da8:	897b      	ldrh	r3, [r7, #10]
 8006daa:	11db      	asrs	r3, r3, #7
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	f003 0306 	and.w	r3, r3, #6
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	f063 030f 	orn	r3, r3, #15
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	490e      	ldr	r1, [pc, #56]	; (8006e00 <I2C_MasterRequestWrite+0xfc>)
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f000 fa0e 	bl	80071e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e010      	b.n	8006df8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006dd6:	897b      	ldrh	r3, [r7, #10]
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	4907      	ldr	r1, [pc, #28]	; (8006e04 <I2C_MasterRequestWrite+0x100>)
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 f9fe 	bl	80071e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e000      	b.n	8006df8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	00010008 	.word	0x00010008
 8006e04:	00010002 	.word	0x00010002

08006e08 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b088      	sub	sp, #32
 8006e0c:	af02      	add	r7, sp, #8
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	607a      	str	r2, [r7, #4]
 8006e12:	603b      	str	r3, [r7, #0]
 8006e14:	460b      	mov	r3, r1
 8006e16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e2c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	d006      	beq.n	8006e42 <I2C_MasterRequestRead+0x3a>
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d003      	beq.n	8006e42 <I2C_MasterRequestRead+0x3a>
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e40:	d108      	bne.n	8006e54 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	e00b      	b.n	8006e6c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e58:	2b11      	cmp	r3, #17
 8006e5a:	d107      	bne.n	8006e6c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 f93b 	bl	80070f4 <I2C_WaitOnFlagUntilTimeout>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00d      	beq.n	8006ea0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e92:	d103      	bne.n	8006e9c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e079      	b.n	8006f94 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ea8:	d108      	bne.n	8006ebc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006eaa:	897b      	ldrh	r3, [r7, #10]
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	f043 0301 	orr.w	r3, r3, #1
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	611a      	str	r2, [r3, #16]
 8006eba:	e05f      	b.n	8006f7c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006ebc:	897b      	ldrh	r3, [r7, #10]
 8006ebe:	11db      	asrs	r3, r3, #7
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	f003 0306 	and.w	r3, r3, #6
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	f063 030f 	orn	r3, r3, #15
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	4930      	ldr	r1, [pc, #192]	; (8006f9c <I2C_MasterRequestRead+0x194>)
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f000 f984 	bl	80071e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e054      	b.n	8006f94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006eea:	897b      	ldrh	r3, [r7, #10]
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	4929      	ldr	r1, [pc, #164]	; (8006fa0 <I2C_MasterRequestRead+0x198>)
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f000 f974 	bl	80071e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e044      	b.n	8006f94 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	613b      	str	r3, [r7, #16]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	695b      	ldr	r3, [r3, #20]
 8006f14:	613b      	str	r3, [r7, #16]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	613b      	str	r3, [r7, #16]
 8006f1e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f2e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 f8d9 	bl	80070f4 <I2C_WaitOnFlagUntilTimeout>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00d      	beq.n	8006f64 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f56:	d103      	bne.n	8006f60 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f5e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e017      	b.n	8006f94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006f64:	897b      	ldrh	r3, [r7, #10]
 8006f66:	11db      	asrs	r3, r3, #7
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	f003 0306 	and.w	r3, r3, #6
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	f063 030e 	orn	r3, r3, #14
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	4907      	ldr	r1, [pc, #28]	; (8006fa0 <I2C_MasterRequestRead+0x198>)
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f000 f930 	bl	80071e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e000      	b.n	8006f94 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	00010008 	.word	0x00010008
 8006fa0:	00010002 	.word	0x00010002

08006fa4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fbc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006fbe:	4b4b      	ldr	r3, [pc, #300]	; (80070ec <I2C_DMAAbort+0x148>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	08db      	lsrs	r3, r3, #3
 8006fc4:	4a4a      	ldr	r2, [pc, #296]	; (80070f0 <I2C_DMAAbort+0x14c>)
 8006fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fca:	0a1a      	lsrs	r2, r3, #8
 8006fcc:	4613      	mov	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	00da      	lsls	r2, r3, #3
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d106      	bne.n	8006fec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe2:	f043 0220 	orr.w	r2, r3, #32
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006fea:	e00a      	b.n	8007002 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007000:	d0ea      	beq.n	8006fd8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800700e:	2200      	movs	r2, #0
 8007010:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701e:	2200      	movs	r2, #0
 8007020:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007030:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2200      	movs	r2, #0
 8007036:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007044:	2200      	movs	r2, #0
 8007046:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704c:	2b00      	cmp	r3, #0
 800704e:	d003      	beq.n	8007058 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007054:	2200      	movs	r2, #0
 8007056:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f022 0201 	bic.w	r2, r2, #1
 8007066:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b60      	cmp	r3, #96	; 0x60
 8007072:	d10e      	bne.n	8007092 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	2220      	movs	r2, #32
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	2200      	movs	r2, #0
 8007088:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800708a:	6978      	ldr	r0, [r7, #20]
 800708c:	f7fe fcbd 	bl	8005a0a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007090:	e027      	b.n	80070e2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007092:	7cfb      	ldrb	r3, [r7, #19]
 8007094:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007098:	2b28      	cmp	r3, #40	; 0x28
 800709a:	d117      	bne.n	80070cc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f042 0201 	orr.w	r2, r2, #1
 80070aa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	2200      	movs	r2, #0
 80070c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2228      	movs	r2, #40	; 0x28
 80070c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80070ca:	e007      	b.n	80070dc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80070dc:	6978      	ldr	r0, [r7, #20]
 80070de:	f7fe fc8b 	bl	80059f8 <HAL_I2C_ErrorCallback>
}
 80070e2:	bf00      	nop
 80070e4:	3718      	adds	r7, #24
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20000060 	.word	0x20000060
 80070f0:	14f8b589 	.word	0x14f8b589

080070f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	603b      	str	r3, [r7, #0]
 8007100:	4613      	mov	r3, r2
 8007102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007104:	e048      	b.n	8007198 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710c:	d044      	beq.n	8007198 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800710e:	f7fc fa63 	bl	80035d8 <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	429a      	cmp	r2, r3
 800711c:	d302      	bcc.n	8007124 <I2C_WaitOnFlagUntilTimeout+0x30>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d139      	bne.n	8007198 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	0c1b      	lsrs	r3, r3, #16
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b01      	cmp	r3, #1
 800712c:	d10d      	bne.n	800714a <I2C_WaitOnFlagUntilTimeout+0x56>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	43da      	mvns	r2, r3
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	4013      	ands	r3, r2
 800713a:	b29b      	uxth	r3, r3
 800713c:	2b00      	cmp	r3, #0
 800713e:	bf0c      	ite	eq
 8007140:	2301      	moveq	r3, #1
 8007142:	2300      	movne	r3, #0
 8007144:	b2db      	uxtb	r3, r3
 8007146:	461a      	mov	r2, r3
 8007148:	e00c      	b.n	8007164 <I2C_WaitOnFlagUntilTimeout+0x70>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	43da      	mvns	r2, r3
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	4013      	ands	r3, r2
 8007156:	b29b      	uxth	r3, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	bf0c      	ite	eq
 800715c:	2301      	moveq	r3, #1
 800715e:	2300      	movne	r3, #0
 8007160:	b2db      	uxtb	r3, r3
 8007162:	461a      	mov	r2, r3
 8007164:	79fb      	ldrb	r3, [r7, #7]
 8007166:	429a      	cmp	r2, r3
 8007168:	d116      	bne.n	8007198 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2220      	movs	r2, #32
 8007174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007184:	f043 0220 	orr.w	r2, r3, #32
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e023      	b.n	80071e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	0c1b      	lsrs	r3, r3, #16
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d10d      	bne.n	80071be <I2C_WaitOnFlagUntilTimeout+0xca>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	43da      	mvns	r2, r3
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	4013      	ands	r3, r2
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	bf0c      	ite	eq
 80071b4:	2301      	moveq	r3, #1
 80071b6:	2300      	movne	r3, #0
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	461a      	mov	r2, r3
 80071bc:	e00c      	b.n	80071d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	43da      	mvns	r2, r3
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	4013      	ands	r3, r2
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	bf0c      	ite	eq
 80071d0:	2301      	moveq	r3, #1
 80071d2:	2300      	movne	r3, #0
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	461a      	mov	r2, r3
 80071d8:	79fb      	ldrb	r3, [r7, #7]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d093      	beq.n	8007106 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
 80071f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80071f6:	e071      	b.n	80072dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007206:	d123      	bne.n	8007250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007216:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007220:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2220      	movs	r2, #32
 800722c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723c:	f043 0204 	orr.w	r2, r3, #4
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e067      	b.n	8007320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007256:	d041      	beq.n	80072dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007258:	f7fc f9be 	bl	80035d8 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	429a      	cmp	r2, r3
 8007266:	d302      	bcc.n	800726e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d136      	bne.n	80072dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	0c1b      	lsrs	r3, r3, #16
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b01      	cmp	r3, #1
 8007276:	d10c      	bne.n	8007292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	43da      	mvns	r2, r3
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	4013      	ands	r3, r2
 8007284:	b29b      	uxth	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	bf14      	ite	ne
 800728a:	2301      	movne	r3, #1
 800728c:	2300      	moveq	r3, #0
 800728e:	b2db      	uxtb	r3, r3
 8007290:	e00b      	b.n	80072aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	43da      	mvns	r2, r3
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	4013      	ands	r3, r2
 800729e:	b29b      	uxth	r3, r3
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	bf14      	ite	ne
 80072a4:	2301      	movne	r3, #1
 80072a6:	2300      	moveq	r3, #0
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d016      	beq.n	80072dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2220      	movs	r2, #32
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c8:	f043 0220 	orr.w	r2, r3, #32
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e021      	b.n	8007320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	0c1b      	lsrs	r3, r3, #16
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d10c      	bne.n	8007300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	43da      	mvns	r2, r3
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	4013      	ands	r3, r2
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	bf14      	ite	ne
 80072f8:	2301      	movne	r3, #1
 80072fa:	2300      	moveq	r3, #0
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	e00b      	b.n	8007318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	43da      	mvns	r2, r3
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	4013      	ands	r3, r2
 800730c:	b29b      	uxth	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	bf14      	ite	ne
 8007312:	2301      	movne	r3, #1
 8007314:	2300      	moveq	r3, #0
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	f47f af6d 	bne.w	80071f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007334:	e034      	b.n	80073a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f000 f915 	bl	8007566 <I2C_IsAcknowledgeFailed>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e034      	b.n	80073b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734c:	d028      	beq.n	80073a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800734e:	f7fc f943 	bl	80035d8 <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	429a      	cmp	r2, r3
 800735c:	d302      	bcc.n	8007364 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d11d      	bne.n	80073a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800736e:	2b80      	cmp	r3, #128	; 0x80
 8007370:	d016      	beq.n	80073a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2220      	movs	r2, #32
 800737c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738c:	f043 0220 	orr.w	r2, r3, #32
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e007      	b.n	80073b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073aa:	2b80      	cmp	r3, #128	; 0x80
 80073ac:	d1c3      	bne.n	8007336 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073c4:	e034      	b.n	8007430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f000 f8cd 	bl	8007566 <I2C_IsAcknowledgeFailed>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d001      	beq.n	80073d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e034      	b.n	8007440 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073dc:	d028      	beq.n	8007430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073de:	f7fc f8fb 	bl	80035d8 <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d302      	bcc.n	80073f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d11d      	bne.n	8007430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	f003 0304 	and.w	r3, r3, #4
 80073fe:	2b04      	cmp	r3, #4
 8007400:	d016      	beq.n	8007430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2220      	movs	r2, #32
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741c:	f043 0220 	orr.w	r2, r3, #32
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e007      	b.n	8007440 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	f003 0304 	and.w	r3, r3, #4
 800743a:	2b04      	cmp	r3, #4
 800743c:	d1c3      	bne.n	80073c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007450:	2300      	movs	r3, #0
 8007452:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007454:	4b13      	ldr	r3, [pc, #76]	; (80074a4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	08db      	lsrs	r3, r3, #3
 800745a:	4a13      	ldr	r2, [pc, #76]	; (80074a8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800745c:	fba2 2303 	umull	r2, r3, r2, r3
 8007460:	0a1a      	lsrs	r2, r3, #8
 8007462:	4613      	mov	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4413      	add	r3, r2
 8007468:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	3b01      	subs	r3, #1
 800746e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d107      	bne.n	8007486 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	f043 0220 	orr.w	r2, r3, #32
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e008      	b.n	8007498 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007494:	d0e9      	beq.n	800746a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	bc80      	pop	{r7}
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	20000060 	.word	0x20000060
 80074a8:	14f8b589 	.word	0x14f8b589

080074ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074b8:	e049      	b.n	800754e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	695b      	ldr	r3, [r3, #20]
 80074c0:	f003 0310 	and.w	r3, r3, #16
 80074c4:	2b10      	cmp	r3, #16
 80074c6:	d119      	bne.n	80074fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f06f 0210 	mvn.w	r2, #16
 80074d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2220      	movs	r2, #32
 80074dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e030      	b.n	800755e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074fc:	f7fc f86c 	bl	80035d8 <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	429a      	cmp	r2, r3
 800750a:	d302      	bcc.n	8007512 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d11d      	bne.n	800754e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751c:	2b40      	cmp	r3, #64	; 0x40
 800751e:	d016      	beq.n	800754e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2220      	movs	r2, #32
 800752a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	f043 0220 	orr.w	r2, r3, #32
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e007      	b.n	800755e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007558:	2b40      	cmp	r3, #64	; 0x40
 800755a:	d1ae      	bne.n	80074ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007566:	b480      	push	{r7}
 8007568:	b083      	sub	sp, #12
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800757c:	d11b      	bne.n	80075b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007586:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2220      	movs	r2, #32
 8007592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	f043 0204 	orr.w	r2, r3, #4
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e000      	b.n	80075b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	bc80      	pop	{r7}
 80075c0:	4770      	bx	lr

080075c2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b083      	sub	sp, #12
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ce:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80075d2:	d103      	bne.n	80075dc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80075da:	e007      	b.n	80075ec <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80075e4:	d102      	bne.n	80075ec <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2208      	movs	r2, #8
 80075ea:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bc80      	pop	{r7}
 80075f4:	4770      	bx	lr
	...

080075f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e272      	b.n	8007af0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b00      	cmp	r3, #0
 8007614:	f000 8087 	beq.w	8007726 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007618:	4b92      	ldr	r3, [pc, #584]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	f003 030c 	and.w	r3, r3, #12
 8007620:	2b04      	cmp	r3, #4
 8007622:	d00c      	beq.n	800763e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007624:	4b8f      	ldr	r3, [pc, #572]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f003 030c 	and.w	r3, r3, #12
 800762c:	2b08      	cmp	r3, #8
 800762e:	d112      	bne.n	8007656 <HAL_RCC_OscConfig+0x5e>
 8007630:	4b8c      	ldr	r3, [pc, #560]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800763c:	d10b      	bne.n	8007656 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800763e:	4b89      	ldr	r3, [pc, #548]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d06c      	beq.n	8007724 <HAL_RCC_OscConfig+0x12c>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d168      	bne.n	8007724 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e24c      	b.n	8007af0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800765e:	d106      	bne.n	800766e <HAL_RCC_OscConfig+0x76>
 8007660:	4b80      	ldr	r3, [pc, #512]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a7f      	ldr	r2, [pc, #508]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 8007666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800766a:	6013      	str	r3, [r2, #0]
 800766c:	e02e      	b.n	80076cc <HAL_RCC_OscConfig+0xd4>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10c      	bne.n	8007690 <HAL_RCC_OscConfig+0x98>
 8007676:	4b7b      	ldr	r3, [pc, #492]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a7a      	ldr	r2, [pc, #488]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 800767c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007680:	6013      	str	r3, [r2, #0]
 8007682:	4b78      	ldr	r3, [pc, #480]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a77      	ldr	r2, [pc, #476]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 8007688:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	e01d      	b.n	80076cc <HAL_RCC_OscConfig+0xd4>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007698:	d10c      	bne.n	80076b4 <HAL_RCC_OscConfig+0xbc>
 800769a:	4b72      	ldr	r3, [pc, #456]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a71      	ldr	r2, [pc, #452]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 80076a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076a4:	6013      	str	r3, [r2, #0]
 80076a6:	4b6f      	ldr	r3, [pc, #444]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a6e      	ldr	r2, [pc, #440]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 80076ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076b0:	6013      	str	r3, [r2, #0]
 80076b2:	e00b      	b.n	80076cc <HAL_RCC_OscConfig+0xd4>
 80076b4:	4b6b      	ldr	r3, [pc, #428]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a6a      	ldr	r2, [pc, #424]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 80076ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076be:	6013      	str	r3, [r2, #0]
 80076c0:	4b68      	ldr	r3, [pc, #416]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a67      	ldr	r2, [pc, #412]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 80076c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d013      	beq.n	80076fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076d4:	f7fb ff80 	bl	80035d8 <HAL_GetTick>
 80076d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076da:	e008      	b.n	80076ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076dc:	f7fb ff7c 	bl	80035d8 <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	2b64      	cmp	r3, #100	; 0x64
 80076e8:	d901      	bls.n	80076ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e200      	b.n	8007af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076ee:	4b5d      	ldr	r3, [pc, #372]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d0f0      	beq.n	80076dc <HAL_RCC_OscConfig+0xe4>
 80076fa:	e014      	b.n	8007726 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076fc:	f7fb ff6c 	bl	80035d8 <HAL_GetTick>
 8007700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007702:	e008      	b.n	8007716 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007704:	f7fb ff68 	bl	80035d8 <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b64      	cmp	r3, #100	; 0x64
 8007710:	d901      	bls.n	8007716 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e1ec      	b.n	8007af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007716:	4b53      	ldr	r3, [pc, #332]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1f0      	bne.n	8007704 <HAL_RCC_OscConfig+0x10c>
 8007722:	e000      	b.n	8007726 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0302 	and.w	r3, r3, #2
 800772e:	2b00      	cmp	r3, #0
 8007730:	d063      	beq.n	80077fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007732:	4b4c      	ldr	r3, [pc, #304]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f003 030c 	and.w	r3, r3, #12
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00b      	beq.n	8007756 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800773e:	4b49      	ldr	r3, [pc, #292]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f003 030c 	and.w	r3, r3, #12
 8007746:	2b08      	cmp	r3, #8
 8007748:	d11c      	bne.n	8007784 <HAL_RCC_OscConfig+0x18c>
 800774a:	4b46      	ldr	r3, [pc, #280]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d116      	bne.n	8007784 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007756:	4b43      	ldr	r3, [pc, #268]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0302 	and.w	r3, r3, #2
 800775e:	2b00      	cmp	r3, #0
 8007760:	d005      	beq.n	800776e <HAL_RCC_OscConfig+0x176>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d001      	beq.n	800776e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e1c0      	b.n	8007af0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800776e:	4b3d      	ldr	r3, [pc, #244]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	00db      	lsls	r3, r3, #3
 800777c:	4939      	ldr	r1, [pc, #228]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 800777e:	4313      	orrs	r3, r2
 8007780:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007782:	e03a      	b.n	80077fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d020      	beq.n	80077ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800778c:	4b36      	ldr	r3, [pc, #216]	; (8007868 <HAL_RCC_OscConfig+0x270>)
 800778e:	2201      	movs	r2, #1
 8007790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007792:	f7fb ff21 	bl	80035d8 <HAL_GetTick>
 8007796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007798:	e008      	b.n	80077ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800779a:	f7fb ff1d 	bl	80035d8 <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d901      	bls.n	80077ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e1a1      	b.n	8007af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077ac:	4b2d      	ldr	r3, [pc, #180]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d0f0      	beq.n	800779a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077b8:	4b2a      	ldr	r3, [pc, #168]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	695b      	ldr	r3, [r3, #20]
 80077c4:	00db      	lsls	r3, r3, #3
 80077c6:	4927      	ldr	r1, [pc, #156]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	600b      	str	r3, [r1, #0]
 80077cc:	e015      	b.n	80077fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077ce:	4b26      	ldr	r3, [pc, #152]	; (8007868 <HAL_RCC_OscConfig+0x270>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077d4:	f7fb ff00 	bl	80035d8 <HAL_GetTick>
 80077d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077da:	e008      	b.n	80077ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077dc:	f7fb fefc 	bl	80035d8 <HAL_GetTick>
 80077e0:	4602      	mov	r2, r0
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d901      	bls.n	80077ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e180      	b.n	8007af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077ee:	4b1d      	ldr	r3, [pc, #116]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0302 	and.w	r3, r3, #2
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1f0      	bne.n	80077dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0308 	and.w	r3, r3, #8
 8007802:	2b00      	cmp	r3, #0
 8007804:	d03a      	beq.n	800787c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d019      	beq.n	8007842 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800780e:	4b17      	ldr	r3, [pc, #92]	; (800786c <HAL_RCC_OscConfig+0x274>)
 8007810:	2201      	movs	r2, #1
 8007812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007814:	f7fb fee0 	bl	80035d8 <HAL_GetTick>
 8007818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800781a:	e008      	b.n	800782e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800781c:	f7fb fedc 	bl	80035d8 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	2b02      	cmp	r3, #2
 8007828:	d901      	bls.n	800782e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e160      	b.n	8007af0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800782e:	4b0d      	ldr	r3, [pc, #52]	; (8007864 <HAL_RCC_OscConfig+0x26c>)
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	2b00      	cmp	r3, #0
 8007838:	d0f0      	beq.n	800781c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800783a:	2001      	movs	r0, #1
 800783c:	f000 face 	bl	8007ddc <RCC_Delay>
 8007840:	e01c      	b.n	800787c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007842:	4b0a      	ldr	r3, [pc, #40]	; (800786c <HAL_RCC_OscConfig+0x274>)
 8007844:	2200      	movs	r2, #0
 8007846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007848:	f7fb fec6 	bl	80035d8 <HAL_GetTick>
 800784c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800784e:	e00f      	b.n	8007870 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007850:	f7fb fec2 	bl	80035d8 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	2b02      	cmp	r3, #2
 800785c:	d908      	bls.n	8007870 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e146      	b.n	8007af0 <HAL_RCC_OscConfig+0x4f8>
 8007862:	bf00      	nop
 8007864:	40021000 	.word	0x40021000
 8007868:	42420000 	.word	0x42420000
 800786c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007870:	4b92      	ldr	r3, [pc, #584]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 8007872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007874:	f003 0302 	and.w	r3, r3, #2
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e9      	bne.n	8007850 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0304 	and.w	r3, r3, #4
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 80a6 	beq.w	80079d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800788a:	2300      	movs	r3, #0
 800788c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800788e:	4b8b      	ldr	r3, [pc, #556]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 8007890:	69db      	ldr	r3, [r3, #28]
 8007892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10d      	bne.n	80078b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800789a:	4b88      	ldr	r3, [pc, #544]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	4a87      	ldr	r2, [pc, #540]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 80078a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078a4:	61d3      	str	r3, [r2, #28]
 80078a6:	4b85      	ldr	r3, [pc, #532]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ae:	60bb      	str	r3, [r7, #8]
 80078b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078b2:	2301      	movs	r3, #1
 80078b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078b6:	4b82      	ldr	r3, [pc, #520]	; (8007ac0 <HAL_RCC_OscConfig+0x4c8>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d118      	bne.n	80078f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078c2:	4b7f      	ldr	r3, [pc, #508]	; (8007ac0 <HAL_RCC_OscConfig+0x4c8>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a7e      	ldr	r2, [pc, #504]	; (8007ac0 <HAL_RCC_OscConfig+0x4c8>)
 80078c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078ce:	f7fb fe83 	bl	80035d8 <HAL_GetTick>
 80078d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078d4:	e008      	b.n	80078e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078d6:	f7fb fe7f 	bl	80035d8 <HAL_GetTick>
 80078da:	4602      	mov	r2, r0
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	2b64      	cmp	r3, #100	; 0x64
 80078e2:	d901      	bls.n	80078e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e103      	b.n	8007af0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078e8:	4b75      	ldr	r3, [pc, #468]	; (8007ac0 <HAL_RCC_OscConfig+0x4c8>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d0f0      	beq.n	80078d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d106      	bne.n	800790a <HAL_RCC_OscConfig+0x312>
 80078fc:	4b6f      	ldr	r3, [pc, #444]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	4a6e      	ldr	r2, [pc, #440]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 8007902:	f043 0301 	orr.w	r3, r3, #1
 8007906:	6213      	str	r3, [r2, #32]
 8007908:	e02d      	b.n	8007966 <HAL_RCC_OscConfig+0x36e>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10c      	bne.n	800792c <HAL_RCC_OscConfig+0x334>
 8007912:	4b6a      	ldr	r3, [pc, #424]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	4a69      	ldr	r2, [pc, #420]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 8007918:	f023 0301 	bic.w	r3, r3, #1
 800791c:	6213      	str	r3, [r2, #32]
 800791e:	4b67      	ldr	r3, [pc, #412]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	4a66      	ldr	r2, [pc, #408]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 8007924:	f023 0304 	bic.w	r3, r3, #4
 8007928:	6213      	str	r3, [r2, #32]
 800792a:	e01c      	b.n	8007966 <HAL_RCC_OscConfig+0x36e>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	2b05      	cmp	r3, #5
 8007932:	d10c      	bne.n	800794e <HAL_RCC_OscConfig+0x356>
 8007934:	4b61      	ldr	r3, [pc, #388]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 8007936:	6a1b      	ldr	r3, [r3, #32]
 8007938:	4a60      	ldr	r2, [pc, #384]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 800793a:	f043 0304 	orr.w	r3, r3, #4
 800793e:	6213      	str	r3, [r2, #32]
 8007940:	4b5e      	ldr	r3, [pc, #376]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	4a5d      	ldr	r2, [pc, #372]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 8007946:	f043 0301 	orr.w	r3, r3, #1
 800794a:	6213      	str	r3, [r2, #32]
 800794c:	e00b      	b.n	8007966 <HAL_RCC_OscConfig+0x36e>
 800794e:	4b5b      	ldr	r3, [pc, #364]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	4a5a      	ldr	r2, [pc, #360]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 8007954:	f023 0301 	bic.w	r3, r3, #1
 8007958:	6213      	str	r3, [r2, #32]
 800795a:	4b58      	ldr	r3, [pc, #352]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	4a57      	ldr	r2, [pc, #348]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 8007960:	f023 0304 	bic.w	r3, r3, #4
 8007964:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d015      	beq.n	800799a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800796e:	f7fb fe33 	bl	80035d8 <HAL_GetTick>
 8007972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007974:	e00a      	b.n	800798c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007976:	f7fb fe2f 	bl	80035d8 <HAL_GetTick>
 800797a:	4602      	mov	r2, r0
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	f241 3288 	movw	r2, #5000	; 0x1388
 8007984:	4293      	cmp	r3, r2
 8007986:	d901      	bls.n	800798c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e0b1      	b.n	8007af0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800798c:	4b4b      	ldr	r3, [pc, #300]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	f003 0302 	and.w	r3, r3, #2
 8007994:	2b00      	cmp	r3, #0
 8007996:	d0ee      	beq.n	8007976 <HAL_RCC_OscConfig+0x37e>
 8007998:	e014      	b.n	80079c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800799a:	f7fb fe1d 	bl	80035d8 <HAL_GetTick>
 800799e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079a0:	e00a      	b.n	80079b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079a2:	f7fb fe19 	bl	80035d8 <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d901      	bls.n	80079b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e09b      	b.n	8007af0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079b8:	4b40      	ldr	r3, [pc, #256]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 80079ba:	6a1b      	ldr	r3, [r3, #32]
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1ee      	bne.n	80079a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80079c4:	7dfb      	ldrb	r3, [r7, #23]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d105      	bne.n	80079d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079ca:	4b3c      	ldr	r3, [pc, #240]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 80079cc:	69db      	ldr	r3, [r3, #28]
 80079ce:	4a3b      	ldr	r2, [pc, #236]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 80079d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	69db      	ldr	r3, [r3, #28]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 8087 	beq.w	8007aee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80079e0:	4b36      	ldr	r3, [pc, #216]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f003 030c 	and.w	r3, r3, #12
 80079e8:	2b08      	cmp	r3, #8
 80079ea:	d061      	beq.n	8007ab0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	69db      	ldr	r3, [r3, #28]
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d146      	bne.n	8007a82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079f4:	4b33      	ldr	r3, [pc, #204]	; (8007ac4 <HAL_RCC_OscConfig+0x4cc>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079fa:	f7fb fded 	bl	80035d8 <HAL_GetTick>
 80079fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a00:	e008      	b.n	8007a14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a02:	f7fb fde9 	bl	80035d8 <HAL_GetTick>
 8007a06:	4602      	mov	r2, r0
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d901      	bls.n	8007a14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e06d      	b.n	8007af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a14:	4b29      	ldr	r3, [pc, #164]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1f0      	bne.n	8007a02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a1b      	ldr	r3, [r3, #32]
 8007a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a28:	d108      	bne.n	8007a3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007a2a:	4b24      	ldr	r3, [pc, #144]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	4921      	ldr	r1, [pc, #132]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a3c:	4b1f      	ldr	r3, [pc, #124]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a19      	ldr	r1, [r3, #32]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	430b      	orrs	r3, r1
 8007a4e:	491b      	ldr	r1, [pc, #108]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 8007a50:	4313      	orrs	r3, r2
 8007a52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a54:	4b1b      	ldr	r3, [pc, #108]	; (8007ac4 <HAL_RCC_OscConfig+0x4cc>)
 8007a56:	2201      	movs	r2, #1
 8007a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a5a:	f7fb fdbd 	bl	80035d8 <HAL_GetTick>
 8007a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007a60:	e008      	b.n	8007a74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a62:	f7fb fdb9 	bl	80035d8 <HAL_GetTick>
 8007a66:	4602      	mov	r2, r0
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d901      	bls.n	8007a74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e03d      	b.n	8007af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007a74:	4b11      	ldr	r3, [pc, #68]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d0f0      	beq.n	8007a62 <HAL_RCC_OscConfig+0x46a>
 8007a80:	e035      	b.n	8007aee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a82:	4b10      	ldr	r3, [pc, #64]	; (8007ac4 <HAL_RCC_OscConfig+0x4cc>)
 8007a84:	2200      	movs	r2, #0
 8007a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a88:	f7fb fda6 	bl	80035d8 <HAL_GetTick>
 8007a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a8e:	e008      	b.n	8007aa2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a90:	f7fb fda2 	bl	80035d8 <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d901      	bls.n	8007aa2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e026      	b.n	8007af0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007aa2:	4b06      	ldr	r3, [pc, #24]	; (8007abc <HAL_RCC_OscConfig+0x4c4>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1f0      	bne.n	8007a90 <HAL_RCC_OscConfig+0x498>
 8007aae:	e01e      	b.n	8007aee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d107      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e019      	b.n	8007af0 <HAL_RCC_OscConfig+0x4f8>
 8007abc:	40021000 	.word	0x40021000
 8007ac0:	40007000 	.word	0x40007000
 8007ac4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007ac8:	4b0b      	ldr	r3, [pc, #44]	; (8007af8 <HAL_RCC_OscConfig+0x500>)
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a1b      	ldr	r3, [r3, #32]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d106      	bne.n	8007aea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d001      	beq.n	8007aee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e000      	b.n	8007af0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	40021000 	.word	0x40021000

08007afc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d101      	bne.n	8007b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e0d0      	b.n	8007cb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b10:	4b6a      	ldr	r3, [pc, #424]	; (8007cbc <HAL_RCC_ClockConfig+0x1c0>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0307 	and.w	r3, r3, #7
 8007b18:	683a      	ldr	r2, [r7, #0]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d910      	bls.n	8007b40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b1e:	4b67      	ldr	r3, [pc, #412]	; (8007cbc <HAL_RCC_ClockConfig+0x1c0>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f023 0207 	bic.w	r2, r3, #7
 8007b26:	4965      	ldr	r1, [pc, #404]	; (8007cbc <HAL_RCC_ClockConfig+0x1c0>)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b2e:	4b63      	ldr	r3, [pc, #396]	; (8007cbc <HAL_RCC_ClockConfig+0x1c0>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0307 	and.w	r3, r3, #7
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d001      	beq.n	8007b40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e0b8      	b.n	8007cb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0302 	and.w	r3, r3, #2
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d020      	beq.n	8007b8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0304 	and.w	r3, r3, #4
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d005      	beq.n	8007b64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b58:	4b59      	ldr	r3, [pc, #356]	; (8007cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	4a58      	ldr	r2, [pc, #352]	; (8007cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007b5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007b62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0308 	and.w	r3, r3, #8
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d005      	beq.n	8007b7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b70:	4b53      	ldr	r3, [pc, #332]	; (8007cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	4a52      	ldr	r2, [pc, #328]	; (8007cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007b76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007b7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b7c:	4b50      	ldr	r3, [pc, #320]	; (8007cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	494d      	ldr	r1, [pc, #308]	; (8007cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d040      	beq.n	8007c1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d107      	bne.n	8007bb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ba2:	4b47      	ldr	r3, [pc, #284]	; (8007cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d115      	bne.n	8007bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e07f      	b.n	8007cb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d107      	bne.n	8007bca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bba:	4b41      	ldr	r3, [pc, #260]	; (8007cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d109      	bne.n	8007bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e073      	b.n	8007cb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bca:	4b3d      	ldr	r3, [pc, #244]	; (8007cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0302 	and.w	r3, r3, #2
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d101      	bne.n	8007bda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e06b      	b.n	8007cb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bda:	4b39      	ldr	r3, [pc, #228]	; (8007cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f023 0203 	bic.w	r2, r3, #3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	4936      	ldr	r1, [pc, #216]	; (8007cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007be8:	4313      	orrs	r3, r2
 8007bea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007bec:	f7fb fcf4 	bl	80035d8 <HAL_GetTick>
 8007bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bf2:	e00a      	b.n	8007c0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bf4:	f7fb fcf0 	bl	80035d8 <HAL_GetTick>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d901      	bls.n	8007c0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e053      	b.n	8007cb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c0a:	4b2d      	ldr	r3, [pc, #180]	; (8007cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f003 020c 	and.w	r2, r3, #12
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d1eb      	bne.n	8007bf4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c1c:	4b27      	ldr	r3, [pc, #156]	; (8007cbc <HAL_RCC_ClockConfig+0x1c0>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0307 	and.w	r3, r3, #7
 8007c24:	683a      	ldr	r2, [r7, #0]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d210      	bcs.n	8007c4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c2a:	4b24      	ldr	r3, [pc, #144]	; (8007cbc <HAL_RCC_ClockConfig+0x1c0>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f023 0207 	bic.w	r2, r3, #7
 8007c32:	4922      	ldr	r1, [pc, #136]	; (8007cbc <HAL_RCC_ClockConfig+0x1c0>)
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c3a:	4b20      	ldr	r3, [pc, #128]	; (8007cbc <HAL_RCC_ClockConfig+0x1c0>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0307 	and.w	r3, r3, #7
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d001      	beq.n	8007c4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e032      	b.n	8007cb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0304 	and.w	r3, r3, #4
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d008      	beq.n	8007c6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c58:	4b19      	ldr	r3, [pc, #100]	; (8007cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	4916      	ldr	r1, [pc, #88]	; (8007cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0308 	and.w	r3, r3, #8
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d009      	beq.n	8007c8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007c76:	4b12      	ldr	r3, [pc, #72]	; (8007cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	00db      	lsls	r3, r3, #3
 8007c84:	490e      	ldr	r1, [pc, #56]	; (8007cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c86:	4313      	orrs	r3, r2
 8007c88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c8a:	f000 f821 	bl	8007cd0 <HAL_RCC_GetSysClockFreq>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	4b0b      	ldr	r3, [pc, #44]	; (8007cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	091b      	lsrs	r3, r3, #4
 8007c96:	f003 030f 	and.w	r3, r3, #15
 8007c9a:	490a      	ldr	r1, [pc, #40]	; (8007cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8007c9c:	5ccb      	ldrb	r3, [r1, r3]
 8007c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca2:	4a09      	ldr	r2, [pc, #36]	; (8007cc8 <HAL_RCC_ClockConfig+0x1cc>)
 8007ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007ca6:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <HAL_RCC_ClockConfig+0x1d0>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fb fc52 	bl	8003554 <HAL_InitTick>

  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	40022000 	.word	0x40022000
 8007cc0:	40021000 	.word	0x40021000
 8007cc4:	0800d2f0 	.word	0x0800d2f0
 8007cc8:	20000060 	.word	0x20000060
 8007ccc:	20000064 	.word	0x20000064

08007cd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	60fb      	str	r3, [r7, #12]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	60bb      	str	r3, [r7, #8]
 8007cde:	2300      	movs	r3, #0
 8007ce0:	617b      	str	r3, [r7, #20]
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007cea:	4b1e      	ldr	r3, [pc, #120]	; (8007d64 <HAL_RCC_GetSysClockFreq+0x94>)
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f003 030c 	and.w	r3, r3, #12
 8007cf6:	2b04      	cmp	r3, #4
 8007cf8:	d002      	beq.n	8007d00 <HAL_RCC_GetSysClockFreq+0x30>
 8007cfa:	2b08      	cmp	r3, #8
 8007cfc:	d003      	beq.n	8007d06 <HAL_RCC_GetSysClockFreq+0x36>
 8007cfe:	e027      	b.n	8007d50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007d00:	4b19      	ldr	r3, [pc, #100]	; (8007d68 <HAL_RCC_GetSysClockFreq+0x98>)
 8007d02:	613b      	str	r3, [r7, #16]
      break;
 8007d04:	e027      	b.n	8007d56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	0c9b      	lsrs	r3, r3, #18
 8007d0a:	f003 030f 	and.w	r3, r3, #15
 8007d0e:	4a17      	ldr	r2, [pc, #92]	; (8007d6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8007d10:	5cd3      	ldrb	r3, [r2, r3]
 8007d12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d010      	beq.n	8007d40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007d1e:	4b11      	ldr	r3, [pc, #68]	; (8007d64 <HAL_RCC_GetSysClockFreq+0x94>)
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	0c5b      	lsrs	r3, r3, #17
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	4a11      	ldr	r2, [pc, #68]	; (8007d70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007d2a:	5cd3      	ldrb	r3, [r2, r3]
 8007d2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a0d      	ldr	r2, [pc, #52]	; (8007d68 <HAL_RCC_GetSysClockFreq+0x98>)
 8007d32:	fb03 f202 	mul.w	r2, r3, r2
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d3c:	617b      	str	r3, [r7, #20]
 8007d3e:	e004      	b.n	8007d4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a0c      	ldr	r2, [pc, #48]	; (8007d74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007d44:	fb02 f303 	mul.w	r3, r2, r3
 8007d48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	613b      	str	r3, [r7, #16]
      break;
 8007d4e:	e002      	b.n	8007d56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007d50:	4b05      	ldr	r3, [pc, #20]	; (8007d68 <HAL_RCC_GetSysClockFreq+0x98>)
 8007d52:	613b      	str	r3, [r7, #16]
      break;
 8007d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d56:	693b      	ldr	r3, [r7, #16]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	371c      	adds	r7, #28
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bc80      	pop	{r7}
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	40021000 	.word	0x40021000
 8007d68:	007a1200 	.word	0x007a1200
 8007d6c:	0800d308 	.word	0x0800d308
 8007d70:	0800d318 	.word	0x0800d318
 8007d74:	003d0900 	.word	0x003d0900

08007d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d7c:	4b02      	ldr	r3, [pc, #8]	; (8007d88 <HAL_RCC_GetHCLKFreq+0x10>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bc80      	pop	{r7}
 8007d86:	4770      	bx	lr
 8007d88:	20000060 	.word	0x20000060

08007d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007d90:	f7ff fff2 	bl	8007d78 <HAL_RCC_GetHCLKFreq>
 8007d94:	4602      	mov	r2, r0
 8007d96:	4b05      	ldr	r3, [pc, #20]	; (8007dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	0a1b      	lsrs	r3, r3, #8
 8007d9c:	f003 0307 	and.w	r3, r3, #7
 8007da0:	4903      	ldr	r1, [pc, #12]	; (8007db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007da2:	5ccb      	ldrb	r3, [r1, r3]
 8007da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	40021000 	.word	0x40021000
 8007db0:	0800d300 	.word	0x0800d300

08007db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007db8:	f7ff ffde 	bl	8007d78 <HAL_RCC_GetHCLKFreq>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	4b05      	ldr	r3, [pc, #20]	; (8007dd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	0adb      	lsrs	r3, r3, #11
 8007dc4:	f003 0307 	and.w	r3, r3, #7
 8007dc8:	4903      	ldr	r1, [pc, #12]	; (8007dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007dca:	5ccb      	ldrb	r3, [r1, r3]
 8007dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	40021000 	.word	0x40021000
 8007dd8:	0800d300 	.word	0x0800d300

08007ddc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007de4:	4b0a      	ldr	r3, [pc, #40]	; (8007e10 <RCC_Delay+0x34>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a0a      	ldr	r2, [pc, #40]	; (8007e14 <RCC_Delay+0x38>)
 8007dea:	fba2 2303 	umull	r2, r3, r2, r3
 8007dee:	0a5b      	lsrs	r3, r3, #9
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	fb02 f303 	mul.w	r3, r2, r3
 8007df6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007df8:	bf00      	nop
  }
  while (Delay --);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	1e5a      	subs	r2, r3, #1
 8007dfe:	60fa      	str	r2, [r7, #12]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1f9      	bne.n	8007df8 <RCC_Delay+0x1c>
}
 8007e04:	bf00      	nop
 8007e06:	bf00      	nop
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bc80      	pop	{r7}
 8007e0e:	4770      	bx	lr
 8007e10:	20000060 	.word	0x20000060
 8007e14:	10624dd3 	.word	0x10624dd3

08007e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007e20:	2300      	movs	r3, #0
 8007e22:	613b      	str	r3, [r7, #16]
 8007e24:	2300      	movs	r3, #0
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d07d      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007e34:	2300      	movs	r3, #0
 8007e36:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e38:	4b4f      	ldr	r3, [pc, #316]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e3a:	69db      	ldr	r3, [r3, #28]
 8007e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10d      	bne.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e44:	4b4c      	ldr	r3, [pc, #304]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e46:	69db      	ldr	r3, [r3, #28]
 8007e48:	4a4b      	ldr	r2, [pc, #300]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e4e:	61d3      	str	r3, [r2, #28]
 8007e50:	4b49      	ldr	r3, [pc, #292]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e52:	69db      	ldr	r3, [r3, #28]
 8007e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e58:	60bb      	str	r3, [r7, #8]
 8007e5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e60:	4b46      	ldr	r3, [pc, #280]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d118      	bne.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e6c:	4b43      	ldr	r3, [pc, #268]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a42      	ldr	r2, [pc, #264]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e78:	f7fb fbae 	bl	80035d8 <HAL_GetTick>
 8007e7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e7e:	e008      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e80:	f7fb fbaa 	bl	80035d8 <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	2b64      	cmp	r3, #100	; 0x64
 8007e8c:	d901      	bls.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e06d      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e92:	4b3a      	ldr	r3, [pc, #232]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d0f0      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007e9e:	4b36      	ldr	r3, [pc, #216]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ea6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d02e      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d027      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ebc:	4b2e      	ldr	r3, [pc, #184]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ec4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ec6:	4b2e      	ldr	r3, [pc, #184]	; (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007ec8:	2201      	movs	r2, #1
 8007eca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ecc:	4b2c      	ldr	r3, [pc, #176]	; (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007ed2:	4a29      	ldr	r2, [pc, #164]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d014      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ee2:	f7fb fb79 	bl	80035d8 <HAL_GetTick>
 8007ee6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ee8:	e00a      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eea:	f7fb fb75 	bl	80035d8 <HAL_GetTick>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d901      	bls.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e036      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f00:	4b1d      	ldr	r3, [pc, #116]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f02:	6a1b      	ldr	r3, [r3, #32]
 8007f04:	f003 0302 	and.w	r3, r3, #2
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d0ee      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f0c:	4b1a      	ldr	r3, [pc, #104]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f0e:	6a1b      	ldr	r3, [r3, #32]
 8007f10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	4917      	ldr	r1, [pc, #92]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007f1e:	7dfb      	ldrb	r3, [r7, #23]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d105      	bne.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f24:	4b14      	ldr	r3, [pc, #80]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f26:	69db      	ldr	r3, [r3, #28]
 8007f28:	4a13      	ldr	r2, [pc, #76]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d008      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f3c:	4b0e      	ldr	r3, [pc, #56]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	490b      	ldr	r1, [pc, #44]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0310 	and.w	r3, r3, #16
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d008      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f5a:	4b07      	ldr	r3, [pc, #28]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	4904      	ldr	r1, [pc, #16]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3718      	adds	r7, #24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	40021000 	.word	0x40021000
 8007f7c:	40007000 	.word	0x40007000
 8007f80:	42420440 	.word	0x42420440

08007f84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d101      	bne.n	8007f96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e041      	b.n	800801a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d106      	bne.n	8007fb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f7fa ffec 	bl	8002f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	4610      	mov	r0, r2
 8007fc4:	f001 f858 	bl	8009078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
	...

08008024 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b01      	cmp	r3, #1
 8008036:	d001      	beq.n	800803c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e03a      	b.n	80080b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2202      	movs	r2, #2
 8008040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68da      	ldr	r2, [r3, #12]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f042 0201 	orr.w	r2, r2, #1
 8008052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a18      	ldr	r2, [pc, #96]	; (80080bc <HAL_TIM_Base_Start_IT+0x98>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d00e      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x58>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008066:	d009      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x58>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a14      	ldr	r2, [pc, #80]	; (80080c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d004      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x58>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a13      	ldr	r2, [pc, #76]	; (80080c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d111      	bne.n	80080a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f003 0307 	and.w	r3, r3, #7
 8008086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b06      	cmp	r3, #6
 800808c:	d010      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f042 0201 	orr.w	r2, r2, #1
 800809c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800809e:	e007      	b.n	80080b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f042 0201 	orr.w	r2, r2, #1
 80080ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bc80      	pop	{r7}
 80080ba:	4770      	bx	lr
 80080bc:	40012c00 	.word	0x40012c00
 80080c0:	40000400 	.word	0x40000400
 80080c4:	40000800 	.word	0x40000800

080080c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e041      	b.n	800815e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d106      	bne.n	80080f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f839 	bl	8008166 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2202      	movs	r2, #2
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	3304      	adds	r3, #4
 8008104:	4619      	mov	r1, r3
 8008106:	4610      	mov	r0, r2
 8008108:	f000 ffb6 	bl	8009078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008166:	b480      	push	{r7}
 8008168:	b083      	sub	sp, #12
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800816e:	bf00      	nop
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	bc80      	pop	{r7}
 8008176:	4770      	bx	lr

08008178 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d109      	bne.n	800819c <HAL_TIM_PWM_Start+0x24>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b01      	cmp	r3, #1
 8008192:	bf14      	ite	ne
 8008194:	2301      	movne	r3, #1
 8008196:	2300      	moveq	r3, #0
 8008198:	b2db      	uxtb	r3, r3
 800819a:	e022      	b.n	80081e2 <HAL_TIM_PWM_Start+0x6a>
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	2b04      	cmp	r3, #4
 80081a0:	d109      	bne.n	80081b6 <HAL_TIM_PWM_Start+0x3e>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	bf14      	ite	ne
 80081ae:	2301      	movne	r3, #1
 80081b0:	2300      	moveq	r3, #0
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	e015      	b.n	80081e2 <HAL_TIM_PWM_Start+0x6a>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b08      	cmp	r3, #8
 80081ba:	d109      	bne.n	80081d0 <HAL_TIM_PWM_Start+0x58>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	bf14      	ite	ne
 80081c8:	2301      	movne	r3, #1
 80081ca:	2300      	moveq	r3, #0
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	e008      	b.n	80081e2 <HAL_TIM_PWM_Start+0x6a>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b01      	cmp	r3, #1
 80081da:	bf14      	ite	ne
 80081dc:	2301      	movne	r3, #1
 80081de:	2300      	moveq	r3, #0
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e05e      	b.n	80082a8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d104      	bne.n	80081fa <HAL_TIM_PWM_Start+0x82>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2202      	movs	r2, #2
 80081f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081f8:	e013      	b.n	8008222 <HAL_TIM_PWM_Start+0xaa>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b04      	cmp	r3, #4
 80081fe:	d104      	bne.n	800820a <HAL_TIM_PWM_Start+0x92>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2202      	movs	r2, #2
 8008204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008208:	e00b      	b.n	8008222 <HAL_TIM_PWM_Start+0xaa>
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b08      	cmp	r3, #8
 800820e:	d104      	bne.n	800821a <HAL_TIM_PWM_Start+0xa2>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008218:	e003      	b.n	8008222 <HAL_TIM_PWM_Start+0xaa>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2202      	movs	r2, #2
 800821e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2201      	movs	r2, #1
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	4618      	mov	r0, r3
 800822c:	f001 f9a4 	bl	8009578 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a1e      	ldr	r2, [pc, #120]	; (80082b0 <HAL_TIM_PWM_Start+0x138>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d107      	bne.n	800824a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008248:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a18      	ldr	r2, [pc, #96]	; (80082b0 <HAL_TIM_PWM_Start+0x138>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d00e      	beq.n	8008272 <HAL_TIM_PWM_Start+0xfa>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800825c:	d009      	beq.n	8008272 <HAL_TIM_PWM_Start+0xfa>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a14      	ldr	r2, [pc, #80]	; (80082b4 <HAL_TIM_PWM_Start+0x13c>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d004      	beq.n	8008272 <HAL_TIM_PWM_Start+0xfa>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a12      	ldr	r2, [pc, #72]	; (80082b8 <HAL_TIM_PWM_Start+0x140>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d111      	bne.n	8008296 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f003 0307 	and.w	r3, r3, #7
 800827c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2b06      	cmp	r3, #6
 8008282:	d010      	beq.n	80082a6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f042 0201 	orr.w	r2, r2, #1
 8008292:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008294:	e007      	b.n	80082a6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f042 0201 	orr.w	r2, r2, #1
 80082a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	40012c00 	.word	0x40012c00
 80082b4:	40000400 	.word	0x40000400
 80082b8:	40000800 	.word	0x40000800

080082bc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082c6:	2300      	movs	r3, #0
 80082c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d109      	bne.n	80082e4 <HAL_TIM_PWM_Start_IT+0x28>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b01      	cmp	r3, #1
 80082da:	bf14      	ite	ne
 80082dc:	2301      	movne	r3, #1
 80082de:	2300      	moveq	r3, #0
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	e022      	b.n	800832a <HAL_TIM_PWM_Start_IT+0x6e>
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	2b04      	cmp	r3, #4
 80082e8:	d109      	bne.n	80082fe <HAL_TIM_PWM_Start_IT+0x42>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	bf14      	ite	ne
 80082f6:	2301      	movne	r3, #1
 80082f8:	2300      	moveq	r3, #0
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	e015      	b.n	800832a <HAL_TIM_PWM_Start_IT+0x6e>
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	2b08      	cmp	r3, #8
 8008302:	d109      	bne.n	8008318 <HAL_TIM_PWM_Start_IT+0x5c>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b01      	cmp	r3, #1
 800830e:	bf14      	ite	ne
 8008310:	2301      	movne	r3, #1
 8008312:	2300      	moveq	r3, #0
 8008314:	b2db      	uxtb	r3, r3
 8008316:	e008      	b.n	800832a <HAL_TIM_PWM_Start_IT+0x6e>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b01      	cmp	r3, #1
 8008322:	bf14      	ite	ne
 8008324:	2301      	movne	r3, #1
 8008326:	2300      	moveq	r3, #0
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e0a9      	b.n	8008486 <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d104      	bne.n	8008342 <HAL_TIM_PWM_Start_IT+0x86>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2202      	movs	r2, #2
 800833c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008340:	e013      	b.n	800836a <HAL_TIM_PWM_Start_IT+0xae>
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	2b04      	cmp	r3, #4
 8008346:	d104      	bne.n	8008352 <HAL_TIM_PWM_Start_IT+0x96>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2202      	movs	r2, #2
 800834c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008350:	e00b      	b.n	800836a <HAL_TIM_PWM_Start_IT+0xae>
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	2b08      	cmp	r3, #8
 8008356:	d104      	bne.n	8008362 <HAL_TIM_PWM_Start_IT+0xa6>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2202      	movs	r2, #2
 800835c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008360:	e003      	b.n	800836a <HAL_TIM_PWM_Start_IT+0xae>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2202      	movs	r2, #2
 8008366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	2b0c      	cmp	r3, #12
 800836e:	d841      	bhi.n	80083f4 <HAL_TIM_PWM_Start_IT+0x138>
 8008370:	a201      	add	r2, pc, #4	; (adr r2, 8008378 <HAL_TIM_PWM_Start_IT+0xbc>)
 8008372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008376:	bf00      	nop
 8008378:	080083ad 	.word	0x080083ad
 800837c:	080083f5 	.word	0x080083f5
 8008380:	080083f5 	.word	0x080083f5
 8008384:	080083f5 	.word	0x080083f5
 8008388:	080083bf 	.word	0x080083bf
 800838c:	080083f5 	.word	0x080083f5
 8008390:	080083f5 	.word	0x080083f5
 8008394:	080083f5 	.word	0x080083f5
 8008398:	080083d1 	.word	0x080083d1
 800839c:	080083f5 	.word	0x080083f5
 80083a0:	080083f5 	.word	0x080083f5
 80083a4:	080083f5 	.word	0x080083f5
 80083a8:	080083e3 	.word	0x080083e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	68da      	ldr	r2, [r3, #12]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f042 0202 	orr.w	r2, r2, #2
 80083ba:	60da      	str	r2, [r3, #12]
      break;
 80083bc:	e01d      	b.n	80083fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68da      	ldr	r2, [r3, #12]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f042 0204 	orr.w	r2, r2, #4
 80083cc:	60da      	str	r2, [r3, #12]
      break;
 80083ce:	e014      	b.n	80083fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68da      	ldr	r2, [r3, #12]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f042 0208 	orr.w	r2, r2, #8
 80083de:	60da      	str	r2, [r3, #12]
      break;
 80083e0:	e00b      	b.n	80083fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68da      	ldr	r2, [r3, #12]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f042 0210 	orr.w	r2, r2, #16
 80083f0:	60da      	str	r2, [r3, #12]
      break;
 80083f2:	e002      	b.n	80083fa <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	73fb      	strb	r3, [r7, #15]
      break;
 80083f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d141      	bne.n	8008484 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2201      	movs	r2, #1
 8008406:	6839      	ldr	r1, [r7, #0]
 8008408:	4618      	mov	r0, r3
 800840a:	f001 f8b5 	bl	8009578 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a1f      	ldr	r2, [pc, #124]	; (8008490 <HAL_TIM_PWM_Start_IT+0x1d4>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d107      	bne.n	8008428 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008426:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a18      	ldr	r2, [pc, #96]	; (8008490 <HAL_TIM_PWM_Start_IT+0x1d4>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d00e      	beq.n	8008450 <HAL_TIM_PWM_Start_IT+0x194>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800843a:	d009      	beq.n	8008450 <HAL_TIM_PWM_Start_IT+0x194>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a14      	ldr	r2, [pc, #80]	; (8008494 <HAL_TIM_PWM_Start_IT+0x1d8>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d004      	beq.n	8008450 <HAL_TIM_PWM_Start_IT+0x194>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a13      	ldr	r2, [pc, #76]	; (8008498 <HAL_TIM_PWM_Start_IT+0x1dc>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d111      	bne.n	8008474 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f003 0307 	and.w	r3, r3, #7
 800845a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2b06      	cmp	r3, #6
 8008460:	d010      	beq.n	8008484 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f042 0201 	orr.w	r2, r2, #1
 8008470:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008472:	e007      	b.n	8008484 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f042 0201 	orr.w	r2, r2, #1
 8008482:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008484:	7bfb      	ldrb	r3, [r7, #15]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	40012c00 	.word	0x40012c00
 8008494:	40000400 	.word	0x40000400
 8008498:	40000800 	.word	0x40000800

0800849c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
 80084a8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80084aa:	2300      	movs	r3, #0
 80084ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d109      	bne.n	80084c8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b02      	cmp	r3, #2
 80084be:	bf0c      	ite	eq
 80084c0:	2301      	moveq	r3, #1
 80084c2:	2300      	movne	r3, #0
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	e022      	b.n	800850e <HAL_TIM_PWM_Start_DMA+0x72>
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	2b04      	cmp	r3, #4
 80084cc:	d109      	bne.n	80084e2 <HAL_TIM_PWM_Start_DMA+0x46>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	bf0c      	ite	eq
 80084da:	2301      	moveq	r3, #1
 80084dc:	2300      	movne	r3, #0
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	e015      	b.n	800850e <HAL_TIM_PWM_Start_DMA+0x72>
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	2b08      	cmp	r3, #8
 80084e6:	d109      	bne.n	80084fc <HAL_TIM_PWM_Start_DMA+0x60>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	bf0c      	ite	eq
 80084f4:	2301      	moveq	r3, #1
 80084f6:	2300      	movne	r3, #0
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	e008      	b.n	800850e <HAL_TIM_PWM_Start_DMA+0x72>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b02      	cmp	r3, #2
 8008506:	bf0c      	ite	eq
 8008508:	2301      	moveq	r3, #1
 800850a:	2300      	movne	r3, #0
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8008512:	2302      	movs	r3, #2
 8008514:	e153      	b.n	80087be <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d109      	bne.n	8008530 <HAL_TIM_PWM_Start_DMA+0x94>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b01      	cmp	r3, #1
 8008526:	bf0c      	ite	eq
 8008528:	2301      	moveq	r3, #1
 800852a:	2300      	movne	r3, #0
 800852c:	b2db      	uxtb	r3, r3
 800852e:	e022      	b.n	8008576 <HAL_TIM_PWM_Start_DMA+0xda>
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	2b04      	cmp	r3, #4
 8008534:	d109      	bne.n	800854a <HAL_TIM_PWM_Start_DMA+0xae>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b01      	cmp	r3, #1
 8008540:	bf0c      	ite	eq
 8008542:	2301      	moveq	r3, #1
 8008544:	2300      	movne	r3, #0
 8008546:	b2db      	uxtb	r3, r3
 8008548:	e015      	b.n	8008576 <HAL_TIM_PWM_Start_DMA+0xda>
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	2b08      	cmp	r3, #8
 800854e:	d109      	bne.n	8008564 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b01      	cmp	r3, #1
 800855a:	bf0c      	ite	eq
 800855c:	2301      	moveq	r3, #1
 800855e:	2300      	movne	r3, #0
 8008560:	b2db      	uxtb	r3, r3
 8008562:	e008      	b.n	8008576 <HAL_TIM_PWM_Start_DMA+0xda>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b01      	cmp	r3, #1
 800856e:	bf0c      	ite	eq
 8008570:	2301      	moveq	r3, #1
 8008572:	2300      	movne	r3, #0
 8008574:	b2db      	uxtb	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	d024      	beq.n	80085c4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <HAL_TIM_PWM_Start_DMA+0xea>
 8008580:	887b      	ldrh	r3, [r7, #2]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e119      	b.n	80087be <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d104      	bne.n	800859a <HAL_TIM_PWM_Start_DMA+0xfe>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2202      	movs	r2, #2
 8008594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008598:	e016      	b.n	80085c8 <HAL_TIM_PWM_Start_DMA+0x12c>
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	2b04      	cmp	r3, #4
 800859e:	d104      	bne.n	80085aa <HAL_TIM_PWM_Start_DMA+0x10e>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2202      	movs	r2, #2
 80085a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085a8:	e00e      	b.n	80085c8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	2b08      	cmp	r3, #8
 80085ae:	d104      	bne.n	80085ba <HAL_TIM_PWM_Start_DMA+0x11e>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2202      	movs	r2, #2
 80085b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085b8:	e006      	b.n	80085c8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2202      	movs	r2, #2
 80085be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085c2:	e001      	b.n	80085c8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e0fa      	b.n	80087be <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	2b0c      	cmp	r3, #12
 80085cc:	f200 80ae 	bhi.w	800872c <HAL_TIM_PWM_Start_DMA+0x290>
 80085d0:	a201      	add	r2, pc, #4	; (adr r2, 80085d8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80085d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d6:	bf00      	nop
 80085d8:	0800860d 	.word	0x0800860d
 80085dc:	0800872d 	.word	0x0800872d
 80085e0:	0800872d 	.word	0x0800872d
 80085e4:	0800872d 	.word	0x0800872d
 80085e8:	08008655 	.word	0x08008655
 80085ec:	0800872d 	.word	0x0800872d
 80085f0:	0800872d 	.word	0x0800872d
 80085f4:	0800872d 	.word	0x0800872d
 80085f8:	0800869d 	.word	0x0800869d
 80085fc:	0800872d 	.word	0x0800872d
 8008600:	0800872d 	.word	0x0800872d
 8008604:	0800872d 	.word	0x0800872d
 8008608:	080086e5 	.word	0x080086e5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008610:	4a6d      	ldr	r2, [pc, #436]	; (80087c8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8008612:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008618:	4a6c      	ldr	r2, [pc, #432]	; (80087cc <HAL_TIM_PWM_Start_DMA+0x330>)
 800861a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008620:	4a6b      	ldr	r2, [pc, #428]	; (80087d0 <HAL_TIM_PWM_Start_DMA+0x334>)
 8008622:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008628:	6879      	ldr	r1, [r7, #4]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3334      	adds	r3, #52	; 0x34
 8008630:	461a      	mov	r2, r3
 8008632:	887b      	ldrh	r3, [r7, #2]
 8008634:	f7fb fd5a 	bl	80040ec <HAL_DMA_Start_IT>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d001      	beq.n	8008642 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e0bd      	b.n	80087be <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68da      	ldr	r2, [r3, #12]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008650:	60da      	str	r2, [r3, #12]
      break;
 8008652:	e06e      	b.n	8008732 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008658:	4a5b      	ldr	r2, [pc, #364]	; (80087c8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800865a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008660:	4a5a      	ldr	r2, [pc, #360]	; (80087cc <HAL_TIM_PWM_Start_DMA+0x330>)
 8008662:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008668:	4a59      	ldr	r2, [pc, #356]	; (80087d0 <HAL_TIM_PWM_Start_DMA+0x334>)
 800866a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008670:	6879      	ldr	r1, [r7, #4]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	3338      	adds	r3, #56	; 0x38
 8008678:	461a      	mov	r2, r3
 800867a:	887b      	ldrh	r3, [r7, #2]
 800867c:	f7fb fd36 	bl	80040ec <HAL_DMA_Start_IT>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d001      	beq.n	800868a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e099      	b.n	80087be <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68da      	ldr	r2, [r3, #12]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008698:	60da      	str	r2, [r3, #12]
      break;
 800869a:	e04a      	b.n	8008732 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a0:	4a49      	ldr	r2, [pc, #292]	; (80087c8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80086a2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a8:	4a48      	ldr	r2, [pc, #288]	; (80087cc <HAL_TIM_PWM_Start_DMA+0x330>)
 80086aa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b0:	4a47      	ldr	r2, [pc, #284]	; (80087d0 <HAL_TIM_PWM_Start_DMA+0x334>)
 80086b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80086b8:	6879      	ldr	r1, [r7, #4]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	333c      	adds	r3, #60	; 0x3c
 80086c0:	461a      	mov	r2, r3
 80086c2:	887b      	ldrh	r3, [r7, #2]
 80086c4:	f7fb fd12 	bl	80040ec <HAL_DMA_Start_IT>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e075      	b.n	80087be <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68da      	ldr	r2, [r3, #12]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086e0:	60da      	str	r2, [r3, #12]
      break;
 80086e2:	e026      	b.n	8008732 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e8:	4a37      	ldr	r2, [pc, #220]	; (80087c8 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80086ea:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f0:	4a36      	ldr	r2, [pc, #216]	; (80087cc <HAL_TIM_PWM_Start_DMA+0x330>)
 80086f2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f8:	4a35      	ldr	r2, [pc, #212]	; (80087d0 <HAL_TIM_PWM_Start_DMA+0x334>)
 80086fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008700:	6879      	ldr	r1, [r7, #4]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3340      	adds	r3, #64	; 0x40
 8008708:	461a      	mov	r2, r3
 800870a:	887b      	ldrh	r3, [r7, #2]
 800870c:	f7fb fcee 	bl	80040ec <HAL_DMA_Start_IT>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d001      	beq.n	800871a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	e051      	b.n	80087be <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68da      	ldr	r2, [r3, #12]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008728:	60da      	str	r2, [r3, #12]
      break;
 800872a:	e002      	b.n	8008732 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	75fb      	strb	r3, [r7, #23]
      break;
 8008730:	bf00      	nop
  }

  if (status == HAL_OK)
 8008732:	7dfb      	ldrb	r3, [r7, #23]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d141      	bne.n	80087bc <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2201      	movs	r2, #1
 800873e:	68b9      	ldr	r1, [r7, #8]
 8008740:	4618      	mov	r0, r3
 8008742:	f000 ff19 	bl	8009578 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a22      	ldr	r2, [pc, #136]	; (80087d4 <HAL_TIM_PWM_Start_DMA+0x338>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d107      	bne.n	8008760 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800875e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a1b      	ldr	r2, [pc, #108]	; (80087d4 <HAL_TIM_PWM_Start_DMA+0x338>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d00e      	beq.n	8008788 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008772:	d009      	beq.n	8008788 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a17      	ldr	r2, [pc, #92]	; (80087d8 <HAL_TIM_PWM_Start_DMA+0x33c>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d004      	beq.n	8008788 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a16      	ldr	r2, [pc, #88]	; (80087dc <HAL_TIM_PWM_Start_DMA+0x340>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d111      	bne.n	80087ac <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f003 0307 	and.w	r3, r3, #7
 8008792:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	2b06      	cmp	r3, #6
 8008798:	d010      	beq.n	80087bc <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f042 0201 	orr.w	r2, r2, #1
 80087a8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087aa:	e007      	b.n	80087bc <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f042 0201 	orr.w	r2, r2, #1
 80087ba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80087bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3718      	adds	r7, #24
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	08008f69 	.word	0x08008f69
 80087cc:	08009011 	.word	0x08009011
 80087d0:	08008ed7 	.word	0x08008ed7
 80087d4:	40012c00 	.word	0x40012c00
 80087d8:	40000400 	.word	0x40000400
 80087dc:	40000800 	.word	0x40000800

080087e0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2b0c      	cmp	r3, #12
 80087f2:	d855      	bhi.n	80088a0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80087f4:	a201      	add	r2, pc, #4	; (adr r2, 80087fc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80087f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fa:	bf00      	nop
 80087fc:	08008831 	.word	0x08008831
 8008800:	080088a1 	.word	0x080088a1
 8008804:	080088a1 	.word	0x080088a1
 8008808:	080088a1 	.word	0x080088a1
 800880c:	0800884d 	.word	0x0800884d
 8008810:	080088a1 	.word	0x080088a1
 8008814:	080088a1 	.word	0x080088a1
 8008818:	080088a1 	.word	0x080088a1
 800881c:	08008869 	.word	0x08008869
 8008820:	080088a1 	.word	0x080088a1
 8008824:	080088a1 	.word	0x080088a1
 8008828:	080088a1 	.word	0x080088a1
 800882c:	08008885 	.word	0x08008885
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68da      	ldr	r2, [r3, #12]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800883e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008844:	4618      	mov	r0, r3
 8008846:	f7fb fced 	bl	8004224 <HAL_DMA_Abort_IT>
      break;
 800884a:	e02c      	b.n	80088a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68da      	ldr	r2, [r3, #12]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800885a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008860:	4618      	mov	r0, r3
 8008862:	f7fb fcdf 	bl	8004224 <HAL_DMA_Abort_IT>
      break;
 8008866:	e01e      	b.n	80088a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68da      	ldr	r2, [r3, #12]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008876:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887c:	4618      	mov	r0, r3
 800887e:	f7fb fcd1 	bl	8004224 <HAL_DMA_Abort_IT>
      break;
 8008882:	e010      	b.n	80088a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68da      	ldr	r2, [r3, #12]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008892:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008898:	4618      	mov	r0, r3
 800889a:	f7fb fcc3 	bl	8004224 <HAL_DMA_Abort_IT>
      break;
 800889e:	e002      	b.n	80088a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	73fb      	strb	r3, [r7, #15]
      break;
 80088a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80088a6:	7bfb      	ldrb	r3, [r7, #15]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d157      	bne.n	800895c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2200      	movs	r2, #0
 80088b2:	6839      	ldr	r1, [r7, #0]
 80088b4:	4618      	mov	r0, r3
 80088b6:	f000 fe5f 	bl	8009578 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a2a      	ldr	r2, [pc, #168]	; (8008968 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d117      	bne.n	80088f4 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	6a1a      	ldr	r2, [r3, #32]
 80088ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80088ce:	4013      	ands	r3, r2
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10f      	bne.n	80088f4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6a1a      	ldr	r2, [r3, #32]
 80088da:	f240 4344 	movw	r3, #1092	; 0x444
 80088de:	4013      	ands	r3, r2
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d107      	bne.n	80088f4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6a1a      	ldr	r2, [r3, #32]
 80088fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80088fe:	4013      	ands	r3, r2
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10f      	bne.n	8008924 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6a1a      	ldr	r2, [r3, #32]
 800890a:	f240 4344 	movw	r3, #1092	; 0x444
 800890e:	4013      	ands	r3, r2
 8008910:	2b00      	cmp	r3, #0
 8008912:	d107      	bne.n	8008924 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f022 0201 	bic.w	r2, r2, #1
 8008922:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d104      	bne.n	8008934 <HAL_TIM_PWM_Stop_DMA+0x154>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008932:	e013      	b.n	800895c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	2b04      	cmp	r3, #4
 8008938:	d104      	bne.n	8008944 <HAL_TIM_PWM_Stop_DMA+0x164>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008942:	e00b      	b.n	800895c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	2b08      	cmp	r3, #8
 8008948:	d104      	bne.n	8008954 <HAL_TIM_PWM_Stop_DMA+0x174>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008952:	e003      	b.n	800895c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800895c:	7bfb      	ldrb	r3, [r7, #15]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	40012c00 	.word	0x40012c00

0800896c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	f003 0302 	and.w	r3, r3, #2
 800897e:	2b02      	cmp	r3, #2
 8008980:	d122      	bne.n	80089c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	f003 0302 	and.w	r3, r3, #2
 800898c:	2b02      	cmp	r3, #2
 800898e:	d11b      	bne.n	80089c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f06f 0202 	mvn.w	r2, #2
 8008998:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	f003 0303 	and.w	r3, r3, #3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d003      	beq.n	80089b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fa76 	bl	8008ea0 <HAL_TIM_IC_CaptureCallback>
 80089b4:	e005      	b.n	80089c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fa69 	bl	8008e8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f7f9 ff5f 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	f003 0304 	and.w	r3, r3, #4
 80089d2:	2b04      	cmp	r3, #4
 80089d4:	d122      	bne.n	8008a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	f003 0304 	and.w	r3, r3, #4
 80089e0:	2b04      	cmp	r3, #4
 80089e2:	d11b      	bne.n	8008a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f06f 0204 	mvn.w	r2, #4
 80089ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2202      	movs	r2, #2
 80089f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	699b      	ldr	r3, [r3, #24]
 80089fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d003      	beq.n	8008a0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fa4c 	bl	8008ea0 <HAL_TIM_IC_CaptureCallback>
 8008a08:	e005      	b.n	8008a16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fa3f 	bl	8008e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7f9 ff35 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	f003 0308 	and.w	r3, r3, #8
 8008a26:	2b08      	cmp	r3, #8
 8008a28:	d122      	bne.n	8008a70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	f003 0308 	and.w	r3, r3, #8
 8008a34:	2b08      	cmp	r3, #8
 8008a36:	d11b      	bne.n	8008a70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f06f 0208 	mvn.w	r2, #8
 8008a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2204      	movs	r2, #4
 8008a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	f003 0303 	and.w	r3, r3, #3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d003      	beq.n	8008a5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fa22 	bl	8008ea0 <HAL_TIM_IC_CaptureCallback>
 8008a5c:	e005      	b.n	8008a6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa15 	bl	8008e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7f9 ff0b 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	f003 0310 	and.w	r3, r3, #16
 8008a7a:	2b10      	cmp	r3, #16
 8008a7c:	d122      	bne.n	8008ac4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	f003 0310 	and.w	r3, r3, #16
 8008a88:	2b10      	cmp	r3, #16
 8008a8a:	d11b      	bne.n	8008ac4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f06f 0210 	mvn.w	r2, #16
 8008a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2208      	movs	r2, #8
 8008a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	69db      	ldr	r3, [r3, #28]
 8008aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f9f8 	bl	8008ea0 <HAL_TIM_IC_CaptureCallback>
 8008ab0:	e005      	b.n	8008abe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f9eb 	bl	8008e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7f9 fee1 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d10e      	bne.n	8008af0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	f003 0301 	and.w	r3, r3, #1
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d107      	bne.n	8008af0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f06f 0201 	mvn.w	r2, #1
 8008ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f7f9 fd00 	bl	80024f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008afa:	2b80      	cmp	r3, #128	; 0x80
 8008afc:	d10e      	bne.n	8008b1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b08:	2b80      	cmp	r3, #128	; 0x80
 8008b0a:	d107      	bne.n	8008b1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fe0a 	bl	8009730 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b26:	2b40      	cmp	r3, #64	; 0x40
 8008b28:	d10e      	bne.n	8008b48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b34:	2b40      	cmp	r3, #64	; 0x40
 8008b36:	d107      	bne.n	8008b48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f9b5 	bl	8008eb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	f003 0320 	and.w	r3, r3, #32
 8008b52:	2b20      	cmp	r3, #32
 8008b54:	d10e      	bne.n	8008b74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	f003 0320 	and.w	r3, r3, #32
 8008b60:	2b20      	cmp	r3, #32
 8008b62:	d107      	bne.n	8008b74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f06f 0220 	mvn.w	r2, #32
 8008b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 fdd5 	bl	800971e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b74:	bf00      	nop
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b086      	sub	sp, #24
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d101      	bne.n	8008b9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008b96:	2302      	movs	r3, #2
 8008b98:	e0ae      	b.n	8008cf8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2b0c      	cmp	r3, #12
 8008ba6:	f200 809f 	bhi.w	8008ce8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008baa:	a201      	add	r2, pc, #4	; (adr r2, 8008bb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb0:	08008be5 	.word	0x08008be5
 8008bb4:	08008ce9 	.word	0x08008ce9
 8008bb8:	08008ce9 	.word	0x08008ce9
 8008bbc:	08008ce9 	.word	0x08008ce9
 8008bc0:	08008c25 	.word	0x08008c25
 8008bc4:	08008ce9 	.word	0x08008ce9
 8008bc8:	08008ce9 	.word	0x08008ce9
 8008bcc:	08008ce9 	.word	0x08008ce9
 8008bd0:	08008c67 	.word	0x08008c67
 8008bd4:	08008ce9 	.word	0x08008ce9
 8008bd8:	08008ce9 	.word	0x08008ce9
 8008bdc:	08008ce9 	.word	0x08008ce9
 8008be0:	08008ca7 	.word	0x08008ca7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68b9      	ldr	r1, [r7, #8]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 faa6 	bl	800913c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	699a      	ldr	r2, [r3, #24]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f042 0208 	orr.w	r2, r2, #8
 8008bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	699a      	ldr	r2, [r3, #24]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f022 0204 	bic.w	r2, r2, #4
 8008c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6999      	ldr	r1, [r3, #24]
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	691a      	ldr	r2, [r3, #16]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	430a      	orrs	r2, r1
 8008c20:	619a      	str	r2, [r3, #24]
      break;
 8008c22:	e064      	b.n	8008cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68b9      	ldr	r1, [r7, #8]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 faec 	bl	8009208 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	699a      	ldr	r2, [r3, #24]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	699a      	ldr	r2, [r3, #24]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	6999      	ldr	r1, [r3, #24]
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	021a      	lsls	r2, r3, #8
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	430a      	orrs	r2, r1
 8008c62:	619a      	str	r2, [r3, #24]
      break;
 8008c64:	e043      	b.n	8008cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68b9      	ldr	r1, [r7, #8]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f000 fb35 	bl	80092dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	69da      	ldr	r2, [r3, #28]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f042 0208 	orr.w	r2, r2, #8
 8008c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	69da      	ldr	r2, [r3, #28]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f022 0204 	bic.w	r2, r2, #4
 8008c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	69d9      	ldr	r1, [r3, #28]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	691a      	ldr	r2, [r3, #16]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	61da      	str	r2, [r3, #28]
      break;
 8008ca4:	e023      	b.n	8008cee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68b9      	ldr	r1, [r7, #8]
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 fb7f 	bl	80093b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	69da      	ldr	r2, [r3, #28]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	69da      	ldr	r2, [r3, #28]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	69d9      	ldr	r1, [r3, #28]
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	021a      	lsls	r2, r3, #8
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	430a      	orrs	r2, r1
 8008ce4:	61da      	str	r2, [r3, #28]
      break;
 8008ce6:	e002      	b.n	8008cee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	75fb      	strb	r3, [r7, #23]
      break;
 8008cec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3718      	adds	r7, #24
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d101      	bne.n	8008d1c <HAL_TIM_ConfigClockSource+0x1c>
 8008d18:	2302      	movs	r3, #2
 8008d1a:	e0b4      	b.n	8008e86 <HAL_TIM_ConfigClockSource+0x186>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2202      	movs	r2, #2
 8008d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d54:	d03e      	beq.n	8008dd4 <HAL_TIM_ConfigClockSource+0xd4>
 8008d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d5a:	f200 8087 	bhi.w	8008e6c <HAL_TIM_ConfigClockSource+0x16c>
 8008d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d62:	f000 8086 	beq.w	8008e72 <HAL_TIM_ConfigClockSource+0x172>
 8008d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d6a:	d87f      	bhi.n	8008e6c <HAL_TIM_ConfigClockSource+0x16c>
 8008d6c:	2b70      	cmp	r3, #112	; 0x70
 8008d6e:	d01a      	beq.n	8008da6 <HAL_TIM_ConfigClockSource+0xa6>
 8008d70:	2b70      	cmp	r3, #112	; 0x70
 8008d72:	d87b      	bhi.n	8008e6c <HAL_TIM_ConfigClockSource+0x16c>
 8008d74:	2b60      	cmp	r3, #96	; 0x60
 8008d76:	d050      	beq.n	8008e1a <HAL_TIM_ConfigClockSource+0x11a>
 8008d78:	2b60      	cmp	r3, #96	; 0x60
 8008d7a:	d877      	bhi.n	8008e6c <HAL_TIM_ConfigClockSource+0x16c>
 8008d7c:	2b50      	cmp	r3, #80	; 0x50
 8008d7e:	d03c      	beq.n	8008dfa <HAL_TIM_ConfigClockSource+0xfa>
 8008d80:	2b50      	cmp	r3, #80	; 0x50
 8008d82:	d873      	bhi.n	8008e6c <HAL_TIM_ConfigClockSource+0x16c>
 8008d84:	2b40      	cmp	r3, #64	; 0x40
 8008d86:	d058      	beq.n	8008e3a <HAL_TIM_ConfigClockSource+0x13a>
 8008d88:	2b40      	cmp	r3, #64	; 0x40
 8008d8a:	d86f      	bhi.n	8008e6c <HAL_TIM_ConfigClockSource+0x16c>
 8008d8c:	2b30      	cmp	r3, #48	; 0x30
 8008d8e:	d064      	beq.n	8008e5a <HAL_TIM_ConfigClockSource+0x15a>
 8008d90:	2b30      	cmp	r3, #48	; 0x30
 8008d92:	d86b      	bhi.n	8008e6c <HAL_TIM_ConfigClockSource+0x16c>
 8008d94:	2b20      	cmp	r3, #32
 8008d96:	d060      	beq.n	8008e5a <HAL_TIM_ConfigClockSource+0x15a>
 8008d98:	2b20      	cmp	r3, #32
 8008d9a:	d867      	bhi.n	8008e6c <HAL_TIM_ConfigClockSource+0x16c>
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d05c      	beq.n	8008e5a <HAL_TIM_ConfigClockSource+0x15a>
 8008da0:	2b10      	cmp	r3, #16
 8008da2:	d05a      	beq.n	8008e5a <HAL_TIM_ConfigClockSource+0x15a>
 8008da4:	e062      	b.n	8008e6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6818      	ldr	r0, [r3, #0]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	6899      	ldr	r1, [r3, #8]
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	f000 fbc0 	bl	800953a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008dc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	609a      	str	r2, [r3, #8]
      break;
 8008dd2:	e04f      	b.n	8008e74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6818      	ldr	r0, [r3, #0]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	6899      	ldr	r1, [r3, #8]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	685a      	ldr	r2, [r3, #4]
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	f000 fba9 	bl	800953a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	689a      	ldr	r2, [r3, #8]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008df6:	609a      	str	r2, [r3, #8]
      break;
 8008df8:	e03c      	b.n	8008e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6818      	ldr	r0, [r3, #0]
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	6859      	ldr	r1, [r3, #4]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	461a      	mov	r2, r3
 8008e08:	f000 fb20 	bl	800944c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2150      	movs	r1, #80	; 0x50
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 fb77 	bl	8009506 <TIM_ITRx_SetConfig>
      break;
 8008e18:	e02c      	b.n	8008e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6818      	ldr	r0, [r3, #0]
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	6859      	ldr	r1, [r3, #4]
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	461a      	mov	r2, r3
 8008e28:	f000 fb3e 	bl	80094a8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2160      	movs	r1, #96	; 0x60
 8008e32:	4618      	mov	r0, r3
 8008e34:	f000 fb67 	bl	8009506 <TIM_ITRx_SetConfig>
      break;
 8008e38:	e01c      	b.n	8008e74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6818      	ldr	r0, [r3, #0]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	6859      	ldr	r1, [r3, #4]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	461a      	mov	r2, r3
 8008e48:	f000 fb00 	bl	800944c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2140      	movs	r1, #64	; 0x40
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 fb57 	bl	8009506 <TIM_ITRx_SetConfig>
      break;
 8008e58:	e00c      	b.n	8008e74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4619      	mov	r1, r3
 8008e64:	4610      	mov	r0, r2
 8008e66:	f000 fb4e 	bl	8009506 <TIM_ITRx_SetConfig>
      break;
 8008e6a:	e003      	b.n	8008e74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e70:	e000      	b.n	8008e74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008e72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e8e:	b480      	push	{r7}
 8008e90:	b083      	sub	sp, #12
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e96:	bf00      	nop
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bc80      	pop	{r7}
 8008e9e:	4770      	bx	lr

08008ea0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bc80      	pop	{r7}
 8008eb0:	4770      	bx	lr

08008eb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b083      	sub	sp, #12
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008eba:	bf00      	nop
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bc80      	pop	{r7}
 8008ec2:	4770      	bx	lr

08008ec4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bc80      	pop	{r7}
 8008ed4:	4770      	bx	lr

08008ed6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b084      	sub	sp, #16
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d107      	bne.n	8008efe <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008efc:	e02a      	b.n	8008f54 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d107      	bne.n	8008f18 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f16:	e01d      	b.n	8008f54 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d107      	bne.n	8008f32 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2204      	movs	r2, #4
 8008f26:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f30:	e010      	b.n	8008f54 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d107      	bne.n	8008f4c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2208      	movs	r2, #8
 8008f40:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f4a:	e003      	b.n	8008f54 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f7ff ffb5 	bl	8008ec4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	771a      	strb	r2, [r3, #28]
}
 8008f60:	bf00      	nop
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f74:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d10b      	bne.n	8008f98 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2201      	movs	r2, #1
 8008f84:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d136      	bne.n	8008ffc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f96:	e031      	b.n	8008ffc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d10b      	bne.n	8008fba <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2202      	movs	r2, #2
 8008fa6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	699b      	ldr	r3, [r3, #24]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d125      	bne.n	8008ffc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fb8:	e020      	b.n	8008ffc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d10b      	bne.n	8008fdc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2204      	movs	r2, #4
 8008fc8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d114      	bne.n	8008ffc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fda:	e00f      	b.n	8008ffc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d10a      	bne.n	8008ffc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2208      	movs	r2, #8
 8008fea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d103      	bne.n	8008ffc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f7f9 fc3f 	bl	8002880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	771a      	strb	r2, [r3, #28]
}
 8009008:	bf00      	nop
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	429a      	cmp	r2, r3
 8009026:	d103      	bne.n	8009030 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2201      	movs	r2, #1
 800902c:	771a      	strb	r2, [r3, #28]
 800902e:	e019      	b.n	8009064 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	429a      	cmp	r2, r3
 8009038:	d103      	bne.n	8009042 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2202      	movs	r2, #2
 800903e:	771a      	strb	r2, [r3, #28]
 8009040:	e010      	b.n	8009064 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	429a      	cmp	r2, r3
 800904a:	d103      	bne.n	8009054 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2204      	movs	r2, #4
 8009050:	771a      	strb	r2, [r3, #28]
 8009052:	e007      	b.n	8009064 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	429a      	cmp	r2, r3
 800905c:	d102      	bne.n	8009064 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2208      	movs	r2, #8
 8009062:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f7f9 fb8d 	bl	8002784 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	771a      	strb	r2, [r3, #28]
}
 8009070:	bf00      	nop
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a29      	ldr	r2, [pc, #164]	; (8009130 <TIM_Base_SetConfig+0xb8>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d00b      	beq.n	80090a8 <TIM_Base_SetConfig+0x30>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009096:	d007      	beq.n	80090a8 <TIM_Base_SetConfig+0x30>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a26      	ldr	r2, [pc, #152]	; (8009134 <TIM_Base_SetConfig+0xbc>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d003      	beq.n	80090a8 <TIM_Base_SetConfig+0x30>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a25      	ldr	r2, [pc, #148]	; (8009138 <TIM_Base_SetConfig+0xc0>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d108      	bne.n	80090ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a1c      	ldr	r2, [pc, #112]	; (8009130 <TIM_Base_SetConfig+0xb8>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d00b      	beq.n	80090da <TIM_Base_SetConfig+0x62>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090c8:	d007      	beq.n	80090da <TIM_Base_SetConfig+0x62>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a19      	ldr	r2, [pc, #100]	; (8009134 <TIM_Base_SetConfig+0xbc>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d003      	beq.n	80090da <TIM_Base_SetConfig+0x62>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a18      	ldr	r2, [pc, #96]	; (8009138 <TIM_Base_SetConfig+0xc0>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d108      	bne.n	80090ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	689a      	ldr	r2, [r3, #8]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a07      	ldr	r2, [pc, #28]	; (8009130 <TIM_Base_SetConfig+0xb8>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d103      	bne.n	8009120 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	691a      	ldr	r2, [r3, #16]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	615a      	str	r2, [r3, #20]
}
 8009126:	bf00      	nop
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	bc80      	pop	{r7}
 800912e:	4770      	bx	lr
 8009130:	40012c00 	.word	0x40012c00
 8009134:	40000400 	.word	0x40000400
 8009138:	40000800 	.word	0x40000800

0800913c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800913c:	b480      	push	{r7}
 800913e:	b087      	sub	sp, #28
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a1b      	ldr	r3, [r3, #32]
 800914a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6a1b      	ldr	r3, [r3, #32]
 8009150:	f023 0201 	bic.w	r2, r3, #1
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	699b      	ldr	r3, [r3, #24]
 8009162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800916a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f023 0303 	bic.w	r3, r3, #3
 8009172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	4313      	orrs	r3, r2
 800917c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	f023 0302 	bic.w	r3, r3, #2
 8009184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	4313      	orrs	r3, r2
 800918e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a1c      	ldr	r2, [pc, #112]	; (8009204 <TIM_OC1_SetConfig+0xc8>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d10c      	bne.n	80091b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	f023 0308 	bic.w	r3, r3, #8
 800919e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	697a      	ldr	r2, [r7, #20]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	f023 0304 	bic.w	r3, r3, #4
 80091b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a13      	ldr	r2, [pc, #76]	; (8009204 <TIM_OC1_SetConfig+0xc8>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d111      	bne.n	80091de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	693a      	ldr	r2, [r7, #16]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	693a      	ldr	r2, [r7, #16]
 80091da:	4313      	orrs	r3, r2
 80091dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	685a      	ldr	r2, [r3, #4]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	697a      	ldr	r2, [r7, #20]
 80091f6:	621a      	str	r2, [r3, #32]
}
 80091f8:	bf00      	nop
 80091fa:	371c      	adds	r7, #28
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bc80      	pop	{r7}
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	40012c00 	.word	0x40012c00

08009208 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009208:	b480      	push	{r7}
 800920a:	b087      	sub	sp, #28
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a1b      	ldr	r3, [r3, #32]
 8009216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a1b      	ldr	r3, [r3, #32]
 800921c:	f023 0210 	bic.w	r2, r3, #16
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800923e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	021b      	lsls	r3, r3, #8
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	4313      	orrs	r3, r2
 800924a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	f023 0320 	bic.w	r3, r3, #32
 8009252:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	011b      	lsls	r3, r3, #4
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	4313      	orrs	r3, r2
 800925e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a1d      	ldr	r2, [pc, #116]	; (80092d8 <TIM_OC2_SetConfig+0xd0>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d10d      	bne.n	8009284 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800926e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	011b      	lsls	r3, r3, #4
 8009276:	697a      	ldr	r2, [r7, #20]
 8009278:	4313      	orrs	r3, r2
 800927a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009282:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a14      	ldr	r2, [pc, #80]	; (80092d8 <TIM_OC2_SetConfig+0xd0>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d113      	bne.n	80092b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009292:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800929a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	695b      	ldr	r3, [r3, #20]
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	693a      	ldr	r2, [r7, #16]
 80092a4:	4313      	orrs	r3, r2
 80092a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	699b      	ldr	r3, [r3, #24]
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	693a      	ldr	r2, [r7, #16]
 80092b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	685a      	ldr	r2, [r3, #4]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	621a      	str	r2, [r3, #32]
}
 80092ce:	bf00      	nop
 80092d0:	371c      	adds	r7, #28
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bc80      	pop	{r7}
 80092d6:	4770      	bx	lr
 80092d8:	40012c00 	.word	0x40012c00

080092dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092dc:	b480      	push	{r7}
 80092de:	b087      	sub	sp, #28
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a1b      	ldr	r3, [r3, #32]
 80092ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a1b      	ldr	r3, [r3, #32]
 80092f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	69db      	ldr	r3, [r3, #28]
 8009302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800930a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f023 0303 	bic.w	r3, r3, #3
 8009312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	4313      	orrs	r3, r2
 800931c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	021b      	lsls	r3, r3, #8
 800932c:	697a      	ldr	r2, [r7, #20]
 800932e:	4313      	orrs	r3, r2
 8009330:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a1d      	ldr	r2, [pc, #116]	; (80093ac <TIM_OC3_SetConfig+0xd0>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d10d      	bne.n	8009356 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009340:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	021b      	lsls	r3, r3, #8
 8009348:	697a      	ldr	r2, [r7, #20]
 800934a:	4313      	orrs	r3, r2
 800934c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4a14      	ldr	r2, [pc, #80]	; (80093ac <TIM_OC3_SetConfig+0xd0>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d113      	bne.n	8009386 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800936c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	695b      	ldr	r3, [r3, #20]
 8009372:	011b      	lsls	r3, r3, #4
 8009374:	693a      	ldr	r2, [r7, #16]
 8009376:	4313      	orrs	r3, r2
 8009378:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	011b      	lsls	r3, r3, #4
 8009380:	693a      	ldr	r2, [r7, #16]
 8009382:	4313      	orrs	r3, r2
 8009384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	697a      	ldr	r2, [r7, #20]
 800939e:	621a      	str	r2, [r3, #32]
}
 80093a0:	bf00      	nop
 80093a2:	371c      	adds	r7, #28
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bc80      	pop	{r7}
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	40012c00 	.word	0x40012c00

080093b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b087      	sub	sp, #28
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a1b      	ldr	r3, [r3, #32]
 80093be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6a1b      	ldr	r3, [r3, #32]
 80093c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	69db      	ldr	r3, [r3, #28]
 80093d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	021b      	lsls	r3, r3, #8
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	031b      	lsls	r3, r3, #12
 8009402:	693a      	ldr	r2, [r7, #16]
 8009404:	4313      	orrs	r3, r2
 8009406:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a0f      	ldr	r2, [pc, #60]	; (8009448 <TIM_OC4_SetConfig+0x98>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d109      	bne.n	8009424 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009416:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	695b      	ldr	r3, [r3, #20]
 800941c:	019b      	lsls	r3, r3, #6
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	4313      	orrs	r3, r2
 8009422:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	697a      	ldr	r2, [r7, #20]
 8009428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	685a      	ldr	r2, [r3, #4]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	693a      	ldr	r2, [r7, #16]
 800943c:	621a      	str	r2, [r3, #32]
}
 800943e:	bf00      	nop
 8009440:	371c      	adds	r7, #28
 8009442:	46bd      	mov	sp, r7
 8009444:	bc80      	pop	{r7}
 8009446:	4770      	bx	lr
 8009448:	40012c00 	.word	0x40012c00

0800944c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800944c:	b480      	push	{r7}
 800944e:	b087      	sub	sp, #28
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6a1b      	ldr	r3, [r3, #32]
 800945c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	f023 0201 	bic.w	r2, r3, #1
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	011b      	lsls	r3, r3, #4
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	4313      	orrs	r3, r2
 8009480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f023 030a 	bic.w	r3, r3, #10
 8009488:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	4313      	orrs	r3, r2
 8009490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	693a      	ldr	r2, [r7, #16]
 8009496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	697a      	ldr	r2, [r7, #20]
 800949c:	621a      	str	r2, [r3, #32]
}
 800949e:	bf00      	nop
 80094a0:	371c      	adds	r7, #28
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bc80      	pop	{r7}
 80094a6:	4770      	bx	lr

080094a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b087      	sub	sp, #28
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6a1b      	ldr	r3, [r3, #32]
 80094b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6a1b      	ldr	r3, [r3, #32]
 80094be:	f023 0210 	bic.w	r2, r3, #16
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80094d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	031b      	lsls	r3, r3, #12
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	4313      	orrs	r3, r2
 80094dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80094e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	011b      	lsls	r3, r3, #4
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	693a      	ldr	r2, [r7, #16]
 80094f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	697a      	ldr	r2, [r7, #20]
 80094fa:	621a      	str	r2, [r3, #32]
}
 80094fc:	bf00      	nop
 80094fe:	371c      	adds	r7, #28
 8009500:	46bd      	mov	sp, r7
 8009502:	bc80      	pop	{r7}
 8009504:	4770      	bx	lr

08009506 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009506:	b480      	push	{r7}
 8009508:	b085      	sub	sp, #20
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800951c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4313      	orrs	r3, r2
 8009524:	f043 0307 	orr.w	r3, r3, #7
 8009528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	609a      	str	r2, [r3, #8]
}
 8009530:	bf00      	nop
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	bc80      	pop	{r7}
 8009538:	4770      	bx	lr

0800953a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800953a:	b480      	push	{r7}
 800953c:	b087      	sub	sp, #28
 800953e:	af00      	add	r7, sp, #0
 8009540:	60f8      	str	r0, [r7, #12]
 8009542:	60b9      	str	r1, [r7, #8]
 8009544:	607a      	str	r2, [r7, #4]
 8009546:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009554:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	021a      	lsls	r2, r3, #8
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	431a      	orrs	r2, r3
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	4313      	orrs	r3, r2
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	4313      	orrs	r3, r2
 8009566:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	697a      	ldr	r2, [r7, #20]
 800956c:	609a      	str	r2, [r3, #8]
}
 800956e:	bf00      	nop
 8009570:	371c      	adds	r7, #28
 8009572:	46bd      	mov	sp, r7
 8009574:	bc80      	pop	{r7}
 8009576:	4770      	bx	lr

08009578 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009578:	b480      	push	{r7}
 800957a:	b087      	sub	sp, #28
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	f003 031f 	and.w	r3, r3, #31
 800958a:	2201      	movs	r2, #1
 800958c:	fa02 f303 	lsl.w	r3, r2, r3
 8009590:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6a1a      	ldr	r2, [r3, #32]
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	43db      	mvns	r3, r3
 800959a:	401a      	ands	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6a1a      	ldr	r2, [r3, #32]
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	f003 031f 	and.w	r3, r3, #31
 80095aa:	6879      	ldr	r1, [r7, #4]
 80095ac:	fa01 f303 	lsl.w	r3, r1, r3
 80095b0:	431a      	orrs	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	621a      	str	r2, [r3, #32]
}
 80095b6:	bf00      	nop
 80095b8:	371c      	adds	r7, #28
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bc80      	pop	{r7}
 80095be:	4770      	bx	lr

080095c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d101      	bne.n	80095d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095d4:	2302      	movs	r3, #2
 80095d6:	e046      	b.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2202      	movs	r2, #2
 80095e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	4313      	orrs	r3, r2
 8009608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a16      	ldr	r2, [pc, #88]	; (8009670 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d00e      	beq.n	800963a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009624:	d009      	beq.n	800963a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a12      	ldr	r2, [pc, #72]	; (8009674 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d004      	beq.n	800963a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a10      	ldr	r2, [pc, #64]	; (8009678 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d10c      	bne.n	8009654 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009640:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	4313      	orrs	r3, r2
 800964a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68ba      	ldr	r2, [r7, #8]
 8009652:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3714      	adds	r7, #20
 800966a:	46bd      	mov	sp, r7
 800966c:	bc80      	pop	{r7}
 800966e:	4770      	bx	lr
 8009670:	40012c00 	.word	0x40012c00
 8009674:	40000400 	.word	0x40000400
 8009678:	40000800 	.word	0x40000800

0800967c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800967c:	b480      	push	{r7}
 800967e:	b085      	sub	sp, #20
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009686:	2300      	movs	r3, #0
 8009688:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009690:	2b01      	cmp	r3, #1
 8009692:	d101      	bne.n	8009698 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009694:	2302      	movs	r3, #2
 8009696:	e03d      	b.n	8009714 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4313      	orrs	r3, r2
 80096d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	695b      	ldr	r3, [r3, #20]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	69db      	ldr	r3, [r3, #28]
 80096fe:	4313      	orrs	r3, r2
 8009700:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009712:	2300      	movs	r3, #0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3714      	adds	r7, #20
 8009718:	46bd      	mov	sp, r7
 800971a:	bc80      	pop	{r7}
 800971c:	4770      	bx	lr

0800971e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800971e:	b480      	push	{r7}
 8009720:	b083      	sub	sp, #12
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009726:	bf00      	nop
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	bc80      	pop	{r7}
 800972e:	4770      	bx	lr

08009730 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	bc80      	pop	{r7}
 8009740:	4770      	bx	lr

08009742 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b082      	sub	sp, #8
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d101      	bne.n	8009754 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e042      	b.n	80097da <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800975a:	b2db      	uxtb	r3, r3
 800975c:	2b00      	cmp	r3, #0
 800975e:	d106      	bne.n	800976e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f7f9 fcfd 	bl	8003168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2224      	movs	r2, #36	; 0x24
 8009772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68da      	ldr	r2, [r3, #12]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009784:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fdc6 	bl	800a318 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	691a      	ldr	r2, [r3, #16]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800979a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	695a      	ldr	r2, [r3, #20]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68da      	ldr	r2, [r3, #12]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80097ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2220      	movs	r2, #32
 80097c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2220      	movs	r2, #32
 80097ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b08a      	sub	sp, #40	; 0x28
 80097e6:	af02      	add	r7, sp, #8
 80097e8:	60f8      	str	r0, [r7, #12]
 80097ea:	60b9      	str	r1, [r7, #8]
 80097ec:	603b      	str	r3, [r7, #0]
 80097ee:	4613      	mov	r3, r2
 80097f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80097f2:	2300      	movs	r3, #0
 80097f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	2b20      	cmp	r3, #32
 8009800:	d16d      	bne.n	80098de <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d002      	beq.n	800980e <HAL_UART_Transmit+0x2c>
 8009808:	88fb      	ldrh	r3, [r7, #6]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d101      	bne.n	8009812 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	e066      	b.n	80098e0 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2221      	movs	r2, #33	; 0x21
 800981c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009820:	f7f9 feda 	bl	80035d8 <HAL_GetTick>
 8009824:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	88fa      	ldrh	r2, [r7, #6]
 800982a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	88fa      	ldrh	r2, [r7, #6]
 8009830:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800983a:	d108      	bne.n	800984e <HAL_UART_Transmit+0x6c>
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d104      	bne.n	800984e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009844:	2300      	movs	r3, #0
 8009846:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	61bb      	str	r3, [r7, #24]
 800984c:	e003      	b.n	8009856 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009852:	2300      	movs	r3, #0
 8009854:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009856:	e02a      	b.n	80098ae <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	2200      	movs	r2, #0
 8009860:	2180      	movs	r1, #128	; 0x80
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f000 fb15 	bl	8009e92 <UART_WaitOnFlagUntilTimeout>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d001      	beq.n	8009872 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800986e:	2303      	movs	r3, #3
 8009870:	e036      	b.n	80098e0 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10b      	bne.n	8009890 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009878:	69bb      	ldr	r3, [r7, #24]
 800987a:	881b      	ldrh	r3, [r3, #0]
 800987c:	461a      	mov	r2, r3
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009886:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	3302      	adds	r3, #2
 800988c:	61bb      	str	r3, [r7, #24]
 800988e:	e007      	b.n	80098a0 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	781a      	ldrb	r2, [r3, #0]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	3301      	adds	r3, #1
 800989e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	3b01      	subs	r3, #1
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1cf      	bne.n	8009858 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	2200      	movs	r2, #0
 80098c0:	2140      	movs	r1, #64	; 0x40
 80098c2:	68f8      	ldr	r0, [r7, #12]
 80098c4:	f000 fae5 	bl	8009e92 <UART_WaitOnFlagUntilTimeout>
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d001      	beq.n	80098d2 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80098ce:	2303      	movs	r3, #3
 80098d0:	e006      	b.n	80098e0 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2220      	movs	r2, #32
 80098d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	e000      	b.n	80098e0 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80098de:	2302      	movs	r3, #2
  }
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3720      	adds	r7, #32
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	4613      	mov	r3, r2
 80098f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b20      	cmp	r3, #32
 8009900:	d112      	bne.n	8009928 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d002      	beq.n	800990e <HAL_UART_Receive_IT+0x26>
 8009908:	88fb      	ldrh	r3, [r7, #6]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d101      	bne.n	8009912 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	e00b      	b.n	800992a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009918:	88fb      	ldrh	r3, [r7, #6]
 800991a:	461a      	mov	r2, r3
 800991c:	68b9      	ldr	r1, [r7, #8]
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f000 fb25 	bl	8009f6e <UART_Start_Receive_IT>
 8009924:	4603      	mov	r3, r0
 8009926:	e000      	b.n	800992a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009928:	2302      	movs	r3, #2
  }
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
	...

08009934 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b0ba      	sub	sp, #232	; 0xe8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	695b      	ldr	r3, [r3, #20]
 8009956:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800995a:	2300      	movs	r3, #0
 800995c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009960:	2300      	movs	r3, #0
 8009962:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800996a:	f003 030f 	and.w	r3, r3, #15
 800996e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009972:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009976:	2b00      	cmp	r3, #0
 8009978:	d10f      	bne.n	800999a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800997a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800997e:	f003 0320 	and.w	r3, r3, #32
 8009982:	2b00      	cmp	r3, #0
 8009984:	d009      	beq.n	800999a <HAL_UART_IRQHandler+0x66>
 8009986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800998a:	f003 0320 	and.w	r3, r3, #32
 800998e:	2b00      	cmp	r3, #0
 8009990:	d003      	beq.n	800999a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fc01 	bl	800a19a <UART_Receive_IT>
      return;
 8009998:	e25b      	b.n	8009e52 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800999a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800999e:	2b00      	cmp	r3, #0
 80099a0:	f000 80de 	beq.w	8009b60 <HAL_UART_IRQHandler+0x22c>
 80099a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099a8:	f003 0301 	and.w	r3, r3, #1
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d106      	bne.n	80099be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80099b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 80d1 	beq.w	8009b60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80099be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099c2:	f003 0301 	and.w	r3, r3, #1
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00b      	beq.n	80099e2 <HAL_UART_IRQHandler+0xae>
 80099ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d005      	beq.n	80099e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099da:	f043 0201 	orr.w	r2, r3, #1
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e6:	f003 0304 	and.w	r3, r3, #4
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00b      	beq.n	8009a06 <HAL_UART_IRQHandler+0xd2>
 80099ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099f2:	f003 0301 	and.w	r3, r3, #1
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d005      	beq.n	8009a06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099fe:	f043 0202 	orr.w	r2, r3, #2
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a0a:	f003 0302 	and.w	r3, r3, #2
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00b      	beq.n	8009a2a <HAL_UART_IRQHandler+0xf6>
 8009a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a16:	f003 0301 	and.w	r3, r3, #1
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d005      	beq.n	8009a2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a22:	f043 0204 	orr.w	r2, r3, #4
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a2e:	f003 0308 	and.w	r3, r3, #8
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d011      	beq.n	8009a5a <HAL_UART_IRQHandler+0x126>
 8009a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a3a:	f003 0320 	and.w	r3, r3, #32
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d105      	bne.n	8009a4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d005      	beq.n	8009a5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a52:	f043 0208 	orr.w	r2, r3, #8
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f000 81f2 	beq.w	8009e48 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a68:	f003 0320 	and.w	r3, r3, #32
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d008      	beq.n	8009a82 <HAL_UART_IRQHandler+0x14e>
 8009a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a74:	f003 0320 	and.w	r3, r3, #32
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d002      	beq.n	8009a82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 fb8c 	bl	800a19a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	695b      	ldr	r3, [r3, #20]
 8009a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	bf14      	ite	ne
 8009a90:	2301      	movne	r3, #1
 8009a92:	2300      	moveq	r3, #0
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a9e:	f003 0308 	and.w	r3, r3, #8
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d103      	bne.n	8009aae <HAL_UART_IRQHandler+0x17a>
 8009aa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d04f      	beq.n	8009b4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 fa96 	bl	8009fe0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d041      	beq.n	8009b46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	3314      	adds	r3, #20
 8009ac8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009acc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ad0:	e853 3f00 	ldrex	r3, [r3]
 8009ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	3314      	adds	r3, #20
 8009aea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009aee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009af2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009afa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009afe:	e841 2300 	strex	r3, r2, [r1]
 8009b02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009b06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1d9      	bne.n	8009ac2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d013      	beq.n	8009b3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b1a:	4a7e      	ldr	r2, [pc, #504]	; (8009d14 <HAL_UART_IRQHandler+0x3e0>)
 8009b1c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fa fb7e 	bl	8004224 <HAL_DMA_Abort_IT>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d016      	beq.n	8009b5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009b38:	4610      	mov	r0, r2
 8009b3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b3c:	e00e      	b.n	8009b5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f993 	bl	8009e6a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b44:	e00a      	b.n	8009b5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f98f 	bl	8009e6a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b4c:	e006      	b.n	8009b5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f98b 	bl	8009e6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8009b5a:	e175      	b.n	8009e48 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b5c:	bf00      	nop
    return;
 8009b5e:	e173      	b.n	8009e48 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	f040 814f 	bne.w	8009e08 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b6e:	f003 0310 	and.w	r3, r3, #16
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f000 8148 	beq.w	8009e08 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b7c:	f003 0310 	and.w	r3, r3, #16
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	f000 8141 	beq.w	8009e08 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b86:	2300      	movs	r3, #0
 8009b88:	60bb      	str	r3, [r7, #8]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	60bb      	str	r3, [r7, #8]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	60bb      	str	r3, [r7, #8]
 8009b9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	695b      	ldr	r3, [r3, #20]
 8009ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	f000 80b6 	beq.w	8009d18 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009bb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f000 8145 	beq.w	8009e4c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009bc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	f080 813e 	bcs.w	8009e4c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009bd6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bdc:	699b      	ldr	r3, [r3, #24]
 8009bde:	2b20      	cmp	r3, #32
 8009be0:	f000 8088 	beq.w	8009cf4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	330c      	adds	r3, #12
 8009bea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009bf2:	e853 3f00 	ldrex	r3, [r3]
 8009bf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009bfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009bfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	330c      	adds	r3, #12
 8009c0c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009c10:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009c14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c18:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009c1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009c20:	e841 2300 	strex	r3, r2, [r1]
 8009c24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009c28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d1d9      	bne.n	8009be4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	3314      	adds	r3, #20
 8009c36:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c3a:	e853 3f00 	ldrex	r3, [r3]
 8009c3e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009c40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c42:	f023 0301 	bic.w	r3, r3, #1
 8009c46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	3314      	adds	r3, #20
 8009c50:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009c54:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009c58:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009c5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009c60:	e841 2300 	strex	r3, r2, [r1]
 8009c64:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009c66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d1e1      	bne.n	8009c30 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	3314      	adds	r3, #20
 8009c72:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c76:	e853 3f00 	ldrex	r3, [r3]
 8009c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	3314      	adds	r3, #20
 8009c8c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009c90:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009c92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c94:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009c96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009c98:	e841 2300 	strex	r3, r2, [r1]
 8009c9c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009c9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d1e3      	bne.n	8009c6c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2220      	movs	r2, #32
 8009ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	330c      	adds	r3, #12
 8009cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cbc:	e853 3f00 	ldrex	r3, [r3]
 8009cc0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cc4:	f023 0310 	bic.w	r3, r3, #16
 8009cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	330c      	adds	r3, #12
 8009cd2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009cd6:	65ba      	str	r2, [r7, #88]	; 0x58
 8009cd8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009cdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009cde:	e841 2300 	strex	r3, r2, [r1]
 8009ce2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1e3      	bne.n	8009cb2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fa fa5c 	bl	80041ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	4619      	mov	r1, r3
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 f8b6 	bl	8009e7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009d10:	e09c      	b.n	8009e4c <HAL_UART_IRQHandler+0x518>
 8009d12:	bf00      	nop
 8009d14:	0800a0a5 	.word	0x0800a0a5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f000 808e 	beq.w	8009e50 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009d34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f000 8089 	beq.w	8009e50 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	330c      	adds	r3, #12
 8009d44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d48:	e853 3f00 	ldrex	r3, [r3]
 8009d4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	330c      	adds	r3, #12
 8009d5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009d62:	647a      	str	r2, [r7, #68]	; 0x44
 8009d64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d6a:	e841 2300 	strex	r3, r2, [r1]
 8009d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1e3      	bne.n	8009d3e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3314      	adds	r3, #20
 8009d7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d80:	e853 3f00 	ldrex	r3, [r3]
 8009d84:	623b      	str	r3, [r7, #32]
   return(result);
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	f023 0301 	bic.w	r3, r3, #1
 8009d8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	3314      	adds	r3, #20
 8009d96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009d9a:	633a      	str	r2, [r7, #48]	; 0x30
 8009d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009da2:	e841 2300 	strex	r3, r2, [r1]
 8009da6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1e3      	bne.n	8009d76 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2220      	movs	r2, #32
 8009db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	330c      	adds	r3, #12
 8009dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	e853 3f00 	ldrex	r3, [r3]
 8009dca:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f023 0310 	bic.w	r3, r3, #16
 8009dd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	330c      	adds	r3, #12
 8009ddc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009de0:	61fa      	str	r2, [r7, #28]
 8009de2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de4:	69b9      	ldr	r1, [r7, #24]
 8009de6:	69fa      	ldr	r2, [r7, #28]
 8009de8:	e841 2300 	strex	r3, r2, [r1]
 8009dec:	617b      	str	r3, [r7, #20]
   return(result);
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d1e3      	bne.n	8009dbc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2202      	movs	r2, #2
 8009df8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009dfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009dfe:	4619      	mov	r1, r3
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 f83b 	bl	8009e7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009e06:	e023      	b.n	8009e50 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d009      	beq.n	8009e28 <HAL_UART_IRQHandler+0x4f4>
 8009e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d003      	beq.n	8009e28 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 f953 	bl	800a0cc <UART_Transmit_IT>
    return;
 8009e26:	e014      	b.n	8009e52 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00e      	beq.n	8009e52 <HAL_UART_IRQHandler+0x51e>
 8009e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d008      	beq.n	8009e52 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 f992 	bl	800a16a <UART_EndTransmit_IT>
    return;
 8009e46:	e004      	b.n	8009e52 <HAL_UART_IRQHandler+0x51e>
    return;
 8009e48:	bf00      	nop
 8009e4a:	e002      	b.n	8009e52 <HAL_UART_IRQHandler+0x51e>
      return;
 8009e4c:	bf00      	nop
 8009e4e:	e000      	b.n	8009e52 <HAL_UART_IRQHandler+0x51e>
      return;
 8009e50:	bf00      	nop
  }
}
 8009e52:	37e8      	adds	r7, #232	; 0xe8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009e60:	bf00      	nop
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bc80      	pop	{r7}
 8009e68:	4770      	bx	lr

08009e6a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b083      	sub	sp, #12
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009e72:	bf00      	nop
 8009e74:	370c      	adds	r7, #12
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bc80      	pop	{r7}
 8009e7a:	4770      	bx	lr

08009e7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	460b      	mov	r3, r1
 8009e86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009e88:	bf00      	nop
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bc80      	pop	{r7}
 8009e90:	4770      	bx	lr

08009e92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b090      	sub	sp, #64	; 0x40
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	60f8      	str	r0, [r7, #12]
 8009e9a:	60b9      	str	r1, [r7, #8]
 8009e9c:	603b      	str	r3, [r7, #0]
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ea2:	e050      	b.n	8009f46 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eaa:	d04c      	beq.n	8009f46 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d007      	beq.n	8009ec2 <UART_WaitOnFlagUntilTimeout+0x30>
 8009eb2:	f7f9 fb91 	bl	80035d8 <HAL_GetTick>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d241      	bcs.n	8009f46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	330c      	adds	r3, #12
 8009ec8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ecc:	e853 3f00 	ldrex	r3, [r3]
 8009ed0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	330c      	adds	r3, #12
 8009ee0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ee2:	637a      	str	r2, [r7, #52]	; 0x34
 8009ee4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ee8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009eea:	e841 2300 	strex	r3, r2, [r1]
 8009eee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1e5      	bne.n	8009ec2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	3314      	adds	r3, #20
 8009efc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	e853 3f00 	ldrex	r3, [r3]
 8009f04:	613b      	str	r3, [r7, #16]
   return(result);
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	f023 0301 	bic.w	r3, r3, #1
 8009f0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3314      	adds	r3, #20
 8009f14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f16:	623a      	str	r2, [r7, #32]
 8009f18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1a:	69f9      	ldr	r1, [r7, #28]
 8009f1c:	6a3a      	ldr	r2, [r7, #32]
 8009f1e:	e841 2300 	strex	r3, r2, [r1]
 8009f22:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d1e5      	bne.n	8009ef6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2220      	movs	r2, #32
 8009f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8009f42:	2303      	movs	r3, #3
 8009f44:	e00f      	b.n	8009f66 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	4013      	ands	r3, r2
 8009f50:	68ba      	ldr	r2, [r7, #8]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	bf0c      	ite	eq
 8009f56:	2301      	moveq	r3, #1
 8009f58:	2300      	movne	r3, #0
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	79fb      	ldrb	r3, [r7, #7]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d09f      	beq.n	8009ea4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3740      	adds	r7, #64	; 0x40
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f6e:	b480      	push	{r7}
 8009f70:	b085      	sub	sp, #20
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	60f8      	str	r0, [r7, #12]
 8009f76:	60b9      	str	r1, [r7, #8]
 8009f78:	4613      	mov	r3, r2
 8009f7a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	88fa      	ldrh	r2, [r7, #6]
 8009f86:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	88fa      	ldrh	r2, [r7, #6]
 8009f8c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2222      	movs	r2, #34	; 0x22
 8009f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d007      	beq.n	8009fb4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68da      	ldr	r2, [r3, #12]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fb2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	695a      	ldr	r2, [r3, #20]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f042 0201 	orr.w	r2, r2, #1
 8009fc2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68da      	ldr	r2, [r3, #12]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f042 0220 	orr.w	r2, r2, #32
 8009fd2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3714      	adds	r7, #20
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bc80      	pop	{r7}
 8009fde:	4770      	bx	lr

08009fe0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b095      	sub	sp, #84	; 0x54
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	330c      	adds	r3, #12
 8009fee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ff2:	e853 3f00 	ldrex	r3, [r3]
 8009ff6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	330c      	adds	r3, #12
 800a006:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a008:	643a      	str	r2, [r7, #64]	; 0x40
 800a00a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a00c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a00e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a010:	e841 2300 	strex	r3, r2, [r1]
 800a014:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d1e5      	bne.n	8009fe8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	3314      	adds	r3, #20
 800a022:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a024:	6a3b      	ldr	r3, [r7, #32]
 800a026:	e853 3f00 	ldrex	r3, [r3]
 800a02a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	f023 0301 	bic.w	r3, r3, #1
 800a032:	64bb      	str	r3, [r7, #72]	; 0x48
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	3314      	adds	r3, #20
 800a03a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a03c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a03e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a044:	e841 2300 	strex	r3, r2, [r1]
 800a048:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d1e5      	bne.n	800a01c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a054:	2b01      	cmp	r3, #1
 800a056:	d119      	bne.n	800a08c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	330c      	adds	r3, #12
 800a05e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	e853 3f00 	ldrex	r3, [r3]
 800a066:	60bb      	str	r3, [r7, #8]
   return(result);
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	f023 0310 	bic.w	r3, r3, #16
 800a06e:	647b      	str	r3, [r7, #68]	; 0x44
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	330c      	adds	r3, #12
 800a076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a078:	61ba      	str	r2, [r7, #24]
 800a07a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07c:	6979      	ldr	r1, [r7, #20]
 800a07e:	69ba      	ldr	r2, [r7, #24]
 800a080:	e841 2300 	strex	r3, r2, [r1]
 800a084:	613b      	str	r3, [r7, #16]
   return(result);
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1e5      	bne.n	800a058 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2220      	movs	r2, #32
 800a090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a09a:	bf00      	nop
 800a09c:	3754      	adds	r7, #84	; 0x54
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bc80      	pop	{r7}
 800a0a2:	4770      	bx	lr

0800a0a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f7ff fed3 	bl	8009e6a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0c4:	bf00      	nop
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	2b21      	cmp	r3, #33	; 0x21
 800a0de:	d13e      	bne.n	800a15e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0e8:	d114      	bne.n	800a114 <UART_Transmit_IT+0x48>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	691b      	ldr	r3, [r3, #16]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d110      	bne.n	800a114 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a1b      	ldr	r3, [r3, #32]
 800a0f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	881b      	ldrh	r3, [r3, #0]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a106:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a1b      	ldr	r3, [r3, #32]
 800a10c:	1c9a      	adds	r2, r3, #2
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	621a      	str	r2, [r3, #32]
 800a112:	e008      	b.n	800a126 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6a1b      	ldr	r3, [r3, #32]
 800a118:	1c59      	adds	r1, r3, #1
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	6211      	str	r1, [r2, #32]
 800a11e:	781a      	ldrb	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	3b01      	subs	r3, #1
 800a12e:	b29b      	uxth	r3, r3
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	4619      	mov	r1, r3
 800a134:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a136:	2b00      	cmp	r3, #0
 800a138:	d10f      	bne.n	800a15a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68da      	ldr	r2, [r3, #12]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a148:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	68da      	ldr	r2, [r3, #12]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a158:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a15a:	2300      	movs	r3, #0
 800a15c:	e000      	b.n	800a160 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a15e:	2302      	movs	r3, #2
  }
}
 800a160:	4618      	mov	r0, r3
 800a162:	3714      	adds	r7, #20
 800a164:	46bd      	mov	sp, r7
 800a166:	bc80      	pop	{r7}
 800a168:	4770      	bx	lr

0800a16a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b082      	sub	sp, #8
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	68da      	ldr	r2, [r3, #12]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a180:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2220      	movs	r2, #32
 800a186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f7ff fe64 	bl	8009e58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3708      	adds	r7, #8
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b08c      	sub	sp, #48	; 0x30
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	2b22      	cmp	r3, #34	; 0x22
 800a1ac:	f040 80ae 	bne.w	800a30c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1b8:	d117      	bne.n	800a1ea <UART_Receive_IT+0x50>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d113      	bne.n	800a1ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1d8:	b29a      	uxth	r2, r3
 800a1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e2:	1c9a      	adds	r2, r3, #2
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	629a      	str	r2, [r3, #40]	; 0x28
 800a1e8:	e026      	b.n	800a238 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1fc:	d007      	beq.n	800a20e <UART_Receive_IT+0x74>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d10a      	bne.n	800a21c <UART_Receive_IT+0x82>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d106      	bne.n	800a21c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	b2da      	uxtb	r2, r3
 800a216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a218:	701a      	strb	r2, [r3, #0]
 800a21a:	e008      	b.n	800a22e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	b2db      	uxtb	r3, r3
 800a224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a228:	b2da      	uxtb	r2, r3
 800a22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a232:	1c5a      	adds	r2, r3, #1
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	3b01      	subs	r3, #1
 800a240:	b29b      	uxth	r3, r3
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	4619      	mov	r1, r3
 800a246:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d15d      	bne.n	800a308 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68da      	ldr	r2, [r3, #12]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f022 0220 	bic.w	r2, r2, #32
 800a25a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	68da      	ldr	r2, [r3, #12]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a26a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	695a      	ldr	r2, [r3, #20]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f022 0201 	bic.w	r2, r2, #1
 800a27a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2220      	movs	r2, #32
 800a280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d135      	bne.n	800a2fe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	330c      	adds	r3, #12
 800a29e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	e853 3f00 	ldrex	r3, [r3]
 800a2a6:	613b      	str	r3, [r7, #16]
   return(result);
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	f023 0310 	bic.w	r3, r3, #16
 800a2ae:	627b      	str	r3, [r7, #36]	; 0x24
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	330c      	adds	r3, #12
 800a2b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2b8:	623a      	str	r2, [r7, #32]
 800a2ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2bc:	69f9      	ldr	r1, [r7, #28]
 800a2be:	6a3a      	ldr	r2, [r7, #32]
 800a2c0:	e841 2300 	strex	r3, r2, [r1]
 800a2c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1e5      	bne.n	800a298 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 0310 	and.w	r3, r3, #16
 800a2d6:	2b10      	cmp	r3, #16
 800a2d8:	d10a      	bne.n	800a2f0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2da:	2300      	movs	r3, #0
 800a2dc:	60fb      	str	r3, [r7, #12]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	60fb      	str	r3, [r7, #12]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	60fb      	str	r3, [r7, #12]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f7ff fdc0 	bl	8009e7c <HAL_UARTEx_RxEventCallback>
 800a2fc:	e002      	b.n	800a304 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f7f7 fe36 	bl	8001f70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	e002      	b.n	800a30e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a308:	2300      	movs	r3, #0
 800a30a:	e000      	b.n	800a30e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a30c:	2302      	movs	r3, #2
  }
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3730      	adds	r7, #48	; 0x30
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
	...

0800a318 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	68da      	ldr	r2, [r3, #12]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	430a      	orrs	r2, r1
 800a334:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	689a      	ldr	r2, [r3, #8]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	431a      	orrs	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	695b      	ldr	r3, [r3, #20]
 800a344:	4313      	orrs	r3, r2
 800a346:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a352:	f023 030c 	bic.w	r3, r3, #12
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	6812      	ldr	r2, [r2, #0]
 800a35a:	68b9      	ldr	r1, [r7, #8]
 800a35c:	430b      	orrs	r3, r1
 800a35e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	695b      	ldr	r3, [r3, #20]
 800a366:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	699a      	ldr	r2, [r3, #24]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	430a      	orrs	r2, r1
 800a374:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a2c      	ldr	r2, [pc, #176]	; (800a42c <UART_SetConfig+0x114>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d103      	bne.n	800a388 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a380:	f7fd fd18 	bl	8007db4 <HAL_RCC_GetPCLK2Freq>
 800a384:	60f8      	str	r0, [r7, #12]
 800a386:	e002      	b.n	800a38e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a388:	f7fd fd00 	bl	8007d8c <HAL_RCC_GetPCLK1Freq>
 800a38c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	4613      	mov	r3, r2
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	4413      	add	r3, r2
 800a396:	009a      	lsls	r2, r3, #2
 800a398:	441a      	add	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3a4:	4a22      	ldr	r2, [pc, #136]	; (800a430 <UART_SetConfig+0x118>)
 800a3a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a3aa:	095b      	lsrs	r3, r3, #5
 800a3ac:	0119      	lsls	r1, r3, #4
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4413      	add	r3, r2
 800a3b6:	009a      	lsls	r2, r3, #2
 800a3b8:	441a      	add	r2, r3
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3c4:	4b1a      	ldr	r3, [pc, #104]	; (800a430 <UART_SetConfig+0x118>)
 800a3c6:	fba3 0302 	umull	r0, r3, r3, r2
 800a3ca:	095b      	lsrs	r3, r3, #5
 800a3cc:	2064      	movs	r0, #100	; 0x64
 800a3ce:	fb00 f303 	mul.w	r3, r0, r3
 800a3d2:	1ad3      	subs	r3, r2, r3
 800a3d4:	011b      	lsls	r3, r3, #4
 800a3d6:	3332      	adds	r3, #50	; 0x32
 800a3d8:	4a15      	ldr	r2, [pc, #84]	; (800a430 <UART_SetConfig+0x118>)
 800a3da:	fba2 2303 	umull	r2, r3, r2, r3
 800a3de:	095b      	lsrs	r3, r3, #5
 800a3e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a3e4:	4419      	add	r1, r3
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4413      	add	r3, r2
 800a3ee:	009a      	lsls	r2, r3, #2
 800a3f0:	441a      	add	r2, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3fc:	4b0c      	ldr	r3, [pc, #48]	; (800a430 <UART_SetConfig+0x118>)
 800a3fe:	fba3 0302 	umull	r0, r3, r3, r2
 800a402:	095b      	lsrs	r3, r3, #5
 800a404:	2064      	movs	r0, #100	; 0x64
 800a406:	fb00 f303 	mul.w	r3, r0, r3
 800a40a:	1ad3      	subs	r3, r2, r3
 800a40c:	011b      	lsls	r3, r3, #4
 800a40e:	3332      	adds	r3, #50	; 0x32
 800a410:	4a07      	ldr	r2, [pc, #28]	; (800a430 <UART_SetConfig+0x118>)
 800a412:	fba2 2303 	umull	r2, r3, r2, r3
 800a416:	095b      	lsrs	r3, r3, #5
 800a418:	f003 020f 	and.w	r2, r3, #15
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	440a      	add	r2, r1
 800a422:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a424:	bf00      	nop
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	40013800 	.word	0x40013800
 800a430:	51eb851f 	.word	0x51eb851f

0800a434 <__errno>:
 800a434:	4b01      	ldr	r3, [pc, #4]	; (800a43c <__errno+0x8>)
 800a436:	6818      	ldr	r0, [r3, #0]
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	2000006c 	.word	0x2000006c

0800a440 <__libc_init_array>:
 800a440:	b570      	push	{r4, r5, r6, lr}
 800a442:	2600      	movs	r6, #0
 800a444:	4d0c      	ldr	r5, [pc, #48]	; (800a478 <__libc_init_array+0x38>)
 800a446:	4c0d      	ldr	r4, [pc, #52]	; (800a47c <__libc_init_array+0x3c>)
 800a448:	1b64      	subs	r4, r4, r5
 800a44a:	10a4      	asrs	r4, r4, #2
 800a44c:	42a6      	cmp	r6, r4
 800a44e:	d109      	bne.n	800a464 <__libc_init_array+0x24>
 800a450:	f002 fefa 	bl	800d248 <_init>
 800a454:	2600      	movs	r6, #0
 800a456:	4d0a      	ldr	r5, [pc, #40]	; (800a480 <__libc_init_array+0x40>)
 800a458:	4c0a      	ldr	r4, [pc, #40]	; (800a484 <__libc_init_array+0x44>)
 800a45a:	1b64      	subs	r4, r4, r5
 800a45c:	10a4      	asrs	r4, r4, #2
 800a45e:	42a6      	cmp	r6, r4
 800a460:	d105      	bne.n	800a46e <__libc_init_array+0x2e>
 800a462:	bd70      	pop	{r4, r5, r6, pc}
 800a464:	f855 3b04 	ldr.w	r3, [r5], #4
 800a468:	4798      	blx	r3
 800a46a:	3601      	adds	r6, #1
 800a46c:	e7ee      	b.n	800a44c <__libc_init_array+0xc>
 800a46e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a472:	4798      	blx	r3
 800a474:	3601      	adds	r6, #1
 800a476:	e7f2      	b.n	800a45e <__libc_init_array+0x1e>
 800a478:	0800d6f4 	.word	0x0800d6f4
 800a47c:	0800d6f4 	.word	0x0800d6f4
 800a480:	0800d6f4 	.word	0x0800d6f4
 800a484:	0800d6f8 	.word	0x0800d6f8

0800a488 <memset>:
 800a488:	4603      	mov	r3, r0
 800a48a:	4402      	add	r2, r0
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d100      	bne.n	800a492 <memset+0xa>
 800a490:	4770      	bx	lr
 800a492:	f803 1b01 	strb.w	r1, [r3], #1
 800a496:	e7f9      	b.n	800a48c <memset+0x4>

0800a498 <__cvt>:
 800a498:	2b00      	cmp	r3, #0
 800a49a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a49e:	461f      	mov	r7, r3
 800a4a0:	bfbb      	ittet	lt
 800a4a2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a4a6:	461f      	movlt	r7, r3
 800a4a8:	2300      	movge	r3, #0
 800a4aa:	232d      	movlt	r3, #45	; 0x2d
 800a4ac:	b088      	sub	sp, #32
 800a4ae:	4614      	mov	r4, r2
 800a4b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a4b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a4b4:	7013      	strb	r3, [r2, #0]
 800a4b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a4b8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800a4bc:	f023 0820 	bic.w	r8, r3, #32
 800a4c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4c4:	d005      	beq.n	800a4d2 <__cvt+0x3a>
 800a4c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a4ca:	d100      	bne.n	800a4ce <__cvt+0x36>
 800a4cc:	3501      	adds	r5, #1
 800a4ce:	2302      	movs	r3, #2
 800a4d0:	e000      	b.n	800a4d4 <__cvt+0x3c>
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	aa07      	add	r2, sp, #28
 800a4d6:	9204      	str	r2, [sp, #16]
 800a4d8:	aa06      	add	r2, sp, #24
 800a4da:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a4de:	e9cd 3500 	strd	r3, r5, [sp]
 800a4e2:	4622      	mov	r2, r4
 800a4e4:	463b      	mov	r3, r7
 800a4e6:	f000 fce3 	bl	800aeb0 <_dtoa_r>
 800a4ea:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a4ee:	4606      	mov	r6, r0
 800a4f0:	d102      	bne.n	800a4f8 <__cvt+0x60>
 800a4f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4f4:	07db      	lsls	r3, r3, #31
 800a4f6:	d522      	bpl.n	800a53e <__cvt+0xa6>
 800a4f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4fc:	eb06 0905 	add.w	r9, r6, r5
 800a500:	d110      	bne.n	800a524 <__cvt+0x8c>
 800a502:	7833      	ldrb	r3, [r6, #0]
 800a504:	2b30      	cmp	r3, #48	; 0x30
 800a506:	d10a      	bne.n	800a51e <__cvt+0x86>
 800a508:	2200      	movs	r2, #0
 800a50a:	2300      	movs	r3, #0
 800a50c:	4620      	mov	r0, r4
 800a50e:	4639      	mov	r1, r7
 800a510:	f7f6 fa4a 	bl	80009a8 <__aeabi_dcmpeq>
 800a514:	b918      	cbnz	r0, 800a51e <__cvt+0x86>
 800a516:	f1c5 0501 	rsb	r5, r5, #1
 800a51a:	f8ca 5000 	str.w	r5, [sl]
 800a51e:	f8da 3000 	ldr.w	r3, [sl]
 800a522:	4499      	add	r9, r3
 800a524:	2200      	movs	r2, #0
 800a526:	2300      	movs	r3, #0
 800a528:	4620      	mov	r0, r4
 800a52a:	4639      	mov	r1, r7
 800a52c:	f7f6 fa3c 	bl	80009a8 <__aeabi_dcmpeq>
 800a530:	b108      	cbz	r0, 800a536 <__cvt+0x9e>
 800a532:	f8cd 901c 	str.w	r9, [sp, #28]
 800a536:	2230      	movs	r2, #48	; 0x30
 800a538:	9b07      	ldr	r3, [sp, #28]
 800a53a:	454b      	cmp	r3, r9
 800a53c:	d307      	bcc.n	800a54e <__cvt+0xb6>
 800a53e:	4630      	mov	r0, r6
 800a540:	9b07      	ldr	r3, [sp, #28]
 800a542:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a544:	1b9b      	subs	r3, r3, r6
 800a546:	6013      	str	r3, [r2, #0]
 800a548:	b008      	add	sp, #32
 800a54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a54e:	1c59      	adds	r1, r3, #1
 800a550:	9107      	str	r1, [sp, #28]
 800a552:	701a      	strb	r2, [r3, #0]
 800a554:	e7f0      	b.n	800a538 <__cvt+0xa0>

0800a556 <__exponent>:
 800a556:	4603      	mov	r3, r0
 800a558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a55a:	2900      	cmp	r1, #0
 800a55c:	f803 2b02 	strb.w	r2, [r3], #2
 800a560:	bfb6      	itet	lt
 800a562:	222d      	movlt	r2, #45	; 0x2d
 800a564:	222b      	movge	r2, #43	; 0x2b
 800a566:	4249      	neglt	r1, r1
 800a568:	2909      	cmp	r1, #9
 800a56a:	7042      	strb	r2, [r0, #1]
 800a56c:	dd2b      	ble.n	800a5c6 <__exponent+0x70>
 800a56e:	f10d 0407 	add.w	r4, sp, #7
 800a572:	46a4      	mov	ip, r4
 800a574:	270a      	movs	r7, #10
 800a576:	fb91 f6f7 	sdiv	r6, r1, r7
 800a57a:	460a      	mov	r2, r1
 800a57c:	46a6      	mov	lr, r4
 800a57e:	fb07 1516 	mls	r5, r7, r6, r1
 800a582:	2a63      	cmp	r2, #99	; 0x63
 800a584:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800a588:	4631      	mov	r1, r6
 800a58a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a58e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a592:	dcf0      	bgt.n	800a576 <__exponent+0x20>
 800a594:	3130      	adds	r1, #48	; 0x30
 800a596:	f1ae 0502 	sub.w	r5, lr, #2
 800a59a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a59e:	4629      	mov	r1, r5
 800a5a0:	1c44      	adds	r4, r0, #1
 800a5a2:	4561      	cmp	r1, ip
 800a5a4:	d30a      	bcc.n	800a5bc <__exponent+0x66>
 800a5a6:	f10d 0209 	add.w	r2, sp, #9
 800a5aa:	eba2 020e 	sub.w	r2, r2, lr
 800a5ae:	4565      	cmp	r5, ip
 800a5b0:	bf88      	it	hi
 800a5b2:	2200      	movhi	r2, #0
 800a5b4:	4413      	add	r3, r2
 800a5b6:	1a18      	subs	r0, r3, r0
 800a5b8:	b003      	add	sp, #12
 800a5ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5c0:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a5c4:	e7ed      	b.n	800a5a2 <__exponent+0x4c>
 800a5c6:	2330      	movs	r3, #48	; 0x30
 800a5c8:	3130      	adds	r1, #48	; 0x30
 800a5ca:	7083      	strb	r3, [r0, #2]
 800a5cc:	70c1      	strb	r1, [r0, #3]
 800a5ce:	1d03      	adds	r3, r0, #4
 800a5d0:	e7f1      	b.n	800a5b6 <__exponent+0x60>
	...

0800a5d4 <_printf_float>:
 800a5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d8:	b091      	sub	sp, #68	; 0x44
 800a5da:	460c      	mov	r4, r1
 800a5dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a5e0:	4616      	mov	r6, r2
 800a5e2:	461f      	mov	r7, r3
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	f001 fa51 	bl	800ba8c <_localeconv_r>
 800a5ea:	6803      	ldr	r3, [r0, #0]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a5f0:	f7f5 fdae 	bl	8000150 <strlen>
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	930e      	str	r3, [sp, #56]	; 0x38
 800a5f8:	f8d8 3000 	ldr.w	r3, [r8]
 800a5fc:	900a      	str	r0, [sp, #40]	; 0x28
 800a5fe:	3307      	adds	r3, #7
 800a600:	f023 0307 	bic.w	r3, r3, #7
 800a604:	f103 0208 	add.w	r2, r3, #8
 800a608:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a60c:	f8d4 b000 	ldr.w	fp, [r4]
 800a610:	f8c8 2000 	str.w	r2, [r8]
 800a614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a618:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a61c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800a620:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a624:	930b      	str	r3, [sp, #44]	; 0x2c
 800a626:	f04f 32ff 	mov.w	r2, #4294967295
 800a62a:	4640      	mov	r0, r8
 800a62c:	4b9c      	ldr	r3, [pc, #624]	; (800a8a0 <_printf_float+0x2cc>)
 800a62e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a630:	f7f6 f9ec 	bl	8000a0c <__aeabi_dcmpun>
 800a634:	bb70      	cbnz	r0, 800a694 <_printf_float+0xc0>
 800a636:	f04f 32ff 	mov.w	r2, #4294967295
 800a63a:	4640      	mov	r0, r8
 800a63c:	4b98      	ldr	r3, [pc, #608]	; (800a8a0 <_printf_float+0x2cc>)
 800a63e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a640:	f7f6 f9c6 	bl	80009d0 <__aeabi_dcmple>
 800a644:	bb30      	cbnz	r0, 800a694 <_printf_float+0xc0>
 800a646:	2200      	movs	r2, #0
 800a648:	2300      	movs	r3, #0
 800a64a:	4640      	mov	r0, r8
 800a64c:	4651      	mov	r1, sl
 800a64e:	f7f6 f9b5 	bl	80009bc <__aeabi_dcmplt>
 800a652:	b110      	cbz	r0, 800a65a <_printf_float+0x86>
 800a654:	232d      	movs	r3, #45	; 0x2d
 800a656:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a65a:	4b92      	ldr	r3, [pc, #584]	; (800a8a4 <_printf_float+0x2d0>)
 800a65c:	4892      	ldr	r0, [pc, #584]	; (800a8a8 <_printf_float+0x2d4>)
 800a65e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a662:	bf94      	ite	ls
 800a664:	4698      	movls	r8, r3
 800a666:	4680      	movhi	r8, r0
 800a668:	2303      	movs	r3, #3
 800a66a:	f04f 0a00 	mov.w	sl, #0
 800a66e:	6123      	str	r3, [r4, #16]
 800a670:	f02b 0304 	bic.w	r3, fp, #4
 800a674:	6023      	str	r3, [r4, #0]
 800a676:	4633      	mov	r3, r6
 800a678:	4621      	mov	r1, r4
 800a67a:	4628      	mov	r0, r5
 800a67c:	9700      	str	r7, [sp, #0]
 800a67e:	aa0f      	add	r2, sp, #60	; 0x3c
 800a680:	f000 f9d4 	bl	800aa2c <_printf_common>
 800a684:	3001      	adds	r0, #1
 800a686:	f040 8090 	bne.w	800a7aa <_printf_float+0x1d6>
 800a68a:	f04f 30ff 	mov.w	r0, #4294967295
 800a68e:	b011      	add	sp, #68	; 0x44
 800a690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a694:	4642      	mov	r2, r8
 800a696:	4653      	mov	r3, sl
 800a698:	4640      	mov	r0, r8
 800a69a:	4651      	mov	r1, sl
 800a69c:	f7f6 f9b6 	bl	8000a0c <__aeabi_dcmpun>
 800a6a0:	b148      	cbz	r0, 800a6b6 <_printf_float+0xe2>
 800a6a2:	f1ba 0f00 	cmp.w	sl, #0
 800a6a6:	bfb8      	it	lt
 800a6a8:	232d      	movlt	r3, #45	; 0x2d
 800a6aa:	4880      	ldr	r0, [pc, #512]	; (800a8ac <_printf_float+0x2d8>)
 800a6ac:	bfb8      	it	lt
 800a6ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a6b2:	4b7f      	ldr	r3, [pc, #508]	; (800a8b0 <_printf_float+0x2dc>)
 800a6b4:	e7d3      	b.n	800a65e <_printf_float+0x8a>
 800a6b6:	6863      	ldr	r3, [r4, #4]
 800a6b8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a6bc:	1c5a      	adds	r2, r3, #1
 800a6be:	d142      	bne.n	800a746 <_printf_float+0x172>
 800a6c0:	2306      	movs	r3, #6
 800a6c2:	6063      	str	r3, [r4, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	9206      	str	r2, [sp, #24]
 800a6c8:	aa0e      	add	r2, sp, #56	; 0x38
 800a6ca:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800a6ce:	aa0d      	add	r2, sp, #52	; 0x34
 800a6d0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800a6d4:	9203      	str	r2, [sp, #12]
 800a6d6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a6da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a6de:	6023      	str	r3, [r4, #0]
 800a6e0:	6863      	ldr	r3, [r4, #4]
 800a6e2:	4642      	mov	r2, r8
 800a6e4:	9300      	str	r3, [sp, #0]
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	4653      	mov	r3, sl
 800a6ea:	910b      	str	r1, [sp, #44]	; 0x2c
 800a6ec:	f7ff fed4 	bl	800a498 <__cvt>
 800a6f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a6f2:	4680      	mov	r8, r0
 800a6f4:	2947      	cmp	r1, #71	; 0x47
 800a6f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a6f8:	d108      	bne.n	800a70c <_printf_float+0x138>
 800a6fa:	1cc8      	adds	r0, r1, #3
 800a6fc:	db02      	blt.n	800a704 <_printf_float+0x130>
 800a6fe:	6863      	ldr	r3, [r4, #4]
 800a700:	4299      	cmp	r1, r3
 800a702:	dd40      	ble.n	800a786 <_printf_float+0x1b2>
 800a704:	f1a9 0902 	sub.w	r9, r9, #2
 800a708:	fa5f f989 	uxtb.w	r9, r9
 800a70c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a710:	d81f      	bhi.n	800a752 <_printf_float+0x17e>
 800a712:	464a      	mov	r2, r9
 800a714:	3901      	subs	r1, #1
 800a716:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a71a:	910d      	str	r1, [sp, #52]	; 0x34
 800a71c:	f7ff ff1b 	bl	800a556 <__exponent>
 800a720:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a722:	4682      	mov	sl, r0
 800a724:	1813      	adds	r3, r2, r0
 800a726:	2a01      	cmp	r2, #1
 800a728:	6123      	str	r3, [r4, #16]
 800a72a:	dc02      	bgt.n	800a732 <_printf_float+0x15e>
 800a72c:	6822      	ldr	r2, [r4, #0]
 800a72e:	07d2      	lsls	r2, r2, #31
 800a730:	d501      	bpl.n	800a736 <_printf_float+0x162>
 800a732:	3301      	adds	r3, #1
 800a734:	6123      	str	r3, [r4, #16]
 800a736:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d09b      	beq.n	800a676 <_printf_float+0xa2>
 800a73e:	232d      	movs	r3, #45	; 0x2d
 800a740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a744:	e797      	b.n	800a676 <_printf_float+0xa2>
 800a746:	2947      	cmp	r1, #71	; 0x47
 800a748:	d1bc      	bne.n	800a6c4 <_printf_float+0xf0>
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1ba      	bne.n	800a6c4 <_printf_float+0xf0>
 800a74e:	2301      	movs	r3, #1
 800a750:	e7b7      	b.n	800a6c2 <_printf_float+0xee>
 800a752:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a756:	d118      	bne.n	800a78a <_printf_float+0x1b6>
 800a758:	2900      	cmp	r1, #0
 800a75a:	6863      	ldr	r3, [r4, #4]
 800a75c:	dd0b      	ble.n	800a776 <_printf_float+0x1a2>
 800a75e:	6121      	str	r1, [r4, #16]
 800a760:	b913      	cbnz	r3, 800a768 <_printf_float+0x194>
 800a762:	6822      	ldr	r2, [r4, #0]
 800a764:	07d0      	lsls	r0, r2, #31
 800a766:	d502      	bpl.n	800a76e <_printf_float+0x19a>
 800a768:	3301      	adds	r3, #1
 800a76a:	440b      	add	r3, r1
 800a76c:	6123      	str	r3, [r4, #16]
 800a76e:	f04f 0a00 	mov.w	sl, #0
 800a772:	65a1      	str	r1, [r4, #88]	; 0x58
 800a774:	e7df      	b.n	800a736 <_printf_float+0x162>
 800a776:	b913      	cbnz	r3, 800a77e <_printf_float+0x1aa>
 800a778:	6822      	ldr	r2, [r4, #0]
 800a77a:	07d2      	lsls	r2, r2, #31
 800a77c:	d501      	bpl.n	800a782 <_printf_float+0x1ae>
 800a77e:	3302      	adds	r3, #2
 800a780:	e7f4      	b.n	800a76c <_printf_float+0x198>
 800a782:	2301      	movs	r3, #1
 800a784:	e7f2      	b.n	800a76c <_printf_float+0x198>
 800a786:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a78a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a78c:	4299      	cmp	r1, r3
 800a78e:	db05      	blt.n	800a79c <_printf_float+0x1c8>
 800a790:	6823      	ldr	r3, [r4, #0]
 800a792:	6121      	str	r1, [r4, #16]
 800a794:	07d8      	lsls	r0, r3, #31
 800a796:	d5ea      	bpl.n	800a76e <_printf_float+0x19a>
 800a798:	1c4b      	adds	r3, r1, #1
 800a79a:	e7e7      	b.n	800a76c <_printf_float+0x198>
 800a79c:	2900      	cmp	r1, #0
 800a79e:	bfcc      	ite	gt
 800a7a0:	2201      	movgt	r2, #1
 800a7a2:	f1c1 0202 	rsble	r2, r1, #2
 800a7a6:	4413      	add	r3, r2
 800a7a8:	e7e0      	b.n	800a76c <_printf_float+0x198>
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	055a      	lsls	r2, r3, #21
 800a7ae:	d407      	bmi.n	800a7c0 <_printf_float+0x1ec>
 800a7b0:	6923      	ldr	r3, [r4, #16]
 800a7b2:	4642      	mov	r2, r8
 800a7b4:	4631      	mov	r1, r6
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	47b8      	blx	r7
 800a7ba:	3001      	adds	r0, #1
 800a7bc:	d12b      	bne.n	800a816 <_printf_float+0x242>
 800a7be:	e764      	b.n	800a68a <_printf_float+0xb6>
 800a7c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a7c4:	f240 80dd 	bls.w	800a982 <_printf_float+0x3ae>
 800a7c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	f7f6 f8ea 	bl	80009a8 <__aeabi_dcmpeq>
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	d033      	beq.n	800a840 <_printf_float+0x26c>
 800a7d8:	2301      	movs	r3, #1
 800a7da:	4631      	mov	r1, r6
 800a7dc:	4628      	mov	r0, r5
 800a7de:	4a35      	ldr	r2, [pc, #212]	; (800a8b4 <_printf_float+0x2e0>)
 800a7e0:	47b8      	blx	r7
 800a7e2:	3001      	adds	r0, #1
 800a7e4:	f43f af51 	beq.w	800a68a <_printf_float+0xb6>
 800a7e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	db02      	blt.n	800a7f6 <_printf_float+0x222>
 800a7f0:	6823      	ldr	r3, [r4, #0]
 800a7f2:	07d8      	lsls	r0, r3, #31
 800a7f4:	d50f      	bpl.n	800a816 <_printf_float+0x242>
 800a7f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7fa:	4631      	mov	r1, r6
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	47b8      	blx	r7
 800a800:	3001      	adds	r0, #1
 800a802:	f43f af42 	beq.w	800a68a <_printf_float+0xb6>
 800a806:	f04f 0800 	mov.w	r8, #0
 800a80a:	f104 091a 	add.w	r9, r4, #26
 800a80e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a810:	3b01      	subs	r3, #1
 800a812:	4543      	cmp	r3, r8
 800a814:	dc09      	bgt.n	800a82a <_printf_float+0x256>
 800a816:	6823      	ldr	r3, [r4, #0]
 800a818:	079b      	lsls	r3, r3, #30
 800a81a:	f100 8102 	bmi.w	800aa22 <_printf_float+0x44e>
 800a81e:	68e0      	ldr	r0, [r4, #12]
 800a820:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a822:	4298      	cmp	r0, r3
 800a824:	bfb8      	it	lt
 800a826:	4618      	movlt	r0, r3
 800a828:	e731      	b.n	800a68e <_printf_float+0xba>
 800a82a:	2301      	movs	r3, #1
 800a82c:	464a      	mov	r2, r9
 800a82e:	4631      	mov	r1, r6
 800a830:	4628      	mov	r0, r5
 800a832:	47b8      	blx	r7
 800a834:	3001      	adds	r0, #1
 800a836:	f43f af28 	beq.w	800a68a <_printf_float+0xb6>
 800a83a:	f108 0801 	add.w	r8, r8, #1
 800a83e:	e7e6      	b.n	800a80e <_printf_float+0x23a>
 800a840:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a842:	2b00      	cmp	r3, #0
 800a844:	dc38      	bgt.n	800a8b8 <_printf_float+0x2e4>
 800a846:	2301      	movs	r3, #1
 800a848:	4631      	mov	r1, r6
 800a84a:	4628      	mov	r0, r5
 800a84c:	4a19      	ldr	r2, [pc, #100]	; (800a8b4 <_printf_float+0x2e0>)
 800a84e:	47b8      	blx	r7
 800a850:	3001      	adds	r0, #1
 800a852:	f43f af1a 	beq.w	800a68a <_printf_float+0xb6>
 800a856:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a85a:	4313      	orrs	r3, r2
 800a85c:	d102      	bne.n	800a864 <_printf_float+0x290>
 800a85e:	6823      	ldr	r3, [r4, #0]
 800a860:	07d9      	lsls	r1, r3, #31
 800a862:	d5d8      	bpl.n	800a816 <_printf_float+0x242>
 800a864:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a868:	4631      	mov	r1, r6
 800a86a:	4628      	mov	r0, r5
 800a86c:	47b8      	blx	r7
 800a86e:	3001      	adds	r0, #1
 800a870:	f43f af0b 	beq.w	800a68a <_printf_float+0xb6>
 800a874:	f04f 0900 	mov.w	r9, #0
 800a878:	f104 0a1a 	add.w	sl, r4, #26
 800a87c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a87e:	425b      	negs	r3, r3
 800a880:	454b      	cmp	r3, r9
 800a882:	dc01      	bgt.n	800a888 <_printf_float+0x2b4>
 800a884:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a886:	e794      	b.n	800a7b2 <_printf_float+0x1de>
 800a888:	2301      	movs	r3, #1
 800a88a:	4652      	mov	r2, sl
 800a88c:	4631      	mov	r1, r6
 800a88e:	4628      	mov	r0, r5
 800a890:	47b8      	blx	r7
 800a892:	3001      	adds	r0, #1
 800a894:	f43f aef9 	beq.w	800a68a <_printf_float+0xb6>
 800a898:	f109 0901 	add.w	r9, r9, #1
 800a89c:	e7ee      	b.n	800a87c <_printf_float+0x2a8>
 800a89e:	bf00      	nop
 800a8a0:	7fefffff 	.word	0x7fefffff
 800a8a4:	0800d320 	.word	0x0800d320
 800a8a8:	0800d324 	.word	0x0800d324
 800a8ac:	0800d32c 	.word	0x0800d32c
 800a8b0:	0800d328 	.word	0x0800d328
 800a8b4:	0800d330 	.word	0x0800d330
 800a8b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	bfa8      	it	ge
 800a8c0:	461a      	movge	r2, r3
 800a8c2:	2a00      	cmp	r2, #0
 800a8c4:	4691      	mov	r9, r2
 800a8c6:	dc37      	bgt.n	800a938 <_printf_float+0x364>
 800a8c8:	f04f 0b00 	mov.w	fp, #0
 800a8cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8d0:	f104 021a 	add.w	r2, r4, #26
 800a8d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a8d8:	ebaa 0309 	sub.w	r3, sl, r9
 800a8dc:	455b      	cmp	r3, fp
 800a8de:	dc33      	bgt.n	800a948 <_printf_float+0x374>
 800a8e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	db3b      	blt.n	800a960 <_printf_float+0x38c>
 800a8e8:	6823      	ldr	r3, [r4, #0]
 800a8ea:	07da      	lsls	r2, r3, #31
 800a8ec:	d438      	bmi.n	800a960 <_printf_float+0x38c>
 800a8ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a8f2:	eba3 020a 	sub.w	r2, r3, sl
 800a8f6:	eba3 0901 	sub.w	r9, r3, r1
 800a8fa:	4591      	cmp	r9, r2
 800a8fc:	bfa8      	it	ge
 800a8fe:	4691      	movge	r9, r2
 800a900:	f1b9 0f00 	cmp.w	r9, #0
 800a904:	dc34      	bgt.n	800a970 <_printf_float+0x39c>
 800a906:	f04f 0800 	mov.w	r8, #0
 800a90a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a90e:	f104 0a1a 	add.w	sl, r4, #26
 800a912:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a916:	1a9b      	subs	r3, r3, r2
 800a918:	eba3 0309 	sub.w	r3, r3, r9
 800a91c:	4543      	cmp	r3, r8
 800a91e:	f77f af7a 	ble.w	800a816 <_printf_float+0x242>
 800a922:	2301      	movs	r3, #1
 800a924:	4652      	mov	r2, sl
 800a926:	4631      	mov	r1, r6
 800a928:	4628      	mov	r0, r5
 800a92a:	47b8      	blx	r7
 800a92c:	3001      	adds	r0, #1
 800a92e:	f43f aeac 	beq.w	800a68a <_printf_float+0xb6>
 800a932:	f108 0801 	add.w	r8, r8, #1
 800a936:	e7ec      	b.n	800a912 <_printf_float+0x33e>
 800a938:	4613      	mov	r3, r2
 800a93a:	4631      	mov	r1, r6
 800a93c:	4642      	mov	r2, r8
 800a93e:	4628      	mov	r0, r5
 800a940:	47b8      	blx	r7
 800a942:	3001      	adds	r0, #1
 800a944:	d1c0      	bne.n	800a8c8 <_printf_float+0x2f4>
 800a946:	e6a0      	b.n	800a68a <_printf_float+0xb6>
 800a948:	2301      	movs	r3, #1
 800a94a:	4631      	mov	r1, r6
 800a94c:	4628      	mov	r0, r5
 800a94e:	920b      	str	r2, [sp, #44]	; 0x2c
 800a950:	47b8      	blx	r7
 800a952:	3001      	adds	r0, #1
 800a954:	f43f ae99 	beq.w	800a68a <_printf_float+0xb6>
 800a958:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a95a:	f10b 0b01 	add.w	fp, fp, #1
 800a95e:	e7b9      	b.n	800a8d4 <_printf_float+0x300>
 800a960:	4631      	mov	r1, r6
 800a962:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a966:	4628      	mov	r0, r5
 800a968:	47b8      	blx	r7
 800a96a:	3001      	adds	r0, #1
 800a96c:	d1bf      	bne.n	800a8ee <_printf_float+0x31a>
 800a96e:	e68c      	b.n	800a68a <_printf_float+0xb6>
 800a970:	464b      	mov	r3, r9
 800a972:	4631      	mov	r1, r6
 800a974:	4628      	mov	r0, r5
 800a976:	eb08 020a 	add.w	r2, r8, sl
 800a97a:	47b8      	blx	r7
 800a97c:	3001      	adds	r0, #1
 800a97e:	d1c2      	bne.n	800a906 <_printf_float+0x332>
 800a980:	e683      	b.n	800a68a <_printf_float+0xb6>
 800a982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a984:	2a01      	cmp	r2, #1
 800a986:	dc01      	bgt.n	800a98c <_printf_float+0x3b8>
 800a988:	07db      	lsls	r3, r3, #31
 800a98a:	d537      	bpl.n	800a9fc <_printf_float+0x428>
 800a98c:	2301      	movs	r3, #1
 800a98e:	4642      	mov	r2, r8
 800a990:	4631      	mov	r1, r6
 800a992:	4628      	mov	r0, r5
 800a994:	47b8      	blx	r7
 800a996:	3001      	adds	r0, #1
 800a998:	f43f ae77 	beq.w	800a68a <_printf_float+0xb6>
 800a99c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9a0:	4631      	mov	r1, r6
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	47b8      	blx	r7
 800a9a6:	3001      	adds	r0, #1
 800a9a8:	f43f ae6f 	beq.w	800a68a <_printf_float+0xb6>
 800a9ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	f7f5 fff8 	bl	80009a8 <__aeabi_dcmpeq>
 800a9b8:	b9d8      	cbnz	r0, 800a9f2 <_printf_float+0x41e>
 800a9ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9bc:	f108 0201 	add.w	r2, r8, #1
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	4631      	mov	r1, r6
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	47b8      	blx	r7
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	d10e      	bne.n	800a9ea <_printf_float+0x416>
 800a9cc:	e65d      	b.n	800a68a <_printf_float+0xb6>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	464a      	mov	r2, r9
 800a9d2:	4631      	mov	r1, r6
 800a9d4:	4628      	mov	r0, r5
 800a9d6:	47b8      	blx	r7
 800a9d8:	3001      	adds	r0, #1
 800a9da:	f43f ae56 	beq.w	800a68a <_printf_float+0xb6>
 800a9de:	f108 0801 	add.w	r8, r8, #1
 800a9e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9e4:	3b01      	subs	r3, #1
 800a9e6:	4543      	cmp	r3, r8
 800a9e8:	dcf1      	bgt.n	800a9ce <_printf_float+0x3fa>
 800a9ea:	4653      	mov	r3, sl
 800a9ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a9f0:	e6e0      	b.n	800a7b4 <_printf_float+0x1e0>
 800a9f2:	f04f 0800 	mov.w	r8, #0
 800a9f6:	f104 091a 	add.w	r9, r4, #26
 800a9fa:	e7f2      	b.n	800a9e2 <_printf_float+0x40e>
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	4642      	mov	r2, r8
 800aa00:	e7df      	b.n	800a9c2 <_printf_float+0x3ee>
 800aa02:	2301      	movs	r3, #1
 800aa04:	464a      	mov	r2, r9
 800aa06:	4631      	mov	r1, r6
 800aa08:	4628      	mov	r0, r5
 800aa0a:	47b8      	blx	r7
 800aa0c:	3001      	adds	r0, #1
 800aa0e:	f43f ae3c 	beq.w	800a68a <_printf_float+0xb6>
 800aa12:	f108 0801 	add.w	r8, r8, #1
 800aa16:	68e3      	ldr	r3, [r4, #12]
 800aa18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aa1a:	1a5b      	subs	r3, r3, r1
 800aa1c:	4543      	cmp	r3, r8
 800aa1e:	dcf0      	bgt.n	800aa02 <_printf_float+0x42e>
 800aa20:	e6fd      	b.n	800a81e <_printf_float+0x24a>
 800aa22:	f04f 0800 	mov.w	r8, #0
 800aa26:	f104 0919 	add.w	r9, r4, #25
 800aa2a:	e7f4      	b.n	800aa16 <_printf_float+0x442>

0800aa2c <_printf_common>:
 800aa2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa30:	4616      	mov	r6, r2
 800aa32:	4699      	mov	r9, r3
 800aa34:	688a      	ldr	r2, [r1, #8]
 800aa36:	690b      	ldr	r3, [r1, #16]
 800aa38:	4607      	mov	r7, r0
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	bfb8      	it	lt
 800aa3e:	4613      	movlt	r3, r2
 800aa40:	6033      	str	r3, [r6, #0]
 800aa42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa46:	460c      	mov	r4, r1
 800aa48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa4c:	b10a      	cbz	r2, 800aa52 <_printf_common+0x26>
 800aa4e:	3301      	adds	r3, #1
 800aa50:	6033      	str	r3, [r6, #0]
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	0699      	lsls	r1, r3, #26
 800aa56:	bf42      	ittt	mi
 800aa58:	6833      	ldrmi	r3, [r6, #0]
 800aa5a:	3302      	addmi	r3, #2
 800aa5c:	6033      	strmi	r3, [r6, #0]
 800aa5e:	6825      	ldr	r5, [r4, #0]
 800aa60:	f015 0506 	ands.w	r5, r5, #6
 800aa64:	d106      	bne.n	800aa74 <_printf_common+0x48>
 800aa66:	f104 0a19 	add.w	sl, r4, #25
 800aa6a:	68e3      	ldr	r3, [r4, #12]
 800aa6c:	6832      	ldr	r2, [r6, #0]
 800aa6e:	1a9b      	subs	r3, r3, r2
 800aa70:	42ab      	cmp	r3, r5
 800aa72:	dc28      	bgt.n	800aac6 <_printf_common+0x9a>
 800aa74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa78:	1e13      	subs	r3, r2, #0
 800aa7a:	6822      	ldr	r2, [r4, #0]
 800aa7c:	bf18      	it	ne
 800aa7e:	2301      	movne	r3, #1
 800aa80:	0692      	lsls	r2, r2, #26
 800aa82:	d42d      	bmi.n	800aae0 <_printf_common+0xb4>
 800aa84:	4649      	mov	r1, r9
 800aa86:	4638      	mov	r0, r7
 800aa88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa8c:	47c0      	blx	r8
 800aa8e:	3001      	adds	r0, #1
 800aa90:	d020      	beq.n	800aad4 <_printf_common+0xa8>
 800aa92:	6823      	ldr	r3, [r4, #0]
 800aa94:	68e5      	ldr	r5, [r4, #12]
 800aa96:	f003 0306 	and.w	r3, r3, #6
 800aa9a:	2b04      	cmp	r3, #4
 800aa9c:	bf18      	it	ne
 800aa9e:	2500      	movne	r5, #0
 800aaa0:	6832      	ldr	r2, [r6, #0]
 800aaa2:	f04f 0600 	mov.w	r6, #0
 800aaa6:	68a3      	ldr	r3, [r4, #8]
 800aaa8:	bf08      	it	eq
 800aaaa:	1aad      	subeq	r5, r5, r2
 800aaac:	6922      	ldr	r2, [r4, #16]
 800aaae:	bf08      	it	eq
 800aab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aab4:	4293      	cmp	r3, r2
 800aab6:	bfc4      	itt	gt
 800aab8:	1a9b      	subgt	r3, r3, r2
 800aaba:	18ed      	addgt	r5, r5, r3
 800aabc:	341a      	adds	r4, #26
 800aabe:	42b5      	cmp	r5, r6
 800aac0:	d11a      	bne.n	800aaf8 <_printf_common+0xcc>
 800aac2:	2000      	movs	r0, #0
 800aac4:	e008      	b.n	800aad8 <_printf_common+0xac>
 800aac6:	2301      	movs	r3, #1
 800aac8:	4652      	mov	r2, sl
 800aaca:	4649      	mov	r1, r9
 800aacc:	4638      	mov	r0, r7
 800aace:	47c0      	blx	r8
 800aad0:	3001      	adds	r0, #1
 800aad2:	d103      	bne.n	800aadc <_printf_common+0xb0>
 800aad4:	f04f 30ff 	mov.w	r0, #4294967295
 800aad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aadc:	3501      	adds	r5, #1
 800aade:	e7c4      	b.n	800aa6a <_printf_common+0x3e>
 800aae0:	2030      	movs	r0, #48	; 0x30
 800aae2:	18e1      	adds	r1, r4, r3
 800aae4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aae8:	1c5a      	adds	r2, r3, #1
 800aaea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aaee:	4422      	add	r2, r4
 800aaf0:	3302      	adds	r3, #2
 800aaf2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aaf6:	e7c5      	b.n	800aa84 <_printf_common+0x58>
 800aaf8:	2301      	movs	r3, #1
 800aafa:	4622      	mov	r2, r4
 800aafc:	4649      	mov	r1, r9
 800aafe:	4638      	mov	r0, r7
 800ab00:	47c0      	blx	r8
 800ab02:	3001      	adds	r0, #1
 800ab04:	d0e6      	beq.n	800aad4 <_printf_common+0xa8>
 800ab06:	3601      	adds	r6, #1
 800ab08:	e7d9      	b.n	800aabe <_printf_common+0x92>
	...

0800ab0c <_printf_i>:
 800ab0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab10:	7e0f      	ldrb	r7, [r1, #24]
 800ab12:	4691      	mov	r9, r2
 800ab14:	2f78      	cmp	r7, #120	; 0x78
 800ab16:	4680      	mov	r8, r0
 800ab18:	460c      	mov	r4, r1
 800ab1a:	469a      	mov	sl, r3
 800ab1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab22:	d807      	bhi.n	800ab34 <_printf_i+0x28>
 800ab24:	2f62      	cmp	r7, #98	; 0x62
 800ab26:	d80a      	bhi.n	800ab3e <_printf_i+0x32>
 800ab28:	2f00      	cmp	r7, #0
 800ab2a:	f000 80d9 	beq.w	800ace0 <_printf_i+0x1d4>
 800ab2e:	2f58      	cmp	r7, #88	; 0x58
 800ab30:	f000 80a4 	beq.w	800ac7c <_printf_i+0x170>
 800ab34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab3c:	e03a      	b.n	800abb4 <_printf_i+0xa8>
 800ab3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab42:	2b15      	cmp	r3, #21
 800ab44:	d8f6      	bhi.n	800ab34 <_printf_i+0x28>
 800ab46:	a101      	add	r1, pc, #4	; (adr r1, 800ab4c <_printf_i+0x40>)
 800ab48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab4c:	0800aba5 	.word	0x0800aba5
 800ab50:	0800abb9 	.word	0x0800abb9
 800ab54:	0800ab35 	.word	0x0800ab35
 800ab58:	0800ab35 	.word	0x0800ab35
 800ab5c:	0800ab35 	.word	0x0800ab35
 800ab60:	0800ab35 	.word	0x0800ab35
 800ab64:	0800abb9 	.word	0x0800abb9
 800ab68:	0800ab35 	.word	0x0800ab35
 800ab6c:	0800ab35 	.word	0x0800ab35
 800ab70:	0800ab35 	.word	0x0800ab35
 800ab74:	0800ab35 	.word	0x0800ab35
 800ab78:	0800acc7 	.word	0x0800acc7
 800ab7c:	0800abe9 	.word	0x0800abe9
 800ab80:	0800aca9 	.word	0x0800aca9
 800ab84:	0800ab35 	.word	0x0800ab35
 800ab88:	0800ab35 	.word	0x0800ab35
 800ab8c:	0800ace9 	.word	0x0800ace9
 800ab90:	0800ab35 	.word	0x0800ab35
 800ab94:	0800abe9 	.word	0x0800abe9
 800ab98:	0800ab35 	.word	0x0800ab35
 800ab9c:	0800ab35 	.word	0x0800ab35
 800aba0:	0800acb1 	.word	0x0800acb1
 800aba4:	682b      	ldr	r3, [r5, #0]
 800aba6:	1d1a      	adds	r2, r3, #4
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	602a      	str	r2, [r5, #0]
 800abac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abb4:	2301      	movs	r3, #1
 800abb6:	e0a4      	b.n	800ad02 <_printf_i+0x1f6>
 800abb8:	6820      	ldr	r0, [r4, #0]
 800abba:	6829      	ldr	r1, [r5, #0]
 800abbc:	0606      	lsls	r6, r0, #24
 800abbe:	f101 0304 	add.w	r3, r1, #4
 800abc2:	d50a      	bpl.n	800abda <_printf_i+0xce>
 800abc4:	680e      	ldr	r6, [r1, #0]
 800abc6:	602b      	str	r3, [r5, #0]
 800abc8:	2e00      	cmp	r6, #0
 800abca:	da03      	bge.n	800abd4 <_printf_i+0xc8>
 800abcc:	232d      	movs	r3, #45	; 0x2d
 800abce:	4276      	negs	r6, r6
 800abd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abd4:	230a      	movs	r3, #10
 800abd6:	485e      	ldr	r0, [pc, #376]	; (800ad50 <_printf_i+0x244>)
 800abd8:	e019      	b.n	800ac0e <_printf_i+0x102>
 800abda:	680e      	ldr	r6, [r1, #0]
 800abdc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800abe0:	602b      	str	r3, [r5, #0]
 800abe2:	bf18      	it	ne
 800abe4:	b236      	sxthne	r6, r6
 800abe6:	e7ef      	b.n	800abc8 <_printf_i+0xbc>
 800abe8:	682b      	ldr	r3, [r5, #0]
 800abea:	6820      	ldr	r0, [r4, #0]
 800abec:	1d19      	adds	r1, r3, #4
 800abee:	6029      	str	r1, [r5, #0]
 800abf0:	0601      	lsls	r1, r0, #24
 800abf2:	d501      	bpl.n	800abf8 <_printf_i+0xec>
 800abf4:	681e      	ldr	r6, [r3, #0]
 800abf6:	e002      	b.n	800abfe <_printf_i+0xf2>
 800abf8:	0646      	lsls	r6, r0, #25
 800abfa:	d5fb      	bpl.n	800abf4 <_printf_i+0xe8>
 800abfc:	881e      	ldrh	r6, [r3, #0]
 800abfe:	2f6f      	cmp	r7, #111	; 0x6f
 800ac00:	bf0c      	ite	eq
 800ac02:	2308      	moveq	r3, #8
 800ac04:	230a      	movne	r3, #10
 800ac06:	4852      	ldr	r0, [pc, #328]	; (800ad50 <_printf_i+0x244>)
 800ac08:	2100      	movs	r1, #0
 800ac0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac0e:	6865      	ldr	r5, [r4, #4]
 800ac10:	2d00      	cmp	r5, #0
 800ac12:	bfa8      	it	ge
 800ac14:	6821      	ldrge	r1, [r4, #0]
 800ac16:	60a5      	str	r5, [r4, #8]
 800ac18:	bfa4      	itt	ge
 800ac1a:	f021 0104 	bicge.w	r1, r1, #4
 800ac1e:	6021      	strge	r1, [r4, #0]
 800ac20:	b90e      	cbnz	r6, 800ac26 <_printf_i+0x11a>
 800ac22:	2d00      	cmp	r5, #0
 800ac24:	d04d      	beq.n	800acc2 <_printf_i+0x1b6>
 800ac26:	4615      	mov	r5, r2
 800ac28:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac2c:	fb03 6711 	mls	r7, r3, r1, r6
 800ac30:	5dc7      	ldrb	r7, [r0, r7]
 800ac32:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac36:	4637      	mov	r7, r6
 800ac38:	42bb      	cmp	r3, r7
 800ac3a:	460e      	mov	r6, r1
 800ac3c:	d9f4      	bls.n	800ac28 <_printf_i+0x11c>
 800ac3e:	2b08      	cmp	r3, #8
 800ac40:	d10b      	bne.n	800ac5a <_printf_i+0x14e>
 800ac42:	6823      	ldr	r3, [r4, #0]
 800ac44:	07de      	lsls	r6, r3, #31
 800ac46:	d508      	bpl.n	800ac5a <_printf_i+0x14e>
 800ac48:	6923      	ldr	r3, [r4, #16]
 800ac4a:	6861      	ldr	r1, [r4, #4]
 800ac4c:	4299      	cmp	r1, r3
 800ac4e:	bfde      	ittt	le
 800ac50:	2330      	movle	r3, #48	; 0x30
 800ac52:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac56:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac5a:	1b52      	subs	r2, r2, r5
 800ac5c:	6122      	str	r2, [r4, #16]
 800ac5e:	464b      	mov	r3, r9
 800ac60:	4621      	mov	r1, r4
 800ac62:	4640      	mov	r0, r8
 800ac64:	f8cd a000 	str.w	sl, [sp]
 800ac68:	aa03      	add	r2, sp, #12
 800ac6a:	f7ff fedf 	bl	800aa2c <_printf_common>
 800ac6e:	3001      	adds	r0, #1
 800ac70:	d14c      	bne.n	800ad0c <_printf_i+0x200>
 800ac72:	f04f 30ff 	mov.w	r0, #4294967295
 800ac76:	b004      	add	sp, #16
 800ac78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac7c:	4834      	ldr	r0, [pc, #208]	; (800ad50 <_printf_i+0x244>)
 800ac7e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac82:	6829      	ldr	r1, [r5, #0]
 800ac84:	6823      	ldr	r3, [r4, #0]
 800ac86:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac8a:	6029      	str	r1, [r5, #0]
 800ac8c:	061d      	lsls	r5, r3, #24
 800ac8e:	d514      	bpl.n	800acba <_printf_i+0x1ae>
 800ac90:	07df      	lsls	r7, r3, #31
 800ac92:	bf44      	itt	mi
 800ac94:	f043 0320 	orrmi.w	r3, r3, #32
 800ac98:	6023      	strmi	r3, [r4, #0]
 800ac9a:	b91e      	cbnz	r6, 800aca4 <_printf_i+0x198>
 800ac9c:	6823      	ldr	r3, [r4, #0]
 800ac9e:	f023 0320 	bic.w	r3, r3, #32
 800aca2:	6023      	str	r3, [r4, #0]
 800aca4:	2310      	movs	r3, #16
 800aca6:	e7af      	b.n	800ac08 <_printf_i+0xfc>
 800aca8:	6823      	ldr	r3, [r4, #0]
 800acaa:	f043 0320 	orr.w	r3, r3, #32
 800acae:	6023      	str	r3, [r4, #0]
 800acb0:	2378      	movs	r3, #120	; 0x78
 800acb2:	4828      	ldr	r0, [pc, #160]	; (800ad54 <_printf_i+0x248>)
 800acb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800acb8:	e7e3      	b.n	800ac82 <_printf_i+0x176>
 800acba:	0659      	lsls	r1, r3, #25
 800acbc:	bf48      	it	mi
 800acbe:	b2b6      	uxthmi	r6, r6
 800acc0:	e7e6      	b.n	800ac90 <_printf_i+0x184>
 800acc2:	4615      	mov	r5, r2
 800acc4:	e7bb      	b.n	800ac3e <_printf_i+0x132>
 800acc6:	682b      	ldr	r3, [r5, #0]
 800acc8:	6826      	ldr	r6, [r4, #0]
 800acca:	1d18      	adds	r0, r3, #4
 800accc:	6961      	ldr	r1, [r4, #20]
 800acce:	6028      	str	r0, [r5, #0]
 800acd0:	0635      	lsls	r5, r6, #24
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	d501      	bpl.n	800acda <_printf_i+0x1ce>
 800acd6:	6019      	str	r1, [r3, #0]
 800acd8:	e002      	b.n	800ace0 <_printf_i+0x1d4>
 800acda:	0670      	lsls	r0, r6, #25
 800acdc:	d5fb      	bpl.n	800acd6 <_printf_i+0x1ca>
 800acde:	8019      	strh	r1, [r3, #0]
 800ace0:	2300      	movs	r3, #0
 800ace2:	4615      	mov	r5, r2
 800ace4:	6123      	str	r3, [r4, #16]
 800ace6:	e7ba      	b.n	800ac5e <_printf_i+0x152>
 800ace8:	682b      	ldr	r3, [r5, #0]
 800acea:	2100      	movs	r1, #0
 800acec:	1d1a      	adds	r2, r3, #4
 800acee:	602a      	str	r2, [r5, #0]
 800acf0:	681d      	ldr	r5, [r3, #0]
 800acf2:	6862      	ldr	r2, [r4, #4]
 800acf4:	4628      	mov	r0, r5
 800acf6:	f000 fed5 	bl	800baa4 <memchr>
 800acfa:	b108      	cbz	r0, 800ad00 <_printf_i+0x1f4>
 800acfc:	1b40      	subs	r0, r0, r5
 800acfe:	6060      	str	r0, [r4, #4]
 800ad00:	6863      	ldr	r3, [r4, #4]
 800ad02:	6123      	str	r3, [r4, #16]
 800ad04:	2300      	movs	r3, #0
 800ad06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad0a:	e7a8      	b.n	800ac5e <_printf_i+0x152>
 800ad0c:	462a      	mov	r2, r5
 800ad0e:	4649      	mov	r1, r9
 800ad10:	4640      	mov	r0, r8
 800ad12:	6923      	ldr	r3, [r4, #16]
 800ad14:	47d0      	blx	sl
 800ad16:	3001      	adds	r0, #1
 800ad18:	d0ab      	beq.n	800ac72 <_printf_i+0x166>
 800ad1a:	6823      	ldr	r3, [r4, #0]
 800ad1c:	079b      	lsls	r3, r3, #30
 800ad1e:	d413      	bmi.n	800ad48 <_printf_i+0x23c>
 800ad20:	68e0      	ldr	r0, [r4, #12]
 800ad22:	9b03      	ldr	r3, [sp, #12]
 800ad24:	4298      	cmp	r0, r3
 800ad26:	bfb8      	it	lt
 800ad28:	4618      	movlt	r0, r3
 800ad2a:	e7a4      	b.n	800ac76 <_printf_i+0x16a>
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	4632      	mov	r2, r6
 800ad30:	4649      	mov	r1, r9
 800ad32:	4640      	mov	r0, r8
 800ad34:	47d0      	blx	sl
 800ad36:	3001      	adds	r0, #1
 800ad38:	d09b      	beq.n	800ac72 <_printf_i+0x166>
 800ad3a:	3501      	adds	r5, #1
 800ad3c:	68e3      	ldr	r3, [r4, #12]
 800ad3e:	9903      	ldr	r1, [sp, #12]
 800ad40:	1a5b      	subs	r3, r3, r1
 800ad42:	42ab      	cmp	r3, r5
 800ad44:	dcf2      	bgt.n	800ad2c <_printf_i+0x220>
 800ad46:	e7eb      	b.n	800ad20 <_printf_i+0x214>
 800ad48:	2500      	movs	r5, #0
 800ad4a:	f104 0619 	add.w	r6, r4, #25
 800ad4e:	e7f5      	b.n	800ad3c <_printf_i+0x230>
 800ad50:	0800d332 	.word	0x0800d332
 800ad54:	0800d343 	.word	0x0800d343

0800ad58 <siprintf>:
 800ad58:	b40e      	push	{r1, r2, r3}
 800ad5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad5e:	b500      	push	{lr}
 800ad60:	b09c      	sub	sp, #112	; 0x70
 800ad62:	ab1d      	add	r3, sp, #116	; 0x74
 800ad64:	9002      	str	r0, [sp, #8]
 800ad66:	9006      	str	r0, [sp, #24]
 800ad68:	9107      	str	r1, [sp, #28]
 800ad6a:	9104      	str	r1, [sp, #16]
 800ad6c:	4808      	ldr	r0, [pc, #32]	; (800ad90 <siprintf+0x38>)
 800ad6e:	4909      	ldr	r1, [pc, #36]	; (800ad94 <siprintf+0x3c>)
 800ad70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad74:	9105      	str	r1, [sp, #20]
 800ad76:	6800      	ldr	r0, [r0, #0]
 800ad78:	a902      	add	r1, sp, #8
 800ad7a:	9301      	str	r3, [sp, #4]
 800ad7c:	f001 fb7c 	bl	800c478 <_svfiprintf_r>
 800ad80:	2200      	movs	r2, #0
 800ad82:	9b02      	ldr	r3, [sp, #8]
 800ad84:	701a      	strb	r2, [r3, #0]
 800ad86:	b01c      	add	sp, #112	; 0x70
 800ad88:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad8c:	b003      	add	sp, #12
 800ad8e:	4770      	bx	lr
 800ad90:	2000006c 	.word	0x2000006c
 800ad94:	ffff0208 	.word	0xffff0208

0800ad98 <quorem>:
 800ad98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad9c:	6903      	ldr	r3, [r0, #16]
 800ad9e:	690c      	ldr	r4, [r1, #16]
 800ada0:	4607      	mov	r7, r0
 800ada2:	42a3      	cmp	r3, r4
 800ada4:	f2c0 8082 	blt.w	800aeac <quorem+0x114>
 800ada8:	3c01      	subs	r4, #1
 800adaa:	f100 0514 	add.w	r5, r0, #20
 800adae:	f101 0814 	add.w	r8, r1, #20
 800adb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800adb6:	9301      	str	r3, [sp, #4]
 800adb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800adbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800adc0:	3301      	adds	r3, #1
 800adc2:	429a      	cmp	r2, r3
 800adc4:	fbb2 f6f3 	udiv	r6, r2, r3
 800adc8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800adcc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800add0:	d331      	bcc.n	800ae36 <quorem+0x9e>
 800add2:	f04f 0e00 	mov.w	lr, #0
 800add6:	4640      	mov	r0, r8
 800add8:	46ac      	mov	ip, r5
 800adda:	46f2      	mov	sl, lr
 800addc:	f850 2b04 	ldr.w	r2, [r0], #4
 800ade0:	b293      	uxth	r3, r2
 800ade2:	fb06 e303 	mla	r3, r6, r3, lr
 800ade6:	0c12      	lsrs	r2, r2, #16
 800ade8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800adec:	b29b      	uxth	r3, r3
 800adee:	fb06 e202 	mla	r2, r6, r2, lr
 800adf2:	ebaa 0303 	sub.w	r3, sl, r3
 800adf6:	f8dc a000 	ldr.w	sl, [ip]
 800adfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800adfe:	fa1f fa8a 	uxth.w	sl, sl
 800ae02:	4453      	add	r3, sl
 800ae04:	f8dc a000 	ldr.w	sl, [ip]
 800ae08:	b292      	uxth	r2, r2
 800ae0a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ae0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae18:	4581      	cmp	r9, r0
 800ae1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae1e:	f84c 3b04 	str.w	r3, [ip], #4
 800ae22:	d2db      	bcs.n	800addc <quorem+0x44>
 800ae24:	f855 300b 	ldr.w	r3, [r5, fp]
 800ae28:	b92b      	cbnz	r3, 800ae36 <quorem+0x9e>
 800ae2a:	9b01      	ldr	r3, [sp, #4]
 800ae2c:	3b04      	subs	r3, #4
 800ae2e:	429d      	cmp	r5, r3
 800ae30:	461a      	mov	r2, r3
 800ae32:	d32f      	bcc.n	800ae94 <quorem+0xfc>
 800ae34:	613c      	str	r4, [r7, #16]
 800ae36:	4638      	mov	r0, r7
 800ae38:	f001 f8ce 	bl	800bfd8 <__mcmp>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	db25      	blt.n	800ae8c <quorem+0xf4>
 800ae40:	4628      	mov	r0, r5
 800ae42:	f04f 0c00 	mov.w	ip, #0
 800ae46:	3601      	adds	r6, #1
 800ae48:	f858 1b04 	ldr.w	r1, [r8], #4
 800ae4c:	f8d0 e000 	ldr.w	lr, [r0]
 800ae50:	b28b      	uxth	r3, r1
 800ae52:	ebac 0303 	sub.w	r3, ip, r3
 800ae56:	fa1f f28e 	uxth.w	r2, lr
 800ae5a:	4413      	add	r3, r2
 800ae5c:	0c0a      	lsrs	r2, r1, #16
 800ae5e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ae62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae6c:	45c1      	cmp	r9, r8
 800ae6e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ae72:	f840 3b04 	str.w	r3, [r0], #4
 800ae76:	d2e7      	bcs.n	800ae48 <quorem+0xb0>
 800ae78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae80:	b922      	cbnz	r2, 800ae8c <quorem+0xf4>
 800ae82:	3b04      	subs	r3, #4
 800ae84:	429d      	cmp	r5, r3
 800ae86:	461a      	mov	r2, r3
 800ae88:	d30a      	bcc.n	800aea0 <quorem+0x108>
 800ae8a:	613c      	str	r4, [r7, #16]
 800ae8c:	4630      	mov	r0, r6
 800ae8e:	b003      	add	sp, #12
 800ae90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae94:	6812      	ldr	r2, [r2, #0]
 800ae96:	3b04      	subs	r3, #4
 800ae98:	2a00      	cmp	r2, #0
 800ae9a:	d1cb      	bne.n	800ae34 <quorem+0x9c>
 800ae9c:	3c01      	subs	r4, #1
 800ae9e:	e7c6      	b.n	800ae2e <quorem+0x96>
 800aea0:	6812      	ldr	r2, [r2, #0]
 800aea2:	3b04      	subs	r3, #4
 800aea4:	2a00      	cmp	r2, #0
 800aea6:	d1f0      	bne.n	800ae8a <quorem+0xf2>
 800aea8:	3c01      	subs	r4, #1
 800aeaa:	e7eb      	b.n	800ae84 <quorem+0xec>
 800aeac:	2000      	movs	r0, #0
 800aeae:	e7ee      	b.n	800ae8e <quorem+0xf6>

0800aeb0 <_dtoa_r>:
 800aeb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb4:	4616      	mov	r6, r2
 800aeb6:	461f      	mov	r7, r3
 800aeb8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800aeba:	b099      	sub	sp, #100	; 0x64
 800aebc:	4605      	mov	r5, r0
 800aebe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800aec2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800aec6:	b974      	cbnz	r4, 800aee6 <_dtoa_r+0x36>
 800aec8:	2010      	movs	r0, #16
 800aeca:	f000 fde3 	bl	800ba94 <malloc>
 800aece:	4602      	mov	r2, r0
 800aed0:	6268      	str	r0, [r5, #36]	; 0x24
 800aed2:	b920      	cbnz	r0, 800aede <_dtoa_r+0x2e>
 800aed4:	21ea      	movs	r1, #234	; 0xea
 800aed6:	4ba8      	ldr	r3, [pc, #672]	; (800b178 <_dtoa_r+0x2c8>)
 800aed8:	48a8      	ldr	r0, [pc, #672]	; (800b17c <_dtoa_r+0x2cc>)
 800aeda:	f001 fbdd 	bl	800c698 <__assert_func>
 800aede:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aee2:	6004      	str	r4, [r0, #0]
 800aee4:	60c4      	str	r4, [r0, #12]
 800aee6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aee8:	6819      	ldr	r1, [r3, #0]
 800aeea:	b151      	cbz	r1, 800af02 <_dtoa_r+0x52>
 800aeec:	685a      	ldr	r2, [r3, #4]
 800aeee:	2301      	movs	r3, #1
 800aef0:	4093      	lsls	r3, r2
 800aef2:	604a      	str	r2, [r1, #4]
 800aef4:	608b      	str	r3, [r1, #8]
 800aef6:	4628      	mov	r0, r5
 800aef8:	f000 fe30 	bl	800bb5c <_Bfree>
 800aefc:	2200      	movs	r2, #0
 800aefe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af00:	601a      	str	r2, [r3, #0]
 800af02:	1e3b      	subs	r3, r7, #0
 800af04:	bfaf      	iteee	ge
 800af06:	2300      	movge	r3, #0
 800af08:	2201      	movlt	r2, #1
 800af0a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800af0e:	9305      	strlt	r3, [sp, #20]
 800af10:	bfa8      	it	ge
 800af12:	f8c8 3000 	strge.w	r3, [r8]
 800af16:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800af1a:	4b99      	ldr	r3, [pc, #612]	; (800b180 <_dtoa_r+0x2d0>)
 800af1c:	bfb8      	it	lt
 800af1e:	f8c8 2000 	strlt.w	r2, [r8]
 800af22:	ea33 0309 	bics.w	r3, r3, r9
 800af26:	d119      	bne.n	800af5c <_dtoa_r+0xac>
 800af28:	f242 730f 	movw	r3, #9999	; 0x270f
 800af2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800af2e:	6013      	str	r3, [r2, #0]
 800af30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af34:	4333      	orrs	r3, r6
 800af36:	f000 857f 	beq.w	800ba38 <_dtoa_r+0xb88>
 800af3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800af3c:	b953      	cbnz	r3, 800af54 <_dtoa_r+0xa4>
 800af3e:	4b91      	ldr	r3, [pc, #580]	; (800b184 <_dtoa_r+0x2d4>)
 800af40:	e022      	b.n	800af88 <_dtoa_r+0xd8>
 800af42:	4b91      	ldr	r3, [pc, #580]	; (800b188 <_dtoa_r+0x2d8>)
 800af44:	9303      	str	r3, [sp, #12]
 800af46:	3308      	adds	r3, #8
 800af48:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800af4a:	6013      	str	r3, [r2, #0]
 800af4c:	9803      	ldr	r0, [sp, #12]
 800af4e:	b019      	add	sp, #100	; 0x64
 800af50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af54:	4b8b      	ldr	r3, [pc, #556]	; (800b184 <_dtoa_r+0x2d4>)
 800af56:	9303      	str	r3, [sp, #12]
 800af58:	3303      	adds	r3, #3
 800af5a:	e7f5      	b.n	800af48 <_dtoa_r+0x98>
 800af5c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800af60:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800af64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af68:	2200      	movs	r2, #0
 800af6a:	2300      	movs	r3, #0
 800af6c:	f7f5 fd1c 	bl	80009a8 <__aeabi_dcmpeq>
 800af70:	4680      	mov	r8, r0
 800af72:	b158      	cbz	r0, 800af8c <_dtoa_r+0xdc>
 800af74:	2301      	movs	r3, #1
 800af76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800af78:	6013      	str	r3, [r2, #0]
 800af7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	f000 8558 	beq.w	800ba32 <_dtoa_r+0xb82>
 800af82:	4882      	ldr	r0, [pc, #520]	; (800b18c <_dtoa_r+0x2dc>)
 800af84:	6018      	str	r0, [r3, #0]
 800af86:	1e43      	subs	r3, r0, #1
 800af88:	9303      	str	r3, [sp, #12]
 800af8a:	e7df      	b.n	800af4c <_dtoa_r+0x9c>
 800af8c:	ab16      	add	r3, sp, #88	; 0x58
 800af8e:	9301      	str	r3, [sp, #4]
 800af90:	ab17      	add	r3, sp, #92	; 0x5c
 800af92:	9300      	str	r3, [sp, #0]
 800af94:	4628      	mov	r0, r5
 800af96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800af9a:	f001 f8c5 	bl	800c128 <__d2b>
 800af9e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800afa2:	4683      	mov	fp, r0
 800afa4:	2c00      	cmp	r4, #0
 800afa6:	d07f      	beq.n	800b0a8 <_dtoa_r+0x1f8>
 800afa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800afac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800afb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afb6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800afba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800afbe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800afc2:	2200      	movs	r2, #0
 800afc4:	4b72      	ldr	r3, [pc, #456]	; (800b190 <_dtoa_r+0x2e0>)
 800afc6:	f7f5 f8cf 	bl	8000168 <__aeabi_dsub>
 800afca:	a365      	add	r3, pc, #404	; (adr r3, 800b160 <_dtoa_r+0x2b0>)
 800afcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd0:	f7f5 fa82 	bl	80004d8 <__aeabi_dmul>
 800afd4:	a364      	add	r3, pc, #400	; (adr r3, 800b168 <_dtoa_r+0x2b8>)
 800afd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afda:	f7f5 f8c7 	bl	800016c <__adddf3>
 800afde:	4606      	mov	r6, r0
 800afe0:	4620      	mov	r0, r4
 800afe2:	460f      	mov	r7, r1
 800afe4:	f7f5 fa0e 	bl	8000404 <__aeabi_i2d>
 800afe8:	a361      	add	r3, pc, #388	; (adr r3, 800b170 <_dtoa_r+0x2c0>)
 800afea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afee:	f7f5 fa73 	bl	80004d8 <__aeabi_dmul>
 800aff2:	4602      	mov	r2, r0
 800aff4:	460b      	mov	r3, r1
 800aff6:	4630      	mov	r0, r6
 800aff8:	4639      	mov	r1, r7
 800affa:	f7f5 f8b7 	bl	800016c <__adddf3>
 800affe:	4606      	mov	r6, r0
 800b000:	460f      	mov	r7, r1
 800b002:	f7f5 fd19 	bl	8000a38 <__aeabi_d2iz>
 800b006:	2200      	movs	r2, #0
 800b008:	4682      	mov	sl, r0
 800b00a:	2300      	movs	r3, #0
 800b00c:	4630      	mov	r0, r6
 800b00e:	4639      	mov	r1, r7
 800b010:	f7f5 fcd4 	bl	80009bc <__aeabi_dcmplt>
 800b014:	b148      	cbz	r0, 800b02a <_dtoa_r+0x17a>
 800b016:	4650      	mov	r0, sl
 800b018:	f7f5 f9f4 	bl	8000404 <__aeabi_i2d>
 800b01c:	4632      	mov	r2, r6
 800b01e:	463b      	mov	r3, r7
 800b020:	f7f5 fcc2 	bl	80009a8 <__aeabi_dcmpeq>
 800b024:	b908      	cbnz	r0, 800b02a <_dtoa_r+0x17a>
 800b026:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b02a:	f1ba 0f16 	cmp.w	sl, #22
 800b02e:	d858      	bhi.n	800b0e2 <_dtoa_r+0x232>
 800b030:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b034:	4b57      	ldr	r3, [pc, #348]	; (800b194 <_dtoa_r+0x2e4>)
 800b036:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03e:	f7f5 fcbd 	bl	80009bc <__aeabi_dcmplt>
 800b042:	2800      	cmp	r0, #0
 800b044:	d04f      	beq.n	800b0e6 <_dtoa_r+0x236>
 800b046:	2300      	movs	r3, #0
 800b048:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b04c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b04e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b050:	1b1c      	subs	r4, r3, r4
 800b052:	1e63      	subs	r3, r4, #1
 800b054:	9309      	str	r3, [sp, #36]	; 0x24
 800b056:	bf49      	itett	mi
 800b058:	f1c4 0301 	rsbmi	r3, r4, #1
 800b05c:	2300      	movpl	r3, #0
 800b05e:	9306      	strmi	r3, [sp, #24]
 800b060:	2300      	movmi	r3, #0
 800b062:	bf54      	ite	pl
 800b064:	9306      	strpl	r3, [sp, #24]
 800b066:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b068:	f1ba 0f00 	cmp.w	sl, #0
 800b06c:	db3d      	blt.n	800b0ea <_dtoa_r+0x23a>
 800b06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b070:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b074:	4453      	add	r3, sl
 800b076:	9309      	str	r3, [sp, #36]	; 0x24
 800b078:	2300      	movs	r3, #0
 800b07a:	930a      	str	r3, [sp, #40]	; 0x28
 800b07c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b07e:	2b09      	cmp	r3, #9
 800b080:	f200 808c 	bhi.w	800b19c <_dtoa_r+0x2ec>
 800b084:	2b05      	cmp	r3, #5
 800b086:	bfc4      	itt	gt
 800b088:	3b04      	subgt	r3, #4
 800b08a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b08c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b08e:	bfc8      	it	gt
 800b090:	2400      	movgt	r4, #0
 800b092:	f1a3 0302 	sub.w	r3, r3, #2
 800b096:	bfd8      	it	le
 800b098:	2401      	movle	r4, #1
 800b09a:	2b03      	cmp	r3, #3
 800b09c:	f200 808a 	bhi.w	800b1b4 <_dtoa_r+0x304>
 800b0a0:	e8df f003 	tbb	[pc, r3]
 800b0a4:	5b4d4f2d 	.word	0x5b4d4f2d
 800b0a8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b0ac:	441c      	add	r4, r3
 800b0ae:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b0b2:	2b20      	cmp	r3, #32
 800b0b4:	bfc3      	ittte	gt
 800b0b6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b0ba:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b0be:	fa09 f303 	lslgt.w	r3, r9, r3
 800b0c2:	f1c3 0320 	rsble	r3, r3, #32
 800b0c6:	bfc6      	itte	gt
 800b0c8:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b0cc:	4318      	orrgt	r0, r3
 800b0ce:	fa06 f003 	lslle.w	r0, r6, r3
 800b0d2:	f7f5 f987 	bl	80003e4 <__aeabi_ui2d>
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b0dc:	3c01      	subs	r4, #1
 800b0de:	9313      	str	r3, [sp, #76]	; 0x4c
 800b0e0:	e76f      	b.n	800afc2 <_dtoa_r+0x112>
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e7b2      	b.n	800b04c <_dtoa_r+0x19c>
 800b0e6:	900f      	str	r0, [sp, #60]	; 0x3c
 800b0e8:	e7b1      	b.n	800b04e <_dtoa_r+0x19e>
 800b0ea:	9b06      	ldr	r3, [sp, #24]
 800b0ec:	eba3 030a 	sub.w	r3, r3, sl
 800b0f0:	9306      	str	r3, [sp, #24]
 800b0f2:	f1ca 0300 	rsb	r3, sl, #0
 800b0f6:	930a      	str	r3, [sp, #40]	; 0x28
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	930e      	str	r3, [sp, #56]	; 0x38
 800b0fc:	e7be      	b.n	800b07c <_dtoa_r+0x1cc>
 800b0fe:	2300      	movs	r3, #0
 800b100:	930b      	str	r3, [sp, #44]	; 0x2c
 800b102:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b104:	2b00      	cmp	r3, #0
 800b106:	dc58      	bgt.n	800b1ba <_dtoa_r+0x30a>
 800b108:	f04f 0901 	mov.w	r9, #1
 800b10c:	464b      	mov	r3, r9
 800b10e:	f8cd 9020 	str.w	r9, [sp, #32]
 800b112:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800b116:	2200      	movs	r2, #0
 800b118:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b11a:	6042      	str	r2, [r0, #4]
 800b11c:	2204      	movs	r2, #4
 800b11e:	f102 0614 	add.w	r6, r2, #20
 800b122:	429e      	cmp	r6, r3
 800b124:	6841      	ldr	r1, [r0, #4]
 800b126:	d94e      	bls.n	800b1c6 <_dtoa_r+0x316>
 800b128:	4628      	mov	r0, r5
 800b12a:	f000 fcd7 	bl	800badc <_Balloc>
 800b12e:	9003      	str	r0, [sp, #12]
 800b130:	2800      	cmp	r0, #0
 800b132:	d14c      	bne.n	800b1ce <_dtoa_r+0x31e>
 800b134:	4602      	mov	r2, r0
 800b136:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b13a:	4b17      	ldr	r3, [pc, #92]	; (800b198 <_dtoa_r+0x2e8>)
 800b13c:	e6cc      	b.n	800aed8 <_dtoa_r+0x28>
 800b13e:	2301      	movs	r3, #1
 800b140:	e7de      	b.n	800b100 <_dtoa_r+0x250>
 800b142:	2300      	movs	r3, #0
 800b144:	930b      	str	r3, [sp, #44]	; 0x2c
 800b146:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b148:	eb0a 0903 	add.w	r9, sl, r3
 800b14c:	f109 0301 	add.w	r3, r9, #1
 800b150:	2b01      	cmp	r3, #1
 800b152:	9308      	str	r3, [sp, #32]
 800b154:	bfb8      	it	lt
 800b156:	2301      	movlt	r3, #1
 800b158:	e7dd      	b.n	800b116 <_dtoa_r+0x266>
 800b15a:	2301      	movs	r3, #1
 800b15c:	e7f2      	b.n	800b144 <_dtoa_r+0x294>
 800b15e:	bf00      	nop
 800b160:	636f4361 	.word	0x636f4361
 800b164:	3fd287a7 	.word	0x3fd287a7
 800b168:	8b60c8b3 	.word	0x8b60c8b3
 800b16c:	3fc68a28 	.word	0x3fc68a28
 800b170:	509f79fb 	.word	0x509f79fb
 800b174:	3fd34413 	.word	0x3fd34413
 800b178:	0800d361 	.word	0x0800d361
 800b17c:	0800d378 	.word	0x0800d378
 800b180:	7ff00000 	.word	0x7ff00000
 800b184:	0800d35d 	.word	0x0800d35d
 800b188:	0800d354 	.word	0x0800d354
 800b18c:	0800d331 	.word	0x0800d331
 800b190:	3ff80000 	.word	0x3ff80000
 800b194:	0800d468 	.word	0x0800d468
 800b198:	0800d3d3 	.word	0x0800d3d3
 800b19c:	2401      	movs	r4, #1
 800b19e:	2300      	movs	r3, #0
 800b1a0:	940b      	str	r4, [sp, #44]	; 0x2c
 800b1a2:	9322      	str	r3, [sp, #136]	; 0x88
 800b1a4:	f04f 39ff 	mov.w	r9, #4294967295
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	2312      	movs	r3, #18
 800b1ac:	f8cd 9020 	str.w	r9, [sp, #32]
 800b1b0:	9223      	str	r2, [sp, #140]	; 0x8c
 800b1b2:	e7b0      	b.n	800b116 <_dtoa_r+0x266>
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1b8:	e7f4      	b.n	800b1a4 <_dtoa_r+0x2f4>
 800b1ba:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800b1be:	464b      	mov	r3, r9
 800b1c0:	f8cd 9020 	str.w	r9, [sp, #32]
 800b1c4:	e7a7      	b.n	800b116 <_dtoa_r+0x266>
 800b1c6:	3101      	adds	r1, #1
 800b1c8:	6041      	str	r1, [r0, #4]
 800b1ca:	0052      	lsls	r2, r2, #1
 800b1cc:	e7a7      	b.n	800b11e <_dtoa_r+0x26e>
 800b1ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b1d0:	9a03      	ldr	r2, [sp, #12]
 800b1d2:	601a      	str	r2, [r3, #0]
 800b1d4:	9b08      	ldr	r3, [sp, #32]
 800b1d6:	2b0e      	cmp	r3, #14
 800b1d8:	f200 80a8 	bhi.w	800b32c <_dtoa_r+0x47c>
 800b1dc:	2c00      	cmp	r4, #0
 800b1de:	f000 80a5 	beq.w	800b32c <_dtoa_r+0x47c>
 800b1e2:	f1ba 0f00 	cmp.w	sl, #0
 800b1e6:	dd34      	ble.n	800b252 <_dtoa_r+0x3a2>
 800b1e8:	4a9a      	ldr	r2, [pc, #616]	; (800b454 <_dtoa_r+0x5a4>)
 800b1ea:	f00a 030f 	and.w	r3, sl, #15
 800b1ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b1f2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b1f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b1fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b1fe:	ea4f 142a 	mov.w	r4, sl, asr #4
 800b202:	d016      	beq.n	800b232 <_dtoa_r+0x382>
 800b204:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b208:	4b93      	ldr	r3, [pc, #588]	; (800b458 <_dtoa_r+0x5a8>)
 800b20a:	2703      	movs	r7, #3
 800b20c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b210:	f7f5 fa8c 	bl	800072c <__aeabi_ddiv>
 800b214:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b218:	f004 040f 	and.w	r4, r4, #15
 800b21c:	4e8e      	ldr	r6, [pc, #568]	; (800b458 <_dtoa_r+0x5a8>)
 800b21e:	b954      	cbnz	r4, 800b236 <_dtoa_r+0x386>
 800b220:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b228:	f7f5 fa80 	bl	800072c <__aeabi_ddiv>
 800b22c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b230:	e029      	b.n	800b286 <_dtoa_r+0x3d6>
 800b232:	2702      	movs	r7, #2
 800b234:	e7f2      	b.n	800b21c <_dtoa_r+0x36c>
 800b236:	07e1      	lsls	r1, r4, #31
 800b238:	d508      	bpl.n	800b24c <_dtoa_r+0x39c>
 800b23a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b23e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b242:	f7f5 f949 	bl	80004d8 <__aeabi_dmul>
 800b246:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b24a:	3701      	adds	r7, #1
 800b24c:	1064      	asrs	r4, r4, #1
 800b24e:	3608      	adds	r6, #8
 800b250:	e7e5      	b.n	800b21e <_dtoa_r+0x36e>
 800b252:	f000 80a5 	beq.w	800b3a0 <_dtoa_r+0x4f0>
 800b256:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b25a:	f1ca 0400 	rsb	r4, sl, #0
 800b25e:	4b7d      	ldr	r3, [pc, #500]	; (800b454 <_dtoa_r+0x5a4>)
 800b260:	f004 020f 	and.w	r2, r4, #15
 800b264:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26c:	f7f5 f934 	bl	80004d8 <__aeabi_dmul>
 800b270:	2702      	movs	r7, #2
 800b272:	2300      	movs	r3, #0
 800b274:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b278:	4e77      	ldr	r6, [pc, #476]	; (800b458 <_dtoa_r+0x5a8>)
 800b27a:	1124      	asrs	r4, r4, #4
 800b27c:	2c00      	cmp	r4, #0
 800b27e:	f040 8084 	bne.w	800b38a <_dtoa_r+0x4da>
 800b282:	2b00      	cmp	r3, #0
 800b284:	d1d2      	bne.n	800b22c <_dtoa_r+0x37c>
 800b286:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f000 808b 	beq.w	800b3a4 <_dtoa_r+0x4f4>
 800b28e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b292:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b296:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b29a:	2200      	movs	r2, #0
 800b29c:	4b6f      	ldr	r3, [pc, #444]	; (800b45c <_dtoa_r+0x5ac>)
 800b29e:	f7f5 fb8d 	bl	80009bc <__aeabi_dcmplt>
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	d07e      	beq.n	800b3a4 <_dtoa_r+0x4f4>
 800b2a6:	9b08      	ldr	r3, [sp, #32]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d07b      	beq.n	800b3a4 <_dtoa_r+0x4f4>
 800b2ac:	f1b9 0f00 	cmp.w	r9, #0
 800b2b0:	dd38      	ble.n	800b324 <_dtoa_r+0x474>
 800b2b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	4b69      	ldr	r3, [pc, #420]	; (800b460 <_dtoa_r+0x5b0>)
 800b2ba:	f7f5 f90d 	bl	80004d8 <__aeabi_dmul>
 800b2be:	464c      	mov	r4, r9
 800b2c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2c4:	f10a 38ff 	add.w	r8, sl, #4294967295
 800b2c8:	3701      	adds	r7, #1
 800b2ca:	4638      	mov	r0, r7
 800b2cc:	f7f5 f89a 	bl	8000404 <__aeabi_i2d>
 800b2d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2d4:	f7f5 f900 	bl	80004d8 <__aeabi_dmul>
 800b2d8:	2200      	movs	r2, #0
 800b2da:	4b62      	ldr	r3, [pc, #392]	; (800b464 <_dtoa_r+0x5b4>)
 800b2dc:	f7f4 ff46 	bl	800016c <__adddf3>
 800b2e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b2e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b2e8:	9611      	str	r6, [sp, #68]	; 0x44
 800b2ea:	2c00      	cmp	r4, #0
 800b2ec:	d15d      	bne.n	800b3aa <_dtoa_r+0x4fa>
 800b2ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	4b5c      	ldr	r3, [pc, #368]	; (800b468 <_dtoa_r+0x5b8>)
 800b2f6:	f7f4 ff37 	bl	8000168 <__aeabi_dsub>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b302:	4633      	mov	r3, r6
 800b304:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b306:	f7f5 fb77 	bl	80009f8 <__aeabi_dcmpgt>
 800b30a:	2800      	cmp	r0, #0
 800b30c:	f040 829c 	bne.w	800b848 <_dtoa_r+0x998>
 800b310:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b314:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b316:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b31a:	f7f5 fb4f 	bl	80009bc <__aeabi_dcmplt>
 800b31e:	2800      	cmp	r0, #0
 800b320:	f040 8290 	bne.w	800b844 <_dtoa_r+0x994>
 800b324:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b328:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b32c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b32e:	2b00      	cmp	r3, #0
 800b330:	f2c0 8152 	blt.w	800b5d8 <_dtoa_r+0x728>
 800b334:	f1ba 0f0e 	cmp.w	sl, #14
 800b338:	f300 814e 	bgt.w	800b5d8 <_dtoa_r+0x728>
 800b33c:	4b45      	ldr	r3, [pc, #276]	; (800b454 <_dtoa_r+0x5a4>)
 800b33e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b342:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b346:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b34a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	f280 80db 	bge.w	800b508 <_dtoa_r+0x658>
 800b352:	9b08      	ldr	r3, [sp, #32]
 800b354:	2b00      	cmp	r3, #0
 800b356:	f300 80d7 	bgt.w	800b508 <_dtoa_r+0x658>
 800b35a:	f040 8272 	bne.w	800b842 <_dtoa_r+0x992>
 800b35e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b362:	2200      	movs	r2, #0
 800b364:	4b40      	ldr	r3, [pc, #256]	; (800b468 <_dtoa_r+0x5b8>)
 800b366:	f7f5 f8b7 	bl	80004d8 <__aeabi_dmul>
 800b36a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b36e:	f7f5 fb39 	bl	80009e4 <__aeabi_dcmpge>
 800b372:	9c08      	ldr	r4, [sp, #32]
 800b374:	4626      	mov	r6, r4
 800b376:	2800      	cmp	r0, #0
 800b378:	f040 8248 	bne.w	800b80c <_dtoa_r+0x95c>
 800b37c:	2331      	movs	r3, #49	; 0x31
 800b37e:	9f03      	ldr	r7, [sp, #12]
 800b380:	f10a 0a01 	add.w	sl, sl, #1
 800b384:	f807 3b01 	strb.w	r3, [r7], #1
 800b388:	e244      	b.n	800b814 <_dtoa_r+0x964>
 800b38a:	07e2      	lsls	r2, r4, #31
 800b38c:	d505      	bpl.n	800b39a <_dtoa_r+0x4ea>
 800b38e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b392:	f7f5 f8a1 	bl	80004d8 <__aeabi_dmul>
 800b396:	2301      	movs	r3, #1
 800b398:	3701      	adds	r7, #1
 800b39a:	1064      	asrs	r4, r4, #1
 800b39c:	3608      	adds	r6, #8
 800b39e:	e76d      	b.n	800b27c <_dtoa_r+0x3cc>
 800b3a0:	2702      	movs	r7, #2
 800b3a2:	e770      	b.n	800b286 <_dtoa_r+0x3d6>
 800b3a4:	46d0      	mov	r8, sl
 800b3a6:	9c08      	ldr	r4, [sp, #32]
 800b3a8:	e78f      	b.n	800b2ca <_dtoa_r+0x41a>
 800b3aa:	9903      	ldr	r1, [sp, #12]
 800b3ac:	4b29      	ldr	r3, [pc, #164]	; (800b454 <_dtoa_r+0x5a4>)
 800b3ae:	4421      	add	r1, r4
 800b3b0:	9112      	str	r1, [sp, #72]	; 0x48
 800b3b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b3b8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b3bc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b3c0:	2900      	cmp	r1, #0
 800b3c2:	d055      	beq.n	800b470 <_dtoa_r+0x5c0>
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	4929      	ldr	r1, [pc, #164]	; (800b46c <_dtoa_r+0x5bc>)
 800b3c8:	f7f5 f9b0 	bl	800072c <__aeabi_ddiv>
 800b3cc:	463b      	mov	r3, r7
 800b3ce:	4632      	mov	r2, r6
 800b3d0:	f7f4 feca 	bl	8000168 <__aeabi_dsub>
 800b3d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b3d8:	9f03      	ldr	r7, [sp, #12]
 800b3da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3de:	f7f5 fb2b 	bl	8000a38 <__aeabi_d2iz>
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	f7f5 f80e 	bl	8000404 <__aeabi_i2d>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3f0:	f7f4 feba 	bl	8000168 <__aeabi_dsub>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	3430      	adds	r4, #48	; 0x30
 800b3fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b3fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b402:	f807 4b01 	strb.w	r4, [r7], #1
 800b406:	f7f5 fad9 	bl	80009bc <__aeabi_dcmplt>
 800b40a:	2800      	cmp	r0, #0
 800b40c:	d174      	bne.n	800b4f8 <_dtoa_r+0x648>
 800b40e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b412:	2000      	movs	r0, #0
 800b414:	4911      	ldr	r1, [pc, #68]	; (800b45c <_dtoa_r+0x5ac>)
 800b416:	f7f4 fea7 	bl	8000168 <__aeabi_dsub>
 800b41a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b41e:	f7f5 facd 	bl	80009bc <__aeabi_dcmplt>
 800b422:	2800      	cmp	r0, #0
 800b424:	f040 80b7 	bne.w	800b596 <_dtoa_r+0x6e6>
 800b428:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b42a:	429f      	cmp	r7, r3
 800b42c:	f43f af7a 	beq.w	800b324 <_dtoa_r+0x474>
 800b430:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b434:	2200      	movs	r2, #0
 800b436:	4b0a      	ldr	r3, [pc, #40]	; (800b460 <_dtoa_r+0x5b0>)
 800b438:	f7f5 f84e 	bl	80004d8 <__aeabi_dmul>
 800b43c:	2200      	movs	r2, #0
 800b43e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b442:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b446:	4b06      	ldr	r3, [pc, #24]	; (800b460 <_dtoa_r+0x5b0>)
 800b448:	f7f5 f846 	bl	80004d8 <__aeabi_dmul>
 800b44c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b450:	e7c3      	b.n	800b3da <_dtoa_r+0x52a>
 800b452:	bf00      	nop
 800b454:	0800d468 	.word	0x0800d468
 800b458:	0800d440 	.word	0x0800d440
 800b45c:	3ff00000 	.word	0x3ff00000
 800b460:	40240000 	.word	0x40240000
 800b464:	401c0000 	.word	0x401c0000
 800b468:	40140000 	.word	0x40140000
 800b46c:	3fe00000 	.word	0x3fe00000
 800b470:	4630      	mov	r0, r6
 800b472:	4639      	mov	r1, r7
 800b474:	f7f5 f830 	bl	80004d8 <__aeabi_dmul>
 800b478:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b47a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b47e:	9c03      	ldr	r4, [sp, #12]
 800b480:	9314      	str	r3, [sp, #80]	; 0x50
 800b482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b486:	f7f5 fad7 	bl	8000a38 <__aeabi_d2iz>
 800b48a:	9015      	str	r0, [sp, #84]	; 0x54
 800b48c:	f7f4 ffba 	bl	8000404 <__aeabi_i2d>
 800b490:	4602      	mov	r2, r0
 800b492:	460b      	mov	r3, r1
 800b494:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b498:	f7f4 fe66 	bl	8000168 <__aeabi_dsub>
 800b49c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b49e:	4606      	mov	r6, r0
 800b4a0:	3330      	adds	r3, #48	; 0x30
 800b4a2:	f804 3b01 	strb.w	r3, [r4], #1
 800b4a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4a8:	460f      	mov	r7, r1
 800b4aa:	429c      	cmp	r4, r3
 800b4ac:	f04f 0200 	mov.w	r2, #0
 800b4b0:	d124      	bne.n	800b4fc <_dtoa_r+0x64c>
 800b4b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b4b6:	4bb0      	ldr	r3, [pc, #704]	; (800b778 <_dtoa_r+0x8c8>)
 800b4b8:	f7f4 fe58 	bl	800016c <__adddf3>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	460b      	mov	r3, r1
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	4639      	mov	r1, r7
 800b4c4:	f7f5 fa98 	bl	80009f8 <__aeabi_dcmpgt>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	d163      	bne.n	800b594 <_dtoa_r+0x6e4>
 800b4cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	49a9      	ldr	r1, [pc, #676]	; (800b778 <_dtoa_r+0x8c8>)
 800b4d4:	f7f4 fe48 	bl	8000168 <__aeabi_dsub>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	460b      	mov	r3, r1
 800b4dc:	4630      	mov	r0, r6
 800b4de:	4639      	mov	r1, r7
 800b4e0:	f7f5 fa6c 	bl	80009bc <__aeabi_dcmplt>
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	f43f af1d 	beq.w	800b324 <_dtoa_r+0x474>
 800b4ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b4ec:	1e7b      	subs	r3, r7, #1
 800b4ee:	9314      	str	r3, [sp, #80]	; 0x50
 800b4f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b4f4:	2b30      	cmp	r3, #48	; 0x30
 800b4f6:	d0f8      	beq.n	800b4ea <_dtoa_r+0x63a>
 800b4f8:	46c2      	mov	sl, r8
 800b4fa:	e03b      	b.n	800b574 <_dtoa_r+0x6c4>
 800b4fc:	4b9f      	ldr	r3, [pc, #636]	; (800b77c <_dtoa_r+0x8cc>)
 800b4fe:	f7f4 ffeb 	bl	80004d8 <__aeabi_dmul>
 800b502:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b506:	e7bc      	b.n	800b482 <_dtoa_r+0x5d2>
 800b508:	9f03      	ldr	r7, [sp, #12]
 800b50a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b50e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b512:	4640      	mov	r0, r8
 800b514:	4649      	mov	r1, r9
 800b516:	f7f5 f909 	bl	800072c <__aeabi_ddiv>
 800b51a:	f7f5 fa8d 	bl	8000a38 <__aeabi_d2iz>
 800b51e:	4604      	mov	r4, r0
 800b520:	f7f4 ff70 	bl	8000404 <__aeabi_i2d>
 800b524:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b528:	f7f4 ffd6 	bl	80004d8 <__aeabi_dmul>
 800b52c:	4602      	mov	r2, r0
 800b52e:	460b      	mov	r3, r1
 800b530:	4640      	mov	r0, r8
 800b532:	4649      	mov	r1, r9
 800b534:	f7f4 fe18 	bl	8000168 <__aeabi_dsub>
 800b538:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b53c:	f807 6b01 	strb.w	r6, [r7], #1
 800b540:	9e03      	ldr	r6, [sp, #12]
 800b542:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b546:	1bbe      	subs	r6, r7, r6
 800b548:	45b4      	cmp	ip, r6
 800b54a:	4602      	mov	r2, r0
 800b54c:	460b      	mov	r3, r1
 800b54e:	d136      	bne.n	800b5be <_dtoa_r+0x70e>
 800b550:	f7f4 fe0c 	bl	800016c <__adddf3>
 800b554:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b558:	4680      	mov	r8, r0
 800b55a:	4689      	mov	r9, r1
 800b55c:	f7f5 fa4c 	bl	80009f8 <__aeabi_dcmpgt>
 800b560:	bb58      	cbnz	r0, 800b5ba <_dtoa_r+0x70a>
 800b562:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b566:	4640      	mov	r0, r8
 800b568:	4649      	mov	r1, r9
 800b56a:	f7f5 fa1d 	bl	80009a8 <__aeabi_dcmpeq>
 800b56e:	b108      	cbz	r0, 800b574 <_dtoa_r+0x6c4>
 800b570:	07e1      	lsls	r1, r4, #31
 800b572:	d422      	bmi.n	800b5ba <_dtoa_r+0x70a>
 800b574:	4628      	mov	r0, r5
 800b576:	4659      	mov	r1, fp
 800b578:	f000 faf0 	bl	800bb5c <_Bfree>
 800b57c:	2300      	movs	r3, #0
 800b57e:	703b      	strb	r3, [r7, #0]
 800b580:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b582:	f10a 0001 	add.w	r0, sl, #1
 800b586:	6018      	str	r0, [r3, #0]
 800b588:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	f43f acde 	beq.w	800af4c <_dtoa_r+0x9c>
 800b590:	601f      	str	r7, [r3, #0]
 800b592:	e4db      	b.n	800af4c <_dtoa_r+0x9c>
 800b594:	4627      	mov	r7, r4
 800b596:	463b      	mov	r3, r7
 800b598:	461f      	mov	r7, r3
 800b59a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b59e:	2a39      	cmp	r2, #57	; 0x39
 800b5a0:	d107      	bne.n	800b5b2 <_dtoa_r+0x702>
 800b5a2:	9a03      	ldr	r2, [sp, #12]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d1f7      	bne.n	800b598 <_dtoa_r+0x6e8>
 800b5a8:	2230      	movs	r2, #48	; 0x30
 800b5aa:	9903      	ldr	r1, [sp, #12]
 800b5ac:	f108 0801 	add.w	r8, r8, #1
 800b5b0:	700a      	strb	r2, [r1, #0]
 800b5b2:	781a      	ldrb	r2, [r3, #0]
 800b5b4:	3201      	adds	r2, #1
 800b5b6:	701a      	strb	r2, [r3, #0]
 800b5b8:	e79e      	b.n	800b4f8 <_dtoa_r+0x648>
 800b5ba:	46d0      	mov	r8, sl
 800b5bc:	e7eb      	b.n	800b596 <_dtoa_r+0x6e6>
 800b5be:	2200      	movs	r2, #0
 800b5c0:	4b6e      	ldr	r3, [pc, #440]	; (800b77c <_dtoa_r+0x8cc>)
 800b5c2:	f7f4 ff89 	bl	80004d8 <__aeabi_dmul>
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	4680      	mov	r8, r0
 800b5cc:	4689      	mov	r9, r1
 800b5ce:	f7f5 f9eb 	bl	80009a8 <__aeabi_dcmpeq>
 800b5d2:	2800      	cmp	r0, #0
 800b5d4:	d09b      	beq.n	800b50e <_dtoa_r+0x65e>
 800b5d6:	e7cd      	b.n	800b574 <_dtoa_r+0x6c4>
 800b5d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5da:	2a00      	cmp	r2, #0
 800b5dc:	f000 80d0 	beq.w	800b780 <_dtoa_r+0x8d0>
 800b5e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b5e2:	2a01      	cmp	r2, #1
 800b5e4:	f300 80ae 	bgt.w	800b744 <_dtoa_r+0x894>
 800b5e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b5ea:	2a00      	cmp	r2, #0
 800b5ec:	f000 80a6 	beq.w	800b73c <_dtoa_r+0x88c>
 800b5f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b5f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b5f6:	9f06      	ldr	r7, [sp, #24]
 800b5f8:	9a06      	ldr	r2, [sp, #24]
 800b5fa:	2101      	movs	r1, #1
 800b5fc:	441a      	add	r2, r3
 800b5fe:	9206      	str	r2, [sp, #24]
 800b600:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b602:	4628      	mov	r0, r5
 800b604:	441a      	add	r2, r3
 800b606:	9209      	str	r2, [sp, #36]	; 0x24
 800b608:	f000 fb5e 	bl	800bcc8 <__i2b>
 800b60c:	4606      	mov	r6, r0
 800b60e:	2f00      	cmp	r7, #0
 800b610:	dd0c      	ble.n	800b62c <_dtoa_r+0x77c>
 800b612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b614:	2b00      	cmp	r3, #0
 800b616:	dd09      	ble.n	800b62c <_dtoa_r+0x77c>
 800b618:	42bb      	cmp	r3, r7
 800b61a:	bfa8      	it	ge
 800b61c:	463b      	movge	r3, r7
 800b61e:	9a06      	ldr	r2, [sp, #24]
 800b620:	1aff      	subs	r7, r7, r3
 800b622:	1ad2      	subs	r2, r2, r3
 800b624:	9206      	str	r2, [sp, #24]
 800b626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b628:	1ad3      	subs	r3, r2, r3
 800b62a:	9309      	str	r3, [sp, #36]	; 0x24
 800b62c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b62e:	b1f3      	cbz	r3, 800b66e <_dtoa_r+0x7be>
 800b630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b632:	2b00      	cmp	r3, #0
 800b634:	f000 80a8 	beq.w	800b788 <_dtoa_r+0x8d8>
 800b638:	2c00      	cmp	r4, #0
 800b63a:	dd10      	ble.n	800b65e <_dtoa_r+0x7ae>
 800b63c:	4631      	mov	r1, r6
 800b63e:	4622      	mov	r2, r4
 800b640:	4628      	mov	r0, r5
 800b642:	f000 fbff 	bl	800be44 <__pow5mult>
 800b646:	465a      	mov	r2, fp
 800b648:	4601      	mov	r1, r0
 800b64a:	4606      	mov	r6, r0
 800b64c:	4628      	mov	r0, r5
 800b64e:	f000 fb51 	bl	800bcf4 <__multiply>
 800b652:	4680      	mov	r8, r0
 800b654:	4659      	mov	r1, fp
 800b656:	4628      	mov	r0, r5
 800b658:	f000 fa80 	bl	800bb5c <_Bfree>
 800b65c:	46c3      	mov	fp, r8
 800b65e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b660:	1b1a      	subs	r2, r3, r4
 800b662:	d004      	beq.n	800b66e <_dtoa_r+0x7be>
 800b664:	4659      	mov	r1, fp
 800b666:	4628      	mov	r0, r5
 800b668:	f000 fbec 	bl	800be44 <__pow5mult>
 800b66c:	4683      	mov	fp, r0
 800b66e:	2101      	movs	r1, #1
 800b670:	4628      	mov	r0, r5
 800b672:	f000 fb29 	bl	800bcc8 <__i2b>
 800b676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b678:	4604      	mov	r4, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	f340 8086 	ble.w	800b78c <_dtoa_r+0x8dc>
 800b680:	461a      	mov	r2, r3
 800b682:	4601      	mov	r1, r0
 800b684:	4628      	mov	r0, r5
 800b686:	f000 fbdd 	bl	800be44 <__pow5mult>
 800b68a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b68c:	4604      	mov	r4, r0
 800b68e:	2b01      	cmp	r3, #1
 800b690:	dd7f      	ble.n	800b792 <_dtoa_r+0x8e2>
 800b692:	f04f 0800 	mov.w	r8, #0
 800b696:	6923      	ldr	r3, [r4, #16]
 800b698:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b69c:	6918      	ldr	r0, [r3, #16]
 800b69e:	f000 fac5 	bl	800bc2c <__hi0bits>
 800b6a2:	f1c0 0020 	rsb	r0, r0, #32
 800b6a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6a8:	4418      	add	r0, r3
 800b6aa:	f010 001f 	ands.w	r0, r0, #31
 800b6ae:	f000 8092 	beq.w	800b7d6 <_dtoa_r+0x926>
 800b6b2:	f1c0 0320 	rsb	r3, r0, #32
 800b6b6:	2b04      	cmp	r3, #4
 800b6b8:	f340 808a 	ble.w	800b7d0 <_dtoa_r+0x920>
 800b6bc:	f1c0 001c 	rsb	r0, r0, #28
 800b6c0:	9b06      	ldr	r3, [sp, #24]
 800b6c2:	4407      	add	r7, r0
 800b6c4:	4403      	add	r3, r0
 800b6c6:	9306      	str	r3, [sp, #24]
 800b6c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ca:	4403      	add	r3, r0
 800b6cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b6ce:	9b06      	ldr	r3, [sp, #24]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	dd05      	ble.n	800b6e0 <_dtoa_r+0x830>
 800b6d4:	4659      	mov	r1, fp
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	4628      	mov	r0, r5
 800b6da:	f000 fc0d 	bl	800bef8 <__lshift>
 800b6de:	4683      	mov	fp, r0
 800b6e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	dd05      	ble.n	800b6f2 <_dtoa_r+0x842>
 800b6e6:	4621      	mov	r1, r4
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	4628      	mov	r0, r5
 800b6ec:	f000 fc04 	bl	800bef8 <__lshift>
 800b6f0:	4604      	mov	r4, r0
 800b6f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d070      	beq.n	800b7da <_dtoa_r+0x92a>
 800b6f8:	4621      	mov	r1, r4
 800b6fa:	4658      	mov	r0, fp
 800b6fc:	f000 fc6c 	bl	800bfd8 <__mcmp>
 800b700:	2800      	cmp	r0, #0
 800b702:	da6a      	bge.n	800b7da <_dtoa_r+0x92a>
 800b704:	2300      	movs	r3, #0
 800b706:	4659      	mov	r1, fp
 800b708:	220a      	movs	r2, #10
 800b70a:	4628      	mov	r0, r5
 800b70c:	f000 fa48 	bl	800bba0 <__multadd>
 800b710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b712:	4683      	mov	fp, r0
 800b714:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f000 8194 	beq.w	800ba46 <_dtoa_r+0xb96>
 800b71e:	4631      	mov	r1, r6
 800b720:	2300      	movs	r3, #0
 800b722:	220a      	movs	r2, #10
 800b724:	4628      	mov	r0, r5
 800b726:	f000 fa3b 	bl	800bba0 <__multadd>
 800b72a:	f1b9 0f00 	cmp.w	r9, #0
 800b72e:	4606      	mov	r6, r0
 800b730:	f300 8093 	bgt.w	800b85a <_dtoa_r+0x9aa>
 800b734:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b736:	2b02      	cmp	r3, #2
 800b738:	dc57      	bgt.n	800b7ea <_dtoa_r+0x93a>
 800b73a:	e08e      	b.n	800b85a <_dtoa_r+0x9aa>
 800b73c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b73e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b742:	e757      	b.n	800b5f4 <_dtoa_r+0x744>
 800b744:	9b08      	ldr	r3, [sp, #32]
 800b746:	1e5c      	subs	r4, r3, #1
 800b748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b74a:	42a3      	cmp	r3, r4
 800b74c:	bfb7      	itett	lt
 800b74e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b750:	1b1c      	subge	r4, r3, r4
 800b752:	1ae2      	sublt	r2, r4, r3
 800b754:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b756:	bfbe      	ittt	lt
 800b758:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b75a:	189b      	addlt	r3, r3, r2
 800b75c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b75e:	9b08      	ldr	r3, [sp, #32]
 800b760:	bfb8      	it	lt
 800b762:	2400      	movlt	r4, #0
 800b764:	2b00      	cmp	r3, #0
 800b766:	bfbb      	ittet	lt
 800b768:	9b06      	ldrlt	r3, [sp, #24]
 800b76a:	9a08      	ldrlt	r2, [sp, #32]
 800b76c:	9f06      	ldrge	r7, [sp, #24]
 800b76e:	1a9f      	sublt	r7, r3, r2
 800b770:	bfac      	ite	ge
 800b772:	9b08      	ldrge	r3, [sp, #32]
 800b774:	2300      	movlt	r3, #0
 800b776:	e73f      	b.n	800b5f8 <_dtoa_r+0x748>
 800b778:	3fe00000 	.word	0x3fe00000
 800b77c:	40240000 	.word	0x40240000
 800b780:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b782:	9f06      	ldr	r7, [sp, #24]
 800b784:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b786:	e742      	b.n	800b60e <_dtoa_r+0x75e>
 800b788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b78a:	e76b      	b.n	800b664 <_dtoa_r+0x7b4>
 800b78c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b78e:	2b01      	cmp	r3, #1
 800b790:	dc19      	bgt.n	800b7c6 <_dtoa_r+0x916>
 800b792:	9b04      	ldr	r3, [sp, #16]
 800b794:	b9bb      	cbnz	r3, 800b7c6 <_dtoa_r+0x916>
 800b796:	9b05      	ldr	r3, [sp, #20]
 800b798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b79c:	b99b      	cbnz	r3, 800b7c6 <_dtoa_r+0x916>
 800b79e:	9b05      	ldr	r3, [sp, #20]
 800b7a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b7a4:	0d1b      	lsrs	r3, r3, #20
 800b7a6:	051b      	lsls	r3, r3, #20
 800b7a8:	b183      	cbz	r3, 800b7cc <_dtoa_r+0x91c>
 800b7aa:	f04f 0801 	mov.w	r8, #1
 800b7ae:	9b06      	ldr	r3, [sp, #24]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	9306      	str	r3, [sp, #24]
 800b7b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b7ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f47f af6a 	bne.w	800b696 <_dtoa_r+0x7e6>
 800b7c2:	2001      	movs	r0, #1
 800b7c4:	e76f      	b.n	800b6a6 <_dtoa_r+0x7f6>
 800b7c6:	f04f 0800 	mov.w	r8, #0
 800b7ca:	e7f6      	b.n	800b7ba <_dtoa_r+0x90a>
 800b7cc:	4698      	mov	r8, r3
 800b7ce:	e7f4      	b.n	800b7ba <_dtoa_r+0x90a>
 800b7d0:	f43f af7d 	beq.w	800b6ce <_dtoa_r+0x81e>
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	301c      	adds	r0, #28
 800b7d8:	e772      	b.n	800b6c0 <_dtoa_r+0x810>
 800b7da:	9b08      	ldr	r3, [sp, #32]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	dc36      	bgt.n	800b84e <_dtoa_r+0x99e>
 800b7e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	dd33      	ble.n	800b84e <_dtoa_r+0x99e>
 800b7e6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b7ea:	f1b9 0f00 	cmp.w	r9, #0
 800b7ee:	d10d      	bne.n	800b80c <_dtoa_r+0x95c>
 800b7f0:	4621      	mov	r1, r4
 800b7f2:	464b      	mov	r3, r9
 800b7f4:	2205      	movs	r2, #5
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	f000 f9d2 	bl	800bba0 <__multadd>
 800b7fc:	4601      	mov	r1, r0
 800b7fe:	4604      	mov	r4, r0
 800b800:	4658      	mov	r0, fp
 800b802:	f000 fbe9 	bl	800bfd8 <__mcmp>
 800b806:	2800      	cmp	r0, #0
 800b808:	f73f adb8 	bgt.w	800b37c <_dtoa_r+0x4cc>
 800b80c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b80e:	9f03      	ldr	r7, [sp, #12]
 800b810:	ea6f 0a03 	mvn.w	sl, r3
 800b814:	f04f 0800 	mov.w	r8, #0
 800b818:	4621      	mov	r1, r4
 800b81a:	4628      	mov	r0, r5
 800b81c:	f000 f99e 	bl	800bb5c <_Bfree>
 800b820:	2e00      	cmp	r6, #0
 800b822:	f43f aea7 	beq.w	800b574 <_dtoa_r+0x6c4>
 800b826:	f1b8 0f00 	cmp.w	r8, #0
 800b82a:	d005      	beq.n	800b838 <_dtoa_r+0x988>
 800b82c:	45b0      	cmp	r8, r6
 800b82e:	d003      	beq.n	800b838 <_dtoa_r+0x988>
 800b830:	4641      	mov	r1, r8
 800b832:	4628      	mov	r0, r5
 800b834:	f000 f992 	bl	800bb5c <_Bfree>
 800b838:	4631      	mov	r1, r6
 800b83a:	4628      	mov	r0, r5
 800b83c:	f000 f98e 	bl	800bb5c <_Bfree>
 800b840:	e698      	b.n	800b574 <_dtoa_r+0x6c4>
 800b842:	2400      	movs	r4, #0
 800b844:	4626      	mov	r6, r4
 800b846:	e7e1      	b.n	800b80c <_dtoa_r+0x95c>
 800b848:	46c2      	mov	sl, r8
 800b84a:	4626      	mov	r6, r4
 800b84c:	e596      	b.n	800b37c <_dtoa_r+0x4cc>
 800b84e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b850:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b854:	2b00      	cmp	r3, #0
 800b856:	f000 80fd 	beq.w	800ba54 <_dtoa_r+0xba4>
 800b85a:	2f00      	cmp	r7, #0
 800b85c:	dd05      	ble.n	800b86a <_dtoa_r+0x9ba>
 800b85e:	4631      	mov	r1, r6
 800b860:	463a      	mov	r2, r7
 800b862:	4628      	mov	r0, r5
 800b864:	f000 fb48 	bl	800bef8 <__lshift>
 800b868:	4606      	mov	r6, r0
 800b86a:	f1b8 0f00 	cmp.w	r8, #0
 800b86e:	d05c      	beq.n	800b92a <_dtoa_r+0xa7a>
 800b870:	4628      	mov	r0, r5
 800b872:	6871      	ldr	r1, [r6, #4]
 800b874:	f000 f932 	bl	800badc <_Balloc>
 800b878:	4607      	mov	r7, r0
 800b87a:	b928      	cbnz	r0, 800b888 <_dtoa_r+0x9d8>
 800b87c:	4602      	mov	r2, r0
 800b87e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b882:	4b7f      	ldr	r3, [pc, #508]	; (800ba80 <_dtoa_r+0xbd0>)
 800b884:	f7ff bb28 	b.w	800aed8 <_dtoa_r+0x28>
 800b888:	6932      	ldr	r2, [r6, #16]
 800b88a:	f106 010c 	add.w	r1, r6, #12
 800b88e:	3202      	adds	r2, #2
 800b890:	0092      	lsls	r2, r2, #2
 800b892:	300c      	adds	r0, #12
 800b894:	f000 f914 	bl	800bac0 <memcpy>
 800b898:	2201      	movs	r2, #1
 800b89a:	4639      	mov	r1, r7
 800b89c:	4628      	mov	r0, r5
 800b89e:	f000 fb2b 	bl	800bef8 <__lshift>
 800b8a2:	46b0      	mov	r8, r6
 800b8a4:	4606      	mov	r6, r0
 800b8a6:	9b03      	ldr	r3, [sp, #12]
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	9308      	str	r3, [sp, #32]
 800b8ac:	9b03      	ldr	r3, [sp, #12]
 800b8ae:	444b      	add	r3, r9
 800b8b0:	930a      	str	r3, [sp, #40]	; 0x28
 800b8b2:	9b04      	ldr	r3, [sp, #16]
 800b8b4:	f003 0301 	and.w	r3, r3, #1
 800b8b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b8ba:	9b08      	ldr	r3, [sp, #32]
 800b8bc:	4621      	mov	r1, r4
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	4658      	mov	r0, fp
 800b8c2:	9304      	str	r3, [sp, #16]
 800b8c4:	f7ff fa68 	bl	800ad98 <quorem>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	4641      	mov	r1, r8
 800b8cc:	3330      	adds	r3, #48	; 0x30
 800b8ce:	9006      	str	r0, [sp, #24]
 800b8d0:	4658      	mov	r0, fp
 800b8d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8d4:	f000 fb80 	bl	800bfd8 <__mcmp>
 800b8d8:	4632      	mov	r2, r6
 800b8da:	4681      	mov	r9, r0
 800b8dc:	4621      	mov	r1, r4
 800b8de:	4628      	mov	r0, r5
 800b8e0:	f000 fb96 	bl	800c010 <__mdiff>
 800b8e4:	68c2      	ldr	r2, [r0, #12]
 800b8e6:	4607      	mov	r7, r0
 800b8e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8ea:	bb02      	cbnz	r2, 800b92e <_dtoa_r+0xa7e>
 800b8ec:	4601      	mov	r1, r0
 800b8ee:	4658      	mov	r0, fp
 800b8f0:	f000 fb72 	bl	800bfd8 <__mcmp>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8f8:	4639      	mov	r1, r7
 800b8fa:	4628      	mov	r0, r5
 800b8fc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b900:	f000 f92c 	bl	800bb5c <_Bfree>
 800b904:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b906:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b908:	9f08      	ldr	r7, [sp, #32]
 800b90a:	ea43 0102 	orr.w	r1, r3, r2
 800b90e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b910:	430b      	orrs	r3, r1
 800b912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b914:	d10d      	bne.n	800b932 <_dtoa_r+0xa82>
 800b916:	2b39      	cmp	r3, #57	; 0x39
 800b918:	d029      	beq.n	800b96e <_dtoa_r+0xabe>
 800b91a:	f1b9 0f00 	cmp.w	r9, #0
 800b91e:	dd01      	ble.n	800b924 <_dtoa_r+0xa74>
 800b920:	9b06      	ldr	r3, [sp, #24]
 800b922:	3331      	adds	r3, #49	; 0x31
 800b924:	9a04      	ldr	r2, [sp, #16]
 800b926:	7013      	strb	r3, [r2, #0]
 800b928:	e776      	b.n	800b818 <_dtoa_r+0x968>
 800b92a:	4630      	mov	r0, r6
 800b92c:	e7b9      	b.n	800b8a2 <_dtoa_r+0x9f2>
 800b92e:	2201      	movs	r2, #1
 800b930:	e7e2      	b.n	800b8f8 <_dtoa_r+0xa48>
 800b932:	f1b9 0f00 	cmp.w	r9, #0
 800b936:	db06      	blt.n	800b946 <_dtoa_r+0xa96>
 800b938:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b93a:	ea41 0909 	orr.w	r9, r1, r9
 800b93e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b940:	ea59 0101 	orrs.w	r1, r9, r1
 800b944:	d120      	bne.n	800b988 <_dtoa_r+0xad8>
 800b946:	2a00      	cmp	r2, #0
 800b948:	ddec      	ble.n	800b924 <_dtoa_r+0xa74>
 800b94a:	4659      	mov	r1, fp
 800b94c:	2201      	movs	r2, #1
 800b94e:	4628      	mov	r0, r5
 800b950:	9308      	str	r3, [sp, #32]
 800b952:	f000 fad1 	bl	800bef8 <__lshift>
 800b956:	4621      	mov	r1, r4
 800b958:	4683      	mov	fp, r0
 800b95a:	f000 fb3d 	bl	800bfd8 <__mcmp>
 800b95e:	2800      	cmp	r0, #0
 800b960:	9b08      	ldr	r3, [sp, #32]
 800b962:	dc02      	bgt.n	800b96a <_dtoa_r+0xaba>
 800b964:	d1de      	bne.n	800b924 <_dtoa_r+0xa74>
 800b966:	07da      	lsls	r2, r3, #31
 800b968:	d5dc      	bpl.n	800b924 <_dtoa_r+0xa74>
 800b96a:	2b39      	cmp	r3, #57	; 0x39
 800b96c:	d1d8      	bne.n	800b920 <_dtoa_r+0xa70>
 800b96e:	2339      	movs	r3, #57	; 0x39
 800b970:	9a04      	ldr	r2, [sp, #16]
 800b972:	7013      	strb	r3, [r2, #0]
 800b974:	463b      	mov	r3, r7
 800b976:	461f      	mov	r7, r3
 800b978:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b97c:	3b01      	subs	r3, #1
 800b97e:	2a39      	cmp	r2, #57	; 0x39
 800b980:	d050      	beq.n	800ba24 <_dtoa_r+0xb74>
 800b982:	3201      	adds	r2, #1
 800b984:	701a      	strb	r2, [r3, #0]
 800b986:	e747      	b.n	800b818 <_dtoa_r+0x968>
 800b988:	2a00      	cmp	r2, #0
 800b98a:	dd03      	ble.n	800b994 <_dtoa_r+0xae4>
 800b98c:	2b39      	cmp	r3, #57	; 0x39
 800b98e:	d0ee      	beq.n	800b96e <_dtoa_r+0xabe>
 800b990:	3301      	adds	r3, #1
 800b992:	e7c7      	b.n	800b924 <_dtoa_r+0xa74>
 800b994:	9a08      	ldr	r2, [sp, #32]
 800b996:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b998:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b99c:	428a      	cmp	r2, r1
 800b99e:	d02a      	beq.n	800b9f6 <_dtoa_r+0xb46>
 800b9a0:	4659      	mov	r1, fp
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	220a      	movs	r2, #10
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	f000 f8fa 	bl	800bba0 <__multadd>
 800b9ac:	45b0      	cmp	r8, r6
 800b9ae:	4683      	mov	fp, r0
 800b9b0:	f04f 0300 	mov.w	r3, #0
 800b9b4:	f04f 020a 	mov.w	r2, #10
 800b9b8:	4641      	mov	r1, r8
 800b9ba:	4628      	mov	r0, r5
 800b9bc:	d107      	bne.n	800b9ce <_dtoa_r+0xb1e>
 800b9be:	f000 f8ef 	bl	800bba0 <__multadd>
 800b9c2:	4680      	mov	r8, r0
 800b9c4:	4606      	mov	r6, r0
 800b9c6:	9b08      	ldr	r3, [sp, #32]
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	9308      	str	r3, [sp, #32]
 800b9cc:	e775      	b.n	800b8ba <_dtoa_r+0xa0a>
 800b9ce:	f000 f8e7 	bl	800bba0 <__multadd>
 800b9d2:	4631      	mov	r1, r6
 800b9d4:	4680      	mov	r8, r0
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	220a      	movs	r2, #10
 800b9da:	4628      	mov	r0, r5
 800b9dc:	f000 f8e0 	bl	800bba0 <__multadd>
 800b9e0:	4606      	mov	r6, r0
 800b9e2:	e7f0      	b.n	800b9c6 <_dtoa_r+0xb16>
 800b9e4:	f1b9 0f00 	cmp.w	r9, #0
 800b9e8:	bfcc      	ite	gt
 800b9ea:	464f      	movgt	r7, r9
 800b9ec:	2701      	movle	r7, #1
 800b9ee:	f04f 0800 	mov.w	r8, #0
 800b9f2:	9a03      	ldr	r2, [sp, #12]
 800b9f4:	4417      	add	r7, r2
 800b9f6:	4659      	mov	r1, fp
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	9308      	str	r3, [sp, #32]
 800b9fe:	f000 fa7b 	bl	800bef8 <__lshift>
 800ba02:	4621      	mov	r1, r4
 800ba04:	4683      	mov	fp, r0
 800ba06:	f000 fae7 	bl	800bfd8 <__mcmp>
 800ba0a:	2800      	cmp	r0, #0
 800ba0c:	dcb2      	bgt.n	800b974 <_dtoa_r+0xac4>
 800ba0e:	d102      	bne.n	800ba16 <_dtoa_r+0xb66>
 800ba10:	9b08      	ldr	r3, [sp, #32]
 800ba12:	07db      	lsls	r3, r3, #31
 800ba14:	d4ae      	bmi.n	800b974 <_dtoa_r+0xac4>
 800ba16:	463b      	mov	r3, r7
 800ba18:	461f      	mov	r7, r3
 800ba1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba1e:	2a30      	cmp	r2, #48	; 0x30
 800ba20:	d0fa      	beq.n	800ba18 <_dtoa_r+0xb68>
 800ba22:	e6f9      	b.n	800b818 <_dtoa_r+0x968>
 800ba24:	9a03      	ldr	r2, [sp, #12]
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d1a5      	bne.n	800b976 <_dtoa_r+0xac6>
 800ba2a:	2331      	movs	r3, #49	; 0x31
 800ba2c:	f10a 0a01 	add.w	sl, sl, #1
 800ba30:	e779      	b.n	800b926 <_dtoa_r+0xa76>
 800ba32:	4b14      	ldr	r3, [pc, #80]	; (800ba84 <_dtoa_r+0xbd4>)
 800ba34:	f7ff baa8 	b.w	800af88 <_dtoa_r+0xd8>
 800ba38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	f47f aa81 	bne.w	800af42 <_dtoa_r+0x92>
 800ba40:	4b11      	ldr	r3, [pc, #68]	; (800ba88 <_dtoa_r+0xbd8>)
 800ba42:	f7ff baa1 	b.w	800af88 <_dtoa_r+0xd8>
 800ba46:	f1b9 0f00 	cmp.w	r9, #0
 800ba4a:	dc03      	bgt.n	800ba54 <_dtoa_r+0xba4>
 800ba4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba4e:	2b02      	cmp	r3, #2
 800ba50:	f73f aecb 	bgt.w	800b7ea <_dtoa_r+0x93a>
 800ba54:	9f03      	ldr	r7, [sp, #12]
 800ba56:	4621      	mov	r1, r4
 800ba58:	4658      	mov	r0, fp
 800ba5a:	f7ff f99d 	bl	800ad98 <quorem>
 800ba5e:	9a03      	ldr	r2, [sp, #12]
 800ba60:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ba64:	f807 3b01 	strb.w	r3, [r7], #1
 800ba68:	1aba      	subs	r2, r7, r2
 800ba6a:	4591      	cmp	r9, r2
 800ba6c:	ddba      	ble.n	800b9e4 <_dtoa_r+0xb34>
 800ba6e:	4659      	mov	r1, fp
 800ba70:	2300      	movs	r3, #0
 800ba72:	220a      	movs	r2, #10
 800ba74:	4628      	mov	r0, r5
 800ba76:	f000 f893 	bl	800bba0 <__multadd>
 800ba7a:	4683      	mov	fp, r0
 800ba7c:	e7eb      	b.n	800ba56 <_dtoa_r+0xba6>
 800ba7e:	bf00      	nop
 800ba80:	0800d3d3 	.word	0x0800d3d3
 800ba84:	0800d330 	.word	0x0800d330
 800ba88:	0800d354 	.word	0x0800d354

0800ba8c <_localeconv_r>:
 800ba8c:	4800      	ldr	r0, [pc, #0]	; (800ba90 <_localeconv_r+0x4>)
 800ba8e:	4770      	bx	lr
 800ba90:	200001c0 	.word	0x200001c0

0800ba94 <malloc>:
 800ba94:	4b02      	ldr	r3, [pc, #8]	; (800baa0 <malloc+0xc>)
 800ba96:	4601      	mov	r1, r0
 800ba98:	6818      	ldr	r0, [r3, #0]
 800ba9a:	f000 bc1d 	b.w	800c2d8 <_malloc_r>
 800ba9e:	bf00      	nop
 800baa0:	2000006c 	.word	0x2000006c

0800baa4 <memchr>:
 800baa4:	4603      	mov	r3, r0
 800baa6:	b510      	push	{r4, lr}
 800baa8:	b2c9      	uxtb	r1, r1
 800baaa:	4402      	add	r2, r0
 800baac:	4293      	cmp	r3, r2
 800baae:	4618      	mov	r0, r3
 800bab0:	d101      	bne.n	800bab6 <memchr+0x12>
 800bab2:	2000      	movs	r0, #0
 800bab4:	e003      	b.n	800babe <memchr+0x1a>
 800bab6:	7804      	ldrb	r4, [r0, #0]
 800bab8:	3301      	adds	r3, #1
 800baba:	428c      	cmp	r4, r1
 800babc:	d1f6      	bne.n	800baac <memchr+0x8>
 800babe:	bd10      	pop	{r4, pc}

0800bac0 <memcpy>:
 800bac0:	440a      	add	r2, r1
 800bac2:	4291      	cmp	r1, r2
 800bac4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bac8:	d100      	bne.n	800bacc <memcpy+0xc>
 800baca:	4770      	bx	lr
 800bacc:	b510      	push	{r4, lr}
 800bace:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bad2:	4291      	cmp	r1, r2
 800bad4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bad8:	d1f9      	bne.n	800bace <memcpy+0xe>
 800bada:	bd10      	pop	{r4, pc}

0800badc <_Balloc>:
 800badc:	b570      	push	{r4, r5, r6, lr}
 800bade:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bae0:	4604      	mov	r4, r0
 800bae2:	460d      	mov	r5, r1
 800bae4:	b976      	cbnz	r6, 800bb04 <_Balloc+0x28>
 800bae6:	2010      	movs	r0, #16
 800bae8:	f7ff ffd4 	bl	800ba94 <malloc>
 800baec:	4602      	mov	r2, r0
 800baee:	6260      	str	r0, [r4, #36]	; 0x24
 800baf0:	b920      	cbnz	r0, 800bafc <_Balloc+0x20>
 800baf2:	2166      	movs	r1, #102	; 0x66
 800baf4:	4b17      	ldr	r3, [pc, #92]	; (800bb54 <_Balloc+0x78>)
 800baf6:	4818      	ldr	r0, [pc, #96]	; (800bb58 <_Balloc+0x7c>)
 800baf8:	f000 fdce 	bl	800c698 <__assert_func>
 800bafc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb00:	6006      	str	r6, [r0, #0]
 800bb02:	60c6      	str	r6, [r0, #12]
 800bb04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb06:	68f3      	ldr	r3, [r6, #12]
 800bb08:	b183      	cbz	r3, 800bb2c <_Balloc+0x50>
 800bb0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb12:	b9b8      	cbnz	r0, 800bb44 <_Balloc+0x68>
 800bb14:	2101      	movs	r1, #1
 800bb16:	fa01 f605 	lsl.w	r6, r1, r5
 800bb1a:	1d72      	adds	r2, r6, #5
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	0092      	lsls	r2, r2, #2
 800bb20:	f000 fb5e 	bl	800c1e0 <_calloc_r>
 800bb24:	b160      	cbz	r0, 800bb40 <_Balloc+0x64>
 800bb26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb2a:	e00e      	b.n	800bb4a <_Balloc+0x6e>
 800bb2c:	2221      	movs	r2, #33	; 0x21
 800bb2e:	2104      	movs	r1, #4
 800bb30:	4620      	mov	r0, r4
 800bb32:	f000 fb55 	bl	800c1e0 <_calloc_r>
 800bb36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb38:	60f0      	str	r0, [r6, #12]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d1e4      	bne.n	800bb0a <_Balloc+0x2e>
 800bb40:	2000      	movs	r0, #0
 800bb42:	bd70      	pop	{r4, r5, r6, pc}
 800bb44:	6802      	ldr	r2, [r0, #0]
 800bb46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb50:	e7f7      	b.n	800bb42 <_Balloc+0x66>
 800bb52:	bf00      	nop
 800bb54:	0800d361 	.word	0x0800d361
 800bb58:	0800d3e4 	.word	0x0800d3e4

0800bb5c <_Bfree>:
 800bb5c:	b570      	push	{r4, r5, r6, lr}
 800bb5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb60:	4605      	mov	r5, r0
 800bb62:	460c      	mov	r4, r1
 800bb64:	b976      	cbnz	r6, 800bb84 <_Bfree+0x28>
 800bb66:	2010      	movs	r0, #16
 800bb68:	f7ff ff94 	bl	800ba94 <malloc>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	6268      	str	r0, [r5, #36]	; 0x24
 800bb70:	b920      	cbnz	r0, 800bb7c <_Bfree+0x20>
 800bb72:	218a      	movs	r1, #138	; 0x8a
 800bb74:	4b08      	ldr	r3, [pc, #32]	; (800bb98 <_Bfree+0x3c>)
 800bb76:	4809      	ldr	r0, [pc, #36]	; (800bb9c <_Bfree+0x40>)
 800bb78:	f000 fd8e 	bl	800c698 <__assert_func>
 800bb7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb80:	6006      	str	r6, [r0, #0]
 800bb82:	60c6      	str	r6, [r0, #12]
 800bb84:	b13c      	cbz	r4, 800bb96 <_Bfree+0x3a>
 800bb86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb88:	6862      	ldr	r2, [r4, #4]
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb90:	6021      	str	r1, [r4, #0]
 800bb92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb96:	bd70      	pop	{r4, r5, r6, pc}
 800bb98:	0800d361 	.word	0x0800d361
 800bb9c:	0800d3e4 	.word	0x0800d3e4

0800bba0 <__multadd>:
 800bba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba4:	4607      	mov	r7, r0
 800bba6:	460c      	mov	r4, r1
 800bba8:	461e      	mov	r6, r3
 800bbaa:	2000      	movs	r0, #0
 800bbac:	690d      	ldr	r5, [r1, #16]
 800bbae:	f101 0c14 	add.w	ip, r1, #20
 800bbb2:	f8dc 3000 	ldr.w	r3, [ip]
 800bbb6:	3001      	adds	r0, #1
 800bbb8:	b299      	uxth	r1, r3
 800bbba:	fb02 6101 	mla	r1, r2, r1, r6
 800bbbe:	0c1e      	lsrs	r6, r3, #16
 800bbc0:	0c0b      	lsrs	r3, r1, #16
 800bbc2:	fb02 3306 	mla	r3, r2, r6, r3
 800bbc6:	b289      	uxth	r1, r1
 800bbc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bbcc:	4285      	cmp	r5, r0
 800bbce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bbd2:	f84c 1b04 	str.w	r1, [ip], #4
 800bbd6:	dcec      	bgt.n	800bbb2 <__multadd+0x12>
 800bbd8:	b30e      	cbz	r6, 800bc1e <__multadd+0x7e>
 800bbda:	68a3      	ldr	r3, [r4, #8]
 800bbdc:	42ab      	cmp	r3, r5
 800bbde:	dc19      	bgt.n	800bc14 <__multadd+0x74>
 800bbe0:	6861      	ldr	r1, [r4, #4]
 800bbe2:	4638      	mov	r0, r7
 800bbe4:	3101      	adds	r1, #1
 800bbe6:	f7ff ff79 	bl	800badc <_Balloc>
 800bbea:	4680      	mov	r8, r0
 800bbec:	b928      	cbnz	r0, 800bbfa <__multadd+0x5a>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	21b5      	movs	r1, #181	; 0xb5
 800bbf2:	4b0c      	ldr	r3, [pc, #48]	; (800bc24 <__multadd+0x84>)
 800bbf4:	480c      	ldr	r0, [pc, #48]	; (800bc28 <__multadd+0x88>)
 800bbf6:	f000 fd4f 	bl	800c698 <__assert_func>
 800bbfa:	6922      	ldr	r2, [r4, #16]
 800bbfc:	f104 010c 	add.w	r1, r4, #12
 800bc00:	3202      	adds	r2, #2
 800bc02:	0092      	lsls	r2, r2, #2
 800bc04:	300c      	adds	r0, #12
 800bc06:	f7ff ff5b 	bl	800bac0 <memcpy>
 800bc0a:	4621      	mov	r1, r4
 800bc0c:	4638      	mov	r0, r7
 800bc0e:	f7ff ffa5 	bl	800bb5c <_Bfree>
 800bc12:	4644      	mov	r4, r8
 800bc14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc18:	3501      	adds	r5, #1
 800bc1a:	615e      	str	r6, [r3, #20]
 800bc1c:	6125      	str	r5, [r4, #16]
 800bc1e:	4620      	mov	r0, r4
 800bc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc24:	0800d3d3 	.word	0x0800d3d3
 800bc28:	0800d3e4 	.word	0x0800d3e4

0800bc2c <__hi0bits>:
 800bc2c:	0c02      	lsrs	r2, r0, #16
 800bc2e:	0412      	lsls	r2, r2, #16
 800bc30:	4603      	mov	r3, r0
 800bc32:	b9ca      	cbnz	r2, 800bc68 <__hi0bits+0x3c>
 800bc34:	0403      	lsls	r3, r0, #16
 800bc36:	2010      	movs	r0, #16
 800bc38:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bc3c:	bf04      	itt	eq
 800bc3e:	021b      	lsleq	r3, r3, #8
 800bc40:	3008      	addeq	r0, #8
 800bc42:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bc46:	bf04      	itt	eq
 800bc48:	011b      	lsleq	r3, r3, #4
 800bc4a:	3004      	addeq	r0, #4
 800bc4c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bc50:	bf04      	itt	eq
 800bc52:	009b      	lsleq	r3, r3, #2
 800bc54:	3002      	addeq	r0, #2
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	db05      	blt.n	800bc66 <__hi0bits+0x3a>
 800bc5a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bc5e:	f100 0001 	add.w	r0, r0, #1
 800bc62:	bf08      	it	eq
 800bc64:	2020      	moveq	r0, #32
 800bc66:	4770      	bx	lr
 800bc68:	2000      	movs	r0, #0
 800bc6a:	e7e5      	b.n	800bc38 <__hi0bits+0xc>

0800bc6c <__lo0bits>:
 800bc6c:	6803      	ldr	r3, [r0, #0]
 800bc6e:	4602      	mov	r2, r0
 800bc70:	f013 0007 	ands.w	r0, r3, #7
 800bc74:	d00b      	beq.n	800bc8e <__lo0bits+0x22>
 800bc76:	07d9      	lsls	r1, r3, #31
 800bc78:	d421      	bmi.n	800bcbe <__lo0bits+0x52>
 800bc7a:	0798      	lsls	r0, r3, #30
 800bc7c:	bf49      	itett	mi
 800bc7e:	085b      	lsrmi	r3, r3, #1
 800bc80:	089b      	lsrpl	r3, r3, #2
 800bc82:	2001      	movmi	r0, #1
 800bc84:	6013      	strmi	r3, [r2, #0]
 800bc86:	bf5c      	itt	pl
 800bc88:	2002      	movpl	r0, #2
 800bc8a:	6013      	strpl	r3, [r2, #0]
 800bc8c:	4770      	bx	lr
 800bc8e:	b299      	uxth	r1, r3
 800bc90:	b909      	cbnz	r1, 800bc96 <__lo0bits+0x2a>
 800bc92:	2010      	movs	r0, #16
 800bc94:	0c1b      	lsrs	r3, r3, #16
 800bc96:	b2d9      	uxtb	r1, r3
 800bc98:	b909      	cbnz	r1, 800bc9e <__lo0bits+0x32>
 800bc9a:	3008      	adds	r0, #8
 800bc9c:	0a1b      	lsrs	r3, r3, #8
 800bc9e:	0719      	lsls	r1, r3, #28
 800bca0:	bf04      	itt	eq
 800bca2:	091b      	lsreq	r3, r3, #4
 800bca4:	3004      	addeq	r0, #4
 800bca6:	0799      	lsls	r1, r3, #30
 800bca8:	bf04      	itt	eq
 800bcaa:	089b      	lsreq	r3, r3, #2
 800bcac:	3002      	addeq	r0, #2
 800bcae:	07d9      	lsls	r1, r3, #31
 800bcb0:	d403      	bmi.n	800bcba <__lo0bits+0x4e>
 800bcb2:	085b      	lsrs	r3, r3, #1
 800bcb4:	f100 0001 	add.w	r0, r0, #1
 800bcb8:	d003      	beq.n	800bcc2 <__lo0bits+0x56>
 800bcba:	6013      	str	r3, [r2, #0]
 800bcbc:	4770      	bx	lr
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	4770      	bx	lr
 800bcc2:	2020      	movs	r0, #32
 800bcc4:	4770      	bx	lr
	...

0800bcc8 <__i2b>:
 800bcc8:	b510      	push	{r4, lr}
 800bcca:	460c      	mov	r4, r1
 800bccc:	2101      	movs	r1, #1
 800bcce:	f7ff ff05 	bl	800badc <_Balloc>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	b928      	cbnz	r0, 800bce2 <__i2b+0x1a>
 800bcd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bcda:	4b04      	ldr	r3, [pc, #16]	; (800bcec <__i2b+0x24>)
 800bcdc:	4804      	ldr	r0, [pc, #16]	; (800bcf0 <__i2b+0x28>)
 800bcde:	f000 fcdb 	bl	800c698 <__assert_func>
 800bce2:	2301      	movs	r3, #1
 800bce4:	6144      	str	r4, [r0, #20]
 800bce6:	6103      	str	r3, [r0, #16]
 800bce8:	bd10      	pop	{r4, pc}
 800bcea:	bf00      	nop
 800bcec:	0800d3d3 	.word	0x0800d3d3
 800bcf0:	0800d3e4 	.word	0x0800d3e4

0800bcf4 <__multiply>:
 800bcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf8:	4691      	mov	r9, r2
 800bcfa:	690a      	ldr	r2, [r1, #16]
 800bcfc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd00:	460c      	mov	r4, r1
 800bd02:	429a      	cmp	r2, r3
 800bd04:	bfbe      	ittt	lt
 800bd06:	460b      	movlt	r3, r1
 800bd08:	464c      	movlt	r4, r9
 800bd0a:	4699      	movlt	r9, r3
 800bd0c:	6927      	ldr	r7, [r4, #16]
 800bd0e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd12:	68a3      	ldr	r3, [r4, #8]
 800bd14:	6861      	ldr	r1, [r4, #4]
 800bd16:	eb07 060a 	add.w	r6, r7, sl
 800bd1a:	42b3      	cmp	r3, r6
 800bd1c:	b085      	sub	sp, #20
 800bd1e:	bfb8      	it	lt
 800bd20:	3101      	addlt	r1, #1
 800bd22:	f7ff fedb 	bl	800badc <_Balloc>
 800bd26:	b930      	cbnz	r0, 800bd36 <__multiply+0x42>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	f240 115d 	movw	r1, #349	; 0x15d
 800bd2e:	4b43      	ldr	r3, [pc, #268]	; (800be3c <__multiply+0x148>)
 800bd30:	4843      	ldr	r0, [pc, #268]	; (800be40 <__multiply+0x14c>)
 800bd32:	f000 fcb1 	bl	800c698 <__assert_func>
 800bd36:	f100 0514 	add.w	r5, r0, #20
 800bd3a:	462b      	mov	r3, r5
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd42:	4543      	cmp	r3, r8
 800bd44:	d321      	bcc.n	800bd8a <__multiply+0x96>
 800bd46:	f104 0314 	add.w	r3, r4, #20
 800bd4a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd4e:	f109 0314 	add.w	r3, r9, #20
 800bd52:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd56:	9202      	str	r2, [sp, #8]
 800bd58:	1b3a      	subs	r2, r7, r4
 800bd5a:	3a15      	subs	r2, #21
 800bd5c:	f022 0203 	bic.w	r2, r2, #3
 800bd60:	3204      	adds	r2, #4
 800bd62:	f104 0115 	add.w	r1, r4, #21
 800bd66:	428f      	cmp	r7, r1
 800bd68:	bf38      	it	cc
 800bd6a:	2204      	movcc	r2, #4
 800bd6c:	9201      	str	r2, [sp, #4]
 800bd6e:	9a02      	ldr	r2, [sp, #8]
 800bd70:	9303      	str	r3, [sp, #12]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d80c      	bhi.n	800bd90 <__multiply+0x9c>
 800bd76:	2e00      	cmp	r6, #0
 800bd78:	dd03      	ble.n	800bd82 <__multiply+0x8e>
 800bd7a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d059      	beq.n	800be36 <__multiply+0x142>
 800bd82:	6106      	str	r6, [r0, #16]
 800bd84:	b005      	add	sp, #20
 800bd86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd8a:	f843 2b04 	str.w	r2, [r3], #4
 800bd8e:	e7d8      	b.n	800bd42 <__multiply+0x4e>
 800bd90:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd94:	f1ba 0f00 	cmp.w	sl, #0
 800bd98:	d023      	beq.n	800bde2 <__multiply+0xee>
 800bd9a:	46a9      	mov	r9, r5
 800bd9c:	f04f 0c00 	mov.w	ip, #0
 800bda0:	f104 0e14 	add.w	lr, r4, #20
 800bda4:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bda8:	f8d9 1000 	ldr.w	r1, [r9]
 800bdac:	fa1f fb82 	uxth.w	fp, r2
 800bdb0:	b289      	uxth	r1, r1
 800bdb2:	fb0a 110b 	mla	r1, sl, fp, r1
 800bdb6:	4461      	add	r1, ip
 800bdb8:	f8d9 c000 	ldr.w	ip, [r9]
 800bdbc:	0c12      	lsrs	r2, r2, #16
 800bdbe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bdc2:	fb0a c202 	mla	r2, sl, r2, ip
 800bdc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bdca:	b289      	uxth	r1, r1
 800bdcc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bdd0:	4577      	cmp	r7, lr
 800bdd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdd6:	f849 1b04 	str.w	r1, [r9], #4
 800bdda:	d8e3      	bhi.n	800bda4 <__multiply+0xb0>
 800bddc:	9a01      	ldr	r2, [sp, #4]
 800bdde:	f845 c002 	str.w	ip, [r5, r2]
 800bde2:	9a03      	ldr	r2, [sp, #12]
 800bde4:	3304      	adds	r3, #4
 800bde6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bdea:	f1b9 0f00 	cmp.w	r9, #0
 800bdee:	d020      	beq.n	800be32 <__multiply+0x13e>
 800bdf0:	46ae      	mov	lr, r5
 800bdf2:	f04f 0a00 	mov.w	sl, #0
 800bdf6:	6829      	ldr	r1, [r5, #0]
 800bdf8:	f104 0c14 	add.w	ip, r4, #20
 800bdfc:	f8bc b000 	ldrh.w	fp, [ip]
 800be00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800be04:	b289      	uxth	r1, r1
 800be06:	fb09 220b 	mla	r2, r9, fp, r2
 800be0a:	4492      	add	sl, r2
 800be0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800be10:	f84e 1b04 	str.w	r1, [lr], #4
 800be14:	f85c 2b04 	ldr.w	r2, [ip], #4
 800be18:	f8be 1000 	ldrh.w	r1, [lr]
 800be1c:	0c12      	lsrs	r2, r2, #16
 800be1e:	fb09 1102 	mla	r1, r9, r2, r1
 800be22:	4567      	cmp	r7, ip
 800be24:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800be28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be2c:	d8e6      	bhi.n	800bdfc <__multiply+0x108>
 800be2e:	9a01      	ldr	r2, [sp, #4]
 800be30:	50a9      	str	r1, [r5, r2]
 800be32:	3504      	adds	r5, #4
 800be34:	e79b      	b.n	800bd6e <__multiply+0x7a>
 800be36:	3e01      	subs	r6, #1
 800be38:	e79d      	b.n	800bd76 <__multiply+0x82>
 800be3a:	bf00      	nop
 800be3c:	0800d3d3 	.word	0x0800d3d3
 800be40:	0800d3e4 	.word	0x0800d3e4

0800be44 <__pow5mult>:
 800be44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be48:	4615      	mov	r5, r2
 800be4a:	f012 0203 	ands.w	r2, r2, #3
 800be4e:	4606      	mov	r6, r0
 800be50:	460f      	mov	r7, r1
 800be52:	d007      	beq.n	800be64 <__pow5mult+0x20>
 800be54:	4c25      	ldr	r4, [pc, #148]	; (800beec <__pow5mult+0xa8>)
 800be56:	3a01      	subs	r2, #1
 800be58:	2300      	movs	r3, #0
 800be5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be5e:	f7ff fe9f 	bl	800bba0 <__multadd>
 800be62:	4607      	mov	r7, r0
 800be64:	10ad      	asrs	r5, r5, #2
 800be66:	d03d      	beq.n	800bee4 <__pow5mult+0xa0>
 800be68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be6a:	b97c      	cbnz	r4, 800be8c <__pow5mult+0x48>
 800be6c:	2010      	movs	r0, #16
 800be6e:	f7ff fe11 	bl	800ba94 <malloc>
 800be72:	4602      	mov	r2, r0
 800be74:	6270      	str	r0, [r6, #36]	; 0x24
 800be76:	b928      	cbnz	r0, 800be84 <__pow5mult+0x40>
 800be78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be7c:	4b1c      	ldr	r3, [pc, #112]	; (800bef0 <__pow5mult+0xac>)
 800be7e:	481d      	ldr	r0, [pc, #116]	; (800bef4 <__pow5mult+0xb0>)
 800be80:	f000 fc0a 	bl	800c698 <__assert_func>
 800be84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be88:	6004      	str	r4, [r0, #0]
 800be8a:	60c4      	str	r4, [r0, #12]
 800be8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be94:	b94c      	cbnz	r4, 800beaa <__pow5mult+0x66>
 800be96:	f240 2171 	movw	r1, #625	; 0x271
 800be9a:	4630      	mov	r0, r6
 800be9c:	f7ff ff14 	bl	800bcc8 <__i2b>
 800bea0:	2300      	movs	r3, #0
 800bea2:	4604      	mov	r4, r0
 800bea4:	f8c8 0008 	str.w	r0, [r8, #8]
 800bea8:	6003      	str	r3, [r0, #0]
 800beaa:	f04f 0900 	mov.w	r9, #0
 800beae:	07eb      	lsls	r3, r5, #31
 800beb0:	d50a      	bpl.n	800bec8 <__pow5mult+0x84>
 800beb2:	4639      	mov	r1, r7
 800beb4:	4622      	mov	r2, r4
 800beb6:	4630      	mov	r0, r6
 800beb8:	f7ff ff1c 	bl	800bcf4 <__multiply>
 800bebc:	4680      	mov	r8, r0
 800bebe:	4639      	mov	r1, r7
 800bec0:	4630      	mov	r0, r6
 800bec2:	f7ff fe4b 	bl	800bb5c <_Bfree>
 800bec6:	4647      	mov	r7, r8
 800bec8:	106d      	asrs	r5, r5, #1
 800beca:	d00b      	beq.n	800bee4 <__pow5mult+0xa0>
 800becc:	6820      	ldr	r0, [r4, #0]
 800bece:	b938      	cbnz	r0, 800bee0 <__pow5mult+0x9c>
 800bed0:	4622      	mov	r2, r4
 800bed2:	4621      	mov	r1, r4
 800bed4:	4630      	mov	r0, r6
 800bed6:	f7ff ff0d 	bl	800bcf4 <__multiply>
 800beda:	6020      	str	r0, [r4, #0]
 800bedc:	f8c0 9000 	str.w	r9, [r0]
 800bee0:	4604      	mov	r4, r0
 800bee2:	e7e4      	b.n	800beae <__pow5mult+0x6a>
 800bee4:	4638      	mov	r0, r7
 800bee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beea:	bf00      	nop
 800beec:	0800d530 	.word	0x0800d530
 800bef0:	0800d361 	.word	0x0800d361
 800bef4:	0800d3e4 	.word	0x0800d3e4

0800bef8 <__lshift>:
 800bef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800befc:	460c      	mov	r4, r1
 800befe:	4607      	mov	r7, r0
 800bf00:	4691      	mov	r9, r2
 800bf02:	6923      	ldr	r3, [r4, #16]
 800bf04:	6849      	ldr	r1, [r1, #4]
 800bf06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf0a:	68a3      	ldr	r3, [r4, #8]
 800bf0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf10:	f108 0601 	add.w	r6, r8, #1
 800bf14:	42b3      	cmp	r3, r6
 800bf16:	db0b      	blt.n	800bf30 <__lshift+0x38>
 800bf18:	4638      	mov	r0, r7
 800bf1a:	f7ff fddf 	bl	800badc <_Balloc>
 800bf1e:	4605      	mov	r5, r0
 800bf20:	b948      	cbnz	r0, 800bf36 <__lshift+0x3e>
 800bf22:	4602      	mov	r2, r0
 800bf24:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bf28:	4b29      	ldr	r3, [pc, #164]	; (800bfd0 <__lshift+0xd8>)
 800bf2a:	482a      	ldr	r0, [pc, #168]	; (800bfd4 <__lshift+0xdc>)
 800bf2c:	f000 fbb4 	bl	800c698 <__assert_func>
 800bf30:	3101      	adds	r1, #1
 800bf32:	005b      	lsls	r3, r3, #1
 800bf34:	e7ee      	b.n	800bf14 <__lshift+0x1c>
 800bf36:	2300      	movs	r3, #0
 800bf38:	f100 0114 	add.w	r1, r0, #20
 800bf3c:	f100 0210 	add.w	r2, r0, #16
 800bf40:	4618      	mov	r0, r3
 800bf42:	4553      	cmp	r3, sl
 800bf44:	db37      	blt.n	800bfb6 <__lshift+0xbe>
 800bf46:	6920      	ldr	r0, [r4, #16]
 800bf48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf4c:	f104 0314 	add.w	r3, r4, #20
 800bf50:	f019 091f 	ands.w	r9, r9, #31
 800bf54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bf5c:	d02f      	beq.n	800bfbe <__lshift+0xc6>
 800bf5e:	468a      	mov	sl, r1
 800bf60:	f04f 0c00 	mov.w	ip, #0
 800bf64:	f1c9 0e20 	rsb	lr, r9, #32
 800bf68:	681a      	ldr	r2, [r3, #0]
 800bf6a:	fa02 f209 	lsl.w	r2, r2, r9
 800bf6e:	ea42 020c 	orr.w	r2, r2, ip
 800bf72:	f84a 2b04 	str.w	r2, [sl], #4
 800bf76:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf7a:	4298      	cmp	r0, r3
 800bf7c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bf80:	d8f2      	bhi.n	800bf68 <__lshift+0x70>
 800bf82:	1b03      	subs	r3, r0, r4
 800bf84:	3b15      	subs	r3, #21
 800bf86:	f023 0303 	bic.w	r3, r3, #3
 800bf8a:	3304      	adds	r3, #4
 800bf8c:	f104 0215 	add.w	r2, r4, #21
 800bf90:	4290      	cmp	r0, r2
 800bf92:	bf38      	it	cc
 800bf94:	2304      	movcc	r3, #4
 800bf96:	f841 c003 	str.w	ip, [r1, r3]
 800bf9a:	f1bc 0f00 	cmp.w	ip, #0
 800bf9e:	d001      	beq.n	800bfa4 <__lshift+0xac>
 800bfa0:	f108 0602 	add.w	r6, r8, #2
 800bfa4:	3e01      	subs	r6, #1
 800bfa6:	4638      	mov	r0, r7
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	612e      	str	r6, [r5, #16]
 800bfac:	f7ff fdd6 	bl	800bb5c <_Bfree>
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfb6:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfba:	3301      	adds	r3, #1
 800bfbc:	e7c1      	b.n	800bf42 <__lshift+0x4a>
 800bfbe:	3904      	subs	r1, #4
 800bfc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfc4:	4298      	cmp	r0, r3
 800bfc6:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfca:	d8f9      	bhi.n	800bfc0 <__lshift+0xc8>
 800bfcc:	e7ea      	b.n	800bfa4 <__lshift+0xac>
 800bfce:	bf00      	nop
 800bfd0:	0800d3d3 	.word	0x0800d3d3
 800bfd4:	0800d3e4 	.word	0x0800d3e4

0800bfd8 <__mcmp>:
 800bfd8:	4603      	mov	r3, r0
 800bfda:	690a      	ldr	r2, [r1, #16]
 800bfdc:	6900      	ldr	r0, [r0, #16]
 800bfde:	b530      	push	{r4, r5, lr}
 800bfe0:	1a80      	subs	r0, r0, r2
 800bfe2:	d10d      	bne.n	800c000 <__mcmp+0x28>
 800bfe4:	3314      	adds	r3, #20
 800bfe6:	3114      	adds	r1, #20
 800bfe8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bfec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bff0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bff4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bff8:	4295      	cmp	r5, r2
 800bffa:	d002      	beq.n	800c002 <__mcmp+0x2a>
 800bffc:	d304      	bcc.n	800c008 <__mcmp+0x30>
 800bffe:	2001      	movs	r0, #1
 800c000:	bd30      	pop	{r4, r5, pc}
 800c002:	42a3      	cmp	r3, r4
 800c004:	d3f4      	bcc.n	800bff0 <__mcmp+0x18>
 800c006:	e7fb      	b.n	800c000 <__mcmp+0x28>
 800c008:	f04f 30ff 	mov.w	r0, #4294967295
 800c00c:	e7f8      	b.n	800c000 <__mcmp+0x28>
	...

0800c010 <__mdiff>:
 800c010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c014:	460d      	mov	r5, r1
 800c016:	4607      	mov	r7, r0
 800c018:	4611      	mov	r1, r2
 800c01a:	4628      	mov	r0, r5
 800c01c:	4614      	mov	r4, r2
 800c01e:	f7ff ffdb 	bl	800bfd8 <__mcmp>
 800c022:	1e06      	subs	r6, r0, #0
 800c024:	d111      	bne.n	800c04a <__mdiff+0x3a>
 800c026:	4631      	mov	r1, r6
 800c028:	4638      	mov	r0, r7
 800c02a:	f7ff fd57 	bl	800badc <_Balloc>
 800c02e:	4602      	mov	r2, r0
 800c030:	b928      	cbnz	r0, 800c03e <__mdiff+0x2e>
 800c032:	f240 2132 	movw	r1, #562	; 0x232
 800c036:	4b3a      	ldr	r3, [pc, #232]	; (800c120 <__mdiff+0x110>)
 800c038:	483a      	ldr	r0, [pc, #232]	; (800c124 <__mdiff+0x114>)
 800c03a:	f000 fb2d 	bl	800c698 <__assert_func>
 800c03e:	2301      	movs	r3, #1
 800c040:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c044:	4610      	mov	r0, r2
 800c046:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c04a:	bfa4      	itt	ge
 800c04c:	4623      	movge	r3, r4
 800c04e:	462c      	movge	r4, r5
 800c050:	4638      	mov	r0, r7
 800c052:	6861      	ldr	r1, [r4, #4]
 800c054:	bfa6      	itte	ge
 800c056:	461d      	movge	r5, r3
 800c058:	2600      	movge	r6, #0
 800c05a:	2601      	movlt	r6, #1
 800c05c:	f7ff fd3e 	bl	800badc <_Balloc>
 800c060:	4602      	mov	r2, r0
 800c062:	b918      	cbnz	r0, 800c06c <__mdiff+0x5c>
 800c064:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c068:	4b2d      	ldr	r3, [pc, #180]	; (800c120 <__mdiff+0x110>)
 800c06a:	e7e5      	b.n	800c038 <__mdiff+0x28>
 800c06c:	f102 0814 	add.w	r8, r2, #20
 800c070:	46c2      	mov	sl, r8
 800c072:	f04f 0c00 	mov.w	ip, #0
 800c076:	6927      	ldr	r7, [r4, #16]
 800c078:	60c6      	str	r6, [r0, #12]
 800c07a:	692e      	ldr	r6, [r5, #16]
 800c07c:	f104 0014 	add.w	r0, r4, #20
 800c080:	f105 0914 	add.w	r9, r5, #20
 800c084:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c088:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c08c:	3410      	adds	r4, #16
 800c08e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c092:	f859 3b04 	ldr.w	r3, [r9], #4
 800c096:	fa1f f18b 	uxth.w	r1, fp
 800c09a:	448c      	add	ip, r1
 800c09c:	b299      	uxth	r1, r3
 800c09e:	0c1b      	lsrs	r3, r3, #16
 800c0a0:	ebac 0101 	sub.w	r1, ip, r1
 800c0a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c0a8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c0ac:	b289      	uxth	r1, r1
 800c0ae:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c0b2:	454e      	cmp	r6, r9
 800c0b4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c0b8:	f84a 3b04 	str.w	r3, [sl], #4
 800c0bc:	d8e7      	bhi.n	800c08e <__mdiff+0x7e>
 800c0be:	1b73      	subs	r3, r6, r5
 800c0c0:	3b15      	subs	r3, #21
 800c0c2:	f023 0303 	bic.w	r3, r3, #3
 800c0c6:	3515      	adds	r5, #21
 800c0c8:	3304      	adds	r3, #4
 800c0ca:	42ae      	cmp	r6, r5
 800c0cc:	bf38      	it	cc
 800c0ce:	2304      	movcc	r3, #4
 800c0d0:	4418      	add	r0, r3
 800c0d2:	4443      	add	r3, r8
 800c0d4:	461e      	mov	r6, r3
 800c0d6:	4605      	mov	r5, r0
 800c0d8:	4575      	cmp	r5, lr
 800c0da:	d30e      	bcc.n	800c0fa <__mdiff+0xea>
 800c0dc:	f10e 0103 	add.w	r1, lr, #3
 800c0e0:	1a09      	subs	r1, r1, r0
 800c0e2:	f021 0103 	bic.w	r1, r1, #3
 800c0e6:	3803      	subs	r0, #3
 800c0e8:	4586      	cmp	lr, r0
 800c0ea:	bf38      	it	cc
 800c0ec:	2100      	movcc	r1, #0
 800c0ee:	4419      	add	r1, r3
 800c0f0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c0f4:	b18b      	cbz	r3, 800c11a <__mdiff+0x10a>
 800c0f6:	6117      	str	r7, [r2, #16]
 800c0f8:	e7a4      	b.n	800c044 <__mdiff+0x34>
 800c0fa:	f855 8b04 	ldr.w	r8, [r5], #4
 800c0fe:	fa1f f188 	uxth.w	r1, r8
 800c102:	4461      	add	r1, ip
 800c104:	140c      	asrs	r4, r1, #16
 800c106:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c10a:	b289      	uxth	r1, r1
 800c10c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c110:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c114:	f846 1b04 	str.w	r1, [r6], #4
 800c118:	e7de      	b.n	800c0d8 <__mdiff+0xc8>
 800c11a:	3f01      	subs	r7, #1
 800c11c:	e7e8      	b.n	800c0f0 <__mdiff+0xe0>
 800c11e:	bf00      	nop
 800c120:	0800d3d3 	.word	0x0800d3d3
 800c124:	0800d3e4 	.word	0x0800d3e4

0800c128 <__d2b>:
 800c128:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c12c:	2101      	movs	r1, #1
 800c12e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c132:	4690      	mov	r8, r2
 800c134:	461d      	mov	r5, r3
 800c136:	f7ff fcd1 	bl	800badc <_Balloc>
 800c13a:	4604      	mov	r4, r0
 800c13c:	b930      	cbnz	r0, 800c14c <__d2b+0x24>
 800c13e:	4602      	mov	r2, r0
 800c140:	f240 310a 	movw	r1, #778	; 0x30a
 800c144:	4b24      	ldr	r3, [pc, #144]	; (800c1d8 <__d2b+0xb0>)
 800c146:	4825      	ldr	r0, [pc, #148]	; (800c1dc <__d2b+0xb4>)
 800c148:	f000 faa6 	bl	800c698 <__assert_func>
 800c14c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c150:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c154:	bb2d      	cbnz	r5, 800c1a2 <__d2b+0x7a>
 800c156:	9301      	str	r3, [sp, #4]
 800c158:	f1b8 0300 	subs.w	r3, r8, #0
 800c15c:	d026      	beq.n	800c1ac <__d2b+0x84>
 800c15e:	4668      	mov	r0, sp
 800c160:	9300      	str	r3, [sp, #0]
 800c162:	f7ff fd83 	bl	800bc6c <__lo0bits>
 800c166:	9900      	ldr	r1, [sp, #0]
 800c168:	b1f0      	cbz	r0, 800c1a8 <__d2b+0x80>
 800c16a:	9a01      	ldr	r2, [sp, #4]
 800c16c:	f1c0 0320 	rsb	r3, r0, #32
 800c170:	fa02 f303 	lsl.w	r3, r2, r3
 800c174:	430b      	orrs	r3, r1
 800c176:	40c2      	lsrs	r2, r0
 800c178:	6163      	str	r3, [r4, #20]
 800c17a:	9201      	str	r2, [sp, #4]
 800c17c:	9b01      	ldr	r3, [sp, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	bf14      	ite	ne
 800c182:	2102      	movne	r1, #2
 800c184:	2101      	moveq	r1, #1
 800c186:	61a3      	str	r3, [r4, #24]
 800c188:	6121      	str	r1, [r4, #16]
 800c18a:	b1c5      	cbz	r5, 800c1be <__d2b+0x96>
 800c18c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c190:	4405      	add	r5, r0
 800c192:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c196:	603d      	str	r5, [r7, #0]
 800c198:	6030      	str	r0, [r6, #0]
 800c19a:	4620      	mov	r0, r4
 800c19c:	b002      	add	sp, #8
 800c19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1a6:	e7d6      	b.n	800c156 <__d2b+0x2e>
 800c1a8:	6161      	str	r1, [r4, #20]
 800c1aa:	e7e7      	b.n	800c17c <__d2b+0x54>
 800c1ac:	a801      	add	r0, sp, #4
 800c1ae:	f7ff fd5d 	bl	800bc6c <__lo0bits>
 800c1b2:	2101      	movs	r1, #1
 800c1b4:	9b01      	ldr	r3, [sp, #4]
 800c1b6:	6121      	str	r1, [r4, #16]
 800c1b8:	6163      	str	r3, [r4, #20]
 800c1ba:	3020      	adds	r0, #32
 800c1bc:	e7e5      	b.n	800c18a <__d2b+0x62>
 800c1be:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c1c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c1c6:	6038      	str	r0, [r7, #0]
 800c1c8:	6918      	ldr	r0, [r3, #16]
 800c1ca:	f7ff fd2f 	bl	800bc2c <__hi0bits>
 800c1ce:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c1d2:	6031      	str	r1, [r6, #0]
 800c1d4:	e7e1      	b.n	800c19a <__d2b+0x72>
 800c1d6:	bf00      	nop
 800c1d8:	0800d3d3 	.word	0x0800d3d3
 800c1dc:	0800d3e4 	.word	0x0800d3e4

0800c1e0 <_calloc_r>:
 800c1e0:	b570      	push	{r4, r5, r6, lr}
 800c1e2:	fba1 5402 	umull	r5, r4, r1, r2
 800c1e6:	b934      	cbnz	r4, 800c1f6 <_calloc_r+0x16>
 800c1e8:	4629      	mov	r1, r5
 800c1ea:	f000 f875 	bl	800c2d8 <_malloc_r>
 800c1ee:	4606      	mov	r6, r0
 800c1f0:	b928      	cbnz	r0, 800c1fe <_calloc_r+0x1e>
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	bd70      	pop	{r4, r5, r6, pc}
 800c1f6:	220c      	movs	r2, #12
 800c1f8:	2600      	movs	r6, #0
 800c1fa:	6002      	str	r2, [r0, #0]
 800c1fc:	e7f9      	b.n	800c1f2 <_calloc_r+0x12>
 800c1fe:	462a      	mov	r2, r5
 800c200:	4621      	mov	r1, r4
 800c202:	f7fe f941 	bl	800a488 <memset>
 800c206:	e7f4      	b.n	800c1f2 <_calloc_r+0x12>

0800c208 <_free_r>:
 800c208:	b538      	push	{r3, r4, r5, lr}
 800c20a:	4605      	mov	r5, r0
 800c20c:	2900      	cmp	r1, #0
 800c20e:	d040      	beq.n	800c292 <_free_r+0x8a>
 800c210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c214:	1f0c      	subs	r4, r1, #4
 800c216:	2b00      	cmp	r3, #0
 800c218:	bfb8      	it	lt
 800c21a:	18e4      	addlt	r4, r4, r3
 800c21c:	f000 fa98 	bl	800c750 <__malloc_lock>
 800c220:	4a1c      	ldr	r2, [pc, #112]	; (800c294 <_free_r+0x8c>)
 800c222:	6813      	ldr	r3, [r2, #0]
 800c224:	b933      	cbnz	r3, 800c234 <_free_r+0x2c>
 800c226:	6063      	str	r3, [r4, #4]
 800c228:	6014      	str	r4, [r2, #0]
 800c22a:	4628      	mov	r0, r5
 800c22c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c230:	f000 ba94 	b.w	800c75c <__malloc_unlock>
 800c234:	42a3      	cmp	r3, r4
 800c236:	d908      	bls.n	800c24a <_free_r+0x42>
 800c238:	6820      	ldr	r0, [r4, #0]
 800c23a:	1821      	adds	r1, r4, r0
 800c23c:	428b      	cmp	r3, r1
 800c23e:	bf01      	itttt	eq
 800c240:	6819      	ldreq	r1, [r3, #0]
 800c242:	685b      	ldreq	r3, [r3, #4]
 800c244:	1809      	addeq	r1, r1, r0
 800c246:	6021      	streq	r1, [r4, #0]
 800c248:	e7ed      	b.n	800c226 <_free_r+0x1e>
 800c24a:	461a      	mov	r2, r3
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	b10b      	cbz	r3, 800c254 <_free_r+0x4c>
 800c250:	42a3      	cmp	r3, r4
 800c252:	d9fa      	bls.n	800c24a <_free_r+0x42>
 800c254:	6811      	ldr	r1, [r2, #0]
 800c256:	1850      	adds	r0, r2, r1
 800c258:	42a0      	cmp	r0, r4
 800c25a:	d10b      	bne.n	800c274 <_free_r+0x6c>
 800c25c:	6820      	ldr	r0, [r4, #0]
 800c25e:	4401      	add	r1, r0
 800c260:	1850      	adds	r0, r2, r1
 800c262:	4283      	cmp	r3, r0
 800c264:	6011      	str	r1, [r2, #0]
 800c266:	d1e0      	bne.n	800c22a <_free_r+0x22>
 800c268:	6818      	ldr	r0, [r3, #0]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	4401      	add	r1, r0
 800c26e:	6011      	str	r1, [r2, #0]
 800c270:	6053      	str	r3, [r2, #4]
 800c272:	e7da      	b.n	800c22a <_free_r+0x22>
 800c274:	d902      	bls.n	800c27c <_free_r+0x74>
 800c276:	230c      	movs	r3, #12
 800c278:	602b      	str	r3, [r5, #0]
 800c27a:	e7d6      	b.n	800c22a <_free_r+0x22>
 800c27c:	6820      	ldr	r0, [r4, #0]
 800c27e:	1821      	adds	r1, r4, r0
 800c280:	428b      	cmp	r3, r1
 800c282:	bf01      	itttt	eq
 800c284:	6819      	ldreq	r1, [r3, #0]
 800c286:	685b      	ldreq	r3, [r3, #4]
 800c288:	1809      	addeq	r1, r1, r0
 800c28a:	6021      	streq	r1, [r4, #0]
 800c28c:	6063      	str	r3, [r4, #4]
 800c28e:	6054      	str	r4, [r2, #4]
 800c290:	e7cb      	b.n	800c22a <_free_r+0x22>
 800c292:	bd38      	pop	{r3, r4, r5, pc}
 800c294:	2000096c 	.word	0x2000096c

0800c298 <sbrk_aligned>:
 800c298:	b570      	push	{r4, r5, r6, lr}
 800c29a:	4e0e      	ldr	r6, [pc, #56]	; (800c2d4 <sbrk_aligned+0x3c>)
 800c29c:	460c      	mov	r4, r1
 800c29e:	6831      	ldr	r1, [r6, #0]
 800c2a0:	4605      	mov	r5, r0
 800c2a2:	b911      	cbnz	r1, 800c2aa <sbrk_aligned+0x12>
 800c2a4:	f000 f9e8 	bl	800c678 <_sbrk_r>
 800c2a8:	6030      	str	r0, [r6, #0]
 800c2aa:	4621      	mov	r1, r4
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	f000 f9e3 	bl	800c678 <_sbrk_r>
 800c2b2:	1c43      	adds	r3, r0, #1
 800c2b4:	d00a      	beq.n	800c2cc <sbrk_aligned+0x34>
 800c2b6:	1cc4      	adds	r4, r0, #3
 800c2b8:	f024 0403 	bic.w	r4, r4, #3
 800c2bc:	42a0      	cmp	r0, r4
 800c2be:	d007      	beq.n	800c2d0 <sbrk_aligned+0x38>
 800c2c0:	1a21      	subs	r1, r4, r0
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	f000 f9d8 	bl	800c678 <_sbrk_r>
 800c2c8:	3001      	adds	r0, #1
 800c2ca:	d101      	bne.n	800c2d0 <sbrk_aligned+0x38>
 800c2cc:	f04f 34ff 	mov.w	r4, #4294967295
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	bd70      	pop	{r4, r5, r6, pc}
 800c2d4:	20000970 	.word	0x20000970

0800c2d8 <_malloc_r>:
 800c2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2dc:	1ccd      	adds	r5, r1, #3
 800c2de:	f025 0503 	bic.w	r5, r5, #3
 800c2e2:	3508      	adds	r5, #8
 800c2e4:	2d0c      	cmp	r5, #12
 800c2e6:	bf38      	it	cc
 800c2e8:	250c      	movcc	r5, #12
 800c2ea:	2d00      	cmp	r5, #0
 800c2ec:	4607      	mov	r7, r0
 800c2ee:	db01      	blt.n	800c2f4 <_malloc_r+0x1c>
 800c2f0:	42a9      	cmp	r1, r5
 800c2f2:	d905      	bls.n	800c300 <_malloc_r+0x28>
 800c2f4:	230c      	movs	r3, #12
 800c2f6:	2600      	movs	r6, #0
 800c2f8:	603b      	str	r3, [r7, #0]
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c300:	4e2e      	ldr	r6, [pc, #184]	; (800c3bc <_malloc_r+0xe4>)
 800c302:	f000 fa25 	bl	800c750 <__malloc_lock>
 800c306:	6833      	ldr	r3, [r6, #0]
 800c308:	461c      	mov	r4, r3
 800c30a:	bb34      	cbnz	r4, 800c35a <_malloc_r+0x82>
 800c30c:	4629      	mov	r1, r5
 800c30e:	4638      	mov	r0, r7
 800c310:	f7ff ffc2 	bl	800c298 <sbrk_aligned>
 800c314:	1c43      	adds	r3, r0, #1
 800c316:	4604      	mov	r4, r0
 800c318:	d14d      	bne.n	800c3b6 <_malloc_r+0xde>
 800c31a:	6834      	ldr	r4, [r6, #0]
 800c31c:	4626      	mov	r6, r4
 800c31e:	2e00      	cmp	r6, #0
 800c320:	d140      	bne.n	800c3a4 <_malloc_r+0xcc>
 800c322:	6823      	ldr	r3, [r4, #0]
 800c324:	4631      	mov	r1, r6
 800c326:	4638      	mov	r0, r7
 800c328:	eb04 0803 	add.w	r8, r4, r3
 800c32c:	f000 f9a4 	bl	800c678 <_sbrk_r>
 800c330:	4580      	cmp	r8, r0
 800c332:	d13a      	bne.n	800c3aa <_malloc_r+0xd2>
 800c334:	6821      	ldr	r1, [r4, #0]
 800c336:	3503      	adds	r5, #3
 800c338:	1a6d      	subs	r5, r5, r1
 800c33a:	f025 0503 	bic.w	r5, r5, #3
 800c33e:	3508      	adds	r5, #8
 800c340:	2d0c      	cmp	r5, #12
 800c342:	bf38      	it	cc
 800c344:	250c      	movcc	r5, #12
 800c346:	4638      	mov	r0, r7
 800c348:	4629      	mov	r1, r5
 800c34a:	f7ff ffa5 	bl	800c298 <sbrk_aligned>
 800c34e:	3001      	adds	r0, #1
 800c350:	d02b      	beq.n	800c3aa <_malloc_r+0xd2>
 800c352:	6823      	ldr	r3, [r4, #0]
 800c354:	442b      	add	r3, r5
 800c356:	6023      	str	r3, [r4, #0]
 800c358:	e00e      	b.n	800c378 <_malloc_r+0xa0>
 800c35a:	6822      	ldr	r2, [r4, #0]
 800c35c:	1b52      	subs	r2, r2, r5
 800c35e:	d41e      	bmi.n	800c39e <_malloc_r+0xc6>
 800c360:	2a0b      	cmp	r2, #11
 800c362:	d916      	bls.n	800c392 <_malloc_r+0xba>
 800c364:	1961      	adds	r1, r4, r5
 800c366:	42a3      	cmp	r3, r4
 800c368:	6025      	str	r5, [r4, #0]
 800c36a:	bf18      	it	ne
 800c36c:	6059      	strne	r1, [r3, #4]
 800c36e:	6863      	ldr	r3, [r4, #4]
 800c370:	bf08      	it	eq
 800c372:	6031      	streq	r1, [r6, #0]
 800c374:	5162      	str	r2, [r4, r5]
 800c376:	604b      	str	r3, [r1, #4]
 800c378:	4638      	mov	r0, r7
 800c37a:	f104 060b 	add.w	r6, r4, #11
 800c37e:	f000 f9ed 	bl	800c75c <__malloc_unlock>
 800c382:	f026 0607 	bic.w	r6, r6, #7
 800c386:	1d23      	adds	r3, r4, #4
 800c388:	1af2      	subs	r2, r6, r3
 800c38a:	d0b6      	beq.n	800c2fa <_malloc_r+0x22>
 800c38c:	1b9b      	subs	r3, r3, r6
 800c38e:	50a3      	str	r3, [r4, r2]
 800c390:	e7b3      	b.n	800c2fa <_malloc_r+0x22>
 800c392:	6862      	ldr	r2, [r4, #4]
 800c394:	42a3      	cmp	r3, r4
 800c396:	bf0c      	ite	eq
 800c398:	6032      	streq	r2, [r6, #0]
 800c39a:	605a      	strne	r2, [r3, #4]
 800c39c:	e7ec      	b.n	800c378 <_malloc_r+0xa0>
 800c39e:	4623      	mov	r3, r4
 800c3a0:	6864      	ldr	r4, [r4, #4]
 800c3a2:	e7b2      	b.n	800c30a <_malloc_r+0x32>
 800c3a4:	4634      	mov	r4, r6
 800c3a6:	6876      	ldr	r6, [r6, #4]
 800c3a8:	e7b9      	b.n	800c31e <_malloc_r+0x46>
 800c3aa:	230c      	movs	r3, #12
 800c3ac:	4638      	mov	r0, r7
 800c3ae:	603b      	str	r3, [r7, #0]
 800c3b0:	f000 f9d4 	bl	800c75c <__malloc_unlock>
 800c3b4:	e7a1      	b.n	800c2fa <_malloc_r+0x22>
 800c3b6:	6025      	str	r5, [r4, #0]
 800c3b8:	e7de      	b.n	800c378 <_malloc_r+0xa0>
 800c3ba:	bf00      	nop
 800c3bc:	2000096c 	.word	0x2000096c

0800c3c0 <__ssputs_r>:
 800c3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3c4:	688e      	ldr	r6, [r1, #8]
 800c3c6:	4682      	mov	sl, r0
 800c3c8:	429e      	cmp	r6, r3
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	4690      	mov	r8, r2
 800c3ce:	461f      	mov	r7, r3
 800c3d0:	d838      	bhi.n	800c444 <__ssputs_r+0x84>
 800c3d2:	898a      	ldrh	r2, [r1, #12]
 800c3d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3d8:	d032      	beq.n	800c440 <__ssputs_r+0x80>
 800c3da:	6825      	ldr	r5, [r4, #0]
 800c3dc:	6909      	ldr	r1, [r1, #16]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	eba5 0901 	sub.w	r9, r5, r1
 800c3e4:	6965      	ldr	r5, [r4, #20]
 800c3e6:	444b      	add	r3, r9
 800c3e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3f0:	106d      	asrs	r5, r5, #1
 800c3f2:	429d      	cmp	r5, r3
 800c3f4:	bf38      	it	cc
 800c3f6:	461d      	movcc	r5, r3
 800c3f8:	0553      	lsls	r3, r2, #21
 800c3fa:	d531      	bpl.n	800c460 <__ssputs_r+0xa0>
 800c3fc:	4629      	mov	r1, r5
 800c3fe:	f7ff ff6b 	bl	800c2d8 <_malloc_r>
 800c402:	4606      	mov	r6, r0
 800c404:	b950      	cbnz	r0, 800c41c <__ssputs_r+0x5c>
 800c406:	230c      	movs	r3, #12
 800c408:	f04f 30ff 	mov.w	r0, #4294967295
 800c40c:	f8ca 3000 	str.w	r3, [sl]
 800c410:	89a3      	ldrh	r3, [r4, #12]
 800c412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c416:	81a3      	strh	r3, [r4, #12]
 800c418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c41c:	464a      	mov	r2, r9
 800c41e:	6921      	ldr	r1, [r4, #16]
 800c420:	f7ff fb4e 	bl	800bac0 <memcpy>
 800c424:	89a3      	ldrh	r3, [r4, #12]
 800c426:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c42a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c42e:	81a3      	strh	r3, [r4, #12]
 800c430:	6126      	str	r6, [r4, #16]
 800c432:	444e      	add	r6, r9
 800c434:	6026      	str	r6, [r4, #0]
 800c436:	463e      	mov	r6, r7
 800c438:	6165      	str	r5, [r4, #20]
 800c43a:	eba5 0509 	sub.w	r5, r5, r9
 800c43e:	60a5      	str	r5, [r4, #8]
 800c440:	42be      	cmp	r6, r7
 800c442:	d900      	bls.n	800c446 <__ssputs_r+0x86>
 800c444:	463e      	mov	r6, r7
 800c446:	4632      	mov	r2, r6
 800c448:	4641      	mov	r1, r8
 800c44a:	6820      	ldr	r0, [r4, #0]
 800c44c:	f000 f966 	bl	800c71c <memmove>
 800c450:	68a3      	ldr	r3, [r4, #8]
 800c452:	2000      	movs	r0, #0
 800c454:	1b9b      	subs	r3, r3, r6
 800c456:	60a3      	str	r3, [r4, #8]
 800c458:	6823      	ldr	r3, [r4, #0]
 800c45a:	4433      	add	r3, r6
 800c45c:	6023      	str	r3, [r4, #0]
 800c45e:	e7db      	b.n	800c418 <__ssputs_r+0x58>
 800c460:	462a      	mov	r2, r5
 800c462:	f000 f981 	bl	800c768 <_realloc_r>
 800c466:	4606      	mov	r6, r0
 800c468:	2800      	cmp	r0, #0
 800c46a:	d1e1      	bne.n	800c430 <__ssputs_r+0x70>
 800c46c:	4650      	mov	r0, sl
 800c46e:	6921      	ldr	r1, [r4, #16]
 800c470:	f7ff feca 	bl	800c208 <_free_r>
 800c474:	e7c7      	b.n	800c406 <__ssputs_r+0x46>
	...

0800c478 <_svfiprintf_r>:
 800c478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c47c:	4698      	mov	r8, r3
 800c47e:	898b      	ldrh	r3, [r1, #12]
 800c480:	4607      	mov	r7, r0
 800c482:	061b      	lsls	r3, r3, #24
 800c484:	460d      	mov	r5, r1
 800c486:	4614      	mov	r4, r2
 800c488:	b09d      	sub	sp, #116	; 0x74
 800c48a:	d50e      	bpl.n	800c4aa <_svfiprintf_r+0x32>
 800c48c:	690b      	ldr	r3, [r1, #16]
 800c48e:	b963      	cbnz	r3, 800c4aa <_svfiprintf_r+0x32>
 800c490:	2140      	movs	r1, #64	; 0x40
 800c492:	f7ff ff21 	bl	800c2d8 <_malloc_r>
 800c496:	6028      	str	r0, [r5, #0]
 800c498:	6128      	str	r0, [r5, #16]
 800c49a:	b920      	cbnz	r0, 800c4a6 <_svfiprintf_r+0x2e>
 800c49c:	230c      	movs	r3, #12
 800c49e:	603b      	str	r3, [r7, #0]
 800c4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a4:	e0d1      	b.n	800c64a <_svfiprintf_r+0x1d2>
 800c4a6:	2340      	movs	r3, #64	; 0x40
 800c4a8:	616b      	str	r3, [r5, #20]
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c4ae:	2320      	movs	r3, #32
 800c4b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4b4:	2330      	movs	r3, #48	; 0x30
 800c4b6:	f04f 0901 	mov.w	r9, #1
 800c4ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c664 <_svfiprintf_r+0x1ec>
 800c4c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4c6:	4623      	mov	r3, r4
 800c4c8:	469a      	mov	sl, r3
 800c4ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4ce:	b10a      	cbz	r2, 800c4d4 <_svfiprintf_r+0x5c>
 800c4d0:	2a25      	cmp	r2, #37	; 0x25
 800c4d2:	d1f9      	bne.n	800c4c8 <_svfiprintf_r+0x50>
 800c4d4:	ebba 0b04 	subs.w	fp, sl, r4
 800c4d8:	d00b      	beq.n	800c4f2 <_svfiprintf_r+0x7a>
 800c4da:	465b      	mov	r3, fp
 800c4dc:	4622      	mov	r2, r4
 800c4de:	4629      	mov	r1, r5
 800c4e0:	4638      	mov	r0, r7
 800c4e2:	f7ff ff6d 	bl	800c3c0 <__ssputs_r>
 800c4e6:	3001      	adds	r0, #1
 800c4e8:	f000 80aa 	beq.w	800c640 <_svfiprintf_r+0x1c8>
 800c4ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4ee:	445a      	add	r2, fp
 800c4f0:	9209      	str	r2, [sp, #36]	; 0x24
 800c4f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	f000 80a2 	beq.w	800c640 <_svfiprintf_r+0x1c8>
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c502:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c506:	f10a 0a01 	add.w	sl, sl, #1
 800c50a:	9304      	str	r3, [sp, #16]
 800c50c:	9307      	str	r3, [sp, #28]
 800c50e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c512:	931a      	str	r3, [sp, #104]	; 0x68
 800c514:	4654      	mov	r4, sl
 800c516:	2205      	movs	r2, #5
 800c518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c51c:	4851      	ldr	r0, [pc, #324]	; (800c664 <_svfiprintf_r+0x1ec>)
 800c51e:	f7ff fac1 	bl	800baa4 <memchr>
 800c522:	9a04      	ldr	r2, [sp, #16]
 800c524:	b9d8      	cbnz	r0, 800c55e <_svfiprintf_r+0xe6>
 800c526:	06d0      	lsls	r0, r2, #27
 800c528:	bf44      	itt	mi
 800c52a:	2320      	movmi	r3, #32
 800c52c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c530:	0711      	lsls	r1, r2, #28
 800c532:	bf44      	itt	mi
 800c534:	232b      	movmi	r3, #43	; 0x2b
 800c536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c53a:	f89a 3000 	ldrb.w	r3, [sl]
 800c53e:	2b2a      	cmp	r3, #42	; 0x2a
 800c540:	d015      	beq.n	800c56e <_svfiprintf_r+0xf6>
 800c542:	4654      	mov	r4, sl
 800c544:	2000      	movs	r0, #0
 800c546:	f04f 0c0a 	mov.w	ip, #10
 800c54a:	9a07      	ldr	r2, [sp, #28]
 800c54c:	4621      	mov	r1, r4
 800c54e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c552:	3b30      	subs	r3, #48	; 0x30
 800c554:	2b09      	cmp	r3, #9
 800c556:	d94e      	bls.n	800c5f6 <_svfiprintf_r+0x17e>
 800c558:	b1b0      	cbz	r0, 800c588 <_svfiprintf_r+0x110>
 800c55a:	9207      	str	r2, [sp, #28]
 800c55c:	e014      	b.n	800c588 <_svfiprintf_r+0x110>
 800c55e:	eba0 0308 	sub.w	r3, r0, r8
 800c562:	fa09 f303 	lsl.w	r3, r9, r3
 800c566:	4313      	orrs	r3, r2
 800c568:	46a2      	mov	sl, r4
 800c56a:	9304      	str	r3, [sp, #16]
 800c56c:	e7d2      	b.n	800c514 <_svfiprintf_r+0x9c>
 800c56e:	9b03      	ldr	r3, [sp, #12]
 800c570:	1d19      	adds	r1, r3, #4
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	9103      	str	r1, [sp, #12]
 800c576:	2b00      	cmp	r3, #0
 800c578:	bfbb      	ittet	lt
 800c57a:	425b      	neglt	r3, r3
 800c57c:	f042 0202 	orrlt.w	r2, r2, #2
 800c580:	9307      	strge	r3, [sp, #28]
 800c582:	9307      	strlt	r3, [sp, #28]
 800c584:	bfb8      	it	lt
 800c586:	9204      	strlt	r2, [sp, #16]
 800c588:	7823      	ldrb	r3, [r4, #0]
 800c58a:	2b2e      	cmp	r3, #46	; 0x2e
 800c58c:	d10c      	bne.n	800c5a8 <_svfiprintf_r+0x130>
 800c58e:	7863      	ldrb	r3, [r4, #1]
 800c590:	2b2a      	cmp	r3, #42	; 0x2a
 800c592:	d135      	bne.n	800c600 <_svfiprintf_r+0x188>
 800c594:	9b03      	ldr	r3, [sp, #12]
 800c596:	3402      	adds	r4, #2
 800c598:	1d1a      	adds	r2, r3, #4
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	9203      	str	r2, [sp, #12]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	bfb8      	it	lt
 800c5a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5a6:	9305      	str	r3, [sp, #20]
 800c5a8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c668 <_svfiprintf_r+0x1f0>
 800c5ac:	2203      	movs	r2, #3
 800c5ae:	4650      	mov	r0, sl
 800c5b0:	7821      	ldrb	r1, [r4, #0]
 800c5b2:	f7ff fa77 	bl	800baa4 <memchr>
 800c5b6:	b140      	cbz	r0, 800c5ca <_svfiprintf_r+0x152>
 800c5b8:	2340      	movs	r3, #64	; 0x40
 800c5ba:	eba0 000a 	sub.w	r0, r0, sl
 800c5be:	fa03 f000 	lsl.w	r0, r3, r0
 800c5c2:	9b04      	ldr	r3, [sp, #16]
 800c5c4:	3401      	adds	r4, #1
 800c5c6:	4303      	orrs	r3, r0
 800c5c8:	9304      	str	r3, [sp, #16]
 800c5ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ce:	2206      	movs	r2, #6
 800c5d0:	4826      	ldr	r0, [pc, #152]	; (800c66c <_svfiprintf_r+0x1f4>)
 800c5d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5d6:	f7ff fa65 	bl	800baa4 <memchr>
 800c5da:	2800      	cmp	r0, #0
 800c5dc:	d038      	beq.n	800c650 <_svfiprintf_r+0x1d8>
 800c5de:	4b24      	ldr	r3, [pc, #144]	; (800c670 <_svfiprintf_r+0x1f8>)
 800c5e0:	bb1b      	cbnz	r3, 800c62a <_svfiprintf_r+0x1b2>
 800c5e2:	9b03      	ldr	r3, [sp, #12]
 800c5e4:	3307      	adds	r3, #7
 800c5e6:	f023 0307 	bic.w	r3, r3, #7
 800c5ea:	3308      	adds	r3, #8
 800c5ec:	9303      	str	r3, [sp, #12]
 800c5ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5f0:	4433      	add	r3, r6
 800c5f2:	9309      	str	r3, [sp, #36]	; 0x24
 800c5f4:	e767      	b.n	800c4c6 <_svfiprintf_r+0x4e>
 800c5f6:	460c      	mov	r4, r1
 800c5f8:	2001      	movs	r0, #1
 800c5fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5fe:	e7a5      	b.n	800c54c <_svfiprintf_r+0xd4>
 800c600:	2300      	movs	r3, #0
 800c602:	f04f 0c0a 	mov.w	ip, #10
 800c606:	4619      	mov	r1, r3
 800c608:	3401      	adds	r4, #1
 800c60a:	9305      	str	r3, [sp, #20]
 800c60c:	4620      	mov	r0, r4
 800c60e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c612:	3a30      	subs	r2, #48	; 0x30
 800c614:	2a09      	cmp	r2, #9
 800c616:	d903      	bls.n	800c620 <_svfiprintf_r+0x1a8>
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d0c5      	beq.n	800c5a8 <_svfiprintf_r+0x130>
 800c61c:	9105      	str	r1, [sp, #20]
 800c61e:	e7c3      	b.n	800c5a8 <_svfiprintf_r+0x130>
 800c620:	4604      	mov	r4, r0
 800c622:	2301      	movs	r3, #1
 800c624:	fb0c 2101 	mla	r1, ip, r1, r2
 800c628:	e7f0      	b.n	800c60c <_svfiprintf_r+0x194>
 800c62a:	ab03      	add	r3, sp, #12
 800c62c:	9300      	str	r3, [sp, #0]
 800c62e:	462a      	mov	r2, r5
 800c630:	4638      	mov	r0, r7
 800c632:	4b10      	ldr	r3, [pc, #64]	; (800c674 <_svfiprintf_r+0x1fc>)
 800c634:	a904      	add	r1, sp, #16
 800c636:	f7fd ffcd 	bl	800a5d4 <_printf_float>
 800c63a:	1c42      	adds	r2, r0, #1
 800c63c:	4606      	mov	r6, r0
 800c63e:	d1d6      	bne.n	800c5ee <_svfiprintf_r+0x176>
 800c640:	89ab      	ldrh	r3, [r5, #12]
 800c642:	065b      	lsls	r3, r3, #25
 800c644:	f53f af2c 	bmi.w	800c4a0 <_svfiprintf_r+0x28>
 800c648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c64a:	b01d      	add	sp, #116	; 0x74
 800c64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c650:	ab03      	add	r3, sp, #12
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	462a      	mov	r2, r5
 800c656:	4638      	mov	r0, r7
 800c658:	4b06      	ldr	r3, [pc, #24]	; (800c674 <_svfiprintf_r+0x1fc>)
 800c65a:	a904      	add	r1, sp, #16
 800c65c:	f7fe fa56 	bl	800ab0c <_printf_i>
 800c660:	e7eb      	b.n	800c63a <_svfiprintf_r+0x1c2>
 800c662:	bf00      	nop
 800c664:	0800d53c 	.word	0x0800d53c
 800c668:	0800d542 	.word	0x0800d542
 800c66c:	0800d546 	.word	0x0800d546
 800c670:	0800a5d5 	.word	0x0800a5d5
 800c674:	0800c3c1 	.word	0x0800c3c1

0800c678 <_sbrk_r>:
 800c678:	b538      	push	{r3, r4, r5, lr}
 800c67a:	2300      	movs	r3, #0
 800c67c:	4d05      	ldr	r5, [pc, #20]	; (800c694 <_sbrk_r+0x1c>)
 800c67e:	4604      	mov	r4, r0
 800c680:	4608      	mov	r0, r1
 800c682:	602b      	str	r3, [r5, #0]
 800c684:	f7f6 feac 	bl	80033e0 <_sbrk>
 800c688:	1c43      	adds	r3, r0, #1
 800c68a:	d102      	bne.n	800c692 <_sbrk_r+0x1a>
 800c68c:	682b      	ldr	r3, [r5, #0]
 800c68e:	b103      	cbz	r3, 800c692 <_sbrk_r+0x1a>
 800c690:	6023      	str	r3, [r4, #0]
 800c692:	bd38      	pop	{r3, r4, r5, pc}
 800c694:	20000974 	.word	0x20000974

0800c698 <__assert_func>:
 800c698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c69a:	4614      	mov	r4, r2
 800c69c:	461a      	mov	r2, r3
 800c69e:	4b09      	ldr	r3, [pc, #36]	; (800c6c4 <__assert_func+0x2c>)
 800c6a0:	4605      	mov	r5, r0
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	68d8      	ldr	r0, [r3, #12]
 800c6a6:	b14c      	cbz	r4, 800c6bc <__assert_func+0x24>
 800c6a8:	4b07      	ldr	r3, [pc, #28]	; (800c6c8 <__assert_func+0x30>)
 800c6aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c6ae:	9100      	str	r1, [sp, #0]
 800c6b0:	462b      	mov	r3, r5
 800c6b2:	4906      	ldr	r1, [pc, #24]	; (800c6cc <__assert_func+0x34>)
 800c6b4:	f000 f80e 	bl	800c6d4 <fiprintf>
 800c6b8:	f000 faaa 	bl	800cc10 <abort>
 800c6bc:	4b04      	ldr	r3, [pc, #16]	; (800c6d0 <__assert_func+0x38>)
 800c6be:	461c      	mov	r4, r3
 800c6c0:	e7f3      	b.n	800c6aa <__assert_func+0x12>
 800c6c2:	bf00      	nop
 800c6c4:	2000006c 	.word	0x2000006c
 800c6c8:	0800d54d 	.word	0x0800d54d
 800c6cc:	0800d55a 	.word	0x0800d55a
 800c6d0:	0800d588 	.word	0x0800d588

0800c6d4 <fiprintf>:
 800c6d4:	b40e      	push	{r1, r2, r3}
 800c6d6:	b503      	push	{r0, r1, lr}
 800c6d8:	4601      	mov	r1, r0
 800c6da:	ab03      	add	r3, sp, #12
 800c6dc:	4805      	ldr	r0, [pc, #20]	; (800c6f4 <fiprintf+0x20>)
 800c6de:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6e2:	6800      	ldr	r0, [r0, #0]
 800c6e4:	9301      	str	r3, [sp, #4]
 800c6e6:	f000 f895 	bl	800c814 <_vfiprintf_r>
 800c6ea:	b002      	add	sp, #8
 800c6ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6f0:	b003      	add	sp, #12
 800c6f2:	4770      	bx	lr
 800c6f4:	2000006c 	.word	0x2000006c

0800c6f8 <__ascii_mbtowc>:
 800c6f8:	b082      	sub	sp, #8
 800c6fa:	b901      	cbnz	r1, 800c6fe <__ascii_mbtowc+0x6>
 800c6fc:	a901      	add	r1, sp, #4
 800c6fe:	b142      	cbz	r2, 800c712 <__ascii_mbtowc+0x1a>
 800c700:	b14b      	cbz	r3, 800c716 <__ascii_mbtowc+0x1e>
 800c702:	7813      	ldrb	r3, [r2, #0]
 800c704:	600b      	str	r3, [r1, #0]
 800c706:	7812      	ldrb	r2, [r2, #0]
 800c708:	1e10      	subs	r0, r2, #0
 800c70a:	bf18      	it	ne
 800c70c:	2001      	movne	r0, #1
 800c70e:	b002      	add	sp, #8
 800c710:	4770      	bx	lr
 800c712:	4610      	mov	r0, r2
 800c714:	e7fb      	b.n	800c70e <__ascii_mbtowc+0x16>
 800c716:	f06f 0001 	mvn.w	r0, #1
 800c71a:	e7f8      	b.n	800c70e <__ascii_mbtowc+0x16>

0800c71c <memmove>:
 800c71c:	4288      	cmp	r0, r1
 800c71e:	b510      	push	{r4, lr}
 800c720:	eb01 0402 	add.w	r4, r1, r2
 800c724:	d902      	bls.n	800c72c <memmove+0x10>
 800c726:	4284      	cmp	r4, r0
 800c728:	4623      	mov	r3, r4
 800c72a:	d807      	bhi.n	800c73c <memmove+0x20>
 800c72c:	1e43      	subs	r3, r0, #1
 800c72e:	42a1      	cmp	r1, r4
 800c730:	d008      	beq.n	800c744 <memmove+0x28>
 800c732:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c736:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c73a:	e7f8      	b.n	800c72e <memmove+0x12>
 800c73c:	4601      	mov	r1, r0
 800c73e:	4402      	add	r2, r0
 800c740:	428a      	cmp	r2, r1
 800c742:	d100      	bne.n	800c746 <memmove+0x2a>
 800c744:	bd10      	pop	{r4, pc}
 800c746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c74a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c74e:	e7f7      	b.n	800c740 <memmove+0x24>

0800c750 <__malloc_lock>:
 800c750:	4801      	ldr	r0, [pc, #4]	; (800c758 <__malloc_lock+0x8>)
 800c752:	f000 bc19 	b.w	800cf88 <__retarget_lock_acquire_recursive>
 800c756:	bf00      	nop
 800c758:	20000978 	.word	0x20000978

0800c75c <__malloc_unlock>:
 800c75c:	4801      	ldr	r0, [pc, #4]	; (800c764 <__malloc_unlock+0x8>)
 800c75e:	f000 bc14 	b.w	800cf8a <__retarget_lock_release_recursive>
 800c762:	bf00      	nop
 800c764:	20000978 	.word	0x20000978

0800c768 <_realloc_r>:
 800c768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c76c:	4680      	mov	r8, r0
 800c76e:	4614      	mov	r4, r2
 800c770:	460e      	mov	r6, r1
 800c772:	b921      	cbnz	r1, 800c77e <_realloc_r+0x16>
 800c774:	4611      	mov	r1, r2
 800c776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c77a:	f7ff bdad 	b.w	800c2d8 <_malloc_r>
 800c77e:	b92a      	cbnz	r2, 800c78c <_realloc_r+0x24>
 800c780:	f7ff fd42 	bl	800c208 <_free_r>
 800c784:	4625      	mov	r5, r4
 800c786:	4628      	mov	r0, r5
 800c788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c78c:	f000 fc64 	bl	800d058 <_malloc_usable_size_r>
 800c790:	4284      	cmp	r4, r0
 800c792:	4607      	mov	r7, r0
 800c794:	d802      	bhi.n	800c79c <_realloc_r+0x34>
 800c796:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c79a:	d812      	bhi.n	800c7c2 <_realloc_r+0x5a>
 800c79c:	4621      	mov	r1, r4
 800c79e:	4640      	mov	r0, r8
 800c7a0:	f7ff fd9a 	bl	800c2d8 <_malloc_r>
 800c7a4:	4605      	mov	r5, r0
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	d0ed      	beq.n	800c786 <_realloc_r+0x1e>
 800c7aa:	42bc      	cmp	r4, r7
 800c7ac:	4622      	mov	r2, r4
 800c7ae:	4631      	mov	r1, r6
 800c7b0:	bf28      	it	cs
 800c7b2:	463a      	movcs	r2, r7
 800c7b4:	f7ff f984 	bl	800bac0 <memcpy>
 800c7b8:	4631      	mov	r1, r6
 800c7ba:	4640      	mov	r0, r8
 800c7bc:	f7ff fd24 	bl	800c208 <_free_r>
 800c7c0:	e7e1      	b.n	800c786 <_realloc_r+0x1e>
 800c7c2:	4635      	mov	r5, r6
 800c7c4:	e7df      	b.n	800c786 <_realloc_r+0x1e>

0800c7c6 <__sfputc_r>:
 800c7c6:	6893      	ldr	r3, [r2, #8]
 800c7c8:	b410      	push	{r4}
 800c7ca:	3b01      	subs	r3, #1
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	6093      	str	r3, [r2, #8]
 800c7d0:	da07      	bge.n	800c7e2 <__sfputc_r+0x1c>
 800c7d2:	6994      	ldr	r4, [r2, #24]
 800c7d4:	42a3      	cmp	r3, r4
 800c7d6:	db01      	blt.n	800c7dc <__sfputc_r+0x16>
 800c7d8:	290a      	cmp	r1, #10
 800c7da:	d102      	bne.n	800c7e2 <__sfputc_r+0x1c>
 800c7dc:	bc10      	pop	{r4}
 800c7de:	f000 b949 	b.w	800ca74 <__swbuf_r>
 800c7e2:	6813      	ldr	r3, [r2, #0]
 800c7e4:	1c58      	adds	r0, r3, #1
 800c7e6:	6010      	str	r0, [r2, #0]
 800c7e8:	7019      	strb	r1, [r3, #0]
 800c7ea:	4608      	mov	r0, r1
 800c7ec:	bc10      	pop	{r4}
 800c7ee:	4770      	bx	lr

0800c7f0 <__sfputs_r>:
 800c7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7f2:	4606      	mov	r6, r0
 800c7f4:	460f      	mov	r7, r1
 800c7f6:	4614      	mov	r4, r2
 800c7f8:	18d5      	adds	r5, r2, r3
 800c7fa:	42ac      	cmp	r4, r5
 800c7fc:	d101      	bne.n	800c802 <__sfputs_r+0x12>
 800c7fe:	2000      	movs	r0, #0
 800c800:	e007      	b.n	800c812 <__sfputs_r+0x22>
 800c802:	463a      	mov	r2, r7
 800c804:	4630      	mov	r0, r6
 800c806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c80a:	f7ff ffdc 	bl	800c7c6 <__sfputc_r>
 800c80e:	1c43      	adds	r3, r0, #1
 800c810:	d1f3      	bne.n	800c7fa <__sfputs_r+0xa>
 800c812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c814 <_vfiprintf_r>:
 800c814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c818:	460d      	mov	r5, r1
 800c81a:	4614      	mov	r4, r2
 800c81c:	4698      	mov	r8, r3
 800c81e:	4606      	mov	r6, r0
 800c820:	b09d      	sub	sp, #116	; 0x74
 800c822:	b118      	cbz	r0, 800c82c <_vfiprintf_r+0x18>
 800c824:	6983      	ldr	r3, [r0, #24]
 800c826:	b90b      	cbnz	r3, 800c82c <_vfiprintf_r+0x18>
 800c828:	f000 fb10 	bl	800ce4c <__sinit>
 800c82c:	4b89      	ldr	r3, [pc, #548]	; (800ca54 <_vfiprintf_r+0x240>)
 800c82e:	429d      	cmp	r5, r3
 800c830:	d11b      	bne.n	800c86a <_vfiprintf_r+0x56>
 800c832:	6875      	ldr	r5, [r6, #4]
 800c834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c836:	07d9      	lsls	r1, r3, #31
 800c838:	d405      	bmi.n	800c846 <_vfiprintf_r+0x32>
 800c83a:	89ab      	ldrh	r3, [r5, #12]
 800c83c:	059a      	lsls	r2, r3, #22
 800c83e:	d402      	bmi.n	800c846 <_vfiprintf_r+0x32>
 800c840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c842:	f000 fba1 	bl	800cf88 <__retarget_lock_acquire_recursive>
 800c846:	89ab      	ldrh	r3, [r5, #12]
 800c848:	071b      	lsls	r3, r3, #28
 800c84a:	d501      	bpl.n	800c850 <_vfiprintf_r+0x3c>
 800c84c:	692b      	ldr	r3, [r5, #16]
 800c84e:	b9eb      	cbnz	r3, 800c88c <_vfiprintf_r+0x78>
 800c850:	4629      	mov	r1, r5
 800c852:	4630      	mov	r0, r6
 800c854:	f000 f96e 	bl	800cb34 <__swsetup_r>
 800c858:	b1c0      	cbz	r0, 800c88c <_vfiprintf_r+0x78>
 800c85a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c85c:	07dc      	lsls	r4, r3, #31
 800c85e:	d50e      	bpl.n	800c87e <_vfiprintf_r+0x6a>
 800c860:	f04f 30ff 	mov.w	r0, #4294967295
 800c864:	b01d      	add	sp, #116	; 0x74
 800c866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c86a:	4b7b      	ldr	r3, [pc, #492]	; (800ca58 <_vfiprintf_r+0x244>)
 800c86c:	429d      	cmp	r5, r3
 800c86e:	d101      	bne.n	800c874 <_vfiprintf_r+0x60>
 800c870:	68b5      	ldr	r5, [r6, #8]
 800c872:	e7df      	b.n	800c834 <_vfiprintf_r+0x20>
 800c874:	4b79      	ldr	r3, [pc, #484]	; (800ca5c <_vfiprintf_r+0x248>)
 800c876:	429d      	cmp	r5, r3
 800c878:	bf08      	it	eq
 800c87a:	68f5      	ldreq	r5, [r6, #12]
 800c87c:	e7da      	b.n	800c834 <_vfiprintf_r+0x20>
 800c87e:	89ab      	ldrh	r3, [r5, #12]
 800c880:	0598      	lsls	r0, r3, #22
 800c882:	d4ed      	bmi.n	800c860 <_vfiprintf_r+0x4c>
 800c884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c886:	f000 fb80 	bl	800cf8a <__retarget_lock_release_recursive>
 800c88a:	e7e9      	b.n	800c860 <_vfiprintf_r+0x4c>
 800c88c:	2300      	movs	r3, #0
 800c88e:	9309      	str	r3, [sp, #36]	; 0x24
 800c890:	2320      	movs	r3, #32
 800c892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c896:	2330      	movs	r3, #48	; 0x30
 800c898:	f04f 0901 	mov.w	r9, #1
 800c89c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8a0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ca60 <_vfiprintf_r+0x24c>
 800c8a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8a8:	4623      	mov	r3, r4
 800c8aa:	469a      	mov	sl, r3
 800c8ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8b0:	b10a      	cbz	r2, 800c8b6 <_vfiprintf_r+0xa2>
 800c8b2:	2a25      	cmp	r2, #37	; 0x25
 800c8b4:	d1f9      	bne.n	800c8aa <_vfiprintf_r+0x96>
 800c8b6:	ebba 0b04 	subs.w	fp, sl, r4
 800c8ba:	d00b      	beq.n	800c8d4 <_vfiprintf_r+0xc0>
 800c8bc:	465b      	mov	r3, fp
 800c8be:	4622      	mov	r2, r4
 800c8c0:	4629      	mov	r1, r5
 800c8c2:	4630      	mov	r0, r6
 800c8c4:	f7ff ff94 	bl	800c7f0 <__sfputs_r>
 800c8c8:	3001      	adds	r0, #1
 800c8ca:	f000 80aa 	beq.w	800ca22 <_vfiprintf_r+0x20e>
 800c8ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8d0:	445a      	add	r2, fp
 800c8d2:	9209      	str	r2, [sp, #36]	; 0x24
 800c8d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	f000 80a2 	beq.w	800ca22 <_vfiprintf_r+0x20e>
 800c8de:	2300      	movs	r3, #0
 800c8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8e8:	f10a 0a01 	add.w	sl, sl, #1
 800c8ec:	9304      	str	r3, [sp, #16]
 800c8ee:	9307      	str	r3, [sp, #28]
 800c8f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8f4:	931a      	str	r3, [sp, #104]	; 0x68
 800c8f6:	4654      	mov	r4, sl
 800c8f8:	2205      	movs	r2, #5
 800c8fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8fe:	4858      	ldr	r0, [pc, #352]	; (800ca60 <_vfiprintf_r+0x24c>)
 800c900:	f7ff f8d0 	bl	800baa4 <memchr>
 800c904:	9a04      	ldr	r2, [sp, #16]
 800c906:	b9d8      	cbnz	r0, 800c940 <_vfiprintf_r+0x12c>
 800c908:	06d1      	lsls	r1, r2, #27
 800c90a:	bf44      	itt	mi
 800c90c:	2320      	movmi	r3, #32
 800c90e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c912:	0713      	lsls	r3, r2, #28
 800c914:	bf44      	itt	mi
 800c916:	232b      	movmi	r3, #43	; 0x2b
 800c918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c91c:	f89a 3000 	ldrb.w	r3, [sl]
 800c920:	2b2a      	cmp	r3, #42	; 0x2a
 800c922:	d015      	beq.n	800c950 <_vfiprintf_r+0x13c>
 800c924:	4654      	mov	r4, sl
 800c926:	2000      	movs	r0, #0
 800c928:	f04f 0c0a 	mov.w	ip, #10
 800c92c:	9a07      	ldr	r2, [sp, #28]
 800c92e:	4621      	mov	r1, r4
 800c930:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c934:	3b30      	subs	r3, #48	; 0x30
 800c936:	2b09      	cmp	r3, #9
 800c938:	d94e      	bls.n	800c9d8 <_vfiprintf_r+0x1c4>
 800c93a:	b1b0      	cbz	r0, 800c96a <_vfiprintf_r+0x156>
 800c93c:	9207      	str	r2, [sp, #28]
 800c93e:	e014      	b.n	800c96a <_vfiprintf_r+0x156>
 800c940:	eba0 0308 	sub.w	r3, r0, r8
 800c944:	fa09 f303 	lsl.w	r3, r9, r3
 800c948:	4313      	orrs	r3, r2
 800c94a:	46a2      	mov	sl, r4
 800c94c:	9304      	str	r3, [sp, #16]
 800c94e:	e7d2      	b.n	800c8f6 <_vfiprintf_r+0xe2>
 800c950:	9b03      	ldr	r3, [sp, #12]
 800c952:	1d19      	adds	r1, r3, #4
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	9103      	str	r1, [sp, #12]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	bfbb      	ittet	lt
 800c95c:	425b      	neglt	r3, r3
 800c95e:	f042 0202 	orrlt.w	r2, r2, #2
 800c962:	9307      	strge	r3, [sp, #28]
 800c964:	9307      	strlt	r3, [sp, #28]
 800c966:	bfb8      	it	lt
 800c968:	9204      	strlt	r2, [sp, #16]
 800c96a:	7823      	ldrb	r3, [r4, #0]
 800c96c:	2b2e      	cmp	r3, #46	; 0x2e
 800c96e:	d10c      	bne.n	800c98a <_vfiprintf_r+0x176>
 800c970:	7863      	ldrb	r3, [r4, #1]
 800c972:	2b2a      	cmp	r3, #42	; 0x2a
 800c974:	d135      	bne.n	800c9e2 <_vfiprintf_r+0x1ce>
 800c976:	9b03      	ldr	r3, [sp, #12]
 800c978:	3402      	adds	r4, #2
 800c97a:	1d1a      	adds	r2, r3, #4
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	9203      	str	r2, [sp, #12]
 800c980:	2b00      	cmp	r3, #0
 800c982:	bfb8      	it	lt
 800c984:	f04f 33ff 	movlt.w	r3, #4294967295
 800c988:	9305      	str	r3, [sp, #20]
 800c98a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ca64 <_vfiprintf_r+0x250>
 800c98e:	2203      	movs	r2, #3
 800c990:	4650      	mov	r0, sl
 800c992:	7821      	ldrb	r1, [r4, #0]
 800c994:	f7ff f886 	bl	800baa4 <memchr>
 800c998:	b140      	cbz	r0, 800c9ac <_vfiprintf_r+0x198>
 800c99a:	2340      	movs	r3, #64	; 0x40
 800c99c:	eba0 000a 	sub.w	r0, r0, sl
 800c9a0:	fa03 f000 	lsl.w	r0, r3, r0
 800c9a4:	9b04      	ldr	r3, [sp, #16]
 800c9a6:	3401      	adds	r4, #1
 800c9a8:	4303      	orrs	r3, r0
 800c9aa:	9304      	str	r3, [sp, #16]
 800c9ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9b0:	2206      	movs	r2, #6
 800c9b2:	482d      	ldr	r0, [pc, #180]	; (800ca68 <_vfiprintf_r+0x254>)
 800c9b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9b8:	f7ff f874 	bl	800baa4 <memchr>
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	d03f      	beq.n	800ca40 <_vfiprintf_r+0x22c>
 800c9c0:	4b2a      	ldr	r3, [pc, #168]	; (800ca6c <_vfiprintf_r+0x258>)
 800c9c2:	bb1b      	cbnz	r3, 800ca0c <_vfiprintf_r+0x1f8>
 800c9c4:	9b03      	ldr	r3, [sp, #12]
 800c9c6:	3307      	adds	r3, #7
 800c9c8:	f023 0307 	bic.w	r3, r3, #7
 800c9cc:	3308      	adds	r3, #8
 800c9ce:	9303      	str	r3, [sp, #12]
 800c9d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9d2:	443b      	add	r3, r7
 800c9d4:	9309      	str	r3, [sp, #36]	; 0x24
 800c9d6:	e767      	b.n	800c8a8 <_vfiprintf_r+0x94>
 800c9d8:	460c      	mov	r4, r1
 800c9da:	2001      	movs	r0, #1
 800c9dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9e0:	e7a5      	b.n	800c92e <_vfiprintf_r+0x11a>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	f04f 0c0a 	mov.w	ip, #10
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	3401      	adds	r4, #1
 800c9ec:	9305      	str	r3, [sp, #20]
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9f4:	3a30      	subs	r2, #48	; 0x30
 800c9f6:	2a09      	cmp	r2, #9
 800c9f8:	d903      	bls.n	800ca02 <_vfiprintf_r+0x1ee>
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d0c5      	beq.n	800c98a <_vfiprintf_r+0x176>
 800c9fe:	9105      	str	r1, [sp, #20]
 800ca00:	e7c3      	b.n	800c98a <_vfiprintf_r+0x176>
 800ca02:	4604      	mov	r4, r0
 800ca04:	2301      	movs	r3, #1
 800ca06:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca0a:	e7f0      	b.n	800c9ee <_vfiprintf_r+0x1da>
 800ca0c:	ab03      	add	r3, sp, #12
 800ca0e:	9300      	str	r3, [sp, #0]
 800ca10:	462a      	mov	r2, r5
 800ca12:	4630      	mov	r0, r6
 800ca14:	4b16      	ldr	r3, [pc, #88]	; (800ca70 <_vfiprintf_r+0x25c>)
 800ca16:	a904      	add	r1, sp, #16
 800ca18:	f7fd fddc 	bl	800a5d4 <_printf_float>
 800ca1c:	4607      	mov	r7, r0
 800ca1e:	1c78      	adds	r0, r7, #1
 800ca20:	d1d6      	bne.n	800c9d0 <_vfiprintf_r+0x1bc>
 800ca22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca24:	07d9      	lsls	r1, r3, #31
 800ca26:	d405      	bmi.n	800ca34 <_vfiprintf_r+0x220>
 800ca28:	89ab      	ldrh	r3, [r5, #12]
 800ca2a:	059a      	lsls	r2, r3, #22
 800ca2c:	d402      	bmi.n	800ca34 <_vfiprintf_r+0x220>
 800ca2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca30:	f000 faab 	bl	800cf8a <__retarget_lock_release_recursive>
 800ca34:	89ab      	ldrh	r3, [r5, #12]
 800ca36:	065b      	lsls	r3, r3, #25
 800ca38:	f53f af12 	bmi.w	800c860 <_vfiprintf_r+0x4c>
 800ca3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca3e:	e711      	b.n	800c864 <_vfiprintf_r+0x50>
 800ca40:	ab03      	add	r3, sp, #12
 800ca42:	9300      	str	r3, [sp, #0]
 800ca44:	462a      	mov	r2, r5
 800ca46:	4630      	mov	r0, r6
 800ca48:	4b09      	ldr	r3, [pc, #36]	; (800ca70 <_vfiprintf_r+0x25c>)
 800ca4a:	a904      	add	r1, sp, #16
 800ca4c:	f7fe f85e 	bl	800ab0c <_printf_i>
 800ca50:	e7e4      	b.n	800ca1c <_vfiprintf_r+0x208>
 800ca52:	bf00      	nop
 800ca54:	0800d6b4 	.word	0x0800d6b4
 800ca58:	0800d6d4 	.word	0x0800d6d4
 800ca5c:	0800d694 	.word	0x0800d694
 800ca60:	0800d53c 	.word	0x0800d53c
 800ca64:	0800d542 	.word	0x0800d542
 800ca68:	0800d546 	.word	0x0800d546
 800ca6c:	0800a5d5 	.word	0x0800a5d5
 800ca70:	0800c7f1 	.word	0x0800c7f1

0800ca74 <__swbuf_r>:
 800ca74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca76:	460e      	mov	r6, r1
 800ca78:	4614      	mov	r4, r2
 800ca7a:	4605      	mov	r5, r0
 800ca7c:	b118      	cbz	r0, 800ca86 <__swbuf_r+0x12>
 800ca7e:	6983      	ldr	r3, [r0, #24]
 800ca80:	b90b      	cbnz	r3, 800ca86 <__swbuf_r+0x12>
 800ca82:	f000 f9e3 	bl	800ce4c <__sinit>
 800ca86:	4b21      	ldr	r3, [pc, #132]	; (800cb0c <__swbuf_r+0x98>)
 800ca88:	429c      	cmp	r4, r3
 800ca8a:	d12b      	bne.n	800cae4 <__swbuf_r+0x70>
 800ca8c:	686c      	ldr	r4, [r5, #4]
 800ca8e:	69a3      	ldr	r3, [r4, #24]
 800ca90:	60a3      	str	r3, [r4, #8]
 800ca92:	89a3      	ldrh	r3, [r4, #12]
 800ca94:	071a      	lsls	r2, r3, #28
 800ca96:	d52f      	bpl.n	800caf8 <__swbuf_r+0x84>
 800ca98:	6923      	ldr	r3, [r4, #16]
 800ca9a:	b36b      	cbz	r3, 800caf8 <__swbuf_r+0x84>
 800ca9c:	6923      	ldr	r3, [r4, #16]
 800ca9e:	6820      	ldr	r0, [r4, #0]
 800caa0:	b2f6      	uxtb	r6, r6
 800caa2:	1ac0      	subs	r0, r0, r3
 800caa4:	6963      	ldr	r3, [r4, #20]
 800caa6:	4637      	mov	r7, r6
 800caa8:	4283      	cmp	r3, r0
 800caaa:	dc04      	bgt.n	800cab6 <__swbuf_r+0x42>
 800caac:	4621      	mov	r1, r4
 800caae:	4628      	mov	r0, r5
 800cab0:	f000 f938 	bl	800cd24 <_fflush_r>
 800cab4:	bb30      	cbnz	r0, 800cb04 <__swbuf_r+0x90>
 800cab6:	68a3      	ldr	r3, [r4, #8]
 800cab8:	3001      	adds	r0, #1
 800caba:	3b01      	subs	r3, #1
 800cabc:	60a3      	str	r3, [r4, #8]
 800cabe:	6823      	ldr	r3, [r4, #0]
 800cac0:	1c5a      	adds	r2, r3, #1
 800cac2:	6022      	str	r2, [r4, #0]
 800cac4:	701e      	strb	r6, [r3, #0]
 800cac6:	6963      	ldr	r3, [r4, #20]
 800cac8:	4283      	cmp	r3, r0
 800caca:	d004      	beq.n	800cad6 <__swbuf_r+0x62>
 800cacc:	89a3      	ldrh	r3, [r4, #12]
 800cace:	07db      	lsls	r3, r3, #31
 800cad0:	d506      	bpl.n	800cae0 <__swbuf_r+0x6c>
 800cad2:	2e0a      	cmp	r6, #10
 800cad4:	d104      	bne.n	800cae0 <__swbuf_r+0x6c>
 800cad6:	4621      	mov	r1, r4
 800cad8:	4628      	mov	r0, r5
 800cada:	f000 f923 	bl	800cd24 <_fflush_r>
 800cade:	b988      	cbnz	r0, 800cb04 <__swbuf_r+0x90>
 800cae0:	4638      	mov	r0, r7
 800cae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cae4:	4b0a      	ldr	r3, [pc, #40]	; (800cb10 <__swbuf_r+0x9c>)
 800cae6:	429c      	cmp	r4, r3
 800cae8:	d101      	bne.n	800caee <__swbuf_r+0x7a>
 800caea:	68ac      	ldr	r4, [r5, #8]
 800caec:	e7cf      	b.n	800ca8e <__swbuf_r+0x1a>
 800caee:	4b09      	ldr	r3, [pc, #36]	; (800cb14 <__swbuf_r+0xa0>)
 800caf0:	429c      	cmp	r4, r3
 800caf2:	bf08      	it	eq
 800caf4:	68ec      	ldreq	r4, [r5, #12]
 800caf6:	e7ca      	b.n	800ca8e <__swbuf_r+0x1a>
 800caf8:	4621      	mov	r1, r4
 800cafa:	4628      	mov	r0, r5
 800cafc:	f000 f81a 	bl	800cb34 <__swsetup_r>
 800cb00:	2800      	cmp	r0, #0
 800cb02:	d0cb      	beq.n	800ca9c <__swbuf_r+0x28>
 800cb04:	f04f 37ff 	mov.w	r7, #4294967295
 800cb08:	e7ea      	b.n	800cae0 <__swbuf_r+0x6c>
 800cb0a:	bf00      	nop
 800cb0c:	0800d6b4 	.word	0x0800d6b4
 800cb10:	0800d6d4 	.word	0x0800d6d4
 800cb14:	0800d694 	.word	0x0800d694

0800cb18 <__ascii_wctomb>:
 800cb18:	4603      	mov	r3, r0
 800cb1a:	4608      	mov	r0, r1
 800cb1c:	b141      	cbz	r1, 800cb30 <__ascii_wctomb+0x18>
 800cb1e:	2aff      	cmp	r2, #255	; 0xff
 800cb20:	d904      	bls.n	800cb2c <__ascii_wctomb+0x14>
 800cb22:	228a      	movs	r2, #138	; 0x8a
 800cb24:	f04f 30ff 	mov.w	r0, #4294967295
 800cb28:	601a      	str	r2, [r3, #0]
 800cb2a:	4770      	bx	lr
 800cb2c:	2001      	movs	r0, #1
 800cb2e:	700a      	strb	r2, [r1, #0]
 800cb30:	4770      	bx	lr
	...

0800cb34 <__swsetup_r>:
 800cb34:	4b32      	ldr	r3, [pc, #200]	; (800cc00 <__swsetup_r+0xcc>)
 800cb36:	b570      	push	{r4, r5, r6, lr}
 800cb38:	681d      	ldr	r5, [r3, #0]
 800cb3a:	4606      	mov	r6, r0
 800cb3c:	460c      	mov	r4, r1
 800cb3e:	b125      	cbz	r5, 800cb4a <__swsetup_r+0x16>
 800cb40:	69ab      	ldr	r3, [r5, #24]
 800cb42:	b913      	cbnz	r3, 800cb4a <__swsetup_r+0x16>
 800cb44:	4628      	mov	r0, r5
 800cb46:	f000 f981 	bl	800ce4c <__sinit>
 800cb4a:	4b2e      	ldr	r3, [pc, #184]	; (800cc04 <__swsetup_r+0xd0>)
 800cb4c:	429c      	cmp	r4, r3
 800cb4e:	d10f      	bne.n	800cb70 <__swsetup_r+0x3c>
 800cb50:	686c      	ldr	r4, [r5, #4]
 800cb52:	89a3      	ldrh	r3, [r4, #12]
 800cb54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb58:	0719      	lsls	r1, r3, #28
 800cb5a:	d42c      	bmi.n	800cbb6 <__swsetup_r+0x82>
 800cb5c:	06dd      	lsls	r5, r3, #27
 800cb5e:	d411      	bmi.n	800cb84 <__swsetup_r+0x50>
 800cb60:	2309      	movs	r3, #9
 800cb62:	6033      	str	r3, [r6, #0]
 800cb64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb68:	f04f 30ff 	mov.w	r0, #4294967295
 800cb6c:	81a3      	strh	r3, [r4, #12]
 800cb6e:	e03e      	b.n	800cbee <__swsetup_r+0xba>
 800cb70:	4b25      	ldr	r3, [pc, #148]	; (800cc08 <__swsetup_r+0xd4>)
 800cb72:	429c      	cmp	r4, r3
 800cb74:	d101      	bne.n	800cb7a <__swsetup_r+0x46>
 800cb76:	68ac      	ldr	r4, [r5, #8]
 800cb78:	e7eb      	b.n	800cb52 <__swsetup_r+0x1e>
 800cb7a:	4b24      	ldr	r3, [pc, #144]	; (800cc0c <__swsetup_r+0xd8>)
 800cb7c:	429c      	cmp	r4, r3
 800cb7e:	bf08      	it	eq
 800cb80:	68ec      	ldreq	r4, [r5, #12]
 800cb82:	e7e6      	b.n	800cb52 <__swsetup_r+0x1e>
 800cb84:	0758      	lsls	r0, r3, #29
 800cb86:	d512      	bpl.n	800cbae <__swsetup_r+0x7a>
 800cb88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb8a:	b141      	cbz	r1, 800cb9e <__swsetup_r+0x6a>
 800cb8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb90:	4299      	cmp	r1, r3
 800cb92:	d002      	beq.n	800cb9a <__swsetup_r+0x66>
 800cb94:	4630      	mov	r0, r6
 800cb96:	f7ff fb37 	bl	800c208 <_free_r>
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	6363      	str	r3, [r4, #52]	; 0x34
 800cb9e:	89a3      	ldrh	r3, [r4, #12]
 800cba0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cba4:	81a3      	strh	r3, [r4, #12]
 800cba6:	2300      	movs	r3, #0
 800cba8:	6063      	str	r3, [r4, #4]
 800cbaa:	6923      	ldr	r3, [r4, #16]
 800cbac:	6023      	str	r3, [r4, #0]
 800cbae:	89a3      	ldrh	r3, [r4, #12]
 800cbb0:	f043 0308 	orr.w	r3, r3, #8
 800cbb4:	81a3      	strh	r3, [r4, #12]
 800cbb6:	6923      	ldr	r3, [r4, #16]
 800cbb8:	b94b      	cbnz	r3, 800cbce <__swsetup_r+0x9a>
 800cbba:	89a3      	ldrh	r3, [r4, #12]
 800cbbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cbc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbc4:	d003      	beq.n	800cbce <__swsetup_r+0x9a>
 800cbc6:	4621      	mov	r1, r4
 800cbc8:	4630      	mov	r0, r6
 800cbca:	f000 fa05 	bl	800cfd8 <__smakebuf_r>
 800cbce:	89a0      	ldrh	r0, [r4, #12]
 800cbd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbd4:	f010 0301 	ands.w	r3, r0, #1
 800cbd8:	d00a      	beq.n	800cbf0 <__swsetup_r+0xbc>
 800cbda:	2300      	movs	r3, #0
 800cbdc:	60a3      	str	r3, [r4, #8]
 800cbde:	6963      	ldr	r3, [r4, #20]
 800cbe0:	425b      	negs	r3, r3
 800cbe2:	61a3      	str	r3, [r4, #24]
 800cbe4:	6923      	ldr	r3, [r4, #16]
 800cbe6:	b943      	cbnz	r3, 800cbfa <__swsetup_r+0xc6>
 800cbe8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cbec:	d1ba      	bne.n	800cb64 <__swsetup_r+0x30>
 800cbee:	bd70      	pop	{r4, r5, r6, pc}
 800cbf0:	0781      	lsls	r1, r0, #30
 800cbf2:	bf58      	it	pl
 800cbf4:	6963      	ldrpl	r3, [r4, #20]
 800cbf6:	60a3      	str	r3, [r4, #8]
 800cbf8:	e7f4      	b.n	800cbe4 <__swsetup_r+0xb0>
 800cbfa:	2000      	movs	r0, #0
 800cbfc:	e7f7      	b.n	800cbee <__swsetup_r+0xba>
 800cbfe:	bf00      	nop
 800cc00:	2000006c 	.word	0x2000006c
 800cc04:	0800d6b4 	.word	0x0800d6b4
 800cc08:	0800d6d4 	.word	0x0800d6d4
 800cc0c:	0800d694 	.word	0x0800d694

0800cc10 <abort>:
 800cc10:	2006      	movs	r0, #6
 800cc12:	b508      	push	{r3, lr}
 800cc14:	f000 fa50 	bl	800d0b8 <raise>
 800cc18:	2001      	movs	r0, #1
 800cc1a:	f7f6 fb6e 	bl	80032fa <_exit>
	...

0800cc20 <__sflush_r>:
 800cc20:	898a      	ldrh	r2, [r1, #12]
 800cc22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc24:	4605      	mov	r5, r0
 800cc26:	0710      	lsls	r0, r2, #28
 800cc28:	460c      	mov	r4, r1
 800cc2a:	d457      	bmi.n	800ccdc <__sflush_r+0xbc>
 800cc2c:	684b      	ldr	r3, [r1, #4]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	dc04      	bgt.n	800cc3c <__sflush_r+0x1c>
 800cc32:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	dc01      	bgt.n	800cc3c <__sflush_r+0x1c>
 800cc38:	2000      	movs	r0, #0
 800cc3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc3e:	2e00      	cmp	r6, #0
 800cc40:	d0fa      	beq.n	800cc38 <__sflush_r+0x18>
 800cc42:	2300      	movs	r3, #0
 800cc44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc48:	682f      	ldr	r7, [r5, #0]
 800cc4a:	602b      	str	r3, [r5, #0]
 800cc4c:	d032      	beq.n	800ccb4 <__sflush_r+0x94>
 800cc4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc50:	89a3      	ldrh	r3, [r4, #12]
 800cc52:	075a      	lsls	r2, r3, #29
 800cc54:	d505      	bpl.n	800cc62 <__sflush_r+0x42>
 800cc56:	6863      	ldr	r3, [r4, #4]
 800cc58:	1ac0      	subs	r0, r0, r3
 800cc5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc5c:	b10b      	cbz	r3, 800cc62 <__sflush_r+0x42>
 800cc5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc60:	1ac0      	subs	r0, r0, r3
 800cc62:	2300      	movs	r3, #0
 800cc64:	4602      	mov	r2, r0
 800cc66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc68:	4628      	mov	r0, r5
 800cc6a:	6a21      	ldr	r1, [r4, #32]
 800cc6c:	47b0      	blx	r6
 800cc6e:	1c43      	adds	r3, r0, #1
 800cc70:	89a3      	ldrh	r3, [r4, #12]
 800cc72:	d106      	bne.n	800cc82 <__sflush_r+0x62>
 800cc74:	6829      	ldr	r1, [r5, #0]
 800cc76:	291d      	cmp	r1, #29
 800cc78:	d82c      	bhi.n	800ccd4 <__sflush_r+0xb4>
 800cc7a:	4a29      	ldr	r2, [pc, #164]	; (800cd20 <__sflush_r+0x100>)
 800cc7c:	40ca      	lsrs	r2, r1
 800cc7e:	07d6      	lsls	r6, r2, #31
 800cc80:	d528      	bpl.n	800ccd4 <__sflush_r+0xb4>
 800cc82:	2200      	movs	r2, #0
 800cc84:	6062      	str	r2, [r4, #4]
 800cc86:	6922      	ldr	r2, [r4, #16]
 800cc88:	04d9      	lsls	r1, r3, #19
 800cc8a:	6022      	str	r2, [r4, #0]
 800cc8c:	d504      	bpl.n	800cc98 <__sflush_r+0x78>
 800cc8e:	1c42      	adds	r2, r0, #1
 800cc90:	d101      	bne.n	800cc96 <__sflush_r+0x76>
 800cc92:	682b      	ldr	r3, [r5, #0]
 800cc94:	b903      	cbnz	r3, 800cc98 <__sflush_r+0x78>
 800cc96:	6560      	str	r0, [r4, #84]	; 0x54
 800cc98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc9a:	602f      	str	r7, [r5, #0]
 800cc9c:	2900      	cmp	r1, #0
 800cc9e:	d0cb      	beq.n	800cc38 <__sflush_r+0x18>
 800cca0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cca4:	4299      	cmp	r1, r3
 800cca6:	d002      	beq.n	800ccae <__sflush_r+0x8e>
 800cca8:	4628      	mov	r0, r5
 800ccaa:	f7ff faad 	bl	800c208 <_free_r>
 800ccae:	2000      	movs	r0, #0
 800ccb0:	6360      	str	r0, [r4, #52]	; 0x34
 800ccb2:	e7c2      	b.n	800cc3a <__sflush_r+0x1a>
 800ccb4:	6a21      	ldr	r1, [r4, #32]
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	4628      	mov	r0, r5
 800ccba:	47b0      	blx	r6
 800ccbc:	1c41      	adds	r1, r0, #1
 800ccbe:	d1c7      	bne.n	800cc50 <__sflush_r+0x30>
 800ccc0:	682b      	ldr	r3, [r5, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d0c4      	beq.n	800cc50 <__sflush_r+0x30>
 800ccc6:	2b1d      	cmp	r3, #29
 800ccc8:	d001      	beq.n	800ccce <__sflush_r+0xae>
 800ccca:	2b16      	cmp	r3, #22
 800cccc:	d101      	bne.n	800ccd2 <__sflush_r+0xb2>
 800ccce:	602f      	str	r7, [r5, #0]
 800ccd0:	e7b2      	b.n	800cc38 <__sflush_r+0x18>
 800ccd2:	89a3      	ldrh	r3, [r4, #12]
 800ccd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccd8:	81a3      	strh	r3, [r4, #12]
 800ccda:	e7ae      	b.n	800cc3a <__sflush_r+0x1a>
 800ccdc:	690f      	ldr	r7, [r1, #16]
 800ccde:	2f00      	cmp	r7, #0
 800cce0:	d0aa      	beq.n	800cc38 <__sflush_r+0x18>
 800cce2:	0793      	lsls	r3, r2, #30
 800cce4:	bf18      	it	ne
 800cce6:	2300      	movne	r3, #0
 800cce8:	680e      	ldr	r6, [r1, #0]
 800ccea:	bf08      	it	eq
 800ccec:	694b      	ldreq	r3, [r1, #20]
 800ccee:	1bf6      	subs	r6, r6, r7
 800ccf0:	600f      	str	r7, [r1, #0]
 800ccf2:	608b      	str	r3, [r1, #8]
 800ccf4:	2e00      	cmp	r6, #0
 800ccf6:	dd9f      	ble.n	800cc38 <__sflush_r+0x18>
 800ccf8:	4633      	mov	r3, r6
 800ccfa:	463a      	mov	r2, r7
 800ccfc:	4628      	mov	r0, r5
 800ccfe:	6a21      	ldr	r1, [r4, #32]
 800cd00:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800cd04:	47e0      	blx	ip
 800cd06:	2800      	cmp	r0, #0
 800cd08:	dc06      	bgt.n	800cd18 <__sflush_r+0xf8>
 800cd0a:	89a3      	ldrh	r3, [r4, #12]
 800cd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd14:	81a3      	strh	r3, [r4, #12]
 800cd16:	e790      	b.n	800cc3a <__sflush_r+0x1a>
 800cd18:	4407      	add	r7, r0
 800cd1a:	1a36      	subs	r6, r6, r0
 800cd1c:	e7ea      	b.n	800ccf4 <__sflush_r+0xd4>
 800cd1e:	bf00      	nop
 800cd20:	20400001 	.word	0x20400001

0800cd24 <_fflush_r>:
 800cd24:	b538      	push	{r3, r4, r5, lr}
 800cd26:	690b      	ldr	r3, [r1, #16]
 800cd28:	4605      	mov	r5, r0
 800cd2a:	460c      	mov	r4, r1
 800cd2c:	b913      	cbnz	r3, 800cd34 <_fflush_r+0x10>
 800cd2e:	2500      	movs	r5, #0
 800cd30:	4628      	mov	r0, r5
 800cd32:	bd38      	pop	{r3, r4, r5, pc}
 800cd34:	b118      	cbz	r0, 800cd3e <_fflush_r+0x1a>
 800cd36:	6983      	ldr	r3, [r0, #24]
 800cd38:	b90b      	cbnz	r3, 800cd3e <_fflush_r+0x1a>
 800cd3a:	f000 f887 	bl	800ce4c <__sinit>
 800cd3e:	4b14      	ldr	r3, [pc, #80]	; (800cd90 <_fflush_r+0x6c>)
 800cd40:	429c      	cmp	r4, r3
 800cd42:	d11b      	bne.n	800cd7c <_fflush_r+0x58>
 800cd44:	686c      	ldr	r4, [r5, #4]
 800cd46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d0ef      	beq.n	800cd2e <_fflush_r+0xa>
 800cd4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd50:	07d0      	lsls	r0, r2, #31
 800cd52:	d404      	bmi.n	800cd5e <_fflush_r+0x3a>
 800cd54:	0599      	lsls	r1, r3, #22
 800cd56:	d402      	bmi.n	800cd5e <_fflush_r+0x3a>
 800cd58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd5a:	f000 f915 	bl	800cf88 <__retarget_lock_acquire_recursive>
 800cd5e:	4628      	mov	r0, r5
 800cd60:	4621      	mov	r1, r4
 800cd62:	f7ff ff5d 	bl	800cc20 <__sflush_r>
 800cd66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd68:	4605      	mov	r5, r0
 800cd6a:	07da      	lsls	r2, r3, #31
 800cd6c:	d4e0      	bmi.n	800cd30 <_fflush_r+0xc>
 800cd6e:	89a3      	ldrh	r3, [r4, #12]
 800cd70:	059b      	lsls	r3, r3, #22
 800cd72:	d4dd      	bmi.n	800cd30 <_fflush_r+0xc>
 800cd74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd76:	f000 f908 	bl	800cf8a <__retarget_lock_release_recursive>
 800cd7a:	e7d9      	b.n	800cd30 <_fflush_r+0xc>
 800cd7c:	4b05      	ldr	r3, [pc, #20]	; (800cd94 <_fflush_r+0x70>)
 800cd7e:	429c      	cmp	r4, r3
 800cd80:	d101      	bne.n	800cd86 <_fflush_r+0x62>
 800cd82:	68ac      	ldr	r4, [r5, #8]
 800cd84:	e7df      	b.n	800cd46 <_fflush_r+0x22>
 800cd86:	4b04      	ldr	r3, [pc, #16]	; (800cd98 <_fflush_r+0x74>)
 800cd88:	429c      	cmp	r4, r3
 800cd8a:	bf08      	it	eq
 800cd8c:	68ec      	ldreq	r4, [r5, #12]
 800cd8e:	e7da      	b.n	800cd46 <_fflush_r+0x22>
 800cd90:	0800d6b4 	.word	0x0800d6b4
 800cd94:	0800d6d4 	.word	0x0800d6d4
 800cd98:	0800d694 	.word	0x0800d694

0800cd9c <std>:
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	b510      	push	{r4, lr}
 800cda0:	4604      	mov	r4, r0
 800cda2:	e9c0 3300 	strd	r3, r3, [r0]
 800cda6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cdaa:	6083      	str	r3, [r0, #8]
 800cdac:	8181      	strh	r1, [r0, #12]
 800cdae:	6643      	str	r3, [r0, #100]	; 0x64
 800cdb0:	81c2      	strh	r2, [r0, #14]
 800cdb2:	6183      	str	r3, [r0, #24]
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	2208      	movs	r2, #8
 800cdb8:	305c      	adds	r0, #92	; 0x5c
 800cdba:	f7fd fb65 	bl	800a488 <memset>
 800cdbe:	4b05      	ldr	r3, [pc, #20]	; (800cdd4 <std+0x38>)
 800cdc0:	6224      	str	r4, [r4, #32]
 800cdc2:	6263      	str	r3, [r4, #36]	; 0x24
 800cdc4:	4b04      	ldr	r3, [pc, #16]	; (800cdd8 <std+0x3c>)
 800cdc6:	62a3      	str	r3, [r4, #40]	; 0x28
 800cdc8:	4b04      	ldr	r3, [pc, #16]	; (800cddc <std+0x40>)
 800cdca:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cdcc:	4b04      	ldr	r3, [pc, #16]	; (800cde0 <std+0x44>)
 800cdce:	6323      	str	r3, [r4, #48]	; 0x30
 800cdd0:	bd10      	pop	{r4, pc}
 800cdd2:	bf00      	nop
 800cdd4:	0800d0f1 	.word	0x0800d0f1
 800cdd8:	0800d113 	.word	0x0800d113
 800cddc:	0800d14b 	.word	0x0800d14b
 800cde0:	0800d16f 	.word	0x0800d16f

0800cde4 <_cleanup_r>:
 800cde4:	4901      	ldr	r1, [pc, #4]	; (800cdec <_cleanup_r+0x8>)
 800cde6:	f000 b8af 	b.w	800cf48 <_fwalk_reent>
 800cdea:	bf00      	nop
 800cdec:	0800cd25 	.word	0x0800cd25

0800cdf0 <__sfmoreglue>:
 800cdf0:	2268      	movs	r2, #104	; 0x68
 800cdf2:	b570      	push	{r4, r5, r6, lr}
 800cdf4:	1e4d      	subs	r5, r1, #1
 800cdf6:	4355      	muls	r5, r2
 800cdf8:	460e      	mov	r6, r1
 800cdfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cdfe:	f7ff fa6b 	bl	800c2d8 <_malloc_r>
 800ce02:	4604      	mov	r4, r0
 800ce04:	b140      	cbz	r0, 800ce18 <__sfmoreglue+0x28>
 800ce06:	2100      	movs	r1, #0
 800ce08:	e9c0 1600 	strd	r1, r6, [r0]
 800ce0c:	300c      	adds	r0, #12
 800ce0e:	60a0      	str	r0, [r4, #8]
 800ce10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce14:	f7fd fb38 	bl	800a488 <memset>
 800ce18:	4620      	mov	r0, r4
 800ce1a:	bd70      	pop	{r4, r5, r6, pc}

0800ce1c <__sfp_lock_acquire>:
 800ce1c:	4801      	ldr	r0, [pc, #4]	; (800ce24 <__sfp_lock_acquire+0x8>)
 800ce1e:	f000 b8b3 	b.w	800cf88 <__retarget_lock_acquire_recursive>
 800ce22:	bf00      	nop
 800ce24:	20000979 	.word	0x20000979

0800ce28 <__sfp_lock_release>:
 800ce28:	4801      	ldr	r0, [pc, #4]	; (800ce30 <__sfp_lock_release+0x8>)
 800ce2a:	f000 b8ae 	b.w	800cf8a <__retarget_lock_release_recursive>
 800ce2e:	bf00      	nop
 800ce30:	20000979 	.word	0x20000979

0800ce34 <__sinit_lock_acquire>:
 800ce34:	4801      	ldr	r0, [pc, #4]	; (800ce3c <__sinit_lock_acquire+0x8>)
 800ce36:	f000 b8a7 	b.w	800cf88 <__retarget_lock_acquire_recursive>
 800ce3a:	bf00      	nop
 800ce3c:	2000097a 	.word	0x2000097a

0800ce40 <__sinit_lock_release>:
 800ce40:	4801      	ldr	r0, [pc, #4]	; (800ce48 <__sinit_lock_release+0x8>)
 800ce42:	f000 b8a2 	b.w	800cf8a <__retarget_lock_release_recursive>
 800ce46:	bf00      	nop
 800ce48:	2000097a 	.word	0x2000097a

0800ce4c <__sinit>:
 800ce4c:	b510      	push	{r4, lr}
 800ce4e:	4604      	mov	r4, r0
 800ce50:	f7ff fff0 	bl	800ce34 <__sinit_lock_acquire>
 800ce54:	69a3      	ldr	r3, [r4, #24]
 800ce56:	b11b      	cbz	r3, 800ce60 <__sinit+0x14>
 800ce58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce5c:	f7ff bff0 	b.w	800ce40 <__sinit_lock_release>
 800ce60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce64:	6523      	str	r3, [r4, #80]	; 0x50
 800ce66:	4b13      	ldr	r3, [pc, #76]	; (800ceb4 <__sinit+0x68>)
 800ce68:	4a13      	ldr	r2, [pc, #76]	; (800ceb8 <__sinit+0x6c>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce6e:	42a3      	cmp	r3, r4
 800ce70:	bf08      	it	eq
 800ce72:	2301      	moveq	r3, #1
 800ce74:	4620      	mov	r0, r4
 800ce76:	bf08      	it	eq
 800ce78:	61a3      	streq	r3, [r4, #24]
 800ce7a:	f000 f81f 	bl	800cebc <__sfp>
 800ce7e:	6060      	str	r0, [r4, #4]
 800ce80:	4620      	mov	r0, r4
 800ce82:	f000 f81b 	bl	800cebc <__sfp>
 800ce86:	60a0      	str	r0, [r4, #8]
 800ce88:	4620      	mov	r0, r4
 800ce8a:	f000 f817 	bl	800cebc <__sfp>
 800ce8e:	2200      	movs	r2, #0
 800ce90:	2104      	movs	r1, #4
 800ce92:	60e0      	str	r0, [r4, #12]
 800ce94:	6860      	ldr	r0, [r4, #4]
 800ce96:	f7ff ff81 	bl	800cd9c <std>
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	2109      	movs	r1, #9
 800ce9e:	68a0      	ldr	r0, [r4, #8]
 800cea0:	f7ff ff7c 	bl	800cd9c <std>
 800cea4:	2202      	movs	r2, #2
 800cea6:	2112      	movs	r1, #18
 800cea8:	68e0      	ldr	r0, [r4, #12]
 800ceaa:	f7ff ff77 	bl	800cd9c <std>
 800ceae:	2301      	movs	r3, #1
 800ceb0:	61a3      	str	r3, [r4, #24]
 800ceb2:	e7d1      	b.n	800ce58 <__sinit+0xc>
 800ceb4:	0800d31c 	.word	0x0800d31c
 800ceb8:	0800cde5 	.word	0x0800cde5

0800cebc <__sfp>:
 800cebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cebe:	4607      	mov	r7, r0
 800cec0:	f7ff ffac 	bl	800ce1c <__sfp_lock_acquire>
 800cec4:	4b1e      	ldr	r3, [pc, #120]	; (800cf40 <__sfp+0x84>)
 800cec6:	681e      	ldr	r6, [r3, #0]
 800cec8:	69b3      	ldr	r3, [r6, #24]
 800ceca:	b913      	cbnz	r3, 800ced2 <__sfp+0x16>
 800cecc:	4630      	mov	r0, r6
 800cece:	f7ff ffbd 	bl	800ce4c <__sinit>
 800ced2:	3648      	adds	r6, #72	; 0x48
 800ced4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ced8:	3b01      	subs	r3, #1
 800ceda:	d503      	bpl.n	800cee4 <__sfp+0x28>
 800cedc:	6833      	ldr	r3, [r6, #0]
 800cede:	b30b      	cbz	r3, 800cf24 <__sfp+0x68>
 800cee0:	6836      	ldr	r6, [r6, #0]
 800cee2:	e7f7      	b.n	800ced4 <__sfp+0x18>
 800cee4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cee8:	b9d5      	cbnz	r5, 800cf20 <__sfp+0x64>
 800ceea:	4b16      	ldr	r3, [pc, #88]	; (800cf44 <__sfp+0x88>)
 800ceec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cef0:	60e3      	str	r3, [r4, #12]
 800cef2:	6665      	str	r5, [r4, #100]	; 0x64
 800cef4:	f000 f847 	bl	800cf86 <__retarget_lock_init_recursive>
 800cef8:	f7ff ff96 	bl	800ce28 <__sfp_lock_release>
 800cefc:	2208      	movs	r2, #8
 800cefe:	4629      	mov	r1, r5
 800cf00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf08:	6025      	str	r5, [r4, #0]
 800cf0a:	61a5      	str	r5, [r4, #24]
 800cf0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf10:	f7fd faba 	bl	800a488 <memset>
 800cf14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf1c:	4620      	mov	r0, r4
 800cf1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf20:	3468      	adds	r4, #104	; 0x68
 800cf22:	e7d9      	b.n	800ced8 <__sfp+0x1c>
 800cf24:	2104      	movs	r1, #4
 800cf26:	4638      	mov	r0, r7
 800cf28:	f7ff ff62 	bl	800cdf0 <__sfmoreglue>
 800cf2c:	4604      	mov	r4, r0
 800cf2e:	6030      	str	r0, [r6, #0]
 800cf30:	2800      	cmp	r0, #0
 800cf32:	d1d5      	bne.n	800cee0 <__sfp+0x24>
 800cf34:	f7ff ff78 	bl	800ce28 <__sfp_lock_release>
 800cf38:	230c      	movs	r3, #12
 800cf3a:	603b      	str	r3, [r7, #0]
 800cf3c:	e7ee      	b.n	800cf1c <__sfp+0x60>
 800cf3e:	bf00      	nop
 800cf40:	0800d31c 	.word	0x0800d31c
 800cf44:	ffff0001 	.word	0xffff0001

0800cf48 <_fwalk_reent>:
 800cf48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf4c:	4606      	mov	r6, r0
 800cf4e:	4688      	mov	r8, r1
 800cf50:	2700      	movs	r7, #0
 800cf52:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf5a:	f1b9 0901 	subs.w	r9, r9, #1
 800cf5e:	d505      	bpl.n	800cf6c <_fwalk_reent+0x24>
 800cf60:	6824      	ldr	r4, [r4, #0]
 800cf62:	2c00      	cmp	r4, #0
 800cf64:	d1f7      	bne.n	800cf56 <_fwalk_reent+0xe>
 800cf66:	4638      	mov	r0, r7
 800cf68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf6c:	89ab      	ldrh	r3, [r5, #12]
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d907      	bls.n	800cf82 <_fwalk_reent+0x3a>
 800cf72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf76:	3301      	adds	r3, #1
 800cf78:	d003      	beq.n	800cf82 <_fwalk_reent+0x3a>
 800cf7a:	4629      	mov	r1, r5
 800cf7c:	4630      	mov	r0, r6
 800cf7e:	47c0      	blx	r8
 800cf80:	4307      	orrs	r7, r0
 800cf82:	3568      	adds	r5, #104	; 0x68
 800cf84:	e7e9      	b.n	800cf5a <_fwalk_reent+0x12>

0800cf86 <__retarget_lock_init_recursive>:
 800cf86:	4770      	bx	lr

0800cf88 <__retarget_lock_acquire_recursive>:
 800cf88:	4770      	bx	lr

0800cf8a <__retarget_lock_release_recursive>:
 800cf8a:	4770      	bx	lr

0800cf8c <__swhatbuf_r>:
 800cf8c:	b570      	push	{r4, r5, r6, lr}
 800cf8e:	460e      	mov	r6, r1
 800cf90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf94:	4614      	mov	r4, r2
 800cf96:	2900      	cmp	r1, #0
 800cf98:	461d      	mov	r5, r3
 800cf9a:	b096      	sub	sp, #88	; 0x58
 800cf9c:	da08      	bge.n	800cfb0 <__swhatbuf_r+0x24>
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cfa4:	602a      	str	r2, [r5, #0]
 800cfa6:	061a      	lsls	r2, r3, #24
 800cfa8:	d410      	bmi.n	800cfcc <__swhatbuf_r+0x40>
 800cfaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfae:	e00e      	b.n	800cfce <__swhatbuf_r+0x42>
 800cfb0:	466a      	mov	r2, sp
 800cfb2:	f000 f903 	bl	800d1bc <_fstat_r>
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	dbf1      	blt.n	800cf9e <__swhatbuf_r+0x12>
 800cfba:	9a01      	ldr	r2, [sp, #4]
 800cfbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cfc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cfc4:	425a      	negs	r2, r3
 800cfc6:	415a      	adcs	r2, r3
 800cfc8:	602a      	str	r2, [r5, #0]
 800cfca:	e7ee      	b.n	800cfaa <__swhatbuf_r+0x1e>
 800cfcc:	2340      	movs	r3, #64	; 0x40
 800cfce:	2000      	movs	r0, #0
 800cfd0:	6023      	str	r3, [r4, #0]
 800cfd2:	b016      	add	sp, #88	; 0x58
 800cfd4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cfd8 <__smakebuf_r>:
 800cfd8:	898b      	ldrh	r3, [r1, #12]
 800cfda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cfdc:	079d      	lsls	r5, r3, #30
 800cfde:	4606      	mov	r6, r0
 800cfe0:	460c      	mov	r4, r1
 800cfe2:	d507      	bpl.n	800cff4 <__smakebuf_r+0x1c>
 800cfe4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cfe8:	6023      	str	r3, [r4, #0]
 800cfea:	6123      	str	r3, [r4, #16]
 800cfec:	2301      	movs	r3, #1
 800cfee:	6163      	str	r3, [r4, #20]
 800cff0:	b002      	add	sp, #8
 800cff2:	bd70      	pop	{r4, r5, r6, pc}
 800cff4:	466a      	mov	r2, sp
 800cff6:	ab01      	add	r3, sp, #4
 800cff8:	f7ff ffc8 	bl	800cf8c <__swhatbuf_r>
 800cffc:	9900      	ldr	r1, [sp, #0]
 800cffe:	4605      	mov	r5, r0
 800d000:	4630      	mov	r0, r6
 800d002:	f7ff f969 	bl	800c2d8 <_malloc_r>
 800d006:	b948      	cbnz	r0, 800d01c <__smakebuf_r+0x44>
 800d008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d00c:	059a      	lsls	r2, r3, #22
 800d00e:	d4ef      	bmi.n	800cff0 <__smakebuf_r+0x18>
 800d010:	f023 0303 	bic.w	r3, r3, #3
 800d014:	f043 0302 	orr.w	r3, r3, #2
 800d018:	81a3      	strh	r3, [r4, #12]
 800d01a:	e7e3      	b.n	800cfe4 <__smakebuf_r+0xc>
 800d01c:	4b0d      	ldr	r3, [pc, #52]	; (800d054 <__smakebuf_r+0x7c>)
 800d01e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d020:	89a3      	ldrh	r3, [r4, #12]
 800d022:	6020      	str	r0, [r4, #0]
 800d024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d028:	81a3      	strh	r3, [r4, #12]
 800d02a:	9b00      	ldr	r3, [sp, #0]
 800d02c:	6120      	str	r0, [r4, #16]
 800d02e:	6163      	str	r3, [r4, #20]
 800d030:	9b01      	ldr	r3, [sp, #4]
 800d032:	b15b      	cbz	r3, 800d04c <__smakebuf_r+0x74>
 800d034:	4630      	mov	r0, r6
 800d036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d03a:	f000 f8d1 	bl	800d1e0 <_isatty_r>
 800d03e:	b128      	cbz	r0, 800d04c <__smakebuf_r+0x74>
 800d040:	89a3      	ldrh	r3, [r4, #12]
 800d042:	f023 0303 	bic.w	r3, r3, #3
 800d046:	f043 0301 	orr.w	r3, r3, #1
 800d04a:	81a3      	strh	r3, [r4, #12]
 800d04c:	89a0      	ldrh	r0, [r4, #12]
 800d04e:	4305      	orrs	r5, r0
 800d050:	81a5      	strh	r5, [r4, #12]
 800d052:	e7cd      	b.n	800cff0 <__smakebuf_r+0x18>
 800d054:	0800cde5 	.word	0x0800cde5

0800d058 <_malloc_usable_size_r>:
 800d058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d05c:	1f18      	subs	r0, r3, #4
 800d05e:	2b00      	cmp	r3, #0
 800d060:	bfbc      	itt	lt
 800d062:	580b      	ldrlt	r3, [r1, r0]
 800d064:	18c0      	addlt	r0, r0, r3
 800d066:	4770      	bx	lr

0800d068 <_raise_r>:
 800d068:	291f      	cmp	r1, #31
 800d06a:	b538      	push	{r3, r4, r5, lr}
 800d06c:	4604      	mov	r4, r0
 800d06e:	460d      	mov	r5, r1
 800d070:	d904      	bls.n	800d07c <_raise_r+0x14>
 800d072:	2316      	movs	r3, #22
 800d074:	6003      	str	r3, [r0, #0]
 800d076:	f04f 30ff 	mov.w	r0, #4294967295
 800d07a:	bd38      	pop	{r3, r4, r5, pc}
 800d07c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d07e:	b112      	cbz	r2, 800d086 <_raise_r+0x1e>
 800d080:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d084:	b94b      	cbnz	r3, 800d09a <_raise_r+0x32>
 800d086:	4620      	mov	r0, r4
 800d088:	f000 f830 	bl	800d0ec <_getpid_r>
 800d08c:	462a      	mov	r2, r5
 800d08e:	4601      	mov	r1, r0
 800d090:	4620      	mov	r0, r4
 800d092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d096:	f000 b817 	b.w	800d0c8 <_kill_r>
 800d09a:	2b01      	cmp	r3, #1
 800d09c:	d00a      	beq.n	800d0b4 <_raise_r+0x4c>
 800d09e:	1c59      	adds	r1, r3, #1
 800d0a0:	d103      	bne.n	800d0aa <_raise_r+0x42>
 800d0a2:	2316      	movs	r3, #22
 800d0a4:	6003      	str	r3, [r0, #0]
 800d0a6:	2001      	movs	r0, #1
 800d0a8:	e7e7      	b.n	800d07a <_raise_r+0x12>
 800d0aa:	2400      	movs	r4, #0
 800d0ac:	4628      	mov	r0, r5
 800d0ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d0b2:	4798      	blx	r3
 800d0b4:	2000      	movs	r0, #0
 800d0b6:	e7e0      	b.n	800d07a <_raise_r+0x12>

0800d0b8 <raise>:
 800d0b8:	4b02      	ldr	r3, [pc, #8]	; (800d0c4 <raise+0xc>)
 800d0ba:	4601      	mov	r1, r0
 800d0bc:	6818      	ldr	r0, [r3, #0]
 800d0be:	f7ff bfd3 	b.w	800d068 <_raise_r>
 800d0c2:	bf00      	nop
 800d0c4:	2000006c 	.word	0x2000006c

0800d0c8 <_kill_r>:
 800d0c8:	b538      	push	{r3, r4, r5, lr}
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	4d06      	ldr	r5, [pc, #24]	; (800d0e8 <_kill_r+0x20>)
 800d0ce:	4604      	mov	r4, r0
 800d0d0:	4608      	mov	r0, r1
 800d0d2:	4611      	mov	r1, r2
 800d0d4:	602b      	str	r3, [r5, #0]
 800d0d6:	f7f6 f900 	bl	80032da <_kill>
 800d0da:	1c43      	adds	r3, r0, #1
 800d0dc:	d102      	bne.n	800d0e4 <_kill_r+0x1c>
 800d0de:	682b      	ldr	r3, [r5, #0]
 800d0e0:	b103      	cbz	r3, 800d0e4 <_kill_r+0x1c>
 800d0e2:	6023      	str	r3, [r4, #0]
 800d0e4:	bd38      	pop	{r3, r4, r5, pc}
 800d0e6:	bf00      	nop
 800d0e8:	20000974 	.word	0x20000974

0800d0ec <_getpid_r>:
 800d0ec:	f7f6 b8ee 	b.w	80032cc <_getpid>

0800d0f0 <__sread>:
 800d0f0:	b510      	push	{r4, lr}
 800d0f2:	460c      	mov	r4, r1
 800d0f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0f8:	f000 f894 	bl	800d224 <_read_r>
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	bfab      	itete	ge
 800d100:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d102:	89a3      	ldrhlt	r3, [r4, #12]
 800d104:	181b      	addge	r3, r3, r0
 800d106:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d10a:	bfac      	ite	ge
 800d10c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d10e:	81a3      	strhlt	r3, [r4, #12]
 800d110:	bd10      	pop	{r4, pc}

0800d112 <__swrite>:
 800d112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d116:	461f      	mov	r7, r3
 800d118:	898b      	ldrh	r3, [r1, #12]
 800d11a:	4605      	mov	r5, r0
 800d11c:	05db      	lsls	r3, r3, #23
 800d11e:	460c      	mov	r4, r1
 800d120:	4616      	mov	r6, r2
 800d122:	d505      	bpl.n	800d130 <__swrite+0x1e>
 800d124:	2302      	movs	r3, #2
 800d126:	2200      	movs	r2, #0
 800d128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d12c:	f000 f868 	bl	800d200 <_lseek_r>
 800d130:	89a3      	ldrh	r3, [r4, #12]
 800d132:	4632      	mov	r2, r6
 800d134:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d138:	81a3      	strh	r3, [r4, #12]
 800d13a:	4628      	mov	r0, r5
 800d13c:	463b      	mov	r3, r7
 800d13e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d146:	f000 b817 	b.w	800d178 <_write_r>

0800d14a <__sseek>:
 800d14a:	b510      	push	{r4, lr}
 800d14c:	460c      	mov	r4, r1
 800d14e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d152:	f000 f855 	bl	800d200 <_lseek_r>
 800d156:	1c43      	adds	r3, r0, #1
 800d158:	89a3      	ldrh	r3, [r4, #12]
 800d15a:	bf15      	itete	ne
 800d15c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d15e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d162:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d166:	81a3      	strheq	r3, [r4, #12]
 800d168:	bf18      	it	ne
 800d16a:	81a3      	strhne	r3, [r4, #12]
 800d16c:	bd10      	pop	{r4, pc}

0800d16e <__sclose>:
 800d16e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d172:	f000 b813 	b.w	800d19c <_close_r>
	...

0800d178 <_write_r>:
 800d178:	b538      	push	{r3, r4, r5, lr}
 800d17a:	4604      	mov	r4, r0
 800d17c:	4608      	mov	r0, r1
 800d17e:	4611      	mov	r1, r2
 800d180:	2200      	movs	r2, #0
 800d182:	4d05      	ldr	r5, [pc, #20]	; (800d198 <_write_r+0x20>)
 800d184:	602a      	str	r2, [r5, #0]
 800d186:	461a      	mov	r2, r3
 800d188:	f7f6 f8de 	bl	8003348 <_write>
 800d18c:	1c43      	adds	r3, r0, #1
 800d18e:	d102      	bne.n	800d196 <_write_r+0x1e>
 800d190:	682b      	ldr	r3, [r5, #0]
 800d192:	b103      	cbz	r3, 800d196 <_write_r+0x1e>
 800d194:	6023      	str	r3, [r4, #0]
 800d196:	bd38      	pop	{r3, r4, r5, pc}
 800d198:	20000974 	.word	0x20000974

0800d19c <_close_r>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	2300      	movs	r3, #0
 800d1a0:	4d05      	ldr	r5, [pc, #20]	; (800d1b8 <_close_r+0x1c>)
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	4608      	mov	r0, r1
 800d1a6:	602b      	str	r3, [r5, #0]
 800d1a8:	f7f6 f8ea 	bl	8003380 <_close>
 800d1ac:	1c43      	adds	r3, r0, #1
 800d1ae:	d102      	bne.n	800d1b6 <_close_r+0x1a>
 800d1b0:	682b      	ldr	r3, [r5, #0]
 800d1b2:	b103      	cbz	r3, 800d1b6 <_close_r+0x1a>
 800d1b4:	6023      	str	r3, [r4, #0]
 800d1b6:	bd38      	pop	{r3, r4, r5, pc}
 800d1b8:	20000974 	.word	0x20000974

0800d1bc <_fstat_r>:
 800d1bc:	b538      	push	{r3, r4, r5, lr}
 800d1be:	2300      	movs	r3, #0
 800d1c0:	4d06      	ldr	r5, [pc, #24]	; (800d1dc <_fstat_r+0x20>)
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	4608      	mov	r0, r1
 800d1c6:	4611      	mov	r1, r2
 800d1c8:	602b      	str	r3, [r5, #0]
 800d1ca:	f7f6 f8e4 	bl	8003396 <_fstat>
 800d1ce:	1c43      	adds	r3, r0, #1
 800d1d0:	d102      	bne.n	800d1d8 <_fstat_r+0x1c>
 800d1d2:	682b      	ldr	r3, [r5, #0]
 800d1d4:	b103      	cbz	r3, 800d1d8 <_fstat_r+0x1c>
 800d1d6:	6023      	str	r3, [r4, #0]
 800d1d8:	bd38      	pop	{r3, r4, r5, pc}
 800d1da:	bf00      	nop
 800d1dc:	20000974 	.word	0x20000974

0800d1e0 <_isatty_r>:
 800d1e0:	b538      	push	{r3, r4, r5, lr}
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	4d05      	ldr	r5, [pc, #20]	; (800d1fc <_isatty_r+0x1c>)
 800d1e6:	4604      	mov	r4, r0
 800d1e8:	4608      	mov	r0, r1
 800d1ea:	602b      	str	r3, [r5, #0]
 800d1ec:	f7f6 f8e2 	bl	80033b4 <_isatty>
 800d1f0:	1c43      	adds	r3, r0, #1
 800d1f2:	d102      	bne.n	800d1fa <_isatty_r+0x1a>
 800d1f4:	682b      	ldr	r3, [r5, #0]
 800d1f6:	b103      	cbz	r3, 800d1fa <_isatty_r+0x1a>
 800d1f8:	6023      	str	r3, [r4, #0]
 800d1fa:	bd38      	pop	{r3, r4, r5, pc}
 800d1fc:	20000974 	.word	0x20000974

0800d200 <_lseek_r>:
 800d200:	b538      	push	{r3, r4, r5, lr}
 800d202:	4604      	mov	r4, r0
 800d204:	4608      	mov	r0, r1
 800d206:	4611      	mov	r1, r2
 800d208:	2200      	movs	r2, #0
 800d20a:	4d05      	ldr	r5, [pc, #20]	; (800d220 <_lseek_r+0x20>)
 800d20c:	602a      	str	r2, [r5, #0]
 800d20e:	461a      	mov	r2, r3
 800d210:	f7f6 f8da 	bl	80033c8 <_lseek>
 800d214:	1c43      	adds	r3, r0, #1
 800d216:	d102      	bne.n	800d21e <_lseek_r+0x1e>
 800d218:	682b      	ldr	r3, [r5, #0]
 800d21a:	b103      	cbz	r3, 800d21e <_lseek_r+0x1e>
 800d21c:	6023      	str	r3, [r4, #0]
 800d21e:	bd38      	pop	{r3, r4, r5, pc}
 800d220:	20000974 	.word	0x20000974

0800d224 <_read_r>:
 800d224:	b538      	push	{r3, r4, r5, lr}
 800d226:	4604      	mov	r4, r0
 800d228:	4608      	mov	r0, r1
 800d22a:	4611      	mov	r1, r2
 800d22c:	2200      	movs	r2, #0
 800d22e:	4d05      	ldr	r5, [pc, #20]	; (800d244 <_read_r+0x20>)
 800d230:	602a      	str	r2, [r5, #0]
 800d232:	461a      	mov	r2, r3
 800d234:	f7f6 f86b 	bl	800330e <_read>
 800d238:	1c43      	adds	r3, r0, #1
 800d23a:	d102      	bne.n	800d242 <_read_r+0x1e>
 800d23c:	682b      	ldr	r3, [r5, #0]
 800d23e:	b103      	cbz	r3, 800d242 <_read_r+0x1e>
 800d240:	6023      	str	r3, [r4, #0]
 800d242:	bd38      	pop	{r3, r4, r5, pc}
 800d244:	20000974 	.word	0x20000974

0800d248 <_init>:
 800d248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d24a:	bf00      	nop
 800d24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d24e:	bc08      	pop	{r3}
 800d250:	469e      	mov	lr, r3
 800d252:	4770      	bx	lr

0800d254 <_fini>:
 800d254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d256:	bf00      	nop
 800d258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d25a:	bc08      	pop	{r3}
 800d25c:	469e      	mov	lr, r3
 800d25e:	4770      	bx	lr
