
week1_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae30  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  0800af40  0800af40  0001af40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b344  0800b344  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800b344  0800b344  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b344  0800b344  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b344  0800b344  0001b344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b348  0800b348  0001b348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b34c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006dc  200001ec  0800b538  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008c8  0800b538  000208c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e4e  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca1  00000000  00000000  00034063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  00036d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d8  00000000  00000000  00038018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000037e1  00000000  00000000  000391f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f89  00000000  00000000  0003c9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094a83  00000000  00000000  0005395a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e83dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f90  00000000  00000000  000e8430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800af28 	.word	0x0800af28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800af28 	.word	0x0800af28

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <getKeyProcess>:
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress3s[N0_OF_BUTTONS];
static int buttonState[N0_OF_BUTTONS] = {BUTTON_IS_RELEASED, BUTTON_IS_RELEASED, BUTTON_IS_RELEASED};
static int button_flag[N0_OF_BUTTONS];
void getKeyProcess(int index){// turn on button_flag
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	db07      	blt.n	8000aa6 <getKeyProcess+0x1e>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	dc04      	bgt.n	8000aa6 <getKeyProcess+0x1e>
		button_flag[index] = 1;
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <getKeyProcess+0x28>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	20000228 	.word	0x20000228

08000ab4 <get3sFlag>:
// this function turn on flagForButtonPress3s when button is pressed more than 3s
void get3sFlag(int index){
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	db07      	blt.n	8000ad2 <get3sFlag+0x1e>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	dc04      	bgt.n	8000ad2 <get3sFlag+0x1e>
			flagForButtonPress3s[index] = 1;
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <get3sFlag+0x28>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	2201      	movs	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
		}
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	20000218 	.word	0x20000218

08000ae0 <get1sFlag>:
void clear3sFlag(int index){
	if(index >= 0 && index < N0_OF_BUTTONS){
			flagForButtonPress3s[index] = 0;
		}
}
void get1sFlag(int index){
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	db07      	blt.n	8000afe <get1sFlag+0x1e>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	dc04      	bgt.n	8000afe <get1sFlag+0x1e>
				flag1s[index] = 1;
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <get1sFlag+0x28>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
			}
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	2000021c 	.word	0x2000021c

08000b0c <fsm_input_processing>:
void fsm_input_processing(GPIO_PinState buttonBuffer[], int index){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
	switch(buttonState[index]){
 8000b16:	4a55      	ldr	r2, [pc, #340]	; (8000c6c <fsm_input_processing+0x160>)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d04f      	beq.n	8000bc2 <fsm_input_processing+0xb6>
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	f300 8096 	bgt.w	8000c54 <fsm_input_processing+0x148>
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d002      	beq.n	8000b32 <fsm_input_processing+0x26>
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d039      	beq.n	8000ba4 <fsm_input_processing+0x98>
			flag1s[index] = 0;
			button_flag[index] = 0;
		}
		break;
	default:
		break;
 8000b30:	e090      	b.n	8000c54 <fsm_input_processing+0x148>
		if(counterForButtonPress3s[index] < DURATION_FOR_AUTO_INCREASING){
 8000b32:	4a4f      	ldr	r2, [pc, #316]	; (8000c70 <fsm_input_processing+0x164>)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b3a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000b3e:	d220      	bcs.n	8000b82 <fsm_input_processing+0x76>
			counterForButtonPress3s[index]++;
 8000b40:	4a4b      	ldr	r2, [pc, #300]	; (8000c70 <fsm_input_processing+0x164>)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	b299      	uxth	r1, r3
 8000b4c:	4a48      	ldr	r2, [pc, #288]	; (8000c70 <fsm_input_processing+0x164>)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(counterForButtonPress3s[index] == DURATION_FOR_AUTO_INCREASING){
 8000b54:	4a46      	ldr	r2, [pc, #280]	; (8000c70 <fsm_input_processing+0x164>)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b5c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000b60:	d10f      	bne.n	8000b82 <fsm_input_processing+0x76>
				buttonState[index] = BUTTON_PRESSED_MORE_THAN_3s;
 8000b62:	4a42      	ldr	r2, [pc, #264]	; (8000c6c <fsm_input_processing+0x160>)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	2102      	movs	r1, #2
 8000b68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				counterForButtonPress3s[index] = 0;
 8000b6c:	4a40      	ldr	r2, [pc, #256]	; (8000c70 <fsm_input_processing+0x164>)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	2100      	movs	r1, #0
 8000b72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				getKeyProcess(index);
 8000b76:	6838      	ldr	r0, [r7, #0]
 8000b78:	f7ff ff86 	bl	8000a88 <getKeyProcess>
				get3sFlag(index);
 8000b7c:	6838      	ldr	r0, [r7, #0]
 8000b7e:	f7ff ff99 	bl	8000ab4 <get3sFlag>
		if(buttonBuffer[index] == BUTTON_RELEASED){
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	4413      	add	r3, r2
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d164      	bne.n	8000c58 <fsm_input_processing+0x14c>
			buttonState[index] = BUTTON_IS_RELEASED;
 8000b8e:	4a37      	ldr	r2, [pc, #220]	; (8000c6c <fsm_input_processing+0x160>)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	2101      	movs	r1, #1
 8000b94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress3s[index] = 0;
 8000b98:	4a35      	ldr	r2, [pc, #212]	; (8000c70 <fsm_input_processing+0x164>)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		break;
 8000ba2:	e059      	b.n	8000c58 <fsm_input_processing+0x14c>
		if(buttonBuffer[index] == BUTTON_PRESSED){
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d155      	bne.n	8000c5c <fsm_input_processing+0x150>
			buttonState[index] = BUTTON_IS_PRESSED;
 8000bb0:	4a2e      	ldr	r2, [pc, #184]	; (8000c6c <fsm_input_processing+0x160>)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			getKeyProcess(index);
 8000bba:	6838      	ldr	r0, [r7, #0]
 8000bbc:	f7ff ff64 	bl	8000a88 <getKeyProcess>
		break;
 8000bc0:	e04c      	b.n	8000c5c <fsm_input_processing+0x150>
		if(counterForButtonPress3s[index] < DURATION_FOR_MORE_THAN_3s ){
 8000bc2:	4a2b      	ldr	r2, [pc, #172]	; (8000c70 <fsm_input_processing+0x164>)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bca:	2b63      	cmp	r3, #99	; 0x63
 8000bcc:	d822      	bhi.n	8000c14 <fsm_input_processing+0x108>
					counterForButtonPress3s[index]++;
 8000bce:	4a28      	ldr	r2, [pc, #160]	; (8000c70 <fsm_input_processing+0x164>)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	b299      	uxth	r1, r3
 8000bda:	4a25      	ldr	r2, [pc, #148]	; (8000c70 <fsm_input_processing+0x164>)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(counterForButtonPress3s[index] == DURATION_FOR_MORE_THAN_3s){
 8000be2:	4a23      	ldr	r2, [pc, #140]	; (8000c70 <fsm_input_processing+0x164>)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bea:	2b64      	cmp	r3, #100	; 0x64
 8000bec:	d112      	bne.n	8000c14 <fsm_input_processing+0x108>
						buttonState[index] = BUTTON_PRESSED_MORE_THAN_3s;
 8000bee:	4a1f      	ldr	r2, [pc, #124]	; (8000c6c <fsm_input_processing+0x160>)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						counterForButtonPress3s[index] = 0;
 8000bf8:	4a1d      	ldr	r2, [pc, #116]	; (8000c70 <fsm_input_processing+0x164>)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						get1sFlag(index);
 8000c02:	6838      	ldr	r0, [r7, #0]
 8000c04:	f7ff ff6c 	bl	8000ae0 <get1sFlag>
						getKeyProcess(index);
 8000c08:	6838      	ldr	r0, [r7, #0]
 8000c0a:	f7ff ff3d 	bl	8000a88 <getKeyProcess>
						get3sFlag(index);
 8000c0e:	6838      	ldr	r0, [r7, #0]
 8000c10:	f7ff ff50 	bl	8000ab4 <get3sFlag>
		if(buttonBuffer[index] == BUTTON_RELEASED){
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d11f      	bne.n	8000c60 <fsm_input_processing+0x154>
			buttonState[index] = BUTTON_IS_RELEASED;
 8000c20:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <fsm_input_processing+0x160>)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	2101      	movs	r1, #1
 8000c26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress3s[index] = 0;
 8000c2a:	4a11      	ldr	r2, [pc, #68]	; (8000c70 <fsm_input_processing+0x164>)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	2100      	movs	r1, #0
 8000c30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress3s[index] = 0;
 8000c34:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <fsm_input_processing+0x168>)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	4413      	add	r3, r2
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
			flag1s[index] = 0;
 8000c3e:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <fsm_input_processing+0x16c>)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
			button_flag[index] = 0;
 8000c48:	4a0c      	ldr	r2, [pc, #48]	; (8000c7c <fsm_input_processing+0x170>)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		break;
 8000c52:	e005      	b.n	8000c60 <fsm_input_processing+0x154>
		break;
 8000c54:	bf00      	nop
 8000c56:	e004      	b.n	8000c62 <fsm_input_processing+0x156>
		break;
 8000c58:	bf00      	nop
 8000c5a:	e002      	b.n	8000c62 <fsm_input_processing+0x156>
		break;
 8000c5c:	bf00      	nop
 8000c5e:	e000      	b.n	8000c62 <fsm_input_processing+0x156>
		break;
 8000c60:	bf00      	nop
	}
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000220 	.word	0x20000220
 8000c74:	20000218 	.word	0x20000218
 8000c78:	2000021c 	.word	0x2000021c
 8000c7c:	20000228 	.word	0x20000228

08000c80 <button_reading>:
void button_reading(void){
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i++){
 8000c86:	2300      	movs	r3, #0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e052      	b.n	8000d32 <button_reading+0xb2>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000c8c:	79fa      	ldrb	r2, [r7, #7]
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	492c      	ldr	r1, [pc, #176]	; (8000d44 <button_reading+0xc4>)
 8000c92:	5c89      	ldrb	r1, [r1, r2]
 8000c94:	4a2c      	ldr	r2, [pc, #176]	; (8000d48 <button_reading+0xc8>)
 8000c96:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000c98:	79fa      	ldrb	r2, [r7, #7]
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	492b      	ldr	r1, [pc, #172]	; (8000d4c <button_reading+0xcc>)
 8000c9e:	5c89      	ldrb	r1, [r1, r2]
 8000ca0:	4a28      	ldr	r2, [pc, #160]	; (8000d44 <button_reading+0xc4>)
 8000ca2:	54d1      	strb	r1, [r2, r3]
		// Chosing Which button is pressed.
		switch(i){
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d01a      	beq.n	8000ce0 <button_reading+0x60>
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	dc22      	bgt.n	8000cf4 <button_reading+0x74>
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d002      	beq.n	8000cb8 <button_reading+0x38>
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d00a      	beq.n	8000ccc <button_reading+0x4c>
			break;
		case 2://  read signal from button0
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
			break;
		default:
			break;
 8000cb6:	e01d      	b.n	8000cf4 <button_reading+0x74>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button0_GPIO_Port, Button0_Pin);
 8000cb8:	79fc      	ldrb	r4, [r7, #7]
 8000cba:	2101      	movs	r1, #1
 8000cbc:	4824      	ldr	r0, [pc, #144]	; (8000d50 <button_reading+0xd0>)
 8000cbe:	f002 fe4f 	bl	8003960 <HAL_GPIO_ReadPin>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <button_reading+0xcc>)
 8000cc8:	551a      	strb	r2, [r3, r4]
			break;
 8000cca:	e014      	b.n	8000cf6 <button_reading+0x76>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000ccc:	79fc      	ldrb	r4, [r7, #7]
 8000cce:	2102      	movs	r1, #2
 8000cd0:	481f      	ldr	r0, [pc, #124]	; (8000d50 <button_reading+0xd0>)
 8000cd2:	f002 fe45 	bl	8003960 <HAL_GPIO_ReadPin>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <button_reading+0xcc>)
 8000cdc:	551a      	strb	r2, [r3, r4]
			break;
 8000cde:	e00a      	b.n	8000cf6 <button_reading+0x76>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000ce0:	79fc      	ldrb	r4, [r7, #7]
 8000ce2:	2104      	movs	r1, #4
 8000ce4:	481a      	ldr	r0, [pc, #104]	; (8000d50 <button_reading+0xd0>)
 8000ce6:	f002 fe3b 	bl	8003960 <HAL_GPIO_ReadPin>
 8000cea:	4603      	mov	r3, r0
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <button_reading+0xcc>)
 8000cf0:	551a      	strb	r2, [r3, r4]
			break;
 8000cf2:	e000      	b.n	8000cf6 <button_reading+0x76>
			break;
 8000cf4:	bf00      	nop
		}
		if((debounceButtonBuffer3[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer2[i] == debounceButtonBuffer1[i])){
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	4a13      	ldr	r2, [pc, #76]	; (8000d48 <button_reading+0xc8>)
 8000cfa:	5cd2      	ldrb	r2, [r2, r3]
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	4911      	ldr	r1, [pc, #68]	; (8000d44 <button_reading+0xc4>)
 8000d00:	5ccb      	ldrb	r3, [r1, r3]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d112      	bne.n	8000d2c <button_reading+0xac>
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <button_reading+0xc4>)
 8000d0a:	5cd2      	ldrb	r2, [r2, r3]
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	490f      	ldr	r1, [pc, #60]	; (8000d4c <button_reading+0xcc>)
 8000d10:	5ccb      	ldrb	r3, [r1, r3]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d10a      	bne.n	8000d2c <button_reading+0xac>
			buttonBuffer[i] = debounceButtonBuffer3[i];
 8000d16:	79fa      	ldrb	r2, [r7, #7]
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	490b      	ldr	r1, [pc, #44]	; (8000d48 <button_reading+0xc8>)
 8000d1c:	5c89      	ldrb	r1, [r1, r2]
 8000d1e:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <button_reading+0xd4>)
 8000d20:	54d1      	strb	r1, [r2, r3]
			fsm_input_processing(buttonBuffer,i);
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	4619      	mov	r1, r3
 8000d26:	480b      	ldr	r0, [pc, #44]	; (8000d54 <button_reading+0xd4>)
 8000d28:	f7ff fef0 	bl	8000b0c <fsm_input_processing>
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i++){
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	71fb      	strb	r3, [r7, #7]
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d9a9      	bls.n	8000c8c <button_reading+0xc>
		}

	}
}
 8000d38:	bf00      	nop
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd90      	pop	{r4, r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000210 	.word	0x20000210
 8000d48:	20000214 	.word	0x20000214
 8000d4c:	2000020c 	.word	0x2000020c
 8000d50:	40010c00 	.word	0x40010c00
 8000d54:	20000208 	.word	0x20000208

08000d58 <is_button_pressed>:
int is_button_pressed(uint8_t index){
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
	if(index >= N0_OF_BUTTONS) return 0;
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d901      	bls.n	8000d6c <is_button_pressed+0x14>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	e00d      	b.n	8000d88 <is_button_pressed+0x30>
	if(button_flag[index] == 1){
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	4a09      	ldr	r2, [pc, #36]	; (8000d94 <is_button_pressed+0x3c>)
 8000d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d106      	bne.n	8000d86 <is_button_pressed+0x2e>
		//set button flag value = 0
		button_flag[index] = 0;
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <is_button_pressed+0x3c>)
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e000      	b.n	8000d88 <is_button_pressed+0x30>
	}
	return 0;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000228 	.word	0x20000228

08000d98 <HAL_UART_RxCpltCallback>:
	}
}

uint8_t buffer[MAX_BUFFER_SIZE];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	if( huart -> Instance == USART2 ) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <HAL_UART_RxCpltCallback+0x5c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d11f      	bne.n	8000dea <HAL_UART_RxCpltCallback+0x52>
		buffer[index_buffer++] = temp;
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <HAL_UART_RxCpltCallback+0x60>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	1c5a      	adds	r2, r3, #1
 8000db0:	b2d1      	uxtb	r1, r2
 8000db2:	4a11      	ldr	r2, [pc, #68]	; (8000df8 <HAL_UART_RxCpltCallback+0x60>)
 8000db4:	7011      	strb	r1, [r2, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <HAL_UART_RxCpltCallback+0x64>)
 8000dba:	7819      	ldrb	r1, [r3, #0]
 8000dbc:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <HAL_UART_RxCpltCallback+0x68>)
 8000dbe:	5499      	strb	r1, [r3, r2]
		if(index_buffer == 30) index_buffer = 0;
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <HAL_UART_RxCpltCallback+0x60>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b1e      	cmp	r3, #30
 8000dc6:	d102      	bne.n	8000dce <HAL_UART_RxCpltCallback+0x36>
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_UART_RxCpltCallback+0x60>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 8000dce:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <HAL_UART_RxCpltCallback+0x6c>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit (&huart2, &temp, 1, 50) ;
 8000dd4:	2332      	movs	r3, #50	; 0x32
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4908      	ldr	r1, [pc, #32]	; (8000dfc <HAL_UART_RxCpltCallback+0x64>)
 8000dda:	480b      	ldr	r0, [pc, #44]	; (8000e08 <HAL_UART_RxCpltCallback+0x70>)
 8000ddc:	f006 fd3d 	bl	800785a <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, & temp, 1);
 8000de0:	2201      	movs	r2, #1
 8000de2:	4906      	ldr	r1, [pc, #24]	; (8000dfc <HAL_UART_RxCpltCallback+0x64>)
 8000de4:	4808      	ldr	r0, [pc, #32]	; (8000e08 <HAL_UART_RxCpltCallback+0x70>)
 8000de6:	f006 fdbb 	bl	8007960 <HAL_UART_Receive_IT>
	}
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40004400 	.word	0x40004400
 8000df8:	20000235 	.word	0x20000235
 8000dfc:	20000234 	.word	0x20000234
 8000e00:	20000468 	.word	0x20000468
 8000e04:	20000236 	.word	0x20000236
 8000e08:	20000420 	.word	0x20000420

08000e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e10:	f001 fbec 	bl	80025ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e14:	f000 f852 	bl	8000ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e18:	f000 fb1a 	bl	8001450 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e1c:	f000 fafa 	bl	8001414 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e20:	f000 face 	bl	80013c0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e24:	f000 f994 	bl	8001150 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000e28:	f000 f8a4 	bl	8000f74 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000e2c:	f000 f8e0 	bl	8000ff0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000e30:	f000 f90c 	bl	800104c <MX_TIM1_Init>
  MX_TIM4_Init();
 8000e34:	f000 fa4e 	bl	80012d4 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000e38:	f000 f9d6 	bl	80011e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e3c:	4817      	ldr	r0, [pc, #92]	; (8000e9c <main+0x90>)
 8000e3e:	f005 f935 	bl	80060ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000e42:	4817      	ldr	r0, [pc, #92]	; (8000ea0 <main+0x94>)
 8000e44:	f005 f932 	bl	80060ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000e48:	4816      	ldr	r0, [pc, #88]	; (8000ea4 <main+0x98>)
 8000e4a:	f005 f92f 	bl	80060ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000e4e:	4816      	ldr	r0, [pc, #88]	; (8000ea8 <main+0x9c>)
 8000e50:	f005 f92c 	bl	80060ac <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000e54:	2201      	movs	r2, #1
 8000e56:	4915      	ldr	r1, [pc, #84]	; (8000eac <main+0xa0>)
 8000e58:	4815      	ldr	r0, [pc, #84]	; (8000eb0 <main+0xa4>)
 8000e5a:	f006 fd81 	bl	8007960 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000e5e:	2100      	movs	r1, #0
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <main+0x94>)
 8000e62:	f005 fa67 	bl	8006334 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e66:	2104      	movs	r1, #4
 8000e68:	480e      	ldr	r0, [pc, #56]	; (8000ea4 <main+0x98>)
 8000e6a:	f005 f9c1 	bl	80061f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000e6e:	2100      	movs	r1, #0
 8000e70:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <main+0x9c>)
 8000e72:	f005 f9bd 	bl	80061f0 <HAL_TIM_PWM_Start>
  HAL_ADC_Start(&hadc1);
 8000e76:	480f      	ldr	r0, [pc, #60]	; (8000eb4 <main+0xa8>)
 8000e78:	f001 fd16 	bl	80028a8 <HAL_ADC_Start>
  SCH_Init();
 8000e7c:	f000 fec6 	bl	8001c0c <SCH_Init>
//  lcdClear();
//    NeoPixel_hslColor(120, 255, 127);
//    NeoPixel_led_set_RGB(0);
//     testBuzzer();
  uint32_t ADC_value;
  NeoPixel_status = 0;
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <main+0xac>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
//	  NeoPixel_led_set_all_RGB();
//	  NeoPixel_clear_all_led();
//	  HAL_Delay(5000);
//	  NeoPixel_clear_all_led();
//	  NeoPixel_set_led_cycle();
      SCH_Dispatch_Tasks();
 8000e86:	f000 ff47 	bl	8001d18 <SCH_Dispatch_Tasks>
//      __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1, 100);
//      HAL_ADC_PollForConversion(&hadc1, 100);
//      ADC_value = HAL_ADC_GetValue(&hadc1);
//      HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "Humid=%lu\r\n", ADC_value), 1000);
//      HAL_Delay(4000);
  	if(is_button_pressed(0) == 1){
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff ff64 	bl	8000d58 <is_button_pressed>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d1f7      	bne.n	8000e86 <main+0x7a>
  		NeoPixel_toggleLed();
 8000e96:	f000 fbb1 	bl	80015fc <NeoPixel_toggleLed>
      SCH_Dispatch_Tasks();
 8000e9a:	e7f4      	b.n	8000e86 <main+0x7a>
 8000e9c:	20000304 	.word	0x20000304
 8000ea0:	200002bc 	.word	0x200002bc
 8000ea4:	2000034c 	.word	0x2000034c
 8000ea8:	20000394 	.word	0x20000394
 8000eac:	20000234 	.word	0x20000234
 8000eb0:	20000420 	.word	0x20000420
 8000eb4:	20000238 	.word	0x20000238
 8000eb8:	20000237 	.word	0x20000237

08000ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b094      	sub	sp, #80	; 0x50
 8000ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ec6:	2228      	movs	r2, #40	; 0x28
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f007 fb18 	bl	8008500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eec:	2301      	movs	r3, #1
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000efa:	2301      	movs	r3, #1
 8000efc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efe:	2302      	movs	r3, #2
 8000f00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f08:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f12:	4618      	mov	r0, r3
 8000f14:	f004 fbb4 	bl	8005680 <HAL_RCC_OscConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f1e:	f000 fb26 	bl	800156e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f22:	230f      	movs	r3, #15
 8000f24:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f26:	2302      	movs	r3, #2
 8000f28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f32:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f004 fe20 	bl	8005b84 <HAL_RCC_ClockConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f4a:	f000 fb10 	bl	800156e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f56:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f004 ffa0 	bl	8005ea0 <HAL_RCCEx_PeriphCLKConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f66:	f000 fb02 	bl	800156e <Error_Handler>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3750      	adds	r7, #80	; 0x50
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f84:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <MX_ADC1_Init+0x74>)
 8000f86:	4a19      	ldr	r2, [pc, #100]	; (8000fec <MX_ADC1_Init+0x78>)
 8000f88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <MX_ADC1_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f90:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_ADC1_Init+0x74>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_ADC1_Init+0x74>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <MX_ADC1_Init+0x74>)
 8000f9e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000fa2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa4:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <MX_ADC1_Init+0x74>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_ADC1_Init+0x74>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <MX_ADC1_Init+0x74>)
 8000fb2:	f001 fba1 	bl	80026f8 <HAL_ADC_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000fbc:	f000 fad7 	bl	800156e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000fc8:	2307      	movs	r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_ADC1_Init+0x74>)
 8000fd2:	f001 fde9 	bl	8002ba8 <HAL_ADC_ConfigChannel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000fdc:	f000 fac7 	bl	800156e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000238 	.word	0x20000238
 8000fec:	40012400 	.word	0x40012400

08000ff0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <MX_I2C1_Init+0x50>)
 8000ff6:	4a13      	ldr	r2, [pc, #76]	; (8001044 <MX_I2C1_Init+0x54>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_I2C1_Init+0x50>)
 8000ffc:	4a12      	ldr	r2, [pc, #72]	; (8001048 <MX_I2C1_Init+0x58>)
 8000ffe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MX_I2C1_Init+0x50>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_I2C1_Init+0x50>)
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_I2C1_Init+0x50>)
 800100e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001012:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001014:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <MX_I2C1_Init+0x50>)
 8001016:	2200      	movs	r2, #0
 8001018:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_I2C1_Init+0x50>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001020:	4b07      	ldr	r3, [pc, #28]	; (8001040 <MX_I2C1_Init+0x50>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_I2C1_Init+0x50>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <MX_I2C1_Init+0x50>)
 800102e:	f002 fce9 	bl	8003a04 <HAL_I2C_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001038:	f000 fa99 	bl	800156e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000268 	.word	0x20000268
 8001044:	40005400 	.word	0x40005400
 8001048:	000186a0 	.word	0x000186a0

0800104c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b092      	sub	sp, #72	; 0x48
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001052:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
 800106c:	615a      	str	r2, [r3, #20]
 800106e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2220      	movs	r2, #32
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f007 fa42 	bl	8008500 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800107c:	4b32      	ldr	r3, [pc, #200]	; (8001148 <MX_TIM1_Init+0xfc>)
 800107e:	4a33      	ldr	r2, [pc, #204]	; (800114c <MX_TIM1_Init+0x100>)
 8001080:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001082:	4b31      	ldr	r3, [pc, #196]	; (8001148 <MX_TIM1_Init+0xfc>)
 8001084:	2200      	movs	r2, #0
 8001086:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001088:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <MX_TIM1_Init+0xfc>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 800108e:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <MX_TIM1_Init+0xfc>)
 8001090:	2259      	movs	r2, #89	; 0x59
 8001092:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001094:	4b2c      	ldr	r3, [pc, #176]	; (8001148 <MX_TIM1_Init+0xfc>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800109a:	4b2b      	ldr	r3, [pc, #172]	; (8001148 <MX_TIM1_Init+0xfc>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a0:	4b29      	ldr	r3, [pc, #164]	; (8001148 <MX_TIM1_Init+0xfc>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010a6:	4828      	ldr	r0, [pc, #160]	; (8001148 <MX_TIM1_Init+0xfc>)
 80010a8:	f005 f852 	bl	8006150 <HAL_TIM_PWM_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80010b2:	f000 fa5c 	bl	800156e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b6:	2300      	movs	r3, #0
 80010b8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010c2:	4619      	mov	r1, r3
 80010c4:	4820      	ldr	r0, [pc, #128]	; (8001148 <MX_TIM1_Init+0xfc>)
 80010c6:	f006 fab7 	bl	8007638 <HAL_TIMEx_MasterConfigSynchronization>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80010d0:	f000 fa4d 	bl	800156e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d4:	2360      	movs	r3, #96	; 0x60
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010e0:	2300      	movs	r3, #0
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010e8:	2300      	movs	r3, #0
 80010ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f4:	2200      	movs	r2, #0
 80010f6:	4619      	mov	r1, r3
 80010f8:	4813      	ldr	r0, [pc, #76]	; (8001148 <MX_TIM1_Init+0xfc>)
 80010fa:	f005 fd7b 	bl	8006bf4 <HAL_TIM_PWM_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001104:	f000 fa33 	bl	800156e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800111c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001120:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4619      	mov	r1, r3
 800112a:	4807      	ldr	r0, [pc, #28]	; (8001148 <MX_TIM1_Init+0xfc>)
 800112c:	f006 fae2 	bl	80076f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001136:	f000 fa1a 	bl	800156e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800113a:	4803      	ldr	r0, [pc, #12]	; (8001148 <MX_TIM1_Init+0xfc>)
 800113c:	f000 ffea 	bl	8002114 <HAL_TIM_MspPostInit>

}
 8001140:	bf00      	nop
 8001142:	3748      	adds	r7, #72	; 0x48
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200002bc 	.word	0x200002bc
 800114c:	40012c00 	.word	0x40012c00

08001150 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	463b      	mov	r3, r7
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_TIM2_Init+0x94>)
 800116e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001172:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_TIM2_Init+0x94>)
 8001176:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800117a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <MX_TIM2_Init+0x94>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_TIM2_Init+0x94>)
 8001184:	2209      	movs	r2, #9
 8001186:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <MX_TIM2_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_TIM2_Init+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001194:	4813      	ldr	r0, [pc, #76]	; (80011e4 <MX_TIM2_Init+0x94>)
 8001196:	f004 ff39 	bl	800600c <HAL_TIM_Base_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011a0:	f000 f9e5 	bl	800156e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	4619      	mov	r1, r3
 80011b0:	480c      	ldr	r0, [pc, #48]	; (80011e4 <MX_TIM2_Init+0x94>)
 80011b2:	f005 fde1 	bl	8006d78 <HAL_TIM_ConfigClockSource>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011bc:	f000 f9d7 	bl	800156e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c0:	2300      	movs	r3, #0
 80011c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011c8:	463b      	mov	r3, r7
 80011ca:	4619      	mov	r1, r3
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_TIM2_Init+0x94>)
 80011ce:	f006 fa33 	bl	8007638 <HAL_TIMEx_MasterConfigSynchronization>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011d8:	f000 f9c9 	bl	800156e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000304 	.word	0x20000304

080011e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08e      	sub	sp, #56	; 0x38
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fc:	f107 0320 	add.w	r3, r7, #32
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
 8001214:	615a      	str	r2, [r3, #20]
 8001216:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */
//
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001218:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <MX_TIM3_Init+0xe4>)
 800121a:	4a2d      	ldr	r2, [pc, #180]	; (80012d0 <MX_TIM3_Init+0xe8>)
 800121c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <MX_TIM3_Init+0xe4>)
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b29      	ldr	r3, [pc, #164]	; (80012cc <MX_TIM3_Init+0xe4>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 89;
 800122a:	4b28      	ldr	r3, [pc, #160]	; (80012cc <MX_TIM3_Init+0xe4>)
 800122c:	2259      	movs	r2, #89	; 0x59
 800122e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001230:	4b26      	ldr	r3, [pc, #152]	; (80012cc <MX_TIM3_Init+0xe4>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001236:	4b25      	ldr	r3, [pc, #148]	; (80012cc <MX_TIM3_Init+0xe4>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800123c:	4823      	ldr	r0, [pc, #140]	; (80012cc <MX_TIM3_Init+0xe4>)
 800123e:	f004 fee5 	bl	800600c <HAL_TIM_Base_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001248:	f000 f991 	bl	800156e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001252:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001256:	4619      	mov	r1, r3
 8001258:	481c      	ldr	r0, [pc, #112]	; (80012cc <MX_TIM3_Init+0xe4>)
 800125a:	f005 fd8d 	bl	8006d78 <HAL_TIM_ConfigClockSource>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001264:	f000 f983 	bl	800156e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001268:	4818      	ldr	r0, [pc, #96]	; (80012cc <MX_TIM3_Init+0xe4>)
 800126a:	f004 ff71 	bl	8006150 <HAL_TIM_PWM_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001274:	f000 f97b 	bl	800156e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001280:	f107 0320 	add.w	r3, r7, #32
 8001284:	4619      	mov	r1, r3
 8001286:	4811      	ldr	r0, [pc, #68]	; (80012cc <MX_TIM3_Init+0xe4>)
 8001288:	f006 f9d6 	bl	8007638 <HAL_TIMEx_MasterConfigSynchronization>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001292:	f000 f96c 	bl	800156e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001296:	2360      	movs	r3, #96	; 0x60
 8001298:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2204      	movs	r2, #4
 80012aa:	4619      	mov	r1, r3
 80012ac:	4807      	ldr	r0, [pc, #28]	; (80012cc <MX_TIM3_Init+0xe4>)
 80012ae:	f005 fca1 	bl	8006bf4 <HAL_TIM_PWM_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80012b8:	f000 f959 	bl	800156e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <MX_TIM3_Init+0xe4>)
 80012be:	f000 ff29 	bl	8002114 <HAL_TIM_MspPostInit>

}
 80012c2:	bf00      	nop
 80012c4:	3738      	adds	r7, #56	; 0x38
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000034c 	.word	0x2000034c
 80012d0:	40000400 	.word	0x40000400

080012d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08e      	sub	sp, #56	; 0x38
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
 8001300:	615a      	str	r2, [r3, #20]
 8001302:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001304:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <MX_TIM4_Init+0xe4>)
 8001306:	4a2d      	ldr	r2, [pc, #180]	; (80013bc <MX_TIM4_Init+0xe8>)
 8001308:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800130a:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <MX_TIM4_Init+0xe4>)
 800130c:	2200      	movs	r2, #0
 800130e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001310:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <MX_TIM4_Init+0xe4>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 89;
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <MX_TIM4_Init+0xe4>)
 8001318:	2259      	movs	r2, #89	; 0x59
 800131a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <MX_TIM4_Init+0xe4>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001322:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <MX_TIM4_Init+0xe4>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001328:	4823      	ldr	r0, [pc, #140]	; (80013b8 <MX_TIM4_Init+0xe4>)
 800132a:	f004 fe6f 	bl	800600c <HAL_TIM_Base_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001334:	f000 f91b 	bl	800156e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800133e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001342:	4619      	mov	r1, r3
 8001344:	481c      	ldr	r0, [pc, #112]	; (80013b8 <MX_TIM4_Init+0xe4>)
 8001346:	f005 fd17 	bl	8006d78 <HAL_TIM_ConfigClockSource>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001350:	f000 f90d 	bl	800156e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001354:	4818      	ldr	r0, [pc, #96]	; (80013b8 <MX_TIM4_Init+0xe4>)
 8001356:	f004 fefb 	bl	8006150 <HAL_TIM_PWM_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001360:	f000 f905 	bl	800156e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800136c:	f107 0320 	add.w	r3, r7, #32
 8001370:	4619      	mov	r1, r3
 8001372:	4811      	ldr	r0, [pc, #68]	; (80013b8 <MX_TIM4_Init+0xe4>)
 8001374:	f006 f960 	bl	8007638 <HAL_TIMEx_MasterConfigSynchronization>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800137e:	f000 f8f6 	bl	800156e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001382:	2360      	movs	r3, #96	; 0x60
 8001384:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	2200      	movs	r2, #0
 8001396:	4619      	mov	r1, r3
 8001398:	4807      	ldr	r0, [pc, #28]	; (80013b8 <MX_TIM4_Init+0xe4>)
 800139a:	f005 fc2b 	bl	8006bf4 <HAL_TIM_PWM_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80013a4:	f000 f8e3 	bl	800156e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013a8:	4803      	ldr	r0, [pc, #12]	; (80013b8 <MX_TIM4_Init+0xe4>)
 80013aa:	f000 feb3 	bl	8002114 <HAL_TIM_MspPostInit>

}
 80013ae:	bf00      	nop
 80013b0:	3738      	adds	r7, #56	; 0x38
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000394 	.word	0x20000394
 80013bc:	40000800 	.word	0x40000800

080013c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_USART2_UART_Init+0x4c>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	; (8001410 <MX_USART2_UART_Init+0x50>)
 80013c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <MX_USART2_UART_Init+0x4c>)
 80013cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_USART2_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <MX_USART2_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <MX_USART2_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_USART2_UART_Init+0x4c>)
 80013e6:	220c      	movs	r2, #12
 80013e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <MX_USART2_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_USART2_UART_Init+0x4c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_USART2_UART_Init+0x4c>)
 80013f8:	f006 f9df 	bl	80077ba <HAL_UART_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001402:	f000 f8b4 	bl	800156e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000420 	.word	0x20000420
 8001410:	40004400 	.word	0x40004400

08001414 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_DMA_Init+0x38>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	4a0b      	ldr	r2, [pc, #44]	; (800144c <MX_DMA_Init+0x38>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6153      	str	r3, [r2, #20]
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_DMA_Init+0x38>)
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	200c      	movs	r0, #12
 8001438:	f001 fe29 	bl	800308e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800143c:	200c      	movs	r0, #12
 800143e:	f001 fe42 	bl	80030c6 <HAL_NVIC_EnableIRQ>

}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000

08001450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	f107 0310 	add.w	r3, r7, #16
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001464:	4b33      	ldr	r3, [pc, #204]	; (8001534 <MX_GPIO_Init+0xe4>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	4a32      	ldr	r2, [pc, #200]	; (8001534 <MX_GPIO_Init+0xe4>)
 800146a:	f043 0310 	orr.w	r3, r3, #16
 800146e:	6193      	str	r3, [r2, #24]
 8001470:	4b30      	ldr	r3, [pc, #192]	; (8001534 <MX_GPIO_Init+0xe4>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f003 0310 	and.w	r3, r3, #16
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147c:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <MX_GPIO_Init+0xe4>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	4a2c      	ldr	r2, [pc, #176]	; (8001534 <MX_GPIO_Init+0xe4>)
 8001482:	f043 0320 	orr.w	r3, r3, #32
 8001486:	6193      	str	r3, [r2, #24]
 8001488:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <MX_GPIO_Init+0xe4>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0320 	and.w	r3, r3, #32
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	4b27      	ldr	r3, [pc, #156]	; (8001534 <MX_GPIO_Init+0xe4>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a26      	ldr	r2, [pc, #152]	; (8001534 <MX_GPIO_Init+0xe4>)
 800149a:	f043 0304 	orr.w	r3, r3, #4
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <MX_GPIO_Init+0xe4>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ac:	4b21      	ldr	r3, [pc, #132]	; (8001534 <MX_GPIO_Init+0xe4>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a20      	ldr	r2, [pc, #128]	; (8001534 <MX_GPIO_Init+0xe4>)
 80014b2:	f043 0308 	orr.w	r3, r3, #8
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <MX_GPIO_Init+0xe4>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	21e0      	movs	r1, #224	; 0xe0
 80014c8:	481b      	ldr	r0, [pc, #108]	; (8001538 <MX_GPIO_Init+0xe8>)
 80014ca:	f002 fa60 	bl	800398e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <MX_GPIO_Init+0xec>)
 80014d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0310 	add.w	r3, r7, #16
 80014e0:	4619      	mov	r1, r3
 80014e2:	4817      	ldr	r0, [pc, #92]	; (8001540 <MX_GPIO_Init+0xf0>)
 80014e4:	f002 f8b8 	bl	8003658 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin;
 80014e8:	23e0      	movs	r3, #224	; 0xe0
 80014ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	4619      	mov	r1, r3
 80014fe:	480e      	ldr	r0, [pc, #56]	; (8001538 <MX_GPIO_Init+0xe8>)
 8001500:	f002 f8aa 	bl	8003658 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button0_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button0_Pin|Button1_Pin|Button2_Pin;
 8001504:	2307      	movs	r3, #7
 8001506:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150c:	2301      	movs	r3, #1
 800150e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	4619      	mov	r1, r3
 8001516:	480b      	ldr	r0, [pc, #44]	; (8001544 <MX_GPIO_Init+0xf4>)
 8001518:	f002 f89e 	bl	8003658 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	2028      	movs	r0, #40	; 0x28
 8001522:	f001 fdb4 	bl	800308e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001526:	2028      	movs	r0, #40	; 0x28
 8001528:	f001 fdcd 	bl	80030c6 <HAL_NVIC_EnableIRQ>

}
 800152c:	bf00      	nop
 800152e:	3720      	adds	r7, #32
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40021000 	.word	0x40021000
 8001538:	40010800 	.word	0x40010800
 800153c:	10110000 	.word	0x10110000
 8001540:	40011000 	.word	0x40011000
 8001544:	40010c00 	.word	0x40010c00

08001548 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001558:	d101      	bne.n	800155e <HAL_TIM_PeriodElapsedCallback+0x16>
		button_reading();
 800155a:	f7ff fb91 	bl	8000c80 <button_reading>
	}
	timerRun();
 800155e:	f000 ffdd 	bl	800251c <timerRun>
	SCH_Update();
 8001562:	f000 fb69 	bl	8001c38 <SCH_Update>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001572:	b672      	cpsid	i
}
 8001574:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001576:	e7fe      	b.n	8001576 <Error_Handler+0x8>

08001578 <scale8>:
uint8_t b;

uint8_t angle = 0;
const uint8_t angle_difference = 11;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	460a      	mov	r2, r1
 8001582:	71fb      	strb	r3, [r7, #7]
 8001584:	4613      	mov	r3, r2
 8001586:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	79ba      	ldrb	r2, [r7, #6]
 800158c:	fb02 f303 	mul.w	r3, r2, r3
 8001590:	121b      	asrs	r3, r3, #8
 8001592:	b2db      	uxtb	r3, r3
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
	...

080015a0 <NeoPixel_clear_all_led>:

void NeoPixel_clear_all_led(){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
	   for (uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	e019      	b.n	80015e0 <NeoPixel_clear_all_led+0x40>
	        rgb_arr[4 * i] = 0;          // G = 0
	        rgb_arr[4 * i + 1] = 0;      // R = 0
	        rgb_arr[4 * i + 2] = 0;      // B = 0
	        rgb_arr[4 * i + 3] = 0;      // Reserved = 0
	#else // WS2812B
	        rgb_arr[3 * i] = 0;          // G = 0
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	4a10      	ldr	r2, [pc, #64]	; (80015f8 <NeoPixel_clear_all_led+0x58>)
 80015b6:	2100      	movs	r1, #0
 80015b8:	54d1      	strb	r1, [r2, r3]
	        rgb_arr[3 * i + 1] = 0;      // R = 0
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4413      	add	r3, r2
 80015c2:	3301      	adds	r3, #1
 80015c4:	4a0c      	ldr	r2, [pc, #48]	; (80015f8 <NeoPixel_clear_all_led+0x58>)
 80015c6:	2100      	movs	r1, #0
 80015c8:	54d1      	strb	r1, [r2, r3]
	        rgb_arr[3 * i + 2] = 0;      // B = 0
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	3302      	adds	r3, #2
 80015d4:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <NeoPixel_clear_all_led+0x58>)
 80015d6:	2100      	movs	r1, #0
 80015d8:	54d1      	strb	r1, [r2, r3]
	   for (uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3301      	adds	r3, #1
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b07      	cmp	r3, #7
 80015e4:	d9e2      	bls.n	80015ac <NeoPixel_clear_all_led+0xc>
	#endif // End SK6812 WS2812B case differentiation
	    }
	    NeoPixel_led_render(); // Ghi dữ liệu mới vào LED
 80015e6:	f000 f887 	bl	80016f8 <NeoPixel_led_render>
		HAL_Delay(200);
 80015ea:	20c8      	movs	r0, #200	; 0xc8
 80015ec:	f001 f860 	bl	80026b0 <HAL_Delay>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000488 	.word	0x20000488

080015fc <NeoPixel_toggleLed>:

void NeoPixel_toggleLed(){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	if(NeoPixel_status == 0){
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <NeoPixel_toggleLed+0x38>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d102      	bne.n	800160e <NeoPixel_toggleLed+0x12>
		 NeoPixel_clear_all_led();
 8001608:	f7ff ffca 	bl	80015a0 <NeoPixel_clear_all_led>
 800160c:	e006      	b.n	800161c <NeoPixel_toggleLed+0x20>
	}
	else{
		 NeoPixel_hslColor(120, 255, 127);
 800160e:	227f      	movs	r2, #127	; 0x7f
 8001610:	21ff      	movs	r1, #255	; 0xff
 8001612:	2078      	movs	r0, #120	; 0x78
 8001614:	f000 fa1c 	bl	8001a50 <NeoPixel_hslColor>
		 NeoPixel_led_set_all_RGB();
 8001618:	f000 f856 	bl	80016c8 <NeoPixel_led_set_all_RGB>
	}
	NeoPixel_status =  !NeoPixel_status;
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <NeoPixel_toggleLed+0x38>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	bf0c      	ite	eq
 8001624:	2301      	moveq	r3, #1
 8001626:	2300      	movne	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	461a      	mov	r2, r3
 800162c:	4b01      	ldr	r3, [pc, #4]	; (8001634 <NeoPixel_toggleLed+0x38>)
 800162e:	701a      	strb	r2, [r3, #0]
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000237 	.word	0x20000237

08001638 <NeoPixel_led_set_RGB>:
// Set a single color (RGB) to index
void NeoPixel_led_set_RGB(uint8_t index) {
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
	r = (NeoPixel_RGB_Color >> 16) & 0xFF;
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <NeoPixel_led_set_RGB+0x7c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	0c1b      	lsrs	r3, r3, #16
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <NeoPixel_led_set_RGB+0x80>)
 800164c:	701a      	strb	r2, [r3, #0]
	g = (NeoPixel_RGB_Color >> 8) & 0xFF;
 800164e:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <NeoPixel_led_set_RGB+0x7c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	0a1b      	lsrs	r3, r3, #8
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <NeoPixel_led_set_RGB+0x84>)
 8001658:	701a      	strb	r2, [r3, #0]
	b =  NeoPixel_RGB_Color & 0xFF;
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <NeoPixel_led_set_RGB+0x7c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <NeoPixel_led_set_RGB+0x88>)
 8001662:	701a      	strb	r2, [r3, #0]
  rgb_arr[4 * index] = scale8(g, 0xB0); // g;
  rgb_arr[4 * index + 1] = r;
  rgb_arr[4 * index + 2] = scale8(b, 0xF0); // b;
  rgb_arr[4 * index + 3] = 0;
#else // WS2812B
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <NeoPixel_led_set_RGB+0x84>)
 8001666:	7818      	ldrb	r0, [r3, #0]
 8001668:	79fa      	ldrb	r2, [r7, #7]
 800166a:	4613      	mov	r3, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	189c      	adds	r4, r3, r2
 8001670:	21b0      	movs	r1, #176	; 0xb0
 8001672:	f7ff ff81 	bl	8001578 <scale8>
 8001676:	4603      	mov	r3, r0
 8001678:	461a      	mov	r2, r3
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <NeoPixel_led_set_RGB+0x8c>)
 800167c:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 800167e:	79fa      	ldrb	r2, [r7, #7]
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	3301      	adds	r3, #1
 8001688:	4a0b      	ldr	r2, [pc, #44]	; (80016b8 <NeoPixel_led_set_RGB+0x80>)
 800168a:	7811      	ldrb	r1, [r2, #0]
 800168c:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <NeoPixel_led_set_RGB+0x8c>)
 800168e:	54d1      	strb	r1, [r2, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <NeoPixel_led_set_RGB+0x88>)
 8001692:	7818      	ldrb	r0, [r3, #0]
 8001694:	79fa      	ldrb	r2, [r7, #7]
 8001696:	4613      	mov	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4413      	add	r3, r2
 800169c:	1c9c      	adds	r4, r3, #2
 800169e:	21f0      	movs	r1, #240	; 0xf0
 80016a0:	f7ff ff6a 	bl	8001578 <scale8>
 80016a4:	4603      	mov	r3, r0
 80016a6:	461a      	mov	r2, r3
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <NeoPixel_led_set_RGB+0x8c>)
 80016aa:	551a      	strb	r2, [r3, r4]
#endif // End SK6812 WS2812B case differentiation
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd90      	pop	{r4, r7, pc}
 80016b4:	2000000c 	.word	0x2000000c
 80016b8:	200004d4 	.word	0x200004d4
 80016bc:	200004d5 	.word	0x200004d5
 80016c0:	200004d6 	.word	0x200004d6
 80016c4:	20000488 	.word	0x20000488

080016c8 <NeoPixel_led_set_all_RGB>:

// Set all colors to RGB
void NeoPixel_led_set_all_RGB() {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	e007      	b.n	80016e4 <NeoPixel_led_set_all_RGB+0x1c>
	  NeoPixel_led_set_RGB(i);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ffad 	bl	8001638 <NeoPixel_led_set_RGB>
  for(uint_fast8_t i = 0; i < NUM_PIXELS; ++i) {
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3301      	adds	r3, #1
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b07      	cmp	r3, #7
 80016e8:	d9f4      	bls.n	80016d4 <NeoPixel_led_set_all_RGB+0xc>
  }
	NeoPixel_led_render();
 80016ea:	f000 f805 	bl	80016f8 <NeoPixel_led_render>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <NeoPixel_led_render>:

// Shuttle the data to the LEDs!
void NeoPixel_led_render() {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim1_ch1.State != HAL_DMA_STATE_READY) {
 80016fe:	4b4d      	ldr	r3, [pc, #308]	; (8001834 <NeoPixel_led_render+0x13c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d105      	bne.n	8001712 <NeoPixel_led_render+0x1a>
 8001706:	4b4c      	ldr	r3, [pc, #304]	; (8001838 <NeoPixel_led_render+0x140>)
 8001708:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b01      	cmp	r3, #1
 8001710:	d014      	beq.n	800173c <NeoPixel_led_render+0x44>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	71fb      	strb	r3, [r7, #7]
 8001716:	e006      	b.n	8001726 <NeoPixel_led_render+0x2e>
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	4a48      	ldr	r2, [pc, #288]	; (800183c <NeoPixel_led_render+0x144>)
 800171c:	2100      	movs	r1, #0
 800171e:	54d1      	strb	r1, [r2, r3]
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	3301      	adds	r3, #1
 8001724:	71fb      	strb	r3, [r7, #7]
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	2b2f      	cmp	r3, #47	; 0x2f
 800172a:	d9f5      	bls.n	8001718 <NeoPixel_led_render+0x20>
    wr_buf_p = 0;
 800172c:	4b41      	ldr	r3, [pc, #260]	; (8001834 <NeoPixel_led_render+0x13c>)
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001732:	2100      	movs	r1, #0
 8001734:	4842      	ldr	r0, [pc, #264]	; (8001840 <NeoPixel_led_render+0x148>)
 8001736:	f005 f88f 	bl	8006858 <HAL_TIM_PWM_Stop_DMA>
    return;
 800173a:	e078      	b.n	800182e <NeoPixel_led_render+0x136>
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
    wr_buf[i + 48] = PWM_LO << (((rgb_arr[6] << i) & 0x80) > 0);
    wr_buf[i + 56] = PWM_LO << (((rgb_arr[7] << i) & 0x80) > 0);
  }
#else // WS2812B
  for(uint_fast8_t i = 0; i < 8; ++i) {
 800173c:	2300      	movs	r3, #0
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	e069      	b.n	8001816 <NeoPixel_led_render+0x11e>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8001742:	4b40      	ldr	r3, [pc, #256]	; (8001844 <NeoPixel_led_render+0x14c>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001752:	2b00      	cmp	r3, #0
 8001754:	dd01      	ble.n	800175a <NeoPixel_led_render+0x62>
 8001756:	213a      	movs	r1, #58	; 0x3a
 8001758:	e000      	b.n	800175c <NeoPixel_led_render+0x64>
 800175a:	211d      	movs	r1, #29
 800175c:	4a37      	ldr	r2, [pc, #220]	; (800183c <NeoPixel_led_render+0x144>)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	4413      	add	r3, r2
 8001762:	460a      	mov	r2, r1
 8001764:	701a      	strb	r2, [r3, #0]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 8001766:	4b37      	ldr	r3, [pc, #220]	; (8001844 <NeoPixel_led_render+0x14c>)
 8001768:	785b      	ldrb	r3, [r3, #1]
 800176a:	461a      	mov	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001776:	2b00      	cmp	r3, #0
 8001778:	dd01      	ble.n	800177e <NeoPixel_led_render+0x86>
 800177a:	213a      	movs	r1, #58	; 0x3a
 800177c:	e000      	b.n	8001780 <NeoPixel_led_render+0x88>
 800177e:	211d      	movs	r1, #29
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	3308      	adds	r3, #8
 8001784:	4a2d      	ldr	r2, [pc, #180]	; (800183c <NeoPixel_led_render+0x144>)
 8001786:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 8001788:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <NeoPixel_led_render+0x14c>)
 800178a:	789b      	ldrb	r3, [r3, #2]
 800178c:	461a      	mov	r2, r3
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001798:	2b00      	cmp	r3, #0
 800179a:	dd01      	ble.n	80017a0 <NeoPixel_led_render+0xa8>
 800179c:	213a      	movs	r1, #58	; 0x3a
 800179e:	e000      	b.n	80017a2 <NeoPixel_led_render+0xaa>
 80017a0:	211d      	movs	r1, #29
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	3310      	adds	r3, #16
 80017a6:	4a25      	ldr	r2, [pc, #148]	; (800183c <NeoPixel_led_render+0x144>)
 80017a8:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 80017aa:	4b26      	ldr	r3, [pc, #152]	; (8001844 <NeoPixel_led_render+0x14c>)
 80017ac:	78db      	ldrb	r3, [r3, #3]
 80017ae:	461a      	mov	r2, r3
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	dd01      	ble.n	80017c2 <NeoPixel_led_render+0xca>
 80017be:	213a      	movs	r1, #58	; 0x3a
 80017c0:	e000      	b.n	80017c4 <NeoPixel_led_render+0xcc>
 80017c2:	211d      	movs	r1, #29
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	3318      	adds	r3, #24
 80017c8:	4a1c      	ldr	r2, [pc, #112]	; (800183c <NeoPixel_led_render+0x144>)
 80017ca:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <NeoPixel_led_render+0x14c>)
 80017ce:	791b      	ldrb	r3, [r3, #4]
 80017d0:	461a      	mov	r2, r3
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017dc:	2b00      	cmp	r3, #0
 80017de:	dd01      	ble.n	80017e4 <NeoPixel_led_render+0xec>
 80017e0:	213a      	movs	r1, #58	; 0x3a
 80017e2:	e000      	b.n	80017e6 <NeoPixel_led_render+0xee>
 80017e4:	211d      	movs	r1, #29
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	3320      	adds	r3, #32
 80017ea:	4a14      	ldr	r2, [pc, #80]	; (800183c <NeoPixel_led_render+0x144>)
 80017ec:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <NeoPixel_led_render+0x14c>)
 80017f0:	795b      	ldrb	r3, [r3, #5]
 80017f2:	461a      	mov	r2, r3
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fe:	2b00      	cmp	r3, #0
 8001800:	dd01      	ble.n	8001806 <NeoPixel_led_render+0x10e>
 8001802:	213a      	movs	r1, #58	; 0x3a
 8001804:	e000      	b.n	8001808 <NeoPixel_led_render+0x110>
 8001806:	211d      	movs	r1, #29
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	3328      	adds	r3, #40	; 0x28
 800180c:	4a0b      	ldr	r2, [pc, #44]	; (800183c <NeoPixel_led_render+0x144>)
 800180e:	54d1      	strb	r1, [r2, r3]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	3301      	adds	r3, #1
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2b07      	cmp	r3, #7
 800181a:	d992      	bls.n	8001742 <NeoPixel_led_render+0x4a>
//	dmaState = HAL_DMA_GetState(&hdma_tim1_ch1);
//	if(newStatus == HAL_OK){
//		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "newstatus=%02X#\r\n", newStatus), 1000);
//		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "dmaState=%02X#\r\n", dmaState), 1000);
//	}
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)wr_buf, WR_BUF_LEN);
 800181c:	2330      	movs	r3, #48	; 0x30
 800181e:	4a07      	ldr	r2, [pc, #28]	; (800183c <NeoPixel_led_render+0x144>)
 8001820:	2100      	movs	r1, #0
 8001822:	4807      	ldr	r0, [pc, #28]	; (8001840 <NeoPixel_led_render+0x148>)
 8001824:	f004 fe76 	bl	8006514 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 8001828:	4b02      	ldr	r3, [pc, #8]	; (8001834 <NeoPixel_led_render+0x13c>)
 800182a:	2202      	movs	r2, #2
 800182c:	601a      	str	r2, [r3, #0]
}
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200004d0 	.word	0x200004d0
 8001838:	200003dc 	.word	0x200003dc
 800183c:	200004a0 	.word	0x200004a0
 8001840:	200002bc 	.word	0x200002bc
 8001844:	20000488 	.word	0x20000488

08001848 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8001850:	4b39      	ldr	r3, [pc, #228]	; (8001938 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b07      	cmp	r3, #7
 8001856:	d853      	bhi.n	8001900 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb8>
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	e047      	b.n	80018ee <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa6>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800185e:	4b36      	ldr	r3, [pc, #216]	; (8001938 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	4a34      	ldr	r2, [pc, #208]	; (800193c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800186a:	5cd3      	ldrb	r3, [r2, r3]
 800186c:	461a      	mov	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001878:	2b00      	cmp	r3, #0
 800187a:	dd01      	ble.n	8001880 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 800187c:	213a      	movs	r1, #58	; 0x3a
 800187e:	e000      	b.n	8001882 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8001880:	211d      	movs	r1, #29
 8001882:	4a2f      	ldr	r2, [pc, #188]	; (8001940 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	460a      	mov	r2, r1
 800188a:	701a      	strb	r2, [r3, #0]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 800188c:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	3301      	adds	r3, #1
 8001898:	4a28      	ldr	r2, [pc, #160]	; (800193c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800189a:	5cd3      	ldrb	r3, [r2, r3]
 800189c:	461a      	mov	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	dd01      	ble.n	80018b0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 80018ac:	213a      	movs	r1, #58	; 0x3a
 80018ae:	e000      	b.n	80018b2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x6a>
 80018b0:	211d      	movs	r1, #29
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3308      	adds	r3, #8
 80018b6:	4a22      	ldr	r2, [pc, #136]	; (8001940 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80018b8:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 80018ba:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	4613      	mov	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4413      	add	r3, r2
 80018c4:	3302      	adds	r3, #2
 80018c6:	4a1d      	ldr	r2, [pc, #116]	; (800193c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80018c8:	5cd3      	ldrb	r3, [r2, r3]
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	dd01      	ble.n	80018de <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 80018da:	213a      	movs	r1, #58	; 0x3a
 80018dc:	e000      	b.n	80018e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 80018de:	211d      	movs	r1, #29
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3310      	adds	r3, #16
 80018e4:	4a16      	ldr	r2, [pc, #88]	; (8001940 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80018e6:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	3301      	adds	r3, #1
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2b07      	cmp	r3, #7
 80018f2:	d9b4      	bls.n	800185e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 80018f4:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80018fc:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 80018fe:	e015      	b.n	800192c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8001900:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b09      	cmp	r3, #9
 8001906:	d811      	bhi.n	800192c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	72fb      	strb	r3, [r7, #11]
 800190c:	e006      	b.n	800191c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd4>
 800190e:	7afb      	ldrb	r3, [r7, #11]
 8001910:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001912:	2100      	movs	r1, #0
 8001914:	54d1      	strb	r1, [r2, r3]
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	3301      	adds	r3, #1
 800191a:	72fb      	strb	r3, [r7, #11]
 800191c:	7afb      	ldrb	r3, [r7, #11]
 800191e:	2b17      	cmp	r3, #23
 8001920:	d9f5      	bls.n	800190e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc6>
    wr_buf_p++;
 8001922:	4b05      	ldr	r3, [pc, #20]	; (8001938 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	3301      	adds	r3, #1
 8001928:	4a03      	ldr	r2, [pc, #12]	; (8001938 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 800192a:	6013      	str	r3, [r2, #0]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	200004d0 	.word	0x200004d0
 800193c:	20000488 	.word	0x20000488
 8001940:	200004a0 	.word	0x200004a0

08001944 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 800194c:	4b3c      	ldr	r3, [pc, #240]	; (8001a40 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b07      	cmp	r3, #7
 8001952:	d852      	bhi.n	80019fa <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	e046      	b.n	80019e8 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800195a:	4b39      	ldr	r3, [pc, #228]	; (8001a40 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	4613      	mov	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	4a37      	ldr	r2, [pc, #220]	; (8001a44 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001966:	5cd3      	ldrb	r3, [r2, r3]
 8001968:	461a      	mov	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001974:	2b00      	cmp	r3, #0
 8001976:	dd01      	ble.n	800197c <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8001978:	213a      	movs	r1, #58	; 0x3a
 800197a:	e000      	b.n	800197e <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 800197c:	211d      	movs	r1, #29
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	3318      	adds	r3, #24
 8001982:	4a31      	ldr	r2, [pc, #196]	; (8001a48 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001984:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001986:	4b2e      	ldr	r3, [pc, #184]	; (8001a40 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	3301      	adds	r3, #1
 8001992:	4a2c      	ldr	r2, [pc, #176]	; (8001a44 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001994:	5cd3      	ldrb	r3, [r2, r3]
 8001996:	461a      	mov	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	dd01      	ble.n	80019aa <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 80019a6:	213a      	movs	r1, #58	; 0x3a
 80019a8:	e000      	b.n	80019ac <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 80019aa:	211d      	movs	r1, #29
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	3320      	adds	r3, #32
 80019b0:	4a25      	ldr	r2, [pc, #148]	; (8001a48 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80019b2:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 80019b4:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4613      	mov	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4413      	add	r3, r2
 80019be:	3302      	adds	r3, #2
 80019c0:	4a20      	ldr	r2, [pc, #128]	; (8001a44 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80019c2:	5cd3      	ldrb	r3, [r2, r3]
 80019c4:	461a      	mov	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	dd01      	ble.n	80019d8 <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 80019d4:	213a      	movs	r1, #58	; 0x3a
 80019d6:	e000      	b.n	80019da <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 80019d8:	211d      	movs	r1, #29
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3328      	adds	r3, #40	; 0x28
 80019de:	4a1a      	ldr	r2, [pc, #104]	; (8001a48 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80019e0:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3301      	adds	r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b07      	cmp	r3, #7
 80019ec:	d9b5      	bls.n	800195a <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 80019ee:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	3301      	adds	r3, #1
 80019f4:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80019f6:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
  }
}
 80019f8:	e01d      	b.n	8001a36 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b09      	cmp	r3, #9
 8001a00:	d812      	bhi.n	8001a28 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8001a02:	2318      	movs	r3, #24
 8001a04:	72fb      	strb	r3, [r7, #11]
 8001a06:	e006      	b.n	8001a16 <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 8001a08:	7afb      	ldrb	r3, [r7, #11]
 8001a0a:	4a0f      	ldr	r2, [pc, #60]	; (8001a48 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	54d1      	strb	r1, [r2, r3]
 8001a10:	7afb      	ldrb	r3, [r7, #11]
 8001a12:	3301      	adds	r3, #1
 8001a14:	72fb      	strb	r3, [r7, #11]
 8001a16:	7afb      	ldrb	r3, [r7, #11]
 8001a18:	2b2f      	cmp	r3, #47	; 0x2f
 8001a1a:	d9f5      	bls.n	8001a08 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>
    ++wr_buf_p;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	3301      	adds	r3, #1
 8001a22:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001a24:	6013      	str	r3, [r2, #0]
}
 8001a26:	e006      	b.n	8001a36 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
    wr_buf_p = 0;
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4806      	ldr	r0, [pc, #24]	; (8001a4c <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8001a32:	f004 ff11 	bl	8006858 <HAL_TIM_PWM_Stop_DMA>
}
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200004d0 	.word	0x200004d0
 8001a44:	20000488 	.word	0x20000488
 8001a48:	200004a0 	.word	0x200004a0
 8001a4c:	200002bc 	.word	0x200002bc

08001a50 <NeoPixel_hslColor>:
	++angle;
	NeoPixel_led_render();
	HAL_Delay(10);
}

void  NeoPixel_hslColor(uint8_t h, uint8_t s, uint8_t l){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	71bb      	strb	r3, [r7, #6]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	717b      	strb	r3, [r7, #5]
	NeoPixel_hsl_to_rgb(h, s, l);
 8001a62:	797a      	ldrb	r2, [r7, #5]
 8001a64:	79b9      	ldrb	r1, [r7, #6]
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 f805 	bl	8001a78 <NeoPixel_hsl_to_rgb>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <NeoPixel_hsl_to_rgb>:
void NeoPixel_hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
 8001a82:	460b      	mov	r3, r1
 8001a84:	71bb      	strb	r3, [r7, #6]
 8001a86:	4613      	mov	r3, r2
 8001a88:	717b      	strb	r3, [r7, #5]
	if(l == 0) return;
 8001a8a:	797b      	ldrb	r3, [r7, #5]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80b6 	beq.w	8001bfe <NeoPixel_hsl_to_rgb+0x186>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 8001a92:	797b      	ldrb	r3, [r7, #5]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	3301      	adds	r3, #1
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8001a9c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db09      	blt.n	8001ab8 <NeoPixel_hsl_to_rgb+0x40>
 8001aa4:	89bb      	ldrh	r3, [r7, #12]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	79ba      	ldrb	r2, [r7, #6]
 8001aac:	fb02 f303 	mul.w	r3, r2, r3
 8001ab0:	121b      	asrs	r3, r3, #8
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	74fb      	strb	r3, [r7, #19]
 8001ab6:	e00a      	b.n	8001ace <NeoPixel_hsl_to_rgb+0x56>
	else            c = (512 - (l1 << 1)) * s >> 8;
 8001ab8:	89bb      	ldrh	r3, [r7, #12]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001ac2:	79ba      	ldrb	r2, [r7, #6]
 8001ac4:	fb02 f303 	mul.w	r3, r2, r3
 8001ac8:	121b      	asrs	r3, r3, #8
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	0052      	lsls	r2, r2, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8001ade:	897b      	ldrh	r3, [r7, #10]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 8001ae6:	7d3b      	ldrb	r3, [r7, #20]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	3301      	adds	r3, #1
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8001af2:	897b      	ldrh	r3, [r7, #10]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d109      	bne.n	8001b12 <NeoPixel_hsl_to_rgb+0x9a>
 8001afe:	89fb      	ldrh	r3, [r7, #14]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	7cfa      	ldrb	r2, [r7, #19]
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	fb02 f303 	mul.w	r3, r2, r3
 8001b0a:	121b      	asrs	r3, r3, #8
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	74bb      	strb	r3, [r7, #18]
 8001b10:	e00a      	b.n	8001b28 <NeoPixel_hsl_to_rgb+0xb0>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8001b12:	89fb      	ldrh	r3, [r7, #14]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001b1a:	7cfa      	ldrb	r2, [r7, #19]
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	fb02 f303 	mul.w	r3, r2, r3
 8001b22:	121b      	asrs	r3, r3, #8
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	74bb      	strb	r3, [r7, #18]

	 m = l - (c >> 1);
 8001b28:	7cfb      	ldrb	r3, [r7, #19]
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	085b      	lsrs	r3, r3, #1
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	797a      	ldrb	r2, [r7, #5]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	747b      	strb	r3, [r7, #17]
	 switch(H >> 8) {       // High byte = sextant of colorwheel
 8001b38:	897b      	ldrh	r3, [r7, #10]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d83a      	bhi.n	8001bba <NeoPixel_hsl_to_rgb+0x142>
 8001b44:	a201      	add	r2, pc, #4	; (adr r2, 8001b4c <NeoPixel_hsl_to_rgb+0xd4>)
 8001b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4a:	bf00      	nop
 8001b4c:	08001b61 	.word	0x08001b61
 8001b50:	08001b73 	.word	0x08001b73
 8001b54:	08001b85 	.word	0x08001b85
 8001b58:	08001b97 	.word	0x08001b97
 8001b5c:	08001ba9 	.word	0x08001ba9
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 8001b60:	7cfb      	ldrb	r3, [r7, #19]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	75fb      	strb	r3, [r7, #23]
 8001b66:	7cbb      	ldrb	r3, [r7, #18]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	75bb      	strb	r3, [r7, #22]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	757b      	strb	r3, [r7, #21]
 8001b70:	e02c      	b.n	8001bcc <NeoPixel_hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 8001b72:	7cbb      	ldrb	r3, [r7, #18]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	75fb      	strb	r3, [r7, #23]
 8001b78:	7cfb      	ldrb	r3, [r7, #19]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	75bb      	strb	r3, [r7, #22]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	757b      	strb	r3, [r7, #21]
 8001b82:	e023      	b.n	8001bcc <NeoPixel_hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 8001b84:	2300      	movs	r3, #0
 8001b86:	75fb      	strb	r3, [r7, #23]
 8001b88:	7cfb      	ldrb	r3, [r7, #19]
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	75bb      	strb	r3, [r7, #22]
 8001b8e:	7cbb      	ldrb	r3, [r7, #18]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	757b      	strb	r3, [r7, #21]
 8001b94:	e01a      	b.n	8001bcc <NeoPixel_hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 8001b96:	2300      	movs	r3, #0
 8001b98:	75fb      	strb	r3, [r7, #23]
 8001b9a:	7cbb      	ldrb	r3, [r7, #18]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	75bb      	strb	r3, [r7, #22]
 8001ba0:	7cfb      	ldrb	r3, [r7, #19]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	757b      	strb	r3, [r7, #21]
 8001ba6:	e011      	b.n	8001bcc <NeoPixel_hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 8001ba8:	7cbb      	ldrb	r3, [r7, #18]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	75fb      	strb	r3, [r7, #23]
 8001bae:	2300      	movs	r3, #0
 8001bb0:	75bb      	strb	r3, [r7, #22]
 8001bb2:	7cfb      	ldrb	r3, [r7, #19]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	757b      	strb	r3, [r7, #21]
 8001bb8:	e008      	b.n	8001bcc <NeoPixel_hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 8001bba:	7cfb      	ldrb	r3, [r7, #19]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	75fb      	strb	r3, [r7, #23]
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	75bb      	strb	r3, [r7, #22]
 8001bc4:	7cbb      	ldrb	r3, [r7, #18]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	757b      	strb	r3, [r7, #21]
 8001bca:	bf00      	nop
	}
     NeoPixel_RGB_Color = (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	7c7b      	ldrb	r3, [r7, #17]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	041a      	lsls	r2, r3, #16
 8001bda:	7dbb      	ldrb	r3, [r7, #22]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	4619      	mov	r1, r3
 8001be0:	7c7b      	ldrb	r3, [r7, #17]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	440b      	add	r3, r1
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	431a      	orrs	r2, r3
 8001bea:	7d7b      	ldrb	r3, [r7, #21]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	4619      	mov	r1, r3
 8001bf0:	7c7b      	ldrb	r3, [r7, #17]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	440b      	add	r3, r1
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	4a03      	ldr	r2, [pc, #12]	; (8001c08 <NeoPixel_hsl_to_rgb+0x190>)
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	e000      	b.n	8001c00 <NeoPixel_hsl_to_rgb+0x188>
	if(l == 0) return;
 8001bfe:	bf00      	nop
}
 8001c00:	371c      	adds	r7, #28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	2000000c 	.word	0x2000000c

08001c0c <SCH_Init>:

sTask SCH_tasks_G[SCH_MAX_TASKS];

sTask* head = NULL;

void SCH_Init(void){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
    unsigned char i;
    for (i = 0; i < SCH_MAX_TASKS; i++) {
 8001c12:	2300      	movs	r3, #0
 8001c14:	71fb      	strb	r3, [r7, #7]
 8001c16:	e006      	b.n	8001c26 <SCH_Init+0x1a>
        SCH_Delete_Task(i);
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f8c8 	bl	8001db0 <SCH_Delete_Task>
    for (i = 0; i < SCH_MAX_TASKS; i++) {
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	3301      	adds	r3, #1
 8001c24:	71fb      	strb	r3, [r7, #7]
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	2b27      	cmp	r3, #39	; 0x27
 8001c2a:	d9f5      	bls.n	8001c18 <SCH_Init+0xc>
    }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <SCH_Update>:
void SCH_Update(void){
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
	 unsigned char Index;
	    // NOTE: calculations are in *TICKS* (not milliseconds)
	    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8001c3e:	2300      	movs	r3, #0
 8001c40:	71fb      	strb	r3, [r7, #7]
 8001c42:	e05d      	b.n	8001d00 <SCH_Update+0xc8>
	        // Check if there is a task at this location
	        if (SCH_tasks_G[Index].pTask){
 8001c44:	79fa      	ldrb	r2, [r7, #7]
 8001c46:	4933      	ldr	r1, [pc, #204]	; (8001d14 <SCH_Update+0xdc>)
 8001c48:	4613      	mov	r3, r2
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	4413      	add	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	440b      	add	r3, r1
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d050      	beq.n	8001cfa <SCH_Update+0xc2>
	            if (SCH_tasks_G[Index].Delay == 0) {
 8001c58:	79fa      	ldrb	r2, [r7, #7]
 8001c5a:	492e      	ldr	r1, [pc, #184]	; (8001d14 <SCH_Update+0xdc>)
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	440b      	add	r3, r1
 8001c66:	3304      	adds	r3, #4
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d132      	bne.n	8001cd4 <SCH_Update+0x9c>
	                // The task is due to run
	                // Inc. the 'RunMe' flag
	                SCH_tasks_G[Index].RunMe += 1;
 8001c6e:	79fa      	ldrb	r2, [r7, #7]
 8001c70:	4928      	ldr	r1, [pc, #160]	; (8001d14 <SCH_Update+0xdc>)
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	440b      	add	r3, r1
 8001c7c:	330c      	adds	r3, #12
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	79fa      	ldrb	r2, [r7, #7]
 8001c82:	3301      	adds	r3, #1
 8001c84:	b2d8      	uxtb	r0, r3
 8001c86:	4923      	ldr	r1, [pc, #140]	; (8001d14 <SCH_Update+0xdc>)
 8001c88:	4613      	mov	r3, r2
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	330c      	adds	r3, #12
 8001c94:	4602      	mov	r2, r0
 8001c96:	701a      	strb	r2, [r3, #0]
	                if (SCH_tasks_G[Index].Period) {
 8001c98:	79fa      	ldrb	r2, [r7, #7]
 8001c9a:	491e      	ldr	r1, [pc, #120]	; (8001d14 <SCH_Update+0xdc>)
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	440b      	add	r3, r1
 8001ca6:	3308      	adds	r3, #8
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d025      	beq.n	8001cfa <SCH_Update+0xc2>
	                    // Schedule periodic tasks to run again
	                    SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8001cae:	79f9      	ldrb	r1, [r7, #7]
 8001cb0:	79fa      	ldrb	r2, [r7, #7]
 8001cb2:	4818      	ldr	r0, [pc, #96]	; (8001d14 <SCH_Update+0xdc>)
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	440b      	add	r3, r1
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4403      	add	r3, r0
 8001cbe:	3308      	adds	r3, #8
 8001cc0:	6819      	ldr	r1, [r3, #0]
 8001cc2:	4814      	ldr	r0, [pc, #80]	; (8001d14 <SCH_Update+0xdc>)
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4403      	add	r3, r0
 8001cce:	3304      	adds	r3, #4
 8001cd0:	6019      	str	r1, [r3, #0]
 8001cd2:	e012      	b.n	8001cfa <SCH_Update+0xc2>
	                }
	            } else {
	                // Not yet ready to run: just decrement the delay
	                SCH_tasks_G[Index].Delay -= 1;
 8001cd4:	79fa      	ldrb	r2, [r7, #7]
 8001cd6:	490f      	ldr	r1, [pc, #60]	; (8001d14 <SCH_Update+0xdc>)
 8001cd8:	4613      	mov	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	79fa      	ldrb	r2, [r7, #7]
 8001ce8:	1e59      	subs	r1, r3, #1
 8001cea:	480a      	ldr	r0, [pc, #40]	; (8001d14 <SCH_Update+0xdc>)
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4403      	add	r3, r0
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	6019      	str	r1, [r3, #0]
	    for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	71fb      	strb	r3, [r7, #7]
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	2b27      	cmp	r3, #39	; 0x27
 8001d04:	d99e      	bls.n	8001c44 <SCH_Update+0xc>
/* O(1)
 * 	if(head != NULL){
		head->Delay--;
	}
 * */
}
 8001d06:	bf00      	nop
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	200004d8 	.word	0x200004d8

08001d18 <SCH_Dispatch_Tasks>:
	 return index;
	 * */

}
void SCH_Dispatch_Tasks(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
    unsigned char Index;
    // Dispatches (runs) the next task (if one is ready)
    for (Index = 0; Index < SCH_MAX_TASKS; Index++){
 8001d1e:	2300      	movs	r3, #0
 8001d20:	71fb      	strb	r3, [r7, #7]
 8001d22:	e03a      	b.n	8001d9a <SCH_Dispatch_Tasks+0x82>
        if (SCH_tasks_G[Index].RunMe > 0) {
 8001d24:	79fa      	ldrb	r2, [r7, #7]
 8001d26:	4921      	ldr	r1, [pc, #132]	; (8001dac <SCH_Dispatch_Tasks+0x94>)
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	440b      	add	r3, r1
 8001d32:	330c      	adds	r3, #12
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d02c      	beq.n	8001d94 <SCH_Dispatch_Tasks+0x7c>
            (*SCH_tasks_G[Index].pTask)(); // Run the task
 8001d3a:	79fa      	ldrb	r2, [r7, #7]
 8001d3c:	491b      	ldr	r1, [pc, #108]	; (8001dac <SCH_Dispatch_Tasks+0x94>)
 8001d3e:	4613      	mov	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	440b      	add	r3, r1
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4798      	blx	r3
            SCH_tasks_G[Index].RunMe -= 1; // Reset / reduce RunMe flag
 8001d4c:	79fa      	ldrb	r2, [r7, #7]
 8001d4e:	4917      	ldr	r1, [pc, #92]	; (8001dac <SCH_Dispatch_Tasks+0x94>)
 8001d50:	4613      	mov	r3, r2
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4413      	add	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	440b      	add	r3, r1
 8001d5a:	330c      	adds	r3, #12
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	79fa      	ldrb	r2, [r7, #7]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	b2d8      	uxtb	r0, r3
 8001d64:	4911      	ldr	r1, [pc, #68]	; (8001dac <SCH_Dispatch_Tasks+0x94>)
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	440b      	add	r3, r1
 8001d70:	330c      	adds	r3, #12
 8001d72:	4602      	mov	r2, r0
 8001d74:	701a      	strb	r2, [r3, #0]
            // Periodic tasks will automatically run again
            // - if this is a 'one shot' task, remove it from the array
            if (SCH_tasks_G[Index].Period == 0)
 8001d76:	79fa      	ldrb	r2, [r7, #7]
 8001d78:	490c      	ldr	r1, [pc, #48]	; (8001dac <SCH_Dispatch_Tasks+0x94>)
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	440b      	add	r3, r1
 8001d84:	3308      	adds	r3, #8
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d103      	bne.n	8001d94 <SCH_Dispatch_Tasks+0x7c>
            {
                SCH_Delete_Task(Index);
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 f80e 	bl	8001db0 <SCH_Delete_Task>
    for (Index = 0; Index < SCH_MAX_TASKS; Index++){
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	3301      	adds	r3, #1
 8001d98:	71fb      	strb	r3, [r7, #7]
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	2b27      	cmp	r3, #39	; 0x27
 8001d9e:	d9c1      	bls.n	8001d24 <SCH_Dispatch_Tasks+0xc>
		head = head->pNext;
		SCH_Delete_Task(del_index);
	}
	*/

}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200004d8 	.word	0x200004d8

08001db0 <SCH_Delete_Task>:
void SCH_Delete_Task(const unsigned char TASK_INDEX){
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
	if(SCH_tasks_G[TASK_INDEX].pTask == 0){
 8001dba:	79fa      	ldrb	r2, [r7, #7]
 8001dbc:	491f      	ldr	r1, [pc, #124]	; (8001e3c <SCH_Delete_Task+0x8c>)
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	440b      	add	r3, r1
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d031      	beq.n	8001e32 <SCH_Delete_Task+0x82>
		return ;
	}
	else{
	    SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 8001dce:	79fa      	ldrb	r2, [r7, #7]
 8001dd0:	491a      	ldr	r1, [pc, #104]	; (8001e3c <SCH_Delete_Task+0x8c>)
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	440b      	add	r3, r1
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
	    SCH_tasks_G[TASK_INDEX].Delay = 0;
 8001de0:	79fa      	ldrb	r2, [r7, #7]
 8001de2:	4916      	ldr	r1, [pc, #88]	; (8001e3c <SCH_Delete_Task+0x8c>)
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	440b      	add	r3, r1
 8001dee:	3304      	adds	r3, #4
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
	    SCH_tasks_G[TASK_INDEX].Period = 0;
 8001df4:	79fa      	ldrb	r2, [r7, #7]
 8001df6:	4911      	ldr	r1, [pc, #68]	; (8001e3c <SCH_Delete_Task+0x8c>)
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	440b      	add	r3, r1
 8001e02:	3308      	adds	r3, #8
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
	    SCH_tasks_G[TASK_INDEX].pNext = 0;
 8001e08:	79fa      	ldrb	r2, [r7, #7]
 8001e0a:	490c      	ldr	r1, [pc, #48]	; (8001e3c <SCH_Delete_Task+0x8c>)
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	440b      	add	r3, r1
 8001e16:	3310      	adds	r3, #16
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
	    SCH_tasks_G[TASK_INDEX].TaskID = 0;
 8001e1c:	79fa      	ldrb	r2, [r7, #7]
 8001e1e:	4907      	ldr	r1, [pc, #28]	; (8001e3c <SCH_Delete_Task+0x8c>)
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	440b      	add	r3, r1
 8001e2a:	3314      	adds	r3, #20
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	e000      	b.n	8001e34 <SCH_Delete_Task+0x84>
		return ;
 8001e32:	bf00      	nop
	}
}
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	200004d8 	.word	0x200004d8

08001e40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <HAL_MspInit+0x5c>)
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <HAL_MspInit+0x5c>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6193      	str	r3, [r2, #24]
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_MspInit+0x5c>)
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <HAL_MspInit+0x5c>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	4a0e      	ldr	r2, [pc, #56]	; (8001e9c <HAL_MspInit+0x5c>)
 8001e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e68:	61d3      	str	r3, [r2, #28]
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <HAL_MspInit+0x5c>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <HAL_MspInit+0x60>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	4a04      	ldr	r2, [pc, #16]	; (8001ea0 <HAL_MspInit+0x60>)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40010000 	.word	0x40010000

08001ea4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0310 	add.w	r3, r7, #16
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a18      	ldr	r2, [pc, #96]	; (8001f20 <HAL_ADC_MspInit+0x7c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d129      	bne.n	8001f18 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ec4:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <HAL_ADC_MspInit+0x80>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a16      	ldr	r2, [pc, #88]	; (8001f24 <HAL_ADC_MspInit+0x80>)
 8001eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <HAL_ADC_MspInit+0x80>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_ADC_MspInit+0x80>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <HAL_ADC_MspInit+0x80>)
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	6193      	str	r3, [r2, #24]
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <HAL_ADC_MspInit+0x80>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efc:	f107 0310 	add.w	r3, r7, #16
 8001f00:	4619      	mov	r1, r3
 8001f02:	4809      	ldr	r0, [pc, #36]	; (8001f28 <HAL_ADC_MspInit+0x84>)
 8001f04:	f001 fba8 	bl	8003658 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	2012      	movs	r0, #18
 8001f0e:	f001 f8be 	bl	800308e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001f12:	2012      	movs	r0, #18
 8001f14:	f001 f8d7 	bl	80030c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f18:	bf00      	nop
 8001f1a:	3720      	adds	r7, #32
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40012400 	.word	0x40012400
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40010800 	.word	0x40010800

08001f2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a25      	ldr	r2, [pc, #148]	; (8001fdc <HAL_I2C_MspInit+0xb0>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d142      	bne.n	8001fd2 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4c:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <HAL_I2C_MspInit+0xb4>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	4a23      	ldr	r2, [pc, #140]	; (8001fe0 <HAL_I2C_MspInit+0xb4>)
 8001f52:	f043 0308 	orr.w	r3, r3, #8
 8001f56:	6193      	str	r3, [r2, #24]
 8001f58:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <HAL_I2C_MspInit+0xb4>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f6a:	2312      	movs	r3, #18
 8001f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	481a      	ldr	r0, [pc, #104]	; (8001fe4 <HAL_I2C_MspInit+0xb8>)
 8001f7a:	f001 fb6d 	bl	8003658 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001f7e:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <HAL_I2C_MspInit+0xbc>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	f043 0302 	orr.w	r3, r3, #2
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
 8001f94:	4a14      	ldr	r2, [pc, #80]	; (8001fe8 <HAL_I2C_MspInit+0xbc>)
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_I2C_MspInit+0xb4>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <HAL_I2C_MspInit+0xb4>)
 8001fa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fa4:	61d3      	str	r3, [r2, #28]
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_I2C_MspInit+0xb4>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	201f      	movs	r0, #31
 8001fb8:	f001 f869 	bl	800308e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001fbc:	201f      	movs	r0, #31
 8001fbe:	f001 f882 	bl	80030c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	2020      	movs	r0, #32
 8001fc8:	f001 f861 	bl	800308e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001fcc:	2020      	movs	r0, #32
 8001fce:	f001 f87a 	bl	80030c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fd2:	bf00      	nop
 8001fd4:	3728      	adds	r7, #40	; 0x28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40005400 	.word	0x40005400
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40010c00 	.word	0x40010c00
 8001fe8:	40010000 	.word	0x40010000

08001fec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1c      	ldr	r2, [pc, #112]	; (800206c <HAL_TIM_PWM_MspInit+0x80>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d132      	bne.n	8002064 <HAL_TIM_PWM_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <HAL_TIM_PWM_MspInit+0x84>)
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	4a1b      	ldr	r2, [pc, #108]	; (8002070 <HAL_TIM_PWM_MspInit+0x84>)
 8002004:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002008:	6193      	str	r3, [r2, #24]
 800200a:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_TIM_PWM_MspInit+0x84>)
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8002016:	4b17      	ldr	r3, [pc, #92]	; (8002074 <HAL_TIM_PWM_MspInit+0x88>)
 8002018:	4a17      	ldr	r2, [pc, #92]	; (8002078 <HAL_TIM_PWM_MspInit+0x8c>)
 800201a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800201c:	4b15      	ldr	r3, [pc, #84]	; (8002074 <HAL_TIM_PWM_MspInit+0x88>)
 800201e:	2210      	movs	r2, #16
 8002020:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002022:	4b14      	ldr	r3, [pc, #80]	; (8002074 <HAL_TIM_PWM_MspInit+0x88>)
 8002024:	2200      	movs	r2, #0
 8002026:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_TIM_PWM_MspInit+0x88>)
 800202a:	2280      	movs	r2, #128	; 0x80
 800202c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_TIM_PWM_MspInit+0x88>)
 8002030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002034:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002036:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <HAL_TIM_PWM_MspInit+0x88>)
 8002038:	2200      	movs	r2, #0
 800203a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 800203c:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <HAL_TIM_PWM_MspInit+0x88>)
 800203e:	2220      	movs	r2, #32
 8002040:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002042:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <HAL_TIM_PWM_MspInit+0x88>)
 8002044:	2200      	movs	r2, #0
 8002046:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002048:	480a      	ldr	r0, [pc, #40]	; (8002074 <HAL_TIM_PWM_MspInit+0x88>)
 800204a:	f001 f857 	bl	80030fc <HAL_DMA_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HAL_TIM_PWM_MspInit+0x6c>
    {
      Error_Handler();
 8002054:	f7ff fa8b 	bl	800156e <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a06      	ldr	r2, [pc, #24]	; (8002074 <HAL_TIM_PWM_MspInit+0x88>)
 800205c:	625a      	str	r2, [r3, #36]	; 0x24
 800205e:	4a05      	ldr	r2, [pc, #20]	; (8002074 <HAL_TIM_PWM_MspInit+0x88>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002064:	bf00      	nop
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40012c00 	.word	0x40012c00
 8002070:	40021000 	.word	0x40021000
 8002074:	200003dc 	.word	0x200003dc
 8002078:	4002001c 	.word	0x4002001c

0800207c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208c:	d114      	bne.n	80020b8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800208e:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <HAL_TIM_Base_MspInit+0x8c>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	4a1d      	ldr	r2, [pc, #116]	; (8002108 <HAL_TIM_Base_MspInit+0x8c>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	61d3      	str	r3, [r2, #28]
 800209a:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_TIM_Base_MspInit+0x8c>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	201c      	movs	r0, #28
 80020ac:	f000 ffef 	bl	800308e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020b0:	201c      	movs	r0, #28
 80020b2:	f001 f808 	bl	80030c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80020b6:	e022      	b.n	80020fe <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a13      	ldr	r2, [pc, #76]	; (800210c <HAL_TIM_Base_MspInit+0x90>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d10c      	bne.n	80020dc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_TIM_Base_MspInit+0x8c>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	4a10      	ldr	r2, [pc, #64]	; (8002108 <HAL_TIM_Base_MspInit+0x8c>)
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	61d3      	str	r3, [r2, #28]
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_TIM_Base_MspInit+0x8c>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]
}
 80020da:	e010      	b.n	80020fe <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a0b      	ldr	r2, [pc, #44]	; (8002110 <HAL_TIM_Base_MspInit+0x94>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d10b      	bne.n	80020fe <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_TIM_Base_MspInit+0x8c>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	4a07      	ldr	r2, [pc, #28]	; (8002108 <HAL_TIM_Base_MspInit+0x8c>)
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	61d3      	str	r3, [r2, #28]
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_TIM_Base_MspInit+0x8c>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	40000400 	.word	0x40000400
 8002110:	40000800 	.word	0x40000800

08002114 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	; 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a37      	ldr	r2, [pc, #220]	; (800220c <HAL_TIM_MspPostInit+0xf8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d119      	bne.n	8002168 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002134:	4b36      	ldr	r3, [pc, #216]	; (8002210 <HAL_TIM_MspPostInit+0xfc>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	4a35      	ldr	r2, [pc, #212]	; (8002210 <HAL_TIM_MspPostInit+0xfc>)
 800213a:	f043 0304 	orr.w	r3, r3, #4
 800213e:	6193      	str	r3, [r2, #24]
 8002140:	4b33      	ldr	r3, [pc, #204]	; (8002210 <HAL_TIM_MspPostInit+0xfc>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800214c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002156:	2302      	movs	r3, #2
 8002158:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215a:	f107 0314 	add.w	r3, r7, #20
 800215e:	4619      	mov	r1, r3
 8002160:	482c      	ldr	r0, [pc, #176]	; (8002214 <HAL_TIM_MspPostInit+0x100>)
 8002162:	f001 fa79 	bl	8003658 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002166:	e04c      	b.n	8002202 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a2a      	ldr	r2, [pc, #168]	; (8002218 <HAL_TIM_MspPostInit+0x104>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d12a      	bne.n	80021c8 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002172:	4b27      	ldr	r3, [pc, #156]	; (8002210 <HAL_TIM_MspPostInit+0xfc>)
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	4a26      	ldr	r2, [pc, #152]	; (8002210 <HAL_TIM_MspPostInit+0xfc>)
 8002178:	f043 0310 	orr.w	r3, r3, #16
 800217c:	6193      	str	r3, [r2, #24]
 800217e:	4b24      	ldr	r3, [pc, #144]	; (8002210 <HAL_TIM_MspPostInit+0xfc>)
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2302      	movs	r3, #2
 8002194:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	4619      	mov	r1, r3
 800219c:	481f      	ldr	r0, [pc, #124]	; (800221c <HAL_TIM_MspPostInit+0x108>)
 800219e:	f001 fa5b 	bl	8003658 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80021a2:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <HAL_TIM_MspPostInit+0x10c>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
 80021c0:	4a17      	ldr	r2, [pc, #92]	; (8002220 <HAL_TIM_MspPostInit+0x10c>)
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	6053      	str	r3, [r2, #4]
}
 80021c6:	e01c      	b.n	8002202 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a15      	ldr	r2, [pc, #84]	; (8002224 <HAL_TIM_MspPostInit+0x110>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d117      	bne.n	8002202 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d2:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <HAL_TIM_MspPostInit+0xfc>)
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	4a0e      	ldr	r2, [pc, #56]	; (8002210 <HAL_TIM_MspPostInit+0xfc>)
 80021d8:	f043 0308 	orr.w	r3, r3, #8
 80021dc:	6193      	str	r3, [r2, #24]
 80021de:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <HAL_TIM_MspPostInit+0xfc>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021ea:	2340      	movs	r3, #64	; 0x40
 80021ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2302      	movs	r3, #2
 80021f4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	4619      	mov	r1, r3
 80021fc:	480a      	ldr	r0, [pc, #40]	; (8002228 <HAL_TIM_MspPostInit+0x114>)
 80021fe:	f001 fa2b 	bl	8003658 <HAL_GPIO_Init>
}
 8002202:	bf00      	nop
 8002204:	3728      	adds	r7, #40	; 0x28
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40012c00 	.word	0x40012c00
 8002210:	40021000 	.word	0x40021000
 8002214:	40010800 	.word	0x40010800
 8002218:	40000400 	.word	0x40000400
 800221c:	40011000 	.word	0x40011000
 8002220:	40010000 	.word	0x40010000
 8002224:	40000800 	.word	0x40000800
 8002228:	40010c00 	.word	0x40010c00

0800222c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0310 	add.w	r3, r7, #16
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a19      	ldr	r2, [pc, #100]	; (80022ac <HAL_UART_MspInit+0x80>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d12b      	bne.n	80022a4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800224c:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <HAL_UART_MspInit+0x84>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	4a17      	ldr	r2, [pc, #92]	; (80022b0 <HAL_UART_MspInit+0x84>)
 8002252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002256:	61d3      	str	r3, [r2, #28]
 8002258:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_UART_MspInit+0x84>)
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_UART_MspInit+0x84>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	4a11      	ldr	r2, [pc, #68]	; (80022b0 <HAL_UART_MspInit+0x84>)
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	6193      	str	r3, [r2, #24]
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <HAL_UART_MspInit+0x84>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800227c:	230c      	movs	r3, #12
 800227e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2302      	movs	r3, #2
 8002286:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002288:	f107 0310 	add.w	r3, r7, #16
 800228c:	4619      	mov	r1, r3
 800228e:	4809      	ldr	r0, [pc, #36]	; (80022b4 <HAL_UART_MspInit+0x88>)
 8002290:	f001 f9e2 	bl	8003658 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002294:	2200      	movs	r2, #0
 8002296:	2100      	movs	r1, #0
 8002298:	2026      	movs	r0, #38	; 0x26
 800229a:	f000 fef8 	bl	800308e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800229e:	2026      	movs	r0, #38	; 0x26
 80022a0:	f000 ff11 	bl	80030c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022a4:	bf00      	nop
 80022a6:	3720      	adds	r7, #32
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40004400 	.word	0x40004400
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40010800 	.word	0x40010800

080022b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <NMI_Handler+0x4>

080022be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c2:	e7fe      	b.n	80022c2 <HardFault_Handler+0x4>

080022c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <MemManage_Handler+0x4>

080022ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ce:	e7fe      	b.n	80022ce <BusFault_Handler+0x4>

080022d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d4:	e7fe      	b.n	80022d4 <UsageFault_Handler+0x4>

080022d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr

080022ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr

080022fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022fe:	f000 f9bb 	bl	8002678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <DMA1_Channel2_IRQHandler+0x10>)
 800230e:	f001 f863 	bl	80033d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200003dc 	.word	0x200003dc

0800231c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <ADC1_2_IRQHandler+0x10>)
 8002322:	f000 fb6f 	bl	8002a04 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000238 	.word	0x20000238

08002330 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002334:	4802      	ldr	r0, [pc, #8]	; (8002340 <TIM2_IRQHandler+0x10>)
 8002336:	f004 fb55 	bl	80069e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000304 	.word	0x20000304

08002344 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002348:	4802      	ldr	r0, [pc, #8]	; (8002354 <I2C1_EV_IRQHandler+0x10>)
 800234a:	f001 fcb3 	bl	8003cb4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000268 	.word	0x20000268

08002358 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <I2C1_ER_IRQHandler+0x10>)
 800235e:	f001 fe1a 	bl	8003f96 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000268 	.word	0x20000268

0800236c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002370:	4802      	ldr	r0, [pc, #8]	; (800237c <USART2_IRQHandler+0x10>)
 8002372:	f005 fb1b 	bl	80079ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000420 	.word	0x20000420

08002380 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002384:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002388:	f001 fb1a 	bl	80039c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}

08002390 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return 1;
 8002394:	2301      	movs	r3, #1
}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <_kill>:

int _kill(int pid, int sig)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023a8:	f006 f880 	bl	80084ac <__errno>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2216      	movs	r2, #22
 80023b0:	601a      	str	r2, [r3, #0]
  return -1;
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <_exit>:

void _exit (int status)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023c6:	f04f 31ff 	mov.w	r1, #4294967295
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ffe7 	bl	800239e <_kill>
  while (1) {}    /* Make sure we hang here */
 80023d0:	e7fe      	b.n	80023d0 <_exit+0x12>

080023d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b086      	sub	sp, #24
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	e00a      	b.n	80023fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023e4:	f3af 8000 	nop.w
 80023e8:	4601      	mov	r1, r0
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	60ba      	str	r2, [r7, #8]
 80023f0:	b2ca      	uxtb	r2, r1
 80023f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3301      	adds	r3, #1
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	429a      	cmp	r2, r3
 8002400:	dbf0      	blt.n	80023e4 <_read+0x12>
  }

  return len;
 8002402:	687b      	ldr	r3, [r7, #4]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	e009      	b.n	8002432 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	60ba      	str	r2, [r7, #8]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	3301      	adds	r3, #1
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	429a      	cmp	r2, r3
 8002438:	dbf1      	blt.n	800241e <_write+0x12>
  }
  return len;
 800243a:	687b      	ldr	r3, [r7, #4]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <_close>:

int _close(int file)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800244c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr

0800245a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800246a:	605a      	str	r2, [r3, #4]
  return 0;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <_isatty>:

int _isatty(int file)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002480:	2301      	movs	r3, #1
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024ac:	4a14      	ldr	r2, [pc, #80]	; (8002500 <_sbrk+0x5c>)
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <_sbrk+0x60>)
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024b8:	4b13      	ldr	r3, [pc, #76]	; (8002508 <_sbrk+0x64>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d102      	bne.n	80024c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <_sbrk+0x64>)
 80024c2:	4a12      	ldr	r2, [pc, #72]	; (800250c <_sbrk+0x68>)
 80024c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <_sbrk+0x64>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d207      	bcs.n	80024e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d4:	f005 ffea 	bl	80084ac <__errno>
 80024d8:	4603      	mov	r3, r0
 80024da:	220c      	movs	r2, #12
 80024dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024de:	f04f 33ff 	mov.w	r3, #4294967295
 80024e2:	e009      	b.n	80024f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <_sbrk+0x64>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ea:	4b07      	ldr	r3, [pc, #28]	; (8002508 <_sbrk+0x64>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	4a05      	ldr	r2, [pc, #20]	; (8002508 <_sbrk+0x64>)
 80024f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024f6:	68fb      	ldr	r3, [r7, #12]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20005000 	.word	0x20005000
 8002504:	00000400 	.word	0x00000400
 8002508:	20000898 	.word	0x20000898
 800250c:	200008c8 	.word	0x200008c8

08002510 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <timerRun>:
void setTimer3 (int duration) {
	timer3_counter = duration/Timer_Cycle;
	timer3_flag = 0;
}

void timerRun(){
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8002520:	4b19      	ldr	r3, [pc, #100]	; (8002588 <timerRun+0x6c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	dd0b      	ble.n	8002540 <timerRun+0x24>
		timer1_counter--;
 8002528:	4b17      	ldr	r3, [pc, #92]	; (8002588 <timerRun+0x6c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3b01      	subs	r3, #1
 800252e:	4a16      	ldr	r2, [pc, #88]	; (8002588 <timerRun+0x6c>)
 8002530:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <timerRun+0x6c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	dc02      	bgt.n	8002540 <timerRun+0x24>
			timer1_flag = 1;
 800253a:	4b14      	ldr	r3, [pc, #80]	; (800258c <timerRun+0x70>)
 800253c:	2201      	movs	r2, #1
 800253e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 8002540:	4b13      	ldr	r3, [pc, #76]	; (8002590 <timerRun+0x74>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	dd0b      	ble.n	8002560 <timerRun+0x44>
		timer2_counter--;
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <timerRun+0x74>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	3b01      	subs	r3, #1
 800254e:	4a10      	ldr	r2, [pc, #64]	; (8002590 <timerRun+0x74>)
 8002550:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 8002552:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <timerRun+0x74>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	dc02      	bgt.n	8002560 <timerRun+0x44>
			timer2_flag = 1;
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <timerRun+0x78>)
 800255c:	2201      	movs	r2, #1
 800255e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 8002560:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <timerRun+0x7c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	dd0b      	ble.n	8002580 <timerRun+0x64>
		timer3_counter--;
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <timerRun+0x7c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	3b01      	subs	r3, #1
 800256e:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <timerRun+0x7c>)
 8002570:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <timerRun+0x7c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	dc02      	bgt.n	8002580 <timerRun+0x64>
			timer3_flag = 1;
 800257a:	4b08      	ldr	r3, [pc, #32]	; (800259c <timerRun+0x80>)
 800257c:	2201      	movs	r2, #1
 800257e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	2000089c 	.word	0x2000089c
 800258c:	200008a8 	.word	0x200008a8
 8002590:	200008a0 	.word	0x200008a0
 8002594:	200008ac 	.word	0x200008ac
 8002598:	200008a4 	.word	0x200008a4
 800259c:	200008b0 	.word	0x200008b0

080025a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025a0:	f7ff ffb6 	bl	8002510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025a4:	480b      	ldr	r0, [pc, #44]	; (80025d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80025a6:	490c      	ldr	r1, [pc, #48]	; (80025d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80025a8:	4a0c      	ldr	r2, [pc, #48]	; (80025dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80025aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025ac:	e002      	b.n	80025b4 <LoopCopyDataInit>

080025ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025b2:	3304      	adds	r3, #4

080025b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b8:	d3f9      	bcc.n	80025ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ba:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80025bc:	4c09      	ldr	r4, [pc, #36]	; (80025e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c0:	e001      	b.n	80025c6 <LoopFillZerobss>

080025c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c4:	3204      	adds	r2, #4

080025c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c8:	d3fb      	bcc.n	80025c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025ca:	f005 ff75 	bl	80084b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025ce:	f7fe fc1d 	bl	8000e0c <main>
  bx lr
 80025d2:	4770      	bx	lr
  ldr r0, =_sdata
 80025d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80025dc:	0800b34c 	.word	0x0800b34c
  ldr r2, =_sbss
 80025e0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80025e4:	200008c8 	.word	0x200008c8

080025e8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025e8:	e7fe      	b.n	80025e8 <CAN1_RX1_IRQHandler>
	...

080025ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025f0:	4b08      	ldr	r3, [pc, #32]	; (8002614 <HAL_Init+0x28>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a07      	ldr	r2, [pc, #28]	; (8002614 <HAL_Init+0x28>)
 80025f6:	f043 0310 	orr.w	r3, r3, #16
 80025fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025fc:	2003      	movs	r0, #3
 80025fe:	f000 fd3b 	bl	8003078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002602:	2000      	movs	r0, #0
 8002604:	f000 f808 	bl	8002618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002608:	f7ff fc1a 	bl	8001e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40022000 	.word	0x40022000

08002618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002620:	4b12      	ldr	r3, [pc, #72]	; (800266c <HAL_InitTick+0x54>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <HAL_InitTick+0x58>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	4619      	mov	r1, r3
 800262a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800262e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002632:	fbb2 f3f3 	udiv	r3, r2, r3
 8002636:	4618      	mov	r0, r3
 8002638:	f000 fd53 	bl	80030e2 <HAL_SYSTICK_Config>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e00e      	b.n	8002664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b0f      	cmp	r3, #15
 800264a:	d80a      	bhi.n	8002662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800264c:	2200      	movs	r2, #0
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	f04f 30ff 	mov.w	r0, #4294967295
 8002654:	f000 fd1b 	bl	800308e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002658:	4a06      	ldr	r2, [pc, #24]	; (8002674 <HAL_InitTick+0x5c>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	e000      	b.n	8002664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000010 	.word	0x20000010
 8002670:	20000018 	.word	0x20000018
 8002674:	20000014 	.word	0x20000014

08002678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_IncTick+0x1c>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	461a      	mov	r2, r3
 8002682:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_IncTick+0x20>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4413      	add	r3, r2
 8002688:	4a03      	ldr	r2, [pc, #12]	; (8002698 <HAL_IncTick+0x20>)
 800268a:	6013      	str	r3, [r2, #0]
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	20000018 	.word	0x20000018
 8002698:	200008b4 	.word	0x200008b4

0800269c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return uwTick;
 80026a0:	4b02      	ldr	r3, [pc, #8]	; (80026ac <HAL_GetTick+0x10>)
 80026a2:	681b      	ldr	r3, [r3, #0]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr
 80026ac:	200008b4 	.word	0x200008b4

080026b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b8:	f7ff fff0 	bl	800269c <HAL_GetTick>
 80026bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c8:	d005      	beq.n	80026d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_Delay+0x44>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4413      	add	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026d6:	bf00      	nop
 80026d8:	f7ff ffe0 	bl	800269c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d8f7      	bhi.n	80026d8 <HAL_Delay+0x28>
  {
  }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000018 	.word	0x20000018

080026f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0be      	b.n	8002898 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002724:	2b00      	cmp	r3, #0
 8002726:	d109      	bne.n	800273c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff fbb4 	bl	8001ea4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 fb85 	bl	8002e4c <ADC_ConversionStop_Disable>
 8002742:	4603      	mov	r3, r0
 8002744:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	2b00      	cmp	r3, #0
 8002750:	f040 8099 	bne.w	8002886 <HAL_ADC_Init+0x18e>
 8002754:	7dfb      	ldrb	r3, [r7, #23]
 8002756:	2b00      	cmp	r3, #0
 8002758:	f040 8095 	bne.w	8002886 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002764:	f023 0302 	bic.w	r3, r3, #2
 8002768:	f043 0202 	orr.w	r2, r3, #2
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002778:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	7b1b      	ldrb	r3, [r3, #12]
 800277e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002780:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	4313      	orrs	r3, r2
 8002786:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002790:	d003      	beq.n	800279a <HAL_ADC_Init+0xa2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d102      	bne.n	80027a0 <HAL_ADC_Init+0xa8>
 800279a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800279e:	e000      	b.n	80027a2 <HAL_ADC_Init+0xaa>
 80027a0:	2300      	movs	r3, #0
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	7d1b      	ldrb	r3, [r3, #20]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d119      	bne.n	80027e4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	7b1b      	ldrb	r3, [r3, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d109      	bne.n	80027cc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	3b01      	subs	r3, #1
 80027be:	035a      	lsls	r2, r3, #13
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	e00b      	b.n	80027e4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	f043 0220 	orr.w	r2, r3, #32
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	f043 0201 	orr.w	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	4b28      	ldr	r3, [pc, #160]	; (80028a0 <HAL_ADC_Init+0x1a8>)
 8002800:	4013      	ands	r3, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	68b9      	ldr	r1, [r7, #8]
 8002808:	430b      	orrs	r3, r1
 800280a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002814:	d003      	beq.n	800281e <HAL_ADC_Init+0x126>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d104      	bne.n	8002828 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	3b01      	subs	r3, #1
 8002824:	051b      	lsls	r3, r3, #20
 8002826:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	430a      	orrs	r2, r1
 800283a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <HAL_ADC_Init+0x1ac>)
 8002844:	4013      	ands	r3, r2
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	429a      	cmp	r2, r3
 800284a:	d10b      	bne.n	8002864 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002856:	f023 0303 	bic.w	r3, r3, #3
 800285a:	f043 0201 	orr.w	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002862:	e018      	b.n	8002896 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	f023 0312 	bic.w	r3, r3, #18
 800286c:	f043 0210 	orr.w	r2, r3, #16
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	f043 0201 	orr.w	r2, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002884:	e007      	b.n	8002896 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	f043 0210 	orr.w	r2, r3, #16
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002896:	7dfb      	ldrb	r3, [r7, #23]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	ffe1f7fd 	.word	0xffe1f7fd
 80028a4:	ff1f0efe 	.word	0xff1f0efe

080028a8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <HAL_ADC_Start+0x1a>
 80028be:	2302      	movs	r3, #2
 80028c0:	e098      	b.n	80029f4 <HAL_ADC_Start+0x14c>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 fa64 	bl	8002d98 <ADC_Enable>
 80028d0:	4603      	mov	r3, r0
 80028d2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f040 8087 	bne.w	80029ea <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e4:	f023 0301 	bic.w	r3, r3, #1
 80028e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a41      	ldr	r2, [pc, #260]	; (80029fc <HAL_ADC_Start+0x154>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d105      	bne.n	8002906 <HAL_ADC_Start+0x5e>
 80028fa:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <HAL_ADC_Start+0x158>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d115      	bne.n	8002932 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291c:	2b00      	cmp	r3, #0
 800291e:	d026      	beq.n	800296e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002928:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002930:	e01d      	b.n	800296e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002936:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a2f      	ldr	r2, [pc, #188]	; (8002a00 <HAL_ADC_Start+0x158>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d004      	beq.n	8002952 <HAL_ADC_Start+0xaa>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a2b      	ldr	r2, [pc, #172]	; (80029fc <HAL_ADC_Start+0x154>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d10d      	bne.n	800296e <HAL_ADC_Start+0xc6>
 8002952:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <HAL_ADC_Start+0x158>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295a:	2b00      	cmp	r3, #0
 800295c:	d007      	beq.n	800296e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002966:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d006      	beq.n	8002988 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	f023 0206 	bic.w	r2, r3, #6
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	62da      	str	r2, [r3, #44]	; 0x2c
 8002986:	e002      	b.n	800298e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f06f 0202 	mvn.w	r2, #2
 800299e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80029aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80029ae:	d113      	bne.n	80029d8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029b4:	4a11      	ldr	r2, [pc, #68]	; (80029fc <HAL_ADC_Start+0x154>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d105      	bne.n	80029c6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80029ba:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <HAL_ADC_Start+0x158>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d108      	bne.n	80029d8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80029d4:	609a      	str	r2, [r3, #8]
 80029d6:	e00c      	b.n	80029f2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	e003      	b.n	80029f2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40012800 	.word	0x40012800
 8002a00:	40012400 	.word	0x40012400

08002a04 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d03e      	beq.n	8002aa4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d039      	beq.n	8002aa4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d105      	bne.n	8002a48 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002a52:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002a56:	d11d      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d119      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0220 	bic.w	r2, r2, #32
 8002a6e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d105      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8c:	f043 0201 	orr.w	r2, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f874 	bl	8002b82 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f06f 0212 	mvn.w	r2, #18
 8002aa2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d04d      	beq.n	8002b4a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d048      	beq.n	8002b4a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d105      	bne.n	8002ad0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002ada:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002ade:	d012      	beq.n	8002b06 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d125      	bne.n	8002b3a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002af8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002afc:	d11d      	bne.n	8002b3a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d119      	bne.n	8002b3a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b14:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d105      	bne.n	8002b3a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	f043 0201 	orr.w	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f9c7 	bl	8002ece <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 020c 	mvn.w	r2, #12
 8002b48:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d012      	beq.n	8002b7a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00d      	beq.n	8002b7a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f812 	bl	8002b94 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0201 	mvn.w	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x20>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e0dc      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x1da>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b06      	cmp	r3, #6
 8002bd6:	d81c      	bhi.n	8002c12 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	3b05      	subs	r3, #5
 8002bea:	221f      	movs	r2, #31
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	4019      	ands	r1, r3
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	3b05      	subs	r3, #5
 8002c04:	fa00 f203 	lsl.w	r2, r0, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	635a      	str	r2, [r3, #52]	; 0x34
 8002c10:	e03c      	b.n	8002c8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b0c      	cmp	r3, #12
 8002c18:	d81c      	bhi.n	8002c54 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	3b23      	subs	r3, #35	; 0x23
 8002c2c:	221f      	movs	r2, #31
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	4019      	ands	r1, r3
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	3b23      	subs	r3, #35	; 0x23
 8002c46:	fa00 f203 	lsl.w	r2, r0, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	631a      	str	r2, [r3, #48]	; 0x30
 8002c52:	e01b      	b.n	8002c8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	3b41      	subs	r3, #65	; 0x41
 8002c66:	221f      	movs	r2, #31
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	4019      	ands	r1, r3
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3b41      	subs	r3, #65	; 0x41
 8002c80:	fa00 f203 	lsl.w	r2, r0, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b09      	cmp	r3, #9
 8002c92:	d91c      	bls.n	8002cce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68d9      	ldr	r1, [r3, #12]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3b1e      	subs	r3, #30
 8002ca6:	2207      	movs	r2, #7
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	4019      	ands	r1, r3
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	6898      	ldr	r0, [r3, #8]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3b1e      	subs	r3, #30
 8002cc0:	fa00 f203 	lsl.w	r2, r0, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	60da      	str	r2, [r3, #12]
 8002ccc:	e019      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6919      	ldr	r1, [r3, #16]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4413      	add	r3, r2
 8002cde:	2207      	movs	r2, #7
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	4019      	ands	r1, r3
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6898      	ldr	r0, [r3, #8]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4413      	add	r3, r2
 8002cf6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b10      	cmp	r3, #16
 8002d08:	d003      	beq.n	8002d12 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d0e:	2b11      	cmp	r3, #17
 8002d10:	d132      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a1d      	ldr	r2, [pc, #116]	; (8002d8c <HAL_ADC_ConfigChannel+0x1e4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d125      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d126      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d38:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b10      	cmp	r3, #16
 8002d40:	d11a      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d42:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <HAL_ADC_ConfigChannel+0x1e8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a13      	ldr	r2, [pc, #76]	; (8002d94 <HAL_ADC_ConfigChannel+0x1ec>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	0c9a      	lsrs	r2, r3, #18
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d58:	e002      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f9      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x1b2>
 8002d66:	e007      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	f043 0220 	orr.w	r2, r3, #32
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	40012400 	.word	0x40012400
 8002d90:	20000010 	.word	0x20000010
 8002d94:	431bde83 	.word	0x431bde83

08002d98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d040      	beq.n	8002e38 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002dc6:	4b1f      	ldr	r3, [pc, #124]	; (8002e44 <ADC_Enable+0xac>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a1f      	ldr	r2, [pc, #124]	; (8002e48 <ADC_Enable+0xb0>)
 8002dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd0:	0c9b      	lsrs	r3, r3, #18
 8002dd2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002dd4:	e002      	b.n	8002ddc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f9      	bne.n	8002dd6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002de2:	f7ff fc5b 	bl	800269c <HAL_GetTick>
 8002de6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002de8:	e01f      	b.n	8002e2a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dea:	f7ff fc57 	bl	800269c <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d918      	bls.n	8002e2a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d011      	beq.n	8002e2a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	f043 0210 	orr.w	r2, r3, #16
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	f043 0201 	orr.w	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e007      	b.n	8002e3a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d1d8      	bne.n	8002dea <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000010 	.word	0x20000010
 8002e48:	431bde83 	.word	0x431bde83

08002e4c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d12e      	bne.n	8002ec4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0201 	bic.w	r2, r2, #1
 8002e74:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e76:	f7ff fc11 	bl	800269c <HAL_GetTick>
 8002e7a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e7c:	e01b      	b.n	8002eb6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e7e:	f7ff fc0d 	bl	800269c <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d914      	bls.n	8002eb6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d10d      	bne.n	8002eb6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	f043 0210 	orr.w	r2, r3, #16
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	f043 0201 	orr.w	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e007      	b.n	8002ec6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d0dc      	beq.n	8002e7e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002efc:	4013      	ands	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f12:	4a04      	ldr	r2, [pc, #16]	; (8002f24 <__NVIC_SetPriorityGrouping+0x44>)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	60d3      	str	r3, [r2, #12]
}
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <__NVIC_GetPriorityGrouping+0x18>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	0a1b      	lsrs	r3, r3, #8
 8002f32:	f003 0307 	and.w	r3, r3, #7
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	db0b      	blt.n	8002f6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	f003 021f 	and.w	r2, r3, #31
 8002f5c:	4906      	ldr	r1, [pc, #24]	; (8002f78 <__NVIC_EnableIRQ+0x34>)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	2001      	movs	r0, #1
 8002f66:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr
 8002f78:	e000e100 	.word	0xe000e100

08002f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	6039      	str	r1, [r7, #0]
 8002f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	db0a      	blt.n	8002fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	490c      	ldr	r1, [pc, #48]	; (8002fc8 <__NVIC_SetPriority+0x4c>)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	0112      	lsls	r2, r2, #4
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa4:	e00a      	b.n	8002fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	4908      	ldr	r1, [pc, #32]	; (8002fcc <__NVIC_SetPriority+0x50>)
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	3b04      	subs	r3, #4
 8002fb4:	0112      	lsls	r2, r2, #4
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	440b      	add	r3, r1
 8002fba:	761a      	strb	r2, [r3, #24]
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	e000e100 	.word	0xe000e100
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	; 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f1c3 0307 	rsb	r3, r3, #7
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	bf28      	it	cs
 8002fee:	2304      	movcs	r3, #4
 8002ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	2b06      	cmp	r3, #6
 8002ff8:	d902      	bls.n	8003000 <NVIC_EncodePriority+0x30>
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3b03      	subs	r3, #3
 8002ffe:	e000      	b.n	8003002 <NVIC_EncodePriority+0x32>
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003004:	f04f 32ff 	mov.w	r2, #4294967295
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43da      	mvns	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	401a      	ands	r2, r3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003018:	f04f 31ff 	mov.w	r1, #4294967295
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	43d9      	mvns	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003028:	4313      	orrs	r3, r2
         );
}
 800302a:	4618      	mov	r0, r3
 800302c:	3724      	adds	r7, #36	; 0x24
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3b01      	subs	r3, #1
 8003040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003044:	d301      	bcc.n	800304a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003046:	2301      	movs	r3, #1
 8003048:	e00f      	b.n	800306a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800304a:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <SysTick_Config+0x40>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3b01      	subs	r3, #1
 8003050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003052:	210f      	movs	r1, #15
 8003054:	f04f 30ff 	mov.w	r0, #4294967295
 8003058:	f7ff ff90 	bl	8002f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <SysTick_Config+0x40>)
 800305e:	2200      	movs	r2, #0
 8003060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003062:	4b04      	ldr	r3, [pc, #16]	; (8003074 <SysTick_Config+0x40>)
 8003064:	2207      	movs	r2, #7
 8003066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	e000e010 	.word	0xe000e010

08003078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff ff2d 	bl	8002ee0 <__NVIC_SetPriorityGrouping>
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800308e:	b580      	push	{r7, lr}
 8003090:	b086      	sub	sp, #24
 8003092:	af00      	add	r7, sp, #0
 8003094:	4603      	mov	r3, r0
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a0:	f7ff ff42 	bl	8002f28 <__NVIC_GetPriorityGrouping>
 80030a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	6978      	ldr	r0, [r7, #20]
 80030ac:	f7ff ff90 	bl	8002fd0 <NVIC_EncodePriority>
 80030b0:	4602      	mov	r2, r0
 80030b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b6:	4611      	mov	r1, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff5f 	bl	8002f7c <__NVIC_SetPriority>
}
 80030be:	bf00      	nop
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	4603      	mov	r3, r0
 80030ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff35 	bl	8002f44 <__NVIC_EnableIRQ>
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff ffa2 	bl	8003034 <SysTick_Config>
 80030f0:	4603      	mov	r3, r0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e043      	b.n	800319a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	4b22      	ldr	r3, [pc, #136]	; (80031a4 <HAL_DMA_Init+0xa8>)
 800311a:	4413      	add	r3, r2
 800311c:	4a22      	ldr	r2, [pc, #136]	; (80031a8 <HAL_DMA_Init+0xac>)
 800311e:	fba2 2303 	umull	r2, r3, r2, r3
 8003122:	091b      	lsrs	r3, r3, #4
 8003124:	009a      	lsls	r2, r3, #2
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a1f      	ldr	r2, [pc, #124]	; (80031ac <HAL_DMA_Init+0xb0>)
 800312e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003146:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800314a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003154:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003160:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800316c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr
 80031a4:	bffdfff8 	.word	0xbffdfff8
 80031a8:	cccccccd 	.word	0xcccccccd
 80031ac:	40020000 	.word	0x40020000

080031b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_DMA_Start_IT+0x20>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e04b      	b.n	8003268 <HAL_DMA_Start_IT+0xb8>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d13a      	bne.n	800325a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0201 	bic.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	68b9      	ldr	r1, [r7, #8]
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 f9f8 	bl	80035fe <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003212:	2b00      	cmp	r3, #0
 8003214:	d008      	beq.n	8003228 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 020e 	orr.w	r2, r2, #14
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	e00f      	b.n	8003248 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0204 	bic.w	r2, r2, #4
 8003236:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 020a 	orr.w	r2, r2, #10
 8003246:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	e005      	b.n	8003266 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003262:	2302      	movs	r3, #2
 8003264:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003266:	7dfb      	ldrb	r3, [r7, #23]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d008      	beq.n	800329a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2204      	movs	r2, #4
 800328c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e020      	b.n	80032dc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 020e 	bic.w	r2, r2, #14
 80032a8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0201 	bic.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c2:	2101      	movs	r1, #1
 80032c4:	fa01 f202 	lsl.w	r2, r1, r2
 80032c8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80032da:	7bfb      	ldrb	r3, [r7, #15]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr
	...

080032e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d005      	beq.n	800330c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2204      	movs	r2, #4
 8003304:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	73fb      	strb	r3, [r7, #15]
 800330a:	e051      	b.n	80033b0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 020e 	bic.w	r2, r2, #14
 800331a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0201 	bic.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a22      	ldr	r2, [pc, #136]	; (80033bc <HAL_DMA_Abort_IT+0xd4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d029      	beq.n	800338a <HAL_DMA_Abort_IT+0xa2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a21      	ldr	r2, [pc, #132]	; (80033c0 <HAL_DMA_Abort_IT+0xd8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d022      	beq.n	8003386 <HAL_DMA_Abort_IT+0x9e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a1f      	ldr	r2, [pc, #124]	; (80033c4 <HAL_DMA_Abort_IT+0xdc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d01a      	beq.n	8003380 <HAL_DMA_Abort_IT+0x98>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a1e      	ldr	r2, [pc, #120]	; (80033c8 <HAL_DMA_Abort_IT+0xe0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d012      	beq.n	800337a <HAL_DMA_Abort_IT+0x92>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <HAL_DMA_Abort_IT+0xe4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00a      	beq.n	8003374 <HAL_DMA_Abort_IT+0x8c>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1b      	ldr	r2, [pc, #108]	; (80033d0 <HAL_DMA_Abort_IT+0xe8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d102      	bne.n	800336e <HAL_DMA_Abort_IT+0x86>
 8003368:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800336c:	e00e      	b.n	800338c <HAL_DMA_Abort_IT+0xa4>
 800336e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003372:	e00b      	b.n	800338c <HAL_DMA_Abort_IT+0xa4>
 8003374:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003378:	e008      	b.n	800338c <HAL_DMA_Abort_IT+0xa4>
 800337a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800337e:	e005      	b.n	800338c <HAL_DMA_Abort_IT+0xa4>
 8003380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003384:	e002      	b.n	800338c <HAL_DMA_Abort_IT+0xa4>
 8003386:	2310      	movs	r3, #16
 8003388:	e000      	b.n	800338c <HAL_DMA_Abort_IT+0xa4>
 800338a:	2301      	movs	r3, #1
 800338c:	4a11      	ldr	r2, [pc, #68]	; (80033d4 <HAL_DMA_Abort_IT+0xec>)
 800338e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
    } 
  }
  return status;
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40020008 	.word	0x40020008
 80033c0:	4002001c 	.word	0x4002001c
 80033c4:	40020030 	.word	0x40020030
 80033c8:	40020044 	.word	0x40020044
 80033cc:	40020058 	.word	0x40020058
 80033d0:	4002006c 	.word	0x4002006c
 80033d4:	40020000 	.word	0x40020000

080033d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	2204      	movs	r2, #4
 80033f6:	409a      	lsls	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d04f      	beq.n	80034a0 <HAL_DMA_IRQHandler+0xc8>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	2b00      	cmp	r3, #0
 8003408:	d04a      	beq.n	80034a0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	2b00      	cmp	r3, #0
 8003416:	d107      	bne.n	8003428 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0204 	bic.w	r2, r2, #4
 8003426:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a66      	ldr	r2, [pc, #408]	; (80035c8 <HAL_DMA_IRQHandler+0x1f0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d029      	beq.n	8003486 <HAL_DMA_IRQHandler+0xae>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a65      	ldr	r2, [pc, #404]	; (80035cc <HAL_DMA_IRQHandler+0x1f4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d022      	beq.n	8003482 <HAL_DMA_IRQHandler+0xaa>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a63      	ldr	r2, [pc, #396]	; (80035d0 <HAL_DMA_IRQHandler+0x1f8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d01a      	beq.n	800347c <HAL_DMA_IRQHandler+0xa4>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a62      	ldr	r2, [pc, #392]	; (80035d4 <HAL_DMA_IRQHandler+0x1fc>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d012      	beq.n	8003476 <HAL_DMA_IRQHandler+0x9e>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a60      	ldr	r2, [pc, #384]	; (80035d8 <HAL_DMA_IRQHandler+0x200>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00a      	beq.n	8003470 <HAL_DMA_IRQHandler+0x98>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a5f      	ldr	r2, [pc, #380]	; (80035dc <HAL_DMA_IRQHandler+0x204>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d102      	bne.n	800346a <HAL_DMA_IRQHandler+0x92>
 8003464:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003468:	e00e      	b.n	8003488 <HAL_DMA_IRQHandler+0xb0>
 800346a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800346e:	e00b      	b.n	8003488 <HAL_DMA_IRQHandler+0xb0>
 8003470:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003474:	e008      	b.n	8003488 <HAL_DMA_IRQHandler+0xb0>
 8003476:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800347a:	e005      	b.n	8003488 <HAL_DMA_IRQHandler+0xb0>
 800347c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003480:	e002      	b.n	8003488 <HAL_DMA_IRQHandler+0xb0>
 8003482:	2340      	movs	r3, #64	; 0x40
 8003484:	e000      	b.n	8003488 <HAL_DMA_IRQHandler+0xb0>
 8003486:	2304      	movs	r3, #4
 8003488:	4a55      	ldr	r2, [pc, #340]	; (80035e0 <HAL_DMA_IRQHandler+0x208>)
 800348a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 8094 	beq.w	80035be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800349e:	e08e      	b.n	80035be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	2202      	movs	r2, #2
 80034a6:	409a      	lsls	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d056      	beq.n	800355e <HAL_DMA_IRQHandler+0x186>
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d051      	beq.n	800355e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10b      	bne.n	80034e0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 020a 	bic.w	r2, r2, #10
 80034d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a38      	ldr	r2, [pc, #224]	; (80035c8 <HAL_DMA_IRQHandler+0x1f0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d029      	beq.n	800353e <HAL_DMA_IRQHandler+0x166>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a37      	ldr	r2, [pc, #220]	; (80035cc <HAL_DMA_IRQHandler+0x1f4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d022      	beq.n	800353a <HAL_DMA_IRQHandler+0x162>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a35      	ldr	r2, [pc, #212]	; (80035d0 <HAL_DMA_IRQHandler+0x1f8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d01a      	beq.n	8003534 <HAL_DMA_IRQHandler+0x15c>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a34      	ldr	r2, [pc, #208]	; (80035d4 <HAL_DMA_IRQHandler+0x1fc>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d012      	beq.n	800352e <HAL_DMA_IRQHandler+0x156>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a32      	ldr	r2, [pc, #200]	; (80035d8 <HAL_DMA_IRQHandler+0x200>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00a      	beq.n	8003528 <HAL_DMA_IRQHandler+0x150>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a31      	ldr	r2, [pc, #196]	; (80035dc <HAL_DMA_IRQHandler+0x204>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d102      	bne.n	8003522 <HAL_DMA_IRQHandler+0x14a>
 800351c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003520:	e00e      	b.n	8003540 <HAL_DMA_IRQHandler+0x168>
 8003522:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003526:	e00b      	b.n	8003540 <HAL_DMA_IRQHandler+0x168>
 8003528:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800352c:	e008      	b.n	8003540 <HAL_DMA_IRQHandler+0x168>
 800352e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003532:	e005      	b.n	8003540 <HAL_DMA_IRQHandler+0x168>
 8003534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003538:	e002      	b.n	8003540 <HAL_DMA_IRQHandler+0x168>
 800353a:	2320      	movs	r3, #32
 800353c:	e000      	b.n	8003540 <HAL_DMA_IRQHandler+0x168>
 800353e:	2302      	movs	r3, #2
 8003540:	4a27      	ldr	r2, [pc, #156]	; (80035e0 <HAL_DMA_IRQHandler+0x208>)
 8003542:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	2b00      	cmp	r3, #0
 8003552:	d034      	beq.n	80035be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800355c:	e02f      	b.n	80035be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	2208      	movs	r2, #8
 8003564:	409a      	lsls	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d028      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x1e8>
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d023      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 020e 	bic.w	r2, r2, #14
 8003586:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003590:	2101      	movs	r1, #1
 8003592:	fa01 f202 	lsl.w	r2, r1, r2
 8003596:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d004      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	4798      	blx	r3
    }
  }
  return;
 80035be:	bf00      	nop
 80035c0:	bf00      	nop
}
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40020008 	.word	0x40020008
 80035cc:	4002001c 	.word	0x4002001c
 80035d0:	40020030 	.word	0x40020030
 80035d4:	40020044 	.word	0x40020044
 80035d8:	40020058 	.word	0x40020058
 80035dc:	4002006c 	.word	0x4002006c
 80035e0:	40020000 	.word	0x40020000

080035e4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035f2:	b2db      	uxtb	r3, r3
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr

080035fe <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035fe:	b480      	push	{r7}
 8003600:	b085      	sub	sp, #20
 8003602:	af00      	add	r7, sp, #0
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	607a      	str	r2, [r7, #4]
 800360a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003614:	2101      	movs	r1, #1
 8003616:	fa01 f202 	lsl.w	r2, r1, r2
 800361a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b10      	cmp	r3, #16
 800362a:	d108      	bne.n	800363e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800363c:	e007      	b.n	800364e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	60da      	str	r2, [r3, #12]
}
 800364e:	bf00      	nop
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr

08003658 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003658:	b480      	push	{r7}
 800365a:	b08b      	sub	sp, #44	; 0x2c
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003662:	2300      	movs	r3, #0
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003666:	2300      	movs	r3, #0
 8003668:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800366a:	e169      	b.n	8003940 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800366c:	2201      	movs	r2, #1
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	429a      	cmp	r2, r3
 8003686:	f040 8158 	bne.w	800393a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	4a9a      	ldr	r2, [pc, #616]	; (80038f8 <HAL_GPIO_Init+0x2a0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d05e      	beq.n	8003752 <HAL_GPIO_Init+0xfa>
 8003694:	4a98      	ldr	r2, [pc, #608]	; (80038f8 <HAL_GPIO_Init+0x2a0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d875      	bhi.n	8003786 <HAL_GPIO_Init+0x12e>
 800369a:	4a98      	ldr	r2, [pc, #608]	; (80038fc <HAL_GPIO_Init+0x2a4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d058      	beq.n	8003752 <HAL_GPIO_Init+0xfa>
 80036a0:	4a96      	ldr	r2, [pc, #600]	; (80038fc <HAL_GPIO_Init+0x2a4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d86f      	bhi.n	8003786 <HAL_GPIO_Init+0x12e>
 80036a6:	4a96      	ldr	r2, [pc, #600]	; (8003900 <HAL_GPIO_Init+0x2a8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d052      	beq.n	8003752 <HAL_GPIO_Init+0xfa>
 80036ac:	4a94      	ldr	r2, [pc, #592]	; (8003900 <HAL_GPIO_Init+0x2a8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d869      	bhi.n	8003786 <HAL_GPIO_Init+0x12e>
 80036b2:	4a94      	ldr	r2, [pc, #592]	; (8003904 <HAL_GPIO_Init+0x2ac>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d04c      	beq.n	8003752 <HAL_GPIO_Init+0xfa>
 80036b8:	4a92      	ldr	r2, [pc, #584]	; (8003904 <HAL_GPIO_Init+0x2ac>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d863      	bhi.n	8003786 <HAL_GPIO_Init+0x12e>
 80036be:	4a92      	ldr	r2, [pc, #584]	; (8003908 <HAL_GPIO_Init+0x2b0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d046      	beq.n	8003752 <HAL_GPIO_Init+0xfa>
 80036c4:	4a90      	ldr	r2, [pc, #576]	; (8003908 <HAL_GPIO_Init+0x2b0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d85d      	bhi.n	8003786 <HAL_GPIO_Init+0x12e>
 80036ca:	2b12      	cmp	r3, #18
 80036cc:	d82a      	bhi.n	8003724 <HAL_GPIO_Init+0xcc>
 80036ce:	2b12      	cmp	r3, #18
 80036d0:	d859      	bhi.n	8003786 <HAL_GPIO_Init+0x12e>
 80036d2:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <HAL_GPIO_Init+0x80>)
 80036d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d8:	08003753 	.word	0x08003753
 80036dc:	0800372d 	.word	0x0800372d
 80036e0:	0800373f 	.word	0x0800373f
 80036e4:	08003781 	.word	0x08003781
 80036e8:	08003787 	.word	0x08003787
 80036ec:	08003787 	.word	0x08003787
 80036f0:	08003787 	.word	0x08003787
 80036f4:	08003787 	.word	0x08003787
 80036f8:	08003787 	.word	0x08003787
 80036fc:	08003787 	.word	0x08003787
 8003700:	08003787 	.word	0x08003787
 8003704:	08003787 	.word	0x08003787
 8003708:	08003787 	.word	0x08003787
 800370c:	08003787 	.word	0x08003787
 8003710:	08003787 	.word	0x08003787
 8003714:	08003787 	.word	0x08003787
 8003718:	08003787 	.word	0x08003787
 800371c:	08003735 	.word	0x08003735
 8003720:	08003749 	.word	0x08003749
 8003724:	4a79      	ldr	r2, [pc, #484]	; (800390c <HAL_GPIO_Init+0x2b4>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d013      	beq.n	8003752 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800372a:	e02c      	b.n	8003786 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	623b      	str	r3, [r7, #32]
          break;
 8003732:	e029      	b.n	8003788 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	3304      	adds	r3, #4
 800373a:	623b      	str	r3, [r7, #32]
          break;
 800373c:	e024      	b.n	8003788 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	3308      	adds	r3, #8
 8003744:	623b      	str	r3, [r7, #32]
          break;
 8003746:	e01f      	b.n	8003788 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	330c      	adds	r3, #12
 800374e:	623b      	str	r3, [r7, #32]
          break;
 8003750:	e01a      	b.n	8003788 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d102      	bne.n	8003760 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800375a:	2304      	movs	r3, #4
 800375c:	623b      	str	r3, [r7, #32]
          break;
 800375e:	e013      	b.n	8003788 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d105      	bne.n	8003774 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003768:	2308      	movs	r3, #8
 800376a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	611a      	str	r2, [r3, #16]
          break;
 8003772:	e009      	b.n	8003788 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003774:	2308      	movs	r3, #8
 8003776:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	615a      	str	r2, [r3, #20]
          break;
 800377e:	e003      	b.n	8003788 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003780:	2300      	movs	r3, #0
 8003782:	623b      	str	r3, [r7, #32]
          break;
 8003784:	e000      	b.n	8003788 <HAL_GPIO_Init+0x130>
          break;
 8003786:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	2bff      	cmp	r3, #255	; 0xff
 800378c:	d801      	bhi.n	8003792 <HAL_GPIO_Init+0x13a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	e001      	b.n	8003796 <HAL_GPIO_Init+0x13e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3304      	adds	r3, #4
 8003796:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	2bff      	cmp	r3, #255	; 0xff
 800379c:	d802      	bhi.n	80037a4 <HAL_GPIO_Init+0x14c>
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	e002      	b.n	80037aa <HAL_GPIO_Init+0x152>
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	3b08      	subs	r3, #8
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	210f      	movs	r1, #15
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	fa01 f303 	lsl.w	r3, r1, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	401a      	ands	r2, r3
 80037bc:	6a39      	ldr	r1, [r7, #32]
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	fa01 f303 	lsl.w	r3, r1, r3
 80037c4:	431a      	orrs	r2, r3
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 80b1 	beq.w	800393a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80037d8:	4b4d      	ldr	r3, [pc, #308]	; (8003910 <HAL_GPIO_Init+0x2b8>)
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	4a4c      	ldr	r2, [pc, #304]	; (8003910 <HAL_GPIO_Init+0x2b8>)
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	6193      	str	r3, [r2, #24]
 80037e4:	4b4a      	ldr	r3, [pc, #296]	; (8003910 <HAL_GPIO_Init+0x2b8>)
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80037f0:	4a48      	ldr	r2, [pc, #288]	; (8003914 <HAL_GPIO_Init+0x2bc>)
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	089b      	lsrs	r3, r3, #2
 80037f6:	3302      	adds	r3, #2
 80037f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	220f      	movs	r2, #15
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	43db      	mvns	r3, r3
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4013      	ands	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a40      	ldr	r2, [pc, #256]	; (8003918 <HAL_GPIO_Init+0x2c0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d013      	beq.n	8003844 <HAL_GPIO_Init+0x1ec>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a3f      	ldr	r2, [pc, #252]	; (800391c <HAL_GPIO_Init+0x2c4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00d      	beq.n	8003840 <HAL_GPIO_Init+0x1e8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a3e      	ldr	r2, [pc, #248]	; (8003920 <HAL_GPIO_Init+0x2c8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d007      	beq.n	800383c <HAL_GPIO_Init+0x1e4>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a3d      	ldr	r2, [pc, #244]	; (8003924 <HAL_GPIO_Init+0x2cc>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d101      	bne.n	8003838 <HAL_GPIO_Init+0x1e0>
 8003834:	2303      	movs	r3, #3
 8003836:	e006      	b.n	8003846 <HAL_GPIO_Init+0x1ee>
 8003838:	2304      	movs	r3, #4
 800383a:	e004      	b.n	8003846 <HAL_GPIO_Init+0x1ee>
 800383c:	2302      	movs	r3, #2
 800383e:	e002      	b.n	8003846 <HAL_GPIO_Init+0x1ee>
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <HAL_GPIO_Init+0x1ee>
 8003844:	2300      	movs	r3, #0
 8003846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003848:	f002 0203 	and.w	r2, r2, #3
 800384c:	0092      	lsls	r2, r2, #2
 800384e:	4093      	lsls	r3, r2
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003856:	492f      	ldr	r1, [pc, #188]	; (8003914 <HAL_GPIO_Init+0x2bc>)
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	089b      	lsrs	r3, r3, #2
 800385c:	3302      	adds	r3, #2
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d006      	beq.n	800387e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003870:	4b2d      	ldr	r3, [pc, #180]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	492c      	ldr	r1, [pc, #176]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	4313      	orrs	r3, r2
 800387a:	608b      	str	r3, [r1, #8]
 800387c:	e006      	b.n	800388c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800387e:	4b2a      	ldr	r3, [pc, #168]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	43db      	mvns	r3, r3
 8003886:	4928      	ldr	r1, [pc, #160]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 8003888:	4013      	ands	r3, r2
 800388a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d006      	beq.n	80038a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003898:	4b23      	ldr	r3, [pc, #140]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	4922      	ldr	r1, [pc, #136]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60cb      	str	r3, [r1, #12]
 80038a4:	e006      	b.n	80038b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038a6:	4b20      	ldr	r3, [pc, #128]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	43db      	mvns	r3, r3
 80038ae:	491e      	ldr	r1, [pc, #120]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d006      	beq.n	80038ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80038c0:	4b19      	ldr	r3, [pc, #100]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	4918      	ldr	r1, [pc, #96]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	604b      	str	r3, [r1, #4]
 80038cc:	e006      	b.n	80038dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80038ce:	4b16      	ldr	r3, [pc, #88]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	43db      	mvns	r3, r3
 80038d6:	4914      	ldr	r1, [pc, #80]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 80038d8:	4013      	ands	r3, r2
 80038da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d021      	beq.n	800392c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80038e8:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	490e      	ldr	r1, [pc, #56]	; (8003928 <HAL_GPIO_Init+0x2d0>)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	600b      	str	r3, [r1, #0]
 80038f4:	e021      	b.n	800393a <HAL_GPIO_Init+0x2e2>
 80038f6:	bf00      	nop
 80038f8:	10320000 	.word	0x10320000
 80038fc:	10310000 	.word	0x10310000
 8003900:	10220000 	.word	0x10220000
 8003904:	10210000 	.word	0x10210000
 8003908:	10120000 	.word	0x10120000
 800390c:	10110000 	.word	0x10110000
 8003910:	40021000 	.word	0x40021000
 8003914:	40010000 	.word	0x40010000
 8003918:	40010800 	.word	0x40010800
 800391c:	40010c00 	.word	0x40010c00
 8003920:	40011000 	.word	0x40011000
 8003924:	40011400 	.word	0x40011400
 8003928:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_GPIO_Init+0x304>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	43db      	mvns	r3, r3
 8003934:	4909      	ldr	r1, [pc, #36]	; (800395c <HAL_GPIO_Init+0x304>)
 8003936:	4013      	ands	r3, r2
 8003938:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	3301      	adds	r3, #1
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	fa22 f303 	lsr.w	r3, r2, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	f47f ae8e 	bne.w	800366c <HAL_GPIO_Init+0x14>
  }
}
 8003950:	bf00      	nop
 8003952:	bf00      	nop
 8003954:	372c      	adds	r7, #44	; 0x2c
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	40010400 	.word	0x40010400

08003960 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	887b      	ldrh	r3, [r7, #2]
 8003972:	4013      	ands	r3, r2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003978:	2301      	movs	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
 800397c:	e001      	b.n	8003982 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800397e:	2300      	movs	r3, #0
 8003980:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003982:	7bfb      	ldrb	r3, [r7, #15]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr

0800398e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	460b      	mov	r3, r1
 8003998:	807b      	strh	r3, [r7, #2]
 800399a:	4613      	mov	r3, r2
 800399c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800399e:	787b      	ldrb	r3, [r7, #1]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039a4:	887a      	ldrh	r2, [r7, #2]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80039aa:	e003      	b.n	80039b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039ac:	887b      	ldrh	r3, [r7, #2]
 80039ae:	041a      	lsls	r2, r3, #16
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	611a      	str	r2, [r3, #16]
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr
	...

080039c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80039ca:	4b08      	ldr	r3, [pc, #32]	; (80039ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039cc:	695a      	ldr	r2, [r3, #20]
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d006      	beq.n	80039e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039d6:	4a05      	ldr	r2, [pc, #20]	; (80039ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039dc:	88fb      	ldrh	r3, [r7, #6]
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 f806 	bl	80039f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40010400 	.word	0x40010400

080039f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr

08003a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e12b      	b.n	8003c6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fe fa7e 	bl	8001f2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2224      	movs	r2, #36	; 0x24
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0201 	bic.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a68:	f002 f9d4 	bl	8005e14 <HAL_RCC_GetPCLK1Freq>
 8003a6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4a81      	ldr	r2, [pc, #516]	; (8003c78 <HAL_I2C_Init+0x274>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d807      	bhi.n	8003a88 <HAL_I2C_Init+0x84>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4a80      	ldr	r2, [pc, #512]	; (8003c7c <HAL_I2C_Init+0x278>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	bf94      	ite	ls
 8003a80:	2301      	movls	r3, #1
 8003a82:	2300      	movhi	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	e006      	b.n	8003a96 <HAL_I2C_Init+0x92>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4a7d      	ldr	r2, [pc, #500]	; (8003c80 <HAL_I2C_Init+0x27c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	bf94      	ite	ls
 8003a90:	2301      	movls	r3, #1
 8003a92:	2300      	movhi	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e0e7      	b.n	8003c6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4a78      	ldr	r2, [pc, #480]	; (8003c84 <HAL_I2C_Init+0x280>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	0c9b      	lsrs	r3, r3, #18
 8003aa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	4a6a      	ldr	r2, [pc, #424]	; (8003c78 <HAL_I2C_Init+0x274>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d802      	bhi.n	8003ad8 <HAL_I2C_Init+0xd4>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	e009      	b.n	8003aec <HAL_I2C_Init+0xe8>
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ade:	fb02 f303 	mul.w	r3, r2, r3
 8003ae2:	4a69      	ldr	r2, [pc, #420]	; (8003c88 <HAL_I2C_Init+0x284>)
 8003ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae8:	099b      	lsrs	r3, r3, #6
 8003aea:	3301      	adds	r3, #1
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6812      	ldr	r2, [r2, #0]
 8003af0:	430b      	orrs	r3, r1
 8003af2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003afe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	495c      	ldr	r1, [pc, #368]	; (8003c78 <HAL_I2C_Init+0x274>)
 8003b08:	428b      	cmp	r3, r1
 8003b0a:	d819      	bhi.n	8003b40 <HAL_I2C_Init+0x13c>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1e59      	subs	r1, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b1a:	1c59      	adds	r1, r3, #1
 8003b1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b20:	400b      	ands	r3, r1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_I2C_Init+0x138>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1e59      	subs	r1, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b34:	3301      	adds	r3, #1
 8003b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b3a:	e051      	b.n	8003be0 <HAL_I2C_Init+0x1dc>
 8003b3c:	2304      	movs	r3, #4
 8003b3e:	e04f      	b.n	8003be0 <HAL_I2C_Init+0x1dc>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d111      	bne.n	8003b6c <HAL_I2C_Init+0x168>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1e58      	subs	r0, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6859      	ldr	r1, [r3, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	440b      	add	r3, r1
 8003b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bf0c      	ite	eq
 8003b64:	2301      	moveq	r3, #1
 8003b66:	2300      	movne	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	e012      	b.n	8003b92 <HAL_I2C_Init+0x18e>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	1e58      	subs	r0, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6859      	ldr	r1, [r3, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	0099      	lsls	r1, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b82:	3301      	adds	r3, #1
 8003b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bf0c      	ite	eq
 8003b8c:	2301      	moveq	r3, #1
 8003b8e:	2300      	movne	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_I2C_Init+0x196>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e022      	b.n	8003be0 <HAL_I2C_Init+0x1dc>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10e      	bne.n	8003bc0 <HAL_I2C_Init+0x1bc>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1e58      	subs	r0, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6859      	ldr	r1, [r3, #4]
 8003baa:	460b      	mov	r3, r1
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	440b      	add	r3, r1
 8003bb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bbe:	e00f      	b.n	8003be0 <HAL_I2C_Init+0x1dc>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	1e58      	subs	r0, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6859      	ldr	r1, [r3, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	0099      	lsls	r1, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	6809      	ldr	r1, [r1, #0]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69da      	ldr	r2, [r3, #28]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6911      	ldr	r1, [r2, #16]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	68d2      	ldr	r2, [r2, #12]
 8003c1a:	4311      	orrs	r1, r2
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6812      	ldr	r2, [r2, #0]
 8003c20:	430b      	orrs	r3, r1
 8003c22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0201 	orr.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	000186a0 	.word	0x000186a0
 8003c7c:	001e847f 	.word	0x001e847f
 8003c80:	003d08ff 	.word	0x003d08ff
 8003c84:	431bde83 	.word	0x431bde83
 8003c88:	10624dd3 	.word	0x10624dd3

08003c8c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9e:	2b80      	cmp	r3, #128	; 0x80
 8003ca0:	d103      	bne.n	8003caa <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	611a      	str	r2, [r3, #16]
  }
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ccc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cd4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cdc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
 8003ce0:	2b10      	cmp	r3, #16
 8003ce2:	d003      	beq.n	8003cec <HAL_I2C_EV_IRQHandler+0x38>
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	2b40      	cmp	r3, #64	; 0x40
 8003ce8:	f040 80c1 	bne.w	8003e6e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10d      	bne.n	8003d22 <HAL_I2C_EV_IRQHandler+0x6e>
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003d0c:	d003      	beq.n	8003d16 <HAL_I2C_EV_IRQHandler+0x62>
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003d14:	d101      	bne.n	8003d1a <HAL_I2C_EV_IRQHandler+0x66>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <HAL_I2C_EV_IRQHandler+0x68>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	f000 8132 	beq.w	8003f86 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00c      	beq.n	8003d46 <HAL_I2C_EV_IRQHandler+0x92>
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	0a5b      	lsrs	r3, r3, #9
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d006      	beq.n	8003d46 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f001 fc87 	bl	800564c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fd85 	bl	800484e <I2C_Master_SB>
 8003d44:	e092      	b.n	8003e6c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	08db      	lsrs	r3, r3, #3
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d009      	beq.n	8003d66 <HAL_I2C_EV_IRQHandler+0xb2>
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	0a5b      	lsrs	r3, r3, #9
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fdfa 	bl	8004958 <I2C_Master_ADD10>
 8003d64:	e082      	b.n	8003e6c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	085b      	lsrs	r3, r3, #1
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d009      	beq.n	8003d86 <HAL_I2C_EV_IRQHandler+0xd2>
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	0a5b      	lsrs	r3, r3, #9
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fe13 	bl	80049aa <I2C_Master_ADDR>
 8003d84:	e072      	b.n	8003e6c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	089b      	lsrs	r3, r3, #2
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d03b      	beq.n	8003e0a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003da0:	f000 80f3 	beq.w	8003f8a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	09db      	lsrs	r3, r3, #7
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00f      	beq.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x11c>
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	0a9b      	lsrs	r3, r3, #10
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d009      	beq.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x11c>
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	089b      	lsrs	r3, r3, #2
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d103      	bne.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f9f1 	bl	80041b0 <I2C_MasterTransmit_TXE>
 8003dce:	e04d      	b.n	8003e6c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	089b      	lsrs	r3, r3, #2
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80d6 	beq.w	8003f8a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	0a5b      	lsrs	r3, r3, #9
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80cf 	beq.w	8003f8a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003dec:	7bbb      	ldrb	r3, [r7, #14]
 8003dee:	2b21      	cmp	r3, #33	; 0x21
 8003df0:	d103      	bne.n	8003dfa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fa78 	bl	80042e8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003df8:	e0c7      	b.n	8003f8a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	2b40      	cmp	r3, #64	; 0x40
 8003dfe:	f040 80c4 	bne.w	8003f8a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fae6 	bl	80043d4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e08:	e0bf      	b.n	8003f8a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e18:	f000 80b7 	beq.w	8003f8a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	099b      	lsrs	r3, r3, #6
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00f      	beq.n	8003e48 <HAL_I2C_EV_IRQHandler+0x194>
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	0a9b      	lsrs	r3, r3, #10
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d009      	beq.n	8003e48 <HAL_I2C_EV_IRQHandler+0x194>
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	089b      	lsrs	r3, r3, #2
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d103      	bne.n	8003e48 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fb5f 	bl	8004504 <I2C_MasterReceive_RXNE>
 8003e46:	e011      	b.n	8003e6c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	089b      	lsrs	r3, r3, #2
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 809a 	beq.w	8003f8a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	0a5b      	lsrs	r3, r3, #9
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 8093 	beq.w	8003f8a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fc08 	bl	800467a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e6a:	e08e      	b.n	8003f8a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e6c:	e08d      	b.n	8003f8a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d004      	beq.n	8003e80 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	61fb      	str	r3, [r7, #28]
 8003e7e:	e007      	b.n	8003e90 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	085b      	lsrs	r3, r3, #1
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d012      	beq.n	8003ec2 <HAL_I2C_EV_IRQHandler+0x20e>
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	0a5b      	lsrs	r3, r3, #9
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00c      	beq.n	8003ec2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003eb8:	69b9      	ldr	r1, [r7, #24]
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 ffcc 	bl	8004e58 <I2C_Slave_ADDR>
 8003ec0:	e066      	b.n	8003f90 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d009      	beq.n	8003ee2 <HAL_I2C_EV_IRQHandler+0x22e>
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	0a5b      	lsrs	r3, r3, #9
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f001 f806 	bl	8004eec <I2C_Slave_STOPF>
 8003ee0:	e056      	b.n	8003f90 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ee2:	7bbb      	ldrb	r3, [r7, #14]
 8003ee4:	2b21      	cmp	r3, #33	; 0x21
 8003ee6:	d002      	beq.n	8003eee <HAL_I2C_EV_IRQHandler+0x23a>
 8003ee8:	7bbb      	ldrb	r3, [r7, #14]
 8003eea:	2b29      	cmp	r3, #41	; 0x29
 8003eec:	d125      	bne.n	8003f3a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	09db      	lsrs	r3, r3, #7
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00f      	beq.n	8003f1a <HAL_I2C_EV_IRQHandler+0x266>
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	0a9b      	lsrs	r3, r3, #10
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <HAL_I2C_EV_IRQHandler+0x266>
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	089b      	lsrs	r3, r3, #2
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d103      	bne.n	8003f1a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fee4 	bl	8004ce0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f18:	e039      	b.n	8003f8e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	089b      	lsrs	r3, r3, #2
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d033      	beq.n	8003f8e <HAL_I2C_EV_IRQHandler+0x2da>
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	0a5b      	lsrs	r3, r3, #9
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d02d      	beq.n	8003f8e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 ff11 	bl	8004d5a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f38:	e029      	b.n	8003f8e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	099b      	lsrs	r3, r3, #6
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00f      	beq.n	8003f66 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	0a9b      	lsrs	r3, r3, #10
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d009      	beq.n	8003f66 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	089b      	lsrs	r3, r3, #2
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d103      	bne.n	8003f66 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 ff1b 	bl	8004d9a <I2C_SlaveReceive_RXNE>
 8003f64:	e014      	b.n	8003f90 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	089b      	lsrs	r3, r3, #2
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00e      	beq.n	8003f90 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	0a5b      	lsrs	r3, r3, #9
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d008      	beq.n	8003f90 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 ff49 	bl	8004e16 <I2C_SlaveReceive_BTF>
 8003f84:	e004      	b.n	8003f90 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003f86:	bf00      	nop
 8003f88:	e002      	b.n	8003f90 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f8a:	bf00      	nop
 8003f8c:	e000      	b.n	8003f90 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f8e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003f90:	3720      	adds	r7, #32
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b08a      	sub	sp, #40	; 0x28
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fb8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	0a1b      	lsrs	r3, r3, #8
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d016      	beq.n	8003ff4 <HAL_I2C_ER_IRQHandler+0x5e>
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	0a1b      	lsrs	r3, r3, #8
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d010      	beq.n	8003ff4 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003fe2:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ff2:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	0a5b      	lsrs	r3, r3, #9
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00e      	beq.n	800401e <HAL_I2C_ER_IRQHandler+0x88>
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	0a1b      	lsrs	r3, r3, #8
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	f043 0302 	orr.w	r3, r3, #2
 8004012:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800401c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	0a9b      	lsrs	r3, r3, #10
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d03f      	beq.n	80040aa <HAL_I2C_ER_IRQHandler+0x114>
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	0a1b      	lsrs	r3, r3, #8
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d039      	beq.n	80040aa <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004036:	7efb      	ldrb	r3, [r7, #27]
 8004038:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403e:	b29b      	uxth	r3, r3
 8004040:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004048:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004050:	7ebb      	ldrb	r3, [r7, #26]
 8004052:	2b20      	cmp	r3, #32
 8004054:	d112      	bne.n	800407c <HAL_I2C_ER_IRQHandler+0xe6>
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10f      	bne.n	800407c <HAL_I2C_ER_IRQHandler+0xe6>
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	2b21      	cmp	r3, #33	; 0x21
 8004060:	d008      	beq.n	8004074 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004062:	7cfb      	ldrb	r3, [r7, #19]
 8004064:	2b29      	cmp	r3, #41	; 0x29
 8004066:	d005      	beq.n	8004074 <HAL_I2C_ER_IRQHandler+0xde>
 8004068:	7cfb      	ldrb	r3, [r7, #19]
 800406a:	2b28      	cmp	r3, #40	; 0x28
 800406c:	d106      	bne.n	800407c <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2b21      	cmp	r3, #33	; 0x21
 8004072:	d103      	bne.n	800407c <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f001 f869 	bl	800514c <I2C_Slave_AF>
 800407a:	e016      	b.n	80040aa <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004084:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	f043 0304 	orr.w	r3, r3, #4
 800408c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800408e:	7efb      	ldrb	r3, [r7, #27]
 8004090:	2b10      	cmp	r3, #16
 8004092:	d002      	beq.n	800409a <HAL_I2C_ER_IRQHandler+0x104>
 8004094:	7efb      	ldrb	r3, [r7, #27]
 8004096:	2b40      	cmp	r3, #64	; 0x40
 8004098:	d107      	bne.n	80040aa <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	0adb      	lsrs	r3, r3, #11
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00e      	beq.n	80040d4 <HAL_I2C_ER_IRQHandler+0x13e>
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	0a1b      	lsrs	r3, r3, #8
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d008      	beq.n	80040d4 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	f043 0308 	orr.w	r3, r3, #8
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80040d2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f001 f8a4 	bl	8005234 <I2C_ITError>
  }
}
 80040ec:	bf00      	nop
 80040ee:	3728      	adds	r7, #40	; 0x28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr

08004106 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr

0800412a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr

0800413c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	70fb      	strb	r3, [r7, #3]
 8004148:	4613      	mov	r3, r2
 800414a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr

08004156 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr

08004168 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	bc80      	pop	{r7}
 8004178:	4770      	bx	lr

0800417a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr

0800418c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	bc80      	pop	{r7}
 800419c:	4770      	bx	lr

0800419e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041be:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041c6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d150      	bne.n	8004278 <I2C_MasterTransmit_TXE+0xc8>
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	2b21      	cmp	r3, #33	; 0x21
 80041da:	d14d      	bne.n	8004278 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b08      	cmp	r3, #8
 80041e0:	d01d      	beq.n	800421e <I2C_MasterTransmit_TXE+0x6e>
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d01a      	beq.n	800421e <I2C_MasterTransmit_TXE+0x6e>
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041ee:	d016      	beq.n	800421e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041fe:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2211      	movs	r2, #17
 8004204:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7ff ff6c 	bl	80040f4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800421c:	e060      	b.n	80042e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800422c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800423c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b40      	cmp	r3, #64	; 0x40
 8004256:	d107      	bne.n	8004268 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff ff81 	bl	8004168 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004266:	e03b      	b.n	80042e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ff3f 	bl	80040f4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004276:	e033      	b.n	80042e0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	2b21      	cmp	r3, #33	; 0x21
 800427c:	d005      	beq.n	800428a <I2C_MasterTransmit_TXE+0xda>
 800427e:	7bbb      	ldrb	r3, [r7, #14]
 8004280:	2b40      	cmp	r3, #64	; 0x40
 8004282:	d12d      	bne.n	80042e0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	2b22      	cmp	r3, #34	; 0x22
 8004288:	d12a      	bne.n	80042e0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d108      	bne.n	80042a6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80042a4:	e01c      	b.n	80042e0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b40      	cmp	r3, #64	; 0x40
 80042b0:	d103      	bne.n	80042ba <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f88e 	bl	80043d4 <I2C_MemoryTransmit_TXE_BTF>
}
 80042b8:	e012      	b.n	80042e0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	781a      	ldrb	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29a      	uxth	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042de:	e7ff      	b.n	80042e0 <I2C_MasterTransmit_TXE+0x130>
 80042e0:	bf00      	nop
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b21      	cmp	r3, #33	; 0x21
 8004300:	d164      	bne.n	80043cc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d012      	beq.n	8004332 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	781a      	ldrb	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004330:	e04c      	b.n	80043cc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d01d      	beq.n	8004374 <I2C_MasterTransmit_BTF+0x8c>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b20      	cmp	r3, #32
 800433c:	d01a      	beq.n	8004374 <I2C_MasterTransmit_BTF+0x8c>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004344:	d016      	beq.n	8004374 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004354:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2211      	movs	r2, #17
 800435a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff fec1 	bl	80040f4 <HAL_I2C_MasterTxCpltCallback>
}
 8004372:	e02b      	b.n	80043cc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004382:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004392:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b40      	cmp	r3, #64	; 0x40
 80043ac:	d107      	bne.n	80043be <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff fed6 	bl	8004168 <HAL_I2C_MemTxCpltCallback>
}
 80043bc:	e006      	b.n	80043cc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff fe94 	bl	80040f4 <HAL_I2C_MasterTxCpltCallback>
}
 80043cc:	bf00      	nop
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d11d      	bne.n	8004428 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d10b      	bne.n	800440c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004404:	1c9a      	adds	r2, r3, #2
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800440a:	e077      	b.n	80044fc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004410:	b29b      	uxth	r3, r3
 8004412:	121b      	asrs	r3, r3, #8
 8004414:	b2da      	uxtb	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004426:	e069      	b.n	80044fc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800442c:	2b01      	cmp	r3, #1
 800442e:	d10b      	bne.n	8004448 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004434:	b2da      	uxtb	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004446:	e059      	b.n	80044fc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444c:	2b02      	cmp	r3, #2
 800444e:	d152      	bne.n	80044f6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	2b22      	cmp	r3, #34	; 0x22
 8004454:	d10d      	bne.n	8004472 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004464:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004470:	e044      	b.n	80044fc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004476:	b29b      	uxth	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d015      	beq.n	80044a8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	2b21      	cmp	r3, #33	; 0x21
 8004480:	d112      	bne.n	80044a8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	781a      	ldrb	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80044a6:	e029      	b.n	80044fc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d124      	bne.n	80044fc <I2C_MemoryTransmit_TXE_BTF+0x128>
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	2b21      	cmp	r3, #33	; 0x21
 80044b6:	d121      	bne.n	80044fc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044c6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff fe3a 	bl	8004168 <HAL_I2C_MemTxCpltCallback>
}
 80044f4:	e002      	b.n	80044fc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7ff fbc8 	bl	8003c8c <I2C_Flush_DR>
}
 80044fc:	bf00      	nop
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b22      	cmp	r3, #34	; 0x22
 8004516:	f040 80ac 	bne.w	8004672 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451e:	b29b      	uxth	r3, r3
 8004520:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2b03      	cmp	r3, #3
 8004526:	d921      	bls.n	800456c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004552:	b29b      	uxth	r3, r3
 8004554:	2b03      	cmp	r3, #3
 8004556:	f040 808c 	bne.w	8004672 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004568:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800456a:	e082      	b.n	8004672 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	2b02      	cmp	r3, #2
 8004572:	d075      	beq.n	8004660 <I2C_MasterReceive_RXNE+0x15c>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d002      	beq.n	8004580 <I2C_MasterReceive_RXNE+0x7c>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d16f      	bne.n	8004660 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f001 f831 	bl	80055e8 <I2C_WaitOnSTOPRequestThroughIT>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d142      	bne.n	8004612 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800459a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045aa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b40      	cmp	r3, #64	; 0x40
 80045e4:	d10a      	bne.n	80045fc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7ff fdc0 	bl	800417a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80045fa:	e03a      	b.n	8004672 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2212      	movs	r2, #18
 8004608:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff fd7b 	bl	8004106 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004610:	e02f      	b.n	8004672 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004620:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff fd97 	bl	800418c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800465e:	e008      	b.n	8004672 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800466e:	605a      	str	r2, [r3, #4]
}
 8004670:	e7ff      	b.n	8004672 <I2C_MasterReceive_RXNE+0x16e>
 8004672:	bf00      	nop
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b084      	sub	sp, #16
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b04      	cmp	r3, #4
 8004690:	d11b      	bne.n	80046ca <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046a0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80046c8:	e0bd      	b.n	8004846 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d129      	bne.n	8004728 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d00a      	beq.n	8004700 <I2C_MasterReceive_BTF+0x86>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d007      	beq.n	8004700 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691a      	ldr	r2, [r3, #16]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004726:	e08e      	b.n	8004846 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d176      	bne.n	8004820 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d002      	beq.n	800473e <I2C_MasterReceive_BTF+0xc4>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b10      	cmp	r3, #16
 800473c:	d108      	bne.n	8004750 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	e019      	b.n	8004784 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b04      	cmp	r3, #4
 8004754:	d002      	beq.n	800475c <I2C_MasterReceive_BTF+0xe2>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2b02      	cmp	r3, #2
 800475a:	d108      	bne.n	800476e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	e00a      	b.n	8004784 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b10      	cmp	r3, #16
 8004772:	d007      	beq.n	8004784 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004782:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	b2d2      	uxtb	r2, r2
 80047b6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	1c5a      	adds	r2, r3, #1
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80047de:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b40      	cmp	r3, #64	; 0x40
 80047f2:	d10a      	bne.n	800480a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7ff fcb9 	bl	800417a <HAL_I2C_MemRxCpltCallback>
}
 8004808:	e01d      	b.n	8004846 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2212      	movs	r2, #18
 8004816:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff fc74 	bl	8004106 <HAL_I2C_MasterRxCpltCallback>
}
 800481e:	e012      	b.n	8004846 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004846:	bf00      	nop
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b40      	cmp	r3, #64	; 0x40
 8004860:	d117      	bne.n	8004892 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	b2db      	uxtb	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800487a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800487c:	e067      	b.n	800494e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004882:	b2db      	uxtb	r3, r3
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	b2da      	uxtb	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	611a      	str	r2, [r3, #16]
}
 8004890:	e05d      	b.n	800494e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800489a:	d133      	bne.n	8004904 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b21      	cmp	r3, #33	; 0x21
 80048a6:	d109      	bne.n	80048bc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	461a      	mov	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048b8:	611a      	str	r2, [r3, #16]
 80048ba:	e008      	b.n	80048ce <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	f043 0301 	orr.w	r3, r3, #1
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d004      	beq.n	80048e0 <I2C_Master_SB+0x92>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d108      	bne.n	80048f2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d032      	beq.n	800494e <I2C_Master_SB+0x100>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d02d      	beq.n	800494e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004900:	605a      	str	r2, [r3, #4]
}
 8004902:	e024      	b.n	800494e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10e      	bne.n	800492a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004910:	b29b      	uxth	r3, r3
 8004912:	11db      	asrs	r3, r3, #7
 8004914:	b2db      	uxtb	r3, r3
 8004916:	f003 0306 	and.w	r3, r3, #6
 800491a:	b2db      	uxtb	r3, r3
 800491c:	f063 030f 	orn	r3, r3, #15
 8004920:	b2da      	uxtb	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	611a      	str	r2, [r3, #16]
}
 8004928:	e011      	b.n	800494e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800492e:	2b01      	cmp	r3, #1
 8004930:	d10d      	bne.n	800494e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004936:	b29b      	uxth	r3, r3
 8004938:	11db      	asrs	r3, r3, #7
 800493a:	b2db      	uxtb	r3, r3
 800493c:	f003 0306 	and.w	r3, r3, #6
 8004940:	b2db      	uxtb	r3, r3
 8004942:	f063 030e 	orn	r3, r3, #14
 8004946:	b2da      	uxtb	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	611a      	str	r2, [r3, #16]
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr

08004958 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004964:	b2da      	uxtb	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004970:	2b00      	cmp	r3, #0
 8004972:	d004      	beq.n	800497e <I2C_Master_ADD10+0x26>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	2b00      	cmp	r3, #0
 800497c:	d108      	bne.n	8004990 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00c      	beq.n	80049a0 <I2C_Master_ADD10+0x48>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498c:	2b00      	cmp	r3, #0
 800498e:	d007      	beq.n	80049a0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800499e:	605a      	str	r2, [r3, #4]
  }
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc80      	pop	{r7}
 80049a8:	4770      	bx	lr

080049aa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b091      	sub	sp, #68	; 0x44
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b22      	cmp	r3, #34	; 0x22
 80049d2:	f040 8174 	bne.w	8004cbe <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10f      	bne.n	80049fe <I2C_Master_ADDR+0x54>
 80049de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80049e2:	2b40      	cmp	r3, #64	; 0x40
 80049e4:	d10b      	bne.n	80049fe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049e6:	2300      	movs	r3, #0
 80049e8:	633b      	str	r3, [r7, #48]	; 0x30
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	633b      	str	r3, [r7, #48]	; 0x30
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	633b      	str	r3, [r7, #48]	; 0x30
 80049fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fc:	e16b      	b.n	8004cd6 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d11d      	bne.n	8004a42 <I2C_Master_ADDR+0x98>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a0e:	d118      	bne.n	8004a42 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a10:	2300      	movs	r3, #0
 8004a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a34:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	651a      	str	r2, [r3, #80]	; 0x50
 8004a40:	e149      	b.n	8004cd6 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d113      	bne.n	8004a74 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a60:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	e120      	b.n	8004cb6 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	f040 808a 	bne.w	8004b94 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a86:	d137      	bne.n	8004af8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a96:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aa6:	d113      	bne.n	8004ad0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ab8:	2300      	movs	r3, #0
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	627b      	str	r3, [r7, #36]	; 0x24
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	e0f2      	b.n	8004cb6 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	623b      	str	r3, [r7, #32]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	623b      	str	r3, [r7, #32]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	623b      	str	r3, [r7, #32]
 8004ae4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	e0de      	b.n	8004cb6 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d02e      	beq.n	8004b5c <I2C_Master_ADDR+0x1b2>
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b00:	2b20      	cmp	r3, #32
 8004b02:	d02b      	beq.n	8004b5c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b06:	2b12      	cmp	r3, #18
 8004b08:	d102      	bne.n	8004b10 <I2C_Master_ADDR+0x166>
 8004b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d125      	bne.n	8004b5c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d00e      	beq.n	8004b34 <I2C_Master_ADDR+0x18a>
 8004b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d00b      	beq.n	8004b34 <I2C_Master_ADDR+0x18a>
 8004b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1e:	2b10      	cmp	r3, #16
 8004b20:	d008      	beq.n	8004b34 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e007      	b.n	8004b44 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b42:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b44:	2300      	movs	r3, #0
 8004b46:	61fb      	str	r3, [r7, #28]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	61fb      	str	r3, [r7, #28]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	e0ac      	b.n	8004cb6 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b6a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61bb      	str	r3, [r7, #24]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	61bb      	str	r3, [r7, #24]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	61bb      	str	r3, [r7, #24]
 8004b80:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	e090      	b.n	8004cb6 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d158      	bne.n	8004c50 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d021      	beq.n	8004be8 <I2C_Master_ADDR+0x23e>
 8004ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d01e      	beq.n	8004be8 <I2C_Master_ADDR+0x23e>
 8004baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d01b      	beq.n	8004be8 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bbe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	e012      	b.n	8004c0e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bf6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	613b      	str	r3, [r7, #16]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c1c:	d14b      	bne.n	8004cb6 <I2C_Master_ADDR+0x30c>
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c24:	d00b      	beq.n	8004c3e <I2C_Master_ADDR+0x294>
 8004c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d008      	beq.n	8004c3e <I2C_Master_ADDR+0x294>
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d005      	beq.n	8004c3e <I2C_Master_ADDR+0x294>
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	2b10      	cmp	r3, #16
 8004c36:	d002      	beq.n	8004c3e <I2C_Master_ADDR+0x294>
 8004c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	d13b      	bne.n	8004cb6 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c4c:	605a      	str	r2, [r3, #4]
 8004c4e:	e032      	b.n	8004cb6 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c5e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c6e:	d117      	bne.n	8004ca0 <I2C_Master_ADDR+0x2f6>
 8004c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c76:	d00b      	beq.n	8004c90 <I2C_Master_ADDR+0x2e6>
 8004c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d008      	beq.n	8004c90 <I2C_Master_ADDR+0x2e6>
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d005      	beq.n	8004c90 <I2C_Master_ADDR+0x2e6>
 8004c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c86:	2b10      	cmp	r3, #16
 8004c88:	d002      	beq.n	8004c90 <I2C_Master_ADDR+0x2e6>
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d107      	bne.n	8004ca0 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c9e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004cbc:	e00b      	b.n	8004cd6 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60bb      	str	r3, [r7, #8]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	60bb      	str	r3, [r7, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
}
 8004cd4:	e7ff      	b.n	8004cd6 <I2C_Master_ADDR+0x32c>
 8004cd6:	bf00      	nop
 8004cd8:	3744      	adds	r7, #68	; 0x44
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr

08004ce0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d02b      	beq.n	8004d52 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	781a      	ldrb	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d114      	bne.n	8004d52 <I2C_SlaveTransmit_TXE+0x72>
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	2b29      	cmp	r3, #41	; 0x29
 8004d2c:	d111      	bne.n	8004d52 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2221      	movs	r2, #33	; 0x21
 8004d42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2228      	movs	r2, #40	; 0x28
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff f9e3 	bl	8004118 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004d52:	bf00      	nop
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d011      	beq.n	8004d90 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	781a      	ldrb	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr

08004d9a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d02c      	beq.n	8004e0e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d114      	bne.n	8004e0e <I2C_SlaveReceive_RXNE+0x74>
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	2b2a      	cmp	r3, #42	; 0x2a
 8004de8:	d111      	bne.n	8004e0e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2222      	movs	r2, #34	; 0x22
 8004dfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2228      	movs	r2, #40	; 0x28
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7ff f98e 	bl	800412a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004e0e:	bf00      	nop
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d012      	beq.n	8004e4e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr

08004e58 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004e62:	2300      	movs	r3, #0
 8004e64:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e72:	2b28      	cmp	r3, #40	; 0x28
 8004e74:	d127      	bne.n	8004ec6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e84:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	089b      	lsrs	r3, r3, #2
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004e92:	2301      	movs	r3, #1
 8004e94:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	09db      	lsrs	r3, r3, #7
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d103      	bne.n	8004eaa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	81bb      	strh	r3, [r7, #12]
 8004ea8:	e002      	b.n	8004eb0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004eb8:	89ba      	ldrh	r2, [r7, #12]
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7ff f93c 	bl	800413c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004ec4:	e00e      	b.n	8004ee4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60bb      	str	r3, [r7, #8]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	60bb      	str	r3, [r7, #8]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	60bb      	str	r3, [r7, #8]
 8004eda:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004ee4:	bf00      	nop
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004efa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f0a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60bb      	str	r3, [r7, #8]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	60bb      	str	r3, [r7, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0201 	orr.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f38:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f48:	d172      	bne.n	8005030 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
 8004f4c:	2b22      	cmp	r3, #34	; 0x22
 8004f4e:	d002      	beq.n	8004f56 <I2C_Slave_STOPF+0x6a>
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	2b2a      	cmp	r3, #42	; 0x2a
 8004f54:	d135      	bne.n	8004fc2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d005      	beq.n	8004f7a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	f043 0204 	orr.w	r2, r3, #4
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f88:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fe fb28 	bl	80035e4 <HAL_DMA_GetState>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d049      	beq.n	800502e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	4a69      	ldr	r2, [pc, #420]	; (8005144 <I2C_Slave_STOPF+0x258>)
 8004fa0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fe f99e 	bl	80032e8 <HAL_DMA_Abort_IT>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d03d      	beq.n	800502e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fc0:	e035      	b.n	800502e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d005      	beq.n	8004fe6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	f043 0204 	orr.w	r2, r3, #4
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ff4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fe faf2 	bl	80035e4 <HAL_DMA_GetState>
 8005000:	4603      	mov	r3, r0
 8005002:	2b01      	cmp	r3, #1
 8005004:	d014      	beq.n	8005030 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500a:	4a4e      	ldr	r2, [pc, #312]	; (8005144 <I2C_Slave_STOPF+0x258>)
 800500c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005012:	4618      	mov	r0, r3
 8005014:	f7fe f968 	bl	80032e8 <HAL_DMA_Abort_IT>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d008      	beq.n	8005030 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005028:	4610      	mov	r0, r2
 800502a:	4798      	blx	r3
 800502c:	e000      	b.n	8005030 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800502e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005034:	b29b      	uxth	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d03e      	beq.n	80050b8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b04      	cmp	r3, #4
 8005046:	d112      	bne.n	800506e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691a      	ldr	r2, [r3, #16]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	b2d2      	uxtb	r2, r2
 8005054:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005064:	b29b      	uxth	r3, r3
 8005066:	3b01      	subs	r3, #1
 8005068:	b29a      	uxth	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005078:	2b40      	cmp	r3, #64	; 0x40
 800507a:	d112      	bne.n	80050a2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	691a      	ldr	r2, [r3, #16]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b0:	f043 0204 	orr.w	r2, r3, #4
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f8b7 	bl	8005234 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80050c6:	e039      	b.n	800513c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
 80050ca:	2b2a      	cmp	r3, #42	; 0x2a
 80050cc:	d109      	bne.n	80050e2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2228      	movs	r2, #40	; 0x28
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7ff f824 	bl	800412a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b28      	cmp	r3, #40	; 0x28
 80050ec:	d111      	bne.n	8005112 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a15      	ldr	r2, [pc, #84]	; (8005148 <I2C_Slave_STOPF+0x25c>)
 80050f2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7ff f823 	bl	8004156 <HAL_I2C_ListenCpltCallback>
}
 8005110:	e014      	b.n	800513c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005116:	2b22      	cmp	r3, #34	; 0x22
 8005118:	d002      	beq.n	8005120 <I2C_Slave_STOPF+0x234>
 800511a:	7bfb      	ldrb	r3, [r7, #15]
 800511c:	2b22      	cmp	r3, #34	; 0x22
 800511e:	d10d      	bne.n	800513c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2220      	movs	r2, #32
 800512a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fe fff7 	bl	800412a <HAL_I2C_SlaveRxCpltCallback>
}
 800513c:	bf00      	nop
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	08005499 	.word	0x08005499
 8005148:	ffff0000 	.word	0xffff0000

0800514c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800515a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2b08      	cmp	r3, #8
 8005166:	d002      	beq.n	800516e <I2C_Slave_AF+0x22>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b20      	cmp	r3, #32
 800516c:	d129      	bne.n	80051c2 <I2C_Slave_AF+0x76>
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	2b28      	cmp	r3, #40	; 0x28
 8005172:	d126      	bne.n	80051c2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a2e      	ldr	r2, [pc, #184]	; (8005230 <I2C_Slave_AF+0xe4>)
 8005178:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005188:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005192:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fe ffcb 	bl	8004156 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80051c0:	e031      	b.n	8005226 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
 80051c4:	2b21      	cmp	r3, #33	; 0x21
 80051c6:	d129      	bne.n	800521c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a19      	ldr	r2, [pc, #100]	; (8005230 <I2C_Slave_AF+0xe4>)
 80051cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2221      	movs	r2, #33	; 0x21
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051f2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051fc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800520c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7fe fd3c 	bl	8003c8c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7fe ff7f 	bl	8004118 <HAL_I2C_SlaveTxCpltCallback>
}
 800521a:	e004      	b.n	8005226 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005224:	615a      	str	r2, [r3, #20]
}
 8005226:	bf00      	nop
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	ffff0000 	.word	0xffff0000

08005234 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005242:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800524a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800524c:	7bbb      	ldrb	r3, [r7, #14]
 800524e:	2b10      	cmp	r3, #16
 8005250:	d002      	beq.n	8005258 <I2C_ITError+0x24>
 8005252:	7bbb      	ldrb	r3, [r7, #14]
 8005254:	2b40      	cmp	r3, #64	; 0x40
 8005256:	d10a      	bne.n	800526e <I2C_ITError+0x3a>
 8005258:	7bfb      	ldrb	r3, [r7, #15]
 800525a:	2b22      	cmp	r3, #34	; 0x22
 800525c:	d107      	bne.n	800526e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800526c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005274:	2b28      	cmp	r3, #40	; 0x28
 8005276:	d107      	bne.n	8005288 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2228      	movs	r2, #40	; 0x28
 8005282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005286:	e015      	b.n	80052b4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005296:	d00a      	beq.n	80052ae <I2C_ITError+0x7a>
 8005298:	7bfb      	ldrb	r3, [r7, #15]
 800529a:	2b60      	cmp	r3, #96	; 0x60
 800529c:	d007      	beq.n	80052ae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052c2:	d162      	bne.n	800538a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052d2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d020      	beq.n	8005324 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e6:	4a6a      	ldr	r2, [pc, #424]	; (8005490 <I2C_ITError+0x25c>)
 80052e8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fd fffa 	bl	80032e8 <HAL_DMA_Abort_IT>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f000 8089 	beq.w	800540e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 0201 	bic.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800531e:	4610      	mov	r0, r2
 8005320:	4798      	blx	r3
 8005322:	e074      	b.n	800540e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	4a59      	ldr	r2, [pc, #356]	; (8005490 <I2C_ITError+0x25c>)
 800532a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005330:	4618      	mov	r0, r3
 8005332:	f7fd ffd9 	bl	80032e8 <HAL_DMA_Abort_IT>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d068      	beq.n	800540e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005346:	2b40      	cmp	r3, #64	; 0x40
 8005348:	d10b      	bne.n	8005362 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	691a      	ldr	r2, [r3, #16]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0201 	bic.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2220      	movs	r2, #32
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005384:	4610      	mov	r0, r2
 8005386:	4798      	blx	r3
 8005388:	e041      	b.n	800540e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b60      	cmp	r3, #96	; 0x60
 8005394:	d125      	bne.n	80053e2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2220      	movs	r2, #32
 800539a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ae:	2b40      	cmp	r3, #64	; 0x40
 80053b0:	d10b      	bne.n	80053ca <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0201 	bic.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fe fedf 	bl	800419e <HAL_I2C_AbortCpltCallback>
 80053e0:	e015      	b.n	800540e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ec:	2b40      	cmp	r3, #64	; 0x40
 80053ee:	d10b      	bne.n	8005408 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691a      	ldr	r2, [r3, #16]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7fe febf 	bl	800418c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10e      	bne.n	800543c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005424:	2b00      	cmp	r3, #0
 8005426:	d109      	bne.n	800543c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800542e:	2b00      	cmp	r3, #0
 8005430:	d104      	bne.n	800543c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005438:	2b00      	cmp	r3, #0
 800543a:	d007      	beq.n	800544c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800544a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005452:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b04      	cmp	r3, #4
 800545e:	d113      	bne.n	8005488 <I2C_ITError+0x254>
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	2b28      	cmp	r3, #40	; 0x28
 8005464:	d110      	bne.n	8005488 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a0a      	ldr	r2, [pc, #40]	; (8005494 <I2C_ITError+0x260>)
 800546a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2220      	movs	r2, #32
 8005476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fe fe67 	bl	8004156 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005488:	bf00      	nop
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	08005499 	.word	0x08005499
 8005494:	ffff0000 	.word	0xffff0000

08005498 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80054b2:	4b4b      	ldr	r3, [pc, #300]	; (80055e0 <I2C_DMAAbort+0x148>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	08db      	lsrs	r3, r3, #3
 80054b8:	4a4a      	ldr	r2, [pc, #296]	; (80055e4 <I2C_DMAAbort+0x14c>)
 80054ba:	fba2 2303 	umull	r2, r3, r2, r3
 80054be:	0a1a      	lsrs	r2, r3, #8
 80054c0:	4613      	mov	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	00da      	lsls	r2, r3, #3
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d106      	bne.n	80054e0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	f043 0220 	orr.w	r2, r3, #32
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80054de:	e00a      	b.n	80054f6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f4:	d0ea      	beq.n	80054cc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005502:	2200      	movs	r2, #0
 8005504:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	2200      	movs	r2, #0
 8005514:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005524:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2200      	movs	r2, #0
 800552a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005538:	2200      	movs	r2, #0
 800553a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	2200      	movs	r2, #0
 800554a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0201 	bic.w	r2, r2, #1
 800555a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b60      	cmp	r3, #96	; 0x60
 8005566:	d10e      	bne.n	8005586 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	2200      	movs	r2, #0
 800557c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800557e:	6978      	ldr	r0, [r7, #20]
 8005580:	f7fe fe0d 	bl	800419e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005584:	e027      	b.n	80055d6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005586:	7cfb      	ldrb	r3, [r7, #19]
 8005588:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800558c:	2b28      	cmp	r3, #40	; 0x28
 800558e:	d117      	bne.n	80055c0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0201 	orr.w	r2, r2, #1
 800559e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2200      	movs	r2, #0
 80055b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2228      	movs	r2, #40	; 0x28
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80055be:	e007      	b.n	80055d0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80055d0:	6978      	ldr	r0, [r7, #20]
 80055d2:	f7fe fddb 	bl	800418c <HAL_I2C_ErrorCallback>
}
 80055d6:	bf00      	nop
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000010 	.word	0x20000010
 80055e4:	14f8b589 	.word	0x14f8b589

080055e8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80055f4:	4b13      	ldr	r3, [pc, #76]	; (8005644 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	08db      	lsrs	r3, r3, #3
 80055fa:	4a13      	ldr	r2, [pc, #76]	; (8005648 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80055fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005600:	0a1a      	lsrs	r2, r3, #8
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	3b01      	subs	r3, #1
 800560e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d107      	bne.n	8005626 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	f043 0220 	orr.w	r2, r3, #32
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e008      	b.n	8005638 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005634:	d0e9      	beq.n	800560a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	bc80      	pop	{r7}
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	20000010 	.word	0x20000010
 8005648:	14f8b589 	.word	0x14f8b589

0800564c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800565c:	d103      	bne.n	8005666 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005664:	e007      	b.n	8005676 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800566e:	d102      	bne.n	8005676 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2208      	movs	r2, #8
 8005674:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	bc80      	pop	{r7}
 800567e:	4770      	bx	lr

08005680 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e272      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 8087 	beq.w	80057ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056a0:	4b92      	ldr	r3, [pc, #584]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f003 030c 	and.w	r3, r3, #12
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d00c      	beq.n	80056c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80056ac:	4b8f      	ldr	r3, [pc, #572]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f003 030c 	and.w	r3, r3, #12
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d112      	bne.n	80056de <HAL_RCC_OscConfig+0x5e>
 80056b8:	4b8c      	ldr	r3, [pc, #560]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c4:	d10b      	bne.n	80056de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c6:	4b89      	ldr	r3, [pc, #548]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d06c      	beq.n	80057ac <HAL_RCC_OscConfig+0x12c>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d168      	bne.n	80057ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e24c      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e6:	d106      	bne.n	80056f6 <HAL_RCC_OscConfig+0x76>
 80056e8:	4b80      	ldr	r3, [pc, #512]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a7f      	ldr	r2, [pc, #508]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 80056ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	e02e      	b.n	8005754 <HAL_RCC_OscConfig+0xd4>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10c      	bne.n	8005718 <HAL_RCC_OscConfig+0x98>
 80056fe:	4b7b      	ldr	r3, [pc, #492]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a7a      	ldr	r2, [pc, #488]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	4b78      	ldr	r3, [pc, #480]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a77      	ldr	r2, [pc, #476]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005710:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	e01d      	b.n	8005754 <HAL_RCC_OscConfig+0xd4>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005720:	d10c      	bne.n	800573c <HAL_RCC_OscConfig+0xbc>
 8005722:	4b72      	ldr	r3, [pc, #456]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a71      	ldr	r2, [pc, #452]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	4b6f      	ldr	r3, [pc, #444]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a6e      	ldr	r2, [pc, #440]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	e00b      	b.n	8005754 <HAL_RCC_OscConfig+0xd4>
 800573c:	4b6b      	ldr	r3, [pc, #428]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a6a      	ldr	r2, [pc, #424]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	4b68      	ldr	r3, [pc, #416]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a67      	ldr	r2, [pc, #412]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 800574e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005752:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d013      	beq.n	8005784 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575c:	f7fc ff9e 	bl	800269c <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005764:	f7fc ff9a 	bl	800269c <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b64      	cmp	r3, #100	; 0x64
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e200      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005776:	4b5d      	ldr	r3, [pc, #372]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0f0      	beq.n	8005764 <HAL_RCC_OscConfig+0xe4>
 8005782:	e014      	b.n	80057ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005784:	f7fc ff8a 	bl	800269c <HAL_GetTick>
 8005788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800578c:	f7fc ff86 	bl	800269c <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b64      	cmp	r3, #100	; 0x64
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e1ec      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800579e:	4b53      	ldr	r3, [pc, #332]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1f0      	bne.n	800578c <HAL_RCC_OscConfig+0x10c>
 80057aa:	e000      	b.n	80057ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d063      	beq.n	8005882 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057ba:	4b4c      	ldr	r3, [pc, #304]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f003 030c 	and.w	r3, r3, #12
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00b      	beq.n	80057de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80057c6:	4b49      	ldr	r3, [pc, #292]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f003 030c 	and.w	r3, r3, #12
 80057ce:	2b08      	cmp	r3, #8
 80057d0:	d11c      	bne.n	800580c <HAL_RCC_OscConfig+0x18c>
 80057d2:	4b46      	ldr	r3, [pc, #280]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d116      	bne.n	800580c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057de:	4b43      	ldr	r3, [pc, #268]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d005      	beq.n	80057f6 <HAL_RCC_OscConfig+0x176>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d001      	beq.n	80057f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e1c0      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057f6:	4b3d      	ldr	r3, [pc, #244]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	4939      	ldr	r1, [pc, #228]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005806:	4313      	orrs	r3, r2
 8005808:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800580a:	e03a      	b.n	8005882 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d020      	beq.n	8005856 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005814:	4b36      	ldr	r3, [pc, #216]	; (80058f0 <HAL_RCC_OscConfig+0x270>)
 8005816:	2201      	movs	r2, #1
 8005818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581a:	f7fc ff3f 	bl	800269c <HAL_GetTick>
 800581e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005820:	e008      	b.n	8005834 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005822:	f7fc ff3b 	bl	800269c <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e1a1      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005834:	4b2d      	ldr	r3, [pc, #180]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0f0      	beq.n	8005822 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005840:	4b2a      	ldr	r3, [pc, #168]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	4927      	ldr	r1, [pc, #156]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005850:	4313      	orrs	r3, r2
 8005852:	600b      	str	r3, [r1, #0]
 8005854:	e015      	b.n	8005882 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005856:	4b26      	ldr	r3, [pc, #152]	; (80058f0 <HAL_RCC_OscConfig+0x270>)
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800585c:	f7fc ff1e 	bl	800269c <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005864:	f7fc ff1a 	bl	800269c <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e180      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005876:	4b1d      	ldr	r3, [pc, #116]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1f0      	bne.n	8005864 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0308 	and.w	r3, r3, #8
 800588a:	2b00      	cmp	r3, #0
 800588c:	d03a      	beq.n	8005904 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d019      	beq.n	80058ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005896:	4b17      	ldr	r3, [pc, #92]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 8005898:	2201      	movs	r2, #1
 800589a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800589c:	f7fc fefe 	bl	800269c <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058a4:	f7fc fefa 	bl	800269c <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e160      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058b6:	4b0d      	ldr	r3, [pc, #52]	; (80058ec <HAL_RCC_OscConfig+0x26c>)
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0f0      	beq.n	80058a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80058c2:	2001      	movs	r0, #1
 80058c4:	f000 face 	bl	8005e64 <RCC_Delay>
 80058c8:	e01c      	b.n	8005904 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058ca:	4b0a      	ldr	r3, [pc, #40]	; (80058f4 <HAL_RCC_OscConfig+0x274>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058d0:	f7fc fee4 	bl	800269c <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058d6:	e00f      	b.n	80058f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058d8:	f7fc fee0 	bl	800269c <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d908      	bls.n	80058f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e146      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
 80058ea:	bf00      	nop
 80058ec:	40021000 	.word	0x40021000
 80058f0:	42420000 	.word	0x42420000
 80058f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058f8:	4b92      	ldr	r3, [pc, #584]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e9      	bne.n	80058d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 80a6 	beq.w	8005a5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005912:	2300      	movs	r3, #0
 8005914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005916:	4b8b      	ldr	r3, [pc, #556]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10d      	bne.n	800593e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005922:	4b88      	ldr	r3, [pc, #544]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	4a87      	ldr	r2, [pc, #540]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800592c:	61d3      	str	r3, [r2, #28]
 800592e:	4b85      	ldr	r3, [pc, #532]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005936:	60bb      	str	r3, [r7, #8]
 8005938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800593a:	2301      	movs	r3, #1
 800593c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800593e:	4b82      	ldr	r3, [pc, #520]	; (8005b48 <HAL_RCC_OscConfig+0x4c8>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005946:	2b00      	cmp	r3, #0
 8005948:	d118      	bne.n	800597c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800594a:	4b7f      	ldr	r3, [pc, #508]	; (8005b48 <HAL_RCC_OscConfig+0x4c8>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a7e      	ldr	r2, [pc, #504]	; (8005b48 <HAL_RCC_OscConfig+0x4c8>)
 8005950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005956:	f7fc fea1 	bl	800269c <HAL_GetTick>
 800595a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800595c:	e008      	b.n	8005970 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800595e:	f7fc fe9d 	bl	800269c <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b64      	cmp	r3, #100	; 0x64
 800596a:	d901      	bls.n	8005970 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e103      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005970:	4b75      	ldr	r3, [pc, #468]	; (8005b48 <HAL_RCC_OscConfig+0x4c8>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005978:	2b00      	cmp	r3, #0
 800597a:	d0f0      	beq.n	800595e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d106      	bne.n	8005992 <HAL_RCC_OscConfig+0x312>
 8005984:	4b6f      	ldr	r3, [pc, #444]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	4a6e      	ldr	r2, [pc, #440]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 800598a:	f043 0301 	orr.w	r3, r3, #1
 800598e:	6213      	str	r3, [r2, #32]
 8005990:	e02d      	b.n	80059ee <HAL_RCC_OscConfig+0x36e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10c      	bne.n	80059b4 <HAL_RCC_OscConfig+0x334>
 800599a:	4b6a      	ldr	r3, [pc, #424]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	4a69      	ldr	r2, [pc, #420]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80059a0:	f023 0301 	bic.w	r3, r3, #1
 80059a4:	6213      	str	r3, [r2, #32]
 80059a6:	4b67      	ldr	r3, [pc, #412]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	4a66      	ldr	r2, [pc, #408]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80059ac:	f023 0304 	bic.w	r3, r3, #4
 80059b0:	6213      	str	r3, [r2, #32]
 80059b2:	e01c      	b.n	80059ee <HAL_RCC_OscConfig+0x36e>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	2b05      	cmp	r3, #5
 80059ba:	d10c      	bne.n	80059d6 <HAL_RCC_OscConfig+0x356>
 80059bc:	4b61      	ldr	r3, [pc, #388]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	4a60      	ldr	r2, [pc, #384]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80059c2:	f043 0304 	orr.w	r3, r3, #4
 80059c6:	6213      	str	r3, [r2, #32]
 80059c8:	4b5e      	ldr	r3, [pc, #376]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	4a5d      	ldr	r2, [pc, #372]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80059ce:	f043 0301 	orr.w	r3, r3, #1
 80059d2:	6213      	str	r3, [r2, #32]
 80059d4:	e00b      	b.n	80059ee <HAL_RCC_OscConfig+0x36e>
 80059d6:	4b5b      	ldr	r3, [pc, #364]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	4a5a      	ldr	r2, [pc, #360]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80059dc:	f023 0301 	bic.w	r3, r3, #1
 80059e0:	6213      	str	r3, [r2, #32]
 80059e2:	4b58      	ldr	r3, [pc, #352]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	4a57      	ldr	r2, [pc, #348]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 80059e8:	f023 0304 	bic.w	r3, r3, #4
 80059ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d015      	beq.n	8005a22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059f6:	f7fc fe51 	bl	800269c <HAL_GetTick>
 80059fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059fc:	e00a      	b.n	8005a14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059fe:	f7fc fe4d 	bl	800269c <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e0b1      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a14:	4b4b      	ldr	r3, [pc, #300]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0ee      	beq.n	80059fe <HAL_RCC_OscConfig+0x37e>
 8005a20:	e014      	b.n	8005a4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a22:	f7fc fe3b 	bl	800269c <HAL_GetTick>
 8005a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a28:	e00a      	b.n	8005a40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a2a:	f7fc fe37 	bl	800269c <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e09b      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a40:	4b40      	ldr	r3, [pc, #256]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1ee      	bne.n	8005a2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d105      	bne.n	8005a5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a52:	4b3c      	ldr	r3, [pc, #240]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	4a3b      	ldr	r2, [pc, #236]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 8087 	beq.w	8005b76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a68:	4b36      	ldr	r3, [pc, #216]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f003 030c 	and.w	r3, r3, #12
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d061      	beq.n	8005b38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d146      	bne.n	8005b0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a7c:	4b33      	ldr	r3, [pc, #204]	; (8005b4c <HAL_RCC_OscConfig+0x4cc>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a82:	f7fc fe0b 	bl	800269c <HAL_GetTick>
 8005a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a88:	e008      	b.n	8005a9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a8a:	f7fc fe07 	bl	800269c <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d901      	bls.n	8005a9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e06d      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a9c:	4b29      	ldr	r3, [pc, #164]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1f0      	bne.n	8005a8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab0:	d108      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005ab2:	4b24      	ldr	r3, [pc, #144]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	4921      	ldr	r1, [pc, #132]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ac4:	4b1f      	ldr	r3, [pc, #124]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a19      	ldr	r1, [r3, #32]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	430b      	orrs	r3, r1
 8005ad6:	491b      	ldr	r1, [pc, #108]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005adc:	4b1b      	ldr	r3, [pc, #108]	; (8005b4c <HAL_RCC_OscConfig+0x4cc>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae2:	f7fc fddb 	bl	800269c <HAL_GetTick>
 8005ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ae8:	e008      	b.n	8005afc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aea:	f7fc fdd7 	bl	800269c <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d901      	bls.n	8005afc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e03d      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005afc:	4b11      	ldr	r3, [pc, #68]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0f0      	beq.n	8005aea <HAL_RCC_OscConfig+0x46a>
 8005b08:	e035      	b.n	8005b76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b0a:	4b10      	ldr	r3, [pc, #64]	; (8005b4c <HAL_RCC_OscConfig+0x4cc>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b10:	f7fc fdc4 	bl	800269c <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b18:	f7fc fdc0 	bl	800269c <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e026      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b2a:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <HAL_RCC_OscConfig+0x4c4>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1f0      	bne.n	8005b18 <HAL_RCC_OscConfig+0x498>
 8005b36:	e01e      	b.n	8005b76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d107      	bne.n	8005b50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e019      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
 8005b44:	40021000 	.word	0x40021000
 8005b48:	40007000 	.word	0x40007000
 8005b4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <HAL_RCC_OscConfig+0x500>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d106      	bne.n	8005b72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d001      	beq.n	8005b76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	40021000 	.word	0x40021000

08005b84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e0d0      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b98:	4b6a      	ldr	r3, [pc, #424]	; (8005d44 <HAL_RCC_ClockConfig+0x1c0>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d910      	bls.n	8005bc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ba6:	4b67      	ldr	r3, [pc, #412]	; (8005d44 <HAL_RCC_ClockConfig+0x1c0>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f023 0207 	bic.w	r2, r3, #7
 8005bae:	4965      	ldr	r1, [pc, #404]	; (8005d44 <HAL_RCC_ClockConfig+0x1c0>)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb6:	4b63      	ldr	r3, [pc, #396]	; (8005d44 <HAL_RCC_ClockConfig+0x1c0>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0307 	and.w	r3, r3, #7
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d001      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e0b8      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d020      	beq.n	8005c16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d005      	beq.n	8005bec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005be0:	4b59      	ldr	r3, [pc, #356]	; (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	4a58      	ldr	r2, [pc, #352]	; (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005be6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005bea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bf8:	4b53      	ldr	r3, [pc, #332]	; (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	4a52      	ldr	r2, [pc, #328]	; (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005bfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005c02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c04:	4b50      	ldr	r3, [pc, #320]	; (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	494d      	ldr	r1, [pc, #308]	; (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d040      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d107      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c2a:	4b47      	ldr	r3, [pc, #284]	; (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d115      	bne.n	8005c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e07f      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d107      	bne.n	8005c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c42:	4b41      	ldr	r3, [pc, #260]	; (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d109      	bne.n	8005c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e073      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c52:	4b3d      	ldr	r3, [pc, #244]	; (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e06b      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c62:	4b39      	ldr	r3, [pc, #228]	; (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f023 0203 	bic.w	r2, r3, #3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	4936      	ldr	r1, [pc, #216]	; (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c74:	f7fc fd12 	bl	800269c <HAL_GetTick>
 8005c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c7a:	e00a      	b.n	8005c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c7c:	f7fc fd0e 	bl	800269c <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e053      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c92:	4b2d      	ldr	r3, [pc, #180]	; (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f003 020c 	and.w	r2, r3, #12
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d1eb      	bne.n	8005c7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ca4:	4b27      	ldr	r3, [pc, #156]	; (8005d44 <HAL_RCC_ClockConfig+0x1c0>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d210      	bcs.n	8005cd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cb2:	4b24      	ldr	r3, [pc, #144]	; (8005d44 <HAL_RCC_ClockConfig+0x1c0>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f023 0207 	bic.w	r2, r3, #7
 8005cba:	4922      	ldr	r1, [pc, #136]	; (8005d44 <HAL_RCC_ClockConfig+0x1c0>)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc2:	4b20      	ldr	r3, [pc, #128]	; (8005d44 <HAL_RCC_ClockConfig+0x1c0>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0307 	and.w	r3, r3, #7
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d001      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e032      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d008      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ce0:	4b19      	ldr	r3, [pc, #100]	; (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	4916      	ldr	r1, [pc, #88]	; (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d009      	beq.n	8005d12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005cfe:	4b12      	ldr	r3, [pc, #72]	; (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	490e      	ldr	r1, [pc, #56]	; (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d12:	f000 f821 	bl	8005d58 <HAL_RCC_GetSysClockFreq>
 8005d16:	4602      	mov	r2, r0
 8005d18:	4b0b      	ldr	r3, [pc, #44]	; (8005d48 <HAL_RCC_ClockConfig+0x1c4>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	091b      	lsrs	r3, r3, #4
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	490a      	ldr	r1, [pc, #40]	; (8005d4c <HAL_RCC_ClockConfig+0x1c8>)
 8005d24:	5ccb      	ldrb	r3, [r1, r3]
 8005d26:	fa22 f303 	lsr.w	r3, r2, r3
 8005d2a:	4a09      	ldr	r2, [pc, #36]	; (8005d50 <HAL_RCC_ClockConfig+0x1cc>)
 8005d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d2e:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <HAL_RCC_ClockConfig+0x1d0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fc fc70 	bl	8002618 <HAL_InitTick>

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	40022000 	.word	0x40022000
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	0800af40 	.word	0x0800af40
 8005d50:	20000010 	.word	0x20000010
 8005d54:	20000014 	.word	0x20000014

08005d58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	2300      	movs	r3, #0
 8005d64:	60bb      	str	r3, [r7, #8]
 8005d66:	2300      	movs	r3, #0
 8005d68:	617b      	str	r3, [r7, #20]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005d72:	4b1e      	ldr	r3, [pc, #120]	; (8005dec <HAL_RCC_GetSysClockFreq+0x94>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f003 030c 	and.w	r3, r3, #12
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d002      	beq.n	8005d88 <HAL_RCC_GetSysClockFreq+0x30>
 8005d82:	2b08      	cmp	r3, #8
 8005d84:	d003      	beq.n	8005d8e <HAL_RCC_GetSysClockFreq+0x36>
 8005d86:	e027      	b.n	8005dd8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d88:	4b19      	ldr	r3, [pc, #100]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005d8a:	613b      	str	r3, [r7, #16]
      break;
 8005d8c:	e027      	b.n	8005dde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	0c9b      	lsrs	r3, r3, #18
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	4a17      	ldr	r2, [pc, #92]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005d98:	5cd3      	ldrb	r3, [r2, r3]
 8005d9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d010      	beq.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005da6:	4b11      	ldr	r3, [pc, #68]	; (8005dec <HAL_RCC_GetSysClockFreq+0x94>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	0c5b      	lsrs	r3, r3, #17
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	4a11      	ldr	r2, [pc, #68]	; (8005df8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005db2:	5cd3      	ldrb	r3, [r2, r3]
 8005db4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a0d      	ldr	r2, [pc, #52]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005dba:	fb03 f202 	mul.w	r2, r3, r2
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc4:	617b      	str	r3, [r7, #20]
 8005dc6:	e004      	b.n	8005dd2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a0c      	ldr	r2, [pc, #48]	; (8005dfc <HAL_RCC_GetSysClockFreq+0xa4>)
 8005dcc:	fb02 f303 	mul.w	r3, r2, r3
 8005dd0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	613b      	str	r3, [r7, #16]
      break;
 8005dd6:	e002      	b.n	8005dde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005dd8:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005dda:	613b      	str	r3, [r7, #16]
      break;
 8005ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dde:	693b      	ldr	r3, [r7, #16]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bc80      	pop	{r7}
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	40021000 	.word	0x40021000
 8005df0:	007a1200 	.word	0x007a1200
 8005df4:	0800af58 	.word	0x0800af58
 8005df8:	0800af68 	.word	0x0800af68
 8005dfc:	003d0900 	.word	0x003d0900

08005e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e04:	4b02      	ldr	r3, [pc, #8]	; (8005e10 <HAL_RCC_GetHCLKFreq+0x10>)
 8005e06:	681b      	ldr	r3, [r3, #0]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bc80      	pop	{r7}
 8005e0e:	4770      	bx	lr
 8005e10:	20000010 	.word	0x20000010

08005e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e18:	f7ff fff2 	bl	8005e00 <HAL_RCC_GetHCLKFreq>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	0a1b      	lsrs	r3, r3, #8
 8005e24:	f003 0307 	and.w	r3, r3, #7
 8005e28:	4903      	ldr	r1, [pc, #12]	; (8005e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e2a:	5ccb      	ldrb	r3, [r1, r3]
 8005e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	40021000 	.word	0x40021000
 8005e38:	0800af50 	.word	0x0800af50

08005e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e40:	f7ff ffde 	bl	8005e00 <HAL_RCC_GetHCLKFreq>
 8005e44:	4602      	mov	r2, r0
 8005e46:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	0adb      	lsrs	r3, r3, #11
 8005e4c:	f003 0307 	and.w	r3, r3, #7
 8005e50:	4903      	ldr	r1, [pc, #12]	; (8005e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e52:	5ccb      	ldrb	r3, [r1, r3]
 8005e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	0800af50 	.word	0x0800af50

08005e64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005e6c:	4b0a      	ldr	r3, [pc, #40]	; (8005e98 <RCC_Delay+0x34>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a0a      	ldr	r2, [pc, #40]	; (8005e9c <RCC_Delay+0x38>)
 8005e72:	fba2 2303 	umull	r2, r3, r2, r3
 8005e76:	0a5b      	lsrs	r3, r3, #9
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	fb02 f303 	mul.w	r3, r2, r3
 8005e7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005e80:	bf00      	nop
  }
  while (Delay --);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	1e5a      	subs	r2, r3, #1
 8005e86:	60fa      	str	r2, [r7, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1f9      	bne.n	8005e80 <RCC_Delay+0x1c>
}
 8005e8c:	bf00      	nop
 8005e8e:	bf00      	nop
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr
 8005e98:	20000010 	.word	0x20000010
 8005e9c:	10624dd3 	.word	0x10624dd3

08005ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	2300      	movs	r3, #0
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d07d      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ec0:	4b4f      	ldr	r3, [pc, #316]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10d      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ecc:	4b4c      	ldr	r3, [pc, #304]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	4a4b      	ldr	r2, [pc, #300]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ed6:	61d3      	str	r3, [r2, #28]
 8005ed8:	4b49      	ldr	r3, [pc, #292]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eda:	69db      	ldr	r3, [r3, #28]
 8005edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ee0:	60bb      	str	r3, [r7, #8]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee8:	4b46      	ldr	r3, [pc, #280]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d118      	bne.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ef4:	4b43      	ldr	r3, [pc, #268]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a42      	ldr	r2, [pc, #264]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005efe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f00:	f7fc fbcc 	bl	800269c <HAL_GetTick>
 8005f04:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f06:	e008      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f08:	f7fc fbc8 	bl	800269c <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b64      	cmp	r3, #100	; 0x64
 8005f14:	d901      	bls.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e06d      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f1a:	4b3a      	ldr	r3, [pc, #232]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0f0      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f26:	4b36      	ldr	r3, [pc, #216]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f2e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d02e      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d027      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f44:	4b2e      	ldr	r3, [pc, #184]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f4e:	4b2e      	ldr	r3, [pc, #184]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f50:	2201      	movs	r2, #1
 8005f52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f54:	4b2c      	ldr	r3, [pc, #176]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005f5a:	4a29      	ldr	r2, [pc, #164]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d014      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f6a:	f7fc fb97 	bl	800269c <HAL_GetTick>
 8005f6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f70:	e00a      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f72:	f7fc fb93 	bl	800269c <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d901      	bls.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e036      	b.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f88:	4b1d      	ldr	r3, [pc, #116]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d0ee      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f94:	4b1a      	ldr	r3, [pc, #104]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	4917      	ldr	r1, [pc, #92]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005fa6:	7dfb      	ldrb	r3, [r7, #23]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d105      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fac:	4b14      	ldr	r3, [pc, #80]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	4a13      	ldr	r2, [pc, #76]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fb6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d008      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fc4:	4b0e      	ldr	r3, [pc, #56]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	490b      	ldr	r1, [pc, #44]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0310 	and.w	r3, r3, #16
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d008      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fe2:	4b07      	ldr	r3, [pc, #28]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	4904      	ldr	r1, [pc, #16]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	40021000 	.word	0x40021000
 8006004:	40007000 	.word	0x40007000
 8006008:	42420440 	.word	0x42420440

0800600c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e041      	b.n	80060a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d106      	bne.n	8006038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7fc f822 	bl	800207c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3304      	adds	r3, #4
 8006048:	4619      	mov	r1, r3
 800604a:	4610      	mov	r0, r2
 800604c:	f001 f850 	bl	80070f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d001      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e03a      	b.n	800613a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0201 	orr.w	r2, r2, #1
 80060da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a18      	ldr	r2, [pc, #96]	; (8006144 <HAL_TIM_Base_Start_IT+0x98>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00e      	beq.n	8006104 <HAL_TIM_Base_Start_IT+0x58>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ee:	d009      	beq.n	8006104 <HAL_TIM_Base_Start_IT+0x58>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a14      	ldr	r2, [pc, #80]	; (8006148 <HAL_TIM_Base_Start_IT+0x9c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d004      	beq.n	8006104 <HAL_TIM_Base_Start_IT+0x58>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a13      	ldr	r2, [pc, #76]	; (800614c <HAL_TIM_Base_Start_IT+0xa0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d111      	bne.n	8006128 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 0307 	and.w	r3, r3, #7
 800610e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2b06      	cmp	r3, #6
 8006114:	d010      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f042 0201 	orr.w	r2, r2, #1
 8006124:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006126:	e007      	b.n	8006138 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0201 	orr.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr
 8006144:	40012c00 	.word	0x40012c00
 8006148:	40000400 	.word	0x40000400
 800614c:	40000800 	.word	0x40000800

08006150 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e041      	b.n	80061e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d106      	bne.n	800617c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7fb ff38 	bl	8001fec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3304      	adds	r3, #4
 800618c:	4619      	mov	r1, r3
 800618e:	4610      	mov	r0, r2
 8006190:	f000 ffae 	bl	80070f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d109      	bne.n	8006214 <HAL_TIM_PWM_Start+0x24>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b01      	cmp	r3, #1
 800620a:	bf14      	ite	ne
 800620c:	2301      	movne	r3, #1
 800620e:	2300      	moveq	r3, #0
 8006210:	b2db      	uxtb	r3, r3
 8006212:	e022      	b.n	800625a <HAL_TIM_PWM_Start+0x6a>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2b04      	cmp	r3, #4
 8006218:	d109      	bne.n	800622e <HAL_TIM_PWM_Start+0x3e>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b01      	cmp	r3, #1
 8006224:	bf14      	ite	ne
 8006226:	2301      	movne	r3, #1
 8006228:	2300      	moveq	r3, #0
 800622a:	b2db      	uxtb	r3, r3
 800622c:	e015      	b.n	800625a <HAL_TIM_PWM_Start+0x6a>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b08      	cmp	r3, #8
 8006232:	d109      	bne.n	8006248 <HAL_TIM_PWM_Start+0x58>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b01      	cmp	r3, #1
 800623e:	bf14      	ite	ne
 8006240:	2301      	movne	r3, #1
 8006242:	2300      	moveq	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	e008      	b.n	800625a <HAL_TIM_PWM_Start+0x6a>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b01      	cmp	r3, #1
 8006252:	bf14      	ite	ne
 8006254:	2301      	movne	r3, #1
 8006256:	2300      	moveq	r3, #0
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e05e      	b.n	8006320 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d104      	bne.n	8006272 <HAL_TIM_PWM_Start+0x82>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006270:	e013      	b.n	800629a <HAL_TIM_PWM_Start+0xaa>
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b04      	cmp	r3, #4
 8006276:	d104      	bne.n	8006282 <HAL_TIM_PWM_Start+0x92>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006280:	e00b      	b.n	800629a <HAL_TIM_PWM_Start+0xaa>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b08      	cmp	r3, #8
 8006286:	d104      	bne.n	8006292 <HAL_TIM_PWM_Start+0xa2>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006290:	e003      	b.n	800629a <HAL_TIM_PWM_Start+0xaa>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2202      	movs	r2, #2
 8006296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2201      	movs	r2, #1
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f001 f9a4 	bl	80075f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a1e      	ldr	r2, [pc, #120]	; (8006328 <HAL_TIM_PWM_Start+0x138>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d107      	bne.n	80062c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a18      	ldr	r2, [pc, #96]	; (8006328 <HAL_TIM_PWM_Start+0x138>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00e      	beq.n	80062ea <HAL_TIM_PWM_Start+0xfa>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d4:	d009      	beq.n	80062ea <HAL_TIM_PWM_Start+0xfa>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a14      	ldr	r2, [pc, #80]	; (800632c <HAL_TIM_PWM_Start+0x13c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d004      	beq.n	80062ea <HAL_TIM_PWM_Start+0xfa>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a12      	ldr	r2, [pc, #72]	; (8006330 <HAL_TIM_PWM_Start+0x140>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d111      	bne.n	800630e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 0307 	and.w	r3, r3, #7
 80062f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2b06      	cmp	r3, #6
 80062fa:	d010      	beq.n	800631e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f042 0201 	orr.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800630c:	e007      	b.n	800631e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f042 0201 	orr.w	r2, r2, #1
 800631c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	40012c00 	.word	0x40012c00
 800632c:	40000400 	.word	0x40000400
 8006330:	40000800 	.word	0x40000800

08006334 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d109      	bne.n	800635c <HAL_TIM_PWM_Start_IT+0x28>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b01      	cmp	r3, #1
 8006352:	bf14      	ite	ne
 8006354:	2301      	movne	r3, #1
 8006356:	2300      	moveq	r3, #0
 8006358:	b2db      	uxtb	r3, r3
 800635a:	e022      	b.n	80063a2 <HAL_TIM_PWM_Start_IT+0x6e>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2b04      	cmp	r3, #4
 8006360:	d109      	bne.n	8006376 <HAL_TIM_PWM_Start_IT+0x42>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b01      	cmp	r3, #1
 800636c:	bf14      	ite	ne
 800636e:	2301      	movne	r3, #1
 8006370:	2300      	moveq	r3, #0
 8006372:	b2db      	uxtb	r3, r3
 8006374:	e015      	b.n	80063a2 <HAL_TIM_PWM_Start_IT+0x6e>
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b08      	cmp	r3, #8
 800637a:	d109      	bne.n	8006390 <HAL_TIM_PWM_Start_IT+0x5c>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b01      	cmp	r3, #1
 8006386:	bf14      	ite	ne
 8006388:	2301      	movne	r3, #1
 800638a:	2300      	moveq	r3, #0
 800638c:	b2db      	uxtb	r3, r3
 800638e:	e008      	b.n	80063a2 <HAL_TIM_PWM_Start_IT+0x6e>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b01      	cmp	r3, #1
 800639a:	bf14      	ite	ne
 800639c:	2301      	movne	r3, #1
 800639e:	2300      	moveq	r3, #0
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e0a9      	b.n	80064fe <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d104      	bne.n	80063ba <HAL_TIM_PWM_Start_IT+0x86>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063b8:	e013      	b.n	80063e2 <HAL_TIM_PWM_Start_IT+0xae>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d104      	bne.n	80063ca <HAL_TIM_PWM_Start_IT+0x96>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063c8:	e00b      	b.n	80063e2 <HAL_TIM_PWM_Start_IT+0xae>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d104      	bne.n	80063da <HAL_TIM_PWM_Start_IT+0xa6>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063d8:	e003      	b.n	80063e2 <HAL_TIM_PWM_Start_IT+0xae>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2202      	movs	r2, #2
 80063de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b0c      	cmp	r3, #12
 80063e6:	d841      	bhi.n	800646c <HAL_TIM_PWM_Start_IT+0x138>
 80063e8:	a201      	add	r2, pc, #4	; (adr r2, 80063f0 <HAL_TIM_PWM_Start_IT+0xbc>)
 80063ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ee:	bf00      	nop
 80063f0:	08006425 	.word	0x08006425
 80063f4:	0800646d 	.word	0x0800646d
 80063f8:	0800646d 	.word	0x0800646d
 80063fc:	0800646d 	.word	0x0800646d
 8006400:	08006437 	.word	0x08006437
 8006404:	0800646d 	.word	0x0800646d
 8006408:	0800646d 	.word	0x0800646d
 800640c:	0800646d 	.word	0x0800646d
 8006410:	08006449 	.word	0x08006449
 8006414:	0800646d 	.word	0x0800646d
 8006418:	0800646d 	.word	0x0800646d
 800641c:	0800646d 	.word	0x0800646d
 8006420:	0800645b 	.word	0x0800645b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68da      	ldr	r2, [r3, #12]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0202 	orr.w	r2, r2, #2
 8006432:	60da      	str	r2, [r3, #12]
      break;
 8006434:	e01d      	b.n	8006472 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68da      	ldr	r2, [r3, #12]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f042 0204 	orr.w	r2, r2, #4
 8006444:	60da      	str	r2, [r3, #12]
      break;
 8006446:	e014      	b.n	8006472 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68da      	ldr	r2, [r3, #12]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0208 	orr.w	r2, r2, #8
 8006456:	60da      	str	r2, [r3, #12]
      break;
 8006458:	e00b      	b.n	8006472 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68da      	ldr	r2, [r3, #12]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f042 0210 	orr.w	r2, r2, #16
 8006468:	60da      	str	r2, [r3, #12]
      break;
 800646a:	e002      	b.n	8006472 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	73fb      	strb	r3, [r7, #15]
      break;
 8006470:	bf00      	nop
  }

  if (status == HAL_OK)
 8006472:	7bfb      	ldrb	r3, [r7, #15]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d141      	bne.n	80064fc <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2201      	movs	r2, #1
 800647e:	6839      	ldr	r1, [r7, #0]
 8006480:	4618      	mov	r0, r3
 8006482:	f001 f8b5 	bl	80075f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a1f      	ldr	r2, [pc, #124]	; (8006508 <HAL_TIM_PWM_Start_IT+0x1d4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d107      	bne.n	80064a0 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800649e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a18      	ldr	r2, [pc, #96]	; (8006508 <HAL_TIM_PWM_Start_IT+0x1d4>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d00e      	beq.n	80064c8 <HAL_TIM_PWM_Start_IT+0x194>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b2:	d009      	beq.n	80064c8 <HAL_TIM_PWM_Start_IT+0x194>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a14      	ldr	r2, [pc, #80]	; (800650c <HAL_TIM_PWM_Start_IT+0x1d8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d004      	beq.n	80064c8 <HAL_TIM_PWM_Start_IT+0x194>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a13      	ldr	r2, [pc, #76]	; (8006510 <HAL_TIM_PWM_Start_IT+0x1dc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d111      	bne.n	80064ec <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2b06      	cmp	r3, #6
 80064d8:	d010      	beq.n	80064fc <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f042 0201 	orr.w	r2, r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ea:	e007      	b.n	80064fc <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f042 0201 	orr.w	r2, r2, #1
 80064fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	40012c00 	.word	0x40012c00
 800650c:	40000400 	.word	0x40000400
 8006510:	40000800 	.word	0x40000800

08006514 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d109      	bne.n	8006540 <HAL_TIM_PWM_Start_DMA+0x2c>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b02      	cmp	r3, #2
 8006536:	bf0c      	ite	eq
 8006538:	2301      	moveq	r3, #1
 800653a:	2300      	movne	r3, #0
 800653c:	b2db      	uxtb	r3, r3
 800653e:	e022      	b.n	8006586 <HAL_TIM_PWM_Start_DMA+0x72>
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2b04      	cmp	r3, #4
 8006544:	d109      	bne.n	800655a <HAL_TIM_PWM_Start_DMA+0x46>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b02      	cmp	r3, #2
 8006550:	bf0c      	ite	eq
 8006552:	2301      	moveq	r3, #1
 8006554:	2300      	movne	r3, #0
 8006556:	b2db      	uxtb	r3, r3
 8006558:	e015      	b.n	8006586 <HAL_TIM_PWM_Start_DMA+0x72>
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2b08      	cmp	r3, #8
 800655e:	d109      	bne.n	8006574 <HAL_TIM_PWM_Start_DMA+0x60>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	bf0c      	ite	eq
 800656c:	2301      	moveq	r3, #1
 800656e:	2300      	movne	r3, #0
 8006570:	b2db      	uxtb	r3, r3
 8006572:	e008      	b.n	8006586 <HAL_TIM_PWM_Start_DMA+0x72>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	bf0c      	ite	eq
 8006580:	2301      	moveq	r3, #1
 8006582:	2300      	movne	r3, #0
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800658a:	2302      	movs	r3, #2
 800658c:	e153      	b.n	8006836 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d109      	bne.n	80065a8 <HAL_TIM_PWM_Start_DMA+0x94>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b01      	cmp	r3, #1
 800659e:	bf0c      	ite	eq
 80065a0:	2301      	moveq	r3, #1
 80065a2:	2300      	movne	r3, #0
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	e022      	b.n	80065ee <HAL_TIM_PWM_Start_DMA+0xda>
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	d109      	bne.n	80065c2 <HAL_TIM_PWM_Start_DMA+0xae>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	bf0c      	ite	eq
 80065ba:	2301      	moveq	r3, #1
 80065bc:	2300      	movne	r3, #0
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	e015      	b.n	80065ee <HAL_TIM_PWM_Start_DMA+0xda>
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d109      	bne.n	80065dc <HAL_TIM_PWM_Start_DMA+0xc8>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	bf0c      	ite	eq
 80065d4:	2301      	moveq	r3, #1
 80065d6:	2300      	movne	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	e008      	b.n	80065ee <HAL_TIM_PWM_Start_DMA+0xda>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	bf0c      	ite	eq
 80065e8:	2301      	moveq	r3, #1
 80065ea:	2300      	movne	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d024      	beq.n	800663c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <HAL_TIM_PWM_Start_DMA+0xea>
 80065f8:	887b      	ldrh	r3, [r7, #2]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e119      	b.n	8006836 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d104      	bne.n	8006612 <HAL_TIM_PWM_Start_DMA+0xfe>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006610:	e016      	b.n	8006640 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2b04      	cmp	r3, #4
 8006616:	d104      	bne.n	8006622 <HAL_TIM_PWM_Start_DMA+0x10e>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006620:	e00e      	b.n	8006640 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b08      	cmp	r3, #8
 8006626:	d104      	bne.n	8006632 <HAL_TIM_PWM_Start_DMA+0x11e>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006630:	e006      	b.n	8006640 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2202      	movs	r2, #2
 8006636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800663a:	e001      	b.n	8006640 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e0fa      	b.n	8006836 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b0c      	cmp	r3, #12
 8006644:	f200 80ae 	bhi.w	80067a4 <HAL_TIM_PWM_Start_DMA+0x290>
 8006648:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800664a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664e:	bf00      	nop
 8006650:	08006685 	.word	0x08006685
 8006654:	080067a5 	.word	0x080067a5
 8006658:	080067a5 	.word	0x080067a5
 800665c:	080067a5 	.word	0x080067a5
 8006660:	080066cd 	.word	0x080066cd
 8006664:	080067a5 	.word	0x080067a5
 8006668:	080067a5 	.word	0x080067a5
 800666c:	080067a5 	.word	0x080067a5
 8006670:	08006715 	.word	0x08006715
 8006674:	080067a5 	.word	0x080067a5
 8006678:	080067a5 	.word	0x080067a5
 800667c:	080067a5 	.word	0x080067a5
 8006680:	0800675d 	.word	0x0800675d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006688:	4a6d      	ldr	r2, [pc, #436]	; (8006840 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800668a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006690:	4a6c      	ldr	r2, [pc, #432]	; (8006844 <HAL_TIM_PWM_Start_DMA+0x330>)
 8006692:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	4a6b      	ldr	r2, [pc, #428]	; (8006848 <HAL_TIM_PWM_Start_DMA+0x334>)
 800669a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80066a0:	6879      	ldr	r1, [r7, #4]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3334      	adds	r3, #52	; 0x34
 80066a8:	461a      	mov	r2, r3
 80066aa:	887b      	ldrh	r3, [r7, #2]
 80066ac:	f7fc fd80 	bl	80031b0 <HAL_DMA_Start_IT>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e0bd      	b.n	8006836 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68da      	ldr	r2, [r3, #12]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066c8:	60da      	str	r2, [r3, #12]
      break;
 80066ca:	e06e      	b.n	80067aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d0:	4a5b      	ldr	r2, [pc, #364]	; (8006840 <HAL_TIM_PWM_Start_DMA+0x32c>)
 80066d2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d8:	4a5a      	ldr	r2, [pc, #360]	; (8006844 <HAL_TIM_PWM_Start_DMA+0x330>)
 80066da:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e0:	4a59      	ldr	r2, [pc, #356]	; (8006848 <HAL_TIM_PWM_Start_DMA+0x334>)
 80066e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80066e8:	6879      	ldr	r1, [r7, #4]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3338      	adds	r3, #56	; 0x38
 80066f0:	461a      	mov	r2, r3
 80066f2:	887b      	ldrh	r3, [r7, #2]
 80066f4:	f7fc fd5c 	bl	80031b0 <HAL_DMA_Start_IT>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e099      	b.n	8006836 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68da      	ldr	r2, [r3, #12]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006710:	60da      	str	r2, [r3, #12]
      break;
 8006712:	e04a      	b.n	80067aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006718:	4a49      	ldr	r2, [pc, #292]	; (8006840 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800671a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006720:	4a48      	ldr	r2, [pc, #288]	; (8006844 <HAL_TIM_PWM_Start_DMA+0x330>)
 8006722:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	4a47      	ldr	r2, [pc, #284]	; (8006848 <HAL_TIM_PWM_Start_DMA+0x334>)
 800672a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006730:	6879      	ldr	r1, [r7, #4]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	333c      	adds	r3, #60	; 0x3c
 8006738:	461a      	mov	r2, r3
 800673a:	887b      	ldrh	r3, [r7, #2]
 800673c:	f7fc fd38 	bl	80031b0 <HAL_DMA_Start_IT>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e075      	b.n	8006836 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68da      	ldr	r2, [r3, #12]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006758:	60da      	str	r2, [r3, #12]
      break;
 800675a:	e026      	b.n	80067aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006760:	4a37      	ldr	r2, [pc, #220]	; (8006840 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8006762:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006768:	4a36      	ldr	r2, [pc, #216]	; (8006844 <HAL_TIM_PWM_Start_DMA+0x330>)
 800676a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006770:	4a35      	ldr	r2, [pc, #212]	; (8006848 <HAL_TIM_PWM_Start_DMA+0x334>)
 8006772:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3340      	adds	r3, #64	; 0x40
 8006780:	461a      	mov	r2, r3
 8006782:	887b      	ldrh	r3, [r7, #2]
 8006784:	f7fc fd14 	bl	80031b0 <HAL_DMA_Start_IT>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e051      	b.n	8006836 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067a0:	60da      	str	r2, [r3, #12]
      break;
 80067a2:	e002      	b.n	80067aa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	75fb      	strb	r3, [r7, #23]
      break;
 80067a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80067aa:	7dfb      	ldrb	r3, [r7, #23]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d141      	bne.n	8006834 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2201      	movs	r2, #1
 80067b6:	68b9      	ldr	r1, [r7, #8]
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 ff19 	bl	80075f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a22      	ldr	r2, [pc, #136]	; (800684c <HAL_TIM_PWM_Start_DMA+0x338>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d107      	bne.n	80067d8 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067d6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a1b      	ldr	r2, [pc, #108]	; (800684c <HAL_TIM_PWM_Start_DMA+0x338>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d00e      	beq.n	8006800 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ea:	d009      	beq.n	8006800 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a17      	ldr	r2, [pc, #92]	; (8006850 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d004      	beq.n	8006800 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a16      	ldr	r2, [pc, #88]	; (8006854 <HAL_TIM_PWM_Start_DMA+0x340>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d111      	bne.n	8006824 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	2b06      	cmp	r3, #6
 8006810:	d010      	beq.n	8006834 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f042 0201 	orr.w	r2, r2, #1
 8006820:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006822:	e007      	b.n	8006834 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0201 	orr.w	r2, r2, #1
 8006832:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006834:	7dfb      	ldrb	r3, [r7, #23]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	08006fe1 	.word	0x08006fe1
 8006844:	08007089 	.word	0x08007089
 8006848:	08006f4f 	.word	0x08006f4f
 800684c:	40012c00 	.word	0x40012c00
 8006850:	40000400 	.word	0x40000400
 8006854:	40000800 	.word	0x40000800

08006858 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006862:	2300      	movs	r3, #0
 8006864:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b0c      	cmp	r3, #12
 800686a:	d855      	bhi.n	8006918 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800686c:	a201      	add	r2, pc, #4	; (adr r2, 8006874 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800686e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006872:	bf00      	nop
 8006874:	080068a9 	.word	0x080068a9
 8006878:	08006919 	.word	0x08006919
 800687c:	08006919 	.word	0x08006919
 8006880:	08006919 	.word	0x08006919
 8006884:	080068c5 	.word	0x080068c5
 8006888:	08006919 	.word	0x08006919
 800688c:	08006919 	.word	0x08006919
 8006890:	08006919 	.word	0x08006919
 8006894:	080068e1 	.word	0x080068e1
 8006898:	08006919 	.word	0x08006919
 800689c:	08006919 	.word	0x08006919
 80068a0:	08006919 	.word	0x08006919
 80068a4:	080068fd 	.word	0x080068fd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68da      	ldr	r2, [r3, #12]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80068b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fc fd13 	bl	80032e8 <HAL_DMA_Abort_IT>
      break;
 80068c2:	e02c      	b.n	800691e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fc fd05 	bl	80032e8 <HAL_DMA_Abort_IT>
      break;
 80068de:	e01e      	b.n	800691e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fc fcf7 	bl	80032e8 <HAL_DMA_Abort_IT>
      break;
 80068fa:	e010      	b.n	800691e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68da      	ldr	r2, [r3, #12]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800690a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006910:	4618      	mov	r0, r3
 8006912:	f7fc fce9 	bl	80032e8 <HAL_DMA_Abort_IT>
      break;
 8006916:	e002      	b.n	800691e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	73fb      	strb	r3, [r7, #15]
      break;
 800691c:	bf00      	nop
  }

  if (status == HAL_OK)
 800691e:	7bfb      	ldrb	r3, [r7, #15]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d157      	bne.n	80069d4 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2200      	movs	r2, #0
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	4618      	mov	r0, r3
 800692e:	f000 fe5f 	bl	80075f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a2a      	ldr	r2, [pc, #168]	; (80069e0 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d117      	bne.n	800696c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6a1a      	ldr	r2, [r3, #32]
 8006942:	f241 1311 	movw	r3, #4369	; 0x1111
 8006946:	4013      	ands	r3, r2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10f      	bne.n	800696c <HAL_TIM_PWM_Stop_DMA+0x114>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6a1a      	ldr	r2, [r3, #32]
 8006952:	f240 4344 	movw	r3, #1092	; 0x444
 8006956:	4013      	ands	r3, r2
 8006958:	2b00      	cmp	r3, #0
 800695a:	d107      	bne.n	800696c <HAL_TIM_PWM_Stop_DMA+0x114>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800696a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6a1a      	ldr	r2, [r3, #32]
 8006972:	f241 1311 	movw	r3, #4369	; 0x1111
 8006976:	4013      	ands	r3, r2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10f      	bne.n	800699c <HAL_TIM_PWM_Stop_DMA+0x144>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6a1a      	ldr	r2, [r3, #32]
 8006982:	f240 4344 	movw	r3, #1092	; 0x444
 8006986:	4013      	ands	r3, r2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d107      	bne.n	800699c <HAL_TIM_PWM_Stop_DMA+0x144>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 0201 	bic.w	r2, r2, #1
 800699a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d104      	bne.n	80069ac <HAL_TIM_PWM_Stop_DMA+0x154>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069aa:	e013      	b.n	80069d4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	2b04      	cmp	r3, #4
 80069b0:	d104      	bne.n	80069bc <HAL_TIM_PWM_Stop_DMA+0x164>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069ba:	e00b      	b.n	80069d4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	2b08      	cmp	r3, #8
 80069c0:	d104      	bne.n	80069cc <HAL_TIM_PWM_Stop_DMA+0x174>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069ca:	e003      	b.n	80069d4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80069d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	40012c00 	.word	0x40012c00

080069e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d122      	bne.n	8006a40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d11b      	bne.n	8006a40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f06f 0202 	mvn.w	r2, #2
 8006a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	f003 0303 	and.w	r3, r3, #3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fa76 	bl	8006f18 <HAL_TIM_IC_CaptureCallback>
 8006a2c:	e005      	b.n	8006a3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fa69 	bl	8006f06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7fa ff85 	bl	8001944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	f003 0304 	and.w	r3, r3, #4
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	d122      	bne.n	8006a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b04      	cmp	r3, #4
 8006a5a:	d11b      	bne.n	8006a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f06f 0204 	mvn.w	r2, #4
 8006a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2202      	movs	r2, #2
 8006a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fa4c 	bl	8006f18 <HAL_TIM_IC_CaptureCallback>
 8006a80:	e005      	b.n	8006a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fa3f 	bl	8006f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7fa ff5b 	bl	8001944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f003 0308 	and.w	r3, r3, #8
 8006a9e:	2b08      	cmp	r3, #8
 8006aa0:	d122      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f003 0308 	and.w	r3, r3, #8
 8006aac:	2b08      	cmp	r3, #8
 8006aae:	d11b      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f06f 0208 	mvn.w	r2, #8
 8006ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2204      	movs	r2, #4
 8006abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	f003 0303 	and.w	r3, r3, #3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fa22 	bl	8006f18 <HAL_TIM_IC_CaptureCallback>
 8006ad4:	e005      	b.n	8006ae2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fa15 	bl	8006f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7fa ff31 	bl	8001944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	f003 0310 	and.w	r3, r3, #16
 8006af2:	2b10      	cmp	r3, #16
 8006af4:	d122      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f003 0310 	and.w	r3, r3, #16
 8006b00:	2b10      	cmp	r3, #16
 8006b02:	d11b      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f06f 0210 	mvn.w	r2, #16
 8006b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2208      	movs	r2, #8
 8006b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f9f8 	bl	8006f18 <HAL_TIM_IC_CaptureCallback>
 8006b28:	e005      	b.n	8006b36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f9eb 	bl	8006f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7fa ff07 	bl	8001944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d10e      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d107      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f06f 0201 	mvn.w	r2, #1
 8006b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fa fcf0 	bl	8001548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b72:	2b80      	cmp	r3, #128	; 0x80
 8006b74:	d10e      	bne.n	8006b94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b80:	2b80      	cmp	r3, #128	; 0x80
 8006b82:	d107      	bne.n	8006b94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fe0a 	bl	80077a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9e:	2b40      	cmp	r3, #64	; 0x40
 8006ba0:	d10e      	bne.n	8006bc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bac:	2b40      	cmp	r3, #64	; 0x40
 8006bae:	d107      	bne.n	8006bc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f9b5 	bl	8006f2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	f003 0320 	and.w	r3, r3, #32
 8006bca:	2b20      	cmp	r3, #32
 8006bcc:	d10e      	bne.n	8006bec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f003 0320 	and.w	r3, r3, #32
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	d107      	bne.n	8006bec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f06f 0220 	mvn.w	r2, #32
 8006be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fdd5 	bl	8007796 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bec:	bf00      	nop
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d101      	bne.n	8006c12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c0e:	2302      	movs	r3, #2
 8006c10:	e0ae      	b.n	8006d70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b0c      	cmp	r3, #12
 8006c1e:	f200 809f 	bhi.w	8006d60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c22:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c28:	08006c5d 	.word	0x08006c5d
 8006c2c:	08006d61 	.word	0x08006d61
 8006c30:	08006d61 	.word	0x08006d61
 8006c34:	08006d61 	.word	0x08006d61
 8006c38:	08006c9d 	.word	0x08006c9d
 8006c3c:	08006d61 	.word	0x08006d61
 8006c40:	08006d61 	.word	0x08006d61
 8006c44:	08006d61 	.word	0x08006d61
 8006c48:	08006cdf 	.word	0x08006cdf
 8006c4c:	08006d61 	.word	0x08006d61
 8006c50:	08006d61 	.word	0x08006d61
 8006c54:	08006d61 	.word	0x08006d61
 8006c58:	08006d1f 	.word	0x08006d1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68b9      	ldr	r1, [r7, #8]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 faa6 	bl	80071b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	699a      	ldr	r2, [r3, #24]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 0208 	orr.w	r2, r2, #8
 8006c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699a      	ldr	r2, [r3, #24]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0204 	bic.w	r2, r2, #4
 8006c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6999      	ldr	r1, [r3, #24]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	691a      	ldr	r2, [r3, #16]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	619a      	str	r2, [r3, #24]
      break;
 8006c9a:	e064      	b.n	8006d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68b9      	ldr	r1, [r7, #8]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 faec 	bl	8007280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	699a      	ldr	r2, [r3, #24]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	699a      	ldr	r2, [r3, #24]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	6999      	ldr	r1, [r3, #24]
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	021a      	lsls	r2, r3, #8
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	619a      	str	r2, [r3, #24]
      break;
 8006cdc:	e043      	b.n	8006d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 fb35 	bl	8007354 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	69da      	ldr	r2, [r3, #28]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f042 0208 	orr.w	r2, r2, #8
 8006cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	69da      	ldr	r2, [r3, #28]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f022 0204 	bic.w	r2, r2, #4
 8006d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	69d9      	ldr	r1, [r3, #28]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	691a      	ldr	r2, [r3, #16]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	61da      	str	r2, [r3, #28]
      break;
 8006d1c:	e023      	b.n	8006d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68b9      	ldr	r1, [r7, #8]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fb7f 	bl	8007428 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	69da      	ldr	r2, [r3, #28]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	69da      	ldr	r2, [r3, #28]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	69d9      	ldr	r1, [r3, #28]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	021a      	lsls	r2, r3, #8
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	61da      	str	r2, [r3, #28]
      break;
 8006d5e:	e002      	b.n	8006d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	75fb      	strb	r3, [r7, #23]
      break;
 8006d64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3718      	adds	r7, #24
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d101      	bne.n	8006d94 <HAL_TIM_ConfigClockSource+0x1c>
 8006d90:	2302      	movs	r3, #2
 8006d92:	e0b4      	b.n	8006efe <HAL_TIM_ConfigClockSource+0x186>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dcc:	d03e      	beq.n	8006e4c <HAL_TIM_ConfigClockSource+0xd4>
 8006dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dd2:	f200 8087 	bhi.w	8006ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dda:	f000 8086 	beq.w	8006eea <HAL_TIM_ConfigClockSource+0x172>
 8006dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de2:	d87f      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8006de4:	2b70      	cmp	r3, #112	; 0x70
 8006de6:	d01a      	beq.n	8006e1e <HAL_TIM_ConfigClockSource+0xa6>
 8006de8:	2b70      	cmp	r3, #112	; 0x70
 8006dea:	d87b      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dec:	2b60      	cmp	r3, #96	; 0x60
 8006dee:	d050      	beq.n	8006e92 <HAL_TIM_ConfigClockSource+0x11a>
 8006df0:	2b60      	cmp	r3, #96	; 0x60
 8006df2:	d877      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8006df4:	2b50      	cmp	r3, #80	; 0x50
 8006df6:	d03c      	beq.n	8006e72 <HAL_TIM_ConfigClockSource+0xfa>
 8006df8:	2b50      	cmp	r3, #80	; 0x50
 8006dfa:	d873      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dfc:	2b40      	cmp	r3, #64	; 0x40
 8006dfe:	d058      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x13a>
 8006e00:	2b40      	cmp	r3, #64	; 0x40
 8006e02:	d86f      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8006e04:	2b30      	cmp	r3, #48	; 0x30
 8006e06:	d064      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8006e08:	2b30      	cmp	r3, #48	; 0x30
 8006e0a:	d86b      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8006e0c:	2b20      	cmp	r3, #32
 8006e0e:	d060      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8006e10:	2b20      	cmp	r3, #32
 8006e12:	d867      	bhi.n	8006ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d05c      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8006e18:	2b10      	cmp	r3, #16
 8006e1a:	d05a      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8006e1c:	e062      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6818      	ldr	r0, [r3, #0]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	6899      	ldr	r1, [r3, #8]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	f000 fbc0 	bl	80075b2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	609a      	str	r2, [r3, #8]
      break;
 8006e4a:	e04f      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6818      	ldr	r0, [r3, #0]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	6899      	ldr	r1, [r3, #8]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	f000 fba9 	bl	80075b2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e6e:	609a      	str	r2, [r3, #8]
      break;
 8006e70:	e03c      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6818      	ldr	r0, [r3, #0]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	6859      	ldr	r1, [r3, #4]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f000 fb20 	bl	80074c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2150      	movs	r1, #80	; 0x50
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fb77 	bl	800757e <TIM_ITRx_SetConfig>
      break;
 8006e90:	e02c      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6818      	ldr	r0, [r3, #0]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6859      	ldr	r1, [r3, #4]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f000 fb3e 	bl	8007520 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2160      	movs	r1, #96	; 0x60
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fb67 	bl	800757e <TIM_ITRx_SetConfig>
      break;
 8006eb0:	e01c      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6818      	ldr	r0, [r3, #0]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	6859      	ldr	r1, [r3, #4]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f000 fb00 	bl	80074c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2140      	movs	r1, #64	; 0x40
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 fb57 	bl	800757e <TIM_ITRx_SetConfig>
      break;
 8006ed0:	e00c      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4619      	mov	r1, r3
 8006edc:	4610      	mov	r0, r2
 8006ede:	f000 fb4e 	bl	800757e <TIM_ITRx_SetConfig>
      break;
 8006ee2:	e003      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ee8:	e000      	b.n	8006eec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006eea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b083      	sub	sp, #12
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f0e:	bf00      	nop
 8006f10:	370c      	adds	r7, #12
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bc80      	pop	{r7}
 8006f16:	4770      	bx	lr

08006f18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bc80      	pop	{r7}
 8006f28:	4770      	bx	lr

08006f2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f32:	bf00      	nop
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bc80      	pop	{r7}
 8006f3a:	4770      	bx	lr

08006f3c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bc80      	pop	{r7}
 8006f4c:	4770      	bx	lr

08006f4e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b084      	sub	sp, #16
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d107      	bne.n	8006f76 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f74:	e02a      	b.n	8006fcc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d107      	bne.n	8006f90 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2202      	movs	r2, #2
 8006f84:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f8e:	e01d      	b.n	8006fcc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d107      	bne.n	8006faa <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2204      	movs	r2, #4
 8006f9e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fa8:	e010      	b.n	8006fcc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d107      	bne.n	8006fc4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2208      	movs	r2, #8
 8006fb8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fc2:	e003      	b.n	8006fcc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f7ff ffb5 	bl	8006f3c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	771a      	strb	r2, [r3, #28]
}
 8006fd8:	bf00      	nop
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d10b      	bne.n	8007010 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d136      	bne.n	8007074 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800700e:	e031      	b.n	8007074 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	429a      	cmp	r2, r3
 8007018:	d10b      	bne.n	8007032 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2202      	movs	r2, #2
 800701e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d125      	bne.n	8007074 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007030:	e020      	b.n	8007074 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	429a      	cmp	r2, r3
 800703a:	d10b      	bne.n	8007054 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2204      	movs	r2, #4
 8007040:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d114      	bne.n	8007074 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007052:	e00f      	b.n	8007074 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	429a      	cmp	r2, r3
 800705c:	d10a      	bne.n	8007074 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2208      	movs	r2, #8
 8007062:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d103      	bne.n	8007074 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f7fa fc65 	bl	8001944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	771a      	strb	r2, [r3, #28]
}
 8007080:	bf00      	nop
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007094:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	429a      	cmp	r2, r3
 800709e:	d103      	bne.n	80070a8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2201      	movs	r2, #1
 80070a4:	771a      	strb	r2, [r3, #28]
 80070a6:	e019      	b.n	80070dc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d103      	bne.n	80070ba <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2202      	movs	r2, #2
 80070b6:	771a      	strb	r2, [r3, #28]
 80070b8:	e010      	b.n	80070dc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d103      	bne.n	80070cc <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2204      	movs	r2, #4
 80070c8:	771a      	strb	r2, [r3, #28]
 80070ca:	e007      	b.n	80070dc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d102      	bne.n	80070dc <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2208      	movs	r2, #8
 80070da:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f7fa fbb3 	bl	8001848 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	771a      	strb	r2, [r3, #28]
}
 80070e8:	bf00      	nop
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a29      	ldr	r2, [pc, #164]	; (80071a8 <TIM_Base_SetConfig+0xb8>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d00b      	beq.n	8007120 <TIM_Base_SetConfig+0x30>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800710e:	d007      	beq.n	8007120 <TIM_Base_SetConfig+0x30>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a26      	ldr	r2, [pc, #152]	; (80071ac <TIM_Base_SetConfig+0xbc>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d003      	beq.n	8007120 <TIM_Base_SetConfig+0x30>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a25      	ldr	r2, [pc, #148]	; (80071b0 <TIM_Base_SetConfig+0xc0>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d108      	bne.n	8007132 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	4313      	orrs	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a1c      	ldr	r2, [pc, #112]	; (80071a8 <TIM_Base_SetConfig+0xb8>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d00b      	beq.n	8007152 <TIM_Base_SetConfig+0x62>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007140:	d007      	beq.n	8007152 <TIM_Base_SetConfig+0x62>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a19      	ldr	r2, [pc, #100]	; (80071ac <TIM_Base_SetConfig+0xbc>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d003      	beq.n	8007152 <TIM_Base_SetConfig+0x62>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a18      	ldr	r2, [pc, #96]	; (80071b0 <TIM_Base_SetConfig+0xc0>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d108      	bne.n	8007164 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	4313      	orrs	r3, r2
 8007162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	4313      	orrs	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	689a      	ldr	r2, [r3, #8]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a07      	ldr	r2, [pc, #28]	; (80071a8 <TIM_Base_SetConfig+0xb8>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d103      	bne.n	8007198 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	691a      	ldr	r2, [r3, #16]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	615a      	str	r2, [r3, #20]
}
 800719e:	bf00      	nop
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bc80      	pop	{r7}
 80071a6:	4770      	bx	lr
 80071a8:	40012c00 	.word	0x40012c00
 80071ac:	40000400 	.word	0x40000400
 80071b0:	40000800 	.word	0x40000800

080071b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b087      	sub	sp, #28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a1b      	ldr	r3, [r3, #32]
 80071c8:	f023 0201 	bic.w	r2, r3, #1
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 0303 	bic.w	r3, r3, #3
 80071ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f023 0302 	bic.w	r3, r3, #2
 80071fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	4313      	orrs	r3, r2
 8007206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a1c      	ldr	r2, [pc, #112]	; (800727c <TIM_OC1_SetConfig+0xc8>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d10c      	bne.n	800722a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f023 0308 	bic.w	r3, r3, #8
 8007216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	4313      	orrs	r3, r2
 8007220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f023 0304 	bic.w	r3, r3, #4
 8007228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a13      	ldr	r2, [pc, #76]	; (800727c <TIM_OC1_SetConfig+0xc8>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d111      	bne.n	8007256 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	4313      	orrs	r3, r2
 800724a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	4313      	orrs	r3, r2
 8007254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	621a      	str	r2, [r3, #32]
}
 8007270:	bf00      	nop
 8007272:	371c      	adds	r7, #28
 8007274:	46bd      	mov	sp, r7
 8007276:	bc80      	pop	{r7}
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	40012c00 	.word	0x40012c00

08007280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007280:	b480      	push	{r7}
 8007282:	b087      	sub	sp, #28
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a1b      	ldr	r3, [r3, #32]
 8007294:	f023 0210 	bic.w	r2, r3, #16
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	021b      	lsls	r3, r3, #8
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f023 0320 	bic.w	r3, r3, #32
 80072ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	011b      	lsls	r3, r3, #4
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a1d      	ldr	r2, [pc, #116]	; (8007350 <TIM_OC2_SetConfig+0xd0>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d10d      	bne.n	80072fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	011b      	lsls	r3, r3, #4
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a14      	ldr	r2, [pc, #80]	; (8007350 <TIM_OC2_SetConfig+0xd0>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d113      	bne.n	800732c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800730a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007312:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	4313      	orrs	r3, r2
 800731e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	4313      	orrs	r3, r2
 800732a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	621a      	str	r2, [r3, #32]
}
 8007346:	bf00      	nop
 8007348:	371c      	adds	r7, #28
 800734a:	46bd      	mov	sp, r7
 800734c:	bc80      	pop	{r7}
 800734e:	4770      	bx	lr
 8007350:	40012c00 	.word	0x40012c00

08007354 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007354:	b480      	push	{r7}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f023 0303 	bic.w	r3, r3, #3
 800738a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	4313      	orrs	r3, r2
 8007394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800739c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	021b      	lsls	r3, r3, #8
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a1d      	ldr	r2, [pc, #116]	; (8007424 <TIM_OC3_SetConfig+0xd0>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d10d      	bne.n	80073ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	021b      	lsls	r3, r3, #8
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a14      	ldr	r2, [pc, #80]	; (8007424 <TIM_OC3_SetConfig+0xd0>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d113      	bne.n	80073fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	011b      	lsls	r3, r3, #4
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	011b      	lsls	r3, r3, #4
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	621a      	str	r2, [r3, #32]
}
 8007418:	bf00      	nop
 800741a:	371c      	adds	r7, #28
 800741c:	46bd      	mov	sp, r7
 800741e:	bc80      	pop	{r7}
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	40012c00 	.word	0x40012c00

08007428 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007428:	b480      	push	{r7}
 800742a:	b087      	sub	sp, #28
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800745e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	021b      	lsls	r3, r3, #8
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	4313      	orrs	r3, r2
 800746a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007472:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	031b      	lsls	r3, r3, #12
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	4313      	orrs	r3, r2
 800747e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a0f      	ldr	r2, [pc, #60]	; (80074c0 <TIM_OC4_SetConfig+0x98>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d109      	bne.n	800749c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800748e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	019b      	lsls	r3, r3, #6
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	4313      	orrs	r3, r2
 800749a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	621a      	str	r2, [r3, #32]
}
 80074b6:	bf00      	nop
 80074b8:	371c      	adds	r7, #28
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bc80      	pop	{r7}
 80074be:	4770      	bx	lr
 80074c0:	40012c00 	.word	0x40012c00

080074c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b087      	sub	sp, #28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	f023 0201 	bic.w	r2, r3, #1
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f023 030a 	bic.w	r3, r3, #10
 8007500:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	4313      	orrs	r3, r2
 8007508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	621a      	str	r2, [r3, #32]
}
 8007516:	bf00      	nop
 8007518:	371c      	adds	r7, #28
 800751a:	46bd      	mov	sp, r7
 800751c:	bc80      	pop	{r7}
 800751e:	4770      	bx	lr

08007520 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	f023 0210 	bic.w	r2, r3, #16
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800754a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	031b      	lsls	r3, r3, #12
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	4313      	orrs	r3, r2
 8007554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800755c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	011b      	lsls	r3, r3, #4
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	4313      	orrs	r3, r2
 8007566:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	697a      	ldr	r2, [r7, #20]
 8007572:	621a      	str	r2, [r3, #32]
}
 8007574:	bf00      	nop
 8007576:	371c      	adds	r7, #28
 8007578:	46bd      	mov	sp, r7
 800757a:	bc80      	pop	{r7}
 800757c:	4770      	bx	lr

0800757e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800757e:	b480      	push	{r7}
 8007580:	b085      	sub	sp, #20
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007594:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	4313      	orrs	r3, r2
 800759c:	f043 0307 	orr.w	r3, r3, #7
 80075a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	609a      	str	r2, [r3, #8]
}
 80075a8:	bf00      	nop
 80075aa:	3714      	adds	r7, #20
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bc80      	pop	{r7}
 80075b0:	4770      	bx	lr

080075b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b087      	sub	sp, #28
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	60f8      	str	r0, [r7, #12]
 80075ba:	60b9      	str	r1, [r7, #8]
 80075bc:	607a      	str	r2, [r7, #4]
 80075be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	021a      	lsls	r2, r3, #8
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	431a      	orrs	r2, r3
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	4313      	orrs	r3, r2
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	4313      	orrs	r3, r2
 80075de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	609a      	str	r2, [r3, #8]
}
 80075e6:	bf00      	nop
 80075e8:	371c      	adds	r7, #28
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bc80      	pop	{r7}
 80075ee:	4770      	bx	lr

080075f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b087      	sub	sp, #28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	f003 031f 	and.w	r3, r3, #31
 8007602:	2201      	movs	r2, #1
 8007604:	fa02 f303 	lsl.w	r3, r2, r3
 8007608:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6a1a      	ldr	r2, [r3, #32]
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	43db      	mvns	r3, r3
 8007612:	401a      	ands	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6a1a      	ldr	r2, [r3, #32]
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f003 031f 	and.w	r3, r3, #31
 8007622:	6879      	ldr	r1, [r7, #4]
 8007624:	fa01 f303 	lsl.w	r3, r1, r3
 8007628:	431a      	orrs	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	621a      	str	r2, [r3, #32]
}
 800762e:	bf00      	nop
 8007630:	371c      	adds	r7, #28
 8007632:	46bd      	mov	sp, r7
 8007634:	bc80      	pop	{r7}
 8007636:	4770      	bx	lr

08007638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007648:	2b01      	cmp	r3, #1
 800764a:	d101      	bne.n	8007650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800764c:	2302      	movs	r3, #2
 800764e:	e046      	b.n	80076de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2202      	movs	r2, #2
 800765c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007676:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	4313      	orrs	r3, r2
 8007680:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a16      	ldr	r2, [pc, #88]	; (80076e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d00e      	beq.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800769c:	d009      	beq.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a12      	ldr	r2, [pc, #72]	; (80076ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d004      	beq.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a10      	ldr	r2, [pc, #64]	; (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d10c      	bne.n	80076cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bc80      	pop	{r7}
 80076e6:	4770      	bx	lr
 80076e8:	40012c00 	.word	0x40012c00
 80076ec:	40000400 	.word	0x40000400
 80076f0:	40000800 	.word	0x40000800

080076f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007708:	2b01      	cmp	r3, #1
 800770a:	d101      	bne.n	8007710 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800770c:	2302      	movs	r3, #2
 800770e:	e03d      	b.n	800778c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	4313      	orrs	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	4313      	orrs	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	4313      	orrs	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4313      	orrs	r3, r2
 800774e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	4313      	orrs	r3, r2
 800775c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	4313      	orrs	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	4313      	orrs	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3714      	adds	r7, #20
 8007790:	46bd      	mov	sp, r7
 8007792:	bc80      	pop	{r7}
 8007794:	4770      	bx	lr

08007796 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007796:	b480      	push	{r7}
 8007798:	b083      	sub	sp, #12
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800779e:	bf00      	nop
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bc80      	pop	{r7}
 80077a6:	4770      	bx	lr

080077a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bc80      	pop	{r7}
 80077b8:	4770      	bx	lr

080077ba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b082      	sub	sp, #8
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e042      	b.n	8007852 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d106      	bne.n	80077e6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7fa fd23 	bl	800222c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2224      	movs	r2, #36	; 0x24
 80077ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68da      	ldr	r2, [r3, #12]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fdc6 	bl	8008390 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	691a      	ldr	r2, [r3, #16]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007812:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	695a      	ldr	r2, [r3, #20]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007822:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68da      	ldr	r2, [r3, #12]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007832:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2220      	movs	r2, #32
 800783e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2220      	movs	r2, #32
 8007846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b08a      	sub	sp, #40	; 0x28
 800785e:	af02      	add	r7, sp, #8
 8007860:	60f8      	str	r0, [r7, #12]
 8007862:	60b9      	str	r1, [r7, #8]
 8007864:	603b      	str	r3, [r7, #0]
 8007866:	4613      	mov	r3, r2
 8007868:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800786a:	2300      	movs	r3, #0
 800786c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b20      	cmp	r3, #32
 8007878:	d16d      	bne.n	8007956 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <HAL_UART_Transmit+0x2c>
 8007880:	88fb      	ldrh	r3, [r7, #6]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e066      	b.n	8007958 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2221      	movs	r2, #33	; 0x21
 8007894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007898:	f7fa ff00 	bl	800269c <HAL_GetTick>
 800789c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	88fa      	ldrh	r2, [r7, #6]
 80078a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	88fa      	ldrh	r2, [r7, #6]
 80078a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078b2:	d108      	bne.n	80078c6 <HAL_UART_Transmit+0x6c>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d104      	bne.n	80078c6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80078bc:	2300      	movs	r3, #0
 80078be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	61bb      	str	r3, [r7, #24]
 80078c4:	e003      	b.n	80078ce <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078ca:	2300      	movs	r3, #0
 80078cc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80078ce:	e02a      	b.n	8007926 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	2200      	movs	r2, #0
 80078d8:	2180      	movs	r1, #128	; 0x80
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 fb15 	bl	8007f0a <UART_WaitOnFlagUntilTimeout>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e036      	b.n	8007958 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10b      	bne.n	8007908 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	881b      	ldrh	r3, [r3, #0]
 80078f4:	461a      	mov	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078fe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	3302      	adds	r3, #2
 8007904:	61bb      	str	r3, [r7, #24]
 8007906:	e007      	b.n	8007918 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	781a      	ldrb	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	3301      	adds	r3, #1
 8007916:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800791c:	b29b      	uxth	r3, r3
 800791e:	3b01      	subs	r3, #1
 8007920:	b29a      	uxth	r2, r3
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800792a:	b29b      	uxth	r3, r3
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1cf      	bne.n	80078d0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	2200      	movs	r2, #0
 8007938:	2140      	movs	r1, #64	; 0x40
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f000 fae5 	bl	8007f0a <UART_WaitOnFlagUntilTimeout>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e006      	b.n	8007958 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2220      	movs	r2, #32
 800794e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	e000      	b.n	8007958 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007956:	2302      	movs	r3, #2
  }
}
 8007958:	4618      	mov	r0, r3
 800795a:	3720      	adds	r7, #32
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	4613      	mov	r3, r2
 800796c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b20      	cmp	r3, #32
 8007978:	d112      	bne.n	80079a0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <HAL_UART_Receive_IT+0x26>
 8007980:	88fb      	ldrh	r3, [r7, #6]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e00b      	b.n	80079a2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007990:	88fb      	ldrh	r3, [r7, #6]
 8007992:	461a      	mov	r2, r3
 8007994:	68b9      	ldr	r1, [r7, #8]
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f000 fb25 	bl	8007fe6 <UART_Start_Receive_IT>
 800799c:	4603      	mov	r3, r0
 800799e:	e000      	b.n	80079a2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80079a0:	2302      	movs	r3, #2
  }
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b0ba      	sub	sp, #232	; 0xe8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80079d8:	2300      	movs	r3, #0
 80079da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079e2:	f003 030f 	and.w	r3, r3, #15
 80079e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80079ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10f      	bne.n	8007a12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f6:	f003 0320 	and.w	r3, r3, #32
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d009      	beq.n	8007a12 <HAL_UART_IRQHandler+0x66>
 80079fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a02:	f003 0320 	and.w	r3, r3, #32
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fc01 	bl	8008212 <UART_Receive_IT>
      return;
 8007a10:	e25b      	b.n	8007eca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 80de 	beq.w	8007bd8 <HAL_UART_IRQHandler+0x22c>
 8007a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d106      	bne.n	8007a36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 80d1 	beq.w	8007bd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00b      	beq.n	8007a5a <HAL_UART_IRQHandler+0xae>
 8007a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d005      	beq.n	8007a5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a52:	f043 0201 	orr.w	r2, r3, #1
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a5e:	f003 0304 	and.w	r3, r3, #4
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00b      	beq.n	8007a7e <HAL_UART_IRQHandler+0xd2>
 8007a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d005      	beq.n	8007a7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a76:	f043 0202 	orr.w	r2, r3, #2
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a82:	f003 0302 	and.w	r3, r3, #2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00b      	beq.n	8007aa2 <HAL_UART_IRQHandler+0xf6>
 8007a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d005      	beq.n	8007aa2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a9a:	f043 0204 	orr.w	r2, r3, #4
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa6:	f003 0308 	and.w	r3, r3, #8
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d011      	beq.n	8007ad2 <HAL_UART_IRQHandler+0x126>
 8007aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab2:	f003 0320 	and.w	r3, r3, #32
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d105      	bne.n	8007ac6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d005      	beq.n	8007ad2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aca:	f043 0208 	orr.w	r2, r3, #8
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 81f2 	beq.w	8007ec0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae0:	f003 0320 	and.w	r3, r3, #32
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d008      	beq.n	8007afa <HAL_UART_IRQHandler+0x14e>
 8007ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aec:	f003 0320 	and.w	r3, r3, #32
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d002      	beq.n	8007afa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fb8c 	bl	8008212 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	bf14      	ite	ne
 8007b08:	2301      	movne	r3, #1
 8007b0a:	2300      	moveq	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b16:	f003 0308 	and.w	r3, r3, #8
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d103      	bne.n	8007b26 <HAL_UART_IRQHandler+0x17a>
 8007b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d04f      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fa96 	bl	8008058 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d041      	beq.n	8007bbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3314      	adds	r3, #20
 8007b40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b48:	e853 3f00 	ldrex	r3, [r3]
 8007b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3314      	adds	r3, #20
 8007b62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b76:	e841 2300 	strex	r3, r2, [r1]
 8007b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1d9      	bne.n	8007b3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d013      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b92:	4a7e      	ldr	r2, [pc, #504]	; (8007d8c <HAL_UART_IRQHandler+0x3e0>)
 8007b94:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fb fba4 	bl	80032e8 <HAL_DMA_Abort_IT>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d016      	beq.n	8007bd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb4:	e00e      	b.n	8007bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f993 	bl	8007ee2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bbc:	e00a      	b.n	8007bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f98f 	bl	8007ee2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bc4:	e006      	b.n	8007bd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f98b 	bl	8007ee2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007bd2:	e175      	b.n	8007ec0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd4:	bf00      	nop
    return;
 8007bd6:	e173      	b.n	8007ec0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	f040 814f 	bne.w	8007e80 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be6:	f003 0310 	and.w	r3, r3, #16
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 8148 	beq.w	8007e80 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf4:	f003 0310 	and.w	r3, r3, #16
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 8141 	beq.w	8007e80 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bfe:	2300      	movs	r3, #0
 8007c00:	60bb      	str	r3, [r7, #8]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	60bb      	str	r3, [r7, #8]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	60bb      	str	r3, [r7, #8]
 8007c12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 80b6 	beq.w	8007d90 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 8145 	beq.w	8007ec4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c42:	429a      	cmp	r2, r3
 8007c44:	f080 813e 	bcs.w	8007ec4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	2b20      	cmp	r3, #32
 8007c58:	f000 8088 	beq.w	8007d6c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	330c      	adds	r3, #12
 8007c62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c6a:	e853 3f00 	ldrex	r3, [r3]
 8007c6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	330c      	adds	r3, #12
 8007c84:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007c88:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c90:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c94:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c98:	e841 2300 	strex	r3, r2, [r1]
 8007c9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1d9      	bne.n	8007c5c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3314      	adds	r3, #20
 8007cae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cb2:	e853 3f00 	ldrex	r3, [r3]
 8007cb6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cba:	f023 0301 	bic.w	r3, r3, #1
 8007cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3314      	adds	r3, #20
 8007cc8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ccc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cd0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007cd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cd8:	e841 2300 	strex	r3, r2, [r1]
 8007cdc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007cde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1e1      	bne.n	8007ca8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3314      	adds	r3, #20
 8007cea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cee:	e853 3f00 	ldrex	r3, [r3]
 8007cf2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3314      	adds	r3, #20
 8007d04:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d08:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d10:	e841 2300 	strex	r3, r2, [r1]
 8007d14:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1e3      	bne.n	8007ce4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	330c      	adds	r3, #12
 8007d30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d34:	e853 3f00 	ldrex	r3, [r3]
 8007d38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d3c:	f023 0310 	bic.w	r3, r3, #16
 8007d40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	330c      	adds	r3, #12
 8007d4a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d4e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d50:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d56:	e841 2300 	strex	r3, r2, [r1]
 8007d5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1e3      	bne.n	8007d2a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fb fa82 	bl	8003270 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2202      	movs	r2, #2
 8007d70:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	4619      	mov	r1, r3
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f8b6 	bl	8007ef4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d88:	e09c      	b.n	8007ec4 <HAL_UART_IRQHandler+0x518>
 8007d8a:	bf00      	nop
 8007d8c:	0800811d 	.word	0x0800811d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f000 808e 	beq.w	8007ec8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007dac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f000 8089 	beq.w	8007ec8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	330c      	adds	r3, #12
 8007dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc0:	e853 3f00 	ldrex	r3, [r3]
 8007dc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	330c      	adds	r3, #12
 8007dd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007dda:	647a      	str	r2, [r7, #68]	; 0x44
 8007ddc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007de0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007de2:	e841 2300 	strex	r3, r2, [r1]
 8007de6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1e3      	bne.n	8007db6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	3314      	adds	r3, #20
 8007df4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	e853 3f00 	ldrex	r3, [r3]
 8007dfc:	623b      	str	r3, [r7, #32]
   return(result);
 8007dfe:	6a3b      	ldr	r3, [r7, #32]
 8007e00:	f023 0301 	bic.w	r3, r3, #1
 8007e04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3314      	adds	r3, #20
 8007e0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e12:	633a      	str	r2, [r7, #48]	; 0x30
 8007e14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e1a:	e841 2300 	strex	r3, r2, [r1]
 8007e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1e3      	bne.n	8007dee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2220      	movs	r2, #32
 8007e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	330c      	adds	r3, #12
 8007e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	e853 3f00 	ldrex	r3, [r3]
 8007e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f023 0310 	bic.w	r3, r3, #16
 8007e4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	330c      	adds	r3, #12
 8007e54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e58:	61fa      	str	r2, [r7, #28]
 8007e5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5c:	69b9      	ldr	r1, [r7, #24]
 8007e5e:	69fa      	ldr	r2, [r7, #28]
 8007e60:	e841 2300 	strex	r3, r2, [r1]
 8007e64:	617b      	str	r3, [r7, #20]
   return(result);
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e3      	bne.n	8007e34 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f83b 	bl	8007ef4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e7e:	e023      	b.n	8007ec8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d009      	beq.n	8007ea0 <HAL_UART_IRQHandler+0x4f4>
 8007e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d003      	beq.n	8007ea0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f953 	bl	8008144 <UART_Transmit_IT>
    return;
 8007e9e:	e014      	b.n	8007eca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00e      	beq.n	8007eca <HAL_UART_IRQHandler+0x51e>
 8007eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d008      	beq.n	8007eca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f992 	bl	80081e2 <UART_EndTransmit_IT>
    return;
 8007ebe:	e004      	b.n	8007eca <HAL_UART_IRQHandler+0x51e>
    return;
 8007ec0:	bf00      	nop
 8007ec2:	e002      	b.n	8007eca <HAL_UART_IRQHandler+0x51e>
      return;
 8007ec4:	bf00      	nop
 8007ec6:	e000      	b.n	8007eca <HAL_UART_IRQHandler+0x51e>
      return;
 8007ec8:	bf00      	nop
  }
}
 8007eca:	37e8      	adds	r7, #232	; 0xe8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bc80      	pop	{r7}
 8007ee0:	4770      	bx	lr

08007ee2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b083      	sub	sp, #12
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bc80      	pop	{r7}
 8007ef2:	4770      	bx	lr

08007ef4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	460b      	mov	r3, r1
 8007efe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bc80      	pop	{r7}
 8007f08:	4770      	bx	lr

08007f0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b090      	sub	sp, #64	; 0x40
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	60f8      	str	r0, [r7, #12]
 8007f12:	60b9      	str	r1, [r7, #8]
 8007f14:	603b      	str	r3, [r7, #0]
 8007f16:	4613      	mov	r3, r2
 8007f18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f1a:	e050      	b.n	8007fbe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f22:	d04c      	beq.n	8007fbe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d007      	beq.n	8007f3a <UART_WaitOnFlagUntilTimeout+0x30>
 8007f2a:	f7fa fbb7 	bl	800269c <HAL_GetTick>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d241      	bcs.n	8007fbe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	330c      	adds	r3, #12
 8007f40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f44:	e853 3f00 	ldrex	r3, [r3]
 8007f48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	330c      	adds	r3, #12
 8007f58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f5a:	637a      	str	r2, [r7, #52]	; 0x34
 8007f5c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f62:	e841 2300 	strex	r3, r2, [r1]
 8007f66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1e5      	bne.n	8007f3a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	3314      	adds	r3, #20
 8007f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	e853 3f00 	ldrex	r3, [r3]
 8007f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	f023 0301 	bic.w	r3, r3, #1
 8007f84:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3314      	adds	r3, #20
 8007f8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f8e:	623a      	str	r2, [r7, #32]
 8007f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f92:	69f9      	ldr	r1, [r7, #28]
 8007f94:	6a3a      	ldr	r2, [r7, #32]
 8007f96:	e841 2300 	strex	r3, r2, [r1]
 8007f9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1e5      	bne.n	8007f6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2220      	movs	r2, #32
 8007fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2220      	movs	r2, #32
 8007fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e00f      	b.n	8007fde <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	bf0c      	ite	eq
 8007fce:	2301      	moveq	r3, #1
 8007fd0:	2300      	movne	r3, #0
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	79fb      	ldrb	r3, [r7, #7]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d09f      	beq.n	8007f1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3740      	adds	r7, #64	; 0x40
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b085      	sub	sp, #20
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	60f8      	str	r0, [r7, #12]
 8007fee:	60b9      	str	r1, [r7, #8]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	88fa      	ldrh	r2, [r7, #6]
 8007ffe:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	88fa      	ldrh	r2, [r7, #6]
 8008004:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2222      	movs	r2, #34	; 0x22
 8008010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d007      	beq.n	800802c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68da      	ldr	r2, [r3, #12]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800802a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	695a      	ldr	r2, [r3, #20]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f042 0201 	orr.w	r2, r2, #1
 800803a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68da      	ldr	r2, [r3, #12]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f042 0220 	orr.w	r2, r2, #32
 800804a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3714      	adds	r7, #20
 8008052:	46bd      	mov	sp, r7
 8008054:	bc80      	pop	{r7}
 8008056:	4770      	bx	lr

08008058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008058:	b480      	push	{r7}
 800805a:	b095      	sub	sp, #84	; 0x54
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	330c      	adds	r3, #12
 8008066:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800806a:	e853 3f00 	ldrex	r3, [r3]
 800806e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008072:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	330c      	adds	r3, #12
 800807e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008080:	643a      	str	r2, [r7, #64]	; 0x40
 8008082:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008084:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008086:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008088:	e841 2300 	strex	r3, r2, [r1]
 800808c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800808e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1e5      	bne.n	8008060 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	3314      	adds	r3, #20
 800809a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	e853 3f00 	ldrex	r3, [r3]
 80080a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	f023 0301 	bic.w	r3, r3, #1
 80080aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3314      	adds	r3, #20
 80080b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080bc:	e841 2300 	strex	r3, r2, [r1]
 80080c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1e5      	bne.n	8008094 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d119      	bne.n	8008104 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	330c      	adds	r3, #12
 80080d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	e853 3f00 	ldrex	r3, [r3]
 80080de:	60bb      	str	r3, [r7, #8]
   return(result);
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	f023 0310 	bic.w	r3, r3, #16
 80080e6:	647b      	str	r3, [r7, #68]	; 0x44
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	330c      	adds	r3, #12
 80080ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080f0:	61ba      	str	r2, [r7, #24]
 80080f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f4:	6979      	ldr	r1, [r7, #20]
 80080f6:	69ba      	ldr	r2, [r7, #24]
 80080f8:	e841 2300 	strex	r3, r2, [r1]
 80080fc:	613b      	str	r3, [r7, #16]
   return(result);
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1e5      	bne.n	80080d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2220      	movs	r2, #32
 8008108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008112:	bf00      	nop
 8008114:	3754      	adds	r7, #84	; 0x54
 8008116:	46bd      	mov	sp, r7
 8008118:	bc80      	pop	{r7}
 800811a:	4770      	bx	lr

0800811c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008128:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f7ff fed3 	bl	8007ee2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800813c:	bf00      	nop
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008152:	b2db      	uxtb	r3, r3
 8008154:	2b21      	cmp	r3, #33	; 0x21
 8008156:	d13e      	bne.n	80081d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008160:	d114      	bne.n	800818c <UART_Transmit_IT+0x48>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d110      	bne.n	800818c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	461a      	mov	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800817e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6a1b      	ldr	r3, [r3, #32]
 8008184:	1c9a      	adds	r2, r3, #2
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	621a      	str	r2, [r3, #32]
 800818a:	e008      	b.n	800819e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a1b      	ldr	r3, [r3, #32]
 8008190:	1c59      	adds	r1, r3, #1
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	6211      	str	r1, [r2, #32]
 8008196:	781a      	ldrb	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	3b01      	subs	r3, #1
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	4619      	mov	r1, r3
 80081ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10f      	bne.n	80081d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68da      	ldr	r2, [r3, #12]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68da      	ldr	r2, [r3, #12]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80081d2:	2300      	movs	r3, #0
 80081d4:	e000      	b.n	80081d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80081d6:	2302      	movs	r3, #2
  }
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	bc80      	pop	{r7}
 80081e0:	4770      	bx	lr

080081e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b082      	sub	sp, #8
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68da      	ldr	r2, [r3, #12]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2220      	movs	r2, #32
 80081fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7ff fe64 	bl	8007ed0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b08c      	sub	sp, #48	; 0x30
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b22      	cmp	r3, #34	; 0x22
 8008224:	f040 80ae 	bne.w	8008384 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008230:	d117      	bne.n	8008262 <UART_Receive_IT+0x50>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d113      	bne.n	8008262 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800823a:	2300      	movs	r3, #0
 800823c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008242:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	b29b      	uxth	r3, r3
 800824c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008250:	b29a      	uxth	r2, r3
 8008252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008254:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800825a:	1c9a      	adds	r2, r3, #2
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	629a      	str	r2, [r3, #40]	; 0x28
 8008260:	e026      	b.n	80082b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008266:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008268:	2300      	movs	r3, #0
 800826a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008274:	d007      	beq.n	8008286 <UART_Receive_IT+0x74>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10a      	bne.n	8008294 <UART_Receive_IT+0x82>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d106      	bne.n	8008294 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	b2da      	uxtb	r2, r3
 800828e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008290:	701a      	strb	r2, [r3, #0]
 8008292:	e008      	b.n	80082a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	b2db      	uxtb	r3, r3
 800829c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082aa:	1c5a      	adds	r2, r3, #1
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	3b01      	subs	r3, #1
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	4619      	mov	r1, r3
 80082be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d15d      	bne.n	8008380 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68da      	ldr	r2, [r3, #12]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f022 0220 	bic.w	r2, r2, #32
 80082d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68da      	ldr	r2, [r3, #12]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	695a      	ldr	r2, [r3, #20]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f022 0201 	bic.w	r2, r2, #1
 80082f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2220      	movs	r2, #32
 80082f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008306:	2b01      	cmp	r3, #1
 8008308:	d135      	bne.n	8008376 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	330c      	adds	r3, #12
 8008316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	e853 3f00 	ldrex	r3, [r3]
 800831e:	613b      	str	r3, [r7, #16]
   return(result);
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	f023 0310 	bic.w	r3, r3, #16
 8008326:	627b      	str	r3, [r7, #36]	; 0x24
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	330c      	adds	r3, #12
 800832e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008330:	623a      	str	r2, [r7, #32]
 8008332:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008334:	69f9      	ldr	r1, [r7, #28]
 8008336:	6a3a      	ldr	r2, [r7, #32]
 8008338:	e841 2300 	strex	r3, r2, [r1]
 800833c:	61bb      	str	r3, [r7, #24]
   return(result);
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1e5      	bne.n	8008310 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 0310 	and.w	r3, r3, #16
 800834e:	2b10      	cmp	r3, #16
 8008350:	d10a      	bne.n	8008368 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008352:	2300      	movs	r3, #0
 8008354:	60fb      	str	r3, [r7, #12]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	60fb      	str	r3, [r7, #12]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	60fb      	str	r3, [r7, #12]
 8008366:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800836c:	4619      	mov	r1, r3
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7ff fdc0 	bl	8007ef4 <HAL_UARTEx_RxEventCallback>
 8008374:	e002      	b.n	800837c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7f8 fd0e 	bl	8000d98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800837c:	2300      	movs	r3, #0
 800837e:	e002      	b.n	8008386 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008380:	2300      	movs	r3, #0
 8008382:	e000      	b.n	8008386 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008384:	2302      	movs	r3, #2
  }
}
 8008386:	4618      	mov	r0, r3
 8008388:	3730      	adds	r7, #48	; 0x30
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
	...

08008390 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68da      	ldr	r2, [r3, #12]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	689a      	ldr	r2, [r3, #8]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	431a      	orrs	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	4313      	orrs	r3, r2
 80083be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80083ca:	f023 030c 	bic.w	r3, r3, #12
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	6812      	ldr	r2, [r2, #0]
 80083d2:	68b9      	ldr	r1, [r7, #8]
 80083d4:	430b      	orrs	r3, r1
 80083d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	695b      	ldr	r3, [r3, #20]
 80083de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	699a      	ldr	r2, [r3, #24]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	430a      	orrs	r2, r1
 80083ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a2c      	ldr	r2, [pc, #176]	; (80084a4 <UART_SetConfig+0x114>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d103      	bne.n	8008400 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80083f8:	f7fd fd20 	bl	8005e3c <HAL_RCC_GetPCLK2Freq>
 80083fc:	60f8      	str	r0, [r7, #12]
 80083fe:	e002      	b.n	8008406 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008400:	f7fd fd08 	bl	8005e14 <HAL_RCC_GetPCLK1Freq>
 8008404:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	4613      	mov	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4413      	add	r3, r2
 800840e:	009a      	lsls	r2, r3, #2
 8008410:	441a      	add	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	fbb2 f3f3 	udiv	r3, r2, r3
 800841c:	4a22      	ldr	r2, [pc, #136]	; (80084a8 <UART_SetConfig+0x118>)
 800841e:	fba2 2303 	umull	r2, r3, r2, r3
 8008422:	095b      	lsrs	r3, r3, #5
 8008424:	0119      	lsls	r1, r3, #4
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	4613      	mov	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	009a      	lsls	r2, r3, #2
 8008430:	441a      	add	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	fbb2 f2f3 	udiv	r2, r2, r3
 800843c:	4b1a      	ldr	r3, [pc, #104]	; (80084a8 <UART_SetConfig+0x118>)
 800843e:	fba3 0302 	umull	r0, r3, r3, r2
 8008442:	095b      	lsrs	r3, r3, #5
 8008444:	2064      	movs	r0, #100	; 0x64
 8008446:	fb00 f303 	mul.w	r3, r0, r3
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	011b      	lsls	r3, r3, #4
 800844e:	3332      	adds	r3, #50	; 0x32
 8008450:	4a15      	ldr	r2, [pc, #84]	; (80084a8 <UART_SetConfig+0x118>)
 8008452:	fba2 2303 	umull	r2, r3, r2, r3
 8008456:	095b      	lsrs	r3, r3, #5
 8008458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800845c:	4419      	add	r1, r3
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	4613      	mov	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4413      	add	r3, r2
 8008466:	009a      	lsls	r2, r3, #2
 8008468:	441a      	add	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	fbb2 f2f3 	udiv	r2, r2, r3
 8008474:	4b0c      	ldr	r3, [pc, #48]	; (80084a8 <UART_SetConfig+0x118>)
 8008476:	fba3 0302 	umull	r0, r3, r3, r2
 800847a:	095b      	lsrs	r3, r3, #5
 800847c:	2064      	movs	r0, #100	; 0x64
 800847e:	fb00 f303 	mul.w	r3, r0, r3
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	011b      	lsls	r3, r3, #4
 8008486:	3332      	adds	r3, #50	; 0x32
 8008488:	4a07      	ldr	r2, [pc, #28]	; (80084a8 <UART_SetConfig+0x118>)
 800848a:	fba2 2303 	umull	r2, r3, r2, r3
 800848e:	095b      	lsrs	r3, r3, #5
 8008490:	f003 020f 	and.w	r2, r3, #15
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	440a      	add	r2, r1
 800849a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800849c:	bf00      	nop
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	40013800 	.word	0x40013800
 80084a8:	51eb851f 	.word	0x51eb851f

080084ac <__errno>:
 80084ac:	4b01      	ldr	r3, [pc, #4]	; (80084b4 <__errno+0x8>)
 80084ae:	6818      	ldr	r0, [r3, #0]
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	2000001c 	.word	0x2000001c

080084b8 <__libc_init_array>:
 80084b8:	b570      	push	{r4, r5, r6, lr}
 80084ba:	2600      	movs	r6, #0
 80084bc:	4d0c      	ldr	r5, [pc, #48]	; (80084f0 <__libc_init_array+0x38>)
 80084be:	4c0d      	ldr	r4, [pc, #52]	; (80084f4 <__libc_init_array+0x3c>)
 80084c0:	1b64      	subs	r4, r4, r5
 80084c2:	10a4      	asrs	r4, r4, #2
 80084c4:	42a6      	cmp	r6, r4
 80084c6:	d109      	bne.n	80084dc <__libc_init_array+0x24>
 80084c8:	f002 fd2e 	bl	800af28 <_init>
 80084cc:	2600      	movs	r6, #0
 80084ce:	4d0a      	ldr	r5, [pc, #40]	; (80084f8 <__libc_init_array+0x40>)
 80084d0:	4c0a      	ldr	r4, [pc, #40]	; (80084fc <__libc_init_array+0x44>)
 80084d2:	1b64      	subs	r4, r4, r5
 80084d4:	10a4      	asrs	r4, r4, #2
 80084d6:	42a6      	cmp	r6, r4
 80084d8:	d105      	bne.n	80084e6 <__libc_init_array+0x2e>
 80084da:	bd70      	pop	{r4, r5, r6, pc}
 80084dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80084e0:	4798      	blx	r3
 80084e2:	3601      	adds	r6, #1
 80084e4:	e7ee      	b.n	80084c4 <__libc_init_array+0xc>
 80084e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ea:	4798      	blx	r3
 80084ec:	3601      	adds	r6, #1
 80084ee:	e7f2      	b.n	80084d6 <__libc_init_array+0x1e>
 80084f0:	0800b344 	.word	0x0800b344
 80084f4:	0800b344 	.word	0x0800b344
 80084f8:	0800b344 	.word	0x0800b344
 80084fc:	0800b348 	.word	0x0800b348

08008500 <memset>:
 8008500:	4603      	mov	r3, r0
 8008502:	4402      	add	r2, r0
 8008504:	4293      	cmp	r3, r2
 8008506:	d100      	bne.n	800850a <memset+0xa>
 8008508:	4770      	bx	lr
 800850a:	f803 1b01 	strb.w	r1, [r3], #1
 800850e:	e7f9      	b.n	8008504 <memset+0x4>

08008510 <__cvt>:
 8008510:	2b00      	cmp	r3, #0
 8008512:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008516:	461f      	mov	r7, r3
 8008518:	bfbb      	ittet	lt
 800851a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800851e:	461f      	movlt	r7, r3
 8008520:	2300      	movge	r3, #0
 8008522:	232d      	movlt	r3, #45	; 0x2d
 8008524:	b088      	sub	sp, #32
 8008526:	4614      	mov	r4, r2
 8008528:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800852a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800852c:	7013      	strb	r3, [r2, #0]
 800852e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008530:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008534:	f023 0820 	bic.w	r8, r3, #32
 8008538:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800853c:	d005      	beq.n	800854a <__cvt+0x3a>
 800853e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008542:	d100      	bne.n	8008546 <__cvt+0x36>
 8008544:	3501      	adds	r5, #1
 8008546:	2302      	movs	r3, #2
 8008548:	e000      	b.n	800854c <__cvt+0x3c>
 800854a:	2303      	movs	r3, #3
 800854c:	aa07      	add	r2, sp, #28
 800854e:	9204      	str	r2, [sp, #16]
 8008550:	aa06      	add	r2, sp, #24
 8008552:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008556:	e9cd 3500 	strd	r3, r5, [sp]
 800855a:	4622      	mov	r2, r4
 800855c:	463b      	mov	r3, r7
 800855e:	f000 fcc3 	bl	8008ee8 <_dtoa_r>
 8008562:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008566:	4606      	mov	r6, r0
 8008568:	d102      	bne.n	8008570 <__cvt+0x60>
 800856a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800856c:	07db      	lsls	r3, r3, #31
 800856e:	d522      	bpl.n	80085b6 <__cvt+0xa6>
 8008570:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008574:	eb06 0905 	add.w	r9, r6, r5
 8008578:	d110      	bne.n	800859c <__cvt+0x8c>
 800857a:	7833      	ldrb	r3, [r6, #0]
 800857c:	2b30      	cmp	r3, #48	; 0x30
 800857e:	d10a      	bne.n	8008596 <__cvt+0x86>
 8008580:	2200      	movs	r2, #0
 8008582:	2300      	movs	r3, #0
 8008584:	4620      	mov	r0, r4
 8008586:	4639      	mov	r1, r7
 8008588:	f7f8 fa0e 	bl	80009a8 <__aeabi_dcmpeq>
 800858c:	b918      	cbnz	r0, 8008596 <__cvt+0x86>
 800858e:	f1c5 0501 	rsb	r5, r5, #1
 8008592:	f8ca 5000 	str.w	r5, [sl]
 8008596:	f8da 3000 	ldr.w	r3, [sl]
 800859a:	4499      	add	r9, r3
 800859c:	2200      	movs	r2, #0
 800859e:	2300      	movs	r3, #0
 80085a0:	4620      	mov	r0, r4
 80085a2:	4639      	mov	r1, r7
 80085a4:	f7f8 fa00 	bl	80009a8 <__aeabi_dcmpeq>
 80085a8:	b108      	cbz	r0, 80085ae <__cvt+0x9e>
 80085aa:	f8cd 901c 	str.w	r9, [sp, #28]
 80085ae:	2230      	movs	r2, #48	; 0x30
 80085b0:	9b07      	ldr	r3, [sp, #28]
 80085b2:	454b      	cmp	r3, r9
 80085b4:	d307      	bcc.n	80085c6 <__cvt+0xb6>
 80085b6:	4630      	mov	r0, r6
 80085b8:	9b07      	ldr	r3, [sp, #28]
 80085ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80085bc:	1b9b      	subs	r3, r3, r6
 80085be:	6013      	str	r3, [r2, #0]
 80085c0:	b008      	add	sp, #32
 80085c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c6:	1c59      	adds	r1, r3, #1
 80085c8:	9107      	str	r1, [sp, #28]
 80085ca:	701a      	strb	r2, [r3, #0]
 80085cc:	e7f0      	b.n	80085b0 <__cvt+0xa0>

080085ce <__exponent>:
 80085ce:	4603      	mov	r3, r0
 80085d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085d2:	2900      	cmp	r1, #0
 80085d4:	f803 2b02 	strb.w	r2, [r3], #2
 80085d8:	bfb6      	itet	lt
 80085da:	222d      	movlt	r2, #45	; 0x2d
 80085dc:	222b      	movge	r2, #43	; 0x2b
 80085de:	4249      	neglt	r1, r1
 80085e0:	2909      	cmp	r1, #9
 80085e2:	7042      	strb	r2, [r0, #1]
 80085e4:	dd2b      	ble.n	800863e <__exponent+0x70>
 80085e6:	f10d 0407 	add.w	r4, sp, #7
 80085ea:	46a4      	mov	ip, r4
 80085ec:	270a      	movs	r7, #10
 80085ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80085f2:	460a      	mov	r2, r1
 80085f4:	46a6      	mov	lr, r4
 80085f6:	fb07 1516 	mls	r5, r7, r6, r1
 80085fa:	2a63      	cmp	r2, #99	; 0x63
 80085fc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008600:	4631      	mov	r1, r6
 8008602:	f104 34ff 	add.w	r4, r4, #4294967295
 8008606:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800860a:	dcf0      	bgt.n	80085ee <__exponent+0x20>
 800860c:	3130      	adds	r1, #48	; 0x30
 800860e:	f1ae 0502 	sub.w	r5, lr, #2
 8008612:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008616:	4629      	mov	r1, r5
 8008618:	1c44      	adds	r4, r0, #1
 800861a:	4561      	cmp	r1, ip
 800861c:	d30a      	bcc.n	8008634 <__exponent+0x66>
 800861e:	f10d 0209 	add.w	r2, sp, #9
 8008622:	eba2 020e 	sub.w	r2, r2, lr
 8008626:	4565      	cmp	r5, ip
 8008628:	bf88      	it	hi
 800862a:	2200      	movhi	r2, #0
 800862c:	4413      	add	r3, r2
 800862e:	1a18      	subs	r0, r3, r0
 8008630:	b003      	add	sp, #12
 8008632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008634:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008638:	f804 2f01 	strb.w	r2, [r4, #1]!
 800863c:	e7ed      	b.n	800861a <__exponent+0x4c>
 800863e:	2330      	movs	r3, #48	; 0x30
 8008640:	3130      	adds	r1, #48	; 0x30
 8008642:	7083      	strb	r3, [r0, #2]
 8008644:	70c1      	strb	r1, [r0, #3]
 8008646:	1d03      	adds	r3, r0, #4
 8008648:	e7f1      	b.n	800862e <__exponent+0x60>
	...

0800864c <_printf_float>:
 800864c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008650:	b091      	sub	sp, #68	; 0x44
 8008652:	460c      	mov	r4, r1
 8008654:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008658:	4616      	mov	r6, r2
 800865a:	461f      	mov	r7, r3
 800865c:	4605      	mov	r5, r0
 800865e:	f001 fa31 	bl	8009ac4 <_localeconv_r>
 8008662:	6803      	ldr	r3, [r0, #0]
 8008664:	4618      	mov	r0, r3
 8008666:	9309      	str	r3, [sp, #36]	; 0x24
 8008668:	f7f7 fd72 	bl	8000150 <strlen>
 800866c:	2300      	movs	r3, #0
 800866e:	930e      	str	r3, [sp, #56]	; 0x38
 8008670:	f8d8 3000 	ldr.w	r3, [r8]
 8008674:	900a      	str	r0, [sp, #40]	; 0x28
 8008676:	3307      	adds	r3, #7
 8008678:	f023 0307 	bic.w	r3, r3, #7
 800867c:	f103 0208 	add.w	r2, r3, #8
 8008680:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008684:	f8d4 b000 	ldr.w	fp, [r4]
 8008688:	f8c8 2000 	str.w	r2, [r8]
 800868c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008690:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008694:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008698:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800869c:	930b      	str	r3, [sp, #44]	; 0x2c
 800869e:	f04f 32ff 	mov.w	r2, #4294967295
 80086a2:	4640      	mov	r0, r8
 80086a4:	4b9c      	ldr	r3, [pc, #624]	; (8008918 <_printf_float+0x2cc>)
 80086a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086a8:	f7f8 f9b0 	bl	8000a0c <__aeabi_dcmpun>
 80086ac:	bb70      	cbnz	r0, 800870c <_printf_float+0xc0>
 80086ae:	f04f 32ff 	mov.w	r2, #4294967295
 80086b2:	4640      	mov	r0, r8
 80086b4:	4b98      	ldr	r3, [pc, #608]	; (8008918 <_printf_float+0x2cc>)
 80086b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086b8:	f7f8 f98a 	bl	80009d0 <__aeabi_dcmple>
 80086bc:	bb30      	cbnz	r0, 800870c <_printf_float+0xc0>
 80086be:	2200      	movs	r2, #0
 80086c0:	2300      	movs	r3, #0
 80086c2:	4640      	mov	r0, r8
 80086c4:	4651      	mov	r1, sl
 80086c6:	f7f8 f979 	bl	80009bc <__aeabi_dcmplt>
 80086ca:	b110      	cbz	r0, 80086d2 <_printf_float+0x86>
 80086cc:	232d      	movs	r3, #45	; 0x2d
 80086ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086d2:	4b92      	ldr	r3, [pc, #584]	; (800891c <_printf_float+0x2d0>)
 80086d4:	4892      	ldr	r0, [pc, #584]	; (8008920 <_printf_float+0x2d4>)
 80086d6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80086da:	bf94      	ite	ls
 80086dc:	4698      	movls	r8, r3
 80086de:	4680      	movhi	r8, r0
 80086e0:	2303      	movs	r3, #3
 80086e2:	f04f 0a00 	mov.w	sl, #0
 80086e6:	6123      	str	r3, [r4, #16]
 80086e8:	f02b 0304 	bic.w	r3, fp, #4
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	4633      	mov	r3, r6
 80086f0:	4621      	mov	r1, r4
 80086f2:	4628      	mov	r0, r5
 80086f4:	9700      	str	r7, [sp, #0]
 80086f6:	aa0f      	add	r2, sp, #60	; 0x3c
 80086f8:	f000 f9d4 	bl	8008aa4 <_printf_common>
 80086fc:	3001      	adds	r0, #1
 80086fe:	f040 8090 	bne.w	8008822 <_printf_float+0x1d6>
 8008702:	f04f 30ff 	mov.w	r0, #4294967295
 8008706:	b011      	add	sp, #68	; 0x44
 8008708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800870c:	4642      	mov	r2, r8
 800870e:	4653      	mov	r3, sl
 8008710:	4640      	mov	r0, r8
 8008712:	4651      	mov	r1, sl
 8008714:	f7f8 f97a 	bl	8000a0c <__aeabi_dcmpun>
 8008718:	b148      	cbz	r0, 800872e <_printf_float+0xe2>
 800871a:	f1ba 0f00 	cmp.w	sl, #0
 800871e:	bfb8      	it	lt
 8008720:	232d      	movlt	r3, #45	; 0x2d
 8008722:	4880      	ldr	r0, [pc, #512]	; (8008924 <_printf_float+0x2d8>)
 8008724:	bfb8      	it	lt
 8008726:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800872a:	4b7f      	ldr	r3, [pc, #508]	; (8008928 <_printf_float+0x2dc>)
 800872c:	e7d3      	b.n	80086d6 <_printf_float+0x8a>
 800872e:	6863      	ldr	r3, [r4, #4]
 8008730:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008734:	1c5a      	adds	r2, r3, #1
 8008736:	d142      	bne.n	80087be <_printf_float+0x172>
 8008738:	2306      	movs	r3, #6
 800873a:	6063      	str	r3, [r4, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	9206      	str	r2, [sp, #24]
 8008740:	aa0e      	add	r2, sp, #56	; 0x38
 8008742:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008746:	aa0d      	add	r2, sp, #52	; 0x34
 8008748:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800874c:	9203      	str	r2, [sp, #12]
 800874e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008752:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008756:	6023      	str	r3, [r4, #0]
 8008758:	6863      	ldr	r3, [r4, #4]
 800875a:	4642      	mov	r2, r8
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	4628      	mov	r0, r5
 8008760:	4653      	mov	r3, sl
 8008762:	910b      	str	r1, [sp, #44]	; 0x2c
 8008764:	f7ff fed4 	bl	8008510 <__cvt>
 8008768:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800876a:	4680      	mov	r8, r0
 800876c:	2947      	cmp	r1, #71	; 0x47
 800876e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008770:	d108      	bne.n	8008784 <_printf_float+0x138>
 8008772:	1cc8      	adds	r0, r1, #3
 8008774:	db02      	blt.n	800877c <_printf_float+0x130>
 8008776:	6863      	ldr	r3, [r4, #4]
 8008778:	4299      	cmp	r1, r3
 800877a:	dd40      	ble.n	80087fe <_printf_float+0x1b2>
 800877c:	f1a9 0902 	sub.w	r9, r9, #2
 8008780:	fa5f f989 	uxtb.w	r9, r9
 8008784:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008788:	d81f      	bhi.n	80087ca <_printf_float+0x17e>
 800878a:	464a      	mov	r2, r9
 800878c:	3901      	subs	r1, #1
 800878e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008792:	910d      	str	r1, [sp, #52]	; 0x34
 8008794:	f7ff ff1b 	bl	80085ce <__exponent>
 8008798:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800879a:	4682      	mov	sl, r0
 800879c:	1813      	adds	r3, r2, r0
 800879e:	2a01      	cmp	r2, #1
 80087a0:	6123      	str	r3, [r4, #16]
 80087a2:	dc02      	bgt.n	80087aa <_printf_float+0x15e>
 80087a4:	6822      	ldr	r2, [r4, #0]
 80087a6:	07d2      	lsls	r2, r2, #31
 80087a8:	d501      	bpl.n	80087ae <_printf_float+0x162>
 80087aa:	3301      	adds	r3, #1
 80087ac:	6123      	str	r3, [r4, #16]
 80087ae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d09b      	beq.n	80086ee <_printf_float+0xa2>
 80087b6:	232d      	movs	r3, #45	; 0x2d
 80087b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087bc:	e797      	b.n	80086ee <_printf_float+0xa2>
 80087be:	2947      	cmp	r1, #71	; 0x47
 80087c0:	d1bc      	bne.n	800873c <_printf_float+0xf0>
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1ba      	bne.n	800873c <_printf_float+0xf0>
 80087c6:	2301      	movs	r3, #1
 80087c8:	e7b7      	b.n	800873a <_printf_float+0xee>
 80087ca:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80087ce:	d118      	bne.n	8008802 <_printf_float+0x1b6>
 80087d0:	2900      	cmp	r1, #0
 80087d2:	6863      	ldr	r3, [r4, #4]
 80087d4:	dd0b      	ble.n	80087ee <_printf_float+0x1a2>
 80087d6:	6121      	str	r1, [r4, #16]
 80087d8:	b913      	cbnz	r3, 80087e0 <_printf_float+0x194>
 80087da:	6822      	ldr	r2, [r4, #0]
 80087dc:	07d0      	lsls	r0, r2, #31
 80087de:	d502      	bpl.n	80087e6 <_printf_float+0x19a>
 80087e0:	3301      	adds	r3, #1
 80087e2:	440b      	add	r3, r1
 80087e4:	6123      	str	r3, [r4, #16]
 80087e6:	f04f 0a00 	mov.w	sl, #0
 80087ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80087ec:	e7df      	b.n	80087ae <_printf_float+0x162>
 80087ee:	b913      	cbnz	r3, 80087f6 <_printf_float+0x1aa>
 80087f0:	6822      	ldr	r2, [r4, #0]
 80087f2:	07d2      	lsls	r2, r2, #31
 80087f4:	d501      	bpl.n	80087fa <_printf_float+0x1ae>
 80087f6:	3302      	adds	r3, #2
 80087f8:	e7f4      	b.n	80087e4 <_printf_float+0x198>
 80087fa:	2301      	movs	r3, #1
 80087fc:	e7f2      	b.n	80087e4 <_printf_float+0x198>
 80087fe:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008802:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008804:	4299      	cmp	r1, r3
 8008806:	db05      	blt.n	8008814 <_printf_float+0x1c8>
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	6121      	str	r1, [r4, #16]
 800880c:	07d8      	lsls	r0, r3, #31
 800880e:	d5ea      	bpl.n	80087e6 <_printf_float+0x19a>
 8008810:	1c4b      	adds	r3, r1, #1
 8008812:	e7e7      	b.n	80087e4 <_printf_float+0x198>
 8008814:	2900      	cmp	r1, #0
 8008816:	bfcc      	ite	gt
 8008818:	2201      	movgt	r2, #1
 800881a:	f1c1 0202 	rsble	r2, r1, #2
 800881e:	4413      	add	r3, r2
 8008820:	e7e0      	b.n	80087e4 <_printf_float+0x198>
 8008822:	6823      	ldr	r3, [r4, #0]
 8008824:	055a      	lsls	r2, r3, #21
 8008826:	d407      	bmi.n	8008838 <_printf_float+0x1ec>
 8008828:	6923      	ldr	r3, [r4, #16]
 800882a:	4642      	mov	r2, r8
 800882c:	4631      	mov	r1, r6
 800882e:	4628      	mov	r0, r5
 8008830:	47b8      	blx	r7
 8008832:	3001      	adds	r0, #1
 8008834:	d12b      	bne.n	800888e <_printf_float+0x242>
 8008836:	e764      	b.n	8008702 <_printf_float+0xb6>
 8008838:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800883c:	f240 80dd 	bls.w	80089fa <_printf_float+0x3ae>
 8008840:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008844:	2200      	movs	r2, #0
 8008846:	2300      	movs	r3, #0
 8008848:	f7f8 f8ae 	bl	80009a8 <__aeabi_dcmpeq>
 800884c:	2800      	cmp	r0, #0
 800884e:	d033      	beq.n	80088b8 <_printf_float+0x26c>
 8008850:	2301      	movs	r3, #1
 8008852:	4631      	mov	r1, r6
 8008854:	4628      	mov	r0, r5
 8008856:	4a35      	ldr	r2, [pc, #212]	; (800892c <_printf_float+0x2e0>)
 8008858:	47b8      	blx	r7
 800885a:	3001      	adds	r0, #1
 800885c:	f43f af51 	beq.w	8008702 <_printf_float+0xb6>
 8008860:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008864:	429a      	cmp	r2, r3
 8008866:	db02      	blt.n	800886e <_printf_float+0x222>
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	07d8      	lsls	r0, r3, #31
 800886c:	d50f      	bpl.n	800888e <_printf_float+0x242>
 800886e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008872:	4631      	mov	r1, r6
 8008874:	4628      	mov	r0, r5
 8008876:	47b8      	blx	r7
 8008878:	3001      	adds	r0, #1
 800887a:	f43f af42 	beq.w	8008702 <_printf_float+0xb6>
 800887e:	f04f 0800 	mov.w	r8, #0
 8008882:	f104 091a 	add.w	r9, r4, #26
 8008886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008888:	3b01      	subs	r3, #1
 800888a:	4543      	cmp	r3, r8
 800888c:	dc09      	bgt.n	80088a2 <_printf_float+0x256>
 800888e:	6823      	ldr	r3, [r4, #0]
 8008890:	079b      	lsls	r3, r3, #30
 8008892:	f100 8102 	bmi.w	8008a9a <_printf_float+0x44e>
 8008896:	68e0      	ldr	r0, [r4, #12]
 8008898:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800889a:	4298      	cmp	r0, r3
 800889c:	bfb8      	it	lt
 800889e:	4618      	movlt	r0, r3
 80088a0:	e731      	b.n	8008706 <_printf_float+0xba>
 80088a2:	2301      	movs	r3, #1
 80088a4:	464a      	mov	r2, r9
 80088a6:	4631      	mov	r1, r6
 80088a8:	4628      	mov	r0, r5
 80088aa:	47b8      	blx	r7
 80088ac:	3001      	adds	r0, #1
 80088ae:	f43f af28 	beq.w	8008702 <_printf_float+0xb6>
 80088b2:	f108 0801 	add.w	r8, r8, #1
 80088b6:	e7e6      	b.n	8008886 <_printf_float+0x23a>
 80088b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	dc38      	bgt.n	8008930 <_printf_float+0x2e4>
 80088be:	2301      	movs	r3, #1
 80088c0:	4631      	mov	r1, r6
 80088c2:	4628      	mov	r0, r5
 80088c4:	4a19      	ldr	r2, [pc, #100]	; (800892c <_printf_float+0x2e0>)
 80088c6:	47b8      	blx	r7
 80088c8:	3001      	adds	r0, #1
 80088ca:	f43f af1a 	beq.w	8008702 <_printf_float+0xb6>
 80088ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80088d2:	4313      	orrs	r3, r2
 80088d4:	d102      	bne.n	80088dc <_printf_float+0x290>
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	07d9      	lsls	r1, r3, #31
 80088da:	d5d8      	bpl.n	800888e <_printf_float+0x242>
 80088dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088e0:	4631      	mov	r1, r6
 80088e2:	4628      	mov	r0, r5
 80088e4:	47b8      	blx	r7
 80088e6:	3001      	adds	r0, #1
 80088e8:	f43f af0b 	beq.w	8008702 <_printf_float+0xb6>
 80088ec:	f04f 0900 	mov.w	r9, #0
 80088f0:	f104 0a1a 	add.w	sl, r4, #26
 80088f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088f6:	425b      	negs	r3, r3
 80088f8:	454b      	cmp	r3, r9
 80088fa:	dc01      	bgt.n	8008900 <_printf_float+0x2b4>
 80088fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088fe:	e794      	b.n	800882a <_printf_float+0x1de>
 8008900:	2301      	movs	r3, #1
 8008902:	4652      	mov	r2, sl
 8008904:	4631      	mov	r1, r6
 8008906:	4628      	mov	r0, r5
 8008908:	47b8      	blx	r7
 800890a:	3001      	adds	r0, #1
 800890c:	f43f aef9 	beq.w	8008702 <_printf_float+0xb6>
 8008910:	f109 0901 	add.w	r9, r9, #1
 8008914:	e7ee      	b.n	80088f4 <_printf_float+0x2a8>
 8008916:	bf00      	nop
 8008918:	7fefffff 	.word	0x7fefffff
 800891c:	0800af70 	.word	0x0800af70
 8008920:	0800af74 	.word	0x0800af74
 8008924:	0800af7c 	.word	0x0800af7c
 8008928:	0800af78 	.word	0x0800af78
 800892c:	0800af80 	.word	0x0800af80
 8008930:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008932:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008934:	429a      	cmp	r2, r3
 8008936:	bfa8      	it	ge
 8008938:	461a      	movge	r2, r3
 800893a:	2a00      	cmp	r2, #0
 800893c:	4691      	mov	r9, r2
 800893e:	dc37      	bgt.n	80089b0 <_printf_float+0x364>
 8008940:	f04f 0b00 	mov.w	fp, #0
 8008944:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008948:	f104 021a 	add.w	r2, r4, #26
 800894c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008950:	ebaa 0309 	sub.w	r3, sl, r9
 8008954:	455b      	cmp	r3, fp
 8008956:	dc33      	bgt.n	80089c0 <_printf_float+0x374>
 8008958:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800895c:	429a      	cmp	r2, r3
 800895e:	db3b      	blt.n	80089d8 <_printf_float+0x38c>
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	07da      	lsls	r2, r3, #31
 8008964:	d438      	bmi.n	80089d8 <_printf_float+0x38c>
 8008966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008968:	990d      	ldr	r1, [sp, #52]	; 0x34
 800896a:	eba3 020a 	sub.w	r2, r3, sl
 800896e:	eba3 0901 	sub.w	r9, r3, r1
 8008972:	4591      	cmp	r9, r2
 8008974:	bfa8      	it	ge
 8008976:	4691      	movge	r9, r2
 8008978:	f1b9 0f00 	cmp.w	r9, #0
 800897c:	dc34      	bgt.n	80089e8 <_printf_float+0x39c>
 800897e:	f04f 0800 	mov.w	r8, #0
 8008982:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008986:	f104 0a1a 	add.w	sl, r4, #26
 800898a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800898e:	1a9b      	subs	r3, r3, r2
 8008990:	eba3 0309 	sub.w	r3, r3, r9
 8008994:	4543      	cmp	r3, r8
 8008996:	f77f af7a 	ble.w	800888e <_printf_float+0x242>
 800899a:	2301      	movs	r3, #1
 800899c:	4652      	mov	r2, sl
 800899e:	4631      	mov	r1, r6
 80089a0:	4628      	mov	r0, r5
 80089a2:	47b8      	blx	r7
 80089a4:	3001      	adds	r0, #1
 80089a6:	f43f aeac 	beq.w	8008702 <_printf_float+0xb6>
 80089aa:	f108 0801 	add.w	r8, r8, #1
 80089ae:	e7ec      	b.n	800898a <_printf_float+0x33e>
 80089b0:	4613      	mov	r3, r2
 80089b2:	4631      	mov	r1, r6
 80089b4:	4642      	mov	r2, r8
 80089b6:	4628      	mov	r0, r5
 80089b8:	47b8      	blx	r7
 80089ba:	3001      	adds	r0, #1
 80089bc:	d1c0      	bne.n	8008940 <_printf_float+0x2f4>
 80089be:	e6a0      	b.n	8008702 <_printf_float+0xb6>
 80089c0:	2301      	movs	r3, #1
 80089c2:	4631      	mov	r1, r6
 80089c4:	4628      	mov	r0, r5
 80089c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80089c8:	47b8      	blx	r7
 80089ca:	3001      	adds	r0, #1
 80089cc:	f43f ae99 	beq.w	8008702 <_printf_float+0xb6>
 80089d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089d2:	f10b 0b01 	add.w	fp, fp, #1
 80089d6:	e7b9      	b.n	800894c <_printf_float+0x300>
 80089d8:	4631      	mov	r1, r6
 80089da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089de:	4628      	mov	r0, r5
 80089e0:	47b8      	blx	r7
 80089e2:	3001      	adds	r0, #1
 80089e4:	d1bf      	bne.n	8008966 <_printf_float+0x31a>
 80089e6:	e68c      	b.n	8008702 <_printf_float+0xb6>
 80089e8:	464b      	mov	r3, r9
 80089ea:	4631      	mov	r1, r6
 80089ec:	4628      	mov	r0, r5
 80089ee:	eb08 020a 	add.w	r2, r8, sl
 80089f2:	47b8      	blx	r7
 80089f4:	3001      	adds	r0, #1
 80089f6:	d1c2      	bne.n	800897e <_printf_float+0x332>
 80089f8:	e683      	b.n	8008702 <_printf_float+0xb6>
 80089fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089fc:	2a01      	cmp	r2, #1
 80089fe:	dc01      	bgt.n	8008a04 <_printf_float+0x3b8>
 8008a00:	07db      	lsls	r3, r3, #31
 8008a02:	d537      	bpl.n	8008a74 <_printf_float+0x428>
 8008a04:	2301      	movs	r3, #1
 8008a06:	4642      	mov	r2, r8
 8008a08:	4631      	mov	r1, r6
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	47b8      	blx	r7
 8008a0e:	3001      	adds	r0, #1
 8008a10:	f43f ae77 	beq.w	8008702 <_printf_float+0xb6>
 8008a14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a18:	4631      	mov	r1, r6
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	47b8      	blx	r7
 8008a1e:	3001      	adds	r0, #1
 8008a20:	f43f ae6f 	beq.w	8008702 <_printf_float+0xb6>
 8008a24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	f7f7 ffbc 	bl	80009a8 <__aeabi_dcmpeq>
 8008a30:	b9d8      	cbnz	r0, 8008a6a <_printf_float+0x41e>
 8008a32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a34:	f108 0201 	add.w	r2, r8, #1
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	4631      	mov	r1, r6
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	47b8      	blx	r7
 8008a40:	3001      	adds	r0, #1
 8008a42:	d10e      	bne.n	8008a62 <_printf_float+0x416>
 8008a44:	e65d      	b.n	8008702 <_printf_float+0xb6>
 8008a46:	2301      	movs	r3, #1
 8008a48:	464a      	mov	r2, r9
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	47b8      	blx	r7
 8008a50:	3001      	adds	r0, #1
 8008a52:	f43f ae56 	beq.w	8008702 <_printf_float+0xb6>
 8008a56:	f108 0801 	add.w	r8, r8, #1
 8008a5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	4543      	cmp	r3, r8
 8008a60:	dcf1      	bgt.n	8008a46 <_printf_float+0x3fa>
 8008a62:	4653      	mov	r3, sl
 8008a64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a68:	e6e0      	b.n	800882c <_printf_float+0x1e0>
 8008a6a:	f04f 0800 	mov.w	r8, #0
 8008a6e:	f104 091a 	add.w	r9, r4, #26
 8008a72:	e7f2      	b.n	8008a5a <_printf_float+0x40e>
 8008a74:	2301      	movs	r3, #1
 8008a76:	4642      	mov	r2, r8
 8008a78:	e7df      	b.n	8008a3a <_printf_float+0x3ee>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	464a      	mov	r2, r9
 8008a7e:	4631      	mov	r1, r6
 8008a80:	4628      	mov	r0, r5
 8008a82:	47b8      	blx	r7
 8008a84:	3001      	adds	r0, #1
 8008a86:	f43f ae3c 	beq.w	8008702 <_printf_float+0xb6>
 8008a8a:	f108 0801 	add.w	r8, r8, #1
 8008a8e:	68e3      	ldr	r3, [r4, #12]
 8008a90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008a92:	1a5b      	subs	r3, r3, r1
 8008a94:	4543      	cmp	r3, r8
 8008a96:	dcf0      	bgt.n	8008a7a <_printf_float+0x42e>
 8008a98:	e6fd      	b.n	8008896 <_printf_float+0x24a>
 8008a9a:	f04f 0800 	mov.w	r8, #0
 8008a9e:	f104 0919 	add.w	r9, r4, #25
 8008aa2:	e7f4      	b.n	8008a8e <_printf_float+0x442>

08008aa4 <_printf_common>:
 8008aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aa8:	4616      	mov	r6, r2
 8008aaa:	4699      	mov	r9, r3
 8008aac:	688a      	ldr	r2, [r1, #8]
 8008aae:	690b      	ldr	r3, [r1, #16]
 8008ab0:	4607      	mov	r7, r0
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	bfb8      	it	lt
 8008ab6:	4613      	movlt	r3, r2
 8008ab8:	6033      	str	r3, [r6, #0]
 8008aba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008abe:	460c      	mov	r4, r1
 8008ac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ac4:	b10a      	cbz	r2, 8008aca <_printf_common+0x26>
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	6033      	str	r3, [r6, #0]
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	0699      	lsls	r1, r3, #26
 8008ace:	bf42      	ittt	mi
 8008ad0:	6833      	ldrmi	r3, [r6, #0]
 8008ad2:	3302      	addmi	r3, #2
 8008ad4:	6033      	strmi	r3, [r6, #0]
 8008ad6:	6825      	ldr	r5, [r4, #0]
 8008ad8:	f015 0506 	ands.w	r5, r5, #6
 8008adc:	d106      	bne.n	8008aec <_printf_common+0x48>
 8008ade:	f104 0a19 	add.w	sl, r4, #25
 8008ae2:	68e3      	ldr	r3, [r4, #12]
 8008ae4:	6832      	ldr	r2, [r6, #0]
 8008ae6:	1a9b      	subs	r3, r3, r2
 8008ae8:	42ab      	cmp	r3, r5
 8008aea:	dc28      	bgt.n	8008b3e <_printf_common+0x9a>
 8008aec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008af0:	1e13      	subs	r3, r2, #0
 8008af2:	6822      	ldr	r2, [r4, #0]
 8008af4:	bf18      	it	ne
 8008af6:	2301      	movne	r3, #1
 8008af8:	0692      	lsls	r2, r2, #26
 8008afa:	d42d      	bmi.n	8008b58 <_printf_common+0xb4>
 8008afc:	4649      	mov	r1, r9
 8008afe:	4638      	mov	r0, r7
 8008b00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b04:	47c0      	blx	r8
 8008b06:	3001      	adds	r0, #1
 8008b08:	d020      	beq.n	8008b4c <_printf_common+0xa8>
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	68e5      	ldr	r5, [r4, #12]
 8008b0e:	f003 0306 	and.w	r3, r3, #6
 8008b12:	2b04      	cmp	r3, #4
 8008b14:	bf18      	it	ne
 8008b16:	2500      	movne	r5, #0
 8008b18:	6832      	ldr	r2, [r6, #0]
 8008b1a:	f04f 0600 	mov.w	r6, #0
 8008b1e:	68a3      	ldr	r3, [r4, #8]
 8008b20:	bf08      	it	eq
 8008b22:	1aad      	subeq	r5, r5, r2
 8008b24:	6922      	ldr	r2, [r4, #16]
 8008b26:	bf08      	it	eq
 8008b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	bfc4      	itt	gt
 8008b30:	1a9b      	subgt	r3, r3, r2
 8008b32:	18ed      	addgt	r5, r5, r3
 8008b34:	341a      	adds	r4, #26
 8008b36:	42b5      	cmp	r5, r6
 8008b38:	d11a      	bne.n	8008b70 <_printf_common+0xcc>
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	e008      	b.n	8008b50 <_printf_common+0xac>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	4652      	mov	r2, sl
 8008b42:	4649      	mov	r1, r9
 8008b44:	4638      	mov	r0, r7
 8008b46:	47c0      	blx	r8
 8008b48:	3001      	adds	r0, #1
 8008b4a:	d103      	bne.n	8008b54 <_printf_common+0xb0>
 8008b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b54:	3501      	adds	r5, #1
 8008b56:	e7c4      	b.n	8008ae2 <_printf_common+0x3e>
 8008b58:	2030      	movs	r0, #48	; 0x30
 8008b5a:	18e1      	adds	r1, r4, r3
 8008b5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b60:	1c5a      	adds	r2, r3, #1
 8008b62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b66:	4422      	add	r2, r4
 8008b68:	3302      	adds	r3, #2
 8008b6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b6e:	e7c5      	b.n	8008afc <_printf_common+0x58>
 8008b70:	2301      	movs	r3, #1
 8008b72:	4622      	mov	r2, r4
 8008b74:	4649      	mov	r1, r9
 8008b76:	4638      	mov	r0, r7
 8008b78:	47c0      	blx	r8
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	d0e6      	beq.n	8008b4c <_printf_common+0xa8>
 8008b7e:	3601      	adds	r6, #1
 8008b80:	e7d9      	b.n	8008b36 <_printf_common+0x92>
	...

08008b84 <_printf_i>:
 8008b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b88:	7e0f      	ldrb	r7, [r1, #24]
 8008b8a:	4691      	mov	r9, r2
 8008b8c:	2f78      	cmp	r7, #120	; 0x78
 8008b8e:	4680      	mov	r8, r0
 8008b90:	460c      	mov	r4, r1
 8008b92:	469a      	mov	sl, r3
 8008b94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b9a:	d807      	bhi.n	8008bac <_printf_i+0x28>
 8008b9c:	2f62      	cmp	r7, #98	; 0x62
 8008b9e:	d80a      	bhi.n	8008bb6 <_printf_i+0x32>
 8008ba0:	2f00      	cmp	r7, #0
 8008ba2:	f000 80d9 	beq.w	8008d58 <_printf_i+0x1d4>
 8008ba6:	2f58      	cmp	r7, #88	; 0x58
 8008ba8:	f000 80a4 	beq.w	8008cf4 <_printf_i+0x170>
 8008bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bb4:	e03a      	b.n	8008c2c <_printf_i+0xa8>
 8008bb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bba:	2b15      	cmp	r3, #21
 8008bbc:	d8f6      	bhi.n	8008bac <_printf_i+0x28>
 8008bbe:	a101      	add	r1, pc, #4	; (adr r1, 8008bc4 <_printf_i+0x40>)
 8008bc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bc4:	08008c1d 	.word	0x08008c1d
 8008bc8:	08008c31 	.word	0x08008c31
 8008bcc:	08008bad 	.word	0x08008bad
 8008bd0:	08008bad 	.word	0x08008bad
 8008bd4:	08008bad 	.word	0x08008bad
 8008bd8:	08008bad 	.word	0x08008bad
 8008bdc:	08008c31 	.word	0x08008c31
 8008be0:	08008bad 	.word	0x08008bad
 8008be4:	08008bad 	.word	0x08008bad
 8008be8:	08008bad 	.word	0x08008bad
 8008bec:	08008bad 	.word	0x08008bad
 8008bf0:	08008d3f 	.word	0x08008d3f
 8008bf4:	08008c61 	.word	0x08008c61
 8008bf8:	08008d21 	.word	0x08008d21
 8008bfc:	08008bad 	.word	0x08008bad
 8008c00:	08008bad 	.word	0x08008bad
 8008c04:	08008d61 	.word	0x08008d61
 8008c08:	08008bad 	.word	0x08008bad
 8008c0c:	08008c61 	.word	0x08008c61
 8008c10:	08008bad 	.word	0x08008bad
 8008c14:	08008bad 	.word	0x08008bad
 8008c18:	08008d29 	.word	0x08008d29
 8008c1c:	682b      	ldr	r3, [r5, #0]
 8008c1e:	1d1a      	adds	r2, r3, #4
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	602a      	str	r2, [r5, #0]
 8008c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e0a4      	b.n	8008d7a <_printf_i+0x1f6>
 8008c30:	6820      	ldr	r0, [r4, #0]
 8008c32:	6829      	ldr	r1, [r5, #0]
 8008c34:	0606      	lsls	r6, r0, #24
 8008c36:	f101 0304 	add.w	r3, r1, #4
 8008c3a:	d50a      	bpl.n	8008c52 <_printf_i+0xce>
 8008c3c:	680e      	ldr	r6, [r1, #0]
 8008c3e:	602b      	str	r3, [r5, #0]
 8008c40:	2e00      	cmp	r6, #0
 8008c42:	da03      	bge.n	8008c4c <_printf_i+0xc8>
 8008c44:	232d      	movs	r3, #45	; 0x2d
 8008c46:	4276      	negs	r6, r6
 8008c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c4c:	230a      	movs	r3, #10
 8008c4e:	485e      	ldr	r0, [pc, #376]	; (8008dc8 <_printf_i+0x244>)
 8008c50:	e019      	b.n	8008c86 <_printf_i+0x102>
 8008c52:	680e      	ldr	r6, [r1, #0]
 8008c54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c58:	602b      	str	r3, [r5, #0]
 8008c5a:	bf18      	it	ne
 8008c5c:	b236      	sxthne	r6, r6
 8008c5e:	e7ef      	b.n	8008c40 <_printf_i+0xbc>
 8008c60:	682b      	ldr	r3, [r5, #0]
 8008c62:	6820      	ldr	r0, [r4, #0]
 8008c64:	1d19      	adds	r1, r3, #4
 8008c66:	6029      	str	r1, [r5, #0]
 8008c68:	0601      	lsls	r1, r0, #24
 8008c6a:	d501      	bpl.n	8008c70 <_printf_i+0xec>
 8008c6c:	681e      	ldr	r6, [r3, #0]
 8008c6e:	e002      	b.n	8008c76 <_printf_i+0xf2>
 8008c70:	0646      	lsls	r6, r0, #25
 8008c72:	d5fb      	bpl.n	8008c6c <_printf_i+0xe8>
 8008c74:	881e      	ldrh	r6, [r3, #0]
 8008c76:	2f6f      	cmp	r7, #111	; 0x6f
 8008c78:	bf0c      	ite	eq
 8008c7a:	2308      	moveq	r3, #8
 8008c7c:	230a      	movne	r3, #10
 8008c7e:	4852      	ldr	r0, [pc, #328]	; (8008dc8 <_printf_i+0x244>)
 8008c80:	2100      	movs	r1, #0
 8008c82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c86:	6865      	ldr	r5, [r4, #4]
 8008c88:	2d00      	cmp	r5, #0
 8008c8a:	bfa8      	it	ge
 8008c8c:	6821      	ldrge	r1, [r4, #0]
 8008c8e:	60a5      	str	r5, [r4, #8]
 8008c90:	bfa4      	itt	ge
 8008c92:	f021 0104 	bicge.w	r1, r1, #4
 8008c96:	6021      	strge	r1, [r4, #0]
 8008c98:	b90e      	cbnz	r6, 8008c9e <_printf_i+0x11a>
 8008c9a:	2d00      	cmp	r5, #0
 8008c9c:	d04d      	beq.n	8008d3a <_printf_i+0x1b6>
 8008c9e:	4615      	mov	r5, r2
 8008ca0:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ca4:	fb03 6711 	mls	r7, r3, r1, r6
 8008ca8:	5dc7      	ldrb	r7, [r0, r7]
 8008caa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cae:	4637      	mov	r7, r6
 8008cb0:	42bb      	cmp	r3, r7
 8008cb2:	460e      	mov	r6, r1
 8008cb4:	d9f4      	bls.n	8008ca0 <_printf_i+0x11c>
 8008cb6:	2b08      	cmp	r3, #8
 8008cb8:	d10b      	bne.n	8008cd2 <_printf_i+0x14e>
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	07de      	lsls	r6, r3, #31
 8008cbe:	d508      	bpl.n	8008cd2 <_printf_i+0x14e>
 8008cc0:	6923      	ldr	r3, [r4, #16]
 8008cc2:	6861      	ldr	r1, [r4, #4]
 8008cc4:	4299      	cmp	r1, r3
 8008cc6:	bfde      	ittt	le
 8008cc8:	2330      	movle	r3, #48	; 0x30
 8008cca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cce:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cd2:	1b52      	subs	r2, r2, r5
 8008cd4:	6122      	str	r2, [r4, #16]
 8008cd6:	464b      	mov	r3, r9
 8008cd8:	4621      	mov	r1, r4
 8008cda:	4640      	mov	r0, r8
 8008cdc:	f8cd a000 	str.w	sl, [sp]
 8008ce0:	aa03      	add	r2, sp, #12
 8008ce2:	f7ff fedf 	bl	8008aa4 <_printf_common>
 8008ce6:	3001      	adds	r0, #1
 8008ce8:	d14c      	bne.n	8008d84 <_printf_i+0x200>
 8008cea:	f04f 30ff 	mov.w	r0, #4294967295
 8008cee:	b004      	add	sp, #16
 8008cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf4:	4834      	ldr	r0, [pc, #208]	; (8008dc8 <_printf_i+0x244>)
 8008cf6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008cfa:	6829      	ldr	r1, [r5, #0]
 8008cfc:	6823      	ldr	r3, [r4, #0]
 8008cfe:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d02:	6029      	str	r1, [r5, #0]
 8008d04:	061d      	lsls	r5, r3, #24
 8008d06:	d514      	bpl.n	8008d32 <_printf_i+0x1ae>
 8008d08:	07df      	lsls	r7, r3, #31
 8008d0a:	bf44      	itt	mi
 8008d0c:	f043 0320 	orrmi.w	r3, r3, #32
 8008d10:	6023      	strmi	r3, [r4, #0]
 8008d12:	b91e      	cbnz	r6, 8008d1c <_printf_i+0x198>
 8008d14:	6823      	ldr	r3, [r4, #0]
 8008d16:	f023 0320 	bic.w	r3, r3, #32
 8008d1a:	6023      	str	r3, [r4, #0]
 8008d1c:	2310      	movs	r3, #16
 8008d1e:	e7af      	b.n	8008c80 <_printf_i+0xfc>
 8008d20:	6823      	ldr	r3, [r4, #0]
 8008d22:	f043 0320 	orr.w	r3, r3, #32
 8008d26:	6023      	str	r3, [r4, #0]
 8008d28:	2378      	movs	r3, #120	; 0x78
 8008d2a:	4828      	ldr	r0, [pc, #160]	; (8008dcc <_printf_i+0x248>)
 8008d2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d30:	e7e3      	b.n	8008cfa <_printf_i+0x176>
 8008d32:	0659      	lsls	r1, r3, #25
 8008d34:	bf48      	it	mi
 8008d36:	b2b6      	uxthmi	r6, r6
 8008d38:	e7e6      	b.n	8008d08 <_printf_i+0x184>
 8008d3a:	4615      	mov	r5, r2
 8008d3c:	e7bb      	b.n	8008cb6 <_printf_i+0x132>
 8008d3e:	682b      	ldr	r3, [r5, #0]
 8008d40:	6826      	ldr	r6, [r4, #0]
 8008d42:	1d18      	adds	r0, r3, #4
 8008d44:	6961      	ldr	r1, [r4, #20]
 8008d46:	6028      	str	r0, [r5, #0]
 8008d48:	0635      	lsls	r5, r6, #24
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	d501      	bpl.n	8008d52 <_printf_i+0x1ce>
 8008d4e:	6019      	str	r1, [r3, #0]
 8008d50:	e002      	b.n	8008d58 <_printf_i+0x1d4>
 8008d52:	0670      	lsls	r0, r6, #25
 8008d54:	d5fb      	bpl.n	8008d4e <_printf_i+0x1ca>
 8008d56:	8019      	strh	r1, [r3, #0]
 8008d58:	2300      	movs	r3, #0
 8008d5a:	4615      	mov	r5, r2
 8008d5c:	6123      	str	r3, [r4, #16]
 8008d5e:	e7ba      	b.n	8008cd6 <_printf_i+0x152>
 8008d60:	682b      	ldr	r3, [r5, #0]
 8008d62:	2100      	movs	r1, #0
 8008d64:	1d1a      	adds	r2, r3, #4
 8008d66:	602a      	str	r2, [r5, #0]
 8008d68:	681d      	ldr	r5, [r3, #0]
 8008d6a:	6862      	ldr	r2, [r4, #4]
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	f000 feb5 	bl	8009adc <memchr>
 8008d72:	b108      	cbz	r0, 8008d78 <_printf_i+0x1f4>
 8008d74:	1b40      	subs	r0, r0, r5
 8008d76:	6060      	str	r0, [r4, #4]
 8008d78:	6863      	ldr	r3, [r4, #4]
 8008d7a:	6123      	str	r3, [r4, #16]
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d82:	e7a8      	b.n	8008cd6 <_printf_i+0x152>
 8008d84:	462a      	mov	r2, r5
 8008d86:	4649      	mov	r1, r9
 8008d88:	4640      	mov	r0, r8
 8008d8a:	6923      	ldr	r3, [r4, #16]
 8008d8c:	47d0      	blx	sl
 8008d8e:	3001      	adds	r0, #1
 8008d90:	d0ab      	beq.n	8008cea <_printf_i+0x166>
 8008d92:	6823      	ldr	r3, [r4, #0]
 8008d94:	079b      	lsls	r3, r3, #30
 8008d96:	d413      	bmi.n	8008dc0 <_printf_i+0x23c>
 8008d98:	68e0      	ldr	r0, [r4, #12]
 8008d9a:	9b03      	ldr	r3, [sp, #12]
 8008d9c:	4298      	cmp	r0, r3
 8008d9e:	bfb8      	it	lt
 8008da0:	4618      	movlt	r0, r3
 8008da2:	e7a4      	b.n	8008cee <_printf_i+0x16a>
 8008da4:	2301      	movs	r3, #1
 8008da6:	4632      	mov	r2, r6
 8008da8:	4649      	mov	r1, r9
 8008daa:	4640      	mov	r0, r8
 8008dac:	47d0      	blx	sl
 8008dae:	3001      	adds	r0, #1
 8008db0:	d09b      	beq.n	8008cea <_printf_i+0x166>
 8008db2:	3501      	adds	r5, #1
 8008db4:	68e3      	ldr	r3, [r4, #12]
 8008db6:	9903      	ldr	r1, [sp, #12]
 8008db8:	1a5b      	subs	r3, r3, r1
 8008dba:	42ab      	cmp	r3, r5
 8008dbc:	dcf2      	bgt.n	8008da4 <_printf_i+0x220>
 8008dbe:	e7eb      	b.n	8008d98 <_printf_i+0x214>
 8008dc0:	2500      	movs	r5, #0
 8008dc2:	f104 0619 	add.w	r6, r4, #25
 8008dc6:	e7f5      	b.n	8008db4 <_printf_i+0x230>
 8008dc8:	0800af82 	.word	0x0800af82
 8008dcc:	0800af93 	.word	0x0800af93

08008dd0 <quorem>:
 8008dd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd4:	6903      	ldr	r3, [r0, #16]
 8008dd6:	690c      	ldr	r4, [r1, #16]
 8008dd8:	4607      	mov	r7, r0
 8008dda:	42a3      	cmp	r3, r4
 8008ddc:	f2c0 8082 	blt.w	8008ee4 <quorem+0x114>
 8008de0:	3c01      	subs	r4, #1
 8008de2:	f100 0514 	add.w	r5, r0, #20
 8008de6:	f101 0814 	add.w	r8, r1, #20
 8008dea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008dee:	9301      	str	r3, [sp, #4]
 8008df0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008df4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008e04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e08:	d331      	bcc.n	8008e6e <quorem+0x9e>
 8008e0a:	f04f 0e00 	mov.w	lr, #0
 8008e0e:	4640      	mov	r0, r8
 8008e10:	46ac      	mov	ip, r5
 8008e12:	46f2      	mov	sl, lr
 8008e14:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e18:	b293      	uxth	r3, r2
 8008e1a:	fb06 e303 	mla	r3, r6, r3, lr
 8008e1e:	0c12      	lsrs	r2, r2, #16
 8008e20:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	fb06 e202 	mla	r2, r6, r2, lr
 8008e2a:	ebaa 0303 	sub.w	r3, sl, r3
 8008e2e:	f8dc a000 	ldr.w	sl, [ip]
 8008e32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e36:	fa1f fa8a 	uxth.w	sl, sl
 8008e3a:	4453      	add	r3, sl
 8008e3c:	f8dc a000 	ldr.w	sl, [ip]
 8008e40:	b292      	uxth	r2, r2
 8008e42:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008e46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e50:	4581      	cmp	r9, r0
 8008e52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008e56:	f84c 3b04 	str.w	r3, [ip], #4
 8008e5a:	d2db      	bcs.n	8008e14 <quorem+0x44>
 8008e5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008e60:	b92b      	cbnz	r3, 8008e6e <quorem+0x9e>
 8008e62:	9b01      	ldr	r3, [sp, #4]
 8008e64:	3b04      	subs	r3, #4
 8008e66:	429d      	cmp	r5, r3
 8008e68:	461a      	mov	r2, r3
 8008e6a:	d32f      	bcc.n	8008ecc <quorem+0xfc>
 8008e6c:	613c      	str	r4, [r7, #16]
 8008e6e:	4638      	mov	r0, r7
 8008e70:	f001 f8ce 	bl	800a010 <__mcmp>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	db25      	blt.n	8008ec4 <quorem+0xf4>
 8008e78:	4628      	mov	r0, r5
 8008e7a:	f04f 0c00 	mov.w	ip, #0
 8008e7e:	3601      	adds	r6, #1
 8008e80:	f858 1b04 	ldr.w	r1, [r8], #4
 8008e84:	f8d0 e000 	ldr.w	lr, [r0]
 8008e88:	b28b      	uxth	r3, r1
 8008e8a:	ebac 0303 	sub.w	r3, ip, r3
 8008e8e:	fa1f f28e 	uxth.w	r2, lr
 8008e92:	4413      	add	r3, r2
 8008e94:	0c0a      	lsrs	r2, r1, #16
 8008e96:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008e9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ea4:	45c1      	cmp	r9, r8
 8008ea6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008eaa:	f840 3b04 	str.w	r3, [r0], #4
 8008eae:	d2e7      	bcs.n	8008e80 <quorem+0xb0>
 8008eb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008eb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008eb8:	b922      	cbnz	r2, 8008ec4 <quorem+0xf4>
 8008eba:	3b04      	subs	r3, #4
 8008ebc:	429d      	cmp	r5, r3
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	d30a      	bcc.n	8008ed8 <quorem+0x108>
 8008ec2:	613c      	str	r4, [r7, #16]
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	b003      	add	sp, #12
 8008ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ecc:	6812      	ldr	r2, [r2, #0]
 8008ece:	3b04      	subs	r3, #4
 8008ed0:	2a00      	cmp	r2, #0
 8008ed2:	d1cb      	bne.n	8008e6c <quorem+0x9c>
 8008ed4:	3c01      	subs	r4, #1
 8008ed6:	e7c6      	b.n	8008e66 <quorem+0x96>
 8008ed8:	6812      	ldr	r2, [r2, #0]
 8008eda:	3b04      	subs	r3, #4
 8008edc:	2a00      	cmp	r2, #0
 8008ede:	d1f0      	bne.n	8008ec2 <quorem+0xf2>
 8008ee0:	3c01      	subs	r4, #1
 8008ee2:	e7eb      	b.n	8008ebc <quorem+0xec>
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	e7ee      	b.n	8008ec6 <quorem+0xf6>

08008ee8 <_dtoa_r>:
 8008ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eec:	4616      	mov	r6, r2
 8008eee:	461f      	mov	r7, r3
 8008ef0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008ef2:	b099      	sub	sp, #100	; 0x64
 8008ef4:	4605      	mov	r5, r0
 8008ef6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008efa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008efe:	b974      	cbnz	r4, 8008f1e <_dtoa_r+0x36>
 8008f00:	2010      	movs	r0, #16
 8008f02:	f000 fde3 	bl	8009acc <malloc>
 8008f06:	4602      	mov	r2, r0
 8008f08:	6268      	str	r0, [r5, #36]	; 0x24
 8008f0a:	b920      	cbnz	r0, 8008f16 <_dtoa_r+0x2e>
 8008f0c:	21ea      	movs	r1, #234	; 0xea
 8008f0e:	4ba8      	ldr	r3, [pc, #672]	; (80091b0 <_dtoa_r+0x2c8>)
 8008f10:	48a8      	ldr	r0, [pc, #672]	; (80091b4 <_dtoa_r+0x2cc>)
 8008f12:	f001 fa81 	bl	800a418 <__assert_func>
 8008f16:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f1a:	6004      	str	r4, [r0, #0]
 8008f1c:	60c4      	str	r4, [r0, #12]
 8008f1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f20:	6819      	ldr	r1, [r3, #0]
 8008f22:	b151      	cbz	r1, 8008f3a <_dtoa_r+0x52>
 8008f24:	685a      	ldr	r2, [r3, #4]
 8008f26:	2301      	movs	r3, #1
 8008f28:	4093      	lsls	r3, r2
 8008f2a:	604a      	str	r2, [r1, #4]
 8008f2c:	608b      	str	r3, [r1, #8]
 8008f2e:	4628      	mov	r0, r5
 8008f30:	f000 fe30 	bl	8009b94 <_Bfree>
 8008f34:	2200      	movs	r2, #0
 8008f36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f38:	601a      	str	r2, [r3, #0]
 8008f3a:	1e3b      	subs	r3, r7, #0
 8008f3c:	bfaf      	iteee	ge
 8008f3e:	2300      	movge	r3, #0
 8008f40:	2201      	movlt	r2, #1
 8008f42:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008f46:	9305      	strlt	r3, [sp, #20]
 8008f48:	bfa8      	it	ge
 8008f4a:	f8c8 3000 	strge.w	r3, [r8]
 8008f4e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008f52:	4b99      	ldr	r3, [pc, #612]	; (80091b8 <_dtoa_r+0x2d0>)
 8008f54:	bfb8      	it	lt
 8008f56:	f8c8 2000 	strlt.w	r2, [r8]
 8008f5a:	ea33 0309 	bics.w	r3, r3, r9
 8008f5e:	d119      	bne.n	8008f94 <_dtoa_r+0xac>
 8008f60:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f66:	6013      	str	r3, [r2, #0]
 8008f68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f6c:	4333      	orrs	r3, r6
 8008f6e:	f000 857f 	beq.w	8009a70 <_dtoa_r+0xb88>
 8008f72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f74:	b953      	cbnz	r3, 8008f8c <_dtoa_r+0xa4>
 8008f76:	4b91      	ldr	r3, [pc, #580]	; (80091bc <_dtoa_r+0x2d4>)
 8008f78:	e022      	b.n	8008fc0 <_dtoa_r+0xd8>
 8008f7a:	4b91      	ldr	r3, [pc, #580]	; (80091c0 <_dtoa_r+0x2d8>)
 8008f7c:	9303      	str	r3, [sp, #12]
 8008f7e:	3308      	adds	r3, #8
 8008f80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008f82:	6013      	str	r3, [r2, #0]
 8008f84:	9803      	ldr	r0, [sp, #12]
 8008f86:	b019      	add	sp, #100	; 0x64
 8008f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f8c:	4b8b      	ldr	r3, [pc, #556]	; (80091bc <_dtoa_r+0x2d4>)
 8008f8e:	9303      	str	r3, [sp, #12]
 8008f90:	3303      	adds	r3, #3
 8008f92:	e7f5      	b.n	8008f80 <_dtoa_r+0x98>
 8008f94:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008f98:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008f9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f7f7 fd00 	bl	80009a8 <__aeabi_dcmpeq>
 8008fa8:	4680      	mov	r8, r0
 8008faa:	b158      	cbz	r0, 8008fc4 <_dtoa_r+0xdc>
 8008fac:	2301      	movs	r3, #1
 8008fae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008fb0:	6013      	str	r3, [r2, #0]
 8008fb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 8558 	beq.w	8009a6a <_dtoa_r+0xb82>
 8008fba:	4882      	ldr	r0, [pc, #520]	; (80091c4 <_dtoa_r+0x2dc>)
 8008fbc:	6018      	str	r0, [r3, #0]
 8008fbe:	1e43      	subs	r3, r0, #1
 8008fc0:	9303      	str	r3, [sp, #12]
 8008fc2:	e7df      	b.n	8008f84 <_dtoa_r+0x9c>
 8008fc4:	ab16      	add	r3, sp, #88	; 0x58
 8008fc6:	9301      	str	r3, [sp, #4]
 8008fc8:	ab17      	add	r3, sp, #92	; 0x5c
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	4628      	mov	r0, r5
 8008fce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008fd2:	f001 f8c5 	bl	800a160 <__d2b>
 8008fd6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008fda:	4683      	mov	fp, r0
 8008fdc:	2c00      	cmp	r4, #0
 8008fde:	d07f      	beq.n	80090e0 <_dtoa_r+0x1f8>
 8008fe0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008fe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fe6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008fea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008ff2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008ff6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	4b72      	ldr	r3, [pc, #456]	; (80091c8 <_dtoa_r+0x2e0>)
 8008ffe:	f7f7 f8b3 	bl	8000168 <__aeabi_dsub>
 8009002:	a365      	add	r3, pc, #404	; (adr r3, 8009198 <_dtoa_r+0x2b0>)
 8009004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009008:	f7f7 fa66 	bl	80004d8 <__aeabi_dmul>
 800900c:	a364      	add	r3, pc, #400	; (adr r3, 80091a0 <_dtoa_r+0x2b8>)
 800900e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009012:	f7f7 f8ab 	bl	800016c <__adddf3>
 8009016:	4606      	mov	r6, r0
 8009018:	4620      	mov	r0, r4
 800901a:	460f      	mov	r7, r1
 800901c:	f7f7 f9f2 	bl	8000404 <__aeabi_i2d>
 8009020:	a361      	add	r3, pc, #388	; (adr r3, 80091a8 <_dtoa_r+0x2c0>)
 8009022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009026:	f7f7 fa57 	bl	80004d8 <__aeabi_dmul>
 800902a:	4602      	mov	r2, r0
 800902c:	460b      	mov	r3, r1
 800902e:	4630      	mov	r0, r6
 8009030:	4639      	mov	r1, r7
 8009032:	f7f7 f89b 	bl	800016c <__adddf3>
 8009036:	4606      	mov	r6, r0
 8009038:	460f      	mov	r7, r1
 800903a:	f7f7 fcfd 	bl	8000a38 <__aeabi_d2iz>
 800903e:	2200      	movs	r2, #0
 8009040:	4682      	mov	sl, r0
 8009042:	2300      	movs	r3, #0
 8009044:	4630      	mov	r0, r6
 8009046:	4639      	mov	r1, r7
 8009048:	f7f7 fcb8 	bl	80009bc <__aeabi_dcmplt>
 800904c:	b148      	cbz	r0, 8009062 <_dtoa_r+0x17a>
 800904e:	4650      	mov	r0, sl
 8009050:	f7f7 f9d8 	bl	8000404 <__aeabi_i2d>
 8009054:	4632      	mov	r2, r6
 8009056:	463b      	mov	r3, r7
 8009058:	f7f7 fca6 	bl	80009a8 <__aeabi_dcmpeq>
 800905c:	b908      	cbnz	r0, 8009062 <_dtoa_r+0x17a>
 800905e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009062:	f1ba 0f16 	cmp.w	sl, #22
 8009066:	d858      	bhi.n	800911a <_dtoa_r+0x232>
 8009068:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800906c:	4b57      	ldr	r3, [pc, #348]	; (80091cc <_dtoa_r+0x2e4>)
 800906e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009076:	f7f7 fca1 	bl	80009bc <__aeabi_dcmplt>
 800907a:	2800      	cmp	r0, #0
 800907c:	d04f      	beq.n	800911e <_dtoa_r+0x236>
 800907e:	2300      	movs	r3, #0
 8009080:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009084:	930f      	str	r3, [sp, #60]	; 0x3c
 8009086:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009088:	1b1c      	subs	r4, r3, r4
 800908a:	1e63      	subs	r3, r4, #1
 800908c:	9309      	str	r3, [sp, #36]	; 0x24
 800908e:	bf49      	itett	mi
 8009090:	f1c4 0301 	rsbmi	r3, r4, #1
 8009094:	2300      	movpl	r3, #0
 8009096:	9306      	strmi	r3, [sp, #24]
 8009098:	2300      	movmi	r3, #0
 800909a:	bf54      	ite	pl
 800909c:	9306      	strpl	r3, [sp, #24]
 800909e:	9309      	strmi	r3, [sp, #36]	; 0x24
 80090a0:	f1ba 0f00 	cmp.w	sl, #0
 80090a4:	db3d      	blt.n	8009122 <_dtoa_r+0x23a>
 80090a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80090ac:	4453      	add	r3, sl
 80090ae:	9309      	str	r3, [sp, #36]	; 0x24
 80090b0:	2300      	movs	r3, #0
 80090b2:	930a      	str	r3, [sp, #40]	; 0x28
 80090b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090b6:	2b09      	cmp	r3, #9
 80090b8:	f200 808c 	bhi.w	80091d4 <_dtoa_r+0x2ec>
 80090bc:	2b05      	cmp	r3, #5
 80090be:	bfc4      	itt	gt
 80090c0:	3b04      	subgt	r3, #4
 80090c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80090c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090c6:	bfc8      	it	gt
 80090c8:	2400      	movgt	r4, #0
 80090ca:	f1a3 0302 	sub.w	r3, r3, #2
 80090ce:	bfd8      	it	le
 80090d0:	2401      	movle	r4, #1
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	f200 808a 	bhi.w	80091ec <_dtoa_r+0x304>
 80090d8:	e8df f003 	tbb	[pc, r3]
 80090dc:	5b4d4f2d 	.word	0x5b4d4f2d
 80090e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80090e4:	441c      	add	r4, r3
 80090e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80090ea:	2b20      	cmp	r3, #32
 80090ec:	bfc3      	ittte	gt
 80090ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80090f2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80090f6:	fa09 f303 	lslgt.w	r3, r9, r3
 80090fa:	f1c3 0320 	rsble	r3, r3, #32
 80090fe:	bfc6      	itte	gt
 8009100:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009104:	4318      	orrgt	r0, r3
 8009106:	fa06 f003 	lslle.w	r0, r6, r3
 800910a:	f7f7 f96b 	bl	80003e4 <__aeabi_ui2d>
 800910e:	2301      	movs	r3, #1
 8009110:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009114:	3c01      	subs	r4, #1
 8009116:	9313      	str	r3, [sp, #76]	; 0x4c
 8009118:	e76f      	b.n	8008ffa <_dtoa_r+0x112>
 800911a:	2301      	movs	r3, #1
 800911c:	e7b2      	b.n	8009084 <_dtoa_r+0x19c>
 800911e:	900f      	str	r0, [sp, #60]	; 0x3c
 8009120:	e7b1      	b.n	8009086 <_dtoa_r+0x19e>
 8009122:	9b06      	ldr	r3, [sp, #24]
 8009124:	eba3 030a 	sub.w	r3, r3, sl
 8009128:	9306      	str	r3, [sp, #24]
 800912a:	f1ca 0300 	rsb	r3, sl, #0
 800912e:	930a      	str	r3, [sp, #40]	; 0x28
 8009130:	2300      	movs	r3, #0
 8009132:	930e      	str	r3, [sp, #56]	; 0x38
 8009134:	e7be      	b.n	80090b4 <_dtoa_r+0x1cc>
 8009136:	2300      	movs	r3, #0
 8009138:	930b      	str	r3, [sp, #44]	; 0x2c
 800913a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800913c:	2b00      	cmp	r3, #0
 800913e:	dc58      	bgt.n	80091f2 <_dtoa_r+0x30a>
 8009140:	f04f 0901 	mov.w	r9, #1
 8009144:	464b      	mov	r3, r9
 8009146:	f8cd 9020 	str.w	r9, [sp, #32]
 800914a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800914e:	2200      	movs	r2, #0
 8009150:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009152:	6042      	str	r2, [r0, #4]
 8009154:	2204      	movs	r2, #4
 8009156:	f102 0614 	add.w	r6, r2, #20
 800915a:	429e      	cmp	r6, r3
 800915c:	6841      	ldr	r1, [r0, #4]
 800915e:	d94e      	bls.n	80091fe <_dtoa_r+0x316>
 8009160:	4628      	mov	r0, r5
 8009162:	f000 fcd7 	bl	8009b14 <_Balloc>
 8009166:	9003      	str	r0, [sp, #12]
 8009168:	2800      	cmp	r0, #0
 800916a:	d14c      	bne.n	8009206 <_dtoa_r+0x31e>
 800916c:	4602      	mov	r2, r0
 800916e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009172:	4b17      	ldr	r3, [pc, #92]	; (80091d0 <_dtoa_r+0x2e8>)
 8009174:	e6cc      	b.n	8008f10 <_dtoa_r+0x28>
 8009176:	2301      	movs	r3, #1
 8009178:	e7de      	b.n	8009138 <_dtoa_r+0x250>
 800917a:	2300      	movs	r3, #0
 800917c:	930b      	str	r3, [sp, #44]	; 0x2c
 800917e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009180:	eb0a 0903 	add.w	r9, sl, r3
 8009184:	f109 0301 	add.w	r3, r9, #1
 8009188:	2b01      	cmp	r3, #1
 800918a:	9308      	str	r3, [sp, #32]
 800918c:	bfb8      	it	lt
 800918e:	2301      	movlt	r3, #1
 8009190:	e7dd      	b.n	800914e <_dtoa_r+0x266>
 8009192:	2301      	movs	r3, #1
 8009194:	e7f2      	b.n	800917c <_dtoa_r+0x294>
 8009196:	bf00      	nop
 8009198:	636f4361 	.word	0x636f4361
 800919c:	3fd287a7 	.word	0x3fd287a7
 80091a0:	8b60c8b3 	.word	0x8b60c8b3
 80091a4:	3fc68a28 	.word	0x3fc68a28
 80091a8:	509f79fb 	.word	0x509f79fb
 80091ac:	3fd34413 	.word	0x3fd34413
 80091b0:	0800afb1 	.word	0x0800afb1
 80091b4:	0800afc8 	.word	0x0800afc8
 80091b8:	7ff00000 	.word	0x7ff00000
 80091bc:	0800afad 	.word	0x0800afad
 80091c0:	0800afa4 	.word	0x0800afa4
 80091c4:	0800af81 	.word	0x0800af81
 80091c8:	3ff80000 	.word	0x3ff80000
 80091cc:	0800b0b8 	.word	0x0800b0b8
 80091d0:	0800b023 	.word	0x0800b023
 80091d4:	2401      	movs	r4, #1
 80091d6:	2300      	movs	r3, #0
 80091d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80091da:	9322      	str	r3, [sp, #136]	; 0x88
 80091dc:	f04f 39ff 	mov.w	r9, #4294967295
 80091e0:	2200      	movs	r2, #0
 80091e2:	2312      	movs	r3, #18
 80091e4:	f8cd 9020 	str.w	r9, [sp, #32]
 80091e8:	9223      	str	r2, [sp, #140]	; 0x8c
 80091ea:	e7b0      	b.n	800914e <_dtoa_r+0x266>
 80091ec:	2301      	movs	r3, #1
 80091ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80091f0:	e7f4      	b.n	80091dc <_dtoa_r+0x2f4>
 80091f2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80091f6:	464b      	mov	r3, r9
 80091f8:	f8cd 9020 	str.w	r9, [sp, #32]
 80091fc:	e7a7      	b.n	800914e <_dtoa_r+0x266>
 80091fe:	3101      	adds	r1, #1
 8009200:	6041      	str	r1, [r0, #4]
 8009202:	0052      	lsls	r2, r2, #1
 8009204:	e7a7      	b.n	8009156 <_dtoa_r+0x26e>
 8009206:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009208:	9a03      	ldr	r2, [sp, #12]
 800920a:	601a      	str	r2, [r3, #0]
 800920c:	9b08      	ldr	r3, [sp, #32]
 800920e:	2b0e      	cmp	r3, #14
 8009210:	f200 80a8 	bhi.w	8009364 <_dtoa_r+0x47c>
 8009214:	2c00      	cmp	r4, #0
 8009216:	f000 80a5 	beq.w	8009364 <_dtoa_r+0x47c>
 800921a:	f1ba 0f00 	cmp.w	sl, #0
 800921e:	dd34      	ble.n	800928a <_dtoa_r+0x3a2>
 8009220:	4a9a      	ldr	r2, [pc, #616]	; (800948c <_dtoa_r+0x5a4>)
 8009222:	f00a 030f 	and.w	r3, sl, #15
 8009226:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800922a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800922e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009232:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009236:	ea4f 142a 	mov.w	r4, sl, asr #4
 800923a:	d016      	beq.n	800926a <_dtoa_r+0x382>
 800923c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009240:	4b93      	ldr	r3, [pc, #588]	; (8009490 <_dtoa_r+0x5a8>)
 8009242:	2703      	movs	r7, #3
 8009244:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009248:	f7f7 fa70 	bl	800072c <__aeabi_ddiv>
 800924c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009250:	f004 040f 	and.w	r4, r4, #15
 8009254:	4e8e      	ldr	r6, [pc, #568]	; (8009490 <_dtoa_r+0x5a8>)
 8009256:	b954      	cbnz	r4, 800926e <_dtoa_r+0x386>
 8009258:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800925c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009260:	f7f7 fa64 	bl	800072c <__aeabi_ddiv>
 8009264:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009268:	e029      	b.n	80092be <_dtoa_r+0x3d6>
 800926a:	2702      	movs	r7, #2
 800926c:	e7f2      	b.n	8009254 <_dtoa_r+0x36c>
 800926e:	07e1      	lsls	r1, r4, #31
 8009270:	d508      	bpl.n	8009284 <_dtoa_r+0x39c>
 8009272:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009276:	e9d6 2300 	ldrd	r2, r3, [r6]
 800927a:	f7f7 f92d 	bl	80004d8 <__aeabi_dmul>
 800927e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009282:	3701      	adds	r7, #1
 8009284:	1064      	asrs	r4, r4, #1
 8009286:	3608      	adds	r6, #8
 8009288:	e7e5      	b.n	8009256 <_dtoa_r+0x36e>
 800928a:	f000 80a5 	beq.w	80093d8 <_dtoa_r+0x4f0>
 800928e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009292:	f1ca 0400 	rsb	r4, sl, #0
 8009296:	4b7d      	ldr	r3, [pc, #500]	; (800948c <_dtoa_r+0x5a4>)
 8009298:	f004 020f 	and.w	r2, r4, #15
 800929c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a4:	f7f7 f918 	bl	80004d8 <__aeabi_dmul>
 80092a8:	2702      	movs	r7, #2
 80092aa:	2300      	movs	r3, #0
 80092ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092b0:	4e77      	ldr	r6, [pc, #476]	; (8009490 <_dtoa_r+0x5a8>)
 80092b2:	1124      	asrs	r4, r4, #4
 80092b4:	2c00      	cmp	r4, #0
 80092b6:	f040 8084 	bne.w	80093c2 <_dtoa_r+0x4da>
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1d2      	bne.n	8009264 <_dtoa_r+0x37c>
 80092be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 808b 	beq.w	80093dc <_dtoa_r+0x4f4>
 80092c6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80092ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80092ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80092d2:	2200      	movs	r2, #0
 80092d4:	4b6f      	ldr	r3, [pc, #444]	; (8009494 <_dtoa_r+0x5ac>)
 80092d6:	f7f7 fb71 	bl	80009bc <__aeabi_dcmplt>
 80092da:	2800      	cmp	r0, #0
 80092dc:	d07e      	beq.n	80093dc <_dtoa_r+0x4f4>
 80092de:	9b08      	ldr	r3, [sp, #32]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d07b      	beq.n	80093dc <_dtoa_r+0x4f4>
 80092e4:	f1b9 0f00 	cmp.w	r9, #0
 80092e8:	dd38      	ble.n	800935c <_dtoa_r+0x474>
 80092ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80092ee:	2200      	movs	r2, #0
 80092f0:	4b69      	ldr	r3, [pc, #420]	; (8009498 <_dtoa_r+0x5b0>)
 80092f2:	f7f7 f8f1 	bl	80004d8 <__aeabi_dmul>
 80092f6:	464c      	mov	r4, r9
 80092f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092fc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009300:	3701      	adds	r7, #1
 8009302:	4638      	mov	r0, r7
 8009304:	f7f7 f87e 	bl	8000404 <__aeabi_i2d>
 8009308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800930c:	f7f7 f8e4 	bl	80004d8 <__aeabi_dmul>
 8009310:	2200      	movs	r2, #0
 8009312:	4b62      	ldr	r3, [pc, #392]	; (800949c <_dtoa_r+0x5b4>)
 8009314:	f7f6 ff2a 	bl	800016c <__adddf3>
 8009318:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800931c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009320:	9611      	str	r6, [sp, #68]	; 0x44
 8009322:	2c00      	cmp	r4, #0
 8009324:	d15d      	bne.n	80093e2 <_dtoa_r+0x4fa>
 8009326:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800932a:	2200      	movs	r2, #0
 800932c:	4b5c      	ldr	r3, [pc, #368]	; (80094a0 <_dtoa_r+0x5b8>)
 800932e:	f7f6 ff1b 	bl	8000168 <__aeabi_dsub>
 8009332:	4602      	mov	r2, r0
 8009334:	460b      	mov	r3, r1
 8009336:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800933a:	4633      	mov	r3, r6
 800933c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800933e:	f7f7 fb5b 	bl	80009f8 <__aeabi_dcmpgt>
 8009342:	2800      	cmp	r0, #0
 8009344:	f040 829c 	bne.w	8009880 <_dtoa_r+0x998>
 8009348:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800934c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800934e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009352:	f7f7 fb33 	bl	80009bc <__aeabi_dcmplt>
 8009356:	2800      	cmp	r0, #0
 8009358:	f040 8290 	bne.w	800987c <_dtoa_r+0x994>
 800935c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009360:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009364:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009366:	2b00      	cmp	r3, #0
 8009368:	f2c0 8152 	blt.w	8009610 <_dtoa_r+0x728>
 800936c:	f1ba 0f0e 	cmp.w	sl, #14
 8009370:	f300 814e 	bgt.w	8009610 <_dtoa_r+0x728>
 8009374:	4b45      	ldr	r3, [pc, #276]	; (800948c <_dtoa_r+0x5a4>)
 8009376:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800937a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800937e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009382:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009384:	2b00      	cmp	r3, #0
 8009386:	f280 80db 	bge.w	8009540 <_dtoa_r+0x658>
 800938a:	9b08      	ldr	r3, [sp, #32]
 800938c:	2b00      	cmp	r3, #0
 800938e:	f300 80d7 	bgt.w	8009540 <_dtoa_r+0x658>
 8009392:	f040 8272 	bne.w	800987a <_dtoa_r+0x992>
 8009396:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800939a:	2200      	movs	r2, #0
 800939c:	4b40      	ldr	r3, [pc, #256]	; (80094a0 <_dtoa_r+0x5b8>)
 800939e:	f7f7 f89b 	bl	80004d8 <__aeabi_dmul>
 80093a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093a6:	f7f7 fb1d 	bl	80009e4 <__aeabi_dcmpge>
 80093aa:	9c08      	ldr	r4, [sp, #32]
 80093ac:	4626      	mov	r6, r4
 80093ae:	2800      	cmp	r0, #0
 80093b0:	f040 8248 	bne.w	8009844 <_dtoa_r+0x95c>
 80093b4:	2331      	movs	r3, #49	; 0x31
 80093b6:	9f03      	ldr	r7, [sp, #12]
 80093b8:	f10a 0a01 	add.w	sl, sl, #1
 80093bc:	f807 3b01 	strb.w	r3, [r7], #1
 80093c0:	e244      	b.n	800984c <_dtoa_r+0x964>
 80093c2:	07e2      	lsls	r2, r4, #31
 80093c4:	d505      	bpl.n	80093d2 <_dtoa_r+0x4ea>
 80093c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80093ca:	f7f7 f885 	bl	80004d8 <__aeabi_dmul>
 80093ce:	2301      	movs	r3, #1
 80093d0:	3701      	adds	r7, #1
 80093d2:	1064      	asrs	r4, r4, #1
 80093d4:	3608      	adds	r6, #8
 80093d6:	e76d      	b.n	80092b4 <_dtoa_r+0x3cc>
 80093d8:	2702      	movs	r7, #2
 80093da:	e770      	b.n	80092be <_dtoa_r+0x3d6>
 80093dc:	46d0      	mov	r8, sl
 80093de:	9c08      	ldr	r4, [sp, #32]
 80093e0:	e78f      	b.n	8009302 <_dtoa_r+0x41a>
 80093e2:	9903      	ldr	r1, [sp, #12]
 80093e4:	4b29      	ldr	r3, [pc, #164]	; (800948c <_dtoa_r+0x5a4>)
 80093e6:	4421      	add	r1, r4
 80093e8:	9112      	str	r1, [sp, #72]	; 0x48
 80093ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80093f0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80093f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80093f8:	2900      	cmp	r1, #0
 80093fa:	d055      	beq.n	80094a8 <_dtoa_r+0x5c0>
 80093fc:	2000      	movs	r0, #0
 80093fe:	4929      	ldr	r1, [pc, #164]	; (80094a4 <_dtoa_r+0x5bc>)
 8009400:	f7f7 f994 	bl	800072c <__aeabi_ddiv>
 8009404:	463b      	mov	r3, r7
 8009406:	4632      	mov	r2, r6
 8009408:	f7f6 feae 	bl	8000168 <__aeabi_dsub>
 800940c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009410:	9f03      	ldr	r7, [sp, #12]
 8009412:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009416:	f7f7 fb0f 	bl	8000a38 <__aeabi_d2iz>
 800941a:	4604      	mov	r4, r0
 800941c:	f7f6 fff2 	bl	8000404 <__aeabi_i2d>
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009428:	f7f6 fe9e 	bl	8000168 <__aeabi_dsub>
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	3430      	adds	r4, #48	; 0x30
 8009432:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009436:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800943a:	f807 4b01 	strb.w	r4, [r7], #1
 800943e:	f7f7 fabd 	bl	80009bc <__aeabi_dcmplt>
 8009442:	2800      	cmp	r0, #0
 8009444:	d174      	bne.n	8009530 <_dtoa_r+0x648>
 8009446:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800944a:	2000      	movs	r0, #0
 800944c:	4911      	ldr	r1, [pc, #68]	; (8009494 <_dtoa_r+0x5ac>)
 800944e:	f7f6 fe8b 	bl	8000168 <__aeabi_dsub>
 8009452:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009456:	f7f7 fab1 	bl	80009bc <__aeabi_dcmplt>
 800945a:	2800      	cmp	r0, #0
 800945c:	f040 80b7 	bne.w	80095ce <_dtoa_r+0x6e6>
 8009460:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009462:	429f      	cmp	r7, r3
 8009464:	f43f af7a 	beq.w	800935c <_dtoa_r+0x474>
 8009468:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800946c:	2200      	movs	r2, #0
 800946e:	4b0a      	ldr	r3, [pc, #40]	; (8009498 <_dtoa_r+0x5b0>)
 8009470:	f7f7 f832 	bl	80004d8 <__aeabi_dmul>
 8009474:	2200      	movs	r2, #0
 8009476:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800947a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800947e:	4b06      	ldr	r3, [pc, #24]	; (8009498 <_dtoa_r+0x5b0>)
 8009480:	f7f7 f82a 	bl	80004d8 <__aeabi_dmul>
 8009484:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009488:	e7c3      	b.n	8009412 <_dtoa_r+0x52a>
 800948a:	bf00      	nop
 800948c:	0800b0b8 	.word	0x0800b0b8
 8009490:	0800b090 	.word	0x0800b090
 8009494:	3ff00000 	.word	0x3ff00000
 8009498:	40240000 	.word	0x40240000
 800949c:	401c0000 	.word	0x401c0000
 80094a0:	40140000 	.word	0x40140000
 80094a4:	3fe00000 	.word	0x3fe00000
 80094a8:	4630      	mov	r0, r6
 80094aa:	4639      	mov	r1, r7
 80094ac:	f7f7 f814 	bl	80004d8 <__aeabi_dmul>
 80094b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80094b6:	9c03      	ldr	r4, [sp, #12]
 80094b8:	9314      	str	r3, [sp, #80]	; 0x50
 80094ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094be:	f7f7 fabb 	bl	8000a38 <__aeabi_d2iz>
 80094c2:	9015      	str	r0, [sp, #84]	; 0x54
 80094c4:	f7f6 ff9e 	bl	8000404 <__aeabi_i2d>
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094d0:	f7f6 fe4a 	bl	8000168 <__aeabi_dsub>
 80094d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094d6:	4606      	mov	r6, r0
 80094d8:	3330      	adds	r3, #48	; 0x30
 80094da:	f804 3b01 	strb.w	r3, [r4], #1
 80094de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094e0:	460f      	mov	r7, r1
 80094e2:	429c      	cmp	r4, r3
 80094e4:	f04f 0200 	mov.w	r2, #0
 80094e8:	d124      	bne.n	8009534 <_dtoa_r+0x64c>
 80094ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80094ee:	4bb0      	ldr	r3, [pc, #704]	; (80097b0 <_dtoa_r+0x8c8>)
 80094f0:	f7f6 fe3c 	bl	800016c <__adddf3>
 80094f4:	4602      	mov	r2, r0
 80094f6:	460b      	mov	r3, r1
 80094f8:	4630      	mov	r0, r6
 80094fa:	4639      	mov	r1, r7
 80094fc:	f7f7 fa7c 	bl	80009f8 <__aeabi_dcmpgt>
 8009500:	2800      	cmp	r0, #0
 8009502:	d163      	bne.n	80095cc <_dtoa_r+0x6e4>
 8009504:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009508:	2000      	movs	r0, #0
 800950a:	49a9      	ldr	r1, [pc, #676]	; (80097b0 <_dtoa_r+0x8c8>)
 800950c:	f7f6 fe2c 	bl	8000168 <__aeabi_dsub>
 8009510:	4602      	mov	r2, r0
 8009512:	460b      	mov	r3, r1
 8009514:	4630      	mov	r0, r6
 8009516:	4639      	mov	r1, r7
 8009518:	f7f7 fa50 	bl	80009bc <__aeabi_dcmplt>
 800951c:	2800      	cmp	r0, #0
 800951e:	f43f af1d 	beq.w	800935c <_dtoa_r+0x474>
 8009522:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009524:	1e7b      	subs	r3, r7, #1
 8009526:	9314      	str	r3, [sp, #80]	; 0x50
 8009528:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800952c:	2b30      	cmp	r3, #48	; 0x30
 800952e:	d0f8      	beq.n	8009522 <_dtoa_r+0x63a>
 8009530:	46c2      	mov	sl, r8
 8009532:	e03b      	b.n	80095ac <_dtoa_r+0x6c4>
 8009534:	4b9f      	ldr	r3, [pc, #636]	; (80097b4 <_dtoa_r+0x8cc>)
 8009536:	f7f6 ffcf 	bl	80004d8 <__aeabi_dmul>
 800953a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800953e:	e7bc      	b.n	80094ba <_dtoa_r+0x5d2>
 8009540:	9f03      	ldr	r7, [sp, #12]
 8009542:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009546:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800954a:	4640      	mov	r0, r8
 800954c:	4649      	mov	r1, r9
 800954e:	f7f7 f8ed 	bl	800072c <__aeabi_ddiv>
 8009552:	f7f7 fa71 	bl	8000a38 <__aeabi_d2iz>
 8009556:	4604      	mov	r4, r0
 8009558:	f7f6 ff54 	bl	8000404 <__aeabi_i2d>
 800955c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009560:	f7f6 ffba 	bl	80004d8 <__aeabi_dmul>
 8009564:	4602      	mov	r2, r0
 8009566:	460b      	mov	r3, r1
 8009568:	4640      	mov	r0, r8
 800956a:	4649      	mov	r1, r9
 800956c:	f7f6 fdfc 	bl	8000168 <__aeabi_dsub>
 8009570:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009574:	f807 6b01 	strb.w	r6, [r7], #1
 8009578:	9e03      	ldr	r6, [sp, #12]
 800957a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800957e:	1bbe      	subs	r6, r7, r6
 8009580:	45b4      	cmp	ip, r6
 8009582:	4602      	mov	r2, r0
 8009584:	460b      	mov	r3, r1
 8009586:	d136      	bne.n	80095f6 <_dtoa_r+0x70e>
 8009588:	f7f6 fdf0 	bl	800016c <__adddf3>
 800958c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009590:	4680      	mov	r8, r0
 8009592:	4689      	mov	r9, r1
 8009594:	f7f7 fa30 	bl	80009f8 <__aeabi_dcmpgt>
 8009598:	bb58      	cbnz	r0, 80095f2 <_dtoa_r+0x70a>
 800959a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800959e:	4640      	mov	r0, r8
 80095a0:	4649      	mov	r1, r9
 80095a2:	f7f7 fa01 	bl	80009a8 <__aeabi_dcmpeq>
 80095a6:	b108      	cbz	r0, 80095ac <_dtoa_r+0x6c4>
 80095a8:	07e1      	lsls	r1, r4, #31
 80095aa:	d422      	bmi.n	80095f2 <_dtoa_r+0x70a>
 80095ac:	4628      	mov	r0, r5
 80095ae:	4659      	mov	r1, fp
 80095b0:	f000 faf0 	bl	8009b94 <_Bfree>
 80095b4:	2300      	movs	r3, #0
 80095b6:	703b      	strb	r3, [r7, #0]
 80095b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80095ba:	f10a 0001 	add.w	r0, sl, #1
 80095be:	6018      	str	r0, [r3, #0]
 80095c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	f43f acde 	beq.w	8008f84 <_dtoa_r+0x9c>
 80095c8:	601f      	str	r7, [r3, #0]
 80095ca:	e4db      	b.n	8008f84 <_dtoa_r+0x9c>
 80095cc:	4627      	mov	r7, r4
 80095ce:	463b      	mov	r3, r7
 80095d0:	461f      	mov	r7, r3
 80095d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095d6:	2a39      	cmp	r2, #57	; 0x39
 80095d8:	d107      	bne.n	80095ea <_dtoa_r+0x702>
 80095da:	9a03      	ldr	r2, [sp, #12]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d1f7      	bne.n	80095d0 <_dtoa_r+0x6e8>
 80095e0:	2230      	movs	r2, #48	; 0x30
 80095e2:	9903      	ldr	r1, [sp, #12]
 80095e4:	f108 0801 	add.w	r8, r8, #1
 80095e8:	700a      	strb	r2, [r1, #0]
 80095ea:	781a      	ldrb	r2, [r3, #0]
 80095ec:	3201      	adds	r2, #1
 80095ee:	701a      	strb	r2, [r3, #0]
 80095f0:	e79e      	b.n	8009530 <_dtoa_r+0x648>
 80095f2:	46d0      	mov	r8, sl
 80095f4:	e7eb      	b.n	80095ce <_dtoa_r+0x6e6>
 80095f6:	2200      	movs	r2, #0
 80095f8:	4b6e      	ldr	r3, [pc, #440]	; (80097b4 <_dtoa_r+0x8cc>)
 80095fa:	f7f6 ff6d 	bl	80004d8 <__aeabi_dmul>
 80095fe:	2200      	movs	r2, #0
 8009600:	2300      	movs	r3, #0
 8009602:	4680      	mov	r8, r0
 8009604:	4689      	mov	r9, r1
 8009606:	f7f7 f9cf 	bl	80009a8 <__aeabi_dcmpeq>
 800960a:	2800      	cmp	r0, #0
 800960c:	d09b      	beq.n	8009546 <_dtoa_r+0x65e>
 800960e:	e7cd      	b.n	80095ac <_dtoa_r+0x6c4>
 8009610:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009612:	2a00      	cmp	r2, #0
 8009614:	f000 80d0 	beq.w	80097b8 <_dtoa_r+0x8d0>
 8009618:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800961a:	2a01      	cmp	r2, #1
 800961c:	f300 80ae 	bgt.w	800977c <_dtoa_r+0x894>
 8009620:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009622:	2a00      	cmp	r2, #0
 8009624:	f000 80a6 	beq.w	8009774 <_dtoa_r+0x88c>
 8009628:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800962c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800962e:	9f06      	ldr	r7, [sp, #24]
 8009630:	9a06      	ldr	r2, [sp, #24]
 8009632:	2101      	movs	r1, #1
 8009634:	441a      	add	r2, r3
 8009636:	9206      	str	r2, [sp, #24]
 8009638:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800963a:	4628      	mov	r0, r5
 800963c:	441a      	add	r2, r3
 800963e:	9209      	str	r2, [sp, #36]	; 0x24
 8009640:	f000 fb5e 	bl	8009d00 <__i2b>
 8009644:	4606      	mov	r6, r0
 8009646:	2f00      	cmp	r7, #0
 8009648:	dd0c      	ble.n	8009664 <_dtoa_r+0x77c>
 800964a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800964c:	2b00      	cmp	r3, #0
 800964e:	dd09      	ble.n	8009664 <_dtoa_r+0x77c>
 8009650:	42bb      	cmp	r3, r7
 8009652:	bfa8      	it	ge
 8009654:	463b      	movge	r3, r7
 8009656:	9a06      	ldr	r2, [sp, #24]
 8009658:	1aff      	subs	r7, r7, r3
 800965a:	1ad2      	subs	r2, r2, r3
 800965c:	9206      	str	r2, [sp, #24]
 800965e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009660:	1ad3      	subs	r3, r2, r3
 8009662:	9309      	str	r3, [sp, #36]	; 0x24
 8009664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009666:	b1f3      	cbz	r3, 80096a6 <_dtoa_r+0x7be>
 8009668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800966a:	2b00      	cmp	r3, #0
 800966c:	f000 80a8 	beq.w	80097c0 <_dtoa_r+0x8d8>
 8009670:	2c00      	cmp	r4, #0
 8009672:	dd10      	ble.n	8009696 <_dtoa_r+0x7ae>
 8009674:	4631      	mov	r1, r6
 8009676:	4622      	mov	r2, r4
 8009678:	4628      	mov	r0, r5
 800967a:	f000 fbff 	bl	8009e7c <__pow5mult>
 800967e:	465a      	mov	r2, fp
 8009680:	4601      	mov	r1, r0
 8009682:	4606      	mov	r6, r0
 8009684:	4628      	mov	r0, r5
 8009686:	f000 fb51 	bl	8009d2c <__multiply>
 800968a:	4680      	mov	r8, r0
 800968c:	4659      	mov	r1, fp
 800968e:	4628      	mov	r0, r5
 8009690:	f000 fa80 	bl	8009b94 <_Bfree>
 8009694:	46c3      	mov	fp, r8
 8009696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009698:	1b1a      	subs	r2, r3, r4
 800969a:	d004      	beq.n	80096a6 <_dtoa_r+0x7be>
 800969c:	4659      	mov	r1, fp
 800969e:	4628      	mov	r0, r5
 80096a0:	f000 fbec 	bl	8009e7c <__pow5mult>
 80096a4:	4683      	mov	fp, r0
 80096a6:	2101      	movs	r1, #1
 80096a8:	4628      	mov	r0, r5
 80096aa:	f000 fb29 	bl	8009d00 <__i2b>
 80096ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096b0:	4604      	mov	r4, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f340 8086 	ble.w	80097c4 <_dtoa_r+0x8dc>
 80096b8:	461a      	mov	r2, r3
 80096ba:	4601      	mov	r1, r0
 80096bc:	4628      	mov	r0, r5
 80096be:	f000 fbdd 	bl	8009e7c <__pow5mult>
 80096c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096c4:	4604      	mov	r4, r0
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	dd7f      	ble.n	80097ca <_dtoa_r+0x8e2>
 80096ca:	f04f 0800 	mov.w	r8, #0
 80096ce:	6923      	ldr	r3, [r4, #16]
 80096d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80096d4:	6918      	ldr	r0, [r3, #16]
 80096d6:	f000 fac5 	bl	8009c64 <__hi0bits>
 80096da:	f1c0 0020 	rsb	r0, r0, #32
 80096de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096e0:	4418      	add	r0, r3
 80096e2:	f010 001f 	ands.w	r0, r0, #31
 80096e6:	f000 8092 	beq.w	800980e <_dtoa_r+0x926>
 80096ea:	f1c0 0320 	rsb	r3, r0, #32
 80096ee:	2b04      	cmp	r3, #4
 80096f0:	f340 808a 	ble.w	8009808 <_dtoa_r+0x920>
 80096f4:	f1c0 001c 	rsb	r0, r0, #28
 80096f8:	9b06      	ldr	r3, [sp, #24]
 80096fa:	4407      	add	r7, r0
 80096fc:	4403      	add	r3, r0
 80096fe:	9306      	str	r3, [sp, #24]
 8009700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009702:	4403      	add	r3, r0
 8009704:	9309      	str	r3, [sp, #36]	; 0x24
 8009706:	9b06      	ldr	r3, [sp, #24]
 8009708:	2b00      	cmp	r3, #0
 800970a:	dd05      	ble.n	8009718 <_dtoa_r+0x830>
 800970c:	4659      	mov	r1, fp
 800970e:	461a      	mov	r2, r3
 8009710:	4628      	mov	r0, r5
 8009712:	f000 fc0d 	bl	8009f30 <__lshift>
 8009716:	4683      	mov	fp, r0
 8009718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800971a:	2b00      	cmp	r3, #0
 800971c:	dd05      	ble.n	800972a <_dtoa_r+0x842>
 800971e:	4621      	mov	r1, r4
 8009720:	461a      	mov	r2, r3
 8009722:	4628      	mov	r0, r5
 8009724:	f000 fc04 	bl	8009f30 <__lshift>
 8009728:	4604      	mov	r4, r0
 800972a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800972c:	2b00      	cmp	r3, #0
 800972e:	d070      	beq.n	8009812 <_dtoa_r+0x92a>
 8009730:	4621      	mov	r1, r4
 8009732:	4658      	mov	r0, fp
 8009734:	f000 fc6c 	bl	800a010 <__mcmp>
 8009738:	2800      	cmp	r0, #0
 800973a:	da6a      	bge.n	8009812 <_dtoa_r+0x92a>
 800973c:	2300      	movs	r3, #0
 800973e:	4659      	mov	r1, fp
 8009740:	220a      	movs	r2, #10
 8009742:	4628      	mov	r0, r5
 8009744:	f000 fa48 	bl	8009bd8 <__multadd>
 8009748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800974a:	4683      	mov	fp, r0
 800974c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009750:	2b00      	cmp	r3, #0
 8009752:	f000 8194 	beq.w	8009a7e <_dtoa_r+0xb96>
 8009756:	4631      	mov	r1, r6
 8009758:	2300      	movs	r3, #0
 800975a:	220a      	movs	r2, #10
 800975c:	4628      	mov	r0, r5
 800975e:	f000 fa3b 	bl	8009bd8 <__multadd>
 8009762:	f1b9 0f00 	cmp.w	r9, #0
 8009766:	4606      	mov	r6, r0
 8009768:	f300 8093 	bgt.w	8009892 <_dtoa_r+0x9aa>
 800976c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800976e:	2b02      	cmp	r3, #2
 8009770:	dc57      	bgt.n	8009822 <_dtoa_r+0x93a>
 8009772:	e08e      	b.n	8009892 <_dtoa_r+0x9aa>
 8009774:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009776:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800977a:	e757      	b.n	800962c <_dtoa_r+0x744>
 800977c:	9b08      	ldr	r3, [sp, #32]
 800977e:	1e5c      	subs	r4, r3, #1
 8009780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009782:	42a3      	cmp	r3, r4
 8009784:	bfb7      	itett	lt
 8009786:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009788:	1b1c      	subge	r4, r3, r4
 800978a:	1ae2      	sublt	r2, r4, r3
 800978c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800978e:	bfbe      	ittt	lt
 8009790:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009792:	189b      	addlt	r3, r3, r2
 8009794:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009796:	9b08      	ldr	r3, [sp, #32]
 8009798:	bfb8      	it	lt
 800979a:	2400      	movlt	r4, #0
 800979c:	2b00      	cmp	r3, #0
 800979e:	bfbb      	ittet	lt
 80097a0:	9b06      	ldrlt	r3, [sp, #24]
 80097a2:	9a08      	ldrlt	r2, [sp, #32]
 80097a4:	9f06      	ldrge	r7, [sp, #24]
 80097a6:	1a9f      	sublt	r7, r3, r2
 80097a8:	bfac      	ite	ge
 80097aa:	9b08      	ldrge	r3, [sp, #32]
 80097ac:	2300      	movlt	r3, #0
 80097ae:	e73f      	b.n	8009630 <_dtoa_r+0x748>
 80097b0:	3fe00000 	.word	0x3fe00000
 80097b4:	40240000 	.word	0x40240000
 80097b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80097ba:	9f06      	ldr	r7, [sp, #24]
 80097bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80097be:	e742      	b.n	8009646 <_dtoa_r+0x75e>
 80097c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097c2:	e76b      	b.n	800969c <_dtoa_r+0x7b4>
 80097c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	dc19      	bgt.n	80097fe <_dtoa_r+0x916>
 80097ca:	9b04      	ldr	r3, [sp, #16]
 80097cc:	b9bb      	cbnz	r3, 80097fe <_dtoa_r+0x916>
 80097ce:	9b05      	ldr	r3, [sp, #20]
 80097d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097d4:	b99b      	cbnz	r3, 80097fe <_dtoa_r+0x916>
 80097d6:	9b05      	ldr	r3, [sp, #20]
 80097d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097dc:	0d1b      	lsrs	r3, r3, #20
 80097de:	051b      	lsls	r3, r3, #20
 80097e0:	b183      	cbz	r3, 8009804 <_dtoa_r+0x91c>
 80097e2:	f04f 0801 	mov.w	r8, #1
 80097e6:	9b06      	ldr	r3, [sp, #24]
 80097e8:	3301      	adds	r3, #1
 80097ea:	9306      	str	r3, [sp, #24]
 80097ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ee:	3301      	adds	r3, #1
 80097f0:	9309      	str	r3, [sp, #36]	; 0x24
 80097f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f47f af6a 	bne.w	80096ce <_dtoa_r+0x7e6>
 80097fa:	2001      	movs	r0, #1
 80097fc:	e76f      	b.n	80096de <_dtoa_r+0x7f6>
 80097fe:	f04f 0800 	mov.w	r8, #0
 8009802:	e7f6      	b.n	80097f2 <_dtoa_r+0x90a>
 8009804:	4698      	mov	r8, r3
 8009806:	e7f4      	b.n	80097f2 <_dtoa_r+0x90a>
 8009808:	f43f af7d 	beq.w	8009706 <_dtoa_r+0x81e>
 800980c:	4618      	mov	r0, r3
 800980e:	301c      	adds	r0, #28
 8009810:	e772      	b.n	80096f8 <_dtoa_r+0x810>
 8009812:	9b08      	ldr	r3, [sp, #32]
 8009814:	2b00      	cmp	r3, #0
 8009816:	dc36      	bgt.n	8009886 <_dtoa_r+0x99e>
 8009818:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800981a:	2b02      	cmp	r3, #2
 800981c:	dd33      	ble.n	8009886 <_dtoa_r+0x99e>
 800981e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009822:	f1b9 0f00 	cmp.w	r9, #0
 8009826:	d10d      	bne.n	8009844 <_dtoa_r+0x95c>
 8009828:	4621      	mov	r1, r4
 800982a:	464b      	mov	r3, r9
 800982c:	2205      	movs	r2, #5
 800982e:	4628      	mov	r0, r5
 8009830:	f000 f9d2 	bl	8009bd8 <__multadd>
 8009834:	4601      	mov	r1, r0
 8009836:	4604      	mov	r4, r0
 8009838:	4658      	mov	r0, fp
 800983a:	f000 fbe9 	bl	800a010 <__mcmp>
 800983e:	2800      	cmp	r0, #0
 8009840:	f73f adb8 	bgt.w	80093b4 <_dtoa_r+0x4cc>
 8009844:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009846:	9f03      	ldr	r7, [sp, #12]
 8009848:	ea6f 0a03 	mvn.w	sl, r3
 800984c:	f04f 0800 	mov.w	r8, #0
 8009850:	4621      	mov	r1, r4
 8009852:	4628      	mov	r0, r5
 8009854:	f000 f99e 	bl	8009b94 <_Bfree>
 8009858:	2e00      	cmp	r6, #0
 800985a:	f43f aea7 	beq.w	80095ac <_dtoa_r+0x6c4>
 800985e:	f1b8 0f00 	cmp.w	r8, #0
 8009862:	d005      	beq.n	8009870 <_dtoa_r+0x988>
 8009864:	45b0      	cmp	r8, r6
 8009866:	d003      	beq.n	8009870 <_dtoa_r+0x988>
 8009868:	4641      	mov	r1, r8
 800986a:	4628      	mov	r0, r5
 800986c:	f000 f992 	bl	8009b94 <_Bfree>
 8009870:	4631      	mov	r1, r6
 8009872:	4628      	mov	r0, r5
 8009874:	f000 f98e 	bl	8009b94 <_Bfree>
 8009878:	e698      	b.n	80095ac <_dtoa_r+0x6c4>
 800987a:	2400      	movs	r4, #0
 800987c:	4626      	mov	r6, r4
 800987e:	e7e1      	b.n	8009844 <_dtoa_r+0x95c>
 8009880:	46c2      	mov	sl, r8
 8009882:	4626      	mov	r6, r4
 8009884:	e596      	b.n	80093b4 <_dtoa_r+0x4cc>
 8009886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009888:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800988c:	2b00      	cmp	r3, #0
 800988e:	f000 80fd 	beq.w	8009a8c <_dtoa_r+0xba4>
 8009892:	2f00      	cmp	r7, #0
 8009894:	dd05      	ble.n	80098a2 <_dtoa_r+0x9ba>
 8009896:	4631      	mov	r1, r6
 8009898:	463a      	mov	r2, r7
 800989a:	4628      	mov	r0, r5
 800989c:	f000 fb48 	bl	8009f30 <__lshift>
 80098a0:	4606      	mov	r6, r0
 80098a2:	f1b8 0f00 	cmp.w	r8, #0
 80098a6:	d05c      	beq.n	8009962 <_dtoa_r+0xa7a>
 80098a8:	4628      	mov	r0, r5
 80098aa:	6871      	ldr	r1, [r6, #4]
 80098ac:	f000 f932 	bl	8009b14 <_Balloc>
 80098b0:	4607      	mov	r7, r0
 80098b2:	b928      	cbnz	r0, 80098c0 <_dtoa_r+0x9d8>
 80098b4:	4602      	mov	r2, r0
 80098b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80098ba:	4b7f      	ldr	r3, [pc, #508]	; (8009ab8 <_dtoa_r+0xbd0>)
 80098bc:	f7ff bb28 	b.w	8008f10 <_dtoa_r+0x28>
 80098c0:	6932      	ldr	r2, [r6, #16]
 80098c2:	f106 010c 	add.w	r1, r6, #12
 80098c6:	3202      	adds	r2, #2
 80098c8:	0092      	lsls	r2, r2, #2
 80098ca:	300c      	adds	r0, #12
 80098cc:	f000 f914 	bl	8009af8 <memcpy>
 80098d0:	2201      	movs	r2, #1
 80098d2:	4639      	mov	r1, r7
 80098d4:	4628      	mov	r0, r5
 80098d6:	f000 fb2b 	bl	8009f30 <__lshift>
 80098da:	46b0      	mov	r8, r6
 80098dc:	4606      	mov	r6, r0
 80098de:	9b03      	ldr	r3, [sp, #12]
 80098e0:	3301      	adds	r3, #1
 80098e2:	9308      	str	r3, [sp, #32]
 80098e4:	9b03      	ldr	r3, [sp, #12]
 80098e6:	444b      	add	r3, r9
 80098e8:	930a      	str	r3, [sp, #40]	; 0x28
 80098ea:	9b04      	ldr	r3, [sp, #16]
 80098ec:	f003 0301 	and.w	r3, r3, #1
 80098f0:	9309      	str	r3, [sp, #36]	; 0x24
 80098f2:	9b08      	ldr	r3, [sp, #32]
 80098f4:	4621      	mov	r1, r4
 80098f6:	3b01      	subs	r3, #1
 80098f8:	4658      	mov	r0, fp
 80098fa:	9304      	str	r3, [sp, #16]
 80098fc:	f7ff fa68 	bl	8008dd0 <quorem>
 8009900:	4603      	mov	r3, r0
 8009902:	4641      	mov	r1, r8
 8009904:	3330      	adds	r3, #48	; 0x30
 8009906:	9006      	str	r0, [sp, #24]
 8009908:	4658      	mov	r0, fp
 800990a:	930b      	str	r3, [sp, #44]	; 0x2c
 800990c:	f000 fb80 	bl	800a010 <__mcmp>
 8009910:	4632      	mov	r2, r6
 8009912:	4681      	mov	r9, r0
 8009914:	4621      	mov	r1, r4
 8009916:	4628      	mov	r0, r5
 8009918:	f000 fb96 	bl	800a048 <__mdiff>
 800991c:	68c2      	ldr	r2, [r0, #12]
 800991e:	4607      	mov	r7, r0
 8009920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009922:	bb02      	cbnz	r2, 8009966 <_dtoa_r+0xa7e>
 8009924:	4601      	mov	r1, r0
 8009926:	4658      	mov	r0, fp
 8009928:	f000 fb72 	bl	800a010 <__mcmp>
 800992c:	4602      	mov	r2, r0
 800992e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009930:	4639      	mov	r1, r7
 8009932:	4628      	mov	r0, r5
 8009934:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009938:	f000 f92c 	bl	8009b94 <_Bfree>
 800993c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800993e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009940:	9f08      	ldr	r7, [sp, #32]
 8009942:	ea43 0102 	orr.w	r1, r3, r2
 8009946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009948:	430b      	orrs	r3, r1
 800994a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800994c:	d10d      	bne.n	800996a <_dtoa_r+0xa82>
 800994e:	2b39      	cmp	r3, #57	; 0x39
 8009950:	d029      	beq.n	80099a6 <_dtoa_r+0xabe>
 8009952:	f1b9 0f00 	cmp.w	r9, #0
 8009956:	dd01      	ble.n	800995c <_dtoa_r+0xa74>
 8009958:	9b06      	ldr	r3, [sp, #24]
 800995a:	3331      	adds	r3, #49	; 0x31
 800995c:	9a04      	ldr	r2, [sp, #16]
 800995e:	7013      	strb	r3, [r2, #0]
 8009960:	e776      	b.n	8009850 <_dtoa_r+0x968>
 8009962:	4630      	mov	r0, r6
 8009964:	e7b9      	b.n	80098da <_dtoa_r+0x9f2>
 8009966:	2201      	movs	r2, #1
 8009968:	e7e2      	b.n	8009930 <_dtoa_r+0xa48>
 800996a:	f1b9 0f00 	cmp.w	r9, #0
 800996e:	db06      	blt.n	800997e <_dtoa_r+0xa96>
 8009970:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009972:	ea41 0909 	orr.w	r9, r1, r9
 8009976:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009978:	ea59 0101 	orrs.w	r1, r9, r1
 800997c:	d120      	bne.n	80099c0 <_dtoa_r+0xad8>
 800997e:	2a00      	cmp	r2, #0
 8009980:	ddec      	ble.n	800995c <_dtoa_r+0xa74>
 8009982:	4659      	mov	r1, fp
 8009984:	2201      	movs	r2, #1
 8009986:	4628      	mov	r0, r5
 8009988:	9308      	str	r3, [sp, #32]
 800998a:	f000 fad1 	bl	8009f30 <__lshift>
 800998e:	4621      	mov	r1, r4
 8009990:	4683      	mov	fp, r0
 8009992:	f000 fb3d 	bl	800a010 <__mcmp>
 8009996:	2800      	cmp	r0, #0
 8009998:	9b08      	ldr	r3, [sp, #32]
 800999a:	dc02      	bgt.n	80099a2 <_dtoa_r+0xaba>
 800999c:	d1de      	bne.n	800995c <_dtoa_r+0xa74>
 800999e:	07da      	lsls	r2, r3, #31
 80099a0:	d5dc      	bpl.n	800995c <_dtoa_r+0xa74>
 80099a2:	2b39      	cmp	r3, #57	; 0x39
 80099a4:	d1d8      	bne.n	8009958 <_dtoa_r+0xa70>
 80099a6:	2339      	movs	r3, #57	; 0x39
 80099a8:	9a04      	ldr	r2, [sp, #16]
 80099aa:	7013      	strb	r3, [r2, #0]
 80099ac:	463b      	mov	r3, r7
 80099ae:	461f      	mov	r7, r3
 80099b0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80099b4:	3b01      	subs	r3, #1
 80099b6:	2a39      	cmp	r2, #57	; 0x39
 80099b8:	d050      	beq.n	8009a5c <_dtoa_r+0xb74>
 80099ba:	3201      	adds	r2, #1
 80099bc:	701a      	strb	r2, [r3, #0]
 80099be:	e747      	b.n	8009850 <_dtoa_r+0x968>
 80099c0:	2a00      	cmp	r2, #0
 80099c2:	dd03      	ble.n	80099cc <_dtoa_r+0xae4>
 80099c4:	2b39      	cmp	r3, #57	; 0x39
 80099c6:	d0ee      	beq.n	80099a6 <_dtoa_r+0xabe>
 80099c8:	3301      	adds	r3, #1
 80099ca:	e7c7      	b.n	800995c <_dtoa_r+0xa74>
 80099cc:	9a08      	ldr	r2, [sp, #32]
 80099ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80099d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80099d4:	428a      	cmp	r2, r1
 80099d6:	d02a      	beq.n	8009a2e <_dtoa_r+0xb46>
 80099d8:	4659      	mov	r1, fp
 80099da:	2300      	movs	r3, #0
 80099dc:	220a      	movs	r2, #10
 80099de:	4628      	mov	r0, r5
 80099e0:	f000 f8fa 	bl	8009bd8 <__multadd>
 80099e4:	45b0      	cmp	r8, r6
 80099e6:	4683      	mov	fp, r0
 80099e8:	f04f 0300 	mov.w	r3, #0
 80099ec:	f04f 020a 	mov.w	r2, #10
 80099f0:	4641      	mov	r1, r8
 80099f2:	4628      	mov	r0, r5
 80099f4:	d107      	bne.n	8009a06 <_dtoa_r+0xb1e>
 80099f6:	f000 f8ef 	bl	8009bd8 <__multadd>
 80099fa:	4680      	mov	r8, r0
 80099fc:	4606      	mov	r6, r0
 80099fe:	9b08      	ldr	r3, [sp, #32]
 8009a00:	3301      	adds	r3, #1
 8009a02:	9308      	str	r3, [sp, #32]
 8009a04:	e775      	b.n	80098f2 <_dtoa_r+0xa0a>
 8009a06:	f000 f8e7 	bl	8009bd8 <__multadd>
 8009a0a:	4631      	mov	r1, r6
 8009a0c:	4680      	mov	r8, r0
 8009a0e:	2300      	movs	r3, #0
 8009a10:	220a      	movs	r2, #10
 8009a12:	4628      	mov	r0, r5
 8009a14:	f000 f8e0 	bl	8009bd8 <__multadd>
 8009a18:	4606      	mov	r6, r0
 8009a1a:	e7f0      	b.n	80099fe <_dtoa_r+0xb16>
 8009a1c:	f1b9 0f00 	cmp.w	r9, #0
 8009a20:	bfcc      	ite	gt
 8009a22:	464f      	movgt	r7, r9
 8009a24:	2701      	movle	r7, #1
 8009a26:	f04f 0800 	mov.w	r8, #0
 8009a2a:	9a03      	ldr	r2, [sp, #12]
 8009a2c:	4417      	add	r7, r2
 8009a2e:	4659      	mov	r1, fp
 8009a30:	2201      	movs	r2, #1
 8009a32:	4628      	mov	r0, r5
 8009a34:	9308      	str	r3, [sp, #32]
 8009a36:	f000 fa7b 	bl	8009f30 <__lshift>
 8009a3a:	4621      	mov	r1, r4
 8009a3c:	4683      	mov	fp, r0
 8009a3e:	f000 fae7 	bl	800a010 <__mcmp>
 8009a42:	2800      	cmp	r0, #0
 8009a44:	dcb2      	bgt.n	80099ac <_dtoa_r+0xac4>
 8009a46:	d102      	bne.n	8009a4e <_dtoa_r+0xb66>
 8009a48:	9b08      	ldr	r3, [sp, #32]
 8009a4a:	07db      	lsls	r3, r3, #31
 8009a4c:	d4ae      	bmi.n	80099ac <_dtoa_r+0xac4>
 8009a4e:	463b      	mov	r3, r7
 8009a50:	461f      	mov	r7, r3
 8009a52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a56:	2a30      	cmp	r2, #48	; 0x30
 8009a58:	d0fa      	beq.n	8009a50 <_dtoa_r+0xb68>
 8009a5a:	e6f9      	b.n	8009850 <_dtoa_r+0x968>
 8009a5c:	9a03      	ldr	r2, [sp, #12]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d1a5      	bne.n	80099ae <_dtoa_r+0xac6>
 8009a62:	2331      	movs	r3, #49	; 0x31
 8009a64:	f10a 0a01 	add.w	sl, sl, #1
 8009a68:	e779      	b.n	800995e <_dtoa_r+0xa76>
 8009a6a:	4b14      	ldr	r3, [pc, #80]	; (8009abc <_dtoa_r+0xbd4>)
 8009a6c:	f7ff baa8 	b.w	8008fc0 <_dtoa_r+0xd8>
 8009a70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f47f aa81 	bne.w	8008f7a <_dtoa_r+0x92>
 8009a78:	4b11      	ldr	r3, [pc, #68]	; (8009ac0 <_dtoa_r+0xbd8>)
 8009a7a:	f7ff baa1 	b.w	8008fc0 <_dtoa_r+0xd8>
 8009a7e:	f1b9 0f00 	cmp.w	r9, #0
 8009a82:	dc03      	bgt.n	8009a8c <_dtoa_r+0xba4>
 8009a84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	f73f aecb 	bgt.w	8009822 <_dtoa_r+0x93a>
 8009a8c:	9f03      	ldr	r7, [sp, #12]
 8009a8e:	4621      	mov	r1, r4
 8009a90:	4658      	mov	r0, fp
 8009a92:	f7ff f99d 	bl	8008dd0 <quorem>
 8009a96:	9a03      	ldr	r2, [sp, #12]
 8009a98:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009a9c:	f807 3b01 	strb.w	r3, [r7], #1
 8009aa0:	1aba      	subs	r2, r7, r2
 8009aa2:	4591      	cmp	r9, r2
 8009aa4:	ddba      	ble.n	8009a1c <_dtoa_r+0xb34>
 8009aa6:	4659      	mov	r1, fp
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	220a      	movs	r2, #10
 8009aac:	4628      	mov	r0, r5
 8009aae:	f000 f893 	bl	8009bd8 <__multadd>
 8009ab2:	4683      	mov	fp, r0
 8009ab4:	e7eb      	b.n	8009a8e <_dtoa_r+0xba6>
 8009ab6:	bf00      	nop
 8009ab8:	0800b023 	.word	0x0800b023
 8009abc:	0800af80 	.word	0x0800af80
 8009ac0:	0800afa4 	.word	0x0800afa4

08009ac4 <_localeconv_r>:
 8009ac4:	4800      	ldr	r0, [pc, #0]	; (8009ac8 <_localeconv_r+0x4>)
 8009ac6:	4770      	bx	lr
 8009ac8:	20000170 	.word	0x20000170

08009acc <malloc>:
 8009acc:	4b02      	ldr	r3, [pc, #8]	; (8009ad8 <malloc+0xc>)
 8009ace:	4601      	mov	r1, r0
 8009ad0:	6818      	ldr	r0, [r3, #0]
 8009ad2:	f000 bc1d 	b.w	800a310 <_malloc_r>
 8009ad6:	bf00      	nop
 8009ad8:	2000001c 	.word	0x2000001c

08009adc <memchr>:
 8009adc:	4603      	mov	r3, r0
 8009ade:	b510      	push	{r4, lr}
 8009ae0:	b2c9      	uxtb	r1, r1
 8009ae2:	4402      	add	r2, r0
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	d101      	bne.n	8009aee <memchr+0x12>
 8009aea:	2000      	movs	r0, #0
 8009aec:	e003      	b.n	8009af6 <memchr+0x1a>
 8009aee:	7804      	ldrb	r4, [r0, #0]
 8009af0:	3301      	adds	r3, #1
 8009af2:	428c      	cmp	r4, r1
 8009af4:	d1f6      	bne.n	8009ae4 <memchr+0x8>
 8009af6:	bd10      	pop	{r4, pc}

08009af8 <memcpy>:
 8009af8:	440a      	add	r2, r1
 8009afa:	4291      	cmp	r1, r2
 8009afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b00:	d100      	bne.n	8009b04 <memcpy+0xc>
 8009b02:	4770      	bx	lr
 8009b04:	b510      	push	{r4, lr}
 8009b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b0a:	4291      	cmp	r1, r2
 8009b0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b10:	d1f9      	bne.n	8009b06 <memcpy+0xe>
 8009b12:	bd10      	pop	{r4, pc}

08009b14 <_Balloc>:
 8009b14:	b570      	push	{r4, r5, r6, lr}
 8009b16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b18:	4604      	mov	r4, r0
 8009b1a:	460d      	mov	r5, r1
 8009b1c:	b976      	cbnz	r6, 8009b3c <_Balloc+0x28>
 8009b1e:	2010      	movs	r0, #16
 8009b20:	f7ff ffd4 	bl	8009acc <malloc>
 8009b24:	4602      	mov	r2, r0
 8009b26:	6260      	str	r0, [r4, #36]	; 0x24
 8009b28:	b920      	cbnz	r0, 8009b34 <_Balloc+0x20>
 8009b2a:	2166      	movs	r1, #102	; 0x66
 8009b2c:	4b17      	ldr	r3, [pc, #92]	; (8009b8c <_Balloc+0x78>)
 8009b2e:	4818      	ldr	r0, [pc, #96]	; (8009b90 <_Balloc+0x7c>)
 8009b30:	f000 fc72 	bl	800a418 <__assert_func>
 8009b34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b38:	6006      	str	r6, [r0, #0]
 8009b3a:	60c6      	str	r6, [r0, #12]
 8009b3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b3e:	68f3      	ldr	r3, [r6, #12]
 8009b40:	b183      	cbz	r3, 8009b64 <_Balloc+0x50>
 8009b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b4a:	b9b8      	cbnz	r0, 8009b7c <_Balloc+0x68>
 8009b4c:	2101      	movs	r1, #1
 8009b4e:	fa01 f605 	lsl.w	r6, r1, r5
 8009b52:	1d72      	adds	r2, r6, #5
 8009b54:	4620      	mov	r0, r4
 8009b56:	0092      	lsls	r2, r2, #2
 8009b58:	f000 fb5e 	bl	800a218 <_calloc_r>
 8009b5c:	b160      	cbz	r0, 8009b78 <_Balloc+0x64>
 8009b5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b62:	e00e      	b.n	8009b82 <_Balloc+0x6e>
 8009b64:	2221      	movs	r2, #33	; 0x21
 8009b66:	2104      	movs	r1, #4
 8009b68:	4620      	mov	r0, r4
 8009b6a:	f000 fb55 	bl	800a218 <_calloc_r>
 8009b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b70:	60f0      	str	r0, [r6, #12]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d1e4      	bne.n	8009b42 <_Balloc+0x2e>
 8009b78:	2000      	movs	r0, #0
 8009b7a:	bd70      	pop	{r4, r5, r6, pc}
 8009b7c:	6802      	ldr	r2, [r0, #0]
 8009b7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b82:	2300      	movs	r3, #0
 8009b84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b88:	e7f7      	b.n	8009b7a <_Balloc+0x66>
 8009b8a:	bf00      	nop
 8009b8c:	0800afb1 	.word	0x0800afb1
 8009b90:	0800b034 	.word	0x0800b034

08009b94 <_Bfree>:
 8009b94:	b570      	push	{r4, r5, r6, lr}
 8009b96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b98:	4605      	mov	r5, r0
 8009b9a:	460c      	mov	r4, r1
 8009b9c:	b976      	cbnz	r6, 8009bbc <_Bfree+0x28>
 8009b9e:	2010      	movs	r0, #16
 8009ba0:	f7ff ff94 	bl	8009acc <malloc>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	6268      	str	r0, [r5, #36]	; 0x24
 8009ba8:	b920      	cbnz	r0, 8009bb4 <_Bfree+0x20>
 8009baa:	218a      	movs	r1, #138	; 0x8a
 8009bac:	4b08      	ldr	r3, [pc, #32]	; (8009bd0 <_Bfree+0x3c>)
 8009bae:	4809      	ldr	r0, [pc, #36]	; (8009bd4 <_Bfree+0x40>)
 8009bb0:	f000 fc32 	bl	800a418 <__assert_func>
 8009bb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bb8:	6006      	str	r6, [r0, #0]
 8009bba:	60c6      	str	r6, [r0, #12]
 8009bbc:	b13c      	cbz	r4, 8009bce <_Bfree+0x3a>
 8009bbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009bc0:	6862      	ldr	r2, [r4, #4]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009bc8:	6021      	str	r1, [r4, #0]
 8009bca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009bce:	bd70      	pop	{r4, r5, r6, pc}
 8009bd0:	0800afb1 	.word	0x0800afb1
 8009bd4:	0800b034 	.word	0x0800b034

08009bd8 <__multadd>:
 8009bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bdc:	4607      	mov	r7, r0
 8009bde:	460c      	mov	r4, r1
 8009be0:	461e      	mov	r6, r3
 8009be2:	2000      	movs	r0, #0
 8009be4:	690d      	ldr	r5, [r1, #16]
 8009be6:	f101 0c14 	add.w	ip, r1, #20
 8009bea:	f8dc 3000 	ldr.w	r3, [ip]
 8009bee:	3001      	adds	r0, #1
 8009bf0:	b299      	uxth	r1, r3
 8009bf2:	fb02 6101 	mla	r1, r2, r1, r6
 8009bf6:	0c1e      	lsrs	r6, r3, #16
 8009bf8:	0c0b      	lsrs	r3, r1, #16
 8009bfa:	fb02 3306 	mla	r3, r2, r6, r3
 8009bfe:	b289      	uxth	r1, r1
 8009c00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c04:	4285      	cmp	r5, r0
 8009c06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c0a:	f84c 1b04 	str.w	r1, [ip], #4
 8009c0e:	dcec      	bgt.n	8009bea <__multadd+0x12>
 8009c10:	b30e      	cbz	r6, 8009c56 <__multadd+0x7e>
 8009c12:	68a3      	ldr	r3, [r4, #8]
 8009c14:	42ab      	cmp	r3, r5
 8009c16:	dc19      	bgt.n	8009c4c <__multadd+0x74>
 8009c18:	6861      	ldr	r1, [r4, #4]
 8009c1a:	4638      	mov	r0, r7
 8009c1c:	3101      	adds	r1, #1
 8009c1e:	f7ff ff79 	bl	8009b14 <_Balloc>
 8009c22:	4680      	mov	r8, r0
 8009c24:	b928      	cbnz	r0, 8009c32 <__multadd+0x5a>
 8009c26:	4602      	mov	r2, r0
 8009c28:	21b5      	movs	r1, #181	; 0xb5
 8009c2a:	4b0c      	ldr	r3, [pc, #48]	; (8009c5c <__multadd+0x84>)
 8009c2c:	480c      	ldr	r0, [pc, #48]	; (8009c60 <__multadd+0x88>)
 8009c2e:	f000 fbf3 	bl	800a418 <__assert_func>
 8009c32:	6922      	ldr	r2, [r4, #16]
 8009c34:	f104 010c 	add.w	r1, r4, #12
 8009c38:	3202      	adds	r2, #2
 8009c3a:	0092      	lsls	r2, r2, #2
 8009c3c:	300c      	adds	r0, #12
 8009c3e:	f7ff ff5b 	bl	8009af8 <memcpy>
 8009c42:	4621      	mov	r1, r4
 8009c44:	4638      	mov	r0, r7
 8009c46:	f7ff ffa5 	bl	8009b94 <_Bfree>
 8009c4a:	4644      	mov	r4, r8
 8009c4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c50:	3501      	adds	r5, #1
 8009c52:	615e      	str	r6, [r3, #20]
 8009c54:	6125      	str	r5, [r4, #16]
 8009c56:	4620      	mov	r0, r4
 8009c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c5c:	0800b023 	.word	0x0800b023
 8009c60:	0800b034 	.word	0x0800b034

08009c64 <__hi0bits>:
 8009c64:	0c02      	lsrs	r2, r0, #16
 8009c66:	0412      	lsls	r2, r2, #16
 8009c68:	4603      	mov	r3, r0
 8009c6a:	b9ca      	cbnz	r2, 8009ca0 <__hi0bits+0x3c>
 8009c6c:	0403      	lsls	r3, r0, #16
 8009c6e:	2010      	movs	r0, #16
 8009c70:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009c74:	bf04      	itt	eq
 8009c76:	021b      	lsleq	r3, r3, #8
 8009c78:	3008      	addeq	r0, #8
 8009c7a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009c7e:	bf04      	itt	eq
 8009c80:	011b      	lsleq	r3, r3, #4
 8009c82:	3004      	addeq	r0, #4
 8009c84:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009c88:	bf04      	itt	eq
 8009c8a:	009b      	lsleq	r3, r3, #2
 8009c8c:	3002      	addeq	r0, #2
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	db05      	blt.n	8009c9e <__hi0bits+0x3a>
 8009c92:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009c96:	f100 0001 	add.w	r0, r0, #1
 8009c9a:	bf08      	it	eq
 8009c9c:	2020      	moveq	r0, #32
 8009c9e:	4770      	bx	lr
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	e7e5      	b.n	8009c70 <__hi0bits+0xc>

08009ca4 <__lo0bits>:
 8009ca4:	6803      	ldr	r3, [r0, #0]
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	f013 0007 	ands.w	r0, r3, #7
 8009cac:	d00b      	beq.n	8009cc6 <__lo0bits+0x22>
 8009cae:	07d9      	lsls	r1, r3, #31
 8009cb0:	d421      	bmi.n	8009cf6 <__lo0bits+0x52>
 8009cb2:	0798      	lsls	r0, r3, #30
 8009cb4:	bf49      	itett	mi
 8009cb6:	085b      	lsrmi	r3, r3, #1
 8009cb8:	089b      	lsrpl	r3, r3, #2
 8009cba:	2001      	movmi	r0, #1
 8009cbc:	6013      	strmi	r3, [r2, #0]
 8009cbe:	bf5c      	itt	pl
 8009cc0:	2002      	movpl	r0, #2
 8009cc2:	6013      	strpl	r3, [r2, #0]
 8009cc4:	4770      	bx	lr
 8009cc6:	b299      	uxth	r1, r3
 8009cc8:	b909      	cbnz	r1, 8009cce <__lo0bits+0x2a>
 8009cca:	2010      	movs	r0, #16
 8009ccc:	0c1b      	lsrs	r3, r3, #16
 8009cce:	b2d9      	uxtb	r1, r3
 8009cd0:	b909      	cbnz	r1, 8009cd6 <__lo0bits+0x32>
 8009cd2:	3008      	adds	r0, #8
 8009cd4:	0a1b      	lsrs	r3, r3, #8
 8009cd6:	0719      	lsls	r1, r3, #28
 8009cd8:	bf04      	itt	eq
 8009cda:	091b      	lsreq	r3, r3, #4
 8009cdc:	3004      	addeq	r0, #4
 8009cde:	0799      	lsls	r1, r3, #30
 8009ce0:	bf04      	itt	eq
 8009ce2:	089b      	lsreq	r3, r3, #2
 8009ce4:	3002      	addeq	r0, #2
 8009ce6:	07d9      	lsls	r1, r3, #31
 8009ce8:	d403      	bmi.n	8009cf2 <__lo0bits+0x4e>
 8009cea:	085b      	lsrs	r3, r3, #1
 8009cec:	f100 0001 	add.w	r0, r0, #1
 8009cf0:	d003      	beq.n	8009cfa <__lo0bits+0x56>
 8009cf2:	6013      	str	r3, [r2, #0]
 8009cf4:	4770      	bx	lr
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	4770      	bx	lr
 8009cfa:	2020      	movs	r0, #32
 8009cfc:	4770      	bx	lr
	...

08009d00 <__i2b>:
 8009d00:	b510      	push	{r4, lr}
 8009d02:	460c      	mov	r4, r1
 8009d04:	2101      	movs	r1, #1
 8009d06:	f7ff ff05 	bl	8009b14 <_Balloc>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	b928      	cbnz	r0, 8009d1a <__i2b+0x1a>
 8009d0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009d12:	4b04      	ldr	r3, [pc, #16]	; (8009d24 <__i2b+0x24>)
 8009d14:	4804      	ldr	r0, [pc, #16]	; (8009d28 <__i2b+0x28>)
 8009d16:	f000 fb7f 	bl	800a418 <__assert_func>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	6144      	str	r4, [r0, #20]
 8009d1e:	6103      	str	r3, [r0, #16]
 8009d20:	bd10      	pop	{r4, pc}
 8009d22:	bf00      	nop
 8009d24:	0800b023 	.word	0x0800b023
 8009d28:	0800b034 	.word	0x0800b034

08009d2c <__multiply>:
 8009d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d30:	4691      	mov	r9, r2
 8009d32:	690a      	ldr	r2, [r1, #16]
 8009d34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d38:	460c      	mov	r4, r1
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	bfbe      	ittt	lt
 8009d3e:	460b      	movlt	r3, r1
 8009d40:	464c      	movlt	r4, r9
 8009d42:	4699      	movlt	r9, r3
 8009d44:	6927      	ldr	r7, [r4, #16]
 8009d46:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d4a:	68a3      	ldr	r3, [r4, #8]
 8009d4c:	6861      	ldr	r1, [r4, #4]
 8009d4e:	eb07 060a 	add.w	r6, r7, sl
 8009d52:	42b3      	cmp	r3, r6
 8009d54:	b085      	sub	sp, #20
 8009d56:	bfb8      	it	lt
 8009d58:	3101      	addlt	r1, #1
 8009d5a:	f7ff fedb 	bl	8009b14 <_Balloc>
 8009d5e:	b930      	cbnz	r0, 8009d6e <__multiply+0x42>
 8009d60:	4602      	mov	r2, r0
 8009d62:	f240 115d 	movw	r1, #349	; 0x15d
 8009d66:	4b43      	ldr	r3, [pc, #268]	; (8009e74 <__multiply+0x148>)
 8009d68:	4843      	ldr	r0, [pc, #268]	; (8009e78 <__multiply+0x14c>)
 8009d6a:	f000 fb55 	bl	800a418 <__assert_func>
 8009d6e:	f100 0514 	add.w	r5, r0, #20
 8009d72:	462b      	mov	r3, r5
 8009d74:	2200      	movs	r2, #0
 8009d76:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d7a:	4543      	cmp	r3, r8
 8009d7c:	d321      	bcc.n	8009dc2 <__multiply+0x96>
 8009d7e:	f104 0314 	add.w	r3, r4, #20
 8009d82:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d86:	f109 0314 	add.w	r3, r9, #20
 8009d8a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d8e:	9202      	str	r2, [sp, #8]
 8009d90:	1b3a      	subs	r2, r7, r4
 8009d92:	3a15      	subs	r2, #21
 8009d94:	f022 0203 	bic.w	r2, r2, #3
 8009d98:	3204      	adds	r2, #4
 8009d9a:	f104 0115 	add.w	r1, r4, #21
 8009d9e:	428f      	cmp	r7, r1
 8009da0:	bf38      	it	cc
 8009da2:	2204      	movcc	r2, #4
 8009da4:	9201      	str	r2, [sp, #4]
 8009da6:	9a02      	ldr	r2, [sp, #8]
 8009da8:	9303      	str	r3, [sp, #12]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d80c      	bhi.n	8009dc8 <__multiply+0x9c>
 8009dae:	2e00      	cmp	r6, #0
 8009db0:	dd03      	ble.n	8009dba <__multiply+0x8e>
 8009db2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d059      	beq.n	8009e6e <__multiply+0x142>
 8009dba:	6106      	str	r6, [r0, #16]
 8009dbc:	b005      	add	sp, #20
 8009dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc2:	f843 2b04 	str.w	r2, [r3], #4
 8009dc6:	e7d8      	b.n	8009d7a <__multiply+0x4e>
 8009dc8:	f8b3 a000 	ldrh.w	sl, [r3]
 8009dcc:	f1ba 0f00 	cmp.w	sl, #0
 8009dd0:	d023      	beq.n	8009e1a <__multiply+0xee>
 8009dd2:	46a9      	mov	r9, r5
 8009dd4:	f04f 0c00 	mov.w	ip, #0
 8009dd8:	f104 0e14 	add.w	lr, r4, #20
 8009ddc:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009de0:	f8d9 1000 	ldr.w	r1, [r9]
 8009de4:	fa1f fb82 	uxth.w	fp, r2
 8009de8:	b289      	uxth	r1, r1
 8009dea:	fb0a 110b 	mla	r1, sl, fp, r1
 8009dee:	4461      	add	r1, ip
 8009df0:	f8d9 c000 	ldr.w	ip, [r9]
 8009df4:	0c12      	lsrs	r2, r2, #16
 8009df6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009dfa:	fb0a c202 	mla	r2, sl, r2, ip
 8009dfe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e02:	b289      	uxth	r1, r1
 8009e04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e08:	4577      	cmp	r7, lr
 8009e0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e0e:	f849 1b04 	str.w	r1, [r9], #4
 8009e12:	d8e3      	bhi.n	8009ddc <__multiply+0xb0>
 8009e14:	9a01      	ldr	r2, [sp, #4]
 8009e16:	f845 c002 	str.w	ip, [r5, r2]
 8009e1a:	9a03      	ldr	r2, [sp, #12]
 8009e1c:	3304      	adds	r3, #4
 8009e1e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e22:	f1b9 0f00 	cmp.w	r9, #0
 8009e26:	d020      	beq.n	8009e6a <__multiply+0x13e>
 8009e28:	46ae      	mov	lr, r5
 8009e2a:	f04f 0a00 	mov.w	sl, #0
 8009e2e:	6829      	ldr	r1, [r5, #0]
 8009e30:	f104 0c14 	add.w	ip, r4, #20
 8009e34:	f8bc b000 	ldrh.w	fp, [ip]
 8009e38:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009e3c:	b289      	uxth	r1, r1
 8009e3e:	fb09 220b 	mla	r2, r9, fp, r2
 8009e42:	4492      	add	sl, r2
 8009e44:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009e48:	f84e 1b04 	str.w	r1, [lr], #4
 8009e4c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009e50:	f8be 1000 	ldrh.w	r1, [lr]
 8009e54:	0c12      	lsrs	r2, r2, #16
 8009e56:	fb09 1102 	mla	r1, r9, r2, r1
 8009e5a:	4567      	cmp	r7, ip
 8009e5c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009e60:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e64:	d8e6      	bhi.n	8009e34 <__multiply+0x108>
 8009e66:	9a01      	ldr	r2, [sp, #4]
 8009e68:	50a9      	str	r1, [r5, r2]
 8009e6a:	3504      	adds	r5, #4
 8009e6c:	e79b      	b.n	8009da6 <__multiply+0x7a>
 8009e6e:	3e01      	subs	r6, #1
 8009e70:	e79d      	b.n	8009dae <__multiply+0x82>
 8009e72:	bf00      	nop
 8009e74:	0800b023 	.word	0x0800b023
 8009e78:	0800b034 	.word	0x0800b034

08009e7c <__pow5mult>:
 8009e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e80:	4615      	mov	r5, r2
 8009e82:	f012 0203 	ands.w	r2, r2, #3
 8009e86:	4606      	mov	r6, r0
 8009e88:	460f      	mov	r7, r1
 8009e8a:	d007      	beq.n	8009e9c <__pow5mult+0x20>
 8009e8c:	4c25      	ldr	r4, [pc, #148]	; (8009f24 <__pow5mult+0xa8>)
 8009e8e:	3a01      	subs	r2, #1
 8009e90:	2300      	movs	r3, #0
 8009e92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e96:	f7ff fe9f 	bl	8009bd8 <__multadd>
 8009e9a:	4607      	mov	r7, r0
 8009e9c:	10ad      	asrs	r5, r5, #2
 8009e9e:	d03d      	beq.n	8009f1c <__pow5mult+0xa0>
 8009ea0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009ea2:	b97c      	cbnz	r4, 8009ec4 <__pow5mult+0x48>
 8009ea4:	2010      	movs	r0, #16
 8009ea6:	f7ff fe11 	bl	8009acc <malloc>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	6270      	str	r0, [r6, #36]	; 0x24
 8009eae:	b928      	cbnz	r0, 8009ebc <__pow5mult+0x40>
 8009eb0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009eb4:	4b1c      	ldr	r3, [pc, #112]	; (8009f28 <__pow5mult+0xac>)
 8009eb6:	481d      	ldr	r0, [pc, #116]	; (8009f2c <__pow5mult+0xb0>)
 8009eb8:	f000 faae 	bl	800a418 <__assert_func>
 8009ebc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ec0:	6004      	str	r4, [r0, #0]
 8009ec2:	60c4      	str	r4, [r0, #12]
 8009ec4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009ec8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ecc:	b94c      	cbnz	r4, 8009ee2 <__pow5mult+0x66>
 8009ece:	f240 2171 	movw	r1, #625	; 0x271
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	f7ff ff14 	bl	8009d00 <__i2b>
 8009ed8:	2300      	movs	r3, #0
 8009eda:	4604      	mov	r4, r0
 8009edc:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ee0:	6003      	str	r3, [r0, #0]
 8009ee2:	f04f 0900 	mov.w	r9, #0
 8009ee6:	07eb      	lsls	r3, r5, #31
 8009ee8:	d50a      	bpl.n	8009f00 <__pow5mult+0x84>
 8009eea:	4639      	mov	r1, r7
 8009eec:	4622      	mov	r2, r4
 8009eee:	4630      	mov	r0, r6
 8009ef0:	f7ff ff1c 	bl	8009d2c <__multiply>
 8009ef4:	4680      	mov	r8, r0
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	4630      	mov	r0, r6
 8009efa:	f7ff fe4b 	bl	8009b94 <_Bfree>
 8009efe:	4647      	mov	r7, r8
 8009f00:	106d      	asrs	r5, r5, #1
 8009f02:	d00b      	beq.n	8009f1c <__pow5mult+0xa0>
 8009f04:	6820      	ldr	r0, [r4, #0]
 8009f06:	b938      	cbnz	r0, 8009f18 <__pow5mult+0x9c>
 8009f08:	4622      	mov	r2, r4
 8009f0a:	4621      	mov	r1, r4
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	f7ff ff0d 	bl	8009d2c <__multiply>
 8009f12:	6020      	str	r0, [r4, #0]
 8009f14:	f8c0 9000 	str.w	r9, [r0]
 8009f18:	4604      	mov	r4, r0
 8009f1a:	e7e4      	b.n	8009ee6 <__pow5mult+0x6a>
 8009f1c:	4638      	mov	r0, r7
 8009f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f22:	bf00      	nop
 8009f24:	0800b180 	.word	0x0800b180
 8009f28:	0800afb1 	.word	0x0800afb1
 8009f2c:	0800b034 	.word	0x0800b034

08009f30 <__lshift>:
 8009f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f34:	460c      	mov	r4, r1
 8009f36:	4607      	mov	r7, r0
 8009f38:	4691      	mov	r9, r2
 8009f3a:	6923      	ldr	r3, [r4, #16]
 8009f3c:	6849      	ldr	r1, [r1, #4]
 8009f3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f42:	68a3      	ldr	r3, [r4, #8]
 8009f44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f48:	f108 0601 	add.w	r6, r8, #1
 8009f4c:	42b3      	cmp	r3, r6
 8009f4e:	db0b      	blt.n	8009f68 <__lshift+0x38>
 8009f50:	4638      	mov	r0, r7
 8009f52:	f7ff fddf 	bl	8009b14 <_Balloc>
 8009f56:	4605      	mov	r5, r0
 8009f58:	b948      	cbnz	r0, 8009f6e <__lshift+0x3e>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009f60:	4b29      	ldr	r3, [pc, #164]	; (800a008 <__lshift+0xd8>)
 8009f62:	482a      	ldr	r0, [pc, #168]	; (800a00c <__lshift+0xdc>)
 8009f64:	f000 fa58 	bl	800a418 <__assert_func>
 8009f68:	3101      	adds	r1, #1
 8009f6a:	005b      	lsls	r3, r3, #1
 8009f6c:	e7ee      	b.n	8009f4c <__lshift+0x1c>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	f100 0114 	add.w	r1, r0, #20
 8009f74:	f100 0210 	add.w	r2, r0, #16
 8009f78:	4618      	mov	r0, r3
 8009f7a:	4553      	cmp	r3, sl
 8009f7c:	db37      	blt.n	8009fee <__lshift+0xbe>
 8009f7e:	6920      	ldr	r0, [r4, #16]
 8009f80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f84:	f104 0314 	add.w	r3, r4, #20
 8009f88:	f019 091f 	ands.w	r9, r9, #31
 8009f8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f94:	d02f      	beq.n	8009ff6 <__lshift+0xc6>
 8009f96:	468a      	mov	sl, r1
 8009f98:	f04f 0c00 	mov.w	ip, #0
 8009f9c:	f1c9 0e20 	rsb	lr, r9, #32
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	fa02 f209 	lsl.w	r2, r2, r9
 8009fa6:	ea42 020c 	orr.w	r2, r2, ip
 8009faa:	f84a 2b04 	str.w	r2, [sl], #4
 8009fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fb2:	4298      	cmp	r0, r3
 8009fb4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009fb8:	d8f2      	bhi.n	8009fa0 <__lshift+0x70>
 8009fba:	1b03      	subs	r3, r0, r4
 8009fbc:	3b15      	subs	r3, #21
 8009fbe:	f023 0303 	bic.w	r3, r3, #3
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	f104 0215 	add.w	r2, r4, #21
 8009fc8:	4290      	cmp	r0, r2
 8009fca:	bf38      	it	cc
 8009fcc:	2304      	movcc	r3, #4
 8009fce:	f841 c003 	str.w	ip, [r1, r3]
 8009fd2:	f1bc 0f00 	cmp.w	ip, #0
 8009fd6:	d001      	beq.n	8009fdc <__lshift+0xac>
 8009fd8:	f108 0602 	add.w	r6, r8, #2
 8009fdc:	3e01      	subs	r6, #1
 8009fde:	4638      	mov	r0, r7
 8009fe0:	4621      	mov	r1, r4
 8009fe2:	612e      	str	r6, [r5, #16]
 8009fe4:	f7ff fdd6 	bl	8009b94 <_Bfree>
 8009fe8:	4628      	mov	r0, r5
 8009fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fee:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	e7c1      	b.n	8009f7a <__lshift+0x4a>
 8009ff6:	3904      	subs	r1, #4
 8009ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ffc:	4298      	cmp	r0, r3
 8009ffe:	f841 2f04 	str.w	r2, [r1, #4]!
 800a002:	d8f9      	bhi.n	8009ff8 <__lshift+0xc8>
 800a004:	e7ea      	b.n	8009fdc <__lshift+0xac>
 800a006:	bf00      	nop
 800a008:	0800b023 	.word	0x0800b023
 800a00c:	0800b034 	.word	0x0800b034

0800a010 <__mcmp>:
 800a010:	4603      	mov	r3, r0
 800a012:	690a      	ldr	r2, [r1, #16]
 800a014:	6900      	ldr	r0, [r0, #16]
 800a016:	b530      	push	{r4, r5, lr}
 800a018:	1a80      	subs	r0, r0, r2
 800a01a:	d10d      	bne.n	800a038 <__mcmp+0x28>
 800a01c:	3314      	adds	r3, #20
 800a01e:	3114      	adds	r1, #20
 800a020:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a024:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a028:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a02c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a030:	4295      	cmp	r5, r2
 800a032:	d002      	beq.n	800a03a <__mcmp+0x2a>
 800a034:	d304      	bcc.n	800a040 <__mcmp+0x30>
 800a036:	2001      	movs	r0, #1
 800a038:	bd30      	pop	{r4, r5, pc}
 800a03a:	42a3      	cmp	r3, r4
 800a03c:	d3f4      	bcc.n	800a028 <__mcmp+0x18>
 800a03e:	e7fb      	b.n	800a038 <__mcmp+0x28>
 800a040:	f04f 30ff 	mov.w	r0, #4294967295
 800a044:	e7f8      	b.n	800a038 <__mcmp+0x28>
	...

0800a048 <__mdiff>:
 800a048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04c:	460d      	mov	r5, r1
 800a04e:	4607      	mov	r7, r0
 800a050:	4611      	mov	r1, r2
 800a052:	4628      	mov	r0, r5
 800a054:	4614      	mov	r4, r2
 800a056:	f7ff ffdb 	bl	800a010 <__mcmp>
 800a05a:	1e06      	subs	r6, r0, #0
 800a05c:	d111      	bne.n	800a082 <__mdiff+0x3a>
 800a05e:	4631      	mov	r1, r6
 800a060:	4638      	mov	r0, r7
 800a062:	f7ff fd57 	bl	8009b14 <_Balloc>
 800a066:	4602      	mov	r2, r0
 800a068:	b928      	cbnz	r0, 800a076 <__mdiff+0x2e>
 800a06a:	f240 2132 	movw	r1, #562	; 0x232
 800a06e:	4b3a      	ldr	r3, [pc, #232]	; (800a158 <__mdiff+0x110>)
 800a070:	483a      	ldr	r0, [pc, #232]	; (800a15c <__mdiff+0x114>)
 800a072:	f000 f9d1 	bl	800a418 <__assert_func>
 800a076:	2301      	movs	r3, #1
 800a078:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a07c:	4610      	mov	r0, r2
 800a07e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a082:	bfa4      	itt	ge
 800a084:	4623      	movge	r3, r4
 800a086:	462c      	movge	r4, r5
 800a088:	4638      	mov	r0, r7
 800a08a:	6861      	ldr	r1, [r4, #4]
 800a08c:	bfa6      	itte	ge
 800a08e:	461d      	movge	r5, r3
 800a090:	2600      	movge	r6, #0
 800a092:	2601      	movlt	r6, #1
 800a094:	f7ff fd3e 	bl	8009b14 <_Balloc>
 800a098:	4602      	mov	r2, r0
 800a09a:	b918      	cbnz	r0, 800a0a4 <__mdiff+0x5c>
 800a09c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a0a0:	4b2d      	ldr	r3, [pc, #180]	; (800a158 <__mdiff+0x110>)
 800a0a2:	e7e5      	b.n	800a070 <__mdiff+0x28>
 800a0a4:	f102 0814 	add.w	r8, r2, #20
 800a0a8:	46c2      	mov	sl, r8
 800a0aa:	f04f 0c00 	mov.w	ip, #0
 800a0ae:	6927      	ldr	r7, [r4, #16]
 800a0b0:	60c6      	str	r6, [r0, #12]
 800a0b2:	692e      	ldr	r6, [r5, #16]
 800a0b4:	f104 0014 	add.w	r0, r4, #20
 800a0b8:	f105 0914 	add.w	r9, r5, #20
 800a0bc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a0c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a0c4:	3410      	adds	r4, #16
 800a0c6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a0ca:	f859 3b04 	ldr.w	r3, [r9], #4
 800a0ce:	fa1f f18b 	uxth.w	r1, fp
 800a0d2:	448c      	add	ip, r1
 800a0d4:	b299      	uxth	r1, r3
 800a0d6:	0c1b      	lsrs	r3, r3, #16
 800a0d8:	ebac 0101 	sub.w	r1, ip, r1
 800a0dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a0e0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a0e4:	b289      	uxth	r1, r1
 800a0e6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a0ea:	454e      	cmp	r6, r9
 800a0ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a0f0:	f84a 3b04 	str.w	r3, [sl], #4
 800a0f4:	d8e7      	bhi.n	800a0c6 <__mdiff+0x7e>
 800a0f6:	1b73      	subs	r3, r6, r5
 800a0f8:	3b15      	subs	r3, #21
 800a0fa:	f023 0303 	bic.w	r3, r3, #3
 800a0fe:	3515      	adds	r5, #21
 800a100:	3304      	adds	r3, #4
 800a102:	42ae      	cmp	r6, r5
 800a104:	bf38      	it	cc
 800a106:	2304      	movcc	r3, #4
 800a108:	4418      	add	r0, r3
 800a10a:	4443      	add	r3, r8
 800a10c:	461e      	mov	r6, r3
 800a10e:	4605      	mov	r5, r0
 800a110:	4575      	cmp	r5, lr
 800a112:	d30e      	bcc.n	800a132 <__mdiff+0xea>
 800a114:	f10e 0103 	add.w	r1, lr, #3
 800a118:	1a09      	subs	r1, r1, r0
 800a11a:	f021 0103 	bic.w	r1, r1, #3
 800a11e:	3803      	subs	r0, #3
 800a120:	4586      	cmp	lr, r0
 800a122:	bf38      	it	cc
 800a124:	2100      	movcc	r1, #0
 800a126:	4419      	add	r1, r3
 800a128:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a12c:	b18b      	cbz	r3, 800a152 <__mdiff+0x10a>
 800a12e:	6117      	str	r7, [r2, #16]
 800a130:	e7a4      	b.n	800a07c <__mdiff+0x34>
 800a132:	f855 8b04 	ldr.w	r8, [r5], #4
 800a136:	fa1f f188 	uxth.w	r1, r8
 800a13a:	4461      	add	r1, ip
 800a13c:	140c      	asrs	r4, r1, #16
 800a13e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a142:	b289      	uxth	r1, r1
 800a144:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a148:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a14c:	f846 1b04 	str.w	r1, [r6], #4
 800a150:	e7de      	b.n	800a110 <__mdiff+0xc8>
 800a152:	3f01      	subs	r7, #1
 800a154:	e7e8      	b.n	800a128 <__mdiff+0xe0>
 800a156:	bf00      	nop
 800a158:	0800b023 	.word	0x0800b023
 800a15c:	0800b034 	.word	0x0800b034

0800a160 <__d2b>:
 800a160:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a164:	2101      	movs	r1, #1
 800a166:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a16a:	4690      	mov	r8, r2
 800a16c:	461d      	mov	r5, r3
 800a16e:	f7ff fcd1 	bl	8009b14 <_Balloc>
 800a172:	4604      	mov	r4, r0
 800a174:	b930      	cbnz	r0, 800a184 <__d2b+0x24>
 800a176:	4602      	mov	r2, r0
 800a178:	f240 310a 	movw	r1, #778	; 0x30a
 800a17c:	4b24      	ldr	r3, [pc, #144]	; (800a210 <__d2b+0xb0>)
 800a17e:	4825      	ldr	r0, [pc, #148]	; (800a214 <__d2b+0xb4>)
 800a180:	f000 f94a 	bl	800a418 <__assert_func>
 800a184:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a188:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a18c:	bb2d      	cbnz	r5, 800a1da <__d2b+0x7a>
 800a18e:	9301      	str	r3, [sp, #4]
 800a190:	f1b8 0300 	subs.w	r3, r8, #0
 800a194:	d026      	beq.n	800a1e4 <__d2b+0x84>
 800a196:	4668      	mov	r0, sp
 800a198:	9300      	str	r3, [sp, #0]
 800a19a:	f7ff fd83 	bl	8009ca4 <__lo0bits>
 800a19e:	9900      	ldr	r1, [sp, #0]
 800a1a0:	b1f0      	cbz	r0, 800a1e0 <__d2b+0x80>
 800a1a2:	9a01      	ldr	r2, [sp, #4]
 800a1a4:	f1c0 0320 	rsb	r3, r0, #32
 800a1a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ac:	430b      	orrs	r3, r1
 800a1ae:	40c2      	lsrs	r2, r0
 800a1b0:	6163      	str	r3, [r4, #20]
 800a1b2:	9201      	str	r2, [sp, #4]
 800a1b4:	9b01      	ldr	r3, [sp, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	bf14      	ite	ne
 800a1ba:	2102      	movne	r1, #2
 800a1bc:	2101      	moveq	r1, #1
 800a1be:	61a3      	str	r3, [r4, #24]
 800a1c0:	6121      	str	r1, [r4, #16]
 800a1c2:	b1c5      	cbz	r5, 800a1f6 <__d2b+0x96>
 800a1c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a1c8:	4405      	add	r5, r0
 800a1ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a1ce:	603d      	str	r5, [r7, #0]
 800a1d0:	6030      	str	r0, [r6, #0]
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	b002      	add	sp, #8
 800a1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1de:	e7d6      	b.n	800a18e <__d2b+0x2e>
 800a1e0:	6161      	str	r1, [r4, #20]
 800a1e2:	e7e7      	b.n	800a1b4 <__d2b+0x54>
 800a1e4:	a801      	add	r0, sp, #4
 800a1e6:	f7ff fd5d 	bl	8009ca4 <__lo0bits>
 800a1ea:	2101      	movs	r1, #1
 800a1ec:	9b01      	ldr	r3, [sp, #4]
 800a1ee:	6121      	str	r1, [r4, #16]
 800a1f0:	6163      	str	r3, [r4, #20]
 800a1f2:	3020      	adds	r0, #32
 800a1f4:	e7e5      	b.n	800a1c2 <__d2b+0x62>
 800a1f6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a1fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a1fe:	6038      	str	r0, [r7, #0]
 800a200:	6918      	ldr	r0, [r3, #16]
 800a202:	f7ff fd2f 	bl	8009c64 <__hi0bits>
 800a206:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a20a:	6031      	str	r1, [r6, #0]
 800a20c:	e7e1      	b.n	800a1d2 <__d2b+0x72>
 800a20e:	bf00      	nop
 800a210:	0800b023 	.word	0x0800b023
 800a214:	0800b034 	.word	0x0800b034

0800a218 <_calloc_r>:
 800a218:	b570      	push	{r4, r5, r6, lr}
 800a21a:	fba1 5402 	umull	r5, r4, r1, r2
 800a21e:	b934      	cbnz	r4, 800a22e <_calloc_r+0x16>
 800a220:	4629      	mov	r1, r5
 800a222:	f000 f875 	bl	800a310 <_malloc_r>
 800a226:	4606      	mov	r6, r0
 800a228:	b928      	cbnz	r0, 800a236 <_calloc_r+0x1e>
 800a22a:	4630      	mov	r0, r6
 800a22c:	bd70      	pop	{r4, r5, r6, pc}
 800a22e:	220c      	movs	r2, #12
 800a230:	2600      	movs	r6, #0
 800a232:	6002      	str	r2, [r0, #0]
 800a234:	e7f9      	b.n	800a22a <_calloc_r+0x12>
 800a236:	462a      	mov	r2, r5
 800a238:	4621      	mov	r1, r4
 800a23a:	f7fe f961 	bl	8008500 <memset>
 800a23e:	e7f4      	b.n	800a22a <_calloc_r+0x12>

0800a240 <_free_r>:
 800a240:	b538      	push	{r3, r4, r5, lr}
 800a242:	4605      	mov	r5, r0
 800a244:	2900      	cmp	r1, #0
 800a246:	d040      	beq.n	800a2ca <_free_r+0x8a>
 800a248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a24c:	1f0c      	subs	r4, r1, #4
 800a24e:	2b00      	cmp	r3, #0
 800a250:	bfb8      	it	lt
 800a252:	18e4      	addlt	r4, r4, r3
 800a254:	f000 f922 	bl	800a49c <__malloc_lock>
 800a258:	4a1c      	ldr	r2, [pc, #112]	; (800a2cc <_free_r+0x8c>)
 800a25a:	6813      	ldr	r3, [r2, #0]
 800a25c:	b933      	cbnz	r3, 800a26c <_free_r+0x2c>
 800a25e:	6063      	str	r3, [r4, #4]
 800a260:	6014      	str	r4, [r2, #0]
 800a262:	4628      	mov	r0, r5
 800a264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a268:	f000 b91e 	b.w	800a4a8 <__malloc_unlock>
 800a26c:	42a3      	cmp	r3, r4
 800a26e:	d908      	bls.n	800a282 <_free_r+0x42>
 800a270:	6820      	ldr	r0, [r4, #0]
 800a272:	1821      	adds	r1, r4, r0
 800a274:	428b      	cmp	r3, r1
 800a276:	bf01      	itttt	eq
 800a278:	6819      	ldreq	r1, [r3, #0]
 800a27a:	685b      	ldreq	r3, [r3, #4]
 800a27c:	1809      	addeq	r1, r1, r0
 800a27e:	6021      	streq	r1, [r4, #0]
 800a280:	e7ed      	b.n	800a25e <_free_r+0x1e>
 800a282:	461a      	mov	r2, r3
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	b10b      	cbz	r3, 800a28c <_free_r+0x4c>
 800a288:	42a3      	cmp	r3, r4
 800a28a:	d9fa      	bls.n	800a282 <_free_r+0x42>
 800a28c:	6811      	ldr	r1, [r2, #0]
 800a28e:	1850      	adds	r0, r2, r1
 800a290:	42a0      	cmp	r0, r4
 800a292:	d10b      	bne.n	800a2ac <_free_r+0x6c>
 800a294:	6820      	ldr	r0, [r4, #0]
 800a296:	4401      	add	r1, r0
 800a298:	1850      	adds	r0, r2, r1
 800a29a:	4283      	cmp	r3, r0
 800a29c:	6011      	str	r1, [r2, #0]
 800a29e:	d1e0      	bne.n	800a262 <_free_r+0x22>
 800a2a0:	6818      	ldr	r0, [r3, #0]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	4401      	add	r1, r0
 800a2a6:	6011      	str	r1, [r2, #0]
 800a2a8:	6053      	str	r3, [r2, #4]
 800a2aa:	e7da      	b.n	800a262 <_free_r+0x22>
 800a2ac:	d902      	bls.n	800a2b4 <_free_r+0x74>
 800a2ae:	230c      	movs	r3, #12
 800a2b0:	602b      	str	r3, [r5, #0]
 800a2b2:	e7d6      	b.n	800a262 <_free_r+0x22>
 800a2b4:	6820      	ldr	r0, [r4, #0]
 800a2b6:	1821      	adds	r1, r4, r0
 800a2b8:	428b      	cmp	r3, r1
 800a2ba:	bf01      	itttt	eq
 800a2bc:	6819      	ldreq	r1, [r3, #0]
 800a2be:	685b      	ldreq	r3, [r3, #4]
 800a2c0:	1809      	addeq	r1, r1, r0
 800a2c2:	6021      	streq	r1, [r4, #0]
 800a2c4:	6063      	str	r3, [r4, #4]
 800a2c6:	6054      	str	r4, [r2, #4]
 800a2c8:	e7cb      	b.n	800a262 <_free_r+0x22>
 800a2ca:	bd38      	pop	{r3, r4, r5, pc}
 800a2cc:	200008b8 	.word	0x200008b8

0800a2d0 <sbrk_aligned>:
 800a2d0:	b570      	push	{r4, r5, r6, lr}
 800a2d2:	4e0e      	ldr	r6, [pc, #56]	; (800a30c <sbrk_aligned+0x3c>)
 800a2d4:	460c      	mov	r4, r1
 800a2d6:	6831      	ldr	r1, [r6, #0]
 800a2d8:	4605      	mov	r5, r0
 800a2da:	b911      	cbnz	r1, 800a2e2 <sbrk_aligned+0x12>
 800a2dc:	f000 f88c 	bl	800a3f8 <_sbrk_r>
 800a2e0:	6030      	str	r0, [r6, #0]
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	f000 f887 	bl	800a3f8 <_sbrk_r>
 800a2ea:	1c43      	adds	r3, r0, #1
 800a2ec:	d00a      	beq.n	800a304 <sbrk_aligned+0x34>
 800a2ee:	1cc4      	adds	r4, r0, #3
 800a2f0:	f024 0403 	bic.w	r4, r4, #3
 800a2f4:	42a0      	cmp	r0, r4
 800a2f6:	d007      	beq.n	800a308 <sbrk_aligned+0x38>
 800a2f8:	1a21      	subs	r1, r4, r0
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f000 f87c 	bl	800a3f8 <_sbrk_r>
 800a300:	3001      	adds	r0, #1
 800a302:	d101      	bne.n	800a308 <sbrk_aligned+0x38>
 800a304:	f04f 34ff 	mov.w	r4, #4294967295
 800a308:	4620      	mov	r0, r4
 800a30a:	bd70      	pop	{r4, r5, r6, pc}
 800a30c:	200008bc 	.word	0x200008bc

0800a310 <_malloc_r>:
 800a310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a314:	1ccd      	adds	r5, r1, #3
 800a316:	f025 0503 	bic.w	r5, r5, #3
 800a31a:	3508      	adds	r5, #8
 800a31c:	2d0c      	cmp	r5, #12
 800a31e:	bf38      	it	cc
 800a320:	250c      	movcc	r5, #12
 800a322:	2d00      	cmp	r5, #0
 800a324:	4607      	mov	r7, r0
 800a326:	db01      	blt.n	800a32c <_malloc_r+0x1c>
 800a328:	42a9      	cmp	r1, r5
 800a32a:	d905      	bls.n	800a338 <_malloc_r+0x28>
 800a32c:	230c      	movs	r3, #12
 800a32e:	2600      	movs	r6, #0
 800a330:	603b      	str	r3, [r7, #0]
 800a332:	4630      	mov	r0, r6
 800a334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a338:	4e2e      	ldr	r6, [pc, #184]	; (800a3f4 <_malloc_r+0xe4>)
 800a33a:	f000 f8af 	bl	800a49c <__malloc_lock>
 800a33e:	6833      	ldr	r3, [r6, #0]
 800a340:	461c      	mov	r4, r3
 800a342:	bb34      	cbnz	r4, 800a392 <_malloc_r+0x82>
 800a344:	4629      	mov	r1, r5
 800a346:	4638      	mov	r0, r7
 800a348:	f7ff ffc2 	bl	800a2d0 <sbrk_aligned>
 800a34c:	1c43      	adds	r3, r0, #1
 800a34e:	4604      	mov	r4, r0
 800a350:	d14d      	bne.n	800a3ee <_malloc_r+0xde>
 800a352:	6834      	ldr	r4, [r6, #0]
 800a354:	4626      	mov	r6, r4
 800a356:	2e00      	cmp	r6, #0
 800a358:	d140      	bne.n	800a3dc <_malloc_r+0xcc>
 800a35a:	6823      	ldr	r3, [r4, #0]
 800a35c:	4631      	mov	r1, r6
 800a35e:	4638      	mov	r0, r7
 800a360:	eb04 0803 	add.w	r8, r4, r3
 800a364:	f000 f848 	bl	800a3f8 <_sbrk_r>
 800a368:	4580      	cmp	r8, r0
 800a36a:	d13a      	bne.n	800a3e2 <_malloc_r+0xd2>
 800a36c:	6821      	ldr	r1, [r4, #0]
 800a36e:	3503      	adds	r5, #3
 800a370:	1a6d      	subs	r5, r5, r1
 800a372:	f025 0503 	bic.w	r5, r5, #3
 800a376:	3508      	adds	r5, #8
 800a378:	2d0c      	cmp	r5, #12
 800a37a:	bf38      	it	cc
 800a37c:	250c      	movcc	r5, #12
 800a37e:	4638      	mov	r0, r7
 800a380:	4629      	mov	r1, r5
 800a382:	f7ff ffa5 	bl	800a2d0 <sbrk_aligned>
 800a386:	3001      	adds	r0, #1
 800a388:	d02b      	beq.n	800a3e2 <_malloc_r+0xd2>
 800a38a:	6823      	ldr	r3, [r4, #0]
 800a38c:	442b      	add	r3, r5
 800a38e:	6023      	str	r3, [r4, #0]
 800a390:	e00e      	b.n	800a3b0 <_malloc_r+0xa0>
 800a392:	6822      	ldr	r2, [r4, #0]
 800a394:	1b52      	subs	r2, r2, r5
 800a396:	d41e      	bmi.n	800a3d6 <_malloc_r+0xc6>
 800a398:	2a0b      	cmp	r2, #11
 800a39a:	d916      	bls.n	800a3ca <_malloc_r+0xba>
 800a39c:	1961      	adds	r1, r4, r5
 800a39e:	42a3      	cmp	r3, r4
 800a3a0:	6025      	str	r5, [r4, #0]
 800a3a2:	bf18      	it	ne
 800a3a4:	6059      	strne	r1, [r3, #4]
 800a3a6:	6863      	ldr	r3, [r4, #4]
 800a3a8:	bf08      	it	eq
 800a3aa:	6031      	streq	r1, [r6, #0]
 800a3ac:	5162      	str	r2, [r4, r5]
 800a3ae:	604b      	str	r3, [r1, #4]
 800a3b0:	4638      	mov	r0, r7
 800a3b2:	f104 060b 	add.w	r6, r4, #11
 800a3b6:	f000 f877 	bl	800a4a8 <__malloc_unlock>
 800a3ba:	f026 0607 	bic.w	r6, r6, #7
 800a3be:	1d23      	adds	r3, r4, #4
 800a3c0:	1af2      	subs	r2, r6, r3
 800a3c2:	d0b6      	beq.n	800a332 <_malloc_r+0x22>
 800a3c4:	1b9b      	subs	r3, r3, r6
 800a3c6:	50a3      	str	r3, [r4, r2]
 800a3c8:	e7b3      	b.n	800a332 <_malloc_r+0x22>
 800a3ca:	6862      	ldr	r2, [r4, #4]
 800a3cc:	42a3      	cmp	r3, r4
 800a3ce:	bf0c      	ite	eq
 800a3d0:	6032      	streq	r2, [r6, #0]
 800a3d2:	605a      	strne	r2, [r3, #4]
 800a3d4:	e7ec      	b.n	800a3b0 <_malloc_r+0xa0>
 800a3d6:	4623      	mov	r3, r4
 800a3d8:	6864      	ldr	r4, [r4, #4]
 800a3da:	e7b2      	b.n	800a342 <_malloc_r+0x32>
 800a3dc:	4634      	mov	r4, r6
 800a3de:	6876      	ldr	r6, [r6, #4]
 800a3e0:	e7b9      	b.n	800a356 <_malloc_r+0x46>
 800a3e2:	230c      	movs	r3, #12
 800a3e4:	4638      	mov	r0, r7
 800a3e6:	603b      	str	r3, [r7, #0]
 800a3e8:	f000 f85e 	bl	800a4a8 <__malloc_unlock>
 800a3ec:	e7a1      	b.n	800a332 <_malloc_r+0x22>
 800a3ee:	6025      	str	r5, [r4, #0]
 800a3f0:	e7de      	b.n	800a3b0 <_malloc_r+0xa0>
 800a3f2:	bf00      	nop
 800a3f4:	200008b8 	.word	0x200008b8

0800a3f8 <_sbrk_r>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	4d05      	ldr	r5, [pc, #20]	; (800a414 <_sbrk_r+0x1c>)
 800a3fe:	4604      	mov	r4, r0
 800a400:	4608      	mov	r0, r1
 800a402:	602b      	str	r3, [r5, #0]
 800a404:	f7f8 f84e 	bl	80024a4 <_sbrk>
 800a408:	1c43      	adds	r3, r0, #1
 800a40a:	d102      	bne.n	800a412 <_sbrk_r+0x1a>
 800a40c:	682b      	ldr	r3, [r5, #0]
 800a40e:	b103      	cbz	r3, 800a412 <_sbrk_r+0x1a>
 800a410:	6023      	str	r3, [r4, #0]
 800a412:	bd38      	pop	{r3, r4, r5, pc}
 800a414:	200008c0 	.word	0x200008c0

0800a418 <__assert_func>:
 800a418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a41a:	4614      	mov	r4, r2
 800a41c:	461a      	mov	r2, r3
 800a41e:	4b09      	ldr	r3, [pc, #36]	; (800a444 <__assert_func+0x2c>)
 800a420:	4605      	mov	r5, r0
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	68d8      	ldr	r0, [r3, #12]
 800a426:	b14c      	cbz	r4, 800a43c <__assert_func+0x24>
 800a428:	4b07      	ldr	r3, [pc, #28]	; (800a448 <__assert_func+0x30>)
 800a42a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a42e:	9100      	str	r1, [sp, #0]
 800a430:	462b      	mov	r3, r5
 800a432:	4906      	ldr	r1, [pc, #24]	; (800a44c <__assert_func+0x34>)
 800a434:	f000 f80e 	bl	800a454 <fiprintf>
 800a438:	f000 fa62 	bl	800a900 <abort>
 800a43c:	4b04      	ldr	r3, [pc, #16]	; (800a450 <__assert_func+0x38>)
 800a43e:	461c      	mov	r4, r3
 800a440:	e7f3      	b.n	800a42a <__assert_func+0x12>
 800a442:	bf00      	nop
 800a444:	2000001c 	.word	0x2000001c
 800a448:	0800b18c 	.word	0x0800b18c
 800a44c:	0800b199 	.word	0x0800b199
 800a450:	0800b1c7 	.word	0x0800b1c7

0800a454 <fiprintf>:
 800a454:	b40e      	push	{r1, r2, r3}
 800a456:	b503      	push	{r0, r1, lr}
 800a458:	4601      	mov	r1, r0
 800a45a:	ab03      	add	r3, sp, #12
 800a45c:	4805      	ldr	r0, [pc, #20]	; (800a474 <fiprintf+0x20>)
 800a45e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a462:	6800      	ldr	r0, [r0, #0]
 800a464:	9301      	str	r3, [sp, #4]
 800a466:	f000 f84d 	bl	800a504 <_vfiprintf_r>
 800a46a:	b002      	add	sp, #8
 800a46c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a470:	b003      	add	sp, #12
 800a472:	4770      	bx	lr
 800a474:	2000001c 	.word	0x2000001c

0800a478 <__ascii_mbtowc>:
 800a478:	b082      	sub	sp, #8
 800a47a:	b901      	cbnz	r1, 800a47e <__ascii_mbtowc+0x6>
 800a47c:	a901      	add	r1, sp, #4
 800a47e:	b142      	cbz	r2, 800a492 <__ascii_mbtowc+0x1a>
 800a480:	b14b      	cbz	r3, 800a496 <__ascii_mbtowc+0x1e>
 800a482:	7813      	ldrb	r3, [r2, #0]
 800a484:	600b      	str	r3, [r1, #0]
 800a486:	7812      	ldrb	r2, [r2, #0]
 800a488:	1e10      	subs	r0, r2, #0
 800a48a:	bf18      	it	ne
 800a48c:	2001      	movne	r0, #1
 800a48e:	b002      	add	sp, #8
 800a490:	4770      	bx	lr
 800a492:	4610      	mov	r0, r2
 800a494:	e7fb      	b.n	800a48e <__ascii_mbtowc+0x16>
 800a496:	f06f 0001 	mvn.w	r0, #1
 800a49a:	e7f8      	b.n	800a48e <__ascii_mbtowc+0x16>

0800a49c <__malloc_lock>:
 800a49c:	4801      	ldr	r0, [pc, #4]	; (800a4a4 <__malloc_lock+0x8>)
 800a49e:	f000 bbeb 	b.w	800ac78 <__retarget_lock_acquire_recursive>
 800a4a2:	bf00      	nop
 800a4a4:	200008c4 	.word	0x200008c4

0800a4a8 <__malloc_unlock>:
 800a4a8:	4801      	ldr	r0, [pc, #4]	; (800a4b0 <__malloc_unlock+0x8>)
 800a4aa:	f000 bbe6 	b.w	800ac7a <__retarget_lock_release_recursive>
 800a4ae:	bf00      	nop
 800a4b0:	200008c4 	.word	0x200008c4

0800a4b4 <__sfputc_r>:
 800a4b4:	6893      	ldr	r3, [r2, #8]
 800a4b6:	b410      	push	{r4}
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	6093      	str	r3, [r2, #8]
 800a4be:	da07      	bge.n	800a4d0 <__sfputc_r+0x1c>
 800a4c0:	6994      	ldr	r4, [r2, #24]
 800a4c2:	42a3      	cmp	r3, r4
 800a4c4:	db01      	blt.n	800a4ca <__sfputc_r+0x16>
 800a4c6:	290a      	cmp	r1, #10
 800a4c8:	d102      	bne.n	800a4d0 <__sfputc_r+0x1c>
 800a4ca:	bc10      	pop	{r4}
 800a4cc:	f000 b94a 	b.w	800a764 <__swbuf_r>
 800a4d0:	6813      	ldr	r3, [r2, #0]
 800a4d2:	1c58      	adds	r0, r3, #1
 800a4d4:	6010      	str	r0, [r2, #0]
 800a4d6:	7019      	strb	r1, [r3, #0]
 800a4d8:	4608      	mov	r0, r1
 800a4da:	bc10      	pop	{r4}
 800a4dc:	4770      	bx	lr

0800a4de <__sfputs_r>:
 800a4de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e0:	4606      	mov	r6, r0
 800a4e2:	460f      	mov	r7, r1
 800a4e4:	4614      	mov	r4, r2
 800a4e6:	18d5      	adds	r5, r2, r3
 800a4e8:	42ac      	cmp	r4, r5
 800a4ea:	d101      	bne.n	800a4f0 <__sfputs_r+0x12>
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	e007      	b.n	800a500 <__sfputs_r+0x22>
 800a4f0:	463a      	mov	r2, r7
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4f8:	f7ff ffdc 	bl	800a4b4 <__sfputc_r>
 800a4fc:	1c43      	adds	r3, r0, #1
 800a4fe:	d1f3      	bne.n	800a4e8 <__sfputs_r+0xa>
 800a500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a504 <_vfiprintf_r>:
 800a504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a508:	460d      	mov	r5, r1
 800a50a:	4614      	mov	r4, r2
 800a50c:	4698      	mov	r8, r3
 800a50e:	4606      	mov	r6, r0
 800a510:	b09d      	sub	sp, #116	; 0x74
 800a512:	b118      	cbz	r0, 800a51c <_vfiprintf_r+0x18>
 800a514:	6983      	ldr	r3, [r0, #24]
 800a516:	b90b      	cbnz	r3, 800a51c <_vfiprintf_r+0x18>
 800a518:	f000 fb10 	bl	800ab3c <__sinit>
 800a51c:	4b89      	ldr	r3, [pc, #548]	; (800a744 <_vfiprintf_r+0x240>)
 800a51e:	429d      	cmp	r5, r3
 800a520:	d11b      	bne.n	800a55a <_vfiprintf_r+0x56>
 800a522:	6875      	ldr	r5, [r6, #4]
 800a524:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a526:	07d9      	lsls	r1, r3, #31
 800a528:	d405      	bmi.n	800a536 <_vfiprintf_r+0x32>
 800a52a:	89ab      	ldrh	r3, [r5, #12]
 800a52c:	059a      	lsls	r2, r3, #22
 800a52e:	d402      	bmi.n	800a536 <_vfiprintf_r+0x32>
 800a530:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a532:	f000 fba1 	bl	800ac78 <__retarget_lock_acquire_recursive>
 800a536:	89ab      	ldrh	r3, [r5, #12]
 800a538:	071b      	lsls	r3, r3, #28
 800a53a:	d501      	bpl.n	800a540 <_vfiprintf_r+0x3c>
 800a53c:	692b      	ldr	r3, [r5, #16]
 800a53e:	b9eb      	cbnz	r3, 800a57c <_vfiprintf_r+0x78>
 800a540:	4629      	mov	r1, r5
 800a542:	4630      	mov	r0, r6
 800a544:	f000 f96e 	bl	800a824 <__swsetup_r>
 800a548:	b1c0      	cbz	r0, 800a57c <_vfiprintf_r+0x78>
 800a54a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a54c:	07dc      	lsls	r4, r3, #31
 800a54e:	d50e      	bpl.n	800a56e <_vfiprintf_r+0x6a>
 800a550:	f04f 30ff 	mov.w	r0, #4294967295
 800a554:	b01d      	add	sp, #116	; 0x74
 800a556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a55a:	4b7b      	ldr	r3, [pc, #492]	; (800a748 <_vfiprintf_r+0x244>)
 800a55c:	429d      	cmp	r5, r3
 800a55e:	d101      	bne.n	800a564 <_vfiprintf_r+0x60>
 800a560:	68b5      	ldr	r5, [r6, #8]
 800a562:	e7df      	b.n	800a524 <_vfiprintf_r+0x20>
 800a564:	4b79      	ldr	r3, [pc, #484]	; (800a74c <_vfiprintf_r+0x248>)
 800a566:	429d      	cmp	r5, r3
 800a568:	bf08      	it	eq
 800a56a:	68f5      	ldreq	r5, [r6, #12]
 800a56c:	e7da      	b.n	800a524 <_vfiprintf_r+0x20>
 800a56e:	89ab      	ldrh	r3, [r5, #12]
 800a570:	0598      	lsls	r0, r3, #22
 800a572:	d4ed      	bmi.n	800a550 <_vfiprintf_r+0x4c>
 800a574:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a576:	f000 fb80 	bl	800ac7a <__retarget_lock_release_recursive>
 800a57a:	e7e9      	b.n	800a550 <_vfiprintf_r+0x4c>
 800a57c:	2300      	movs	r3, #0
 800a57e:	9309      	str	r3, [sp, #36]	; 0x24
 800a580:	2320      	movs	r3, #32
 800a582:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a586:	2330      	movs	r3, #48	; 0x30
 800a588:	f04f 0901 	mov.w	r9, #1
 800a58c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a590:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a750 <_vfiprintf_r+0x24c>
 800a594:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a598:	4623      	mov	r3, r4
 800a59a:	469a      	mov	sl, r3
 800a59c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5a0:	b10a      	cbz	r2, 800a5a6 <_vfiprintf_r+0xa2>
 800a5a2:	2a25      	cmp	r2, #37	; 0x25
 800a5a4:	d1f9      	bne.n	800a59a <_vfiprintf_r+0x96>
 800a5a6:	ebba 0b04 	subs.w	fp, sl, r4
 800a5aa:	d00b      	beq.n	800a5c4 <_vfiprintf_r+0xc0>
 800a5ac:	465b      	mov	r3, fp
 800a5ae:	4622      	mov	r2, r4
 800a5b0:	4629      	mov	r1, r5
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	f7ff ff93 	bl	800a4de <__sfputs_r>
 800a5b8:	3001      	adds	r0, #1
 800a5ba:	f000 80aa 	beq.w	800a712 <_vfiprintf_r+0x20e>
 800a5be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5c0:	445a      	add	r2, fp
 800a5c2:	9209      	str	r2, [sp, #36]	; 0x24
 800a5c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f000 80a2 	beq.w	800a712 <_vfiprintf_r+0x20e>
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5d8:	f10a 0a01 	add.w	sl, sl, #1
 800a5dc:	9304      	str	r3, [sp, #16]
 800a5de:	9307      	str	r3, [sp, #28]
 800a5e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5e4:	931a      	str	r3, [sp, #104]	; 0x68
 800a5e6:	4654      	mov	r4, sl
 800a5e8:	2205      	movs	r2, #5
 800a5ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ee:	4858      	ldr	r0, [pc, #352]	; (800a750 <_vfiprintf_r+0x24c>)
 800a5f0:	f7ff fa74 	bl	8009adc <memchr>
 800a5f4:	9a04      	ldr	r2, [sp, #16]
 800a5f6:	b9d8      	cbnz	r0, 800a630 <_vfiprintf_r+0x12c>
 800a5f8:	06d1      	lsls	r1, r2, #27
 800a5fa:	bf44      	itt	mi
 800a5fc:	2320      	movmi	r3, #32
 800a5fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a602:	0713      	lsls	r3, r2, #28
 800a604:	bf44      	itt	mi
 800a606:	232b      	movmi	r3, #43	; 0x2b
 800a608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a60c:	f89a 3000 	ldrb.w	r3, [sl]
 800a610:	2b2a      	cmp	r3, #42	; 0x2a
 800a612:	d015      	beq.n	800a640 <_vfiprintf_r+0x13c>
 800a614:	4654      	mov	r4, sl
 800a616:	2000      	movs	r0, #0
 800a618:	f04f 0c0a 	mov.w	ip, #10
 800a61c:	9a07      	ldr	r2, [sp, #28]
 800a61e:	4621      	mov	r1, r4
 800a620:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a624:	3b30      	subs	r3, #48	; 0x30
 800a626:	2b09      	cmp	r3, #9
 800a628:	d94e      	bls.n	800a6c8 <_vfiprintf_r+0x1c4>
 800a62a:	b1b0      	cbz	r0, 800a65a <_vfiprintf_r+0x156>
 800a62c:	9207      	str	r2, [sp, #28]
 800a62e:	e014      	b.n	800a65a <_vfiprintf_r+0x156>
 800a630:	eba0 0308 	sub.w	r3, r0, r8
 800a634:	fa09 f303 	lsl.w	r3, r9, r3
 800a638:	4313      	orrs	r3, r2
 800a63a:	46a2      	mov	sl, r4
 800a63c:	9304      	str	r3, [sp, #16]
 800a63e:	e7d2      	b.n	800a5e6 <_vfiprintf_r+0xe2>
 800a640:	9b03      	ldr	r3, [sp, #12]
 800a642:	1d19      	adds	r1, r3, #4
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	9103      	str	r1, [sp, #12]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	bfbb      	ittet	lt
 800a64c:	425b      	neglt	r3, r3
 800a64e:	f042 0202 	orrlt.w	r2, r2, #2
 800a652:	9307      	strge	r3, [sp, #28]
 800a654:	9307      	strlt	r3, [sp, #28]
 800a656:	bfb8      	it	lt
 800a658:	9204      	strlt	r2, [sp, #16]
 800a65a:	7823      	ldrb	r3, [r4, #0]
 800a65c:	2b2e      	cmp	r3, #46	; 0x2e
 800a65e:	d10c      	bne.n	800a67a <_vfiprintf_r+0x176>
 800a660:	7863      	ldrb	r3, [r4, #1]
 800a662:	2b2a      	cmp	r3, #42	; 0x2a
 800a664:	d135      	bne.n	800a6d2 <_vfiprintf_r+0x1ce>
 800a666:	9b03      	ldr	r3, [sp, #12]
 800a668:	3402      	adds	r4, #2
 800a66a:	1d1a      	adds	r2, r3, #4
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	9203      	str	r2, [sp, #12]
 800a670:	2b00      	cmp	r3, #0
 800a672:	bfb8      	it	lt
 800a674:	f04f 33ff 	movlt.w	r3, #4294967295
 800a678:	9305      	str	r3, [sp, #20]
 800a67a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a754 <_vfiprintf_r+0x250>
 800a67e:	2203      	movs	r2, #3
 800a680:	4650      	mov	r0, sl
 800a682:	7821      	ldrb	r1, [r4, #0]
 800a684:	f7ff fa2a 	bl	8009adc <memchr>
 800a688:	b140      	cbz	r0, 800a69c <_vfiprintf_r+0x198>
 800a68a:	2340      	movs	r3, #64	; 0x40
 800a68c:	eba0 000a 	sub.w	r0, r0, sl
 800a690:	fa03 f000 	lsl.w	r0, r3, r0
 800a694:	9b04      	ldr	r3, [sp, #16]
 800a696:	3401      	adds	r4, #1
 800a698:	4303      	orrs	r3, r0
 800a69a:	9304      	str	r3, [sp, #16]
 800a69c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6a0:	2206      	movs	r2, #6
 800a6a2:	482d      	ldr	r0, [pc, #180]	; (800a758 <_vfiprintf_r+0x254>)
 800a6a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6a8:	f7ff fa18 	bl	8009adc <memchr>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d03f      	beq.n	800a730 <_vfiprintf_r+0x22c>
 800a6b0:	4b2a      	ldr	r3, [pc, #168]	; (800a75c <_vfiprintf_r+0x258>)
 800a6b2:	bb1b      	cbnz	r3, 800a6fc <_vfiprintf_r+0x1f8>
 800a6b4:	9b03      	ldr	r3, [sp, #12]
 800a6b6:	3307      	adds	r3, #7
 800a6b8:	f023 0307 	bic.w	r3, r3, #7
 800a6bc:	3308      	adds	r3, #8
 800a6be:	9303      	str	r3, [sp, #12]
 800a6c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c2:	443b      	add	r3, r7
 800a6c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6c6:	e767      	b.n	800a598 <_vfiprintf_r+0x94>
 800a6c8:	460c      	mov	r4, r1
 800a6ca:	2001      	movs	r0, #1
 800a6cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6d0:	e7a5      	b.n	800a61e <_vfiprintf_r+0x11a>
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	f04f 0c0a 	mov.w	ip, #10
 800a6d8:	4619      	mov	r1, r3
 800a6da:	3401      	adds	r4, #1
 800a6dc:	9305      	str	r3, [sp, #20]
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6e4:	3a30      	subs	r2, #48	; 0x30
 800a6e6:	2a09      	cmp	r2, #9
 800a6e8:	d903      	bls.n	800a6f2 <_vfiprintf_r+0x1ee>
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d0c5      	beq.n	800a67a <_vfiprintf_r+0x176>
 800a6ee:	9105      	str	r1, [sp, #20]
 800a6f0:	e7c3      	b.n	800a67a <_vfiprintf_r+0x176>
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6fa:	e7f0      	b.n	800a6de <_vfiprintf_r+0x1da>
 800a6fc:	ab03      	add	r3, sp, #12
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	462a      	mov	r2, r5
 800a702:	4630      	mov	r0, r6
 800a704:	4b16      	ldr	r3, [pc, #88]	; (800a760 <_vfiprintf_r+0x25c>)
 800a706:	a904      	add	r1, sp, #16
 800a708:	f7fd ffa0 	bl	800864c <_printf_float>
 800a70c:	4607      	mov	r7, r0
 800a70e:	1c78      	adds	r0, r7, #1
 800a710:	d1d6      	bne.n	800a6c0 <_vfiprintf_r+0x1bc>
 800a712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a714:	07d9      	lsls	r1, r3, #31
 800a716:	d405      	bmi.n	800a724 <_vfiprintf_r+0x220>
 800a718:	89ab      	ldrh	r3, [r5, #12]
 800a71a:	059a      	lsls	r2, r3, #22
 800a71c:	d402      	bmi.n	800a724 <_vfiprintf_r+0x220>
 800a71e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a720:	f000 faab 	bl	800ac7a <__retarget_lock_release_recursive>
 800a724:	89ab      	ldrh	r3, [r5, #12]
 800a726:	065b      	lsls	r3, r3, #25
 800a728:	f53f af12 	bmi.w	800a550 <_vfiprintf_r+0x4c>
 800a72c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a72e:	e711      	b.n	800a554 <_vfiprintf_r+0x50>
 800a730:	ab03      	add	r3, sp, #12
 800a732:	9300      	str	r3, [sp, #0]
 800a734:	462a      	mov	r2, r5
 800a736:	4630      	mov	r0, r6
 800a738:	4b09      	ldr	r3, [pc, #36]	; (800a760 <_vfiprintf_r+0x25c>)
 800a73a:	a904      	add	r1, sp, #16
 800a73c:	f7fe fa22 	bl	8008b84 <_printf_i>
 800a740:	e7e4      	b.n	800a70c <_vfiprintf_r+0x208>
 800a742:	bf00      	nop
 800a744:	0800b304 	.word	0x0800b304
 800a748:	0800b324 	.word	0x0800b324
 800a74c:	0800b2e4 	.word	0x0800b2e4
 800a750:	0800b1d2 	.word	0x0800b1d2
 800a754:	0800b1d8 	.word	0x0800b1d8
 800a758:	0800b1dc 	.word	0x0800b1dc
 800a75c:	0800864d 	.word	0x0800864d
 800a760:	0800a4df 	.word	0x0800a4df

0800a764 <__swbuf_r>:
 800a764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a766:	460e      	mov	r6, r1
 800a768:	4614      	mov	r4, r2
 800a76a:	4605      	mov	r5, r0
 800a76c:	b118      	cbz	r0, 800a776 <__swbuf_r+0x12>
 800a76e:	6983      	ldr	r3, [r0, #24]
 800a770:	b90b      	cbnz	r3, 800a776 <__swbuf_r+0x12>
 800a772:	f000 f9e3 	bl	800ab3c <__sinit>
 800a776:	4b21      	ldr	r3, [pc, #132]	; (800a7fc <__swbuf_r+0x98>)
 800a778:	429c      	cmp	r4, r3
 800a77a:	d12b      	bne.n	800a7d4 <__swbuf_r+0x70>
 800a77c:	686c      	ldr	r4, [r5, #4]
 800a77e:	69a3      	ldr	r3, [r4, #24]
 800a780:	60a3      	str	r3, [r4, #8]
 800a782:	89a3      	ldrh	r3, [r4, #12]
 800a784:	071a      	lsls	r2, r3, #28
 800a786:	d52f      	bpl.n	800a7e8 <__swbuf_r+0x84>
 800a788:	6923      	ldr	r3, [r4, #16]
 800a78a:	b36b      	cbz	r3, 800a7e8 <__swbuf_r+0x84>
 800a78c:	6923      	ldr	r3, [r4, #16]
 800a78e:	6820      	ldr	r0, [r4, #0]
 800a790:	b2f6      	uxtb	r6, r6
 800a792:	1ac0      	subs	r0, r0, r3
 800a794:	6963      	ldr	r3, [r4, #20]
 800a796:	4637      	mov	r7, r6
 800a798:	4283      	cmp	r3, r0
 800a79a:	dc04      	bgt.n	800a7a6 <__swbuf_r+0x42>
 800a79c:	4621      	mov	r1, r4
 800a79e:	4628      	mov	r0, r5
 800a7a0:	f000 f938 	bl	800aa14 <_fflush_r>
 800a7a4:	bb30      	cbnz	r0, 800a7f4 <__swbuf_r+0x90>
 800a7a6:	68a3      	ldr	r3, [r4, #8]
 800a7a8:	3001      	adds	r0, #1
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	60a3      	str	r3, [r4, #8]
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	1c5a      	adds	r2, r3, #1
 800a7b2:	6022      	str	r2, [r4, #0]
 800a7b4:	701e      	strb	r6, [r3, #0]
 800a7b6:	6963      	ldr	r3, [r4, #20]
 800a7b8:	4283      	cmp	r3, r0
 800a7ba:	d004      	beq.n	800a7c6 <__swbuf_r+0x62>
 800a7bc:	89a3      	ldrh	r3, [r4, #12]
 800a7be:	07db      	lsls	r3, r3, #31
 800a7c0:	d506      	bpl.n	800a7d0 <__swbuf_r+0x6c>
 800a7c2:	2e0a      	cmp	r6, #10
 800a7c4:	d104      	bne.n	800a7d0 <__swbuf_r+0x6c>
 800a7c6:	4621      	mov	r1, r4
 800a7c8:	4628      	mov	r0, r5
 800a7ca:	f000 f923 	bl	800aa14 <_fflush_r>
 800a7ce:	b988      	cbnz	r0, 800a7f4 <__swbuf_r+0x90>
 800a7d0:	4638      	mov	r0, r7
 800a7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7d4:	4b0a      	ldr	r3, [pc, #40]	; (800a800 <__swbuf_r+0x9c>)
 800a7d6:	429c      	cmp	r4, r3
 800a7d8:	d101      	bne.n	800a7de <__swbuf_r+0x7a>
 800a7da:	68ac      	ldr	r4, [r5, #8]
 800a7dc:	e7cf      	b.n	800a77e <__swbuf_r+0x1a>
 800a7de:	4b09      	ldr	r3, [pc, #36]	; (800a804 <__swbuf_r+0xa0>)
 800a7e0:	429c      	cmp	r4, r3
 800a7e2:	bf08      	it	eq
 800a7e4:	68ec      	ldreq	r4, [r5, #12]
 800a7e6:	e7ca      	b.n	800a77e <__swbuf_r+0x1a>
 800a7e8:	4621      	mov	r1, r4
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	f000 f81a 	bl	800a824 <__swsetup_r>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d0cb      	beq.n	800a78c <__swbuf_r+0x28>
 800a7f4:	f04f 37ff 	mov.w	r7, #4294967295
 800a7f8:	e7ea      	b.n	800a7d0 <__swbuf_r+0x6c>
 800a7fa:	bf00      	nop
 800a7fc:	0800b304 	.word	0x0800b304
 800a800:	0800b324 	.word	0x0800b324
 800a804:	0800b2e4 	.word	0x0800b2e4

0800a808 <__ascii_wctomb>:
 800a808:	4603      	mov	r3, r0
 800a80a:	4608      	mov	r0, r1
 800a80c:	b141      	cbz	r1, 800a820 <__ascii_wctomb+0x18>
 800a80e:	2aff      	cmp	r2, #255	; 0xff
 800a810:	d904      	bls.n	800a81c <__ascii_wctomb+0x14>
 800a812:	228a      	movs	r2, #138	; 0x8a
 800a814:	f04f 30ff 	mov.w	r0, #4294967295
 800a818:	601a      	str	r2, [r3, #0]
 800a81a:	4770      	bx	lr
 800a81c:	2001      	movs	r0, #1
 800a81e:	700a      	strb	r2, [r1, #0]
 800a820:	4770      	bx	lr
	...

0800a824 <__swsetup_r>:
 800a824:	4b32      	ldr	r3, [pc, #200]	; (800a8f0 <__swsetup_r+0xcc>)
 800a826:	b570      	push	{r4, r5, r6, lr}
 800a828:	681d      	ldr	r5, [r3, #0]
 800a82a:	4606      	mov	r6, r0
 800a82c:	460c      	mov	r4, r1
 800a82e:	b125      	cbz	r5, 800a83a <__swsetup_r+0x16>
 800a830:	69ab      	ldr	r3, [r5, #24]
 800a832:	b913      	cbnz	r3, 800a83a <__swsetup_r+0x16>
 800a834:	4628      	mov	r0, r5
 800a836:	f000 f981 	bl	800ab3c <__sinit>
 800a83a:	4b2e      	ldr	r3, [pc, #184]	; (800a8f4 <__swsetup_r+0xd0>)
 800a83c:	429c      	cmp	r4, r3
 800a83e:	d10f      	bne.n	800a860 <__swsetup_r+0x3c>
 800a840:	686c      	ldr	r4, [r5, #4]
 800a842:	89a3      	ldrh	r3, [r4, #12]
 800a844:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a848:	0719      	lsls	r1, r3, #28
 800a84a:	d42c      	bmi.n	800a8a6 <__swsetup_r+0x82>
 800a84c:	06dd      	lsls	r5, r3, #27
 800a84e:	d411      	bmi.n	800a874 <__swsetup_r+0x50>
 800a850:	2309      	movs	r3, #9
 800a852:	6033      	str	r3, [r6, #0]
 800a854:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a858:	f04f 30ff 	mov.w	r0, #4294967295
 800a85c:	81a3      	strh	r3, [r4, #12]
 800a85e:	e03e      	b.n	800a8de <__swsetup_r+0xba>
 800a860:	4b25      	ldr	r3, [pc, #148]	; (800a8f8 <__swsetup_r+0xd4>)
 800a862:	429c      	cmp	r4, r3
 800a864:	d101      	bne.n	800a86a <__swsetup_r+0x46>
 800a866:	68ac      	ldr	r4, [r5, #8]
 800a868:	e7eb      	b.n	800a842 <__swsetup_r+0x1e>
 800a86a:	4b24      	ldr	r3, [pc, #144]	; (800a8fc <__swsetup_r+0xd8>)
 800a86c:	429c      	cmp	r4, r3
 800a86e:	bf08      	it	eq
 800a870:	68ec      	ldreq	r4, [r5, #12]
 800a872:	e7e6      	b.n	800a842 <__swsetup_r+0x1e>
 800a874:	0758      	lsls	r0, r3, #29
 800a876:	d512      	bpl.n	800a89e <__swsetup_r+0x7a>
 800a878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a87a:	b141      	cbz	r1, 800a88e <__swsetup_r+0x6a>
 800a87c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a880:	4299      	cmp	r1, r3
 800a882:	d002      	beq.n	800a88a <__swsetup_r+0x66>
 800a884:	4630      	mov	r0, r6
 800a886:	f7ff fcdb 	bl	800a240 <_free_r>
 800a88a:	2300      	movs	r3, #0
 800a88c:	6363      	str	r3, [r4, #52]	; 0x34
 800a88e:	89a3      	ldrh	r3, [r4, #12]
 800a890:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a894:	81a3      	strh	r3, [r4, #12]
 800a896:	2300      	movs	r3, #0
 800a898:	6063      	str	r3, [r4, #4]
 800a89a:	6923      	ldr	r3, [r4, #16]
 800a89c:	6023      	str	r3, [r4, #0]
 800a89e:	89a3      	ldrh	r3, [r4, #12]
 800a8a0:	f043 0308 	orr.w	r3, r3, #8
 800a8a4:	81a3      	strh	r3, [r4, #12]
 800a8a6:	6923      	ldr	r3, [r4, #16]
 800a8a8:	b94b      	cbnz	r3, 800a8be <__swsetup_r+0x9a>
 800a8aa:	89a3      	ldrh	r3, [r4, #12]
 800a8ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8b4:	d003      	beq.n	800a8be <__swsetup_r+0x9a>
 800a8b6:	4621      	mov	r1, r4
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	f000 fa05 	bl	800acc8 <__smakebuf_r>
 800a8be:	89a0      	ldrh	r0, [r4, #12]
 800a8c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8c4:	f010 0301 	ands.w	r3, r0, #1
 800a8c8:	d00a      	beq.n	800a8e0 <__swsetup_r+0xbc>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	60a3      	str	r3, [r4, #8]
 800a8ce:	6963      	ldr	r3, [r4, #20]
 800a8d0:	425b      	negs	r3, r3
 800a8d2:	61a3      	str	r3, [r4, #24]
 800a8d4:	6923      	ldr	r3, [r4, #16]
 800a8d6:	b943      	cbnz	r3, 800a8ea <__swsetup_r+0xc6>
 800a8d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8dc:	d1ba      	bne.n	800a854 <__swsetup_r+0x30>
 800a8de:	bd70      	pop	{r4, r5, r6, pc}
 800a8e0:	0781      	lsls	r1, r0, #30
 800a8e2:	bf58      	it	pl
 800a8e4:	6963      	ldrpl	r3, [r4, #20]
 800a8e6:	60a3      	str	r3, [r4, #8]
 800a8e8:	e7f4      	b.n	800a8d4 <__swsetup_r+0xb0>
 800a8ea:	2000      	movs	r0, #0
 800a8ec:	e7f7      	b.n	800a8de <__swsetup_r+0xba>
 800a8ee:	bf00      	nop
 800a8f0:	2000001c 	.word	0x2000001c
 800a8f4:	0800b304 	.word	0x0800b304
 800a8f8:	0800b324 	.word	0x0800b324
 800a8fc:	0800b2e4 	.word	0x0800b2e4

0800a900 <abort>:
 800a900:	2006      	movs	r0, #6
 800a902:	b508      	push	{r3, lr}
 800a904:	f000 fa48 	bl	800ad98 <raise>
 800a908:	2001      	movs	r0, #1
 800a90a:	f7f7 fd58 	bl	80023be <_exit>
	...

0800a910 <__sflush_r>:
 800a910:	898a      	ldrh	r2, [r1, #12]
 800a912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a914:	4605      	mov	r5, r0
 800a916:	0710      	lsls	r0, r2, #28
 800a918:	460c      	mov	r4, r1
 800a91a:	d457      	bmi.n	800a9cc <__sflush_r+0xbc>
 800a91c:	684b      	ldr	r3, [r1, #4]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	dc04      	bgt.n	800a92c <__sflush_r+0x1c>
 800a922:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a924:	2b00      	cmp	r3, #0
 800a926:	dc01      	bgt.n	800a92c <__sflush_r+0x1c>
 800a928:	2000      	movs	r0, #0
 800a92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a92c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a92e:	2e00      	cmp	r6, #0
 800a930:	d0fa      	beq.n	800a928 <__sflush_r+0x18>
 800a932:	2300      	movs	r3, #0
 800a934:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a938:	682f      	ldr	r7, [r5, #0]
 800a93a:	602b      	str	r3, [r5, #0]
 800a93c:	d032      	beq.n	800a9a4 <__sflush_r+0x94>
 800a93e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a940:	89a3      	ldrh	r3, [r4, #12]
 800a942:	075a      	lsls	r2, r3, #29
 800a944:	d505      	bpl.n	800a952 <__sflush_r+0x42>
 800a946:	6863      	ldr	r3, [r4, #4]
 800a948:	1ac0      	subs	r0, r0, r3
 800a94a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a94c:	b10b      	cbz	r3, 800a952 <__sflush_r+0x42>
 800a94e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a950:	1ac0      	subs	r0, r0, r3
 800a952:	2300      	movs	r3, #0
 800a954:	4602      	mov	r2, r0
 800a956:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a958:	4628      	mov	r0, r5
 800a95a:	6a21      	ldr	r1, [r4, #32]
 800a95c:	47b0      	blx	r6
 800a95e:	1c43      	adds	r3, r0, #1
 800a960:	89a3      	ldrh	r3, [r4, #12]
 800a962:	d106      	bne.n	800a972 <__sflush_r+0x62>
 800a964:	6829      	ldr	r1, [r5, #0]
 800a966:	291d      	cmp	r1, #29
 800a968:	d82c      	bhi.n	800a9c4 <__sflush_r+0xb4>
 800a96a:	4a29      	ldr	r2, [pc, #164]	; (800aa10 <__sflush_r+0x100>)
 800a96c:	40ca      	lsrs	r2, r1
 800a96e:	07d6      	lsls	r6, r2, #31
 800a970:	d528      	bpl.n	800a9c4 <__sflush_r+0xb4>
 800a972:	2200      	movs	r2, #0
 800a974:	6062      	str	r2, [r4, #4]
 800a976:	6922      	ldr	r2, [r4, #16]
 800a978:	04d9      	lsls	r1, r3, #19
 800a97a:	6022      	str	r2, [r4, #0]
 800a97c:	d504      	bpl.n	800a988 <__sflush_r+0x78>
 800a97e:	1c42      	adds	r2, r0, #1
 800a980:	d101      	bne.n	800a986 <__sflush_r+0x76>
 800a982:	682b      	ldr	r3, [r5, #0]
 800a984:	b903      	cbnz	r3, 800a988 <__sflush_r+0x78>
 800a986:	6560      	str	r0, [r4, #84]	; 0x54
 800a988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a98a:	602f      	str	r7, [r5, #0]
 800a98c:	2900      	cmp	r1, #0
 800a98e:	d0cb      	beq.n	800a928 <__sflush_r+0x18>
 800a990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a994:	4299      	cmp	r1, r3
 800a996:	d002      	beq.n	800a99e <__sflush_r+0x8e>
 800a998:	4628      	mov	r0, r5
 800a99a:	f7ff fc51 	bl	800a240 <_free_r>
 800a99e:	2000      	movs	r0, #0
 800a9a0:	6360      	str	r0, [r4, #52]	; 0x34
 800a9a2:	e7c2      	b.n	800a92a <__sflush_r+0x1a>
 800a9a4:	6a21      	ldr	r1, [r4, #32]
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	4628      	mov	r0, r5
 800a9aa:	47b0      	blx	r6
 800a9ac:	1c41      	adds	r1, r0, #1
 800a9ae:	d1c7      	bne.n	800a940 <__sflush_r+0x30>
 800a9b0:	682b      	ldr	r3, [r5, #0]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d0c4      	beq.n	800a940 <__sflush_r+0x30>
 800a9b6:	2b1d      	cmp	r3, #29
 800a9b8:	d001      	beq.n	800a9be <__sflush_r+0xae>
 800a9ba:	2b16      	cmp	r3, #22
 800a9bc:	d101      	bne.n	800a9c2 <__sflush_r+0xb2>
 800a9be:	602f      	str	r7, [r5, #0]
 800a9c0:	e7b2      	b.n	800a928 <__sflush_r+0x18>
 800a9c2:	89a3      	ldrh	r3, [r4, #12]
 800a9c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9c8:	81a3      	strh	r3, [r4, #12]
 800a9ca:	e7ae      	b.n	800a92a <__sflush_r+0x1a>
 800a9cc:	690f      	ldr	r7, [r1, #16]
 800a9ce:	2f00      	cmp	r7, #0
 800a9d0:	d0aa      	beq.n	800a928 <__sflush_r+0x18>
 800a9d2:	0793      	lsls	r3, r2, #30
 800a9d4:	bf18      	it	ne
 800a9d6:	2300      	movne	r3, #0
 800a9d8:	680e      	ldr	r6, [r1, #0]
 800a9da:	bf08      	it	eq
 800a9dc:	694b      	ldreq	r3, [r1, #20]
 800a9de:	1bf6      	subs	r6, r6, r7
 800a9e0:	600f      	str	r7, [r1, #0]
 800a9e2:	608b      	str	r3, [r1, #8]
 800a9e4:	2e00      	cmp	r6, #0
 800a9e6:	dd9f      	ble.n	800a928 <__sflush_r+0x18>
 800a9e8:	4633      	mov	r3, r6
 800a9ea:	463a      	mov	r2, r7
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	6a21      	ldr	r1, [r4, #32]
 800a9f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a9f4:	47e0      	blx	ip
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	dc06      	bgt.n	800aa08 <__sflush_r+0xf8>
 800a9fa:	89a3      	ldrh	r3, [r4, #12]
 800a9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800aa00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa04:	81a3      	strh	r3, [r4, #12]
 800aa06:	e790      	b.n	800a92a <__sflush_r+0x1a>
 800aa08:	4407      	add	r7, r0
 800aa0a:	1a36      	subs	r6, r6, r0
 800aa0c:	e7ea      	b.n	800a9e4 <__sflush_r+0xd4>
 800aa0e:	bf00      	nop
 800aa10:	20400001 	.word	0x20400001

0800aa14 <_fflush_r>:
 800aa14:	b538      	push	{r3, r4, r5, lr}
 800aa16:	690b      	ldr	r3, [r1, #16]
 800aa18:	4605      	mov	r5, r0
 800aa1a:	460c      	mov	r4, r1
 800aa1c:	b913      	cbnz	r3, 800aa24 <_fflush_r+0x10>
 800aa1e:	2500      	movs	r5, #0
 800aa20:	4628      	mov	r0, r5
 800aa22:	bd38      	pop	{r3, r4, r5, pc}
 800aa24:	b118      	cbz	r0, 800aa2e <_fflush_r+0x1a>
 800aa26:	6983      	ldr	r3, [r0, #24]
 800aa28:	b90b      	cbnz	r3, 800aa2e <_fflush_r+0x1a>
 800aa2a:	f000 f887 	bl	800ab3c <__sinit>
 800aa2e:	4b14      	ldr	r3, [pc, #80]	; (800aa80 <_fflush_r+0x6c>)
 800aa30:	429c      	cmp	r4, r3
 800aa32:	d11b      	bne.n	800aa6c <_fflush_r+0x58>
 800aa34:	686c      	ldr	r4, [r5, #4]
 800aa36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d0ef      	beq.n	800aa1e <_fflush_r+0xa>
 800aa3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa40:	07d0      	lsls	r0, r2, #31
 800aa42:	d404      	bmi.n	800aa4e <_fflush_r+0x3a>
 800aa44:	0599      	lsls	r1, r3, #22
 800aa46:	d402      	bmi.n	800aa4e <_fflush_r+0x3a>
 800aa48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa4a:	f000 f915 	bl	800ac78 <__retarget_lock_acquire_recursive>
 800aa4e:	4628      	mov	r0, r5
 800aa50:	4621      	mov	r1, r4
 800aa52:	f7ff ff5d 	bl	800a910 <__sflush_r>
 800aa56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa58:	4605      	mov	r5, r0
 800aa5a:	07da      	lsls	r2, r3, #31
 800aa5c:	d4e0      	bmi.n	800aa20 <_fflush_r+0xc>
 800aa5e:	89a3      	ldrh	r3, [r4, #12]
 800aa60:	059b      	lsls	r3, r3, #22
 800aa62:	d4dd      	bmi.n	800aa20 <_fflush_r+0xc>
 800aa64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa66:	f000 f908 	bl	800ac7a <__retarget_lock_release_recursive>
 800aa6a:	e7d9      	b.n	800aa20 <_fflush_r+0xc>
 800aa6c:	4b05      	ldr	r3, [pc, #20]	; (800aa84 <_fflush_r+0x70>)
 800aa6e:	429c      	cmp	r4, r3
 800aa70:	d101      	bne.n	800aa76 <_fflush_r+0x62>
 800aa72:	68ac      	ldr	r4, [r5, #8]
 800aa74:	e7df      	b.n	800aa36 <_fflush_r+0x22>
 800aa76:	4b04      	ldr	r3, [pc, #16]	; (800aa88 <_fflush_r+0x74>)
 800aa78:	429c      	cmp	r4, r3
 800aa7a:	bf08      	it	eq
 800aa7c:	68ec      	ldreq	r4, [r5, #12]
 800aa7e:	e7da      	b.n	800aa36 <_fflush_r+0x22>
 800aa80:	0800b304 	.word	0x0800b304
 800aa84:	0800b324 	.word	0x0800b324
 800aa88:	0800b2e4 	.word	0x0800b2e4

0800aa8c <std>:
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	b510      	push	{r4, lr}
 800aa90:	4604      	mov	r4, r0
 800aa92:	e9c0 3300 	strd	r3, r3, [r0]
 800aa96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa9a:	6083      	str	r3, [r0, #8]
 800aa9c:	8181      	strh	r1, [r0, #12]
 800aa9e:	6643      	str	r3, [r0, #100]	; 0x64
 800aaa0:	81c2      	strh	r2, [r0, #14]
 800aaa2:	6183      	str	r3, [r0, #24]
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	2208      	movs	r2, #8
 800aaa8:	305c      	adds	r0, #92	; 0x5c
 800aaaa:	f7fd fd29 	bl	8008500 <memset>
 800aaae:	4b05      	ldr	r3, [pc, #20]	; (800aac4 <std+0x38>)
 800aab0:	6224      	str	r4, [r4, #32]
 800aab2:	6263      	str	r3, [r4, #36]	; 0x24
 800aab4:	4b04      	ldr	r3, [pc, #16]	; (800aac8 <std+0x3c>)
 800aab6:	62a3      	str	r3, [r4, #40]	; 0x28
 800aab8:	4b04      	ldr	r3, [pc, #16]	; (800aacc <std+0x40>)
 800aaba:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aabc:	4b04      	ldr	r3, [pc, #16]	; (800aad0 <std+0x44>)
 800aabe:	6323      	str	r3, [r4, #48]	; 0x30
 800aac0:	bd10      	pop	{r4, pc}
 800aac2:	bf00      	nop
 800aac4:	0800add1 	.word	0x0800add1
 800aac8:	0800adf3 	.word	0x0800adf3
 800aacc:	0800ae2b 	.word	0x0800ae2b
 800aad0:	0800ae4f 	.word	0x0800ae4f

0800aad4 <_cleanup_r>:
 800aad4:	4901      	ldr	r1, [pc, #4]	; (800aadc <_cleanup_r+0x8>)
 800aad6:	f000 b8af 	b.w	800ac38 <_fwalk_reent>
 800aada:	bf00      	nop
 800aadc:	0800aa15 	.word	0x0800aa15

0800aae0 <__sfmoreglue>:
 800aae0:	2268      	movs	r2, #104	; 0x68
 800aae2:	b570      	push	{r4, r5, r6, lr}
 800aae4:	1e4d      	subs	r5, r1, #1
 800aae6:	4355      	muls	r5, r2
 800aae8:	460e      	mov	r6, r1
 800aaea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aaee:	f7ff fc0f 	bl	800a310 <_malloc_r>
 800aaf2:	4604      	mov	r4, r0
 800aaf4:	b140      	cbz	r0, 800ab08 <__sfmoreglue+0x28>
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	e9c0 1600 	strd	r1, r6, [r0]
 800aafc:	300c      	adds	r0, #12
 800aafe:	60a0      	str	r0, [r4, #8]
 800ab00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab04:	f7fd fcfc 	bl	8008500 <memset>
 800ab08:	4620      	mov	r0, r4
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}

0800ab0c <__sfp_lock_acquire>:
 800ab0c:	4801      	ldr	r0, [pc, #4]	; (800ab14 <__sfp_lock_acquire+0x8>)
 800ab0e:	f000 b8b3 	b.w	800ac78 <__retarget_lock_acquire_recursive>
 800ab12:	bf00      	nop
 800ab14:	200008c5 	.word	0x200008c5

0800ab18 <__sfp_lock_release>:
 800ab18:	4801      	ldr	r0, [pc, #4]	; (800ab20 <__sfp_lock_release+0x8>)
 800ab1a:	f000 b8ae 	b.w	800ac7a <__retarget_lock_release_recursive>
 800ab1e:	bf00      	nop
 800ab20:	200008c5 	.word	0x200008c5

0800ab24 <__sinit_lock_acquire>:
 800ab24:	4801      	ldr	r0, [pc, #4]	; (800ab2c <__sinit_lock_acquire+0x8>)
 800ab26:	f000 b8a7 	b.w	800ac78 <__retarget_lock_acquire_recursive>
 800ab2a:	bf00      	nop
 800ab2c:	200008c6 	.word	0x200008c6

0800ab30 <__sinit_lock_release>:
 800ab30:	4801      	ldr	r0, [pc, #4]	; (800ab38 <__sinit_lock_release+0x8>)
 800ab32:	f000 b8a2 	b.w	800ac7a <__retarget_lock_release_recursive>
 800ab36:	bf00      	nop
 800ab38:	200008c6 	.word	0x200008c6

0800ab3c <__sinit>:
 800ab3c:	b510      	push	{r4, lr}
 800ab3e:	4604      	mov	r4, r0
 800ab40:	f7ff fff0 	bl	800ab24 <__sinit_lock_acquire>
 800ab44:	69a3      	ldr	r3, [r4, #24]
 800ab46:	b11b      	cbz	r3, 800ab50 <__sinit+0x14>
 800ab48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab4c:	f7ff bff0 	b.w	800ab30 <__sinit_lock_release>
 800ab50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab54:	6523      	str	r3, [r4, #80]	; 0x50
 800ab56:	4b13      	ldr	r3, [pc, #76]	; (800aba4 <__sinit+0x68>)
 800ab58:	4a13      	ldr	r2, [pc, #76]	; (800aba8 <__sinit+0x6c>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab5e:	42a3      	cmp	r3, r4
 800ab60:	bf08      	it	eq
 800ab62:	2301      	moveq	r3, #1
 800ab64:	4620      	mov	r0, r4
 800ab66:	bf08      	it	eq
 800ab68:	61a3      	streq	r3, [r4, #24]
 800ab6a:	f000 f81f 	bl	800abac <__sfp>
 800ab6e:	6060      	str	r0, [r4, #4]
 800ab70:	4620      	mov	r0, r4
 800ab72:	f000 f81b 	bl	800abac <__sfp>
 800ab76:	60a0      	str	r0, [r4, #8]
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f000 f817 	bl	800abac <__sfp>
 800ab7e:	2200      	movs	r2, #0
 800ab80:	2104      	movs	r1, #4
 800ab82:	60e0      	str	r0, [r4, #12]
 800ab84:	6860      	ldr	r0, [r4, #4]
 800ab86:	f7ff ff81 	bl	800aa8c <std>
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	2109      	movs	r1, #9
 800ab8e:	68a0      	ldr	r0, [r4, #8]
 800ab90:	f7ff ff7c 	bl	800aa8c <std>
 800ab94:	2202      	movs	r2, #2
 800ab96:	2112      	movs	r1, #18
 800ab98:	68e0      	ldr	r0, [r4, #12]
 800ab9a:	f7ff ff77 	bl	800aa8c <std>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	61a3      	str	r3, [r4, #24]
 800aba2:	e7d1      	b.n	800ab48 <__sinit+0xc>
 800aba4:	0800af6c 	.word	0x0800af6c
 800aba8:	0800aad5 	.word	0x0800aad5

0800abac <__sfp>:
 800abac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abae:	4607      	mov	r7, r0
 800abb0:	f7ff ffac 	bl	800ab0c <__sfp_lock_acquire>
 800abb4:	4b1e      	ldr	r3, [pc, #120]	; (800ac30 <__sfp+0x84>)
 800abb6:	681e      	ldr	r6, [r3, #0]
 800abb8:	69b3      	ldr	r3, [r6, #24]
 800abba:	b913      	cbnz	r3, 800abc2 <__sfp+0x16>
 800abbc:	4630      	mov	r0, r6
 800abbe:	f7ff ffbd 	bl	800ab3c <__sinit>
 800abc2:	3648      	adds	r6, #72	; 0x48
 800abc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800abc8:	3b01      	subs	r3, #1
 800abca:	d503      	bpl.n	800abd4 <__sfp+0x28>
 800abcc:	6833      	ldr	r3, [r6, #0]
 800abce:	b30b      	cbz	r3, 800ac14 <__sfp+0x68>
 800abd0:	6836      	ldr	r6, [r6, #0]
 800abd2:	e7f7      	b.n	800abc4 <__sfp+0x18>
 800abd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800abd8:	b9d5      	cbnz	r5, 800ac10 <__sfp+0x64>
 800abda:	4b16      	ldr	r3, [pc, #88]	; (800ac34 <__sfp+0x88>)
 800abdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800abe0:	60e3      	str	r3, [r4, #12]
 800abe2:	6665      	str	r5, [r4, #100]	; 0x64
 800abe4:	f000 f847 	bl	800ac76 <__retarget_lock_init_recursive>
 800abe8:	f7ff ff96 	bl	800ab18 <__sfp_lock_release>
 800abec:	2208      	movs	r2, #8
 800abee:	4629      	mov	r1, r5
 800abf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800abf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800abf8:	6025      	str	r5, [r4, #0]
 800abfa:	61a5      	str	r5, [r4, #24]
 800abfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac00:	f7fd fc7e 	bl	8008500 <memset>
 800ac04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac10:	3468      	adds	r4, #104	; 0x68
 800ac12:	e7d9      	b.n	800abc8 <__sfp+0x1c>
 800ac14:	2104      	movs	r1, #4
 800ac16:	4638      	mov	r0, r7
 800ac18:	f7ff ff62 	bl	800aae0 <__sfmoreglue>
 800ac1c:	4604      	mov	r4, r0
 800ac1e:	6030      	str	r0, [r6, #0]
 800ac20:	2800      	cmp	r0, #0
 800ac22:	d1d5      	bne.n	800abd0 <__sfp+0x24>
 800ac24:	f7ff ff78 	bl	800ab18 <__sfp_lock_release>
 800ac28:	230c      	movs	r3, #12
 800ac2a:	603b      	str	r3, [r7, #0]
 800ac2c:	e7ee      	b.n	800ac0c <__sfp+0x60>
 800ac2e:	bf00      	nop
 800ac30:	0800af6c 	.word	0x0800af6c
 800ac34:	ffff0001 	.word	0xffff0001

0800ac38 <_fwalk_reent>:
 800ac38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac3c:	4606      	mov	r6, r0
 800ac3e:	4688      	mov	r8, r1
 800ac40:	2700      	movs	r7, #0
 800ac42:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac4a:	f1b9 0901 	subs.w	r9, r9, #1
 800ac4e:	d505      	bpl.n	800ac5c <_fwalk_reent+0x24>
 800ac50:	6824      	ldr	r4, [r4, #0]
 800ac52:	2c00      	cmp	r4, #0
 800ac54:	d1f7      	bne.n	800ac46 <_fwalk_reent+0xe>
 800ac56:	4638      	mov	r0, r7
 800ac58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac5c:	89ab      	ldrh	r3, [r5, #12]
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d907      	bls.n	800ac72 <_fwalk_reent+0x3a>
 800ac62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac66:	3301      	adds	r3, #1
 800ac68:	d003      	beq.n	800ac72 <_fwalk_reent+0x3a>
 800ac6a:	4629      	mov	r1, r5
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	47c0      	blx	r8
 800ac70:	4307      	orrs	r7, r0
 800ac72:	3568      	adds	r5, #104	; 0x68
 800ac74:	e7e9      	b.n	800ac4a <_fwalk_reent+0x12>

0800ac76 <__retarget_lock_init_recursive>:
 800ac76:	4770      	bx	lr

0800ac78 <__retarget_lock_acquire_recursive>:
 800ac78:	4770      	bx	lr

0800ac7a <__retarget_lock_release_recursive>:
 800ac7a:	4770      	bx	lr

0800ac7c <__swhatbuf_r>:
 800ac7c:	b570      	push	{r4, r5, r6, lr}
 800ac7e:	460e      	mov	r6, r1
 800ac80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac84:	4614      	mov	r4, r2
 800ac86:	2900      	cmp	r1, #0
 800ac88:	461d      	mov	r5, r3
 800ac8a:	b096      	sub	sp, #88	; 0x58
 800ac8c:	da08      	bge.n	800aca0 <__swhatbuf_r+0x24>
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ac94:	602a      	str	r2, [r5, #0]
 800ac96:	061a      	lsls	r2, r3, #24
 800ac98:	d410      	bmi.n	800acbc <__swhatbuf_r+0x40>
 800ac9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac9e:	e00e      	b.n	800acbe <__swhatbuf_r+0x42>
 800aca0:	466a      	mov	r2, sp
 800aca2:	f000 f8fb 	bl	800ae9c <_fstat_r>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	dbf1      	blt.n	800ac8e <__swhatbuf_r+0x12>
 800acaa:	9a01      	ldr	r2, [sp, #4]
 800acac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800acb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800acb4:	425a      	negs	r2, r3
 800acb6:	415a      	adcs	r2, r3
 800acb8:	602a      	str	r2, [r5, #0]
 800acba:	e7ee      	b.n	800ac9a <__swhatbuf_r+0x1e>
 800acbc:	2340      	movs	r3, #64	; 0x40
 800acbe:	2000      	movs	r0, #0
 800acc0:	6023      	str	r3, [r4, #0]
 800acc2:	b016      	add	sp, #88	; 0x58
 800acc4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800acc8 <__smakebuf_r>:
 800acc8:	898b      	ldrh	r3, [r1, #12]
 800acca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800accc:	079d      	lsls	r5, r3, #30
 800acce:	4606      	mov	r6, r0
 800acd0:	460c      	mov	r4, r1
 800acd2:	d507      	bpl.n	800ace4 <__smakebuf_r+0x1c>
 800acd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800acd8:	6023      	str	r3, [r4, #0]
 800acda:	6123      	str	r3, [r4, #16]
 800acdc:	2301      	movs	r3, #1
 800acde:	6163      	str	r3, [r4, #20]
 800ace0:	b002      	add	sp, #8
 800ace2:	bd70      	pop	{r4, r5, r6, pc}
 800ace4:	466a      	mov	r2, sp
 800ace6:	ab01      	add	r3, sp, #4
 800ace8:	f7ff ffc8 	bl	800ac7c <__swhatbuf_r>
 800acec:	9900      	ldr	r1, [sp, #0]
 800acee:	4605      	mov	r5, r0
 800acf0:	4630      	mov	r0, r6
 800acf2:	f7ff fb0d 	bl	800a310 <_malloc_r>
 800acf6:	b948      	cbnz	r0, 800ad0c <__smakebuf_r+0x44>
 800acf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acfc:	059a      	lsls	r2, r3, #22
 800acfe:	d4ef      	bmi.n	800ace0 <__smakebuf_r+0x18>
 800ad00:	f023 0303 	bic.w	r3, r3, #3
 800ad04:	f043 0302 	orr.w	r3, r3, #2
 800ad08:	81a3      	strh	r3, [r4, #12]
 800ad0a:	e7e3      	b.n	800acd4 <__smakebuf_r+0xc>
 800ad0c:	4b0d      	ldr	r3, [pc, #52]	; (800ad44 <__smakebuf_r+0x7c>)
 800ad0e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad10:	89a3      	ldrh	r3, [r4, #12]
 800ad12:	6020      	str	r0, [r4, #0]
 800ad14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad18:	81a3      	strh	r3, [r4, #12]
 800ad1a:	9b00      	ldr	r3, [sp, #0]
 800ad1c:	6120      	str	r0, [r4, #16]
 800ad1e:	6163      	str	r3, [r4, #20]
 800ad20:	9b01      	ldr	r3, [sp, #4]
 800ad22:	b15b      	cbz	r3, 800ad3c <__smakebuf_r+0x74>
 800ad24:	4630      	mov	r0, r6
 800ad26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad2a:	f000 f8c9 	bl	800aec0 <_isatty_r>
 800ad2e:	b128      	cbz	r0, 800ad3c <__smakebuf_r+0x74>
 800ad30:	89a3      	ldrh	r3, [r4, #12]
 800ad32:	f023 0303 	bic.w	r3, r3, #3
 800ad36:	f043 0301 	orr.w	r3, r3, #1
 800ad3a:	81a3      	strh	r3, [r4, #12]
 800ad3c:	89a0      	ldrh	r0, [r4, #12]
 800ad3e:	4305      	orrs	r5, r0
 800ad40:	81a5      	strh	r5, [r4, #12]
 800ad42:	e7cd      	b.n	800ace0 <__smakebuf_r+0x18>
 800ad44:	0800aad5 	.word	0x0800aad5

0800ad48 <_raise_r>:
 800ad48:	291f      	cmp	r1, #31
 800ad4a:	b538      	push	{r3, r4, r5, lr}
 800ad4c:	4604      	mov	r4, r0
 800ad4e:	460d      	mov	r5, r1
 800ad50:	d904      	bls.n	800ad5c <_raise_r+0x14>
 800ad52:	2316      	movs	r3, #22
 800ad54:	6003      	str	r3, [r0, #0]
 800ad56:	f04f 30ff 	mov.w	r0, #4294967295
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad5e:	b112      	cbz	r2, 800ad66 <_raise_r+0x1e>
 800ad60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad64:	b94b      	cbnz	r3, 800ad7a <_raise_r+0x32>
 800ad66:	4620      	mov	r0, r4
 800ad68:	f000 f830 	bl	800adcc <_getpid_r>
 800ad6c:	462a      	mov	r2, r5
 800ad6e:	4601      	mov	r1, r0
 800ad70:	4620      	mov	r0, r4
 800ad72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad76:	f000 b817 	b.w	800ada8 <_kill_r>
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d00a      	beq.n	800ad94 <_raise_r+0x4c>
 800ad7e:	1c59      	adds	r1, r3, #1
 800ad80:	d103      	bne.n	800ad8a <_raise_r+0x42>
 800ad82:	2316      	movs	r3, #22
 800ad84:	6003      	str	r3, [r0, #0]
 800ad86:	2001      	movs	r0, #1
 800ad88:	e7e7      	b.n	800ad5a <_raise_r+0x12>
 800ad8a:	2400      	movs	r4, #0
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad92:	4798      	blx	r3
 800ad94:	2000      	movs	r0, #0
 800ad96:	e7e0      	b.n	800ad5a <_raise_r+0x12>

0800ad98 <raise>:
 800ad98:	4b02      	ldr	r3, [pc, #8]	; (800ada4 <raise+0xc>)
 800ad9a:	4601      	mov	r1, r0
 800ad9c:	6818      	ldr	r0, [r3, #0]
 800ad9e:	f7ff bfd3 	b.w	800ad48 <_raise_r>
 800ada2:	bf00      	nop
 800ada4:	2000001c 	.word	0x2000001c

0800ada8 <_kill_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	2300      	movs	r3, #0
 800adac:	4d06      	ldr	r5, [pc, #24]	; (800adc8 <_kill_r+0x20>)
 800adae:	4604      	mov	r4, r0
 800adb0:	4608      	mov	r0, r1
 800adb2:	4611      	mov	r1, r2
 800adb4:	602b      	str	r3, [r5, #0]
 800adb6:	f7f7 faf2 	bl	800239e <_kill>
 800adba:	1c43      	adds	r3, r0, #1
 800adbc:	d102      	bne.n	800adc4 <_kill_r+0x1c>
 800adbe:	682b      	ldr	r3, [r5, #0]
 800adc0:	b103      	cbz	r3, 800adc4 <_kill_r+0x1c>
 800adc2:	6023      	str	r3, [r4, #0]
 800adc4:	bd38      	pop	{r3, r4, r5, pc}
 800adc6:	bf00      	nop
 800adc8:	200008c0 	.word	0x200008c0

0800adcc <_getpid_r>:
 800adcc:	f7f7 bae0 	b.w	8002390 <_getpid>

0800add0 <__sread>:
 800add0:	b510      	push	{r4, lr}
 800add2:	460c      	mov	r4, r1
 800add4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800add8:	f000 f894 	bl	800af04 <_read_r>
 800addc:	2800      	cmp	r0, #0
 800adde:	bfab      	itete	ge
 800ade0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ade2:	89a3      	ldrhlt	r3, [r4, #12]
 800ade4:	181b      	addge	r3, r3, r0
 800ade6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800adea:	bfac      	ite	ge
 800adec:	6563      	strge	r3, [r4, #84]	; 0x54
 800adee:	81a3      	strhlt	r3, [r4, #12]
 800adf0:	bd10      	pop	{r4, pc}

0800adf2 <__swrite>:
 800adf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adf6:	461f      	mov	r7, r3
 800adf8:	898b      	ldrh	r3, [r1, #12]
 800adfa:	4605      	mov	r5, r0
 800adfc:	05db      	lsls	r3, r3, #23
 800adfe:	460c      	mov	r4, r1
 800ae00:	4616      	mov	r6, r2
 800ae02:	d505      	bpl.n	800ae10 <__swrite+0x1e>
 800ae04:	2302      	movs	r3, #2
 800ae06:	2200      	movs	r2, #0
 800ae08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae0c:	f000 f868 	bl	800aee0 <_lseek_r>
 800ae10:	89a3      	ldrh	r3, [r4, #12]
 800ae12:	4632      	mov	r2, r6
 800ae14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae18:	81a3      	strh	r3, [r4, #12]
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	463b      	mov	r3, r7
 800ae1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae26:	f000 b817 	b.w	800ae58 <_write_r>

0800ae2a <__sseek>:
 800ae2a:	b510      	push	{r4, lr}
 800ae2c:	460c      	mov	r4, r1
 800ae2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae32:	f000 f855 	bl	800aee0 <_lseek_r>
 800ae36:	1c43      	adds	r3, r0, #1
 800ae38:	89a3      	ldrh	r3, [r4, #12]
 800ae3a:	bf15      	itete	ne
 800ae3c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae46:	81a3      	strheq	r3, [r4, #12]
 800ae48:	bf18      	it	ne
 800ae4a:	81a3      	strhne	r3, [r4, #12]
 800ae4c:	bd10      	pop	{r4, pc}

0800ae4e <__sclose>:
 800ae4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae52:	f000 b813 	b.w	800ae7c <_close_r>
	...

0800ae58 <_write_r>:
 800ae58:	b538      	push	{r3, r4, r5, lr}
 800ae5a:	4604      	mov	r4, r0
 800ae5c:	4608      	mov	r0, r1
 800ae5e:	4611      	mov	r1, r2
 800ae60:	2200      	movs	r2, #0
 800ae62:	4d05      	ldr	r5, [pc, #20]	; (800ae78 <_write_r+0x20>)
 800ae64:	602a      	str	r2, [r5, #0]
 800ae66:	461a      	mov	r2, r3
 800ae68:	f7f7 fad0 	bl	800240c <_write>
 800ae6c:	1c43      	adds	r3, r0, #1
 800ae6e:	d102      	bne.n	800ae76 <_write_r+0x1e>
 800ae70:	682b      	ldr	r3, [r5, #0]
 800ae72:	b103      	cbz	r3, 800ae76 <_write_r+0x1e>
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	bd38      	pop	{r3, r4, r5, pc}
 800ae78:	200008c0 	.word	0x200008c0

0800ae7c <_close_r>:
 800ae7c:	b538      	push	{r3, r4, r5, lr}
 800ae7e:	2300      	movs	r3, #0
 800ae80:	4d05      	ldr	r5, [pc, #20]	; (800ae98 <_close_r+0x1c>)
 800ae82:	4604      	mov	r4, r0
 800ae84:	4608      	mov	r0, r1
 800ae86:	602b      	str	r3, [r5, #0]
 800ae88:	f7f7 fadc 	bl	8002444 <_close>
 800ae8c:	1c43      	adds	r3, r0, #1
 800ae8e:	d102      	bne.n	800ae96 <_close_r+0x1a>
 800ae90:	682b      	ldr	r3, [r5, #0]
 800ae92:	b103      	cbz	r3, 800ae96 <_close_r+0x1a>
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	bd38      	pop	{r3, r4, r5, pc}
 800ae98:	200008c0 	.word	0x200008c0

0800ae9c <_fstat_r>:
 800ae9c:	b538      	push	{r3, r4, r5, lr}
 800ae9e:	2300      	movs	r3, #0
 800aea0:	4d06      	ldr	r5, [pc, #24]	; (800aebc <_fstat_r+0x20>)
 800aea2:	4604      	mov	r4, r0
 800aea4:	4608      	mov	r0, r1
 800aea6:	4611      	mov	r1, r2
 800aea8:	602b      	str	r3, [r5, #0]
 800aeaa:	f7f7 fad6 	bl	800245a <_fstat>
 800aeae:	1c43      	adds	r3, r0, #1
 800aeb0:	d102      	bne.n	800aeb8 <_fstat_r+0x1c>
 800aeb2:	682b      	ldr	r3, [r5, #0]
 800aeb4:	b103      	cbz	r3, 800aeb8 <_fstat_r+0x1c>
 800aeb6:	6023      	str	r3, [r4, #0]
 800aeb8:	bd38      	pop	{r3, r4, r5, pc}
 800aeba:	bf00      	nop
 800aebc:	200008c0 	.word	0x200008c0

0800aec0 <_isatty_r>:
 800aec0:	b538      	push	{r3, r4, r5, lr}
 800aec2:	2300      	movs	r3, #0
 800aec4:	4d05      	ldr	r5, [pc, #20]	; (800aedc <_isatty_r+0x1c>)
 800aec6:	4604      	mov	r4, r0
 800aec8:	4608      	mov	r0, r1
 800aeca:	602b      	str	r3, [r5, #0]
 800aecc:	f7f7 fad4 	bl	8002478 <_isatty>
 800aed0:	1c43      	adds	r3, r0, #1
 800aed2:	d102      	bne.n	800aeda <_isatty_r+0x1a>
 800aed4:	682b      	ldr	r3, [r5, #0]
 800aed6:	b103      	cbz	r3, 800aeda <_isatty_r+0x1a>
 800aed8:	6023      	str	r3, [r4, #0]
 800aeda:	bd38      	pop	{r3, r4, r5, pc}
 800aedc:	200008c0 	.word	0x200008c0

0800aee0 <_lseek_r>:
 800aee0:	b538      	push	{r3, r4, r5, lr}
 800aee2:	4604      	mov	r4, r0
 800aee4:	4608      	mov	r0, r1
 800aee6:	4611      	mov	r1, r2
 800aee8:	2200      	movs	r2, #0
 800aeea:	4d05      	ldr	r5, [pc, #20]	; (800af00 <_lseek_r+0x20>)
 800aeec:	602a      	str	r2, [r5, #0]
 800aeee:	461a      	mov	r2, r3
 800aef0:	f7f7 facc 	bl	800248c <_lseek>
 800aef4:	1c43      	adds	r3, r0, #1
 800aef6:	d102      	bne.n	800aefe <_lseek_r+0x1e>
 800aef8:	682b      	ldr	r3, [r5, #0]
 800aefa:	b103      	cbz	r3, 800aefe <_lseek_r+0x1e>
 800aefc:	6023      	str	r3, [r4, #0]
 800aefe:	bd38      	pop	{r3, r4, r5, pc}
 800af00:	200008c0 	.word	0x200008c0

0800af04 <_read_r>:
 800af04:	b538      	push	{r3, r4, r5, lr}
 800af06:	4604      	mov	r4, r0
 800af08:	4608      	mov	r0, r1
 800af0a:	4611      	mov	r1, r2
 800af0c:	2200      	movs	r2, #0
 800af0e:	4d05      	ldr	r5, [pc, #20]	; (800af24 <_read_r+0x20>)
 800af10:	602a      	str	r2, [r5, #0]
 800af12:	461a      	mov	r2, r3
 800af14:	f7f7 fa5d 	bl	80023d2 <_read>
 800af18:	1c43      	adds	r3, r0, #1
 800af1a:	d102      	bne.n	800af22 <_read_r+0x1e>
 800af1c:	682b      	ldr	r3, [r5, #0]
 800af1e:	b103      	cbz	r3, 800af22 <_read_r+0x1e>
 800af20:	6023      	str	r3, [r4, #0]
 800af22:	bd38      	pop	{r3, r4, r5, pc}
 800af24:	200008c0 	.word	0x200008c0

0800af28 <_init>:
 800af28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2a:	bf00      	nop
 800af2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af2e:	bc08      	pop	{r3}
 800af30:	469e      	mov	lr, r3
 800af32:	4770      	bx	lr

0800af34 <_fini>:
 800af34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af36:	bf00      	nop
 800af38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af3a:	bc08      	pop	{r3}
 800af3c:	469e      	mov	lr, r3
 800af3e:	4770      	bx	lr
