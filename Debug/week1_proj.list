
week1_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbd0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  0800bce0  0800bce0  0001bce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c314  0800c314  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800c314  0800c314  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c314  0800c314  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c314  0800c314  0001c314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c318  0800c318  0001c318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800c31c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  200001f8  0800c514  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  0800c514  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001327c  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ab4  00000000  00000000  0003349d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  00035f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  000371a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003635  00000000  00000000  000382d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f4b  00000000  00000000  0003b905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000945d4  00000000  00000000  00051850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5e24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006034  00000000  00000000  000e5e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bcc8 	.word	0x0800bcc8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800bcc8 	.word	0x0800bcc8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <Set_LED>:
extern DMA_HandleTypeDef hdma_tim1_ch1;

uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4];

void Set_LED (int LEDnum, int Red, int Green, int Blue){
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	b2d9      	uxtb	r1, r3
 8000d96:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <Set_LED+0x54>)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	b2d9      	uxtb	r1, r3
 8000da2:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <Set_LED+0x54>)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	460a      	mov	r2, r1
 8000dac:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	b2d9      	uxtb	r1, r3
 8000db2:	4a09      	ldr	r2, [pc, #36]	; (8000dd8 <Set_LED+0x54>)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	460a      	mov	r2, r1
 8000dbc:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	b2d9      	uxtb	r1, r3
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <Set_LED+0x54>)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	460a      	mov	r2, r1
 8000dcc:	70da      	strb	r2, [r3, #3]

//	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "LED_Data[0]=%d\r\n", LED_Data[LEDnum][0]), 1000);
//	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "LED_Data[1]=%d\r\n", LED_Data[LEDnum][1]), 1000);
//	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "LED_Data[2]=%d\r\n", LED_Data[LEDnum][2]), 1000);
//	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "LED_Data[3]=%d\r\n", LED_Data[LEDnum][3]), 1000);
}
 8000dce:	bf00      	nop
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	20000214 	.word	0x20000214
 8000ddc:	00000000 	.word	0x00000000

08000de0 <Set_Brightness>:

void Set_Brightness (int brightness){
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b2d      	cmp	r3, #45	; 0x2d
 8000dec:	dd01      	ble.n	8000df2 <Set_Brightness+0x12>
 8000dee:	232d      	movs	r3, #45	; 0x2d
 8000df0:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	e05f      	b.n	8000eb8 <Set_Brightness+0xd8>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8000df8:	4a35      	ldr	r2, [pc, #212]	; (8000ed0 <Set_Brightness+0xf0>)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000e00:	4a34      	ldr	r2, [pc, #208]	; (8000ed4 <Set_Brightness+0xf4>)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 8000e08:	2301      	movs	r3, #1
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	e04e      	b.n	8000eac <Set_Brightness+0xcc>
		{
			float angle = 90-brightness;  // in degrees
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff61 	bl	8000cdc <__aeabi_i2f>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8000e1e:	68f8      	ldr	r0, [r7, #12]
 8000e20:	f7ff fb02 	bl	8000428 <__aeabi_f2d>
 8000e24:	a328      	add	r3, pc, #160	; (adr r3, 8000ec8 <Set_Brightness+0xe8>)
 8000e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2a:	f7ff fb55 	bl	80004d8 <__aeabi_dmul>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f04f 0200 	mov.w	r2, #0
 8000e3a:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <Set_Brightness+0xf8>)
 8000e3c:	f7ff fc76 	bl	800072c <__aeabi_ddiv>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4610      	mov	r0, r2
 8000e46:	4619      	mov	r1, r3
 8000e48:	f7ff fe3e 	bl	8000ac8 <__aeabi_d2f>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8000e50:	4a1f      	ldr	r2, [pc, #124]	; (8000ed0 <Set_Brightness+0xf0>)
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	441a      	add	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fad0 	bl	8000404 <__aeabi_i2d>
 8000e64:	4604      	mov	r4, r0
 8000e66:	460d      	mov	r5, r1
 8000e68:	68f8      	ldr	r0, [r7, #12]
 8000e6a:	f7ff fadd 	bl	8000428 <__aeabi_f2d>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	4610      	mov	r0, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	f006 ffb9 	bl	8007dec <tan>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	4620      	mov	r0, r4
 8000e80:	4629      	mov	r1, r5
 8000e82:	f7ff fc53 	bl	800072c <__aeabi_ddiv>
 8000e86:	4602      	mov	r2, r0
 8000e88:	460b      	mov	r3, r1
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f7ff fdfb 	bl	8000a88 <__aeabi_d2uiz>
 8000e92:	4603      	mov	r3, r0
 8000e94:	b2d9      	uxtb	r1, r3
 8000e96:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <Set_Brightness+0xf4>)
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	441a      	add	r2, r3
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	460a      	mov	r2, r1
 8000ea4:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	ddad      	ble.n	8000e0e <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	2b03      	cmp	r3, #3
 8000ebc:	dd9c      	ble.n	8000df8 <Set_Brightness+0x18>
		}
	}

#endif
}
 8000ebe:	bf00      	nop
 8000ec0:	bf00      	nop
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ec8:	53c8d4f1 	.word	0x53c8d4f1
 8000ecc:	400921fb 	.word	0x400921fb
 8000ed0:	20000214 	.word	0x20000214
 8000ed4:	20000224 	.word	0x20000224
 8000ed8:	40668000 	.word	0x40668000

08000edc <WS2812_Send>:


void WS2812_Send (void){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
	uint32_t color;

		for (int i= 0; i<MAX_LED; i++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	e036      	b.n	8000f5a <WS2812_Send+0x7e>
		{
	#if USE_BRIGHTNESS
			color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8000eec:	4a7f      	ldr	r2, [pc, #508]	; (80010ec <WS2812_Send+0x210>)
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	785b      	ldrb	r3, [r3, #1]
 8000ef6:	041a      	lsls	r2, r3, #16
 8000ef8:	497c      	ldr	r1, [pc, #496]	; (80010ec <WS2812_Send+0x210>)
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	440b      	add	r3, r1
 8000f00:	789b      	ldrb	r3, [r3, #2]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	431a      	orrs	r2, r3
 8000f06:	4979      	ldr	r1, [pc, #484]	; (80010ec <WS2812_Send+0x210>)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	78db      	ldrb	r3, [r3, #3]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	603b      	str	r3, [r7, #0]
	#else
			color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));

	#endif

			for (int i=23; i>=0; i--)
 8000f14:	2317      	movs	r3, #23
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	e019      	b.n	8000f4e <WS2812_Send+0x72>
			{
				if (color&(1<<i))
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	461a      	mov	r2, r3
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	4013      	ands	r3, r2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d005      	beq.n	8000f38 <WS2812_Send+0x5c>
				{
					pwmData[indx] = 60;  // 2/3 of 90
 8000f2c:	4a70      	ldr	r2, [pc, #448]	; (80010f0 <WS2812_Send+0x214>)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	213c      	movs	r1, #60	; 0x3c
 8000f32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000f36:	e004      	b.n	8000f42 <WS2812_Send+0x66>
				}

				else {
					pwmData[indx] = 30;  // 1/3 of 90
 8000f38:	4a6d      	ldr	r2, [pc, #436]	; (80010f0 <WS2812_Send+0x214>)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	211e      	movs	r1, #30
 8000f3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				}

				indx++;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3301      	adds	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
			for (int i=23; i>=0; i--)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	dae2      	bge.n	8000f1a <WS2812_Send+0x3e>
		for (int i= 0; i<MAX_LED; i++)
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	3301      	adds	r3, #1
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	ddc5      	ble.n	8000eec <WS2812_Send+0x10>
			}

		}

		for (int i=0; i<50; i++)
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	e00a      	b.n	8000f7c <WS2812_Send+0xa0>
		{
			pwmData[indx] = 0;
 8000f66:	4a62      	ldr	r2, [pc, #392]	; (80010f0 <WS2812_Send+0x214>)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			indx++;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	3301      	adds	r3, #1
 8000f74:	617b      	str	r3, [r7, #20]
		for (int i=0; i<50; i++)
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	2b31      	cmp	r3, #49	; 0x31
 8000f80:	ddf1      	ble.n	8000f66 <WS2812_Send+0x8a>
		}
		HAL_Delay(100);
 8000f82:	2064      	movs	r0, #100	; 0x64
 8000f84:	f001 f994 	bl	80022b0 <HAL_Delay>
		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "indx=%d\r\n", indx), 1000);
 8000f88:	697a      	ldr	r2, [r7, #20]
 8000f8a:	495a      	ldr	r1, [pc, #360]	; (80010f4 <WS2812_Send+0x218>)
 8000f8c:	485a      	ldr	r0, [pc, #360]	; (80010f8 <WS2812_Send+0x21c>)
 8000f8e:	f008 fc23 	bl	80097d8 <siprintf>
 8000f92:	4603      	mov	r3, r0
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9a:	4957      	ldr	r1, [pc, #348]	; (80010f8 <WS2812_Send+0x21c>)
 8000f9c:	4857      	ldr	r0, [pc, #348]	; (80010fc <WS2812_Send+0x220>)
 8000f9e:	f006 f8fc 	bl	800719a <HAL_UART_Transmit>

		HAL_DMA_StateTypeDef timState;
		timState = HAL_TIM_PWM_GetState(&htim1);
 8000fa2:	4857      	ldr	r0, [pc, #348]	; (8001100 <WS2812_Send+0x224>)
 8000fa4:	f005 fc66 	bl	8006874 <HAL_TIM_PWM_GetState>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	71bb      	strb	r3, [r7, #6]
		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "timState=%02X\r\n", timState), 1000);
 8000fac:	79bb      	ldrb	r3, [r7, #6]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4954      	ldr	r1, [pc, #336]	; (8001104 <WS2812_Send+0x228>)
 8000fb2:	4851      	ldr	r0, [pc, #324]	; (80010f8 <WS2812_Send+0x21c>)
 8000fb4:	f008 fc10 	bl	80097d8 <siprintf>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc0:	494d      	ldr	r1, [pc, #308]	; (80010f8 <WS2812_Send+0x21c>)
 8000fc2:	484e      	ldr	r0, [pc, #312]	; (80010fc <WS2812_Send+0x220>)
 8000fc4:	f006 f8e9 	bl	800719a <HAL_UART_Transmit>
		if (HAL_TIM_PWM_GetState(&htim1) != HAL_TIM_STATE_READY)
 8000fc8:	484d      	ldr	r0, [pc, #308]	; (8001100 <WS2812_Send+0x224>)
 8000fca:	f005 fc53 	bl	8006874 <HAL_TIM_PWM_GetState>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d003      	beq.n	8000fdc <WS2812_Send+0x100>
		{
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); // Dừng TIM nếu nó đang hoạt động
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	484a      	ldr	r0, [pc, #296]	; (8001100 <WS2812_Send+0x224>)
 8000fd8:	f004 fdd2 	bl	8005b80 <HAL_TIM_PWM_Stop>
		}
		HAL_Delay(10);
 8000fdc:	200a      	movs	r0, #10
 8000fde:	f001 f967 	bl	80022b0 <HAL_Delay>
		timState = HAL_TIM_PWM_GetState(&htim1);
 8000fe2:	4847      	ldr	r0, [pc, #284]	; (8001100 <WS2812_Send+0x224>)
 8000fe4:	f005 fc46 	bl	8006874 <HAL_TIM_PWM_GetState>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	71bb      	strb	r3, [r7, #6]
		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "timState=%02X\r\n", timState), 1000);
 8000fec:	79bb      	ldrb	r3, [r7, #6]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4944      	ldr	r1, [pc, #272]	; (8001104 <WS2812_Send+0x228>)
 8000ff2:	4841      	ldr	r0, [pc, #260]	; (80010f8 <WS2812_Send+0x21c>)
 8000ff4:	f008 fbf0 	bl	80097d8 <siprintf>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001000:	493d      	ldr	r1, [pc, #244]	; (80010f8 <WS2812_Send+0x21c>)
 8001002:	483e      	ldr	r0, [pc, #248]	; (80010fc <WS2812_Send+0x220>)
 8001004:	f006 f8c9 	bl	800719a <HAL_UART_Transmit>
//				if(newStatus == HAL_OK){
//					HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "status=%02X#\r\n", newStatus), 1000);
//				}
//		    }
		HAL_DMA_StateTypeDef dmaState;
		dmaState = HAL_DMA_GetState(&hdma_tim1_ch1);
 8001008:	483f      	ldr	r0, [pc, #252]	; (8001108 <WS2812_Send+0x22c>)
 800100a:	f001 ff09 	bl	8002e20 <HAL_DMA_GetState>
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "dmaState=%02X\r\n", dmaState), 1000);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	461a      	mov	r2, r3
 8001016:	493d      	ldr	r1, [pc, #244]	; (800110c <WS2812_Send+0x230>)
 8001018:	4837      	ldr	r0, [pc, #220]	; (80010f8 <WS2812_Send+0x21c>)
 800101a:	f008 fbdd 	bl	80097d8 <siprintf>
 800101e:	4603      	mov	r3, r0
 8001020:	b29a      	uxth	r2, r3
 8001022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001026:	4934      	ldr	r1, [pc, #208]	; (80010f8 <WS2812_Send+0x21c>)
 8001028:	4834      	ldr	r0, [pc, #208]	; (80010fc <WS2812_Send+0x220>)
 800102a:	f006 f8b6 	bl	800719a <HAL_UART_Transmit>
		if (dmaState == HAL_DMA_STATE_BUSY || dmaState ==  HAL_DMA_STATE_TIMEOUT )
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d002      	beq.n	800103a <WS2812_Send+0x15e>
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	2b03      	cmp	r3, #3
 8001038:	d10e      	bne.n	8001058 <WS2812_Send+0x17c>
		{
			HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "dmaState=%02X\r\n", dmaState), 1000);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	461a      	mov	r2, r3
 800103e:	4933      	ldr	r1, [pc, #204]	; (800110c <WS2812_Send+0x230>)
 8001040:	482d      	ldr	r0, [pc, #180]	; (80010f8 <WS2812_Send+0x21c>)
 8001042:	f008 fbc9 	bl	80097d8 <siprintf>
 8001046:	4603      	mov	r3, r0
 8001048:	b29a      	uxth	r2, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	492a      	ldr	r1, [pc, #168]	; (80010f8 <WS2812_Send+0x21c>)
 8001050:	482a      	ldr	r0, [pc, #168]	; (80010fc <WS2812_Send+0x220>)
 8001052:	f006 f8a2 	bl	800719a <HAL_UART_Transmit>
 8001056:	e02f      	b.n	80010b8 <WS2812_Send+0x1dc>
		}
		else{
							HAL_StatusTypeDef newStatus = HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	b29b      	uxth	r3, r3
 800105c:	4a24      	ldr	r2, [pc, #144]	; (80010f0 <WS2812_Send+0x214>)
 800105e:	2100      	movs	r1, #0
 8001060:	4827      	ldr	r0, [pc, #156]	; (8001100 <WS2812_Send+0x224>)
 8001062:	f004 fee1 	bl	8005e28 <HAL_TIM_PWM_Start_DMA>
 8001066:	4603      	mov	r3, r0
 8001068:	717b      	strb	r3, [r7, #5]
							HAL_Delay(100);
 800106a:	2064      	movs	r0, #100	; 0x64
 800106c:	f001 f920 	bl	80022b0 <HAL_Delay>
							dmaState = HAL_DMA_GetState(&hdma_tim1_ch1);
 8001070:	4825      	ldr	r0, [pc, #148]	; (8001108 <WS2812_Send+0x22c>)
 8001072:	f001 fed5 	bl	8002e20 <HAL_DMA_GetState>
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
							if(newStatus == HAL_OK){
 800107a:	797b      	ldrb	r3, [r7, #5]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d11b      	bne.n	80010b8 <WS2812_Send+0x1dc>
								HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "newstatus=%02X#\r\n", newStatus), 1000);
 8001080:	797b      	ldrb	r3, [r7, #5]
 8001082:	461a      	mov	r2, r3
 8001084:	4922      	ldr	r1, [pc, #136]	; (8001110 <WS2812_Send+0x234>)
 8001086:	481c      	ldr	r0, [pc, #112]	; (80010f8 <WS2812_Send+0x21c>)
 8001088:	f008 fba6 	bl	80097d8 <siprintf>
 800108c:	4603      	mov	r3, r0
 800108e:	b29a      	uxth	r2, r3
 8001090:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001094:	4918      	ldr	r1, [pc, #96]	; (80010f8 <WS2812_Send+0x21c>)
 8001096:	4819      	ldr	r0, [pc, #100]	; (80010fc <WS2812_Send+0x220>)
 8001098:	f006 f87f 	bl	800719a <HAL_UART_Transmit>
								HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "dmaState=%02X#\r\n", dmaState), 1000);
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	461a      	mov	r2, r3
 80010a0:	491c      	ldr	r1, [pc, #112]	; (8001114 <WS2812_Send+0x238>)
 80010a2:	4815      	ldr	r0, [pc, #84]	; (80010f8 <WS2812_Send+0x21c>)
 80010a4:	f008 fb98 	bl	80097d8 <siprintf>
 80010a8:	4603      	mov	r3, r0
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b0:	4911      	ldr	r1, [pc, #68]	; (80010f8 <WS2812_Send+0x21c>)
 80010b2:	4812      	ldr	r0, [pc, #72]	; (80010fc <WS2812_Send+0x220>)
 80010b4:	f006 f871 	bl	800719a <HAL_UART_Transmit>
							}
		}
		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "dmaState=%02X#\r\n", dmaState), 1000);
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	461a      	mov	r2, r3
 80010bc:	4915      	ldr	r1, [pc, #84]	; (8001114 <WS2812_Send+0x238>)
 80010be:	480e      	ldr	r0, [pc, #56]	; (80010f8 <WS2812_Send+0x21c>)
 80010c0:	f008 fb8a 	bl	80097d8 <siprintf>
 80010c4:	4603      	mov	r3, r0
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010cc:	490a      	ldr	r1, [pc, #40]	; (80010f8 <WS2812_Send+0x21c>)
 80010ce:	480b      	ldr	r0, [pc, #44]	; (80010fc <WS2812_Send+0x220>)
 80010d0:	f006 f863 	bl	800719a <HAL_UART_Transmit>
				while (!datasentflag){};
 80010d4:	bf00      	nop
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <WS2812_Send+0x23c>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0fb      	beq.n	80010d6 <WS2812_Send+0x1fa>
				datasentflag = 0;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <WS2812_Send+0x23c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
}
 80010e4:	bf00      	nop
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000224 	.word	0x20000224
 80010f0:	20000264 	.word	0x20000264
 80010f4:	0800bce0 	.word	0x0800bce0
 80010f8:	2000000c 	.word	0x2000000c
 80010fc:	200004e0 	.word	0x200004e0
 8001100:	2000040c 	.word	0x2000040c
 8001104:	0800bcec 	.word	0x0800bcec
 8001108:	2000049c 	.word	0x2000049c
 800110c:	0800bcfc 	.word	0x0800bcfc
 8001110:	0800bd0c 	.word	0x0800bd0c
 8001114:	0800bd20 	.word	0x0800bd20
 8001118:	20000018 	.word	0x20000018

0800111c <getKeyProcess>:
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress3s[N0_OF_BUTTONS];
static int buttonState[N0_OF_BUTTONS] = {BUTTON_IS_RELEASED, BUTTON_IS_RELEASED, BUTTON_IS_RELEASED};
static int button_flag[N0_OF_BUTTONS];
void getKeyProcess(int index){// turn on button_flag
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db07      	blt.n	800113a <getKeyProcess+0x1e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b02      	cmp	r3, #2
 800112e:	dc04      	bgt.n	800113a <getKeyProcess+0x1e>
		button_flag[index] = 1;
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <getKeyProcess+0x28>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2101      	movs	r1, #1
 8001136:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	20000254 	.word	0x20000254

08001148 <get3sFlag>:
// this function turn on flagForButtonPress3s when button is pressed more than 3s
void get3sFlag(int index){
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	db07      	blt.n	8001166 <get3sFlag+0x1e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b02      	cmp	r3, #2
 800115a:	dc04      	bgt.n	8001166 <get3sFlag+0x1e>
			flagForButtonPress3s[index] = 1;
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <get3sFlag+0x28>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
		}
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	20000244 	.word	0x20000244

08001174 <get1sFlag>:
void clear3sFlag(int index){
	if(index >= 0 && index < N0_OF_BUTTONS){
			flagForButtonPress3s[index] = 0;
		}
}
void get1sFlag(int index){
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < N0_OF_BUTTONS){
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db07      	blt.n	8001192 <get1sFlag+0x1e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b02      	cmp	r3, #2
 8001186:	dc04      	bgt.n	8001192 <get1sFlag+0x1e>
				flag1s[index] = 1;
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <get1sFlag+0x28>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	2201      	movs	r2, #1
 8001190:	701a      	strb	r2, [r3, #0]
			}
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	20000248 	.word	0x20000248

080011a0 <fsm_input_processing>:
void fsm_input_processing(GPIO_PinState buttonBuffer[], int index){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	switch(buttonState[index]){
 80011aa:	4a55      	ldr	r2, [pc, #340]	; (8001300 <fsm_input_processing+0x160>)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d04f      	beq.n	8001256 <fsm_input_processing+0xb6>
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	f300 8096 	bgt.w	80012e8 <fsm_input_processing+0x148>
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d002      	beq.n	80011c6 <fsm_input_processing+0x26>
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d039      	beq.n	8001238 <fsm_input_processing+0x98>
			flag1s[index] = 0;
			button_flag[index] = 0;
		}
		break;
	default:
		break;
 80011c4:	e090      	b.n	80012e8 <fsm_input_processing+0x148>
		if(counterForButtonPress3s[index] < DURATION_FOR_AUTO_INCREASING){
 80011c6:	4a4f      	ldr	r2, [pc, #316]	; (8001304 <fsm_input_processing+0x164>)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011ce:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80011d2:	d220      	bcs.n	8001216 <fsm_input_processing+0x76>
			counterForButtonPress3s[index]++;
 80011d4:	4a4b      	ldr	r2, [pc, #300]	; (8001304 <fsm_input_processing+0x164>)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011dc:	3301      	adds	r3, #1
 80011de:	b299      	uxth	r1, r3
 80011e0:	4a48      	ldr	r2, [pc, #288]	; (8001304 <fsm_input_processing+0x164>)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(counterForButtonPress3s[index] == DURATION_FOR_AUTO_INCREASING){
 80011e8:	4a46      	ldr	r2, [pc, #280]	; (8001304 <fsm_input_processing+0x164>)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011f0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80011f4:	d10f      	bne.n	8001216 <fsm_input_processing+0x76>
				buttonState[index] = BUTTON_PRESSED_MORE_THAN_3s;
 80011f6:	4a42      	ldr	r2, [pc, #264]	; (8001300 <fsm_input_processing+0x160>)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2102      	movs	r1, #2
 80011fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				counterForButtonPress3s[index] = 0;
 8001200:	4a40      	ldr	r2, [pc, #256]	; (8001304 <fsm_input_processing+0x164>)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	2100      	movs	r1, #0
 8001206:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				getKeyProcess(index);
 800120a:	6838      	ldr	r0, [r7, #0]
 800120c:	f7ff ff86 	bl	800111c <getKeyProcess>
				get3sFlag(index);
 8001210:	6838      	ldr	r0, [r7, #0]
 8001212:	f7ff ff99 	bl	8001148 <get3sFlag>
		if(buttonBuffer[index] == BUTTON_RELEASED){
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	4413      	add	r3, r2
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d164      	bne.n	80012ec <fsm_input_processing+0x14c>
			buttonState[index] = BUTTON_IS_RELEASED;
 8001222:	4a37      	ldr	r2, [pc, #220]	; (8001300 <fsm_input_processing+0x160>)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2101      	movs	r1, #1
 8001228:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress3s[index] = 0;
 800122c:	4a35      	ldr	r2, [pc, #212]	; (8001304 <fsm_input_processing+0x164>)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	2100      	movs	r1, #0
 8001232:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		break;
 8001236:	e059      	b.n	80012ec <fsm_input_processing+0x14c>
		if(buttonBuffer[index] == BUTTON_PRESSED){
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d155      	bne.n	80012f0 <fsm_input_processing+0x150>
			buttonState[index] = BUTTON_IS_PRESSED;
 8001244:	4a2e      	ldr	r2, [pc, #184]	; (8001300 <fsm_input_processing+0x160>)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	2100      	movs	r1, #0
 800124a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			getKeyProcess(index);
 800124e:	6838      	ldr	r0, [r7, #0]
 8001250:	f7ff ff64 	bl	800111c <getKeyProcess>
		break;
 8001254:	e04c      	b.n	80012f0 <fsm_input_processing+0x150>
		if(counterForButtonPress3s[index] < DURATION_FOR_MORE_THAN_3s ){
 8001256:	4a2b      	ldr	r2, [pc, #172]	; (8001304 <fsm_input_processing+0x164>)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800125e:	2b63      	cmp	r3, #99	; 0x63
 8001260:	d822      	bhi.n	80012a8 <fsm_input_processing+0x108>
					counterForButtonPress3s[index]++;
 8001262:	4a28      	ldr	r2, [pc, #160]	; (8001304 <fsm_input_processing+0x164>)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800126a:	3301      	adds	r3, #1
 800126c:	b299      	uxth	r1, r3
 800126e:	4a25      	ldr	r2, [pc, #148]	; (8001304 <fsm_input_processing+0x164>)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if(counterForButtonPress3s[index] == DURATION_FOR_MORE_THAN_3s){
 8001276:	4a23      	ldr	r2, [pc, #140]	; (8001304 <fsm_input_processing+0x164>)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800127e:	2b64      	cmp	r3, #100	; 0x64
 8001280:	d112      	bne.n	80012a8 <fsm_input_processing+0x108>
						buttonState[index] = BUTTON_PRESSED_MORE_THAN_3s;
 8001282:	4a1f      	ldr	r2, [pc, #124]	; (8001300 <fsm_input_processing+0x160>)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	2102      	movs	r1, #2
 8001288:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						counterForButtonPress3s[index] = 0;
 800128c:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <fsm_input_processing+0x164>)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	2100      	movs	r1, #0
 8001292:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						get1sFlag(index);
 8001296:	6838      	ldr	r0, [r7, #0]
 8001298:	f7ff ff6c 	bl	8001174 <get1sFlag>
						getKeyProcess(index);
 800129c:	6838      	ldr	r0, [r7, #0]
 800129e:	f7ff ff3d 	bl	800111c <getKeyProcess>
						get3sFlag(index);
 80012a2:	6838      	ldr	r0, [r7, #0]
 80012a4:	f7ff ff50 	bl	8001148 <get3sFlag>
		if(buttonBuffer[index] == BUTTON_RELEASED){
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d11f      	bne.n	80012f4 <fsm_input_processing+0x154>
			buttonState[index] = BUTTON_IS_RELEASED;
 80012b4:	4a12      	ldr	r2, [pc, #72]	; (8001300 <fsm_input_processing+0x160>)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	2101      	movs	r1, #1
 80012ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			counterForButtonPress3s[index] = 0;
 80012be:	4a11      	ldr	r2, [pc, #68]	; (8001304 <fsm_input_processing+0x164>)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	2100      	movs	r1, #0
 80012c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress3s[index] = 0;
 80012c8:	4a0f      	ldr	r2, [pc, #60]	; (8001308 <fsm_input_processing+0x168>)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	4413      	add	r3, r2
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
			flag1s[index] = 0;
 80012d2:	4a0e      	ldr	r2, [pc, #56]	; (800130c <fsm_input_processing+0x16c>)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
			button_flag[index] = 0;
 80012dc:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <fsm_input_processing+0x170>)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	2100      	movs	r1, #0
 80012e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		break;
 80012e6:	e005      	b.n	80012f4 <fsm_input_processing+0x154>
		break;
 80012e8:	bf00      	nop
 80012ea:	e004      	b.n	80012f6 <fsm_input_processing+0x156>
		break;
 80012ec:	bf00      	nop
 80012ee:	e002      	b.n	80012f6 <fsm_input_processing+0x156>
		break;
 80012f0:	bf00      	nop
 80012f2:	e000      	b.n	80012f6 <fsm_input_processing+0x156>
		break;
 80012f4:	bf00      	nop
	}
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000000 	.word	0x20000000
 8001304:	2000024c 	.word	0x2000024c
 8001308:	20000244 	.word	0x20000244
 800130c:	20000248 	.word	0x20000248
 8001310:	20000254 	.word	0x20000254

08001314 <button_reading>:
void button_reading(void){
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i++){
 800131a:	2300      	movs	r3, #0
 800131c:	71fb      	strb	r3, [r7, #7]
 800131e:	e052      	b.n	80013c6 <button_reading+0xb2>
		debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8001320:	79fa      	ldrb	r2, [r7, #7]
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	492c      	ldr	r1, [pc, #176]	; (80013d8 <button_reading+0xc4>)
 8001326:	5c89      	ldrb	r1, [r1, r2]
 8001328:	4a2c      	ldr	r2, [pc, #176]	; (80013dc <button_reading+0xc8>)
 800132a:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800132c:	79fa      	ldrb	r2, [r7, #7]
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	492b      	ldr	r1, [pc, #172]	; (80013e0 <button_reading+0xcc>)
 8001332:	5c89      	ldrb	r1, [r1, r2]
 8001334:	4a28      	ldr	r2, [pc, #160]	; (80013d8 <button_reading+0xc4>)
 8001336:	54d1      	strb	r1, [r2, r3]
		// Chosing Which button is pressed.
		switch(i){
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d01a      	beq.n	8001374 <button_reading+0x60>
 800133e:	2b02      	cmp	r3, #2
 8001340:	dc22      	bgt.n	8001388 <button_reading+0x74>
 8001342:	2b00      	cmp	r3, #0
 8001344:	d002      	beq.n	800134c <button_reading+0x38>
 8001346:	2b01      	cmp	r3, #1
 8001348:	d00a      	beq.n	8001360 <button_reading+0x4c>
			break;
		case 2://  read signal from button0
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
			break;
		default:
			break;
 800134a:	e01d      	b.n	8001388 <button_reading+0x74>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button0_GPIO_Port, Button0_Pin);
 800134c:	79fc      	ldrb	r4, [r7, #7]
 800134e:	2101      	movs	r1, #1
 8001350:	4824      	ldr	r0, [pc, #144]	; (80013e4 <button_reading+0xd0>)
 8001352:	f001 ff23 	bl	800319c <HAL_GPIO_ReadPin>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <button_reading+0xcc>)
 800135c:	551a      	strb	r2, [r3, r4]
			break;
 800135e:	e014      	b.n	800138a <button_reading+0x76>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8001360:	79fc      	ldrb	r4, [r7, #7]
 8001362:	2102      	movs	r1, #2
 8001364:	481f      	ldr	r0, [pc, #124]	; (80013e4 <button_reading+0xd0>)
 8001366:	f001 ff19 	bl	800319c <HAL_GPIO_ReadPin>
 800136a:	4603      	mov	r3, r0
 800136c:	461a      	mov	r2, r3
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <button_reading+0xcc>)
 8001370:	551a      	strb	r2, [r3, r4]
			break;
 8001372:	e00a      	b.n	800138a <button_reading+0x76>
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8001374:	79fc      	ldrb	r4, [r7, #7]
 8001376:	2104      	movs	r1, #4
 8001378:	481a      	ldr	r0, [pc, #104]	; (80013e4 <button_reading+0xd0>)
 800137a:	f001 ff0f 	bl	800319c <HAL_GPIO_ReadPin>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <button_reading+0xcc>)
 8001384:	551a      	strb	r2, [r3, r4]
			break;
 8001386:	e000      	b.n	800138a <button_reading+0x76>
			break;
 8001388:	bf00      	nop
		}
		if((debounceButtonBuffer3[i] == debounceButtonBuffer2[i]) && (debounceButtonBuffer2[i] == debounceButtonBuffer1[i])){
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	4a13      	ldr	r2, [pc, #76]	; (80013dc <button_reading+0xc8>)
 800138e:	5cd2      	ldrb	r2, [r2, r3]
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	4911      	ldr	r1, [pc, #68]	; (80013d8 <button_reading+0xc4>)
 8001394:	5ccb      	ldrb	r3, [r1, r3]
 8001396:	429a      	cmp	r2, r3
 8001398:	d112      	bne.n	80013c0 <button_reading+0xac>
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <button_reading+0xc4>)
 800139e:	5cd2      	ldrb	r2, [r2, r3]
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	490f      	ldr	r1, [pc, #60]	; (80013e0 <button_reading+0xcc>)
 80013a4:	5ccb      	ldrb	r3, [r1, r3]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d10a      	bne.n	80013c0 <button_reading+0xac>
			buttonBuffer[i] = debounceButtonBuffer3[i];
 80013aa:	79fa      	ldrb	r2, [r7, #7]
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	490b      	ldr	r1, [pc, #44]	; (80013dc <button_reading+0xc8>)
 80013b0:	5c89      	ldrb	r1, [r1, r2]
 80013b2:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <button_reading+0xd4>)
 80013b4:	54d1      	strb	r1, [r2, r3]
			fsm_input_processing(buttonBuffer,i);
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	4619      	mov	r1, r3
 80013ba:	480b      	ldr	r0, [pc, #44]	; (80013e8 <button_reading+0xd4>)
 80013bc:	f7ff fef0 	bl	80011a0 <fsm_input_processing>
	for(uint8_t i = 0; i < N0_OF_BUTTONS; i++){
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	3301      	adds	r3, #1
 80013c4:	71fb      	strb	r3, [r7, #7]
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d9a9      	bls.n	8001320 <button_reading+0xc>
		}

	}
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd90      	pop	{r4, r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2000023c 	.word	0x2000023c
 80013dc:	20000240 	.word	0x20000240
 80013e0:	20000238 	.word	0x20000238
 80013e4:	40010c00 	.word	0x40010c00
 80013e8:	20000234 	.word	0x20000234

080013ec <HAL_UART_RxCpltCallback>:
	HAL_GPIO_WritePin(GPIOx, GPIO_PIN[pin], PinState);
}

uint8_t buffer[MAX_BUFFER_SIZE];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	if( huart -> Instance == USART2 ) {
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a13      	ldr	r2, [pc, #76]	; (8001448 <HAL_UART_RxCpltCallback+0x5c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d11f      	bne.n	800143e <HAL_UART_RxCpltCallback+0x52>
		buffer[index_buffer++] = temp;
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <HAL_UART_RxCpltCallback+0x60>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	b2d1      	uxtb	r1, r2
 8001406:	4a11      	ldr	r2, [pc, #68]	; (800144c <HAL_UART_RxCpltCallback+0x60>)
 8001408:	7011      	strb	r1, [r2, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <HAL_UART_RxCpltCallback+0x64>)
 800140e:	7819      	ldrb	r1, [r3, #0]
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_UART_RxCpltCallback+0x68>)
 8001412:	5499      	strb	r1, [r3, r2]
		if(index_buffer == 30) index_buffer = 0;
 8001414:	4b0d      	ldr	r3, [pc, #52]	; (800144c <HAL_UART_RxCpltCallback+0x60>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b1e      	cmp	r3, #30
 800141a:	d102      	bne.n	8001422 <HAL_UART_RxCpltCallback+0x36>
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_UART_RxCpltCallback+0x60>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <HAL_UART_RxCpltCallback+0x6c>)
 8001424:	2201      	movs	r2, #1
 8001426:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit (&huart2, &temp, 1, 50) ;
 8001428:	2332      	movs	r3, #50	; 0x32
 800142a:	2201      	movs	r2, #1
 800142c:	4908      	ldr	r1, [pc, #32]	; (8001450 <HAL_UART_RxCpltCallback+0x64>)
 800142e:	480b      	ldr	r0, [pc, #44]	; (800145c <HAL_UART_RxCpltCallback+0x70>)
 8001430:	f005 feb3 	bl	800719a <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, & temp, 1);
 8001434:	2201      	movs	r2, #1
 8001436:	4906      	ldr	r1, [pc, #24]	; (8001450 <HAL_UART_RxCpltCallback+0x64>)
 8001438:	4808      	ldr	r0, [pc, #32]	; (800145c <HAL_UART_RxCpltCallback+0x70>)
 800143a:	f005 ff31 	bl	80072a0 <HAL_UART_Receive_IT>
	}
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40004400 	.word	0x40004400
 800144c:	20000261 	.word	0x20000261
 8001450:	20000260 	.word	0x20000260
 8001454:	20000528 	.word	0x20000528
 8001458:	20000262 	.word	0x20000262
 800145c:	200004e0 	.word	0x200004e0

08001460 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	 if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a08      	ldr	r2, [pc, #32]	; (8001490 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d10a      	bne.n	8001488 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7f1b      	ldrb	r3, [r3, #28]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d106      	bne.n	8001488 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
		    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800147a:	2100      	movs	r1, #0
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 800147e:	f004 fe75 	bl	800616c <HAL_TIM_PWM_Stop_DMA>
			datasentflag = 1;
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]
	 }
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40012c00 	.word	0x40012c00
 8001494:	2000040c 	.word	0x2000040c
 8001498:	20000018 	.word	0x20000018

0800149c <PWM_DMA_Init>:


// Function to initialize PWM and DMA
void PWM_DMA_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b09c      	sub	sp, #112	; 0x70
 80014a0:	af00      	add	r7, sp, #0
  // Enable the DMA clock
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014a2:	4b37      	ldr	r3, [pc, #220]	; (8001580 <PWM_DMA_Init+0xe4>)
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	4a36      	ldr	r2, [pc, #216]	; (8001580 <PWM_DMA_Init+0xe4>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6153      	str	r3, [r2, #20]
 80014ae:	4b34      	ldr	r3, [pc, #208]	; (8001580 <PWM_DMA_Init+0xe4>)
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]

  // Enable the PWM timer clock
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014ba:	4b31      	ldr	r3, [pc, #196]	; (8001580 <PWM_DMA_Init+0xe4>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	4a30      	ldr	r2, [pc, #192]	; (8001580 <PWM_DMA_Init+0xe4>)
 80014c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014c4:	6193      	str	r3, [r2, #24]
 80014c6:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <PWM_DMA_Init+0xe4>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]

  // Configure the DMA stream and channel
  hdma_tim1_ch1.Instance = PWM_DMA_STREAM;
 80014d2:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <PWM_DMA_Init+0xe8>)
 80014d4:	4a2c      	ldr	r2, [pc, #176]	; (8001588 <PWM_DMA_Init+0xec>)
 80014d6:	601a      	str	r2, [r3, #0]
  hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH; // Transfer data from memory to peripheral
 80014d8:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <PWM_DMA_Init+0xe8>)
 80014da:	2210      	movs	r2, #16
 80014dc:	605a      	str	r2, [r3, #4]
  hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE; // Peripheral increment mode disabled
 80014de:	4b29      	ldr	r3, [pc, #164]	; (8001584 <PWM_DMA_Init+0xe8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE; // Memory increment mode enabled
 80014e4:	4b27      	ldr	r3, [pc, #156]	; (8001584 <PWM_DMA_Init+0xe8>)
 80014e6:	2280      	movs	r2, #128	; 0x80
 80014e8:	60da      	str	r2, [r3, #12]
  hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD; // Peripheral data size is half-word (16 bits)
 80014ea:	4b26      	ldr	r3, [pc, #152]	; (8001584 <PWM_DMA_Init+0xe8>)
 80014ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014f0:	611a      	str	r2, [r3, #16]
  hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD; // Memory data size is half-word (16 bits)
 80014f2:	4b24      	ldr	r3, [pc, #144]	; (8001584 <PWM_DMA_Init+0xe8>)
 80014f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f8:	615a      	str	r2, [r3, #20]
  hdma_tim1_ch1.Init.Mode = DMA_NORMAL; // DMA mode set to normal
 80014fa:	4b22      	ldr	r3, [pc, #136]	; (8001584 <PWM_DMA_Init+0xe8>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW; // DMA priority set to high
 8001500:	4b20      	ldr	r3, [pc, #128]	; (8001584 <PWM_DMA_Init+0xe8>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  HAL_DMA_Init(&hdma_tim1_ch1);
 8001506:	481f      	ldr	r0, [pc, #124]	; (8001584 <PWM_DMA_Init+0xe8>)
 8001508:	f001 fa16 	bl	8002938 <HAL_DMA_Init>

  // Associate the DMA handle with the PWM timer
  __HAL_LINKDMA(&htim1, hdma[TIM_DMA_ID_CC2], hdma_tim1_ch1);
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <PWM_DMA_Init+0xf0>)
 800150e:	4a1d      	ldr	r2, [pc, #116]	; (8001584 <PWM_DMA_Init+0xe8>)
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
 8001512:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <PWM_DMA_Init+0xe8>)
 8001514:	4a1d      	ldr	r2, [pc, #116]	; (800158c <PWM_DMA_Init+0xf0>)
 8001516:	625a      	str	r2, [r3, #36]	; 0x24

  // Configure the PWM timer and channel
  TIM_HandleTypeDef htim1;
  htim1.Instance = PWM_TIMER;
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <PWM_DMA_Init+0xf4>)
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  htim1.Init.Prescaler = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001520:	2300      	movs	r3, #0
 8001522:	633b      	str	r3, [r7, #48]	; 0x30
  htim1.Init.Period = 89; // Set the PWM period (example value)
 8001524:	2359      	movs	r3, #89	; 0x59
 8001526:	637b      	str	r3, [r7, #52]	; 0x34
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	63bb      	str	r3, [r7, #56]	; 0x38
  htim1.Init.RepetitionCounter = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_TIM_PWM_Init(&htim1);
 8001530:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001534:	4618      	mov	r0, r3
 8001536:	f004 fa29 	bl	800598c <HAL_TIM_PWM_Init>

  TIM_OC_InitTypeDef sConfigOC;
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153a:	2360      	movs	r3, #96	; 0x60
 800153c:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = 0; // Set the initial pulse width (example value)
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, PWM_CHANNEL);
 800154a:	f107 010c 	add.w	r1, r7, #12
 800154e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001552:	2204      	movs	r2, #4
 8001554:	4618      	mov	r0, r3
 8001556:	f004 ffd7 	bl	8006508 <HAL_TIM_PWM_ConfigChannel>

  // Start the PWM output
  HAL_TIM_PWM_Start(&htim1, PWM_CHANNEL);
 800155a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800155e:	2104      	movs	r1, #4
 8001560:	4618      	mov	r0, r3
 8001562:	f004 fa6b 	bl	8005a3c <HAL_TIM_PWM_Start>

  // Start the DMA transfer
  HAL_TIM_PWM_Start_DMA(&htim1, PWM_CHANNEL, (uint32_t *)pwmData, sizeof(pwmData));
 8001566:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800156a:	f44f 7392 	mov.w	r3, #292	; 0x124
 800156e:	4a09      	ldr	r2, [pc, #36]	; (8001594 <PWM_DMA_Init+0xf8>)
 8001570:	2104      	movs	r1, #4
 8001572:	f004 fc59 	bl	8005e28 <HAL_TIM_PWM_Start_DMA>
}
 8001576:	bf00      	nop
 8001578:	3770      	adds	r7, #112	; 0x70
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000
 8001584:	2000049c 	.word	0x2000049c
 8001588:	4002001c 	.word	0x4002001c
 800158c:	2000040c 	.word	0x2000040c
 8001590:	40012c00 	.word	0x40012c00
 8001594:	20000264 	.word	0x20000264

08001598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800159c:	f000 fe26 	bl	80021ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a0:	f000 f83a 	bl	8001618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a4:	f000 fa34 	bl	8001a10 <MX_GPIO_Init>
  MX_DMA_Init();
 80015a8:	f000 fa14 	bl	80019d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015ac:	f000 f9e8 	bl	8001980 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80015b0:	f000 f99a 	bl	80018e8 <MX_TIM2_Init>
  MX_ADC1_Init();
 80015b4:	f000 f88c 	bl	80016d0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80015b8:	f000 f8c8 	bl	800174c <MX_I2C1_Init>
  MX_TIM1_Init();
 80015bc:	f000 f8f4 	bl	80017a8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80015c0:	4811      	ldr	r0, [pc, #68]	; (8001608 <main+0x70>)
 80015c2:	f004 f991 	bl	80058e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 80015c6:	4811      	ldr	r0, [pc, #68]	; (800160c <main+0x74>)
 80015c8:	f004 f98e 	bl	80058e8 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 80015cc:	2201      	movs	r2, #1
 80015ce:	4910      	ldr	r1, [pc, #64]	; (8001610 <main+0x78>)
 80015d0:	4810      	ldr	r0, [pc, #64]	; (8001614 <main+0x7c>)
 80015d2:	f005 fe65 	bl	80072a0 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80015d6:	2100      	movs	r1, #0
 80015d8:	480c      	ldr	r0, [pc, #48]	; (800160c <main+0x74>)
 80015da:	f004 fb35 	bl	8005c48 <HAL_TIM_PWM_Start_IT>
  // Initialize the PWM and DMA
  PWM_DMA_Init();
 80015de:	f7ff ff5d 	bl	800149c <PWM_DMA_Init>

//
    Set_LED(0, 0, 255, 0);
 80015e2:	2300      	movs	r3, #0
 80015e4:	22ff      	movs	r2, #255	; 0xff
 80015e6:	2100      	movs	r1, #0
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff fbcb 	bl	8000d84 <Set_LED>
//     setTimer1(50);
//     setTimer2(100);
//     uint8_t status1 = 1;
//     uint8_t status2 = 1;

    Set_Brightness(10);
 80015ee:	200a      	movs	r0, #10
 80015f0:	f7ff fbf6 	bl	8000de0 <Set_Brightness>
    HAL_Delay(100);
 80015f4:	2064      	movs	r0, #100	; 0x64
 80015f6:	f000 fe5b 	bl	80022b0 <HAL_Delay>
    WS2812_Send();
 80015fa:	f7ff fc6f 	bl	8000edc <WS2812_Send>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  rainbow_effect_right();
	  HAL_Delay (30);
 80015fe:	201e      	movs	r0, #30
 8001600:	f000 fe56 	bl	80022b0 <HAL_Delay>
 8001604:	e7fb      	b.n	80015fe <main+0x66>
 8001606:	bf00      	nop
 8001608:	20000454 	.word	0x20000454
 800160c:	2000040c 	.word	0x2000040c
 8001610:	20000260 	.word	0x20000260
 8001614:	200004e0 	.word	0x200004e0

08001618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b094      	sub	sp, #80	; 0x50
 800161c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001622:	2228      	movs	r2, #40	; 0x28
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f007 fc6e 	bl	8008f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001648:	2301      	movs	r3, #1
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800164c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001650:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001652:	2300      	movs	r3, #0
 8001654:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001656:	2301      	movs	r3, #1
 8001658:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800165a:	2302      	movs	r3, #2
 800165c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800165e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001664:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001668:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800166e:	4618      	mov	r0, r3
 8001670:	f003 fc24 	bl	8004ebc <HAL_RCC_OscConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800167a:	f000 fa64 	bl	8001b46 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167e:	230f      	movs	r3, #15
 8001680:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001682:	2302      	movs	r3, #2
 8001684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800168a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800168e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2102      	movs	r1, #2
 800169a:	4618      	mov	r0, r3
 800169c:	f003 fe90 	bl	80053c0 <HAL_RCC_ClockConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80016a6:	f000 fa4e 	bl	8001b46 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016aa:	2302      	movs	r3, #2
 80016ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80016ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016b2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	4618      	mov	r0, r3
 80016b8:	f004 f810 	bl	80056dc <HAL_RCCEx_PeriphCLKConfig>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80016c2:	f000 fa40 	bl	8001b46 <Error_Handler>
  }
}
 80016c6:	bf00      	nop
 80016c8:	3750      	adds	r7, #80	; 0x50
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <MX_ADC1_Init+0x74>)
 80016e2:	4a19      	ldr	r2, [pc, #100]	; (8001748 <MX_ADC1_Init+0x78>)
 80016e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <MX_ADC1_Init+0x74>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_ADC1_Init+0x74>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_ADC1_Init+0x74>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <MX_ADC1_Init+0x74>)
 80016fa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80016fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001700:	4b10      	ldr	r3, [pc, #64]	; (8001744 <MX_ADC1_Init+0x74>)
 8001702:	2200      	movs	r2, #0
 8001704:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MX_ADC1_Init+0x74>)
 8001708:	2201      	movs	r2, #1
 800170a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800170c:	480d      	ldr	r0, [pc, #52]	; (8001744 <MX_ADC1_Init+0x74>)
 800170e:	f000 fdf3 	bl	80022f8 <HAL_ADC_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001718:	f000 fa15 	bl	8001b46 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800171c:	2300      	movs	r3, #0
 800171e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001720:	2301      	movs	r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_ADC1_Init+0x74>)
 800172e:	f000 febb 	bl	80024a8 <HAL_ADC_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001738:	f000 fa05 	bl	8001b46 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000388 	.word	0x20000388
 8001748:	40012400 	.word	0x40012400

0800174c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <MX_I2C1_Init+0x50>)
 8001752:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <MX_I2C1_Init+0x54>)
 8001754:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_I2C1_Init+0x50>)
 8001758:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <MX_I2C1_Init+0x58>)
 800175a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_I2C1_Init+0x50>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_I2C1_Init+0x50>)
 8001764:	2200      	movs	r2, #0
 8001766:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_I2C1_Init+0x50>)
 800176a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800176e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <MX_I2C1_Init+0x50>)
 8001772:	2200      	movs	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_I2C1_Init+0x50>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <MX_I2C1_Init+0x50>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <MX_I2C1_Init+0x50>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001788:	4804      	ldr	r0, [pc, #16]	; (800179c <MX_I2C1_Init+0x50>)
 800178a:	f001 fd59 	bl	8003240 <HAL_I2C_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001794:	f000 f9d7 	bl	8001b46 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200003b8 	.word	0x200003b8
 80017a0:	40005400 	.word	0x40005400
 80017a4:	000186a0 	.word	0x000186a0

080017a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b096      	sub	sp, #88	; 0x58
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	611a      	str	r2, [r3, #16]
 80017d6:	615a      	str	r2, [r3, #20]
 80017d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2220      	movs	r2, #32
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f007 fb91 	bl	8008f08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017e6:	4b3e      	ldr	r3, [pc, #248]	; (80018e0 <MX_TIM1_Init+0x138>)
 80017e8:	4a3e      	ldr	r2, [pc, #248]	; (80018e4 <MX_TIM1_Init+0x13c>)
 80017ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017ec:	4b3c      	ldr	r3, [pc, #240]	; (80018e0 <MX_TIM1_Init+0x138>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f2:	4b3b      	ldr	r3, [pc, #236]	; (80018e0 <MX_TIM1_Init+0x138>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 80017f8:	4b39      	ldr	r3, [pc, #228]	; (80018e0 <MX_TIM1_Init+0x138>)
 80017fa:	2259      	movs	r2, #89	; 0x59
 80017fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fe:	4b38      	ldr	r3, [pc, #224]	; (80018e0 <MX_TIM1_Init+0x138>)
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001804:	4b36      	ldr	r3, [pc, #216]	; (80018e0 <MX_TIM1_Init+0x138>)
 8001806:	2200      	movs	r2, #0
 8001808:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180a:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <MX_TIM1_Init+0x138>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001810:	4833      	ldr	r0, [pc, #204]	; (80018e0 <MX_TIM1_Init+0x138>)
 8001812:	f004 f819 	bl	8005848 <HAL_TIM_Base_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800181c:	f000 f993 	bl	8001b46 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001824:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001826:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800182a:	4619      	mov	r1, r3
 800182c:	482c      	ldr	r0, [pc, #176]	; (80018e0 <MX_TIM1_Init+0x138>)
 800182e:	f004 ff2d 	bl	800668c <HAL_TIM_ConfigClockSource>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001838:	f000 f985 	bl	8001b46 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800183c:	4828      	ldr	r0, [pc, #160]	; (80018e0 <MX_TIM1_Init+0x138>)
 800183e:	f004 f8a5 	bl	800598c <HAL_TIM_PWM_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001848:	f000 f97d 	bl	8001b46 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800184c:	2300      	movs	r3, #0
 800184e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001850:	2300      	movs	r3, #0
 8001852:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001854:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001858:	4619      	mov	r1, r3
 800185a:	4821      	ldr	r0, [pc, #132]	; (80018e0 <MX_TIM1_Init+0x138>)
 800185c:	f005 fb8c 	bl	8006f78 <HAL_TIMEx_MasterConfigSynchronization>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001866:	f000 f96e 	bl	8001b46 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800186a:	2360      	movs	r3, #96	; 0x60
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001872:	2300      	movs	r3, #0
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001876:	2300      	movs	r3, #0
 8001878:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188a:	2200      	movs	r2, #0
 800188c:	4619      	mov	r1, r3
 800188e:	4814      	ldr	r0, [pc, #80]	; (80018e0 <MX_TIM1_Init+0x138>)
 8001890:	f004 fe3a 	bl	8006508 <HAL_TIM_PWM_ConfigChannel>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800189a:	f000 f954 	bl	8001b46 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	4619      	mov	r1, r3
 80018c0:	4807      	ldr	r0, [pc, #28]	; (80018e0 <MX_TIM1_Init+0x138>)
 80018c2:	f005 fbb7 	bl	8007034 <HAL_TIMEx_ConfigBreakDeadTime>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80018cc:	f000 f93b 	bl	8001b46 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018d0:	4803      	ldr	r0, [pc, #12]	; (80018e0 <MX_TIM1_Init+0x138>)
 80018d2:	f000 fa81 	bl	8001dd8 <HAL_TIM_MspPostInit>

}
 80018d6:	bf00      	nop
 80018d8:	3758      	adds	r7, #88	; 0x58
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000040c 	.word	0x2000040c
 80018e4:	40012c00 	.word	0x40012c00

080018e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ee:	f107 0308 	add.w	r3, r7, #8
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	463b      	mov	r3, r7
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001904:	4b1d      	ldr	r3, [pc, #116]	; (800197c <MX_TIM2_Init+0x94>)
 8001906:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800190a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <MX_TIM2_Init+0x94>)
 800190e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001912:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <MX_TIM2_Init+0x94>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <MX_TIM2_Init+0x94>)
 800191c:	2209      	movs	r2, #9
 800191e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001920:	4b16      	ldr	r3, [pc, #88]	; (800197c <MX_TIM2_Init+0x94>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <MX_TIM2_Init+0x94>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800192c:	4813      	ldr	r0, [pc, #76]	; (800197c <MX_TIM2_Init+0x94>)
 800192e:	f003 ff8b 	bl	8005848 <HAL_TIM_Base_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001938:	f000 f905 	bl	8001b46 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001940:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	4619      	mov	r1, r3
 8001948:	480c      	ldr	r0, [pc, #48]	; (800197c <MX_TIM2_Init+0x94>)
 800194a:	f004 fe9f 	bl	800668c <HAL_TIM_ConfigClockSource>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001954:	f000 f8f7 	bl	8001b46 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001958:	2300      	movs	r3, #0
 800195a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195c:	2300      	movs	r3, #0
 800195e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001960:	463b      	mov	r3, r7
 8001962:	4619      	mov	r1, r3
 8001964:	4805      	ldr	r0, [pc, #20]	; (800197c <MX_TIM2_Init+0x94>)
 8001966:	f005 fb07 	bl	8006f78 <HAL_TIMEx_MasterConfigSynchronization>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001970:	f000 f8e9 	bl	8001b46 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000454 	.word	0x20000454

08001980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <MX_USART2_UART_Init+0x4c>)
 8001986:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <MX_USART2_UART_Init+0x50>)
 8001988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <MX_USART2_UART_Init+0x4c>)
 800198c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_USART2_UART_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001998:	4b0c      	ldr	r3, [pc, #48]	; (80019cc <MX_USART2_UART_Init+0x4c>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <MX_USART2_UART_Init+0x4c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <MX_USART2_UART_Init+0x4c>)
 80019a6:	220c      	movs	r2, #12
 80019a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <MX_USART2_UART_Init+0x4c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_USART2_UART_Init+0x4c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_USART2_UART_Init+0x4c>)
 80019b8:	f005 fb9f 	bl	80070fa <HAL_UART_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019c2:	f000 f8c0 	bl	8001b46 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200004e0 	.word	0x200004e0
 80019d0:	40004400 	.word	0x40004400

080019d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <MX_DMA_Init+0x38>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <MX_DMA_Init+0x38>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6153      	str	r3, [r2, #20]
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <MX_DMA_Init+0x38>)
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	200c      	movs	r0, #12
 80019f8:	f000 ff67 	bl	80028ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80019fc:	200c      	movs	r0, #12
 80019fe:	f000 ff80 	bl	8002902 <HAL_NVIC_EnableIRQ>

}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000

08001a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a24:	4b39      	ldr	r3, [pc, #228]	; (8001b0c <MX_GPIO_Init+0xfc>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a38      	ldr	r2, [pc, #224]	; (8001b0c <MX_GPIO_Init+0xfc>)
 8001a2a:	f043 0310 	orr.w	r3, r3, #16
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b36      	ldr	r3, [pc, #216]	; (8001b0c <MX_GPIO_Init+0xfc>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0310 	and.w	r3, r3, #16
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a3c:	4b33      	ldr	r3, [pc, #204]	; (8001b0c <MX_GPIO_Init+0xfc>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4a32      	ldr	r2, [pc, #200]	; (8001b0c <MX_GPIO_Init+0xfc>)
 8001a42:	f043 0320 	orr.w	r3, r3, #32
 8001a46:	6193      	str	r3, [r2, #24]
 8001a48:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <MX_GPIO_Init+0xfc>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f003 0320 	and.w	r3, r3, #32
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a54:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <MX_GPIO_Init+0xfc>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	4a2c      	ldr	r2, [pc, #176]	; (8001b0c <MX_GPIO_Init+0xfc>)
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	6193      	str	r3, [r2, #24]
 8001a60:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <MX_GPIO_Init+0xfc>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6c:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <MX_GPIO_Init+0xfc>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a26      	ldr	r2, [pc, #152]	; (8001b0c <MX_GPIO_Init+0xfc>)
 8001a72:	f043 0308 	orr.w	r3, r3, #8
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <MX_GPIO_Init+0xfc>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	21e0      	movs	r1, #224	; 0xe0
 8001a88:	4821      	ldr	r0, [pc, #132]	; (8001b10 <MX_GPIO_Init+0x100>)
 8001a8a:	f001 fb9e 	bl	80031ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a94:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <MX_GPIO_Init+0x104>)
 8001a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	481d      	ldr	r0, [pc, #116]	; (8001b18 <MX_GPIO_Init+0x108>)
 8001aa4:	f001 f9f6 	bl	8002e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin;
 8001aa8:	23e0      	movs	r3, #224	; 0xe0
 8001aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	4619      	mov	r1, r3
 8001abe:	4814      	ldr	r0, [pc, #80]	; (8001b10 <MX_GPIO_Init+0x100>)
 8001ac0:	f001 f9e8 	bl	8002e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button0_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = Button0_Pin|Button1_Pin|Button2_Pin;
 8001ac4:	2307      	movs	r3, #7
 8001ac6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001acc:	2301      	movs	r3, #1
 8001ace:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4811      	ldr	r0, [pc, #68]	; (8001b1c <MX_GPIO_Init+0x10c>)
 8001ad8:	f001 f9dc 	bl	8002e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001adc:	2340      	movs	r3, #64	; 0x40
 8001ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	4619      	mov	r1, r3
 8001aee:	480b      	ldr	r0, [pc, #44]	; (8001b1c <MX_GPIO_Init+0x10c>)
 8001af0:	f001 f9d0 	bl	8002e94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2100      	movs	r1, #0
 8001af8:	2028      	movs	r0, #40	; 0x28
 8001afa:	f000 fee6 	bl	80028ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001afe:	2028      	movs	r0, #40	; 0x28
 8001b00:	f000 feff 	bl	8002902 <HAL_NVIC_EnableIRQ>

}
 8001b04:	bf00      	nop
 8001b06:	3720      	adds	r7, #32
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40010800 	.word	0x40010800
 8001b14:	10110000 	.word	0x10110000
 8001b18:	40011000 	.word	0x40011000
 8001b1c:	40010c00 	.word	0x40010c00

08001b20 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b30:	d101      	bne.n	8001b36 <HAL_TIM_PeriodElapsedCallback+0x16>
		button_reading();
 8001b32:	f7ff fbef 	bl	8001314 <button_reading>
	}
	timerRun();
 8001b36:	f000 faf1 	bl	800211c <timerRun>
	SCH_Update();
 8001b3a:	f000 f809 	bl	8001b50 <SCH_Update>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4a:	b672      	cpsid	i
}
 8001b4c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b4e:	e7fe      	b.n	8001b4e <Error_Handler+0x8>

08001b50 <SCH_Update>:
    unsigned char i;
    for (i = 0; i < SCH_MAX_TASKS; i++) {
        SCH_Delete_Task(i);
    }
}
void SCH_Update(void){
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
//	                // Not yet ready to run: just decrement the delay
//	                SCH_tasks_G[Index].Delay -= 1;
//	            }
//	        }
//	    }
	if(head != NULL){
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <SCH_Update+0x20>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d004      	beq.n	8001b66 <SCH_Update+0x16>
		head->Delay--;
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <SCH_Update+0x20>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	3a01      	subs	r2, #1
 8001b64:	605a      	str	r2, [r3, #4]
	}
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000548 	.word	0x20000548

08001b74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_MspInit+0x5c>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <HAL_MspInit+0x5c>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6193      	str	r3, [r2, #24]
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_MspInit+0x5c>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <HAL_MspInit+0x5c>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <HAL_MspInit+0x5c>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	61d3      	str	r3, [r2, #28]
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <HAL_MspInit+0x5c>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_MspInit+0x60>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <HAL_MspInit+0x60>)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40010000 	.word	0x40010000

08001bd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 0310 	add.w	r3, r7, #16
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a14      	ldr	r2, [pc, #80]	; (8001c44 <HAL_ADC_MspInit+0x6c>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d121      	bne.n	8001c3c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <HAL_ADC_MspInit+0x70>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <HAL_ADC_MspInit+0x70>)
 8001bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <HAL_ADC_MspInit+0x70>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <HAL_ADC_MspInit+0x70>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	4a0c      	ldr	r2, [pc, #48]	; (8001c48 <HAL_ADC_MspInit+0x70>)
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	6193      	str	r3, [r2, #24]
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_ADC_MspInit+0x70>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	4619      	mov	r1, r3
 8001c36:	4805      	ldr	r0, [pc, #20]	; (8001c4c <HAL_ADC_MspInit+0x74>)
 8001c38:	f001 f92c 	bl	8002e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c3c:	bf00      	nop
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40012400 	.word	0x40012400
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010800 	.word	0x40010800

08001c50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a25      	ldr	r2, [pc, #148]	; (8001d00 <HAL_I2C_MspInit+0xb0>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d142      	bne.n	8001cf6 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c70:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <HAL_I2C_MspInit+0xb4>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	4a23      	ldr	r2, [pc, #140]	; (8001d04 <HAL_I2C_MspInit+0xb4>)
 8001c76:	f043 0308 	orr.w	r3, r3, #8
 8001c7a:	6193      	str	r3, [r2, #24]
 8001c7c:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <HAL_I2C_MspInit+0xb4>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c8e:	2312      	movs	r3, #18
 8001c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c92:	2303      	movs	r3, #3
 8001c94:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	481a      	ldr	r0, [pc, #104]	; (8001d08 <HAL_I2C_MspInit+0xb8>)
 8001c9e:	f001 f8f9 	bl	8002e94 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <HAL_I2C_MspInit+0xbc>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	f043 0302 	orr.w	r3, r3, #2
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb8:	4a14      	ldr	r2, [pc, #80]	; (8001d0c <HAL_I2C_MspInit+0xbc>)
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_I2C_MspInit+0xb4>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	4a10      	ldr	r2, [pc, #64]	; (8001d04 <HAL_I2C_MspInit+0xb4>)
 8001cc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cc8:	61d3      	str	r3, [r2, #28]
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <HAL_I2C_MspInit+0xb4>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2100      	movs	r1, #0
 8001cda:	201f      	movs	r0, #31
 8001cdc:	f000 fdf5 	bl	80028ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001ce0:	201f      	movs	r0, #31
 8001ce2:	f000 fe0e 	bl	8002902 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2100      	movs	r1, #0
 8001cea:	2020      	movs	r0, #32
 8001cec:	f000 fded 	bl	80028ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001cf0:	2020      	movs	r0, #32
 8001cf2:	f000 fe06 	bl	8002902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001cf6:	bf00      	nop
 8001cf8:	3728      	adds	r7, #40	; 0x28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40005400 	.word	0x40005400
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40010c00 	.word	0x40010c00
 8001d0c:	40010000 	.word	0x40010000

08001d10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a2a      	ldr	r2, [pc, #168]	; (8001dc8 <HAL_TIM_Base_MspInit+0xb8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d134      	bne.n	8001d8c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d22:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <HAL_TIM_Base_MspInit+0xbc>)
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	4a29      	ldr	r2, [pc, #164]	; (8001dcc <HAL_TIM_Base_MspInit+0xbc>)
 8001d28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d2c:	6193      	str	r3, [r2, #24]
 8001d2e:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <HAL_TIM_Base_MspInit+0xbc>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001d3a:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <HAL_TIM_Base_MspInit+0xc0>)
 8001d3c:	4a25      	ldr	r2, [pc, #148]	; (8001dd4 <HAL_TIM_Base_MspInit+0xc4>)
 8001d3e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d40:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <HAL_TIM_Base_MspInit+0xc0>)
 8001d42:	2210      	movs	r2, #16
 8001d44:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d46:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <HAL_TIM_Base_MspInit+0xc0>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001d4c:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_TIM_Base_MspInit+0xc0>)
 8001d4e:	2280      	movs	r2, #128	; 0x80
 8001d50:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d52:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <HAL_TIM_Base_MspInit+0xc0>)
 8001d54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d58:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_TIM_Base_MspInit+0xc0>)
 8001d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d60:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001d62:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_TIM_Base_MspInit+0xc0>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_TIM_Base_MspInit+0xc0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001d6e:	4818      	ldr	r0, [pc, #96]	; (8001dd0 <HAL_TIM_Base_MspInit+0xc0>)
 8001d70:	f000 fde2 	bl	8002938 <HAL_DMA_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001d7a:	f7ff fee4 	bl	8001b46 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a13      	ldr	r2, [pc, #76]	; (8001dd0 <HAL_TIM_Base_MspInit+0xc0>)
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24
 8001d84:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <HAL_TIM_Base_MspInit+0xc0>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d8a:	e018      	b.n	8001dbe <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d94:	d113      	bne.n	8001dbe <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d96:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <HAL_TIM_Base_MspInit+0xbc>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4a0c      	ldr	r2, [pc, #48]	; (8001dcc <HAL_TIM_Base_MspInit+0xbc>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	61d3      	str	r3, [r2, #28]
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_TIM_Base_MspInit+0xbc>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2100      	movs	r1, #0
 8001db2:	201c      	movs	r0, #28
 8001db4:	f000 fd89 	bl	80028ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001db8:	201c      	movs	r0, #28
 8001dba:	f000 fda2 	bl	8002902 <HAL_NVIC_EnableIRQ>
}
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40012c00 	.word	0x40012c00
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	2000049c 	.word	0x2000049c
 8001dd4:	4002001c 	.word	0x4002001c

08001dd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 0310 	add.w	r3, r7, #16
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a10      	ldr	r2, [pc, #64]	; (8001e34 <HAL_TIM_MspPostInit+0x5c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d118      	bne.n	8001e2a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <HAL_TIM_MspPostInit+0x60>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4a0e      	ldr	r2, [pc, #56]	; (8001e38 <HAL_TIM_MspPostInit+0x60>)
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	6193      	str	r3, [r2, #24]
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <HAL_TIM_MspPostInit+0x60>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	f107 0310 	add.w	r3, r7, #16
 8001e22:	4619      	mov	r1, r3
 8001e24:	4805      	ldr	r0, [pc, #20]	; (8001e3c <HAL_TIM_MspPostInit+0x64>)
 8001e26:	f001 f835 	bl	8002e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e2a:	bf00      	nop
 8001e2c:	3720      	adds	r7, #32
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40012c00 	.word	0x40012c00
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40010800 	.word	0x40010800

08001e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 0310 	add.w	r3, r7, #16
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a19      	ldr	r2, [pc, #100]	; (8001ec0 <HAL_UART_MspInit+0x80>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d12b      	bne.n	8001eb8 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_UART_MspInit+0x84>)
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_UART_MspInit+0x84>)
 8001e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e6a:	61d3      	str	r3, [r2, #28]
 8001e6c:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <HAL_UART_MspInit+0x84>)
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_UART_MspInit+0x84>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	4a11      	ldr	r2, [pc, #68]	; (8001ec4 <HAL_UART_MspInit+0x84>)
 8001e7e:	f043 0304 	orr.w	r3, r3, #4
 8001e82:	6193      	str	r3, [r2, #24]
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_UART_MspInit+0x84>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e90:	230c      	movs	r3, #12
 8001e92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4809      	ldr	r0, [pc, #36]	; (8001ec8 <HAL_UART_MspInit+0x88>)
 8001ea4:	f000 fff6 	bl	8002e94 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2026      	movs	r0, #38	; 0x26
 8001eae:	f000 fd0c 	bl	80028ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001eb2:	2026      	movs	r0, #38	; 0x26
 8001eb4:	f000 fd25 	bl	8002902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001eb8:	bf00      	nop
 8001eba:	3720      	adds	r7, #32
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40004400 	.word	0x40004400
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40010800 	.word	0x40010800

08001ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <NMI_Handler+0x4>

08001ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed6:	e7fe      	b.n	8001ed6 <HardFault_Handler+0x4>

08001ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001edc:	e7fe      	b.n	8001edc <MemManage_Handler+0x4>

08001ede <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee2:	e7fe      	b.n	8001ee2 <BusFault_Handler+0x4>

08001ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <UsageFault_Handler+0x4>

08001eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr

08001ef6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr

08001f0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f12:	f000 f9b1 	bl	8002278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <DMA1_Channel2_IRQHandler+0x10>)
 8001f22:	f000 fe77 	bl	8002c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	2000049c 	.word	0x2000049c

08001f30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <TIM2_IRQHandler+0x10>)
 8001f36:	f004 f9df 	bl	80062f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000454 	.word	0x20000454

08001f44 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f48:	4802      	ldr	r0, [pc, #8]	; (8001f54 <I2C1_EV_IRQHandler+0x10>)
 8001f4a:	f001 fad1 	bl	80034f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200003b8 	.word	0x200003b8

08001f58 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <I2C1_ER_IRQHandler+0x10>)
 8001f5e:	f001 fc38 	bl	80037d2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200003b8 	.word	0x200003b8

08001f6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f70:	4802      	ldr	r0, [pc, #8]	; (8001f7c <USART2_IRQHandler+0x10>)
 8001f72:	f005 f9bb 	bl	80072ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200004e0 	.word	0x200004e0

08001f80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001f84:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f88:	f001 f938 	bl	80031fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return 1;
 8001f94:	2301      	movs	r3, #1
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <_kill>:

int _kill(int pid, int sig)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fa8:	f006 ff84 	bl	8008eb4 <__errno>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2216      	movs	r2, #22
 8001fb0:	601a      	str	r2, [r3, #0]
  return -1;
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <_exit>:

void _exit (int status)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fc6:	f04f 31ff 	mov.w	r1, #4294967295
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ffe7 	bl	8001f9e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fd0:	e7fe      	b.n	8001fd0 <_exit+0x12>

08001fd2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	e00a      	b.n	8001ffa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fe4:	f3af 8000 	nop.w
 8001fe8:	4601      	mov	r1, r0
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	60ba      	str	r2, [r7, #8]
 8001ff0:	b2ca      	uxtb	r2, r1
 8001ff2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	dbf0      	blt.n	8001fe4 <_read+0x12>
  }

  return len;
 8002002:	687b      	ldr	r3, [r7, #4]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	e009      	b.n	8002032 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	60ba      	str	r2, [r7, #8]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	3301      	adds	r3, #1
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	429a      	cmp	r2, r3
 8002038:	dbf1      	blt.n	800201e <_write+0x12>
  }
  return len;
 800203a:	687b      	ldr	r3, [r7, #4]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <_close>:

int _close(int file)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800204c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800206a:	605a      	str	r2, [r3, #4]
  return 0;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr

08002078 <_isatty>:

int _isatty(int file)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002080:	2301      	movs	r3, #1
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020ac:	4a14      	ldr	r2, [pc, #80]	; (8002100 <_sbrk+0x5c>)
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <_sbrk+0x60>)
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b8:	4b13      	ldr	r3, [pc, #76]	; (8002108 <_sbrk+0x64>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d102      	bne.n	80020c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <_sbrk+0x64>)
 80020c2:	4a12      	ldr	r2, [pc, #72]	; (800210c <_sbrk+0x68>)
 80020c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <_sbrk+0x64>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d207      	bcs.n	80020e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d4:	f006 feee 	bl	8008eb4 <__errno>
 80020d8:	4603      	mov	r3, r0
 80020da:	220c      	movs	r2, #12
 80020dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020de:	f04f 33ff 	mov.w	r3, #4294967295
 80020e2:	e009      	b.n	80020f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <_sbrk+0x64>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <_sbrk+0x64>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	4a05      	ldr	r2, [pc, #20]	; (8002108 <_sbrk+0x64>)
 80020f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020f6:	68fb      	ldr	r3, [r7, #12]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20005000 	.word	0x20005000
 8002104:	00000400 	.word	0x00000400
 8002108:	2000054c 	.word	0x2000054c
 800210c:	20000580 	.word	0x20000580

08002110 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <timerRun>:
void setTimer3 (int duration) {
	timer3_counter = duration/Timer_Cycle;
	timer3_flag = 0;
}

void timerRun(){
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8002120:	4b19      	ldr	r3, [pc, #100]	; (8002188 <timerRun+0x6c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	dd0b      	ble.n	8002140 <timerRun+0x24>
		timer1_counter--;
 8002128:	4b17      	ldr	r3, [pc, #92]	; (8002188 <timerRun+0x6c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	3b01      	subs	r3, #1
 800212e:	4a16      	ldr	r2, [pc, #88]	; (8002188 <timerRun+0x6c>)
 8002130:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <timerRun+0x6c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	dc02      	bgt.n	8002140 <timerRun+0x24>
			timer1_flag = 1;
 800213a:	4b14      	ldr	r3, [pc, #80]	; (800218c <timerRun+0x70>)
 800213c:	2201      	movs	r2, #1
 800213e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 8002140:	4b13      	ldr	r3, [pc, #76]	; (8002190 <timerRun+0x74>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	dd0b      	ble.n	8002160 <timerRun+0x44>
		timer2_counter--;
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <timerRun+0x74>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	3b01      	subs	r3, #1
 800214e:	4a10      	ldr	r2, [pc, #64]	; (8002190 <timerRun+0x74>)
 8002150:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 8002152:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <timerRun+0x74>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	dc02      	bgt.n	8002160 <timerRun+0x44>
			timer2_flag = 1;
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <timerRun+0x78>)
 800215c:	2201      	movs	r2, #1
 800215e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 8002160:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <timerRun+0x7c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	dd0b      	ble.n	8002180 <timerRun+0x64>
		timer3_counter--;
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <timerRun+0x7c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	3b01      	subs	r3, #1
 800216e:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <timerRun+0x7c>)
 8002170:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <timerRun+0x7c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	dc02      	bgt.n	8002180 <timerRun+0x64>
			timer3_flag = 1;
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <timerRun+0x80>)
 800217c:	2201      	movs	r2, #1
 800217e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	20000550 	.word	0x20000550
 800218c:	2000055c 	.word	0x2000055c
 8002190:	20000554 	.word	0x20000554
 8002194:	20000560 	.word	0x20000560
 8002198:	20000558 	.word	0x20000558
 800219c:	20000564 	.word	0x20000564

080021a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021a0:	f7ff ffb6 	bl	8002110 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021a4:	480b      	ldr	r0, [pc, #44]	; (80021d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80021a6:	490c      	ldr	r1, [pc, #48]	; (80021d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80021a8:	4a0c      	ldr	r2, [pc, #48]	; (80021dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ac:	e002      	b.n	80021b4 <LoopCopyDataInit>

080021ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021b2:	3304      	adds	r3, #4

080021b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b8:	d3f9      	bcc.n	80021ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ba:	4a09      	ldr	r2, [pc, #36]	; (80021e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80021bc:	4c09      	ldr	r4, [pc, #36]	; (80021e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c0:	e001      	b.n	80021c6 <LoopFillZerobss>

080021c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c4:	3204      	adds	r2, #4

080021c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c8:	d3fb      	bcc.n	80021c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ca:	f006 fe79 	bl	8008ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021ce:	f7ff f9e3 	bl	8001598 <main>
  bx lr
 80021d2:	4770      	bx	lr
  ldr r0, =_sdata
 80021d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80021dc:	0800c31c 	.word	0x0800c31c
  ldr r2, =_sbss
 80021e0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80021e4:	2000057c 	.word	0x2000057c

080021e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021e8:	e7fe      	b.n	80021e8 <ADC1_2_IRQHandler>
	...

080021ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_Init+0x28>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a07      	ldr	r2, [pc, #28]	; (8002214 <HAL_Init+0x28>)
 80021f6:	f043 0310 	orr.w	r3, r3, #16
 80021fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021fc:	2003      	movs	r0, #3
 80021fe:	f000 fb59 	bl	80028b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002202:	2000      	movs	r0, #0
 8002204:	f000 f808 	bl	8002218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002208:	f7ff fcb4 	bl	8001b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40022000 	.word	0x40022000

08002218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_InitTick+0x54>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_InitTick+0x58>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4619      	mov	r1, r3
 800222a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800222e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002232:	fbb2 f3f3 	udiv	r3, r2, r3
 8002236:	4618      	mov	r0, r3
 8002238:	f000 fb71 	bl	800291e <HAL_SYSTICK_Config>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e00e      	b.n	8002264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b0f      	cmp	r3, #15
 800224a:	d80a      	bhi.n	8002262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800224c:	2200      	movs	r2, #0
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	f04f 30ff 	mov.w	r0, #4294967295
 8002254:	f000 fb39 	bl	80028ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002258:	4a06      	ldr	r2, [pc, #24]	; (8002274 <HAL_InitTick+0x5c>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	e000      	b.n	8002264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	2000001c 	.word	0x2000001c
 8002270:	20000024 	.word	0x20000024
 8002274:	20000020 	.word	0x20000020

08002278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_IncTick+0x1c>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	4b05      	ldr	r3, [pc, #20]	; (8002298 <HAL_IncTick+0x20>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4413      	add	r3, r2
 8002288:	4a03      	ldr	r2, [pc, #12]	; (8002298 <HAL_IncTick+0x20>)
 800228a:	6013      	str	r3, [r2, #0]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	20000024 	.word	0x20000024
 8002298:	20000568 	.word	0x20000568

0800229c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return uwTick;
 80022a0:	4b02      	ldr	r3, [pc, #8]	; (80022ac <HAL_GetTick+0x10>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr
 80022ac:	20000568 	.word	0x20000568

080022b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b8:	f7ff fff0 	bl	800229c <HAL_GetTick>
 80022bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c8:	d005      	beq.n	80022d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <HAL_Delay+0x44>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022d6:	bf00      	nop
 80022d8:	f7ff ffe0 	bl	800229c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d8f7      	bhi.n	80022d8 <HAL_Delay+0x28>
  {
  }
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000024 	.word	0x20000024

080022f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e0be      	b.n	8002498 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	2b00      	cmp	r3, #0
 8002326:	d109      	bne.n	800233c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff fc4e 	bl	8001bd8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f9ab 	bl	8002698 <ADC_ConversionStop_Disable>
 8002342:	4603      	mov	r3, r0
 8002344:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	2b00      	cmp	r3, #0
 8002350:	f040 8099 	bne.w	8002486 <HAL_ADC_Init+0x18e>
 8002354:	7dfb      	ldrb	r3, [r7, #23]
 8002356:	2b00      	cmp	r3, #0
 8002358:	f040 8095 	bne.w	8002486 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002364:	f023 0302 	bic.w	r3, r3, #2
 8002368:	f043 0202 	orr.w	r2, r3, #2
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002378:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	7b1b      	ldrb	r3, [r3, #12]
 800237e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002380:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	4313      	orrs	r3, r2
 8002386:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002390:	d003      	beq.n	800239a <HAL_ADC_Init+0xa2>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d102      	bne.n	80023a0 <HAL_ADC_Init+0xa8>
 800239a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800239e:	e000      	b.n	80023a2 <HAL_ADC_Init+0xaa>
 80023a0:	2300      	movs	r3, #0
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	7d1b      	ldrb	r3, [r3, #20]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d119      	bne.n	80023e4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	7b1b      	ldrb	r3, [r3, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d109      	bne.n	80023cc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	3b01      	subs	r3, #1
 80023be:	035a      	lsls	r2, r3, #13
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	e00b      	b.n	80023e4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	f043 0220 	orr.w	r2, r3, #32
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	f043 0201 	orr.w	r2, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	4b28      	ldr	r3, [pc, #160]	; (80024a0 <HAL_ADC_Init+0x1a8>)
 8002400:	4013      	ands	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	68b9      	ldr	r1, [r7, #8]
 8002408:	430b      	orrs	r3, r1
 800240a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002414:	d003      	beq.n	800241e <HAL_ADC_Init+0x126>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d104      	bne.n	8002428 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	3b01      	subs	r3, #1
 8002424:	051b      	lsls	r3, r3, #20
 8002426:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	430a      	orrs	r2, r1
 800243a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <HAL_ADC_Init+0x1ac>)
 8002444:	4013      	ands	r3, r2
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	429a      	cmp	r2, r3
 800244a:	d10b      	bne.n	8002464 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	f023 0303 	bic.w	r3, r3, #3
 800245a:	f043 0201 	orr.w	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002462:	e018      	b.n	8002496 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	f023 0312 	bic.w	r3, r3, #18
 800246c:	f043 0210 	orr.w	r2, r3, #16
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	f043 0201 	orr.w	r2, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002484:	e007      	b.n	8002496 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248a:	f043 0210 	orr.w	r2, r3, #16
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002496:	7dfb      	ldrb	r3, [r7, #23]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	ffe1f7fd 	.word	0xffe1f7fd
 80024a4:	ff1f0efe 	.word	0xff1f0efe

080024a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x20>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e0dc      	b.n	8002682 <HAL_ADC_ConfigChannel+0x1da>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b06      	cmp	r3, #6
 80024d6:	d81c      	bhi.n	8002512 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	3b05      	subs	r3, #5
 80024ea:	221f      	movs	r2, #31
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	4019      	ands	r1, r3
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	3b05      	subs	r3, #5
 8002504:	fa00 f203 	lsl.w	r2, r0, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	635a      	str	r2, [r3, #52]	; 0x34
 8002510:	e03c      	b.n	800258c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b0c      	cmp	r3, #12
 8002518:	d81c      	bhi.n	8002554 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	3b23      	subs	r3, #35	; 0x23
 800252c:	221f      	movs	r2, #31
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	4019      	ands	r1, r3
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	3b23      	subs	r3, #35	; 0x23
 8002546:	fa00 f203 	lsl.w	r2, r0, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	631a      	str	r2, [r3, #48]	; 0x30
 8002552:	e01b      	b.n	800258c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	3b41      	subs	r3, #65	; 0x41
 8002566:	221f      	movs	r2, #31
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	4019      	ands	r1, r3
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	3b41      	subs	r3, #65	; 0x41
 8002580:	fa00 f203 	lsl.w	r2, r0, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b09      	cmp	r3, #9
 8002592:	d91c      	bls.n	80025ce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68d9      	ldr	r1, [r3, #12]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	4613      	mov	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	4413      	add	r3, r2
 80025a4:	3b1e      	subs	r3, #30
 80025a6:	2207      	movs	r2, #7
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	4019      	ands	r1, r3
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	6898      	ldr	r0, [r3, #8]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	3b1e      	subs	r3, #30
 80025c0:	fa00 f203 	lsl.w	r2, r0, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	60da      	str	r2, [r3, #12]
 80025cc:	e019      	b.n	8002602 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6919      	ldr	r1, [r3, #16]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	2207      	movs	r2, #7
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	4019      	ands	r1, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	6898      	ldr	r0, [r3, #8]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4613      	mov	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	fa00 f203 	lsl.w	r2, r0, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b10      	cmp	r3, #16
 8002608:	d003      	beq.n	8002612 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800260e:	2b11      	cmp	r3, #17
 8002610:	d132      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a1d      	ldr	r2, [pc, #116]	; (800268c <HAL_ADC_ConfigChannel+0x1e4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d125      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d126      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002638:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b10      	cmp	r3, #16
 8002640:	d11a      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002642:	4b13      	ldr	r3, [pc, #76]	; (8002690 <HAL_ADC_ConfigChannel+0x1e8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a13      	ldr	r2, [pc, #76]	; (8002694 <HAL_ADC_ConfigChannel+0x1ec>)
 8002648:	fba2 2303 	umull	r2, r3, r2, r3
 800264c:	0c9a      	lsrs	r2, r3, #18
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002658:	e002      	b.n	8002660 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	3b01      	subs	r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f9      	bne.n	800265a <HAL_ADC_ConfigChannel+0x1b2>
 8002666:	e007      	b.n	8002678 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	f043 0220 	orr.w	r2, r3, #32
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002680:	7bfb      	ldrb	r3, [r7, #15]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	40012400 	.word	0x40012400
 8002690:	2000001c 	.word	0x2000001c
 8002694:	431bde83 	.word	0x431bde83

08002698 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d12e      	bne.n	8002710 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0201 	bic.w	r2, r2, #1
 80026c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026c2:	f7ff fdeb 	bl	800229c <HAL_GetTick>
 80026c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026c8:	e01b      	b.n	8002702 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026ca:	f7ff fde7 	bl	800229c <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d914      	bls.n	8002702 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d10d      	bne.n	8002702 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	f043 0210 	orr.w	r2, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	f043 0201 	orr.w	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e007      	b.n	8002712 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b01      	cmp	r3, #1
 800270e:	d0dc      	beq.n	80026ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <__NVIC_SetPriorityGrouping+0x44>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002738:	4013      	ands	r3, r2
 800273a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800274c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800274e:	4a04      	ldr	r2, [pc, #16]	; (8002760 <__NVIC_SetPriorityGrouping+0x44>)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	60d3      	str	r3, [r2, #12]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002768:	4b04      	ldr	r3, [pc, #16]	; (800277c <__NVIC_GetPriorityGrouping+0x18>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	f003 0307 	and.w	r3, r3, #7
}
 8002772:	4618      	mov	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	2b00      	cmp	r3, #0
 8002790:	db0b      	blt.n	80027aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	f003 021f 	and.w	r2, r3, #31
 8002798:	4906      	ldr	r1, [pc, #24]	; (80027b4 <__NVIC_EnableIRQ+0x34>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	2001      	movs	r0, #1
 80027a2:	fa00 f202 	lsl.w	r2, r0, r2
 80027a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	e000e100 	.word	0xe000e100

080027b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	6039      	str	r1, [r7, #0]
 80027c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	db0a      	blt.n	80027e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	490c      	ldr	r1, [pc, #48]	; (8002804 <__NVIC_SetPriority+0x4c>)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	0112      	lsls	r2, r2, #4
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	440b      	add	r3, r1
 80027dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e0:	e00a      	b.n	80027f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	4908      	ldr	r1, [pc, #32]	; (8002808 <__NVIC_SetPriority+0x50>)
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	3b04      	subs	r3, #4
 80027f0:	0112      	lsls	r2, r2, #4
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	440b      	add	r3, r1
 80027f6:	761a      	strb	r2, [r3, #24]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000e100 	.word	0xe000e100
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	; 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f1c3 0307 	rsb	r3, r3, #7
 8002826:	2b04      	cmp	r3, #4
 8002828:	bf28      	it	cs
 800282a:	2304      	movcs	r3, #4
 800282c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3304      	adds	r3, #4
 8002832:	2b06      	cmp	r3, #6
 8002834:	d902      	bls.n	800283c <NVIC_EncodePriority+0x30>
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3b03      	subs	r3, #3
 800283a:	e000      	b.n	800283e <NVIC_EncodePriority+0x32>
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	f04f 32ff 	mov.w	r2, #4294967295
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43da      	mvns	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	401a      	ands	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002854:	f04f 31ff 	mov.w	r1, #4294967295
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fa01 f303 	lsl.w	r3, r1, r3
 800285e:	43d9      	mvns	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002864:	4313      	orrs	r3, r2
         );
}
 8002866:	4618      	mov	r0, r3
 8002868:	3724      	adds	r7, #36	; 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3b01      	subs	r3, #1
 800287c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002880:	d301      	bcc.n	8002886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002882:	2301      	movs	r3, #1
 8002884:	e00f      	b.n	80028a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002886:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <SysTick_Config+0x40>)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800288e:	210f      	movs	r1, #15
 8002890:	f04f 30ff 	mov.w	r0, #4294967295
 8002894:	f7ff ff90 	bl	80027b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <SysTick_Config+0x40>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800289e:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <SysTick_Config+0x40>)
 80028a0:	2207      	movs	r2, #7
 80028a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	e000e010 	.word	0xe000e010

080028b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff ff2d 	bl	800271c <__NVIC_SetPriorityGrouping>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b086      	sub	sp, #24
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
 80028d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028dc:	f7ff ff42 	bl	8002764 <__NVIC_GetPriorityGrouping>
 80028e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	6978      	ldr	r0, [r7, #20]
 80028e8:	f7ff ff90 	bl	800280c <NVIC_EncodePriority>
 80028ec:	4602      	mov	r2, r0
 80028ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff5f 	bl	80027b8 <__NVIC_SetPriority>
}
 80028fa:	bf00      	nop
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	4603      	mov	r3, r0
 800290a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800290c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ff35 	bl	8002780 <__NVIC_EnableIRQ>
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff ffa2 	bl	8002870 <SysTick_Config>
 800292c:	4603      	mov	r3, r0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e043      	b.n	80029d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <HAL_DMA_Init+0xa8>)
 8002956:	4413      	add	r3, r2
 8002958:	4a22      	ldr	r2, [pc, #136]	; (80029e4 <HAL_DMA_Init+0xac>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	091b      	lsrs	r3, r3, #4
 8002960:	009a      	lsls	r2, r3, #2
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a1f      	ldr	r2, [pc, #124]	; (80029e8 <HAL_DMA_Init+0xb0>)
 800296a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002982:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002986:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002990:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800299c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr
 80029e0:	bffdfff8 	.word	0xbffdfff8
 80029e4:	cccccccd 	.word	0xcccccccd
 80029e8:	40020000 	.word	0x40020000

080029ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_DMA_Start_IT+0x20>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e04b      	b.n	8002aa4 <HAL_DMA_Start_IT+0xb8>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d13a      	bne.n	8002a96 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0201 	bic.w	r2, r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 f9f8 	bl	8002e3a <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d008      	beq.n	8002a64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 020e 	orr.w	r2, r2, #14
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	e00f      	b.n	8002a84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0204 	bic.w	r2, r2, #4
 8002a72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 020a 	orr.w	r2, r2, #10
 8002a82:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	e005      	b.n	8002aa2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d008      	beq.n	8002ad6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2204      	movs	r2, #4
 8002ac8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e020      	b.n	8002b18 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 020e 	bic.w	r2, r2, #14
 8002ae4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0201 	bic.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	2101      	movs	r1, #1
 8002b00:	fa01 f202 	lsl.w	r2, r1, r2
 8002b04:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr
	...

08002b24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d005      	beq.n	8002b48 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2204      	movs	r2, #4
 8002b40:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	73fb      	strb	r3, [r7, #15]
 8002b46:	e051      	b.n	8002bec <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 020e 	bic.w	r2, r2, #14
 8002b56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0201 	bic.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a22      	ldr	r2, [pc, #136]	; (8002bf8 <HAL_DMA_Abort_IT+0xd4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d029      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0xa2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a21      	ldr	r2, [pc, #132]	; (8002bfc <HAL_DMA_Abort_IT+0xd8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d022      	beq.n	8002bc2 <HAL_DMA_Abort_IT+0x9e>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1f      	ldr	r2, [pc, #124]	; (8002c00 <HAL_DMA_Abort_IT+0xdc>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d01a      	beq.n	8002bbc <HAL_DMA_Abort_IT+0x98>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1e      	ldr	r2, [pc, #120]	; (8002c04 <HAL_DMA_Abort_IT+0xe0>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d012      	beq.n	8002bb6 <HAL_DMA_Abort_IT+0x92>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1c      	ldr	r2, [pc, #112]	; (8002c08 <HAL_DMA_Abort_IT+0xe4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00a      	beq.n	8002bb0 <HAL_DMA_Abort_IT+0x8c>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a1b      	ldr	r2, [pc, #108]	; (8002c0c <HAL_DMA_Abort_IT+0xe8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d102      	bne.n	8002baa <HAL_DMA_Abort_IT+0x86>
 8002ba4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ba8:	e00e      	b.n	8002bc8 <HAL_DMA_Abort_IT+0xa4>
 8002baa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bae:	e00b      	b.n	8002bc8 <HAL_DMA_Abort_IT+0xa4>
 8002bb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bb4:	e008      	b.n	8002bc8 <HAL_DMA_Abort_IT+0xa4>
 8002bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bba:	e005      	b.n	8002bc8 <HAL_DMA_Abort_IT+0xa4>
 8002bbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bc0:	e002      	b.n	8002bc8 <HAL_DMA_Abort_IT+0xa4>
 8002bc2:	2310      	movs	r3, #16
 8002bc4:	e000      	b.n	8002bc8 <HAL_DMA_Abort_IT+0xa4>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	4a11      	ldr	r2, [pc, #68]	; (8002c10 <HAL_DMA_Abort_IT+0xec>)
 8002bca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	4798      	blx	r3
    } 
  }
  return status;
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40020008 	.word	0x40020008
 8002bfc:	4002001c 	.word	0x4002001c
 8002c00:	40020030 	.word	0x40020030
 8002c04:	40020044 	.word	0x40020044
 8002c08:	40020058 	.word	0x40020058
 8002c0c:	4002006c 	.word	0x4002006c
 8002c10:	40020000 	.word	0x40020000

08002c14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	2204      	movs	r2, #4
 8002c32:	409a      	lsls	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d04f      	beq.n	8002cdc <HAL_DMA_IRQHandler+0xc8>
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d04a      	beq.n	8002cdc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d107      	bne.n	8002c64 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0204 	bic.w	r2, r2, #4
 8002c62:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a66      	ldr	r2, [pc, #408]	; (8002e04 <HAL_DMA_IRQHandler+0x1f0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d029      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0xae>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a65      	ldr	r2, [pc, #404]	; (8002e08 <HAL_DMA_IRQHandler+0x1f4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d022      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xaa>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a63      	ldr	r2, [pc, #396]	; (8002e0c <HAL_DMA_IRQHandler+0x1f8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01a      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0xa4>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a62      	ldr	r2, [pc, #392]	; (8002e10 <HAL_DMA_IRQHandler+0x1fc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d012      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x9e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a60      	ldr	r2, [pc, #384]	; (8002e14 <HAL_DMA_IRQHandler+0x200>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00a      	beq.n	8002cac <HAL_DMA_IRQHandler+0x98>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a5f      	ldr	r2, [pc, #380]	; (8002e18 <HAL_DMA_IRQHandler+0x204>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d102      	bne.n	8002ca6 <HAL_DMA_IRQHandler+0x92>
 8002ca0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ca4:	e00e      	b.n	8002cc4 <HAL_DMA_IRQHandler+0xb0>
 8002ca6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002caa:	e00b      	b.n	8002cc4 <HAL_DMA_IRQHandler+0xb0>
 8002cac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cb0:	e008      	b.n	8002cc4 <HAL_DMA_IRQHandler+0xb0>
 8002cb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cb6:	e005      	b.n	8002cc4 <HAL_DMA_IRQHandler+0xb0>
 8002cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cbc:	e002      	b.n	8002cc4 <HAL_DMA_IRQHandler+0xb0>
 8002cbe:	2340      	movs	r3, #64	; 0x40
 8002cc0:	e000      	b.n	8002cc4 <HAL_DMA_IRQHandler+0xb0>
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	4a55      	ldr	r2, [pc, #340]	; (8002e1c <HAL_DMA_IRQHandler+0x208>)
 8002cc6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 8094 	beq.w	8002dfa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002cda:	e08e      	b.n	8002dfa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d056      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x186>
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d051      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10b      	bne.n	8002d1c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 020a 	bic.w	r2, r2, #10
 8002d12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a38      	ldr	r2, [pc, #224]	; (8002e04 <HAL_DMA_IRQHandler+0x1f0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d029      	beq.n	8002d7a <HAL_DMA_IRQHandler+0x166>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a37      	ldr	r2, [pc, #220]	; (8002e08 <HAL_DMA_IRQHandler+0x1f4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d022      	beq.n	8002d76 <HAL_DMA_IRQHandler+0x162>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a35      	ldr	r2, [pc, #212]	; (8002e0c <HAL_DMA_IRQHandler+0x1f8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d01a      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x15c>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a34      	ldr	r2, [pc, #208]	; (8002e10 <HAL_DMA_IRQHandler+0x1fc>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d012      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x156>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a32      	ldr	r2, [pc, #200]	; (8002e14 <HAL_DMA_IRQHandler+0x200>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00a      	beq.n	8002d64 <HAL_DMA_IRQHandler+0x150>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a31      	ldr	r2, [pc, #196]	; (8002e18 <HAL_DMA_IRQHandler+0x204>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d102      	bne.n	8002d5e <HAL_DMA_IRQHandler+0x14a>
 8002d58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d5c:	e00e      	b.n	8002d7c <HAL_DMA_IRQHandler+0x168>
 8002d5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d62:	e00b      	b.n	8002d7c <HAL_DMA_IRQHandler+0x168>
 8002d64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d68:	e008      	b.n	8002d7c <HAL_DMA_IRQHandler+0x168>
 8002d6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d6e:	e005      	b.n	8002d7c <HAL_DMA_IRQHandler+0x168>
 8002d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d74:	e002      	b.n	8002d7c <HAL_DMA_IRQHandler+0x168>
 8002d76:	2320      	movs	r3, #32
 8002d78:	e000      	b.n	8002d7c <HAL_DMA_IRQHandler+0x168>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	4a27      	ldr	r2, [pc, #156]	; (8002e1c <HAL_DMA_IRQHandler+0x208>)
 8002d7e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d034      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d98:	e02f      	b.n	8002dfa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	2208      	movs	r2, #8
 8002da0:	409a      	lsls	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d028      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x1e8>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d023      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 020e 	bic.w	r2, r2, #14
 8002dc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dcc:	2101      	movs	r1, #1
 8002dce:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d004      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
    }
  }
  return;
 8002dfa:	bf00      	nop
 8002dfc:	bf00      	nop
}
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40020008 	.word	0x40020008
 8002e08:	4002001c 	.word	0x4002001c
 8002e0c:	40020030 	.word	0x40020030
 8002e10:	40020044 	.word	0x40020044
 8002e14:	40020058 	.word	0x40020058
 8002e18:	4002006c 	.word	0x4002006c
 8002e1c:	40020000 	.word	0x40020000

08002e20 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e2e:	b2db      	uxtb	r3, r3
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e50:	2101      	movs	r1, #1
 8002e52:	fa01 f202 	lsl.w	r2, r1, r2
 8002e56:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d108      	bne.n	8002e7a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e78:	e007      	b.n	8002e8a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	60da      	str	r2, [r3, #12]
}
 8002e8a:	bf00      	nop
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b08b      	sub	sp, #44	; 0x2c
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ea6:	e169      	b.n	800317c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	f040 8158 	bne.w	8003176 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4a9a      	ldr	r2, [pc, #616]	; (8003134 <HAL_GPIO_Init+0x2a0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d05e      	beq.n	8002f8e <HAL_GPIO_Init+0xfa>
 8002ed0:	4a98      	ldr	r2, [pc, #608]	; (8003134 <HAL_GPIO_Init+0x2a0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d875      	bhi.n	8002fc2 <HAL_GPIO_Init+0x12e>
 8002ed6:	4a98      	ldr	r2, [pc, #608]	; (8003138 <HAL_GPIO_Init+0x2a4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d058      	beq.n	8002f8e <HAL_GPIO_Init+0xfa>
 8002edc:	4a96      	ldr	r2, [pc, #600]	; (8003138 <HAL_GPIO_Init+0x2a4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d86f      	bhi.n	8002fc2 <HAL_GPIO_Init+0x12e>
 8002ee2:	4a96      	ldr	r2, [pc, #600]	; (800313c <HAL_GPIO_Init+0x2a8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d052      	beq.n	8002f8e <HAL_GPIO_Init+0xfa>
 8002ee8:	4a94      	ldr	r2, [pc, #592]	; (800313c <HAL_GPIO_Init+0x2a8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d869      	bhi.n	8002fc2 <HAL_GPIO_Init+0x12e>
 8002eee:	4a94      	ldr	r2, [pc, #592]	; (8003140 <HAL_GPIO_Init+0x2ac>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d04c      	beq.n	8002f8e <HAL_GPIO_Init+0xfa>
 8002ef4:	4a92      	ldr	r2, [pc, #584]	; (8003140 <HAL_GPIO_Init+0x2ac>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d863      	bhi.n	8002fc2 <HAL_GPIO_Init+0x12e>
 8002efa:	4a92      	ldr	r2, [pc, #584]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d046      	beq.n	8002f8e <HAL_GPIO_Init+0xfa>
 8002f00:	4a90      	ldr	r2, [pc, #576]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d85d      	bhi.n	8002fc2 <HAL_GPIO_Init+0x12e>
 8002f06:	2b12      	cmp	r3, #18
 8002f08:	d82a      	bhi.n	8002f60 <HAL_GPIO_Init+0xcc>
 8002f0a:	2b12      	cmp	r3, #18
 8002f0c:	d859      	bhi.n	8002fc2 <HAL_GPIO_Init+0x12e>
 8002f0e:	a201      	add	r2, pc, #4	; (adr r2, 8002f14 <HAL_GPIO_Init+0x80>)
 8002f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f14:	08002f8f 	.word	0x08002f8f
 8002f18:	08002f69 	.word	0x08002f69
 8002f1c:	08002f7b 	.word	0x08002f7b
 8002f20:	08002fbd 	.word	0x08002fbd
 8002f24:	08002fc3 	.word	0x08002fc3
 8002f28:	08002fc3 	.word	0x08002fc3
 8002f2c:	08002fc3 	.word	0x08002fc3
 8002f30:	08002fc3 	.word	0x08002fc3
 8002f34:	08002fc3 	.word	0x08002fc3
 8002f38:	08002fc3 	.word	0x08002fc3
 8002f3c:	08002fc3 	.word	0x08002fc3
 8002f40:	08002fc3 	.word	0x08002fc3
 8002f44:	08002fc3 	.word	0x08002fc3
 8002f48:	08002fc3 	.word	0x08002fc3
 8002f4c:	08002fc3 	.word	0x08002fc3
 8002f50:	08002fc3 	.word	0x08002fc3
 8002f54:	08002fc3 	.word	0x08002fc3
 8002f58:	08002f71 	.word	0x08002f71
 8002f5c:	08002f85 	.word	0x08002f85
 8002f60:	4a79      	ldr	r2, [pc, #484]	; (8003148 <HAL_GPIO_Init+0x2b4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d013      	beq.n	8002f8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f66:	e02c      	b.n	8002fc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	623b      	str	r3, [r7, #32]
          break;
 8002f6e:	e029      	b.n	8002fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	3304      	adds	r3, #4
 8002f76:	623b      	str	r3, [r7, #32]
          break;
 8002f78:	e024      	b.n	8002fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	3308      	adds	r3, #8
 8002f80:	623b      	str	r3, [r7, #32]
          break;
 8002f82:	e01f      	b.n	8002fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	330c      	adds	r3, #12
 8002f8a:	623b      	str	r3, [r7, #32]
          break;
 8002f8c:	e01a      	b.n	8002fc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d102      	bne.n	8002f9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f96:	2304      	movs	r3, #4
 8002f98:	623b      	str	r3, [r7, #32]
          break;
 8002f9a:	e013      	b.n	8002fc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d105      	bne.n	8002fb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fa4:	2308      	movs	r3, #8
 8002fa6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	611a      	str	r2, [r3, #16]
          break;
 8002fae:	e009      	b.n	8002fc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69fa      	ldr	r2, [r7, #28]
 8002fb8:	615a      	str	r2, [r3, #20]
          break;
 8002fba:	e003      	b.n	8002fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	623b      	str	r3, [r7, #32]
          break;
 8002fc0:	e000      	b.n	8002fc4 <HAL_GPIO_Init+0x130>
          break;
 8002fc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	2bff      	cmp	r3, #255	; 0xff
 8002fc8:	d801      	bhi.n	8002fce <HAL_GPIO_Init+0x13a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	e001      	b.n	8002fd2 <HAL_GPIO_Init+0x13e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	2bff      	cmp	r3, #255	; 0xff
 8002fd8:	d802      	bhi.n	8002fe0 <HAL_GPIO_Init+0x14c>
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	e002      	b.n	8002fe6 <HAL_GPIO_Init+0x152>
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	3b08      	subs	r3, #8
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	210f      	movs	r1, #15
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	6a39      	ldr	r1, [r7, #32]
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8003000:	431a      	orrs	r2, r3
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 80b1 	beq.w	8003176 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003014:	4b4d      	ldr	r3, [pc, #308]	; (800314c <HAL_GPIO_Init+0x2b8>)
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	4a4c      	ldr	r2, [pc, #304]	; (800314c <HAL_GPIO_Init+0x2b8>)
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	6193      	str	r3, [r2, #24]
 8003020:	4b4a      	ldr	r3, [pc, #296]	; (800314c <HAL_GPIO_Init+0x2b8>)
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800302c:	4a48      	ldr	r2, [pc, #288]	; (8003150 <HAL_GPIO_Init+0x2bc>)
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	089b      	lsrs	r3, r3, #2
 8003032:	3302      	adds	r3, #2
 8003034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003038:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	220f      	movs	r2, #15
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4013      	ands	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a40      	ldr	r2, [pc, #256]	; (8003154 <HAL_GPIO_Init+0x2c0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d013      	beq.n	8003080 <HAL_GPIO_Init+0x1ec>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a3f      	ldr	r2, [pc, #252]	; (8003158 <HAL_GPIO_Init+0x2c4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00d      	beq.n	800307c <HAL_GPIO_Init+0x1e8>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a3e      	ldr	r2, [pc, #248]	; (800315c <HAL_GPIO_Init+0x2c8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d007      	beq.n	8003078 <HAL_GPIO_Init+0x1e4>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a3d      	ldr	r2, [pc, #244]	; (8003160 <HAL_GPIO_Init+0x2cc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d101      	bne.n	8003074 <HAL_GPIO_Init+0x1e0>
 8003070:	2303      	movs	r3, #3
 8003072:	e006      	b.n	8003082 <HAL_GPIO_Init+0x1ee>
 8003074:	2304      	movs	r3, #4
 8003076:	e004      	b.n	8003082 <HAL_GPIO_Init+0x1ee>
 8003078:	2302      	movs	r3, #2
 800307a:	e002      	b.n	8003082 <HAL_GPIO_Init+0x1ee>
 800307c:	2301      	movs	r3, #1
 800307e:	e000      	b.n	8003082 <HAL_GPIO_Init+0x1ee>
 8003080:	2300      	movs	r3, #0
 8003082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003084:	f002 0203 	and.w	r2, r2, #3
 8003088:	0092      	lsls	r2, r2, #2
 800308a:	4093      	lsls	r3, r2
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003092:	492f      	ldr	r1, [pc, #188]	; (8003150 <HAL_GPIO_Init+0x2bc>)
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	3302      	adds	r3, #2
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d006      	beq.n	80030ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030ac:	4b2d      	ldr	r3, [pc, #180]	; (8003164 <HAL_GPIO_Init+0x2d0>)
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	492c      	ldr	r1, [pc, #176]	; (8003164 <HAL_GPIO_Init+0x2d0>)
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]
 80030b8:	e006      	b.n	80030c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030ba:	4b2a      	ldr	r3, [pc, #168]	; (8003164 <HAL_GPIO_Init+0x2d0>)
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	4928      	ldr	r1, [pc, #160]	; (8003164 <HAL_GPIO_Init+0x2d0>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d006      	beq.n	80030e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030d4:	4b23      	ldr	r3, [pc, #140]	; (8003164 <HAL_GPIO_Init+0x2d0>)
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	4922      	ldr	r1, [pc, #136]	; (8003164 <HAL_GPIO_Init+0x2d0>)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60cb      	str	r3, [r1, #12]
 80030e0:	e006      	b.n	80030f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030e2:	4b20      	ldr	r3, [pc, #128]	; (8003164 <HAL_GPIO_Init+0x2d0>)
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	491e      	ldr	r1, [pc, #120]	; (8003164 <HAL_GPIO_Init+0x2d0>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d006      	beq.n	800310a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030fc:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_GPIO_Init+0x2d0>)
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	4918      	ldr	r1, [pc, #96]	; (8003164 <HAL_GPIO_Init+0x2d0>)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
 8003108:	e006      	b.n	8003118 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800310a:	4b16      	ldr	r3, [pc, #88]	; (8003164 <HAL_GPIO_Init+0x2d0>)
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	43db      	mvns	r3, r3
 8003112:	4914      	ldr	r1, [pc, #80]	; (8003164 <HAL_GPIO_Init+0x2d0>)
 8003114:	4013      	ands	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d021      	beq.n	8003168 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003124:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <HAL_GPIO_Init+0x2d0>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	490e      	ldr	r1, [pc, #56]	; (8003164 <HAL_GPIO_Init+0x2d0>)
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	600b      	str	r3, [r1, #0]
 8003130:	e021      	b.n	8003176 <HAL_GPIO_Init+0x2e2>
 8003132:	bf00      	nop
 8003134:	10320000 	.word	0x10320000
 8003138:	10310000 	.word	0x10310000
 800313c:	10220000 	.word	0x10220000
 8003140:	10210000 	.word	0x10210000
 8003144:	10120000 	.word	0x10120000
 8003148:	10110000 	.word	0x10110000
 800314c:	40021000 	.word	0x40021000
 8003150:	40010000 	.word	0x40010000
 8003154:	40010800 	.word	0x40010800
 8003158:	40010c00 	.word	0x40010c00
 800315c:	40011000 	.word	0x40011000
 8003160:	40011400 	.word	0x40011400
 8003164:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_GPIO_Init+0x304>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	43db      	mvns	r3, r3
 8003170:	4909      	ldr	r1, [pc, #36]	; (8003198 <HAL_GPIO_Init+0x304>)
 8003172:	4013      	ands	r3, r2
 8003174:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	3301      	adds	r3, #1
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	fa22 f303 	lsr.w	r3, r2, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	f47f ae8e 	bne.w	8002ea8 <HAL_GPIO_Init+0x14>
  }
}
 800318c:	bf00      	nop
 800318e:	bf00      	nop
 8003190:	372c      	adds	r7, #44	; 0x2c
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	40010400 	.word	0x40010400

0800319c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	887b      	ldrh	r3, [r7, #2]
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031b4:	2301      	movs	r3, #1
 80031b6:	73fb      	strb	r3, [r7, #15]
 80031b8:	e001      	b.n	80031be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031ba:	2300      	movs	r3, #0
 80031bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031be:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr

080031ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	460b      	mov	r3, r1
 80031d4:	807b      	strh	r3, [r7, #2]
 80031d6:	4613      	mov	r3, r2
 80031d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031da:	787b      	ldrb	r3, [r7, #1]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031e0:	887a      	ldrh	r2, [r7, #2]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031e6:	e003      	b.n	80031f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031e8:	887b      	ldrh	r3, [r7, #2]
 80031ea:	041a      	lsls	r2, r3, #16
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	611a      	str	r2, [r3, #16]
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr
	...

080031fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003206:	4b08      	ldr	r3, [pc, #32]	; (8003228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	88fb      	ldrh	r3, [r7, #6]
 800320c:	4013      	ands	r3, r2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d006      	beq.n	8003220 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003212:	4a05      	ldr	r2, [pc, #20]	; (8003228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003214:	88fb      	ldrh	r3, [r7, #6]
 8003216:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003218:	88fb      	ldrh	r3, [r7, #6]
 800321a:	4618      	mov	r0, r3
 800321c:	f000 f806 	bl	800322c <HAL_GPIO_EXTI_Callback>
  }
}
 8003220:	bf00      	nop
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40010400 	.word	0x40010400

0800322c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e12b      	b.n	80034aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fe fcf2 	bl	8001c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2224      	movs	r2, #36	; 0x24
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0201 	bic.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003292:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032a4:	f002 f9d4 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 80032a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4a81      	ldr	r2, [pc, #516]	; (80034b4 <HAL_I2C_Init+0x274>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d807      	bhi.n	80032c4 <HAL_I2C_Init+0x84>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a80      	ldr	r2, [pc, #512]	; (80034b8 <HAL_I2C_Init+0x278>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	bf94      	ite	ls
 80032bc:	2301      	movls	r3, #1
 80032be:	2300      	movhi	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	e006      	b.n	80032d2 <HAL_I2C_Init+0x92>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4a7d      	ldr	r2, [pc, #500]	; (80034bc <HAL_I2C_Init+0x27c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	bf94      	ite	ls
 80032cc:	2301      	movls	r3, #1
 80032ce:	2300      	movhi	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e0e7      	b.n	80034aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4a78      	ldr	r2, [pc, #480]	; (80034c0 <HAL_I2C_Init+0x280>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	0c9b      	lsrs	r3, r3, #18
 80032e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4a6a      	ldr	r2, [pc, #424]	; (80034b4 <HAL_I2C_Init+0x274>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d802      	bhi.n	8003314 <HAL_I2C_Init+0xd4>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	3301      	adds	r3, #1
 8003312:	e009      	b.n	8003328 <HAL_I2C_Init+0xe8>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	4a69      	ldr	r2, [pc, #420]	; (80034c4 <HAL_I2C_Init+0x284>)
 8003320:	fba2 2303 	umull	r2, r3, r2, r3
 8003324:	099b      	lsrs	r3, r3, #6
 8003326:	3301      	adds	r3, #1
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	430b      	orrs	r3, r1
 800332e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800333a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	495c      	ldr	r1, [pc, #368]	; (80034b4 <HAL_I2C_Init+0x274>)
 8003344:	428b      	cmp	r3, r1
 8003346:	d819      	bhi.n	800337c <HAL_I2C_Init+0x13c>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1e59      	subs	r1, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	fbb1 f3f3 	udiv	r3, r1, r3
 8003356:	1c59      	adds	r1, r3, #1
 8003358:	f640 73fc 	movw	r3, #4092	; 0xffc
 800335c:	400b      	ands	r3, r1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_I2C_Init+0x138>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1e59      	subs	r1, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003370:	3301      	adds	r3, #1
 8003372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003376:	e051      	b.n	800341c <HAL_I2C_Init+0x1dc>
 8003378:	2304      	movs	r3, #4
 800337a:	e04f      	b.n	800341c <HAL_I2C_Init+0x1dc>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d111      	bne.n	80033a8 <HAL_I2C_Init+0x168>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	1e58      	subs	r0, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6859      	ldr	r1, [r3, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	440b      	add	r3, r1
 8003392:	fbb0 f3f3 	udiv	r3, r0, r3
 8003396:	3301      	adds	r3, #1
 8003398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339c:	2b00      	cmp	r3, #0
 800339e:	bf0c      	ite	eq
 80033a0:	2301      	moveq	r3, #1
 80033a2:	2300      	movne	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	e012      	b.n	80033ce <HAL_I2C_Init+0x18e>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1e58      	subs	r0, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6859      	ldr	r1, [r3, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	0099      	lsls	r1, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80033be:	3301      	adds	r3, #1
 80033c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_I2C_Init+0x196>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e022      	b.n	800341c <HAL_I2C_Init+0x1dc>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10e      	bne.n	80033fc <HAL_I2C_Init+0x1bc>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1e58      	subs	r0, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6859      	ldr	r1, [r3, #4]
 80033e6:	460b      	mov	r3, r1
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	440b      	add	r3, r1
 80033ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f0:	3301      	adds	r3, #1
 80033f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033fa:	e00f      	b.n	800341c <HAL_I2C_Init+0x1dc>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	1e58      	subs	r0, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	0099      	lsls	r1, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003412:	3301      	adds	r3, #1
 8003414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	6809      	ldr	r1, [r1, #0]
 8003420:	4313      	orrs	r3, r2
 8003422:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69da      	ldr	r2, [r3, #28]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800344a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6911      	ldr	r1, [r2, #16]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68d2      	ldr	r2, [r2, #12]
 8003456:	4311      	orrs	r1, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	430b      	orrs	r3, r1
 800345e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	000186a0 	.word	0x000186a0
 80034b8:	001e847f 	.word	0x001e847f
 80034bc:	003d08ff 	.word	0x003d08ff
 80034c0:	431bde83 	.word	0x431bde83
 80034c4:	10624dd3 	.word	0x10624dd3

080034c8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034da:	2b80      	cmp	r3, #128	; 0x80
 80034dc:	d103      	bne.n	80034e6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2200      	movs	r2, #0
 80034e4:	611a      	str	r2, [r3, #16]
  }
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003510:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003518:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	2b10      	cmp	r3, #16
 800351e:	d003      	beq.n	8003528 <HAL_I2C_EV_IRQHandler+0x38>
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	2b40      	cmp	r3, #64	; 0x40
 8003524:	f040 80c1 	bne.w	80036aa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10d      	bne.n	800355e <HAL_I2C_EV_IRQHandler+0x6e>
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003548:	d003      	beq.n	8003552 <HAL_I2C_EV_IRQHandler+0x62>
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003550:	d101      	bne.n	8003556 <HAL_I2C_EV_IRQHandler+0x66>
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <HAL_I2C_EV_IRQHandler+0x68>
 8003556:	2300      	movs	r3, #0
 8003558:	2b01      	cmp	r3, #1
 800355a:	f000 8132 	beq.w	80037c2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00c      	beq.n	8003582 <HAL_I2C_EV_IRQHandler+0x92>
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	0a5b      	lsrs	r3, r3, #9
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d006      	beq.n	8003582 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f001 fc87 	bl	8004e88 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fd85 	bl	800408a <I2C_Master_SB>
 8003580:	e092      	b.n	80036a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	08db      	lsrs	r3, r3, #3
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <HAL_I2C_EV_IRQHandler+0xb2>
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	0a5b      	lsrs	r3, r3, #9
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fdfa 	bl	8004194 <I2C_Master_ADD10>
 80035a0:	e082      	b.n	80036a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	085b      	lsrs	r3, r3, #1
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d009      	beq.n	80035c2 <HAL_I2C_EV_IRQHandler+0xd2>
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	0a5b      	lsrs	r3, r3, #9
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 fe13 	bl	80041e6 <I2C_Master_ADDR>
 80035c0:	e072      	b.n	80036a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	089b      	lsrs	r3, r3, #2
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d03b      	beq.n	8003646 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035dc:	f000 80f3 	beq.w	80037c6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	09db      	lsrs	r3, r3, #7
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00f      	beq.n	800360c <HAL_I2C_EV_IRQHandler+0x11c>
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	0a9b      	lsrs	r3, r3, #10
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d009      	beq.n	800360c <HAL_I2C_EV_IRQHandler+0x11c>
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	089b      	lsrs	r3, r3, #2
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d103      	bne.n	800360c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f9f1 	bl	80039ec <I2C_MasterTransmit_TXE>
 800360a:	e04d      	b.n	80036a8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	089b      	lsrs	r3, r3, #2
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 80d6 	beq.w	80037c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	0a5b      	lsrs	r3, r3, #9
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 80cf 	beq.w	80037c6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003628:	7bbb      	ldrb	r3, [r7, #14]
 800362a:	2b21      	cmp	r3, #33	; 0x21
 800362c:	d103      	bne.n	8003636 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fa78 	bl	8003b24 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003634:	e0c7      	b.n	80037c6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	2b40      	cmp	r3, #64	; 0x40
 800363a:	f040 80c4 	bne.w	80037c6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fae6 	bl	8003c10 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003644:	e0bf      	b.n	80037c6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003654:	f000 80b7 	beq.w	80037c6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	099b      	lsrs	r3, r3, #6
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00f      	beq.n	8003684 <HAL_I2C_EV_IRQHandler+0x194>
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	0a9b      	lsrs	r3, r3, #10
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d009      	beq.n	8003684 <HAL_I2C_EV_IRQHandler+0x194>
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	089b      	lsrs	r3, r3, #2
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d103      	bne.n	8003684 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 fb5f 	bl	8003d40 <I2C_MasterReceive_RXNE>
 8003682:	e011      	b.n	80036a8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	089b      	lsrs	r3, r3, #2
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 809a 	beq.w	80037c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	0a5b      	lsrs	r3, r3, #9
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 8093 	beq.w	80037c6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 fc08 	bl	8003eb6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036a6:	e08e      	b.n	80037c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80036a8:	e08d      	b.n	80037c6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d004      	beq.n	80036bc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	61fb      	str	r3, [r7, #28]
 80036ba:	e007      	b.n	80036cc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d012      	beq.n	80036fe <HAL_I2C_EV_IRQHandler+0x20e>
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	0a5b      	lsrs	r3, r3, #9
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00c      	beq.n	80036fe <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80036f4:	69b9      	ldr	r1, [r7, #24]
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 ffcc 	bl	8004694 <I2C_Slave_ADDR>
 80036fc:	e066      	b.n	80037cc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	091b      	lsrs	r3, r3, #4
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <HAL_I2C_EV_IRQHandler+0x22e>
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	0a5b      	lsrs	r3, r3, #9
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f001 f806 	bl	8004728 <I2C_Slave_STOPF>
 800371c:	e056      	b.n	80037cc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800371e:	7bbb      	ldrb	r3, [r7, #14]
 8003720:	2b21      	cmp	r3, #33	; 0x21
 8003722:	d002      	beq.n	800372a <HAL_I2C_EV_IRQHandler+0x23a>
 8003724:	7bbb      	ldrb	r3, [r7, #14]
 8003726:	2b29      	cmp	r3, #41	; 0x29
 8003728:	d125      	bne.n	8003776 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	09db      	lsrs	r3, r3, #7
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00f      	beq.n	8003756 <HAL_I2C_EV_IRQHandler+0x266>
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	0a9b      	lsrs	r3, r3, #10
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <HAL_I2C_EV_IRQHandler+0x266>
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	089b      	lsrs	r3, r3, #2
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d103      	bne.n	8003756 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fee4 	bl	800451c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003754:	e039      	b.n	80037ca <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	089b      	lsrs	r3, r3, #2
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d033      	beq.n	80037ca <HAL_I2C_EV_IRQHandler+0x2da>
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	0a5b      	lsrs	r3, r3, #9
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d02d      	beq.n	80037ca <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 ff11 	bl	8004596 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003774:	e029      	b.n	80037ca <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	099b      	lsrs	r3, r3, #6
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00f      	beq.n	80037a2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	0a9b      	lsrs	r3, r3, #10
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d009      	beq.n	80037a2 <HAL_I2C_EV_IRQHandler+0x2b2>
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	089b      	lsrs	r3, r3, #2
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d103      	bne.n	80037a2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 ff1b 	bl	80045d6 <I2C_SlaveReceive_RXNE>
 80037a0:	e014      	b.n	80037cc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	089b      	lsrs	r3, r3, #2
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00e      	beq.n	80037cc <HAL_I2C_EV_IRQHandler+0x2dc>
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	0a5b      	lsrs	r3, r3, #9
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d008      	beq.n	80037cc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 ff49 	bl	8004652 <I2C_SlaveReceive_BTF>
 80037c0:	e004      	b.n	80037cc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80037c2:	bf00      	nop
 80037c4:	e002      	b.n	80037cc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037c6:	bf00      	nop
 80037c8:	e000      	b.n	80037cc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037ca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80037cc:	3720      	adds	r7, #32
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b08a      	sub	sp, #40	; 0x28
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80037ea:	2300      	movs	r3, #0
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037f4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	0a1b      	lsrs	r3, r3, #8
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d016      	beq.n	8003830 <HAL_I2C_ER_IRQHandler+0x5e>
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	0a1b      	lsrs	r3, r3, #8
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d010      	beq.n	8003830 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800381e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800382e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	0a5b      	lsrs	r3, r3, #9
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00e      	beq.n	800385a <HAL_I2C_ER_IRQHandler+0x88>
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	0a1b      	lsrs	r3, r3, #8
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	f043 0302 	orr.w	r3, r3, #2
 800384e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003858:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	0a9b      	lsrs	r3, r3, #10
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d03f      	beq.n	80038e6 <HAL_I2C_ER_IRQHandler+0x114>
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	0a1b      	lsrs	r3, r3, #8
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d039      	beq.n	80038e6 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8003872:	7efb      	ldrb	r3, [r7, #27]
 8003874:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387a:	b29b      	uxth	r3, r3
 800387c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003884:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800388c:	7ebb      	ldrb	r3, [r7, #26]
 800388e:	2b20      	cmp	r3, #32
 8003890:	d112      	bne.n	80038b8 <HAL_I2C_ER_IRQHandler+0xe6>
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10f      	bne.n	80038b8 <HAL_I2C_ER_IRQHandler+0xe6>
 8003898:	7cfb      	ldrb	r3, [r7, #19]
 800389a:	2b21      	cmp	r3, #33	; 0x21
 800389c:	d008      	beq.n	80038b0 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800389e:	7cfb      	ldrb	r3, [r7, #19]
 80038a0:	2b29      	cmp	r3, #41	; 0x29
 80038a2:	d005      	beq.n	80038b0 <HAL_I2C_ER_IRQHandler+0xde>
 80038a4:	7cfb      	ldrb	r3, [r7, #19]
 80038a6:	2b28      	cmp	r3, #40	; 0x28
 80038a8:	d106      	bne.n	80038b8 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b21      	cmp	r3, #33	; 0x21
 80038ae:	d103      	bne.n	80038b8 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f001 f869 	bl	8004988 <I2C_Slave_AF>
 80038b6:	e016      	b.n	80038e6 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038c0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	f043 0304 	orr.w	r3, r3, #4
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80038ca:	7efb      	ldrb	r3, [r7, #27]
 80038cc:	2b10      	cmp	r3, #16
 80038ce:	d002      	beq.n	80038d6 <HAL_I2C_ER_IRQHandler+0x104>
 80038d0:	7efb      	ldrb	r3, [r7, #27]
 80038d2:	2b40      	cmp	r3, #64	; 0x40
 80038d4:	d107      	bne.n	80038e6 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	0adb      	lsrs	r3, r3, #11
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00e      	beq.n	8003910 <HAL_I2C_ER_IRQHandler+0x13e>
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	0a1b      	lsrs	r3, r3, #8
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d008      	beq.n	8003910 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	f043 0308 	orr.w	r3, r3, #8
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800390e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	2b00      	cmp	r3, #0
 8003914:	d008      	beq.n	8003928 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f001 f8a4 	bl	8004a70 <I2C_ITError>
  }
}
 8003928:	bf00      	nop
 800392a:	3728      	adds	r7, #40	; 0x28
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr

08003942 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr

08003954 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr

08003966 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr

08003978 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	70fb      	strb	r3, [r7, #3]
 8003984:	4613      	mov	r3, r2
 8003986:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr

08003992 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr

080039a4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr

080039b6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr

080039c8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr

080039da <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr

080039ec <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a02:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d150      	bne.n	8003ab4 <I2C_MasterTransmit_TXE+0xc8>
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
 8003a14:	2b21      	cmp	r3, #33	; 0x21
 8003a16:	d14d      	bne.n	8003ab4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d01d      	beq.n	8003a5a <I2C_MasterTransmit_TXE+0x6e>
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d01a      	beq.n	8003a5a <I2C_MasterTransmit_TXE+0x6e>
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a2a:	d016      	beq.n	8003a5a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a3a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2211      	movs	r2, #17
 8003a40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff ff6c 	bl	8003930 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a58:	e060      	b.n	8003b1c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a68:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a78:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b40      	cmp	r3, #64	; 0x40
 8003a92:	d107      	bne.n	8003aa4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff ff81 	bl	80039a4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003aa2:	e03b      	b.n	8003b1c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff ff3f 	bl	8003930 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ab2:	e033      	b.n	8003b1c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	2b21      	cmp	r3, #33	; 0x21
 8003ab8:	d005      	beq.n	8003ac6 <I2C_MasterTransmit_TXE+0xda>
 8003aba:	7bbb      	ldrb	r3, [r7, #14]
 8003abc:	2b40      	cmp	r3, #64	; 0x40
 8003abe:	d12d      	bne.n	8003b1c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	2b22      	cmp	r3, #34	; 0x22
 8003ac4:	d12a      	bne.n	8003b1c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d108      	bne.n	8003ae2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ade:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003ae0:	e01c      	b.n	8003b1c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b40      	cmp	r3, #64	; 0x40
 8003aec:	d103      	bne.n	8003af6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f88e 	bl	8003c10 <I2C_MemoryTransmit_TXE_BTF>
}
 8003af4:	e012      	b.n	8003b1c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	781a      	ldrb	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b1a:	e7ff      	b.n	8003b1c <I2C_MasterTransmit_TXE+0x130>
 8003b1c:	bf00      	nop
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b21      	cmp	r3, #33	; 0x21
 8003b3c:	d164      	bne.n	8003c08 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d012      	beq.n	8003b6e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	781a      	ldrb	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003b6c:	e04c      	b.n	8003c08 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d01d      	beq.n	8003bb0 <I2C_MasterTransmit_BTF+0x8c>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b20      	cmp	r3, #32
 8003b78:	d01a      	beq.n	8003bb0 <I2C_MasterTransmit_BTF+0x8c>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b80:	d016      	beq.n	8003bb0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b90:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2211      	movs	r2, #17
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff fec1 	bl	8003930 <HAL_I2C_MasterTxCpltCallback>
}
 8003bae:	e02b      	b.n	8003c08 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bbe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bce:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b40      	cmp	r3, #64	; 0x40
 8003be8:	d107      	bne.n	8003bfa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff fed6 	bl	80039a4 <HAL_I2C_MemTxCpltCallback>
}
 8003bf8:	e006      	b.n	8003c08 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff fe94 	bl	8003930 <HAL_I2C_MasterTxCpltCallback>
}
 8003c08:	bf00      	nop
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d11d      	bne.n	8003c64 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d10b      	bne.n	8003c48 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c40:	1c9a      	adds	r2, r3, #2
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003c46:	e077      	b.n	8003d38 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	121b      	asrs	r3, r3, #8
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c62:	e069      	b.n	8003d38 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d10b      	bne.n	8003c84 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c82:	e059      	b.n	8003d38 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d152      	bne.n	8003d32 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
 8003c8e:	2b22      	cmp	r3, #34	; 0x22
 8003c90:	d10d      	bne.n	8003cae <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ca0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003cac:	e044      	b.n	8003d38 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d015      	beq.n	8003ce4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
 8003cba:	2b21      	cmp	r3, #33	; 0x21
 8003cbc:	d112      	bne.n	8003ce4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	781a      	ldrb	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ce2:	e029      	b.n	8003d38 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d124      	bne.n	8003d38 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	2b21      	cmp	r3, #33	; 0x21
 8003cf2:	d121      	bne.n	8003d38 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d02:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d12:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff fe3a 	bl	80039a4 <HAL_I2C_MemTxCpltCallback>
}
 8003d30:	e002      	b.n	8003d38 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff fbc8 	bl	80034c8 <I2C_Flush_DR>
}
 8003d38:	bf00      	nop
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b22      	cmp	r3, #34	; 0x22
 8003d52:	f040 80ac 	bne.w	8003eae <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d921      	bls.n	8003da8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	f040 808c 	bne.w	8003eae <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003da6:	e082      	b.n	8003eae <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d075      	beq.n	8003e9c <I2C_MasterReceive_RXNE+0x15c>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d002      	beq.n	8003dbc <I2C_MasterReceive_RXNE+0x7c>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d16f      	bne.n	8003e9c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f001 f831 	bl	8004e24 <I2C_WaitOnSTOPRequestThroughIT>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d142      	bne.n	8003e4e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dd6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003de6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b40      	cmp	r3, #64	; 0x40
 8003e20:	d10a      	bne.n	8003e38 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff fdc0 	bl	80039b6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e36:	e03a      	b.n	8003eae <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2212      	movs	r2, #18
 8003e44:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff fd7b 	bl	8003942 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e4c:	e02f      	b.n	8003eae <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e5c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff fd97 	bl	80039c8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e9a:	e008      	b.n	8003eae <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eaa:	605a      	str	r2, [r3, #4]
}
 8003eac:	e7ff      	b.n	8003eae <I2C_MasterReceive_RXNE+0x16e>
 8003eae:	bf00      	nop
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b084      	sub	sp, #16
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d11b      	bne.n	8003f06 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003edc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003f04:	e0bd      	b.n	8004082 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d129      	bne.n	8003f64 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f1e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d00a      	beq.n	8003f3c <I2C_MasterReceive_BTF+0x86>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d007      	beq.n	8003f3c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f3a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f62:	e08e      	b.n	8004082 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d176      	bne.n	800405c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d002      	beq.n	8003f7a <I2C_MasterReceive_BTF+0xc4>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2b10      	cmp	r3, #16
 8003f78:	d108      	bne.n	8003f8c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	e019      	b.n	8003fc0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d002      	beq.n	8003f98 <I2C_MasterReceive_BTF+0xe2>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d108      	bne.n	8003faa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	e00a      	b.n	8003fc0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b10      	cmp	r3, #16
 8003fae:	d007      	beq.n	8003fc0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fbe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691a      	ldr	r2, [r3, #16]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800401a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b40      	cmp	r3, #64	; 0x40
 800402e:	d10a      	bne.n	8004046 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff fcb9 	bl	80039b6 <HAL_I2C_MemRxCpltCallback>
}
 8004044:	e01d      	b.n	8004082 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2212      	movs	r2, #18
 8004052:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff fc74 	bl	8003942 <HAL_I2C_MasterRxCpltCallback>
}
 800405a:	e012      	b.n	8004082 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004082:	bf00      	nop
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b40      	cmp	r3, #64	; 0x40
 800409c:	d117      	bne.n	80040ce <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	461a      	mov	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040b6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80040b8:	e067      	b.n	800418a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	f043 0301 	orr.w	r3, r3, #1
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	611a      	str	r2, [r3, #16]
}
 80040cc:	e05d      	b.n	800418a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040d6:	d133      	bne.n	8004140 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b21      	cmp	r3, #33	; 0x21
 80040e2:	d109      	bne.n	80040f8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040f4:	611a      	str	r2, [r3, #16]
 80040f6:	e008      	b.n	800410a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	b2da      	uxtb	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410e:	2b00      	cmp	r3, #0
 8004110:	d004      	beq.n	800411c <I2C_Master_SB+0x92>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004118:	2b00      	cmp	r3, #0
 800411a:	d108      	bne.n	800412e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	2b00      	cmp	r3, #0
 8004122:	d032      	beq.n	800418a <I2C_Master_SB+0x100>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412a:	2b00      	cmp	r3, #0
 800412c:	d02d      	beq.n	800418a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800413c:	605a      	str	r2, [r3, #4]
}
 800413e:	e024      	b.n	800418a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10e      	bne.n	8004166 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414c:	b29b      	uxth	r3, r3
 800414e:	11db      	asrs	r3, r3, #7
 8004150:	b2db      	uxtb	r3, r3
 8004152:	f003 0306 	and.w	r3, r3, #6
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f063 030f 	orn	r3, r3, #15
 800415c:	b2da      	uxtb	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	611a      	str	r2, [r3, #16]
}
 8004164:	e011      	b.n	800418a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800416a:	2b01      	cmp	r3, #1
 800416c:	d10d      	bne.n	800418a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	b29b      	uxth	r3, r3
 8004174:	11db      	asrs	r3, r3, #7
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f003 0306 	and.w	r3, r3, #6
 800417c:	b2db      	uxtb	r3, r3
 800417e:	f063 030e 	orn	r3, r3, #14
 8004182:	b2da      	uxtb	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	611a      	str	r2, [r3, #16]
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d004      	beq.n	80041ba <I2C_Master_ADD10+0x26>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d108      	bne.n	80041cc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00c      	beq.n	80041dc <I2C_Master_ADD10+0x48>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d007      	beq.n	80041dc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041da:	605a      	str	r2, [r3, #4]
  }
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr

080041e6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b091      	sub	sp, #68	; 0x44
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b22      	cmp	r3, #34	; 0x22
 800420e:	f040 8174 	bne.w	80044fa <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10f      	bne.n	800423a <I2C_Master_ADDR+0x54>
 800421a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800421e:	2b40      	cmp	r3, #64	; 0x40
 8004220:	d10b      	bne.n	800423a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004222:	2300      	movs	r3, #0
 8004224:	633b      	str	r3, [r7, #48]	; 0x30
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	633b      	str	r3, [r7, #48]	; 0x30
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	633b      	str	r3, [r7, #48]	; 0x30
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	e16b      	b.n	8004512 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423e:	2b00      	cmp	r3, #0
 8004240:	d11d      	bne.n	800427e <I2C_Master_ADDR+0x98>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800424a:	d118      	bne.n	800427e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800424c:	2300      	movs	r3, #0
 800424e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004260:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004270:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	651a      	str	r2, [r3, #80]	; 0x50
 800427c:	e149      	b.n	8004512 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d113      	bne.n	80042b0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004288:	2300      	movs	r3, #0
 800428a:	62bb      	str	r3, [r7, #40]	; 0x28
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	62bb      	str	r3, [r7, #40]	; 0x28
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	62bb      	str	r3, [r7, #40]	; 0x28
 800429c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	e120      	b.n	80044f2 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	f040 808a 	bne.w	80043d0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80042bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042c2:	d137      	bne.n	8004334 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042e2:	d113      	bne.n	800430c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f4:	2300      	movs	r3, #0
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	e0f2      	b.n	80044f2 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430c:	2300      	movs	r3, #0
 800430e:	623b      	str	r3, [r7, #32]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	623b      	str	r3, [r7, #32]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	623b      	str	r3, [r7, #32]
 8004320:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e0de      	b.n	80044f2 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004336:	2b08      	cmp	r3, #8
 8004338:	d02e      	beq.n	8004398 <I2C_Master_ADDR+0x1b2>
 800433a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433c:	2b20      	cmp	r3, #32
 800433e:	d02b      	beq.n	8004398 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004342:	2b12      	cmp	r3, #18
 8004344:	d102      	bne.n	800434c <I2C_Master_ADDR+0x166>
 8004346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004348:	2b01      	cmp	r3, #1
 800434a:	d125      	bne.n	8004398 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800434c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434e:	2b04      	cmp	r3, #4
 8004350:	d00e      	beq.n	8004370 <I2C_Master_ADDR+0x18a>
 8004352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004354:	2b02      	cmp	r3, #2
 8004356:	d00b      	beq.n	8004370 <I2C_Master_ADDR+0x18a>
 8004358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435a:	2b10      	cmp	r3, #16
 800435c:	d008      	beq.n	8004370 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	e007      	b.n	8004380 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800437e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004380:	2300      	movs	r3, #0
 8004382:	61fb      	str	r3, [r7, #28]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	61fb      	str	r3, [r7, #28]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	61fb      	str	r3, [r7, #28]
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	e0ac      	b.n	80044f2 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a8:	2300      	movs	r3, #0
 80043aa:	61bb      	str	r3, [r7, #24]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	61bb      	str	r3, [r7, #24]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	61bb      	str	r3, [r7, #24]
 80043bc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	e090      	b.n	80044f2 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d158      	bne.n	800448c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d021      	beq.n	8004424 <I2C_Master_ADDR+0x23e>
 80043e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d01e      	beq.n	8004424 <I2C_Master_ADDR+0x23e>
 80043e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e8:	2b10      	cmp	r3, #16
 80043ea:	d01b      	beq.n	8004424 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043fa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fc:	2300      	movs	r3, #0
 80043fe:	617b      	str	r3, [r7, #20]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	e012      	b.n	800444a <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004432:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004434:	2300      	movs	r3, #0
 8004436:	613b      	str	r3, [r7, #16]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	613b      	str	r3, [r7, #16]
 8004448:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004458:	d14b      	bne.n	80044f2 <I2C_Master_ADDR+0x30c>
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004460:	d00b      	beq.n	800447a <I2C_Master_ADDR+0x294>
 8004462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004464:	2b01      	cmp	r3, #1
 8004466:	d008      	beq.n	800447a <I2C_Master_ADDR+0x294>
 8004468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446a:	2b08      	cmp	r3, #8
 800446c:	d005      	beq.n	800447a <I2C_Master_ADDR+0x294>
 800446e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004470:	2b10      	cmp	r3, #16
 8004472:	d002      	beq.n	800447a <I2C_Master_ADDR+0x294>
 8004474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004476:	2b20      	cmp	r3, #32
 8004478:	d13b      	bne.n	80044f2 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004488:	605a      	str	r2, [r3, #4]
 800448a:	e032      	b.n	80044f2 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800449a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044aa:	d117      	bne.n	80044dc <I2C_Master_ADDR+0x2f6>
 80044ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044b2:	d00b      	beq.n	80044cc <I2C_Master_ADDR+0x2e6>
 80044b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d008      	beq.n	80044cc <I2C_Master_ADDR+0x2e6>
 80044ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d005      	beq.n	80044cc <I2C_Master_ADDR+0x2e6>
 80044c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c2:	2b10      	cmp	r3, #16
 80044c4:	d002      	beq.n	80044cc <I2C_Master_ADDR+0x2e6>
 80044c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d107      	bne.n	80044dc <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044da:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044dc:	2300      	movs	r3, #0
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80044f8:	e00b      	b.n	8004512 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044fa:	2300      	movs	r3, #0
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	60bb      	str	r3, [r7, #8]
 800450e:	68bb      	ldr	r3, [r7, #8]
}
 8004510:	e7ff      	b.n	8004512 <I2C_Master_ADDR+0x32c>
 8004512:	bf00      	nop
 8004514:	3744      	adds	r7, #68	; 0x44
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800452a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d02b      	beq.n	800458e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	781a      	ldrb	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	1c5a      	adds	r2, r3, #1
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455e:	b29b      	uxth	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d114      	bne.n	800458e <I2C_SlaveTransmit_TXE+0x72>
 8004564:	7bfb      	ldrb	r3, [r7, #15]
 8004566:	2b29      	cmp	r3, #41	; 0x29
 8004568:	d111      	bne.n	800458e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004578:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2221      	movs	r2, #33	; 0x21
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2228      	movs	r2, #40	; 0x28
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff f9e3 	bl	8003954 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800458e:	bf00      	nop
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d011      	beq.n	80045cc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	781a      	ldrb	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	3b01      	subs	r3, #1
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bc80      	pop	{r7}
 80045d4:	4770      	bx	lr

080045d6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b084      	sub	sp, #16
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d02c      	beq.n	800464a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461a:	b29b      	uxth	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d114      	bne.n	800464a <I2C_SlaveReceive_RXNE+0x74>
 8004620:	7bfb      	ldrb	r3, [r7, #15]
 8004622:	2b2a      	cmp	r3, #42	; 0x2a
 8004624:	d111      	bne.n	800464a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004634:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2222      	movs	r2, #34	; 0x22
 800463a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2228      	movs	r2, #40	; 0x28
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff f98e 	bl	8003966 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800464a:	bf00      	nop
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d012      	beq.n	800468a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691a      	ldr	r2, [r3, #16]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800469e:	2300      	movs	r3, #0
 80046a0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046ae:	2b28      	cmp	r3, #40	; 0x28
 80046b0:	d127      	bne.n	8004702 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	089b      	lsrs	r3, r3, #2
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80046ce:	2301      	movs	r3, #1
 80046d0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	09db      	lsrs	r3, r3, #7
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	81bb      	strh	r3, [r7, #12]
 80046e4:	e002      	b.n	80046ec <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80046f4:	89ba      	ldrh	r2, [r7, #12]
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
 80046f8:	4619      	mov	r1, r3
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff f93c 	bl	8003978 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004700:	e00e      	b.n	8004720 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004702:	2300      	movs	r3, #0
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695b      	ldr	r3, [r3, #20]
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	60bb      	str	r3, [r7, #8]
 8004716:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004720:	bf00      	nop
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004736:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004746:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004748:	2300      	movs	r3, #0
 800474a:	60bb      	str	r3, [r7, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	60bb      	str	r3, [r7, #8]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004774:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004784:	d172      	bne.n	800486c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	2b22      	cmp	r3, #34	; 0x22
 800478a:	d002      	beq.n	8004792 <I2C_Slave_STOPF+0x6a>
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b2a      	cmp	r3, #42	; 0x2a
 8004790:	d135      	bne.n	80047fe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	b29a      	uxth	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f043 0204 	orr.w	r2, r3, #4
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fe fb28 	bl	8002e20 <HAL_DMA_GetState>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d049      	beq.n	800486a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	4a69      	ldr	r2, [pc, #420]	; (8004980 <I2C_Slave_STOPF+0x258>)
 80047dc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fe f99e 	bl	8002b24 <HAL_DMA_Abort_IT>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d03d      	beq.n	800486a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047f8:	4610      	mov	r0, r2
 80047fa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047fc:	e035      	b.n	800486a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	b29a      	uxth	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d005      	beq.n	8004822 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	f043 0204 	orr.w	r2, r3, #4
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004830:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004836:	4618      	mov	r0, r3
 8004838:	f7fe faf2 	bl	8002e20 <HAL_DMA_GetState>
 800483c:	4603      	mov	r3, r0
 800483e:	2b01      	cmp	r3, #1
 8004840:	d014      	beq.n	800486c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004846:	4a4e      	ldr	r2, [pc, #312]	; (8004980 <I2C_Slave_STOPF+0x258>)
 8004848:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484e:	4618      	mov	r0, r3
 8004850:	f7fe f968 	bl	8002b24 <HAL_DMA_Abort_IT>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d008      	beq.n	800486c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004864:	4610      	mov	r0, r2
 8004866:	4798      	blx	r3
 8004868:	e000      	b.n	800486c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800486a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d03e      	beq.n	80048f4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b04      	cmp	r3, #4
 8004882:	d112      	bne.n	80048aa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	691a      	ldr	r2, [r3, #16]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b4:	2b40      	cmp	r3, #64	; 0x40
 80048b6:	d112      	bne.n	80048de <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	f043 0204 	orr.w	r2, r3, #4
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f8b7 	bl	8004a70 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004902:	e039      	b.n	8004978 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b2a      	cmp	r3, #42	; 0x2a
 8004908:	d109      	bne.n	800491e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2228      	movs	r2, #40	; 0x28
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7ff f824 	bl	8003966 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b28      	cmp	r3, #40	; 0x28
 8004928:	d111      	bne.n	800494e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a15      	ldr	r2, [pc, #84]	; (8004984 <I2C_Slave_STOPF+0x25c>)
 800492e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7ff f823 	bl	8003992 <HAL_I2C_ListenCpltCallback>
}
 800494c:	e014      	b.n	8004978 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004952:	2b22      	cmp	r3, #34	; 0x22
 8004954:	d002      	beq.n	800495c <I2C_Slave_STOPF+0x234>
 8004956:	7bfb      	ldrb	r3, [r7, #15]
 8004958:	2b22      	cmp	r3, #34	; 0x22
 800495a:	d10d      	bne.n	8004978 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fe fff7 	bl	8003966 <HAL_I2C_SlaveRxCpltCallback>
}
 8004978:	bf00      	nop
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	08004cd5 	.word	0x08004cd5
 8004984:	ffff0000 	.word	0xffff0000

08004988 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004996:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d002      	beq.n	80049aa <I2C_Slave_AF+0x22>
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d129      	bne.n	80049fe <I2C_Slave_AF+0x76>
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
 80049ac:	2b28      	cmp	r3, #40	; 0x28
 80049ae:	d126      	bne.n	80049fe <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a2e      	ldr	r2, [pc, #184]	; (8004a6c <I2C_Slave_AF+0xe4>)
 80049b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049c4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049ce:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049de:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fe ffcb 	bl	8003992 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80049fc:	e031      	b.n	8004a62 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	2b21      	cmp	r3, #33	; 0x21
 8004a02:	d129      	bne.n	8004a58 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a19      	ldr	r2, [pc, #100]	; (8004a6c <I2C_Slave_AF+0xe4>)
 8004a08:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2221      	movs	r2, #33	; 0x21
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a2e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a38:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a48:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fe fd3c 	bl	80034c8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7fe ff7f 	bl	8003954 <HAL_I2C_SlaveTxCpltCallback>
}
 8004a56:	e004      	b.n	8004a62 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a60:	615a      	str	r2, [r3, #20]
}
 8004a62:	bf00      	nop
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	ffff0000 	.word	0xffff0000

08004a70 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a86:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a88:	7bbb      	ldrb	r3, [r7, #14]
 8004a8a:	2b10      	cmp	r3, #16
 8004a8c:	d002      	beq.n	8004a94 <I2C_ITError+0x24>
 8004a8e:	7bbb      	ldrb	r3, [r7, #14]
 8004a90:	2b40      	cmp	r3, #64	; 0x40
 8004a92:	d10a      	bne.n	8004aaa <I2C_ITError+0x3a>
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	2b22      	cmp	r3, #34	; 0x22
 8004a98:	d107      	bne.n	8004aaa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aa8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
 8004aac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ab0:	2b28      	cmp	r3, #40	; 0x28
 8004ab2:	d107      	bne.n	8004ac4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2228      	movs	r2, #40	; 0x28
 8004abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ac2:	e015      	b.n	8004af0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ad2:	d00a      	beq.n	8004aea <I2C_ITError+0x7a>
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
 8004ad6:	2b60      	cmp	r3, #96	; 0x60
 8004ad8:	d007      	beq.n	8004aea <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004afa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004afe:	d162      	bne.n	8004bc6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b0e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d020      	beq.n	8004b60 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b22:	4a6a      	ldr	r2, [pc, #424]	; (8004ccc <I2C_ITError+0x25c>)
 8004b24:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fd fffa 	bl	8002b24 <HAL_DMA_Abort_IT>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 8089 	beq.w	8004c4a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0201 	bic.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	4798      	blx	r3
 8004b5e:	e074      	b.n	8004c4a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	4a59      	ldr	r2, [pc, #356]	; (8004ccc <I2C_ITError+0x25c>)
 8004b66:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fd ffd9 	bl	8002b24 <HAL_DMA_Abort_IT>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d068      	beq.n	8004c4a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b82:	2b40      	cmp	r3, #64	; 0x40
 8004b84:	d10b      	bne.n	8004b9e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	b2d2      	uxtb	r2, r2
 8004b92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0201 	bic.w	r2, r2, #1
 8004bac:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	4798      	blx	r3
 8004bc4:	e041      	b.n	8004c4a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b60      	cmp	r3, #96	; 0x60
 8004bd0:	d125      	bne.n	8004c1e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bea:	2b40      	cmp	r3, #64	; 0x40
 8004bec:	d10b      	bne.n	8004c06 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	b2d2      	uxtb	r2, r2
 8004bfa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0201 	bic.w	r2, r2, #1
 8004c14:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fe fedf 	bl	80039da <HAL_I2C_AbortCpltCallback>
 8004c1c:	e015      	b.n	8004c4a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c28:	2b40      	cmp	r3, #64	; 0x40
 8004c2a:	d10b      	bne.n	8004c44 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7fe febf 	bl	80039c8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10e      	bne.n	8004c78 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d109      	bne.n	8004c78 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d104      	bne.n	8004c78 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d007      	beq.n	8004c88 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c86:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d113      	bne.n	8004cc4 <I2C_ITError+0x254>
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	2b28      	cmp	r3, #40	; 0x28
 8004ca0:	d110      	bne.n	8004cc4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a0a      	ldr	r2, [pc, #40]	; (8004cd0 <I2C_ITError+0x260>)
 8004ca6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fe fe67 	bl	8003992 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cc4:	bf00      	nop
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	08004cd5 	.word	0x08004cd5
 8004cd0:	ffff0000 	.word	0xffff0000

08004cd4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cec:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cee:	4b4b      	ldr	r3, [pc, #300]	; (8004e1c <I2C_DMAAbort+0x148>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	08db      	lsrs	r3, r3, #3
 8004cf4:	4a4a      	ldr	r2, [pc, #296]	; (8004e20 <I2C_DMAAbort+0x14c>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	0a1a      	lsrs	r2, r3, #8
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	00da      	lsls	r2, r3, #3
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	f043 0220 	orr.w	r2, r3, #32
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004d1a:	e00a      	b.n	8004d32 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d30:	d0ea      	beq.n	8004d08 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3e:	2200      	movs	r2, #0
 8004d40:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	2200      	movs	r2, #0
 8004d50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d60:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2200      	movs	r2, #0
 8004d66:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d74:	2200      	movs	r2, #0
 8004d76:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d84:	2200      	movs	r2, #0
 8004d86:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0201 	bic.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b60      	cmp	r3, #96	; 0x60
 8004da2:	d10e      	bne.n	8004dc2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2200      	movs	r2, #0
 8004db8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004dba:	6978      	ldr	r0, [r7, #20]
 8004dbc:	f7fe fe0d 	bl	80039da <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004dc0:	e027      	b.n	8004e12 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004dc2:	7cfb      	ldrb	r3, [r7, #19]
 8004dc4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004dc8:	2b28      	cmp	r3, #40	; 0x28
 8004dca:	d117      	bne.n	8004dfc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0201 	orr.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	2200      	movs	r2, #0
 8004df0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2228      	movs	r2, #40	; 0x28
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004dfa:	e007      	b.n	8004e0c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004e0c:	6978      	ldr	r0, [r7, #20]
 8004e0e:	f7fe fddb 	bl	80039c8 <HAL_I2C_ErrorCallback>
}
 8004e12:	bf00      	nop
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	2000001c 	.word	0x2000001c
 8004e20:	14f8b589 	.word	0x14f8b589

08004e24 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e30:	4b13      	ldr	r3, [pc, #76]	; (8004e80 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	08db      	lsrs	r3, r3, #3
 8004e36:	4a13      	ldr	r2, [pc, #76]	; (8004e84 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004e38:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3c:	0a1a      	lsrs	r2, r3, #8
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d107      	bne.n	8004e62 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	f043 0220 	orr.w	r2, r3, #32
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e008      	b.n	8004e74 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e70:	d0e9      	beq.n	8004e46 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	2000001c 	.word	0x2000001c
 8004e84:	14f8b589 	.word	0x14f8b589

08004e88 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e94:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004e98:	d103      	bne.n	8004ea2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004ea0:	e007      	b.n	8004eb2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004eaa:	d102      	bne.n	8004eb2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2208      	movs	r2, #8
 8004eb0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr

08004ebc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e272      	b.n	80053b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 8087 	beq.w	8004fea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004edc:	4b92      	ldr	r3, [pc, #584]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f003 030c 	and.w	r3, r3, #12
 8004ee4:	2b04      	cmp	r3, #4
 8004ee6:	d00c      	beq.n	8004f02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ee8:	4b8f      	ldr	r3, [pc, #572]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f003 030c 	and.w	r3, r3, #12
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d112      	bne.n	8004f1a <HAL_RCC_OscConfig+0x5e>
 8004ef4:	4b8c      	ldr	r3, [pc, #560]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f00:	d10b      	bne.n	8004f1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f02:	4b89      	ldr	r3, [pc, #548]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d06c      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x12c>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d168      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e24c      	b.n	80053b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f22:	d106      	bne.n	8004f32 <HAL_RCC_OscConfig+0x76>
 8004f24:	4b80      	ldr	r3, [pc, #512]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a7f      	ldr	r2, [pc, #508]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8004f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	e02e      	b.n	8004f90 <HAL_RCC_OscConfig+0xd4>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10c      	bne.n	8004f54 <HAL_RCC_OscConfig+0x98>
 8004f3a:	4b7b      	ldr	r3, [pc, #492]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a7a      	ldr	r2, [pc, #488]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8004f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	4b78      	ldr	r3, [pc, #480]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a77      	ldr	r2, [pc, #476]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8004f4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f50:	6013      	str	r3, [r2, #0]
 8004f52:	e01d      	b.n	8004f90 <HAL_RCC_OscConfig+0xd4>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f5c:	d10c      	bne.n	8004f78 <HAL_RCC_OscConfig+0xbc>
 8004f5e:	4b72      	ldr	r3, [pc, #456]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a71      	ldr	r2, [pc, #452]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8004f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f68:	6013      	str	r3, [r2, #0]
 8004f6a:	4b6f      	ldr	r3, [pc, #444]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a6e      	ldr	r2, [pc, #440]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8004f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	e00b      	b.n	8004f90 <HAL_RCC_OscConfig+0xd4>
 8004f78:	4b6b      	ldr	r3, [pc, #428]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a6a      	ldr	r2, [pc, #424]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8004f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	4b68      	ldr	r3, [pc, #416]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a67      	ldr	r2, [pc, #412]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8004f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d013      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f98:	f7fd f980 	bl	800229c <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fa0:	f7fd f97c 	bl	800229c <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b64      	cmp	r3, #100	; 0x64
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e200      	b.n	80053b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fb2:	4b5d      	ldr	r3, [pc, #372]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0f0      	beq.n	8004fa0 <HAL_RCC_OscConfig+0xe4>
 8004fbe:	e014      	b.n	8004fea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc0:	f7fd f96c 	bl	800229c <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fc8:	f7fd f968 	bl	800229c <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b64      	cmp	r3, #100	; 0x64
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e1ec      	b.n	80053b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fda:	4b53      	ldr	r3, [pc, #332]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f0      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x10c>
 8004fe6:	e000      	b.n	8004fea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d063      	beq.n	80050be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ff6:	4b4c      	ldr	r3, [pc, #304]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f003 030c 	and.w	r3, r3, #12
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00b      	beq.n	800501a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005002:	4b49      	ldr	r3, [pc, #292]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f003 030c 	and.w	r3, r3, #12
 800500a:	2b08      	cmp	r3, #8
 800500c:	d11c      	bne.n	8005048 <HAL_RCC_OscConfig+0x18c>
 800500e:	4b46      	ldr	r3, [pc, #280]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d116      	bne.n	8005048 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800501a:	4b43      	ldr	r3, [pc, #268]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d005      	beq.n	8005032 <HAL_RCC_OscConfig+0x176>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d001      	beq.n	8005032 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e1c0      	b.n	80053b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005032:	4b3d      	ldr	r3, [pc, #244]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	4939      	ldr	r1, [pc, #228]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8005042:	4313      	orrs	r3, r2
 8005044:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005046:	e03a      	b.n	80050be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d020      	beq.n	8005092 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005050:	4b36      	ldr	r3, [pc, #216]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8005052:	2201      	movs	r2, #1
 8005054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005056:	f7fd f921 	bl	800229c <HAL_GetTick>
 800505a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800505c:	e008      	b.n	8005070 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800505e:	f7fd f91d 	bl	800229c <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d901      	bls.n	8005070 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e1a1      	b.n	80053b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005070:	4b2d      	ldr	r3, [pc, #180]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0f0      	beq.n	800505e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800507c:	4b2a      	ldr	r3, [pc, #168]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	4927      	ldr	r1, [pc, #156]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 800508c:	4313      	orrs	r3, r2
 800508e:	600b      	str	r3, [r1, #0]
 8005090:	e015      	b.n	80050be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005092:	4b26      	ldr	r3, [pc, #152]	; (800512c <HAL_RCC_OscConfig+0x270>)
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005098:	f7fd f900 	bl	800229c <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050a0:	f7fd f8fc 	bl	800229c <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e180      	b.n	80053b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050b2:	4b1d      	ldr	r3, [pc, #116]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f0      	bne.n	80050a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d03a      	beq.n	8005140 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d019      	beq.n	8005106 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050d2:	4b17      	ldr	r3, [pc, #92]	; (8005130 <HAL_RCC_OscConfig+0x274>)
 80050d4:	2201      	movs	r2, #1
 80050d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050d8:	f7fd f8e0 	bl	800229c <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050e0:	f7fd f8dc 	bl	800229c <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e160      	b.n	80053b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050f2:	4b0d      	ldr	r3, [pc, #52]	; (8005128 <HAL_RCC_OscConfig+0x26c>)
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0f0      	beq.n	80050e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80050fe:	2001      	movs	r0, #1
 8005100:	f000 face 	bl	80056a0 <RCC_Delay>
 8005104:	e01c      	b.n	8005140 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005106:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <HAL_RCC_OscConfig+0x274>)
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800510c:	f7fd f8c6 	bl	800229c <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005112:	e00f      	b.n	8005134 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005114:	f7fd f8c2 	bl	800229c <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d908      	bls.n	8005134 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e146      	b.n	80053b4 <HAL_RCC_OscConfig+0x4f8>
 8005126:	bf00      	nop
 8005128:	40021000 	.word	0x40021000
 800512c:	42420000 	.word	0x42420000
 8005130:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005134:	4b92      	ldr	r3, [pc, #584]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e9      	bne.n	8005114 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 80a6 	beq.w	800529a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800514e:	2300      	movs	r3, #0
 8005150:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005152:	4b8b      	ldr	r3, [pc, #556]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10d      	bne.n	800517a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800515e:	4b88      	ldr	r3, [pc, #544]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	4a87      	ldr	r2, [pc, #540]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 8005164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005168:	61d3      	str	r3, [r2, #28]
 800516a:	4b85      	ldr	r3, [pc, #532]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005172:	60bb      	str	r3, [r7, #8]
 8005174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005176:	2301      	movs	r3, #1
 8005178:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800517a:	4b82      	ldr	r3, [pc, #520]	; (8005384 <HAL_RCC_OscConfig+0x4c8>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005182:	2b00      	cmp	r3, #0
 8005184:	d118      	bne.n	80051b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005186:	4b7f      	ldr	r3, [pc, #508]	; (8005384 <HAL_RCC_OscConfig+0x4c8>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a7e      	ldr	r2, [pc, #504]	; (8005384 <HAL_RCC_OscConfig+0x4c8>)
 800518c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005192:	f7fd f883 	bl	800229c <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800519a:	f7fd f87f 	bl	800229c <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b64      	cmp	r3, #100	; 0x64
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e103      	b.n	80053b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ac:	4b75      	ldr	r3, [pc, #468]	; (8005384 <HAL_RCC_OscConfig+0x4c8>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0f0      	beq.n	800519a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d106      	bne.n	80051ce <HAL_RCC_OscConfig+0x312>
 80051c0:	4b6f      	ldr	r3, [pc, #444]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	4a6e      	ldr	r2, [pc, #440]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 80051c6:	f043 0301 	orr.w	r3, r3, #1
 80051ca:	6213      	str	r3, [r2, #32]
 80051cc:	e02d      	b.n	800522a <HAL_RCC_OscConfig+0x36e>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10c      	bne.n	80051f0 <HAL_RCC_OscConfig+0x334>
 80051d6:	4b6a      	ldr	r3, [pc, #424]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	4a69      	ldr	r2, [pc, #420]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 80051dc:	f023 0301 	bic.w	r3, r3, #1
 80051e0:	6213      	str	r3, [r2, #32]
 80051e2:	4b67      	ldr	r3, [pc, #412]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	4a66      	ldr	r2, [pc, #408]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 80051e8:	f023 0304 	bic.w	r3, r3, #4
 80051ec:	6213      	str	r3, [r2, #32]
 80051ee:	e01c      	b.n	800522a <HAL_RCC_OscConfig+0x36e>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	2b05      	cmp	r3, #5
 80051f6:	d10c      	bne.n	8005212 <HAL_RCC_OscConfig+0x356>
 80051f8:	4b61      	ldr	r3, [pc, #388]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	4a60      	ldr	r2, [pc, #384]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 80051fe:	f043 0304 	orr.w	r3, r3, #4
 8005202:	6213      	str	r3, [r2, #32]
 8005204:	4b5e      	ldr	r3, [pc, #376]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	4a5d      	ldr	r2, [pc, #372]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 800520a:	f043 0301 	orr.w	r3, r3, #1
 800520e:	6213      	str	r3, [r2, #32]
 8005210:	e00b      	b.n	800522a <HAL_RCC_OscConfig+0x36e>
 8005212:	4b5b      	ldr	r3, [pc, #364]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	4a5a      	ldr	r2, [pc, #360]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 8005218:	f023 0301 	bic.w	r3, r3, #1
 800521c:	6213      	str	r3, [r2, #32]
 800521e:	4b58      	ldr	r3, [pc, #352]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	4a57      	ldr	r2, [pc, #348]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 8005224:	f023 0304 	bic.w	r3, r3, #4
 8005228:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d015      	beq.n	800525e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005232:	f7fd f833 	bl	800229c <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005238:	e00a      	b.n	8005250 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800523a:	f7fd f82f 	bl	800229c <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	f241 3288 	movw	r2, #5000	; 0x1388
 8005248:	4293      	cmp	r3, r2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e0b1      	b.n	80053b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005250:	4b4b      	ldr	r3, [pc, #300]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0ee      	beq.n	800523a <HAL_RCC_OscConfig+0x37e>
 800525c:	e014      	b.n	8005288 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800525e:	f7fd f81d 	bl	800229c <HAL_GetTick>
 8005262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005264:	e00a      	b.n	800527c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005266:	f7fd f819 	bl	800229c <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	f241 3288 	movw	r2, #5000	; 0x1388
 8005274:	4293      	cmp	r3, r2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e09b      	b.n	80053b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800527c:	4b40      	ldr	r3, [pc, #256]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1ee      	bne.n	8005266 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005288:	7dfb      	ldrb	r3, [r7, #23]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d105      	bne.n	800529a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800528e:	4b3c      	ldr	r3, [pc, #240]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	4a3b      	ldr	r2, [pc, #236]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 8005294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005298:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 8087 	beq.w	80053b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052a4:	4b36      	ldr	r3, [pc, #216]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f003 030c 	and.w	r3, r3, #12
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d061      	beq.n	8005374 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d146      	bne.n	8005346 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052b8:	4b33      	ldr	r3, [pc, #204]	; (8005388 <HAL_RCC_OscConfig+0x4cc>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052be:	f7fc ffed 	bl	800229c <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c6:	f7fc ffe9 	bl	800229c <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e06d      	b.n	80053b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052d8:	4b29      	ldr	r3, [pc, #164]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1f0      	bne.n	80052c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ec:	d108      	bne.n	8005300 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80052ee:	4b24      	ldr	r3, [pc, #144]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	4921      	ldr	r1, [pc, #132]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005300:	4b1f      	ldr	r3, [pc, #124]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a19      	ldr	r1, [r3, #32]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	430b      	orrs	r3, r1
 8005312:	491b      	ldr	r1, [pc, #108]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 8005314:	4313      	orrs	r3, r2
 8005316:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005318:	4b1b      	ldr	r3, [pc, #108]	; (8005388 <HAL_RCC_OscConfig+0x4cc>)
 800531a:	2201      	movs	r2, #1
 800531c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800531e:	f7fc ffbd 	bl	800229c <HAL_GetTick>
 8005322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005324:	e008      	b.n	8005338 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005326:	f7fc ffb9 	bl	800229c <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e03d      	b.n	80053b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005338:	4b11      	ldr	r3, [pc, #68]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0f0      	beq.n	8005326 <HAL_RCC_OscConfig+0x46a>
 8005344:	e035      	b.n	80053b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005346:	4b10      	ldr	r3, [pc, #64]	; (8005388 <HAL_RCC_OscConfig+0x4cc>)
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534c:	f7fc ffa6 	bl	800229c <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005354:	f7fc ffa2 	bl	800229c <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e026      	b.n	80053b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005366:	4b06      	ldr	r3, [pc, #24]	; (8005380 <HAL_RCC_OscConfig+0x4c4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f0      	bne.n	8005354 <HAL_RCC_OscConfig+0x498>
 8005372:	e01e      	b.n	80053b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d107      	bne.n	800538c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e019      	b.n	80053b4 <HAL_RCC_OscConfig+0x4f8>
 8005380:	40021000 	.word	0x40021000
 8005384:	40007000 	.word	0x40007000
 8005388:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800538c:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <HAL_RCC_OscConfig+0x500>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	429a      	cmp	r2, r3
 800539e:	d106      	bne.n	80053ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d001      	beq.n	80053b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e000      	b.n	80053b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3718      	adds	r7, #24
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40021000 	.word	0x40021000

080053c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e0d0      	b.n	8005576 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053d4:	4b6a      	ldr	r3, [pc, #424]	; (8005580 <HAL_RCC_ClockConfig+0x1c0>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0307 	and.w	r3, r3, #7
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d910      	bls.n	8005404 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053e2:	4b67      	ldr	r3, [pc, #412]	; (8005580 <HAL_RCC_ClockConfig+0x1c0>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f023 0207 	bic.w	r2, r3, #7
 80053ea:	4965      	ldr	r1, [pc, #404]	; (8005580 <HAL_RCC_ClockConfig+0x1c0>)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053f2:	4b63      	ldr	r3, [pc, #396]	; (8005580 <HAL_RCC_ClockConfig+0x1c0>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d001      	beq.n	8005404 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e0b8      	b.n	8005576 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d020      	beq.n	8005452 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	d005      	beq.n	8005428 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800541c:	4b59      	ldr	r3, [pc, #356]	; (8005584 <HAL_RCC_ClockConfig+0x1c4>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	4a58      	ldr	r2, [pc, #352]	; (8005584 <HAL_RCC_ClockConfig+0x1c4>)
 8005422:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005426:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005434:	4b53      	ldr	r3, [pc, #332]	; (8005584 <HAL_RCC_ClockConfig+0x1c4>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	4a52      	ldr	r2, [pc, #328]	; (8005584 <HAL_RCC_ClockConfig+0x1c4>)
 800543a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800543e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005440:	4b50      	ldr	r3, [pc, #320]	; (8005584 <HAL_RCC_ClockConfig+0x1c4>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	494d      	ldr	r1, [pc, #308]	; (8005584 <HAL_RCC_ClockConfig+0x1c4>)
 800544e:	4313      	orrs	r3, r2
 8005450:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d040      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d107      	bne.n	8005476 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005466:	4b47      	ldr	r3, [pc, #284]	; (8005584 <HAL_RCC_ClockConfig+0x1c4>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d115      	bne.n	800549e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e07f      	b.n	8005576 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	2b02      	cmp	r3, #2
 800547c:	d107      	bne.n	800548e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800547e:	4b41      	ldr	r3, [pc, #260]	; (8005584 <HAL_RCC_ClockConfig+0x1c4>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d109      	bne.n	800549e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e073      	b.n	8005576 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800548e:	4b3d      	ldr	r3, [pc, #244]	; (8005584 <HAL_RCC_ClockConfig+0x1c4>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e06b      	b.n	8005576 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800549e:	4b39      	ldr	r3, [pc, #228]	; (8005584 <HAL_RCC_ClockConfig+0x1c4>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f023 0203 	bic.w	r2, r3, #3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	4936      	ldr	r1, [pc, #216]	; (8005584 <HAL_RCC_ClockConfig+0x1c4>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054b0:	f7fc fef4 	bl	800229c <HAL_GetTick>
 80054b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054b6:	e00a      	b.n	80054ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054b8:	f7fc fef0 	bl	800229c <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e053      	b.n	8005576 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ce:	4b2d      	ldr	r3, [pc, #180]	; (8005584 <HAL_RCC_ClockConfig+0x1c4>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f003 020c 	and.w	r2, r3, #12
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	429a      	cmp	r2, r3
 80054de:	d1eb      	bne.n	80054b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054e0:	4b27      	ldr	r3, [pc, #156]	; (8005580 <HAL_RCC_ClockConfig+0x1c0>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d210      	bcs.n	8005510 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ee:	4b24      	ldr	r3, [pc, #144]	; (8005580 <HAL_RCC_ClockConfig+0x1c0>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f023 0207 	bic.w	r2, r3, #7
 80054f6:	4922      	ldr	r1, [pc, #136]	; (8005580 <HAL_RCC_ClockConfig+0x1c0>)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054fe:	4b20      	ldr	r3, [pc, #128]	; (8005580 <HAL_RCC_ClockConfig+0x1c0>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	d001      	beq.n	8005510 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e032      	b.n	8005576 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d008      	beq.n	800552e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800551c:	4b19      	ldr	r3, [pc, #100]	; (8005584 <HAL_RCC_ClockConfig+0x1c4>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	4916      	ldr	r1, [pc, #88]	; (8005584 <HAL_RCC_ClockConfig+0x1c4>)
 800552a:	4313      	orrs	r3, r2
 800552c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d009      	beq.n	800554e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800553a:	4b12      	ldr	r3, [pc, #72]	; (8005584 <HAL_RCC_ClockConfig+0x1c4>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	490e      	ldr	r1, [pc, #56]	; (8005584 <HAL_RCC_ClockConfig+0x1c4>)
 800554a:	4313      	orrs	r3, r2
 800554c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800554e:	f000 f821 	bl	8005594 <HAL_RCC_GetSysClockFreq>
 8005552:	4602      	mov	r2, r0
 8005554:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <HAL_RCC_ClockConfig+0x1c4>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	091b      	lsrs	r3, r3, #4
 800555a:	f003 030f 	and.w	r3, r3, #15
 800555e:	490a      	ldr	r1, [pc, #40]	; (8005588 <HAL_RCC_ClockConfig+0x1c8>)
 8005560:	5ccb      	ldrb	r3, [r1, r3]
 8005562:	fa22 f303 	lsr.w	r3, r2, r3
 8005566:	4a09      	ldr	r2, [pc, #36]	; (800558c <HAL_RCC_ClockConfig+0x1cc>)
 8005568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800556a:	4b09      	ldr	r3, [pc, #36]	; (8005590 <HAL_RCC_ClockConfig+0x1d0>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f7fc fe52 	bl	8002218 <HAL_InitTick>

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	40022000 	.word	0x40022000
 8005584:	40021000 	.word	0x40021000
 8005588:	0800bd34 	.word	0x0800bd34
 800558c:	2000001c 	.word	0x2000001c
 8005590:	20000020 	.word	0x20000020

08005594 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	2300      	movs	r3, #0
 80055a0:	60bb      	str	r3, [r7, #8]
 80055a2:	2300      	movs	r3, #0
 80055a4:	617b      	str	r3, [r7, #20]
 80055a6:	2300      	movs	r3, #0
 80055a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80055ae:	4b1e      	ldr	r3, [pc, #120]	; (8005628 <HAL_RCC_GetSysClockFreq+0x94>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f003 030c 	and.w	r3, r3, #12
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d002      	beq.n	80055c4 <HAL_RCC_GetSysClockFreq+0x30>
 80055be:	2b08      	cmp	r3, #8
 80055c0:	d003      	beq.n	80055ca <HAL_RCC_GetSysClockFreq+0x36>
 80055c2:	e027      	b.n	8005614 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80055c4:	4b19      	ldr	r3, [pc, #100]	; (800562c <HAL_RCC_GetSysClockFreq+0x98>)
 80055c6:	613b      	str	r3, [r7, #16]
      break;
 80055c8:	e027      	b.n	800561a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	0c9b      	lsrs	r3, r3, #18
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	4a17      	ldr	r2, [pc, #92]	; (8005630 <HAL_RCC_GetSysClockFreq+0x9c>)
 80055d4:	5cd3      	ldrb	r3, [r2, r3]
 80055d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d010      	beq.n	8005604 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80055e2:	4b11      	ldr	r3, [pc, #68]	; (8005628 <HAL_RCC_GetSysClockFreq+0x94>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	0c5b      	lsrs	r3, r3, #17
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	4a11      	ldr	r2, [pc, #68]	; (8005634 <HAL_RCC_GetSysClockFreq+0xa0>)
 80055ee:	5cd3      	ldrb	r3, [r2, r3]
 80055f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a0d      	ldr	r2, [pc, #52]	; (800562c <HAL_RCC_GetSysClockFreq+0x98>)
 80055f6:	fb03 f202 	mul.w	r2, r3, r2
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	e004      	b.n	800560e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a0c      	ldr	r2, [pc, #48]	; (8005638 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005608:	fb02 f303 	mul.w	r3, r2, r3
 800560c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	613b      	str	r3, [r7, #16]
      break;
 8005612:	e002      	b.n	800561a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005614:	4b05      	ldr	r3, [pc, #20]	; (800562c <HAL_RCC_GetSysClockFreq+0x98>)
 8005616:	613b      	str	r3, [r7, #16]
      break;
 8005618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800561a:	693b      	ldr	r3, [r7, #16]
}
 800561c:	4618      	mov	r0, r3
 800561e:	371c      	adds	r7, #28
 8005620:	46bd      	mov	sp, r7
 8005622:	bc80      	pop	{r7}
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	40021000 	.word	0x40021000
 800562c:	007a1200 	.word	0x007a1200
 8005630:	0800bd4c 	.word	0x0800bd4c
 8005634:	0800bd5c 	.word	0x0800bd5c
 8005638:	003d0900 	.word	0x003d0900

0800563c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005640:	4b02      	ldr	r3, [pc, #8]	; (800564c <HAL_RCC_GetHCLKFreq+0x10>)
 8005642:	681b      	ldr	r3, [r3, #0]
}
 8005644:	4618      	mov	r0, r3
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr
 800564c:	2000001c 	.word	0x2000001c

08005650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005654:	f7ff fff2 	bl	800563c <HAL_RCC_GetHCLKFreq>
 8005658:	4602      	mov	r2, r0
 800565a:	4b05      	ldr	r3, [pc, #20]	; (8005670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	0a1b      	lsrs	r3, r3, #8
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	4903      	ldr	r1, [pc, #12]	; (8005674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005666:	5ccb      	ldrb	r3, [r1, r3]
 8005668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800566c:	4618      	mov	r0, r3
 800566e:	bd80      	pop	{r7, pc}
 8005670:	40021000 	.word	0x40021000
 8005674:	0800bd44 	.word	0x0800bd44

08005678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800567c:	f7ff ffde 	bl	800563c <HAL_RCC_GetHCLKFreq>
 8005680:	4602      	mov	r2, r0
 8005682:	4b05      	ldr	r3, [pc, #20]	; (8005698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	0adb      	lsrs	r3, r3, #11
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	4903      	ldr	r1, [pc, #12]	; (800569c <HAL_RCC_GetPCLK2Freq+0x24>)
 800568e:	5ccb      	ldrb	r3, [r1, r3]
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005694:	4618      	mov	r0, r3
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40021000 	.word	0x40021000
 800569c:	0800bd44 	.word	0x0800bd44

080056a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80056a8:	4b0a      	ldr	r3, [pc, #40]	; (80056d4 <RCC_Delay+0x34>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a0a      	ldr	r2, [pc, #40]	; (80056d8 <RCC_Delay+0x38>)
 80056ae:	fba2 2303 	umull	r2, r3, r2, r3
 80056b2:	0a5b      	lsrs	r3, r3, #9
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	fb02 f303 	mul.w	r3, r2, r3
 80056ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80056bc:	bf00      	nop
  }
  while (Delay --);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	1e5a      	subs	r2, r3, #1
 80056c2:	60fa      	str	r2, [r7, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1f9      	bne.n	80056bc <RCC_Delay+0x1c>
}
 80056c8:	bf00      	nop
 80056ca:	bf00      	nop
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bc80      	pop	{r7}
 80056d2:	4770      	bx	lr
 80056d4:	2000001c 	.word	0x2000001c
 80056d8:	10624dd3 	.word	0x10624dd3

080056dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	613b      	str	r3, [r7, #16]
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d07d      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80056f8:	2300      	movs	r3, #0
 80056fa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056fc:	4b4f      	ldr	r3, [pc, #316]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10d      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005708:	4b4c      	ldr	r3, [pc, #304]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	4a4b      	ldr	r2, [pc, #300]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800570e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005712:	61d3      	str	r3, [r2, #28]
 8005714:	4b49      	ldr	r3, [pc, #292]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571c:	60bb      	str	r3, [r7, #8]
 800571e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005720:	2301      	movs	r3, #1
 8005722:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005724:	4b46      	ldr	r3, [pc, #280]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572c:	2b00      	cmp	r3, #0
 800572e:	d118      	bne.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005730:	4b43      	ldr	r3, [pc, #268]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a42      	ldr	r2, [pc, #264]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800573a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800573c:	f7fc fdae 	bl	800229c <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005742:	e008      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005744:	f7fc fdaa 	bl	800229c <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b64      	cmp	r3, #100	; 0x64
 8005750:	d901      	bls.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e06d      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005756:	4b3a      	ldr	r3, [pc, #232]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0f0      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005762:	4b36      	ldr	r3, [pc, #216]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800576a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d02e      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	429a      	cmp	r2, r3
 800577e:	d027      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005780:	4b2e      	ldr	r3, [pc, #184]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005788:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800578a:	4b2e      	ldr	r3, [pc, #184]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800578c:	2201      	movs	r2, #1
 800578e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005790:	4b2c      	ldr	r3, [pc, #176]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005796:	4a29      	ldr	r2, [pc, #164]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d014      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a6:	f7fc fd79 	bl	800229c <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ac:	e00a      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ae:	f7fc fd75 	bl	800229c <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057bc:	4293      	cmp	r3, r2
 80057be:	d901      	bls.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e036      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c4:	4b1d      	ldr	r3, [pc, #116]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0ee      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057d0:	4b1a      	ldr	r3, [pc, #104]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	4917      	ldr	r1, [pc, #92]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80057e2:	7dfb      	ldrb	r3, [r7, #23]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d105      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057e8:	4b14      	ldr	r3, [pc, #80]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	4a13      	ldr	r2, [pc, #76]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d008      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005800:	4b0e      	ldr	r3, [pc, #56]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	490b      	ldr	r1, [pc, #44]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800580e:	4313      	orrs	r3, r2
 8005810:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0310 	and.w	r3, r3, #16
 800581a:	2b00      	cmp	r3, #0
 800581c:	d008      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800581e:	4b07      	ldr	r3, [pc, #28]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	4904      	ldr	r1, [pc, #16]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800582c:	4313      	orrs	r3, r2
 800582e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3718      	adds	r7, #24
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	40021000 	.word	0x40021000
 8005840:	40007000 	.word	0x40007000
 8005844:	42420440 	.word	0x42420440

08005848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e041      	b.n	80058de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7fc fa4e 	bl	8001d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3304      	adds	r3, #4
 8005884:	4619      	mov	r1, r3
 8005886:	4610      	mov	r0, r2
 8005888:	f001 f8d2 	bl	8006a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
	...

080058e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d001      	beq.n	8005900 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e03a      	b.n	8005976 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68da      	ldr	r2, [r3, #12]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0201 	orr.w	r2, r2, #1
 8005916:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a18      	ldr	r2, [pc, #96]	; (8005980 <HAL_TIM_Base_Start_IT+0x98>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00e      	beq.n	8005940 <HAL_TIM_Base_Start_IT+0x58>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592a:	d009      	beq.n	8005940 <HAL_TIM_Base_Start_IT+0x58>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a14      	ldr	r2, [pc, #80]	; (8005984 <HAL_TIM_Base_Start_IT+0x9c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d004      	beq.n	8005940 <HAL_TIM_Base_Start_IT+0x58>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a13      	ldr	r2, [pc, #76]	; (8005988 <HAL_TIM_Base_Start_IT+0xa0>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d111      	bne.n	8005964 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b06      	cmp	r3, #6
 8005950:	d010      	beq.n	8005974 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f042 0201 	orr.w	r2, r2, #1
 8005960:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005962:	e007      	b.n	8005974 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	bc80      	pop	{r7}
 800597e:	4770      	bx	lr
 8005980:	40012c00 	.word	0x40012c00
 8005984:	40000400 	.word	0x40000400
 8005988:	40000800 	.word	0x40000800

0800598c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e041      	b.n	8005a22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d106      	bne.n	80059b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f839 	bl	8005a2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	3304      	adds	r3, #4
 80059c8:	4619      	mov	r1, r3
 80059ca:	4610      	mov	r0, r2
 80059cc:	f001 f830 	bl	8006a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b083      	sub	sp, #12
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bc80      	pop	{r7}
 8005a3a:	4770      	bx	lr

08005a3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d109      	bne.n	8005a60 <HAL_TIM_PWM_Start+0x24>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	bf14      	ite	ne
 8005a58:	2301      	movne	r3, #1
 8005a5a:	2300      	moveq	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	e022      	b.n	8005aa6 <HAL_TIM_PWM_Start+0x6a>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d109      	bne.n	8005a7a <HAL_TIM_PWM_Start+0x3e>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	bf14      	ite	ne
 8005a72:	2301      	movne	r3, #1
 8005a74:	2300      	moveq	r3, #0
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	e015      	b.n	8005aa6 <HAL_TIM_PWM_Start+0x6a>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d109      	bne.n	8005a94 <HAL_TIM_PWM_Start+0x58>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	bf14      	ite	ne
 8005a8c:	2301      	movne	r3, #1
 8005a8e:	2300      	moveq	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	e008      	b.n	8005aa6 <HAL_TIM_PWM_Start+0x6a>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	bf14      	ite	ne
 8005aa0:	2301      	movne	r3, #1
 8005aa2:	2300      	moveq	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e05e      	b.n	8005b6c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d104      	bne.n	8005abe <HAL_TIM_PWM_Start+0x82>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005abc:	e013      	b.n	8005ae6 <HAL_TIM_PWM_Start+0xaa>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d104      	bne.n	8005ace <HAL_TIM_PWM_Start+0x92>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005acc:	e00b      	b.n	8005ae6 <HAL_TIM_PWM_Start+0xaa>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d104      	bne.n	8005ade <HAL_TIM_PWM_Start+0xa2>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005adc:	e003      	b.n	8005ae6 <HAL_TIM_PWM_Start+0xaa>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2201      	movs	r2, #1
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f001 fa1e 	bl	8006f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a1e      	ldr	r2, [pc, #120]	; (8005b74 <HAL_TIM_PWM_Start+0x138>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d107      	bne.n	8005b0e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a18      	ldr	r2, [pc, #96]	; (8005b74 <HAL_TIM_PWM_Start+0x138>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00e      	beq.n	8005b36 <HAL_TIM_PWM_Start+0xfa>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b20:	d009      	beq.n	8005b36 <HAL_TIM_PWM_Start+0xfa>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a14      	ldr	r2, [pc, #80]	; (8005b78 <HAL_TIM_PWM_Start+0x13c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d004      	beq.n	8005b36 <HAL_TIM_PWM_Start+0xfa>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a12      	ldr	r2, [pc, #72]	; (8005b7c <HAL_TIM_PWM_Start+0x140>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d111      	bne.n	8005b5a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 0307 	and.w	r3, r3, #7
 8005b40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2b06      	cmp	r3, #6
 8005b46:	d010      	beq.n	8005b6a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0201 	orr.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b58:	e007      	b.n	8005b6a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f042 0201 	orr.w	r2, r2, #1
 8005b68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	40012c00 	.word	0x40012c00
 8005b78:	40000400 	.word	0x40000400
 8005b7c:	40000800 	.word	0x40000800

08005b80 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	6839      	ldr	r1, [r7, #0]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f001 f9cc 	bl	8006f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a29      	ldr	r2, [pc, #164]	; (8005c44 <HAL_TIM_PWM_Stop+0xc4>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d117      	bne.n	8005bd2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6a1a      	ldr	r2, [r3, #32]
 8005ba8:	f241 1311 	movw	r3, #4369	; 0x1111
 8005bac:	4013      	ands	r3, r2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10f      	bne.n	8005bd2 <HAL_TIM_PWM_Stop+0x52>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6a1a      	ldr	r2, [r3, #32]
 8005bb8:	f240 4344 	movw	r3, #1092	; 0x444
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d107      	bne.n	8005bd2 <HAL_TIM_PWM_Stop+0x52>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6a1a      	ldr	r2, [r3, #32]
 8005bd8:	f241 1311 	movw	r3, #4369	; 0x1111
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10f      	bne.n	8005c02 <HAL_TIM_PWM_Stop+0x82>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6a1a      	ldr	r2, [r3, #32]
 8005be8:	f240 4344 	movw	r3, #1092	; 0x444
 8005bec:	4013      	ands	r3, r2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d107      	bne.n	8005c02 <HAL_TIM_PWM_Stop+0x82>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 0201 	bic.w	r2, r2, #1
 8005c00:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d104      	bne.n	8005c12 <HAL_TIM_PWM_Stop+0x92>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c10:	e013      	b.n	8005c3a <HAL_TIM_PWM_Stop+0xba>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b04      	cmp	r3, #4
 8005c16:	d104      	bne.n	8005c22 <HAL_TIM_PWM_Stop+0xa2>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c20:	e00b      	b.n	8005c3a <HAL_TIM_PWM_Stop+0xba>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d104      	bne.n	8005c32 <HAL_TIM_PWM_Stop+0xb2>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c30:	e003      	b.n	8005c3a <HAL_TIM_PWM_Stop+0xba>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	40012c00 	.word	0x40012c00

08005c48 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d109      	bne.n	8005c70 <HAL_TIM_PWM_Start_IT+0x28>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	bf14      	ite	ne
 8005c68:	2301      	movne	r3, #1
 8005c6a:	2300      	moveq	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	e022      	b.n	8005cb6 <HAL_TIM_PWM_Start_IT+0x6e>
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	d109      	bne.n	8005c8a <HAL_TIM_PWM_Start_IT+0x42>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	bf14      	ite	ne
 8005c82:	2301      	movne	r3, #1
 8005c84:	2300      	moveq	r3, #0
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	e015      	b.n	8005cb6 <HAL_TIM_PWM_Start_IT+0x6e>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d109      	bne.n	8005ca4 <HAL_TIM_PWM_Start_IT+0x5c>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	bf14      	ite	ne
 8005c9c:	2301      	movne	r3, #1
 8005c9e:	2300      	moveq	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	e008      	b.n	8005cb6 <HAL_TIM_PWM_Start_IT+0x6e>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	bf14      	ite	ne
 8005cb0:	2301      	movne	r3, #1
 8005cb2:	2300      	moveq	r3, #0
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e0a9      	b.n	8005e12 <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d104      	bne.n	8005cce <HAL_TIM_PWM_Start_IT+0x86>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ccc:	e013      	b.n	8005cf6 <HAL_TIM_PWM_Start_IT+0xae>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b04      	cmp	r3, #4
 8005cd2:	d104      	bne.n	8005cde <HAL_TIM_PWM_Start_IT+0x96>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cdc:	e00b      	b.n	8005cf6 <HAL_TIM_PWM_Start_IT+0xae>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d104      	bne.n	8005cee <HAL_TIM_PWM_Start_IT+0xa6>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cec:	e003      	b.n	8005cf6 <HAL_TIM_PWM_Start_IT+0xae>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b0c      	cmp	r3, #12
 8005cfa:	d841      	bhi.n	8005d80 <HAL_TIM_PWM_Start_IT+0x138>
 8005cfc:	a201      	add	r2, pc, #4	; (adr r2, 8005d04 <HAL_TIM_PWM_Start_IT+0xbc>)
 8005cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d02:	bf00      	nop
 8005d04:	08005d39 	.word	0x08005d39
 8005d08:	08005d81 	.word	0x08005d81
 8005d0c:	08005d81 	.word	0x08005d81
 8005d10:	08005d81 	.word	0x08005d81
 8005d14:	08005d4b 	.word	0x08005d4b
 8005d18:	08005d81 	.word	0x08005d81
 8005d1c:	08005d81 	.word	0x08005d81
 8005d20:	08005d81 	.word	0x08005d81
 8005d24:	08005d5d 	.word	0x08005d5d
 8005d28:	08005d81 	.word	0x08005d81
 8005d2c:	08005d81 	.word	0x08005d81
 8005d30:	08005d81 	.word	0x08005d81
 8005d34:	08005d6f 	.word	0x08005d6f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0202 	orr.w	r2, r2, #2
 8005d46:	60da      	str	r2, [r3, #12]
      break;
 8005d48:	e01d      	b.n	8005d86 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f042 0204 	orr.w	r2, r2, #4
 8005d58:	60da      	str	r2, [r3, #12]
      break;
 8005d5a:	e014      	b.n	8005d86 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68da      	ldr	r2, [r3, #12]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0208 	orr.w	r2, r2, #8
 8005d6a:	60da      	str	r2, [r3, #12]
      break;
 8005d6c:	e00b      	b.n	8005d86 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f042 0210 	orr.w	r2, r2, #16
 8005d7c:	60da      	str	r2, [r3, #12]
      break;
 8005d7e:	e002      	b.n	8005d86 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	73fb      	strb	r3, [r7, #15]
      break;
 8005d84:	bf00      	nop
  }

  if (status == HAL_OK)
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d141      	bne.n	8005e10 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2201      	movs	r2, #1
 8005d92:	6839      	ldr	r1, [r7, #0]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f001 f8cb 	bl	8006f30 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a1f      	ldr	r2, [pc, #124]	; (8005e1c <HAL_TIM_PWM_Start_IT+0x1d4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d107      	bne.n	8005db4 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005db2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a18      	ldr	r2, [pc, #96]	; (8005e1c <HAL_TIM_PWM_Start_IT+0x1d4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00e      	beq.n	8005ddc <HAL_TIM_PWM_Start_IT+0x194>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc6:	d009      	beq.n	8005ddc <HAL_TIM_PWM_Start_IT+0x194>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a14      	ldr	r2, [pc, #80]	; (8005e20 <HAL_TIM_PWM_Start_IT+0x1d8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d004      	beq.n	8005ddc <HAL_TIM_PWM_Start_IT+0x194>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a13      	ldr	r2, [pc, #76]	; (8005e24 <HAL_TIM_PWM_Start_IT+0x1dc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d111      	bne.n	8005e00 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 0307 	and.w	r3, r3, #7
 8005de6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2b06      	cmp	r3, #6
 8005dec:	d010      	beq.n	8005e10 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 0201 	orr.w	r2, r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfe:	e007      	b.n	8005e10 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0201 	orr.w	r2, r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40012c00 	.word	0x40012c00
 8005e20:	40000400 	.word	0x40000400
 8005e24:	40000800 	.word	0x40000800

08005e28 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d109      	bne.n	8005e54 <HAL_TIM_PWM_Start_DMA+0x2c>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	bf0c      	ite	eq
 8005e4c:	2301      	moveq	r3, #1
 8005e4e:	2300      	movne	r3, #0
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	e022      	b.n	8005e9a <HAL_TIM_PWM_Start_DMA+0x72>
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d109      	bne.n	8005e6e <HAL_TIM_PWM_Start_DMA+0x46>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	bf0c      	ite	eq
 8005e66:	2301      	moveq	r3, #1
 8005e68:	2300      	movne	r3, #0
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	e015      	b.n	8005e9a <HAL_TIM_PWM_Start_DMA+0x72>
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d109      	bne.n	8005e88 <HAL_TIM_PWM_Start_DMA+0x60>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	bf0c      	ite	eq
 8005e80:	2301      	moveq	r3, #1
 8005e82:	2300      	movne	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	e008      	b.n	8005e9a <HAL_TIM_PWM_Start_DMA+0x72>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	bf0c      	ite	eq
 8005e94:	2301      	moveq	r3, #1
 8005e96:	2300      	movne	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	e153      	b.n	800614a <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d109      	bne.n	8005ebc <HAL_TIM_PWM_Start_DMA+0x94>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	bf0c      	ite	eq
 8005eb4:	2301      	moveq	r3, #1
 8005eb6:	2300      	movne	r3, #0
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	e022      	b.n	8005f02 <HAL_TIM_PWM_Start_DMA+0xda>
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	d109      	bne.n	8005ed6 <HAL_TIM_PWM_Start_DMA+0xae>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	bf0c      	ite	eq
 8005ece:	2301      	moveq	r3, #1
 8005ed0:	2300      	movne	r3, #0
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	e015      	b.n	8005f02 <HAL_TIM_PWM_Start_DMA+0xda>
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d109      	bne.n	8005ef0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	bf0c      	ite	eq
 8005ee8:	2301      	moveq	r3, #1
 8005eea:	2300      	movne	r3, #0
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	e008      	b.n	8005f02 <HAL_TIM_PWM_Start_DMA+0xda>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	bf0c      	ite	eq
 8005efc:	2301      	moveq	r3, #1
 8005efe:	2300      	movne	r3, #0
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d024      	beq.n	8005f50 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <HAL_TIM_PWM_Start_DMA+0xea>
 8005f0c:	887b      	ldrh	r3, [r7, #2]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e119      	b.n	800614a <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d104      	bne.n	8005f26 <HAL_TIM_PWM_Start_DMA+0xfe>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f24:	e016      	b.n	8005f54 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2b04      	cmp	r3, #4
 8005f2a:	d104      	bne.n	8005f36 <HAL_TIM_PWM_Start_DMA+0x10e>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f34:	e00e      	b.n	8005f54 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d104      	bne.n	8005f46 <HAL_TIM_PWM_Start_DMA+0x11e>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f44:	e006      	b.n	8005f54 <HAL_TIM_PWM_Start_DMA+0x12c>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2202      	movs	r2, #2
 8005f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f4e:	e001      	b.n	8005f54 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e0fa      	b.n	800614a <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b0c      	cmp	r3, #12
 8005f58:	f200 80ae 	bhi.w	80060b8 <HAL_TIM_PWM_Start_DMA+0x290>
 8005f5c:	a201      	add	r2, pc, #4	; (adr r2, 8005f64 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f62:	bf00      	nop
 8005f64:	08005f99 	.word	0x08005f99
 8005f68:	080060b9 	.word	0x080060b9
 8005f6c:	080060b9 	.word	0x080060b9
 8005f70:	080060b9 	.word	0x080060b9
 8005f74:	08005fe1 	.word	0x08005fe1
 8005f78:	080060b9 	.word	0x080060b9
 8005f7c:	080060b9 	.word	0x080060b9
 8005f80:	080060b9 	.word	0x080060b9
 8005f84:	08006029 	.word	0x08006029
 8005f88:	080060b9 	.word	0x080060b9
 8005f8c:	080060b9 	.word	0x080060b9
 8005f90:	080060b9 	.word	0x080060b9
 8005f94:	08006071 	.word	0x08006071
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	4a6d      	ldr	r2, [pc, #436]	; (8006154 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005f9e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa4:	4a6c      	ldr	r2, [pc, #432]	; (8006158 <HAL_TIM_PWM_Start_DMA+0x330>)
 8005fa6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fac:	4a6b      	ldr	r2, [pc, #428]	; (800615c <HAL_TIM_PWM_Start_DMA+0x334>)
 8005fae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3334      	adds	r3, #52	; 0x34
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	887b      	ldrh	r3, [r7, #2]
 8005fc0:	f7fc fd14 	bl	80029ec <HAL_DMA_Start_IT>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e0bd      	b.n	800614a <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fdc:	60da      	str	r2, [r3, #12]
      break;
 8005fde:	e06e      	b.n	80060be <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe4:	4a5b      	ldr	r2, [pc, #364]	; (8006154 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005fe6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	4a5a      	ldr	r2, [pc, #360]	; (8006158 <HAL_TIM_PWM_Start_DMA+0x330>)
 8005fee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff4:	4a59      	ldr	r2, [pc, #356]	; (800615c <HAL_TIM_PWM_Start_DMA+0x334>)
 8005ff6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005ffc:	6879      	ldr	r1, [r7, #4]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3338      	adds	r3, #56	; 0x38
 8006004:	461a      	mov	r2, r3
 8006006:	887b      	ldrh	r3, [r7, #2]
 8006008:	f7fc fcf0 	bl	80029ec <HAL_DMA_Start_IT>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e099      	b.n	800614a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006024:	60da      	str	r2, [r3, #12]
      break;
 8006026:	e04a      	b.n	80060be <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	4a49      	ldr	r2, [pc, #292]	; (8006154 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800602e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	4a48      	ldr	r2, [pc, #288]	; (8006158 <HAL_TIM_PWM_Start_DMA+0x330>)
 8006036:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	4a47      	ldr	r2, [pc, #284]	; (800615c <HAL_TIM_PWM_Start_DMA+0x334>)
 800603e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	333c      	adds	r3, #60	; 0x3c
 800604c:	461a      	mov	r2, r3
 800604e:	887b      	ldrh	r3, [r7, #2]
 8006050:	f7fc fccc 	bl	80029ec <HAL_DMA_Start_IT>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e075      	b.n	800614a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800606c:	60da      	str	r2, [r3, #12]
      break;
 800606e:	e026      	b.n	80060be <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006074:	4a37      	ldr	r2, [pc, #220]	; (8006154 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8006076:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607c:	4a36      	ldr	r2, [pc, #216]	; (8006158 <HAL_TIM_PWM_Start_DMA+0x330>)
 800607e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006084:	4a35      	ldr	r2, [pc, #212]	; (800615c <HAL_TIM_PWM_Start_DMA+0x334>)
 8006086:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3340      	adds	r3, #64	; 0x40
 8006094:	461a      	mov	r2, r3
 8006096:	887b      	ldrh	r3, [r7, #2]
 8006098:	f7fc fca8 	bl	80029ec <HAL_DMA_Start_IT>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e051      	b.n	800614a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060b4:	60da      	str	r2, [r3, #12]
      break;
 80060b6:	e002      	b.n	80060be <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	75fb      	strb	r3, [r7, #23]
      break;
 80060bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80060be:	7dfb      	ldrb	r3, [r7, #23]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d141      	bne.n	8006148 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2201      	movs	r2, #1
 80060ca:	68b9      	ldr	r1, [r7, #8]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 ff2f 	bl	8006f30 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a22      	ldr	r2, [pc, #136]	; (8006160 <HAL_TIM_PWM_Start_DMA+0x338>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d107      	bne.n	80060ec <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060ea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a1b      	ldr	r2, [pc, #108]	; (8006160 <HAL_TIM_PWM_Start_DMA+0x338>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d00e      	beq.n	8006114 <HAL_TIM_PWM_Start_DMA+0x2ec>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060fe:	d009      	beq.n	8006114 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a17      	ldr	r2, [pc, #92]	; (8006164 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d004      	beq.n	8006114 <HAL_TIM_PWM_Start_DMA+0x2ec>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a16      	ldr	r2, [pc, #88]	; (8006168 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d111      	bne.n	8006138 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 0307 	and.w	r3, r3, #7
 800611e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	2b06      	cmp	r3, #6
 8006124:	d010      	beq.n	8006148 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f042 0201 	orr.w	r2, r2, #1
 8006134:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006136:	e007      	b.n	8006148 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f042 0201 	orr.w	r2, r2, #1
 8006146:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006148:	7dfb      	ldrb	r3, [r7, #23]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3718      	adds	r7, #24
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	08006921 	.word	0x08006921
 8006158:	080069c9 	.word	0x080069c9
 800615c:	0800688f 	.word	0x0800688f
 8006160:	40012c00 	.word	0x40012c00
 8006164:	40000400 	.word	0x40000400
 8006168:	40000800 	.word	0x40000800

0800616c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b0c      	cmp	r3, #12
 800617e:	d855      	bhi.n	800622c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006180:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006186:	bf00      	nop
 8006188:	080061bd 	.word	0x080061bd
 800618c:	0800622d 	.word	0x0800622d
 8006190:	0800622d 	.word	0x0800622d
 8006194:	0800622d 	.word	0x0800622d
 8006198:	080061d9 	.word	0x080061d9
 800619c:	0800622d 	.word	0x0800622d
 80061a0:	0800622d 	.word	0x0800622d
 80061a4:	0800622d 	.word	0x0800622d
 80061a8:	080061f5 	.word	0x080061f5
 80061ac:	0800622d 	.word	0x0800622d
 80061b0:	0800622d 	.word	0x0800622d
 80061b4:	0800622d 	.word	0x0800622d
 80061b8:	08006211 	.word	0x08006211
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68da      	ldr	r2, [r3, #12]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80061ca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7fc fca7 	bl	8002b24 <HAL_DMA_Abort_IT>
      break;
 80061d6:	e02c      	b.n	8006232 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68da      	ldr	r2, [r3, #12]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fc fc99 	bl	8002b24 <HAL_DMA_Abort_IT>
      break;
 80061f2:	e01e      	b.n	8006232 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006202:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	4618      	mov	r0, r3
 800620a:	f7fc fc8b 	bl	8002b24 <HAL_DMA_Abort_IT>
      break;
 800620e:	e010      	b.n	8006232 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68da      	ldr	r2, [r3, #12]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800621e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006224:	4618      	mov	r0, r3
 8006226:	f7fc fc7d 	bl	8002b24 <HAL_DMA_Abort_IT>
      break;
 800622a:	e002      	b.n	8006232 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	73fb      	strb	r3, [r7, #15]
      break;
 8006230:	bf00      	nop
  }

  if (status == HAL_OK)
 8006232:	7bfb      	ldrb	r3, [r7, #15]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d157      	bne.n	80062e8 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2200      	movs	r2, #0
 800623e:	6839      	ldr	r1, [r7, #0]
 8006240:	4618      	mov	r0, r3
 8006242:	f000 fe75 	bl	8006f30 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a2a      	ldr	r2, [pc, #168]	; (80062f4 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d117      	bne.n	8006280 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6a1a      	ldr	r2, [r3, #32]
 8006256:	f241 1311 	movw	r3, #4369	; 0x1111
 800625a:	4013      	ands	r3, r2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10f      	bne.n	8006280 <HAL_TIM_PWM_Stop_DMA+0x114>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6a1a      	ldr	r2, [r3, #32]
 8006266:	f240 4344 	movw	r3, #1092	; 0x444
 800626a:	4013      	ands	r3, r2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d107      	bne.n	8006280 <HAL_TIM_PWM_Stop_DMA+0x114>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800627e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6a1a      	ldr	r2, [r3, #32]
 8006286:	f241 1311 	movw	r3, #4369	; 0x1111
 800628a:	4013      	ands	r3, r2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10f      	bne.n	80062b0 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6a1a      	ldr	r2, [r3, #32]
 8006296:	f240 4344 	movw	r3, #1092	; 0x444
 800629a:	4013      	ands	r3, r2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d107      	bne.n	80062b0 <HAL_TIM_PWM_Stop_DMA+0x144>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0201 	bic.w	r2, r2, #1
 80062ae:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d104      	bne.n	80062c0 <HAL_TIM_PWM_Stop_DMA+0x154>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062be:	e013      	b.n	80062e8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d104      	bne.n	80062d0 <HAL_TIM_PWM_Stop_DMA+0x164>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062ce:	e00b      	b.n	80062e8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b08      	cmp	r3, #8
 80062d4:	d104      	bne.n	80062e0 <HAL_TIM_PWM_Stop_DMA+0x174>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062de:	e003      	b.n	80062e8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	40012c00 	.word	0x40012c00

080062f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b02      	cmp	r3, #2
 800630c:	d122      	bne.n	8006354 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b02      	cmp	r3, #2
 800631a:	d11b      	bne.n	8006354 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f06f 0202 	mvn.w	r2, #2
 8006324:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	f003 0303 	and.w	r3, r3, #3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fa76 	bl	800682c <HAL_TIM_IC_CaptureCallback>
 8006340:	e005      	b.n	800634e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fa69 	bl	800681a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f7fb f889 	bl	8001460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f003 0304 	and.w	r3, r3, #4
 800635e:	2b04      	cmp	r3, #4
 8006360:	d122      	bne.n	80063a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f003 0304 	and.w	r3, r3, #4
 800636c:	2b04      	cmp	r3, #4
 800636e:	d11b      	bne.n	80063a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f06f 0204 	mvn.w	r2, #4
 8006378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2202      	movs	r2, #2
 800637e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fa4c 	bl	800682c <HAL_TIM_IC_CaptureCallback>
 8006394:	e005      	b.n	80063a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fa3f 	bl	800681a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7fb f85f 	bl	8001460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	f003 0308 	and.w	r3, r3, #8
 80063b2:	2b08      	cmp	r3, #8
 80063b4:	d122      	bne.n	80063fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f003 0308 	and.w	r3, r3, #8
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	d11b      	bne.n	80063fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f06f 0208 	mvn.w	r2, #8
 80063cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2204      	movs	r2, #4
 80063d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	f003 0303 	and.w	r3, r3, #3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fa22 	bl	800682c <HAL_TIM_IC_CaptureCallback>
 80063e8:	e005      	b.n	80063f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fa15 	bl	800681a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7fb f835 	bl	8001460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f003 0310 	and.w	r3, r3, #16
 8006406:	2b10      	cmp	r3, #16
 8006408:	d122      	bne.n	8006450 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f003 0310 	and.w	r3, r3, #16
 8006414:	2b10      	cmp	r3, #16
 8006416:	d11b      	bne.n	8006450 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f06f 0210 	mvn.w	r2, #16
 8006420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2208      	movs	r2, #8
 8006426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f9f8 	bl	800682c <HAL_TIM_IC_CaptureCallback>
 800643c:	e005      	b.n	800644a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f9eb 	bl	800681a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7fb f80b 	bl	8001460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b01      	cmp	r3, #1
 800645c:	d10e      	bne.n	800647c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	2b01      	cmp	r3, #1
 800646a:	d107      	bne.n	800647c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f06f 0201 	mvn.w	r2, #1
 8006474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7fb fb52 	bl	8001b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006486:	2b80      	cmp	r3, #128	; 0x80
 8006488:	d10e      	bne.n	80064a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006494:	2b80      	cmp	r3, #128	; 0x80
 8006496:	d107      	bne.n	80064a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fe20 	bl	80070e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b2:	2b40      	cmp	r3, #64	; 0x40
 80064b4:	d10e      	bne.n	80064d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c0:	2b40      	cmp	r3, #64	; 0x40
 80064c2:	d107      	bne.n	80064d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f9be 	bl	8006850 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f003 0320 	and.w	r3, r3, #32
 80064de:	2b20      	cmp	r3, #32
 80064e0:	d10e      	bne.n	8006500 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f003 0320 	and.w	r3, r3, #32
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	d107      	bne.n	8006500 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f06f 0220 	mvn.w	r2, #32
 80064f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fdeb 	bl	80070d6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006500:	bf00      	nop
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006514:	2300      	movs	r3, #0
 8006516:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800651e:	2b01      	cmp	r3, #1
 8006520:	d101      	bne.n	8006526 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006522:	2302      	movs	r3, #2
 8006524:	e0ae      	b.n	8006684 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b0c      	cmp	r3, #12
 8006532:	f200 809f 	bhi.w	8006674 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006536:	a201      	add	r2, pc, #4	; (adr r2, 800653c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653c:	08006571 	.word	0x08006571
 8006540:	08006675 	.word	0x08006675
 8006544:	08006675 	.word	0x08006675
 8006548:	08006675 	.word	0x08006675
 800654c:	080065b1 	.word	0x080065b1
 8006550:	08006675 	.word	0x08006675
 8006554:	08006675 	.word	0x08006675
 8006558:	08006675 	.word	0x08006675
 800655c:	080065f3 	.word	0x080065f3
 8006560:	08006675 	.word	0x08006675
 8006564:	08006675 	.word	0x08006675
 8006568:	08006675 	.word	0x08006675
 800656c:	08006633 	.word	0x08006633
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68b9      	ldr	r1, [r7, #8]
 8006576:	4618      	mov	r0, r3
 8006578:	f000 fabc 	bl	8006af4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699a      	ldr	r2, [r3, #24]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0208 	orr.w	r2, r2, #8
 800658a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 0204 	bic.w	r2, r2, #4
 800659a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6999      	ldr	r1, [r3, #24]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	691a      	ldr	r2, [r3, #16]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	619a      	str	r2, [r3, #24]
      break;
 80065ae:	e064      	b.n	800667a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68b9      	ldr	r1, [r7, #8]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 fb02 	bl	8006bc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	699a      	ldr	r2, [r3, #24]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6999      	ldr	r1, [r3, #24]
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	021a      	lsls	r2, r3, #8
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	430a      	orrs	r2, r1
 80065ee:	619a      	str	r2, [r3, #24]
      break;
 80065f0:	e043      	b.n	800667a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68b9      	ldr	r1, [r7, #8]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 fb4b 	bl	8006c94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69da      	ldr	r2, [r3, #28]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0208 	orr.w	r2, r2, #8
 800660c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69da      	ldr	r2, [r3, #28]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0204 	bic.w	r2, r2, #4
 800661c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	69d9      	ldr	r1, [r3, #28]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	691a      	ldr	r2, [r3, #16]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	61da      	str	r2, [r3, #28]
      break;
 8006630:	e023      	b.n	800667a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68b9      	ldr	r1, [r7, #8]
 8006638:	4618      	mov	r0, r3
 800663a:	f000 fb95 	bl	8006d68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69da      	ldr	r2, [r3, #28]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800664c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69da      	ldr	r2, [r3, #28]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800665c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	69d9      	ldr	r1, [r3, #28]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	021a      	lsls	r2, r3, #8
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	61da      	str	r2, [r3, #28]
      break;
 8006672:	e002      	b.n	800667a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	75fb      	strb	r3, [r7, #23]
      break;
 8006678:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006682:	7dfb      	ldrb	r3, [r7, #23]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d101      	bne.n	80066a8 <HAL_TIM_ConfigClockSource+0x1c>
 80066a4:	2302      	movs	r3, #2
 80066a6:	e0b4      	b.n	8006812 <HAL_TIM_ConfigClockSource+0x186>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066e0:	d03e      	beq.n	8006760 <HAL_TIM_ConfigClockSource+0xd4>
 80066e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066e6:	f200 8087 	bhi.w	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 80066ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ee:	f000 8086 	beq.w	80067fe <HAL_TIM_ConfigClockSource+0x172>
 80066f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066f6:	d87f      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 80066f8:	2b70      	cmp	r3, #112	; 0x70
 80066fa:	d01a      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0xa6>
 80066fc:	2b70      	cmp	r3, #112	; 0x70
 80066fe:	d87b      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006700:	2b60      	cmp	r3, #96	; 0x60
 8006702:	d050      	beq.n	80067a6 <HAL_TIM_ConfigClockSource+0x11a>
 8006704:	2b60      	cmp	r3, #96	; 0x60
 8006706:	d877      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006708:	2b50      	cmp	r3, #80	; 0x50
 800670a:	d03c      	beq.n	8006786 <HAL_TIM_ConfigClockSource+0xfa>
 800670c:	2b50      	cmp	r3, #80	; 0x50
 800670e:	d873      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006710:	2b40      	cmp	r3, #64	; 0x40
 8006712:	d058      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0x13a>
 8006714:	2b40      	cmp	r3, #64	; 0x40
 8006716:	d86f      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006718:	2b30      	cmp	r3, #48	; 0x30
 800671a:	d064      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x15a>
 800671c:	2b30      	cmp	r3, #48	; 0x30
 800671e:	d86b      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006720:	2b20      	cmp	r3, #32
 8006722:	d060      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x15a>
 8006724:	2b20      	cmp	r3, #32
 8006726:	d867      	bhi.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006728:	2b00      	cmp	r3, #0
 800672a:	d05c      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x15a>
 800672c:	2b10      	cmp	r3, #16
 800672e:	d05a      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x15a>
 8006730:	e062      	b.n	80067f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6818      	ldr	r0, [r3, #0]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	6899      	ldr	r1, [r3, #8]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f000 fbd6 	bl	8006ef2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006754:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	609a      	str	r2, [r3, #8]
      break;
 800675e:	e04f      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6818      	ldr	r0, [r3, #0]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	6899      	ldr	r1, [r3, #8]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f000 fbbf 	bl	8006ef2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006782:	609a      	str	r2, [r3, #8]
      break;
 8006784:	e03c      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	6859      	ldr	r1, [r3, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	461a      	mov	r2, r3
 8006794:	f000 fb36 	bl	8006e04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2150      	movs	r1, #80	; 0x50
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 fb8d 	bl	8006ebe <TIM_ITRx_SetConfig>
      break;
 80067a4:	e02c      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6818      	ldr	r0, [r3, #0]
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	6859      	ldr	r1, [r3, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	461a      	mov	r2, r3
 80067b4:	f000 fb54 	bl	8006e60 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2160      	movs	r1, #96	; 0x60
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fb7d 	bl	8006ebe <TIM_ITRx_SetConfig>
      break;
 80067c4:	e01c      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	6859      	ldr	r1, [r3, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	461a      	mov	r2, r3
 80067d4:	f000 fb16 	bl	8006e04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2140      	movs	r1, #64	; 0x40
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 fb6d 	bl	8006ebe <TIM_ITRx_SetConfig>
      break;
 80067e4:	e00c      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4619      	mov	r1, r3
 80067f0:	4610      	mov	r0, r2
 80067f2:	f000 fb64 	bl	8006ebe <TIM_ITRx_SetConfig>
      break;
 80067f6:	e003      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	73fb      	strb	r3, [r7, #15]
      break;
 80067fc:	e000      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006810:	7bfb      	ldrb	r3, [r7, #15]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr

0800682c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	bc80      	pop	{r7}
 800683c:	4770      	bx	lr

0800683e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800683e:	b480      	push	{r7}
 8006840:	b083      	sub	sp, #12
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006846:	bf00      	nop
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	bc80      	pop	{r7}
 800684e:	4770      	bx	lr

08006850 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	bc80      	pop	{r7}
 8006860:	4770      	bx	lr

08006862 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	bc80      	pop	{r7}
 8006872:	4770      	bx	lr

08006874 <HAL_TIM_PWM_GetState>:
  * @brief  Return the TIM PWM handle state.
  * @param  htim TIM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(const TIM_HandleTypeDef *htim)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  return htim->State;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006882:	b2db      	uxtb	r3, r3
}
 8006884:	4618      	mov	r0, r3
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	bc80      	pop	{r7}
 800688c:	4770      	bx	lr

0800688e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b084      	sub	sp, #16
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d107      	bne.n	80068b6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2201      	movs	r2, #1
 80068aa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068b4:	e02a      	b.n	800690c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d107      	bne.n	80068d0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2202      	movs	r2, #2
 80068c4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068ce:	e01d      	b.n	800690c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d107      	bne.n	80068ea <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2204      	movs	r2, #4
 80068de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068e8:	e010      	b.n	800690c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d107      	bne.n	8006904 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2208      	movs	r2, #8
 80068f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006902:	e003      	b.n	800690c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f7ff ffa8 	bl	8006862 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	771a      	strb	r2, [r3, #28]
}
 8006918:	bf00      	nop
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	429a      	cmp	r2, r3
 8006936:	d10b      	bne.n	8006950 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2201      	movs	r2, #1
 800693c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d136      	bne.n	80069b4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800694e:	e031      	b.n	80069b4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	429a      	cmp	r2, r3
 8006958:	d10b      	bne.n	8006972 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2202      	movs	r2, #2
 800695e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d125      	bne.n	80069b4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006970:	e020      	b.n	80069b4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	429a      	cmp	r2, r3
 800697a:	d10b      	bne.n	8006994 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2204      	movs	r2, #4
 8006980:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d114      	bne.n	80069b4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006992:	e00f      	b.n	80069b4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	429a      	cmp	r2, r3
 800699c:	d10a      	bne.n	80069b4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2208      	movs	r2, #8
 80069a2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d103      	bne.n	80069b4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f7fa fd53 	bl	8001460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	771a      	strb	r2, [r3, #28]
}
 80069c0:	bf00      	nop
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d103      	bne.n	80069e8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	771a      	strb	r2, [r3, #28]
 80069e6:	e019      	b.n	8006a1c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d103      	bne.n	80069fa <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2202      	movs	r2, #2
 80069f6:	771a      	strb	r2, [r3, #28]
 80069f8:	e010      	b.n	8006a1c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d103      	bne.n	8006a0c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2204      	movs	r2, #4
 8006a08:	771a      	strb	r2, [r3, #28]
 8006a0a:	e007      	b.n	8006a1c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d102      	bne.n	8006a1c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2208      	movs	r2, #8
 8006a1a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f7ff ff0e 	bl	800683e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	771a      	strb	r2, [r3, #28]
}
 8006a28:	bf00      	nop
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a29      	ldr	r2, [pc, #164]	; (8006ae8 <TIM_Base_SetConfig+0xb8>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d00b      	beq.n	8006a60 <TIM_Base_SetConfig+0x30>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a4e:	d007      	beq.n	8006a60 <TIM_Base_SetConfig+0x30>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a26      	ldr	r2, [pc, #152]	; (8006aec <TIM_Base_SetConfig+0xbc>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d003      	beq.n	8006a60 <TIM_Base_SetConfig+0x30>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a25      	ldr	r2, [pc, #148]	; (8006af0 <TIM_Base_SetConfig+0xc0>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d108      	bne.n	8006a72 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a1c      	ldr	r2, [pc, #112]	; (8006ae8 <TIM_Base_SetConfig+0xb8>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d00b      	beq.n	8006a92 <TIM_Base_SetConfig+0x62>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a80:	d007      	beq.n	8006a92 <TIM_Base_SetConfig+0x62>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a19      	ldr	r2, [pc, #100]	; (8006aec <TIM_Base_SetConfig+0xbc>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d003      	beq.n	8006a92 <TIM_Base_SetConfig+0x62>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a18      	ldr	r2, [pc, #96]	; (8006af0 <TIM_Base_SetConfig+0xc0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d108      	bne.n	8006aa4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a07      	ldr	r2, [pc, #28]	; (8006ae8 <TIM_Base_SetConfig+0xb8>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d103      	bne.n	8006ad8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	691a      	ldr	r2, [r3, #16]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	615a      	str	r2, [r3, #20]
}
 8006ade:	bf00      	nop
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bc80      	pop	{r7}
 8006ae6:	4770      	bx	lr
 8006ae8:	40012c00 	.word	0x40012c00
 8006aec:	40000400 	.word	0x40000400
 8006af0:	40000800 	.word	0x40000800

08006af4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b087      	sub	sp, #28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	f023 0201 	bic.w	r2, r3, #1
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 0303 	bic.w	r3, r3, #3
 8006b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f023 0302 	bic.w	r3, r3, #2
 8006b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a1c      	ldr	r2, [pc, #112]	; (8006bbc <TIM_OC1_SetConfig+0xc8>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d10c      	bne.n	8006b6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f023 0308 	bic.w	r3, r3, #8
 8006b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f023 0304 	bic.w	r3, r3, #4
 8006b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a13      	ldr	r2, [pc, #76]	; (8006bbc <TIM_OC1_SetConfig+0xc8>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d111      	bne.n	8006b96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	621a      	str	r2, [r3, #32]
}
 8006bb0:	bf00      	nop
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bc80      	pop	{r7}
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	40012c00 	.word	0x40012c00

08006bc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	f023 0210 	bic.w	r2, r3, #16
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	021b      	lsls	r3, r3, #8
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f023 0320 	bic.w	r3, r3, #32
 8006c0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	011b      	lsls	r3, r3, #4
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a1d      	ldr	r2, [pc, #116]	; (8006c90 <TIM_OC2_SetConfig+0xd0>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d10d      	bne.n	8006c3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	011b      	lsls	r3, r3, #4
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a14      	ldr	r2, [pc, #80]	; (8006c90 <TIM_OC2_SetConfig+0xd0>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d113      	bne.n	8006c6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	621a      	str	r2, [r3, #32]
}
 8006c86:	bf00      	nop
 8006c88:	371c      	adds	r7, #28
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bc80      	pop	{r7}
 8006c8e:	4770      	bx	lr
 8006c90:	40012c00 	.word	0x40012c00

08006c94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 0303 	bic.w	r3, r3, #3
 8006cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	021b      	lsls	r3, r3, #8
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a1d      	ldr	r2, [pc, #116]	; (8006d64 <TIM_OC3_SetConfig+0xd0>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d10d      	bne.n	8006d0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	021b      	lsls	r3, r3, #8
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a14      	ldr	r2, [pc, #80]	; (8006d64 <TIM_OC3_SetConfig+0xd0>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d113      	bne.n	8006d3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	011b      	lsls	r3, r3, #4
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	621a      	str	r2, [r3, #32]
}
 8006d58:	bf00      	nop
 8006d5a:	371c      	adds	r7, #28
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bc80      	pop	{r7}
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40012c00 	.word	0x40012c00

08006d68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	021b      	lsls	r3, r3, #8
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006db2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	031b      	lsls	r3, r3, #12
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a0f      	ldr	r2, [pc, #60]	; (8006e00 <TIM_OC4_SetConfig+0x98>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d109      	bne.n	8006ddc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	019b      	lsls	r3, r3, #6
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	621a      	str	r2, [r3, #32]
}
 8006df6:	bf00      	nop
 8006df8:	371c      	adds	r7, #28
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bc80      	pop	{r7}
 8006dfe:	4770      	bx	lr
 8006e00:	40012c00 	.word	0x40012c00

08006e04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	f023 0201 	bic.w	r2, r3, #1
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	011b      	lsls	r3, r3, #4
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f023 030a 	bic.w	r3, r3, #10
 8006e40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	621a      	str	r2, [r3, #32]
}
 8006e56:	bf00      	nop
 8006e58:	371c      	adds	r7, #28
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bc80      	pop	{r7}
 8006e5e:	4770      	bx	lr

08006e60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	f023 0210 	bic.w	r2, r3, #16
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	031b      	lsls	r3, r3, #12
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	011b      	lsls	r3, r3, #4
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	621a      	str	r2, [r3, #32]
}
 8006eb4:	bf00      	nop
 8006eb6:	371c      	adds	r7, #28
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bc80      	pop	{r7}
 8006ebc:	4770      	bx	lr

08006ebe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b085      	sub	sp, #20
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	f043 0307 	orr.w	r3, r3, #7
 8006ee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	609a      	str	r2, [r3, #8]
}
 8006ee8:	bf00      	nop
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bc80      	pop	{r7}
 8006ef0:	4770      	bx	lr

08006ef2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b087      	sub	sp, #28
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	607a      	str	r2, [r7, #4]
 8006efe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	021a      	lsls	r2, r3, #8
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	431a      	orrs	r2, r3
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	609a      	str	r2, [r3, #8]
}
 8006f26:	bf00      	nop
 8006f28:	371c      	adds	r7, #28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bc80      	pop	{r7}
 8006f2e:	4770      	bx	lr

08006f30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f003 031f 	and.w	r3, r3, #31
 8006f42:	2201      	movs	r2, #1
 8006f44:	fa02 f303 	lsl.w	r3, r2, r3
 8006f48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6a1a      	ldr	r2, [r3, #32]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	43db      	mvns	r3, r3
 8006f52:	401a      	ands	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6a1a      	ldr	r2, [r3, #32]
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f003 031f 	and.w	r3, r3, #31
 8006f62:	6879      	ldr	r1, [r7, #4]
 8006f64:	fa01 f303 	lsl.w	r3, r1, r3
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	621a      	str	r2, [r3, #32]
}
 8006f6e:	bf00      	nop
 8006f70:	371c      	adds	r7, #28
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bc80      	pop	{r7}
 8006f76:	4770      	bx	lr

08006f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d101      	bne.n	8006f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	e046      	b.n	800701e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a16      	ldr	r2, [pc, #88]	; (8007028 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d00e      	beq.n	8006ff2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fdc:	d009      	beq.n	8006ff2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a12      	ldr	r2, [pc, #72]	; (800702c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d004      	beq.n	8006ff2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a10      	ldr	r2, [pc, #64]	; (8007030 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d10c      	bne.n	800700c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	4313      	orrs	r3, r2
 8007002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	bc80      	pop	{r7}
 8007026:	4770      	bx	lr
 8007028:	40012c00 	.word	0x40012c00
 800702c:	40000400 	.word	0x40000400
 8007030:	40000800 	.word	0x40000800

08007034 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007048:	2b01      	cmp	r3, #1
 800704a:	d101      	bne.n	8007050 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800704c:	2302      	movs	r3, #2
 800704e:	e03d      	b.n	80070cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	4313      	orrs	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	4313      	orrs	r3, r2
 8007072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	4313      	orrs	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4313      	orrs	r3, r2
 800708e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bc80      	pop	{r7}
 80070d4:	4770      	bx	lr

080070d6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b083      	sub	sp, #12
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070de:	bf00      	nop
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bc80      	pop	{r7}
 80070e6:	4770      	bx	lr

080070e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bc80      	pop	{r7}
 80070f8:	4770      	bx	lr

080070fa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b082      	sub	sp, #8
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d101      	bne.n	800710c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e042      	b.n	8007192 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	d106      	bne.n	8007126 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7fa fe8d 	bl	8001e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2224      	movs	r2, #36	; 0x24
 800712a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68da      	ldr	r2, [r3, #12]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800713c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fdc6 	bl	8007cd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	691a      	ldr	r2, [r3, #16]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007152:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	695a      	ldr	r2, [r3, #20]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007162:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68da      	ldr	r2, [r3, #12]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007172:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2220      	movs	r2, #32
 800717e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2220      	movs	r2, #32
 8007186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b08a      	sub	sp, #40	; 0x28
 800719e:	af02      	add	r7, sp, #8
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	603b      	str	r3, [r7, #0]
 80071a6:	4613      	mov	r3, r2
 80071a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b20      	cmp	r3, #32
 80071b8:	d16d      	bne.n	8007296 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <HAL_UART_Transmit+0x2c>
 80071c0:	88fb      	ldrh	r3, [r7, #6]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e066      	b.n	8007298 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2221      	movs	r2, #33	; 0x21
 80071d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071d8:	f7fb f860 	bl	800229c <HAL_GetTick>
 80071dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	88fa      	ldrh	r2, [r7, #6]
 80071e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	88fa      	ldrh	r2, [r7, #6]
 80071e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071f2:	d108      	bne.n	8007206 <HAL_UART_Transmit+0x6c>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d104      	bne.n	8007206 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80071fc:	2300      	movs	r3, #0
 80071fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	61bb      	str	r3, [r7, #24]
 8007204:	e003      	b.n	800720e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800720a:	2300      	movs	r3, #0
 800720c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800720e:	e02a      	b.n	8007266 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2200      	movs	r2, #0
 8007218:	2180      	movs	r1, #128	; 0x80
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 fb15 	bl	800784a <UART_WaitOnFlagUntilTimeout>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e036      	b.n	8007298 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10b      	bne.n	8007248 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	461a      	mov	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800723e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	3302      	adds	r3, #2
 8007244:	61bb      	str	r3, [r7, #24]
 8007246:	e007      	b.n	8007258 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	781a      	ldrb	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	3301      	adds	r3, #1
 8007256:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800725c:	b29b      	uxth	r3, r3
 800725e:	3b01      	subs	r3, #1
 8007260:	b29a      	uxth	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800726a:	b29b      	uxth	r3, r3
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1cf      	bne.n	8007210 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	2200      	movs	r2, #0
 8007278:	2140      	movs	r1, #64	; 0x40
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 fae5 	bl	800784a <UART_WaitOnFlagUntilTimeout>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e006      	b.n	8007298 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2220      	movs	r2, #32
 800728e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	e000      	b.n	8007298 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007296:	2302      	movs	r3, #2
  }
}
 8007298:	4618      	mov	r0, r3
 800729a:	3720      	adds	r7, #32
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	4613      	mov	r3, r2
 80072ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b20      	cmp	r3, #32
 80072b8:	d112      	bne.n	80072e0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <HAL_UART_Receive_IT+0x26>
 80072c0:	88fb      	ldrh	r3, [r7, #6]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e00b      	b.n	80072e2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80072d0:	88fb      	ldrh	r3, [r7, #6]
 80072d2:	461a      	mov	r2, r3
 80072d4:	68b9      	ldr	r1, [r7, #8]
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 fb25 	bl	8007926 <UART_Start_Receive_IT>
 80072dc:	4603      	mov	r3, r0
 80072de:	e000      	b.n	80072e2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80072e0:	2302      	movs	r3, #2
  }
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b0ba      	sub	sp, #232	; 0xe8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	695b      	ldr	r3, [r3, #20]
 800730e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007312:	2300      	movs	r3, #0
 8007314:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007318:	2300      	movs	r3, #0
 800731a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800731e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007322:	f003 030f 	and.w	r3, r3, #15
 8007326:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800732a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10f      	bne.n	8007352 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007336:	f003 0320 	and.w	r3, r3, #32
 800733a:	2b00      	cmp	r3, #0
 800733c:	d009      	beq.n	8007352 <HAL_UART_IRQHandler+0x66>
 800733e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007342:	f003 0320 	and.w	r3, r3, #32
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fc01 	bl	8007b52 <UART_Receive_IT>
      return;
 8007350:	e25b      	b.n	800780a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007352:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 80de 	beq.w	8007518 <HAL_UART_IRQHandler+0x22c>
 800735c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	d106      	bne.n	8007376 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800736c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 80d1 	beq.w	8007518 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00b      	beq.n	800739a <HAL_UART_IRQHandler+0xae>
 8007382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800738a:	2b00      	cmp	r3, #0
 800738c:	d005      	beq.n	800739a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007392:	f043 0201 	orr.w	r2, r3, #1
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800739a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800739e:	f003 0304 	and.w	r3, r3, #4
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00b      	beq.n	80073be <HAL_UART_IRQHandler+0xd2>
 80073a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d005      	beq.n	80073be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b6:	f043 0202 	orr.w	r2, r3, #2
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073c2:	f003 0302 	and.w	r3, r3, #2
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00b      	beq.n	80073e2 <HAL_UART_IRQHandler+0xf6>
 80073ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d005      	beq.n	80073e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073da:	f043 0204 	orr.w	r2, r3, #4
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80073e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e6:	f003 0308 	and.w	r3, r3, #8
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d011      	beq.n	8007412 <HAL_UART_IRQHandler+0x126>
 80073ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073f2:	f003 0320 	and.w	r3, r3, #32
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d105      	bne.n	8007406 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80073fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	2b00      	cmp	r3, #0
 8007404:	d005      	beq.n	8007412 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740a:	f043 0208 	orr.w	r2, r3, #8
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007416:	2b00      	cmp	r3, #0
 8007418:	f000 81f2 	beq.w	8007800 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800741c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007420:	f003 0320 	and.w	r3, r3, #32
 8007424:	2b00      	cmp	r3, #0
 8007426:	d008      	beq.n	800743a <HAL_UART_IRQHandler+0x14e>
 8007428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800742c:	f003 0320 	and.w	r3, r3, #32
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fb8c 	bl	8007b52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007444:	2b00      	cmp	r3, #0
 8007446:	bf14      	ite	ne
 8007448:	2301      	movne	r3, #1
 800744a:	2300      	moveq	r3, #0
 800744c:	b2db      	uxtb	r3, r3
 800744e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007456:	f003 0308 	and.w	r3, r3, #8
 800745a:	2b00      	cmp	r3, #0
 800745c:	d103      	bne.n	8007466 <HAL_UART_IRQHandler+0x17a>
 800745e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007462:	2b00      	cmp	r3, #0
 8007464:	d04f      	beq.n	8007506 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fa96 	bl	8007998 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007476:	2b00      	cmp	r3, #0
 8007478:	d041      	beq.n	80074fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	3314      	adds	r3, #20
 8007480:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007484:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007488:	e853 3f00 	ldrex	r3, [r3]
 800748c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007490:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007494:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007498:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	3314      	adds	r3, #20
 80074a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80074a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80074aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074b6:	e841 2300 	strex	r3, r2, [r1]
 80074ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80074be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1d9      	bne.n	800747a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d013      	beq.n	80074f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d2:	4a7e      	ldr	r2, [pc, #504]	; (80076cc <HAL_UART_IRQHandler+0x3e0>)
 80074d4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fb fb22 	bl	8002b24 <HAL_DMA_Abort_IT>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d016      	beq.n	8007514 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80074f0:	4610      	mov	r0, r2
 80074f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074f4:	e00e      	b.n	8007514 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f993 	bl	8007822 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074fc:	e00a      	b.n	8007514 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f98f 	bl	8007822 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007504:	e006      	b.n	8007514 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f98b 	bl	8007822 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007512:	e175      	b.n	8007800 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007514:	bf00      	nop
    return;
 8007516:	e173      	b.n	8007800 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751c:	2b01      	cmp	r3, #1
 800751e:	f040 814f 	bne.w	80077c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007526:	f003 0310 	and.w	r3, r3, #16
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 8148 	beq.w	80077c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007534:	f003 0310 	and.w	r3, r3, #16
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 8141 	beq.w	80077c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800753e:	2300      	movs	r3, #0
 8007540:	60bb      	str	r3, [r7, #8]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	60bb      	str	r3, [r7, #8]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	60bb      	str	r3, [r7, #8]
 8007552:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 80b6 	beq.w	80076d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007570:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 8145 	beq.w	8007804 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800757e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007582:	429a      	cmp	r2, r3
 8007584:	f080 813e 	bcs.w	8007804 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800758e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	2b20      	cmp	r3, #32
 8007598:	f000 8088 	beq.w	80076ac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	330c      	adds	r3, #12
 80075a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075aa:	e853 3f00 	ldrex	r3, [r3]
 80075ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	330c      	adds	r3, #12
 80075c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80075c8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80075d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80075d8:	e841 2300 	strex	r3, r2, [r1]
 80075dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80075e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1d9      	bne.n	800759c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3314      	adds	r3, #20
 80075ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80075f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075fa:	f023 0301 	bic.w	r3, r3, #1
 80075fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	3314      	adds	r3, #20
 8007608:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800760c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007610:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007612:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007614:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007618:	e841 2300 	strex	r3, r2, [r1]
 800761c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800761e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1e1      	bne.n	80075e8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	3314      	adds	r3, #20
 800762a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800762e:	e853 3f00 	ldrex	r3, [r3]
 8007632:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800763a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3314      	adds	r3, #20
 8007644:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007648:	66fa      	str	r2, [r7, #108]	; 0x6c
 800764a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800764e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007650:	e841 2300 	strex	r3, r2, [r1]
 8007654:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007656:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1e3      	bne.n	8007624 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2220      	movs	r2, #32
 8007660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	330c      	adds	r3, #12
 8007670:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007674:	e853 3f00 	ldrex	r3, [r3]
 8007678:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800767a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800767c:	f023 0310 	bic.w	r3, r3, #16
 8007680:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	330c      	adds	r3, #12
 800768a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800768e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007690:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007694:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800769c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e3      	bne.n	800766a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fb fa00 	bl	8002aac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	b29b      	uxth	r3, r3
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f8b6 	bl	8007834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076c8:	e09c      	b.n	8007804 <HAL_UART_IRQHandler+0x518>
 80076ca:	bf00      	nop
 80076cc:	08007a5d 	.word	0x08007a5d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076d8:	b29b      	uxth	r3, r3
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 808e 	beq.w	8007808 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80076ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 8089 	beq.w	8007808 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	330c      	adds	r3, #12
 80076fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007700:	e853 3f00 	ldrex	r3, [r3]
 8007704:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007708:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800770c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	330c      	adds	r3, #12
 8007716:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800771a:	647a      	str	r2, [r7, #68]	; 0x44
 800771c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007720:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007722:	e841 2300 	strex	r3, r2, [r1]
 8007726:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e3      	bne.n	80076f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3314      	adds	r3, #20
 8007734:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	e853 3f00 	ldrex	r3, [r3]
 800773c:	623b      	str	r3, [r7, #32]
   return(result);
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	f023 0301 	bic.w	r3, r3, #1
 8007744:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	3314      	adds	r3, #20
 800774e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007752:	633a      	str	r2, [r7, #48]	; 0x30
 8007754:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800775a:	e841 2300 	strex	r3, r2, [r1]
 800775e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1e3      	bne.n	800772e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2220      	movs	r2, #32
 800776a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	330c      	adds	r3, #12
 800777a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	e853 3f00 	ldrex	r3, [r3]
 8007782:	60fb      	str	r3, [r7, #12]
   return(result);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f023 0310 	bic.w	r3, r3, #16
 800778a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	330c      	adds	r3, #12
 8007794:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007798:	61fa      	str	r2, [r7, #28]
 800779a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779c:	69b9      	ldr	r1, [r7, #24]
 800779e:	69fa      	ldr	r2, [r7, #28]
 80077a0:	e841 2300 	strex	r3, r2, [r1]
 80077a4:	617b      	str	r3, [r7, #20]
   return(result);
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e3      	bne.n	8007774 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2202      	movs	r2, #2
 80077b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077b6:	4619      	mov	r1, r3
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f83b 	bl	8007834 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077be:	e023      	b.n	8007808 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80077c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d009      	beq.n	80077e0 <HAL_UART_IRQHandler+0x4f4>
 80077cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d003      	beq.n	80077e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f953 	bl	8007a84 <UART_Transmit_IT>
    return;
 80077de:	e014      	b.n	800780a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80077e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00e      	beq.n	800780a <HAL_UART_IRQHandler+0x51e>
 80077ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d008      	beq.n	800780a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f992 	bl	8007b22 <UART_EndTransmit_IT>
    return;
 80077fe:	e004      	b.n	800780a <HAL_UART_IRQHandler+0x51e>
    return;
 8007800:	bf00      	nop
 8007802:	e002      	b.n	800780a <HAL_UART_IRQHandler+0x51e>
      return;
 8007804:	bf00      	nop
 8007806:	e000      	b.n	800780a <HAL_UART_IRQHandler+0x51e>
      return;
 8007808:	bf00      	nop
  }
}
 800780a:	37e8      	adds	r7, #232	; 0xe8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	bc80      	pop	{r7}
 8007820:	4770      	bx	lr

08007822 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007822:	b480      	push	{r7}
 8007824:	b083      	sub	sp, #12
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800782a:	bf00      	nop
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	bc80      	pop	{r7}
 8007832:	4770      	bx	lr

08007834 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	bc80      	pop	{r7}
 8007848:	4770      	bx	lr

0800784a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b090      	sub	sp, #64	; 0x40
 800784e:	af00      	add	r7, sp, #0
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	60b9      	str	r1, [r7, #8]
 8007854:	603b      	str	r3, [r7, #0]
 8007856:	4613      	mov	r3, r2
 8007858:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800785a:	e050      	b.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800785c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800785e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007862:	d04c      	beq.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007866:	2b00      	cmp	r3, #0
 8007868:	d007      	beq.n	800787a <UART_WaitOnFlagUntilTimeout+0x30>
 800786a:	f7fa fd17 	bl	800229c <HAL_GetTick>
 800786e:	4602      	mov	r2, r0
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007876:	429a      	cmp	r2, r3
 8007878:	d241      	bcs.n	80078fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	330c      	adds	r3, #12
 8007880:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007884:	e853 3f00 	ldrex	r3, [r3]
 8007888:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007890:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	330c      	adds	r3, #12
 8007898:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800789a:	637a      	str	r2, [r7, #52]	; 0x34
 800789c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078a2:	e841 2300 	strex	r3, r2, [r1]
 80078a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1e5      	bne.n	800787a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3314      	adds	r3, #20
 80078b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	613b      	str	r3, [r7, #16]
   return(result);
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	f023 0301 	bic.w	r3, r3, #1
 80078c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	3314      	adds	r3, #20
 80078cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078ce:	623a      	str	r2, [r7, #32]
 80078d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d2:	69f9      	ldr	r1, [r7, #28]
 80078d4:	6a3a      	ldr	r2, [r7, #32]
 80078d6:	e841 2300 	strex	r3, r2, [r1]
 80078da:	61bb      	str	r3, [r7, #24]
   return(result);
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1e5      	bne.n	80078ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2220      	movs	r2, #32
 80078e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2220      	movs	r2, #32
 80078ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e00f      	b.n	800791e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4013      	ands	r3, r2
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	429a      	cmp	r2, r3
 800790c:	bf0c      	ite	eq
 800790e:	2301      	moveq	r3, #1
 8007910:	2300      	movne	r3, #0
 8007912:	b2db      	uxtb	r3, r3
 8007914:	461a      	mov	r2, r3
 8007916:	79fb      	ldrb	r3, [r7, #7]
 8007918:	429a      	cmp	r2, r3
 800791a:	d09f      	beq.n	800785c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3740      	adds	r7, #64	; 0x40
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007926:	b480      	push	{r7}
 8007928:	b085      	sub	sp, #20
 800792a:	af00      	add	r7, sp, #0
 800792c:	60f8      	str	r0, [r7, #12]
 800792e:	60b9      	str	r1, [r7, #8]
 8007930:	4613      	mov	r3, r2
 8007932:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	88fa      	ldrh	r2, [r7, #6]
 800793e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	88fa      	ldrh	r2, [r7, #6]
 8007944:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2222      	movs	r2, #34	; 0x22
 8007950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d007      	beq.n	800796c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68da      	ldr	r2, [r3, #12]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800796a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	695a      	ldr	r2, [r3, #20]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f042 0201 	orr.w	r2, r2, #1
 800797a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68da      	ldr	r2, [r3, #12]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f042 0220 	orr.w	r2, r2, #32
 800798a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	bc80      	pop	{r7}
 8007996:	4770      	bx	lr

08007998 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007998:	b480      	push	{r7}
 800799a:	b095      	sub	sp, #84	; 0x54
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	330c      	adds	r3, #12
 80079a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079aa:	e853 3f00 	ldrex	r3, [r3]
 80079ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	330c      	adds	r3, #12
 80079be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079c0:	643a      	str	r2, [r7, #64]	; 0x40
 80079c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079c8:	e841 2300 	strex	r3, r2, [r1]
 80079cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1e5      	bne.n	80079a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3314      	adds	r3, #20
 80079da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079dc:	6a3b      	ldr	r3, [r7, #32]
 80079de:	e853 3f00 	ldrex	r3, [r3]
 80079e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	f023 0301 	bic.w	r3, r3, #1
 80079ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3314      	adds	r3, #20
 80079f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079fc:	e841 2300 	strex	r3, r2, [r1]
 8007a00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e5      	bne.n	80079d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d119      	bne.n	8007a44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	330c      	adds	r3, #12
 8007a16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	e853 3f00 	ldrex	r3, [r3]
 8007a1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	f023 0310 	bic.w	r3, r3, #16
 8007a26:	647b      	str	r3, [r7, #68]	; 0x44
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	330c      	adds	r3, #12
 8007a2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a30:	61ba      	str	r2, [r7, #24]
 8007a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a34:	6979      	ldr	r1, [r7, #20]
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	e841 2300 	strex	r3, r2, [r1]
 8007a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1e5      	bne.n	8007a10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2220      	movs	r2, #32
 8007a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a52:	bf00      	nop
 8007a54:	3754      	adds	r7, #84	; 0x54
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bc80      	pop	{r7}
 8007a5a:	4770      	bx	lr

08007a5c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f7ff fed3 	bl	8007822 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a7c:	bf00      	nop
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b21      	cmp	r3, #33	; 0x21
 8007a96:	d13e      	bne.n	8007b16 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aa0:	d114      	bne.n	8007acc <UART_Transmit_IT+0x48>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d110      	bne.n	8007acc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	881b      	ldrh	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007abe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a1b      	ldr	r3, [r3, #32]
 8007ac4:	1c9a      	adds	r2, r3, #2
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	621a      	str	r2, [r3, #32]
 8007aca:	e008      	b.n	8007ade <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a1b      	ldr	r3, [r3, #32]
 8007ad0:	1c59      	adds	r1, r3, #1
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	6211      	str	r1, [r2, #32]
 8007ad6:	781a      	ldrb	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	4619      	mov	r1, r3
 8007aec:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10f      	bne.n	8007b12 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68da      	ldr	r2, [r3, #12]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b00:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68da      	ldr	r2, [r3, #12]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b10:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b12:	2300      	movs	r3, #0
 8007b14:	e000      	b.n	8007b18 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b16:	2302      	movs	r3, #2
  }
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bc80      	pop	{r7}
 8007b20:	4770      	bx	lr

08007b22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b082      	sub	sp, #8
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68da      	ldr	r2, [r3, #12]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7ff fe64 	bl	8007810 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b08c      	sub	sp, #48	; 0x30
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b22      	cmp	r3, #34	; 0x22
 8007b64:	f040 80ae 	bne.w	8007cc4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b70:	d117      	bne.n	8007ba2 <UART_Receive_IT+0x50>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d113      	bne.n	8007ba2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9a:	1c9a      	adds	r2, r3, #2
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	629a      	str	r2, [r3, #40]	; 0x28
 8007ba0:	e026      	b.n	8007bf0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bb4:	d007      	beq.n	8007bc6 <UART_Receive_IT+0x74>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10a      	bne.n	8007bd4 <UART_Receive_IT+0x82>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d106      	bne.n	8007bd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd0:	701a      	strb	r2, [r3, #0]
 8007bd2:	e008      	b.n	8007be6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d15d      	bne.n	8007cc0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68da      	ldr	r2, [r3, #12]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f022 0220 	bic.w	r2, r2, #32
 8007c12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68da      	ldr	r2, [r3, #12]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	695a      	ldr	r2, [r3, #20]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f022 0201 	bic.w	r2, r2, #1
 8007c32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2220      	movs	r2, #32
 8007c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d135      	bne.n	8007cb6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	330c      	adds	r3, #12
 8007c56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	e853 3f00 	ldrex	r3, [r3]
 8007c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	f023 0310 	bic.w	r3, r3, #16
 8007c66:	627b      	str	r3, [r7, #36]	; 0x24
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	330c      	adds	r3, #12
 8007c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c70:	623a      	str	r2, [r7, #32]
 8007c72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c74:	69f9      	ldr	r1, [r7, #28]
 8007c76:	6a3a      	ldr	r2, [r7, #32]
 8007c78:	e841 2300 	strex	r3, r2, [r1]
 8007c7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1e5      	bne.n	8007c50 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 0310 	and.w	r3, r3, #16
 8007c8e:	2b10      	cmp	r3, #16
 8007c90:	d10a      	bne.n	8007ca8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c92:	2300      	movs	r3, #0
 8007c94:	60fb      	str	r3, [r7, #12]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	60fb      	str	r3, [r7, #12]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	60fb      	str	r3, [r7, #12]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7ff fdc0 	bl	8007834 <HAL_UARTEx_RxEventCallback>
 8007cb4:	e002      	b.n	8007cbc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7f9 fb98 	bl	80013ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	e002      	b.n	8007cc6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	e000      	b.n	8007cc6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007cc4:	2302      	movs	r3, #2
  }
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3730      	adds	r7, #48	; 0x30
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
	...

08007cd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68da      	ldr	r2, [r3, #12]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	430a      	orrs	r2, r1
 8007cec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	689a      	ldr	r2, [r3, #8]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	695b      	ldr	r3, [r3, #20]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007d0a:	f023 030c 	bic.w	r3, r3, #12
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	6812      	ldr	r2, [r2, #0]
 8007d12:	68b9      	ldr	r1, [r7, #8]
 8007d14:	430b      	orrs	r3, r1
 8007d16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	699a      	ldr	r2, [r3, #24]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a2c      	ldr	r2, [pc, #176]	; (8007de4 <UART_SetConfig+0x114>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d103      	bne.n	8007d40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007d38:	f7fd fc9e 	bl	8005678 <HAL_RCC_GetPCLK2Freq>
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	e002      	b.n	8007d46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007d40:	f7fd fc86 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 8007d44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	009a      	lsls	r2, r3, #2
 8007d50:	441a      	add	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d5c:	4a22      	ldr	r2, [pc, #136]	; (8007de8 <UART_SetConfig+0x118>)
 8007d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d62:	095b      	lsrs	r3, r3, #5
 8007d64:	0119      	lsls	r1, r3, #4
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	4413      	add	r3, r2
 8007d6e:	009a      	lsls	r2, r3, #2
 8007d70:	441a      	add	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d7c:	4b1a      	ldr	r3, [pc, #104]	; (8007de8 <UART_SetConfig+0x118>)
 8007d7e:	fba3 0302 	umull	r0, r3, r3, r2
 8007d82:	095b      	lsrs	r3, r3, #5
 8007d84:	2064      	movs	r0, #100	; 0x64
 8007d86:	fb00 f303 	mul.w	r3, r0, r3
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	011b      	lsls	r3, r3, #4
 8007d8e:	3332      	adds	r3, #50	; 0x32
 8007d90:	4a15      	ldr	r2, [pc, #84]	; (8007de8 <UART_SetConfig+0x118>)
 8007d92:	fba2 2303 	umull	r2, r3, r2, r3
 8007d96:	095b      	lsrs	r3, r3, #5
 8007d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d9c:	4419      	add	r1, r3
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	4613      	mov	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	4413      	add	r3, r2
 8007da6:	009a      	lsls	r2, r3, #2
 8007da8:	441a      	add	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	fbb2 f2f3 	udiv	r2, r2, r3
 8007db4:	4b0c      	ldr	r3, [pc, #48]	; (8007de8 <UART_SetConfig+0x118>)
 8007db6:	fba3 0302 	umull	r0, r3, r3, r2
 8007dba:	095b      	lsrs	r3, r3, #5
 8007dbc:	2064      	movs	r0, #100	; 0x64
 8007dbe:	fb00 f303 	mul.w	r3, r0, r3
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	011b      	lsls	r3, r3, #4
 8007dc6:	3332      	adds	r3, #50	; 0x32
 8007dc8:	4a07      	ldr	r2, [pc, #28]	; (8007de8 <UART_SetConfig+0x118>)
 8007dca:	fba2 2303 	umull	r2, r3, r2, r3
 8007dce:	095b      	lsrs	r3, r3, #5
 8007dd0:	f003 020f 	and.w	r2, r3, #15
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	440a      	add	r2, r1
 8007dda:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007ddc:	bf00      	nop
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	40013800 	.word	0x40013800
 8007de8:	51eb851f 	.word	0x51eb851f

08007dec <tan>:
 8007dec:	b530      	push	{r4, r5, lr}
 8007dee:	4a12      	ldr	r2, [pc, #72]	; (8007e38 <tan+0x4c>)
 8007df0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007df4:	4293      	cmp	r3, r2
 8007df6:	b087      	sub	sp, #28
 8007df8:	dc06      	bgt.n	8007e08 <tan+0x1c>
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	2300      	movs	r3, #0
 8007e02:	f000 fd59 	bl	80088b8 <__kernel_tan>
 8007e06:	e006      	b.n	8007e16 <tan+0x2a>
 8007e08:	4a0c      	ldr	r2, [pc, #48]	; (8007e3c <tan+0x50>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	dd05      	ble.n	8007e1a <tan+0x2e>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	f7f8 f9a9 	bl	8000168 <__aeabi_dsub>
 8007e16:	b007      	add	sp, #28
 8007e18:	bd30      	pop	{r4, r5, pc}
 8007e1a:	aa02      	add	r2, sp, #8
 8007e1c:	f000 f810 	bl	8007e40 <__ieee754_rem_pio2>
 8007e20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e24:	0040      	lsls	r0, r0, #1
 8007e26:	f000 0002 	and.w	r0, r0, #2
 8007e2a:	f1c0 0001 	rsb	r0, r0, #1
 8007e2e:	9000      	str	r0, [sp, #0]
 8007e30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e34:	e7e5      	b.n	8007e02 <tan+0x16>
 8007e36:	bf00      	nop
 8007e38:	3fe921fb 	.word	0x3fe921fb
 8007e3c:	7fefffff 	.word	0x7fefffff

08007e40 <__ieee754_rem_pio2>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	4614      	mov	r4, r2
 8007e46:	4ac4      	ldr	r2, [pc, #784]	; (8008158 <__ieee754_rem_pio2+0x318>)
 8007e48:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8007e4c:	b08d      	sub	sp, #52	; 0x34
 8007e4e:	4592      	cmp	sl, r2
 8007e50:	9104      	str	r1, [sp, #16]
 8007e52:	dc07      	bgt.n	8007e64 <__ieee754_rem_pio2+0x24>
 8007e54:	2200      	movs	r2, #0
 8007e56:	2300      	movs	r3, #0
 8007e58:	e9c4 0100 	strd	r0, r1, [r4]
 8007e5c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007e60:	2500      	movs	r5, #0
 8007e62:	e024      	b.n	8007eae <__ieee754_rem_pio2+0x6e>
 8007e64:	4abd      	ldr	r2, [pc, #756]	; (800815c <__ieee754_rem_pio2+0x31c>)
 8007e66:	4592      	cmp	sl, r2
 8007e68:	dc72      	bgt.n	8007f50 <__ieee754_rem_pio2+0x110>
 8007e6a:	9b04      	ldr	r3, [sp, #16]
 8007e6c:	4dbc      	ldr	r5, [pc, #752]	; (8008160 <__ieee754_rem_pio2+0x320>)
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	a3ab      	add	r3, pc, #684	; (adr r3, 8008120 <__ieee754_rem_pio2+0x2e0>)
 8007e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e76:	dd36      	ble.n	8007ee6 <__ieee754_rem_pio2+0xa6>
 8007e78:	f7f8 f976 	bl	8000168 <__aeabi_dsub>
 8007e7c:	45aa      	cmp	sl, r5
 8007e7e:	4606      	mov	r6, r0
 8007e80:	460f      	mov	r7, r1
 8007e82:	d018      	beq.n	8007eb6 <__ieee754_rem_pio2+0x76>
 8007e84:	a3a8      	add	r3, pc, #672	; (adr r3, 8008128 <__ieee754_rem_pio2+0x2e8>)
 8007e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8a:	f7f8 f96d 	bl	8000168 <__aeabi_dsub>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	460b      	mov	r3, r1
 8007e92:	4630      	mov	r0, r6
 8007e94:	e9c4 2300 	strd	r2, r3, [r4]
 8007e98:	4639      	mov	r1, r7
 8007e9a:	f7f8 f965 	bl	8000168 <__aeabi_dsub>
 8007e9e:	a3a2      	add	r3, pc, #648	; (adr r3, 8008128 <__ieee754_rem_pio2+0x2e8>)
 8007ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea4:	f7f8 f960 	bl	8000168 <__aeabi_dsub>
 8007ea8:	2501      	movs	r5, #1
 8007eaa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007eae:	4628      	mov	r0, r5
 8007eb0:	b00d      	add	sp, #52	; 0x34
 8007eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb6:	a39e      	add	r3, pc, #632	; (adr r3, 8008130 <__ieee754_rem_pio2+0x2f0>)
 8007eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebc:	f7f8 f954 	bl	8000168 <__aeabi_dsub>
 8007ec0:	a39d      	add	r3, pc, #628	; (adr r3, 8008138 <__ieee754_rem_pio2+0x2f8>)
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	460f      	mov	r7, r1
 8007eca:	f7f8 f94d 	bl	8000168 <__aeabi_dsub>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	e9c4 2300 	strd	r2, r3, [r4]
 8007ed8:	4639      	mov	r1, r7
 8007eda:	f7f8 f945 	bl	8000168 <__aeabi_dsub>
 8007ede:	a396      	add	r3, pc, #600	; (adr r3, 8008138 <__ieee754_rem_pio2+0x2f8>)
 8007ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee4:	e7de      	b.n	8007ea4 <__ieee754_rem_pio2+0x64>
 8007ee6:	f7f8 f941 	bl	800016c <__adddf3>
 8007eea:	45aa      	cmp	sl, r5
 8007eec:	4606      	mov	r6, r0
 8007eee:	460f      	mov	r7, r1
 8007ef0:	d016      	beq.n	8007f20 <__ieee754_rem_pio2+0xe0>
 8007ef2:	a38d      	add	r3, pc, #564	; (adr r3, 8008128 <__ieee754_rem_pio2+0x2e8>)
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f7f8 f938 	bl	800016c <__adddf3>
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	4630      	mov	r0, r6
 8007f02:	e9c4 2300 	strd	r2, r3, [r4]
 8007f06:	4639      	mov	r1, r7
 8007f08:	f7f8 f92e 	bl	8000168 <__aeabi_dsub>
 8007f0c:	a386      	add	r3, pc, #536	; (adr r3, 8008128 <__ieee754_rem_pio2+0x2e8>)
 8007f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f12:	f7f8 f92b 	bl	800016c <__adddf3>
 8007f16:	f04f 35ff 	mov.w	r5, #4294967295
 8007f1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007f1e:	e7c6      	b.n	8007eae <__ieee754_rem_pio2+0x6e>
 8007f20:	a383      	add	r3, pc, #524	; (adr r3, 8008130 <__ieee754_rem_pio2+0x2f0>)
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	f7f8 f921 	bl	800016c <__adddf3>
 8007f2a:	a383      	add	r3, pc, #524	; (adr r3, 8008138 <__ieee754_rem_pio2+0x2f8>)
 8007f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f30:	4606      	mov	r6, r0
 8007f32:	460f      	mov	r7, r1
 8007f34:	f7f8 f91a 	bl	800016c <__adddf3>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	e9c4 2300 	strd	r2, r3, [r4]
 8007f42:	4639      	mov	r1, r7
 8007f44:	f7f8 f910 	bl	8000168 <__aeabi_dsub>
 8007f48:	a37b      	add	r3, pc, #492	; (adr r3, 8008138 <__ieee754_rem_pio2+0x2f8>)
 8007f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4e:	e7e0      	b.n	8007f12 <__ieee754_rem_pio2+0xd2>
 8007f50:	4a84      	ldr	r2, [pc, #528]	; (8008164 <__ieee754_rem_pio2+0x324>)
 8007f52:	4592      	cmp	sl, r2
 8007f54:	f300 80d5 	bgt.w	8008102 <__ieee754_rem_pio2+0x2c2>
 8007f58:	f000 feaa 	bl	8008cb0 <fabs>
 8007f5c:	a378      	add	r3, pc, #480	; (adr r3, 8008140 <__ieee754_rem_pio2+0x300>)
 8007f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f62:	4606      	mov	r6, r0
 8007f64:	460f      	mov	r7, r1
 8007f66:	f7f8 fab7 	bl	80004d8 <__aeabi_dmul>
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	4b7e      	ldr	r3, [pc, #504]	; (8008168 <__ieee754_rem_pio2+0x328>)
 8007f6e:	f7f8 f8fd 	bl	800016c <__adddf3>
 8007f72:	f7f8 fd61 	bl	8000a38 <__aeabi_d2iz>
 8007f76:	4605      	mov	r5, r0
 8007f78:	f7f8 fa44 	bl	8000404 <__aeabi_i2d>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f84:	a366      	add	r3, pc, #408	; (adr r3, 8008120 <__ieee754_rem_pio2+0x2e0>)
 8007f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8a:	f7f8 faa5 	bl	80004d8 <__aeabi_dmul>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	4630      	mov	r0, r6
 8007f94:	4639      	mov	r1, r7
 8007f96:	f7f8 f8e7 	bl	8000168 <__aeabi_dsub>
 8007f9a:	a363      	add	r3, pc, #396	; (adr r3, 8008128 <__ieee754_rem_pio2+0x2e8>)
 8007f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa0:	4680      	mov	r8, r0
 8007fa2:	4689      	mov	r9, r1
 8007fa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fa8:	f7f8 fa96 	bl	80004d8 <__aeabi_dmul>
 8007fac:	2d1f      	cmp	r5, #31
 8007fae:	4606      	mov	r6, r0
 8007fb0:	460f      	mov	r7, r1
 8007fb2:	dc0e      	bgt.n	8007fd2 <__ieee754_rem_pio2+0x192>
 8007fb4:	4b6d      	ldr	r3, [pc, #436]	; (800816c <__ieee754_rem_pio2+0x32c>)
 8007fb6:	1e6a      	subs	r2, r5, #1
 8007fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fbc:	4553      	cmp	r3, sl
 8007fbe:	d008      	beq.n	8007fd2 <__ieee754_rem_pio2+0x192>
 8007fc0:	4632      	mov	r2, r6
 8007fc2:	463b      	mov	r3, r7
 8007fc4:	4640      	mov	r0, r8
 8007fc6:	4649      	mov	r1, r9
 8007fc8:	f7f8 f8ce 	bl	8000168 <__aeabi_dsub>
 8007fcc:	e9c4 0100 	strd	r0, r1, [r4]
 8007fd0:	e013      	b.n	8007ffa <__ieee754_rem_pio2+0x1ba>
 8007fd2:	463b      	mov	r3, r7
 8007fd4:	4632      	mov	r2, r6
 8007fd6:	4640      	mov	r0, r8
 8007fd8:	4649      	mov	r1, r9
 8007fda:	f7f8 f8c5 	bl	8000168 <__aeabi_dsub>
 8007fde:	ea4f 532a 	mov.w	r3, sl, asr #20
 8007fe2:	9305      	str	r3, [sp, #20]
 8007fe4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007fe8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8007fec:	f1ba 0f10 	cmp.w	sl, #16
 8007ff0:	dc1f      	bgt.n	8008032 <__ieee754_rem_pio2+0x1f2>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	e9c4 2300 	strd	r2, r3, [r4]
 8007ffa:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8007ffe:	4640      	mov	r0, r8
 8008000:	4653      	mov	r3, sl
 8008002:	4649      	mov	r1, r9
 8008004:	f7f8 f8b0 	bl	8000168 <__aeabi_dsub>
 8008008:	4632      	mov	r2, r6
 800800a:	463b      	mov	r3, r7
 800800c:	f7f8 f8ac 	bl	8000168 <__aeabi_dsub>
 8008010:	460b      	mov	r3, r1
 8008012:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008016:	9904      	ldr	r1, [sp, #16]
 8008018:	4602      	mov	r2, r0
 800801a:	2900      	cmp	r1, #0
 800801c:	f6bf af47 	bge.w	8007eae <__ieee754_rem_pio2+0x6e>
 8008020:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8008024:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008028:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800802c:	60e3      	str	r3, [r4, #12]
 800802e:	426d      	negs	r5, r5
 8008030:	e73d      	b.n	8007eae <__ieee754_rem_pio2+0x6e>
 8008032:	a33f      	add	r3, pc, #252	; (adr r3, 8008130 <__ieee754_rem_pio2+0x2f0>)
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800803c:	f7f8 fa4c 	bl	80004d8 <__aeabi_dmul>
 8008040:	4606      	mov	r6, r0
 8008042:	460f      	mov	r7, r1
 8008044:	4602      	mov	r2, r0
 8008046:	460b      	mov	r3, r1
 8008048:	4640      	mov	r0, r8
 800804a:	4649      	mov	r1, r9
 800804c:	f7f8 f88c 	bl	8000168 <__aeabi_dsub>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	4682      	mov	sl, r0
 8008056:	468b      	mov	fp, r1
 8008058:	4640      	mov	r0, r8
 800805a:	4649      	mov	r1, r9
 800805c:	f7f8 f884 	bl	8000168 <__aeabi_dsub>
 8008060:	4632      	mov	r2, r6
 8008062:	463b      	mov	r3, r7
 8008064:	f7f8 f880 	bl	8000168 <__aeabi_dsub>
 8008068:	a333      	add	r3, pc, #204	; (adr r3, 8008138 <__ieee754_rem_pio2+0x2f8>)
 800806a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806e:	4606      	mov	r6, r0
 8008070:	460f      	mov	r7, r1
 8008072:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008076:	f7f8 fa2f 	bl	80004d8 <__aeabi_dmul>
 800807a:	4632      	mov	r2, r6
 800807c:	463b      	mov	r3, r7
 800807e:	f7f8 f873 	bl	8000168 <__aeabi_dsub>
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	4606      	mov	r6, r0
 8008088:	460f      	mov	r7, r1
 800808a:	4650      	mov	r0, sl
 800808c:	4659      	mov	r1, fp
 800808e:	f7f8 f86b 	bl	8000168 <__aeabi_dsub>
 8008092:	9a05      	ldr	r2, [sp, #20]
 8008094:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	2b31      	cmp	r3, #49	; 0x31
 800809c:	dc06      	bgt.n	80080ac <__ieee754_rem_pio2+0x26c>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	46d0      	mov	r8, sl
 80080a4:	46d9      	mov	r9, fp
 80080a6:	e9c4 2300 	strd	r2, r3, [r4]
 80080aa:	e7a6      	b.n	8007ffa <__ieee754_rem_pio2+0x1ba>
 80080ac:	a326      	add	r3, pc, #152	; (adr r3, 8008148 <__ieee754_rem_pio2+0x308>)
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080b6:	f7f8 fa0f 	bl	80004d8 <__aeabi_dmul>
 80080ba:	4606      	mov	r6, r0
 80080bc:	460f      	mov	r7, r1
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	4650      	mov	r0, sl
 80080c4:	4659      	mov	r1, fp
 80080c6:	f7f8 f84f 	bl	8000168 <__aeabi_dsub>
 80080ca:	4602      	mov	r2, r0
 80080cc:	460b      	mov	r3, r1
 80080ce:	4680      	mov	r8, r0
 80080d0:	4689      	mov	r9, r1
 80080d2:	4650      	mov	r0, sl
 80080d4:	4659      	mov	r1, fp
 80080d6:	f7f8 f847 	bl	8000168 <__aeabi_dsub>
 80080da:	4632      	mov	r2, r6
 80080dc:	463b      	mov	r3, r7
 80080de:	f7f8 f843 	bl	8000168 <__aeabi_dsub>
 80080e2:	a31b      	add	r3, pc, #108	; (adr r3, 8008150 <__ieee754_rem_pio2+0x310>)
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	4606      	mov	r6, r0
 80080ea:	460f      	mov	r7, r1
 80080ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080f0:	f7f8 f9f2 	bl	80004d8 <__aeabi_dmul>
 80080f4:	4632      	mov	r2, r6
 80080f6:	463b      	mov	r3, r7
 80080f8:	f7f8 f836 	bl	8000168 <__aeabi_dsub>
 80080fc:	4606      	mov	r6, r0
 80080fe:	460f      	mov	r7, r1
 8008100:	e75e      	b.n	8007fc0 <__ieee754_rem_pio2+0x180>
 8008102:	4a1b      	ldr	r2, [pc, #108]	; (8008170 <__ieee754_rem_pio2+0x330>)
 8008104:	4592      	cmp	sl, r2
 8008106:	dd35      	ble.n	8008174 <__ieee754_rem_pio2+0x334>
 8008108:	4602      	mov	r2, r0
 800810a:	460b      	mov	r3, r1
 800810c:	f7f8 f82c 	bl	8000168 <__aeabi_dsub>
 8008110:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008114:	e9c4 0100 	strd	r0, r1, [r4]
 8008118:	e6a2      	b.n	8007e60 <__ieee754_rem_pio2+0x20>
 800811a:	bf00      	nop
 800811c:	f3af 8000 	nop.w
 8008120:	54400000 	.word	0x54400000
 8008124:	3ff921fb 	.word	0x3ff921fb
 8008128:	1a626331 	.word	0x1a626331
 800812c:	3dd0b461 	.word	0x3dd0b461
 8008130:	1a600000 	.word	0x1a600000
 8008134:	3dd0b461 	.word	0x3dd0b461
 8008138:	2e037073 	.word	0x2e037073
 800813c:	3ba3198a 	.word	0x3ba3198a
 8008140:	6dc9c883 	.word	0x6dc9c883
 8008144:	3fe45f30 	.word	0x3fe45f30
 8008148:	2e000000 	.word	0x2e000000
 800814c:	3ba3198a 	.word	0x3ba3198a
 8008150:	252049c1 	.word	0x252049c1
 8008154:	397b839a 	.word	0x397b839a
 8008158:	3fe921fb 	.word	0x3fe921fb
 800815c:	4002d97b 	.word	0x4002d97b
 8008160:	3ff921fb 	.word	0x3ff921fb
 8008164:	413921fb 	.word	0x413921fb
 8008168:	3fe00000 	.word	0x3fe00000
 800816c:	0800bd60 	.word	0x0800bd60
 8008170:	7fefffff 	.word	0x7fefffff
 8008174:	ea4f 552a 	mov.w	r5, sl, asr #20
 8008178:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800817c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8008180:	460f      	mov	r7, r1
 8008182:	4606      	mov	r6, r0
 8008184:	f7f8 fc58 	bl	8000a38 <__aeabi_d2iz>
 8008188:	f7f8 f93c 	bl	8000404 <__aeabi_i2d>
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
 8008190:	4630      	mov	r0, r6
 8008192:	4639      	mov	r1, r7
 8008194:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008198:	f7f7 ffe6 	bl	8000168 <__aeabi_dsub>
 800819c:	2200      	movs	r2, #0
 800819e:	4b22      	ldr	r3, [pc, #136]	; (8008228 <__ieee754_rem_pio2+0x3e8>)
 80081a0:	f7f8 f99a 	bl	80004d8 <__aeabi_dmul>
 80081a4:	460f      	mov	r7, r1
 80081a6:	4606      	mov	r6, r0
 80081a8:	f7f8 fc46 	bl	8000a38 <__aeabi_d2iz>
 80081ac:	f7f8 f92a 	bl	8000404 <__aeabi_i2d>
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	4630      	mov	r0, r6
 80081b6:	4639      	mov	r1, r7
 80081b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80081bc:	f7f7 ffd4 	bl	8000168 <__aeabi_dsub>
 80081c0:	2200      	movs	r2, #0
 80081c2:	4b19      	ldr	r3, [pc, #100]	; (8008228 <__ieee754_rem_pio2+0x3e8>)
 80081c4:	f7f8 f988 	bl	80004d8 <__aeabi_dmul>
 80081c8:	f04f 0803 	mov.w	r8, #3
 80081cc:	2600      	movs	r6, #0
 80081ce:	2700      	movs	r7, #0
 80081d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80081d4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80081d8:	4632      	mov	r2, r6
 80081da:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80081de:	463b      	mov	r3, r7
 80081e0:	46c2      	mov	sl, r8
 80081e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80081e6:	f7f8 fbdf 	bl	80009a8 <__aeabi_dcmpeq>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d1f4      	bne.n	80081d8 <__ieee754_rem_pio2+0x398>
 80081ee:	4b0f      	ldr	r3, [pc, #60]	; (800822c <__ieee754_rem_pio2+0x3ec>)
 80081f0:	462a      	mov	r2, r5
 80081f2:	9301      	str	r3, [sp, #4]
 80081f4:	2302      	movs	r3, #2
 80081f6:	4621      	mov	r1, r4
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	a806      	add	r0, sp, #24
 80081fc:	4653      	mov	r3, sl
 80081fe:	f000 f817 	bl	8008230 <__kernel_rem_pio2>
 8008202:	9b04      	ldr	r3, [sp, #16]
 8008204:	4605      	mov	r5, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	f6bf ae51 	bge.w	8007eae <__ieee754_rem_pio2+0x6e>
 800820c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008210:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008214:	e9c4 2300 	strd	r2, r3, [r4]
 8008218:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800821c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008220:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008224:	e703      	b.n	800802e <__ieee754_rem_pio2+0x1ee>
 8008226:	bf00      	nop
 8008228:	41700000 	.word	0x41700000
 800822c:	0800bde0 	.word	0x0800bde0

08008230 <__kernel_rem_pio2>:
 8008230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008234:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008238:	9308      	str	r3, [sp, #32]
 800823a:	9106      	str	r1, [sp, #24]
 800823c:	4bb6      	ldr	r3, [pc, #728]	; (8008518 <__kernel_rem_pio2+0x2e8>)
 800823e:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8008240:	f112 0f14 	cmn.w	r2, #20
 8008244:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008248:	bfa8      	it	ge
 800824a:	1ed4      	subge	r4, r2, #3
 800824c:	9302      	str	r3, [sp, #8]
 800824e:	9b08      	ldr	r3, [sp, #32]
 8008250:	bfb8      	it	lt
 8008252:	2400      	movlt	r4, #0
 8008254:	f103 33ff 	add.w	r3, r3, #4294967295
 8008258:	9307      	str	r3, [sp, #28]
 800825a:	bfa4      	itt	ge
 800825c:	2318      	movge	r3, #24
 800825e:	fb94 f4f3 	sdivge	r4, r4, r3
 8008262:	f06f 0317 	mvn.w	r3, #23
 8008266:	fb04 3303 	mla	r3, r4, r3, r3
 800826a:	eb03 0b02 	add.w	fp, r3, r2
 800826e:	9a07      	ldr	r2, [sp, #28]
 8008270:	9b02      	ldr	r3, [sp, #8]
 8008272:	1aa7      	subs	r7, r4, r2
 8008274:	eb03 0802 	add.w	r8, r3, r2
 8008278:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800827a:	2500      	movs	r5, #0
 800827c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008280:	2200      	movs	r2, #0
 8008282:	2300      	movs	r3, #0
 8008284:	9009      	str	r0, [sp, #36]	; 0x24
 8008286:	ae20      	add	r6, sp, #128	; 0x80
 8008288:	4545      	cmp	r5, r8
 800828a:	dd14      	ble.n	80082b6 <__kernel_rem_pio2+0x86>
 800828c:	f04f 0800 	mov.w	r8, #0
 8008290:	9a08      	ldr	r2, [sp, #32]
 8008292:	ab20      	add	r3, sp, #128	; 0x80
 8008294:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8008298:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800829c:	9b02      	ldr	r3, [sp, #8]
 800829e:	4598      	cmp	r8, r3
 80082a0:	dc35      	bgt.n	800830e <__kernel_rem_pio2+0xde>
 80082a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a4:	2200      	movs	r2, #0
 80082a6:	f1a3 0908 	sub.w	r9, r3, #8
 80082aa:	2300      	movs	r3, #0
 80082ac:	462f      	mov	r7, r5
 80082ae:	2600      	movs	r6, #0
 80082b0:	e9cd 2300 	strd	r2, r3, [sp]
 80082b4:	e01f      	b.n	80082f6 <__kernel_rem_pio2+0xc6>
 80082b6:	42ef      	cmn	r7, r5
 80082b8:	d40b      	bmi.n	80082d2 <__kernel_rem_pio2+0xa2>
 80082ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80082be:	e9cd 2300 	strd	r2, r3, [sp]
 80082c2:	f7f8 f89f 	bl	8000404 <__aeabi_i2d>
 80082c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80082ce:	3501      	adds	r5, #1
 80082d0:	e7da      	b.n	8008288 <__kernel_rem_pio2+0x58>
 80082d2:	4610      	mov	r0, r2
 80082d4:	4619      	mov	r1, r3
 80082d6:	e7f8      	b.n	80082ca <__kernel_rem_pio2+0x9a>
 80082d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082dc:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80082e0:	f7f8 f8fa 	bl	80004d8 <__aeabi_dmul>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082ec:	f7f7 ff3e 	bl	800016c <__adddf3>
 80082f0:	e9cd 0100 	strd	r0, r1, [sp]
 80082f4:	3601      	adds	r6, #1
 80082f6:	9b07      	ldr	r3, [sp, #28]
 80082f8:	3f08      	subs	r7, #8
 80082fa:	429e      	cmp	r6, r3
 80082fc:	ddec      	ble.n	80082d8 <__kernel_rem_pio2+0xa8>
 80082fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008302:	f108 0801 	add.w	r8, r8, #1
 8008306:	e8ea 2302 	strd	r2, r3, [sl], #8
 800830a:	3508      	adds	r5, #8
 800830c:	e7c6      	b.n	800829c <__kernel_rem_pio2+0x6c>
 800830e:	9b02      	ldr	r3, [sp, #8]
 8008310:	aa0c      	add	r2, sp, #48	; 0x30
 8008312:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008316:	930b      	str	r3, [sp, #44]	; 0x2c
 8008318:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800831a:	9e02      	ldr	r6, [sp, #8]
 800831c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008320:	930a      	str	r3, [sp, #40]	; 0x28
 8008322:	ab98      	add	r3, sp, #608	; 0x260
 8008324:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008328:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800832c:	ab70      	add	r3, sp, #448	; 0x1c0
 800832e:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8008332:	46d0      	mov	r8, sl
 8008334:	46b1      	mov	r9, r6
 8008336:	af0c      	add	r7, sp, #48	; 0x30
 8008338:	9700      	str	r7, [sp, #0]
 800833a:	f1b9 0f00 	cmp.w	r9, #0
 800833e:	f1a8 0808 	sub.w	r8, r8, #8
 8008342:	dc71      	bgt.n	8008428 <__kernel_rem_pio2+0x1f8>
 8008344:	465a      	mov	r2, fp
 8008346:	4620      	mov	r0, r4
 8008348:	4629      	mov	r1, r5
 800834a:	f000 fd35 	bl	8008db8 <scalbn>
 800834e:	2200      	movs	r2, #0
 8008350:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008354:	4604      	mov	r4, r0
 8008356:	460d      	mov	r5, r1
 8008358:	f7f8 f8be 	bl	80004d8 <__aeabi_dmul>
 800835c:	f000 fcac 	bl	8008cb8 <floor>
 8008360:	2200      	movs	r2, #0
 8008362:	4b6e      	ldr	r3, [pc, #440]	; (800851c <__kernel_rem_pio2+0x2ec>)
 8008364:	f7f8 f8b8 	bl	80004d8 <__aeabi_dmul>
 8008368:	4602      	mov	r2, r0
 800836a:	460b      	mov	r3, r1
 800836c:	4620      	mov	r0, r4
 800836e:	4629      	mov	r1, r5
 8008370:	f7f7 fefa 	bl	8000168 <__aeabi_dsub>
 8008374:	460d      	mov	r5, r1
 8008376:	4604      	mov	r4, r0
 8008378:	f7f8 fb5e 	bl	8000a38 <__aeabi_d2iz>
 800837c:	9004      	str	r0, [sp, #16]
 800837e:	f7f8 f841 	bl	8000404 <__aeabi_i2d>
 8008382:	4602      	mov	r2, r0
 8008384:	460b      	mov	r3, r1
 8008386:	4620      	mov	r0, r4
 8008388:	4629      	mov	r1, r5
 800838a:	f7f7 feed 	bl	8000168 <__aeabi_dsub>
 800838e:	f1bb 0f00 	cmp.w	fp, #0
 8008392:	4680      	mov	r8, r0
 8008394:	4689      	mov	r9, r1
 8008396:	dd70      	ble.n	800847a <__kernel_rem_pio2+0x24a>
 8008398:	1e72      	subs	r2, r6, #1
 800839a:	ab0c      	add	r3, sp, #48	; 0x30
 800839c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80083a0:	9c04      	ldr	r4, [sp, #16]
 80083a2:	f1cb 0118 	rsb	r1, fp, #24
 80083a6:	fa40 f301 	asr.w	r3, r0, r1
 80083aa:	441c      	add	r4, r3
 80083ac:	408b      	lsls	r3, r1
 80083ae:	1ac0      	subs	r0, r0, r3
 80083b0:	ab0c      	add	r3, sp, #48	; 0x30
 80083b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80083b6:	f1cb 0317 	rsb	r3, fp, #23
 80083ba:	9404      	str	r4, [sp, #16]
 80083bc:	fa40 f303 	asr.w	r3, r0, r3
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	9b00      	ldr	r3, [sp, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	dd66      	ble.n	8008496 <__kernel_rem_pio2+0x266>
 80083c8:	2200      	movs	r2, #0
 80083ca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80083ce:	4614      	mov	r4, r2
 80083d0:	9b04      	ldr	r3, [sp, #16]
 80083d2:	3301      	adds	r3, #1
 80083d4:	9304      	str	r3, [sp, #16]
 80083d6:	4296      	cmp	r6, r2
 80083d8:	f300 80ac 	bgt.w	8008534 <__kernel_rem_pio2+0x304>
 80083dc:	f1bb 0f00 	cmp.w	fp, #0
 80083e0:	dd07      	ble.n	80083f2 <__kernel_rem_pio2+0x1c2>
 80083e2:	f1bb 0f01 	cmp.w	fp, #1
 80083e6:	f000 80b4 	beq.w	8008552 <__kernel_rem_pio2+0x322>
 80083ea:	f1bb 0f02 	cmp.w	fp, #2
 80083ee:	f000 80ba 	beq.w	8008566 <__kernel_rem_pio2+0x336>
 80083f2:	9b00      	ldr	r3, [sp, #0]
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d14e      	bne.n	8008496 <__kernel_rem_pio2+0x266>
 80083f8:	4642      	mov	r2, r8
 80083fa:	464b      	mov	r3, r9
 80083fc:	2000      	movs	r0, #0
 80083fe:	4948      	ldr	r1, [pc, #288]	; (8008520 <__kernel_rem_pio2+0x2f0>)
 8008400:	f7f7 feb2 	bl	8000168 <__aeabi_dsub>
 8008404:	4680      	mov	r8, r0
 8008406:	4689      	mov	r9, r1
 8008408:	2c00      	cmp	r4, #0
 800840a:	d044      	beq.n	8008496 <__kernel_rem_pio2+0x266>
 800840c:	465a      	mov	r2, fp
 800840e:	2000      	movs	r0, #0
 8008410:	4943      	ldr	r1, [pc, #268]	; (8008520 <__kernel_rem_pio2+0x2f0>)
 8008412:	f000 fcd1 	bl	8008db8 <scalbn>
 8008416:	4602      	mov	r2, r0
 8008418:	460b      	mov	r3, r1
 800841a:	4640      	mov	r0, r8
 800841c:	4649      	mov	r1, r9
 800841e:	f7f7 fea3 	bl	8000168 <__aeabi_dsub>
 8008422:	4680      	mov	r8, r0
 8008424:	4689      	mov	r9, r1
 8008426:	e036      	b.n	8008496 <__kernel_rem_pio2+0x266>
 8008428:	2200      	movs	r2, #0
 800842a:	4b3e      	ldr	r3, [pc, #248]	; (8008524 <__kernel_rem_pio2+0x2f4>)
 800842c:	4620      	mov	r0, r4
 800842e:	4629      	mov	r1, r5
 8008430:	f7f8 f852 	bl	80004d8 <__aeabi_dmul>
 8008434:	f7f8 fb00 	bl	8000a38 <__aeabi_d2iz>
 8008438:	f7f7 ffe4 	bl	8000404 <__aeabi_i2d>
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008444:	2200      	movs	r2, #0
 8008446:	4b38      	ldr	r3, [pc, #224]	; (8008528 <__kernel_rem_pio2+0x2f8>)
 8008448:	f7f8 f846 	bl	80004d8 <__aeabi_dmul>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	4620      	mov	r0, r4
 8008452:	4629      	mov	r1, r5
 8008454:	f7f7 fe88 	bl	8000168 <__aeabi_dsub>
 8008458:	f7f8 faee 	bl	8000a38 <__aeabi_d2iz>
 800845c:	9b00      	ldr	r3, [sp, #0]
 800845e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008462:	f843 0b04 	str.w	r0, [r3], #4
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800846c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008470:	f7f7 fe7c 	bl	800016c <__adddf3>
 8008474:	4604      	mov	r4, r0
 8008476:	460d      	mov	r5, r1
 8008478:	e75f      	b.n	800833a <__kernel_rem_pio2+0x10a>
 800847a:	d105      	bne.n	8008488 <__kernel_rem_pio2+0x258>
 800847c:	1e73      	subs	r3, r6, #1
 800847e:	aa0c      	add	r2, sp, #48	; 0x30
 8008480:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008484:	15c3      	asrs	r3, r0, #23
 8008486:	e79b      	b.n	80083c0 <__kernel_rem_pio2+0x190>
 8008488:	2200      	movs	r2, #0
 800848a:	4b28      	ldr	r3, [pc, #160]	; (800852c <__kernel_rem_pio2+0x2fc>)
 800848c:	f7f8 faaa 	bl	80009e4 <__aeabi_dcmpge>
 8008490:	2800      	cmp	r0, #0
 8008492:	d13e      	bne.n	8008512 <__kernel_rem_pio2+0x2e2>
 8008494:	9000      	str	r0, [sp, #0]
 8008496:	2200      	movs	r2, #0
 8008498:	2300      	movs	r3, #0
 800849a:	4640      	mov	r0, r8
 800849c:	4649      	mov	r1, r9
 800849e:	f7f8 fa83 	bl	80009a8 <__aeabi_dcmpeq>
 80084a2:	2800      	cmp	r0, #0
 80084a4:	f000 80b1 	beq.w	800860a <__kernel_rem_pio2+0x3da>
 80084a8:	1e74      	subs	r4, r6, #1
 80084aa:	4623      	mov	r3, r4
 80084ac:	2200      	movs	r2, #0
 80084ae:	9902      	ldr	r1, [sp, #8]
 80084b0:	428b      	cmp	r3, r1
 80084b2:	da5f      	bge.n	8008574 <__kernel_rem_pio2+0x344>
 80084b4:	2a00      	cmp	r2, #0
 80084b6:	d074      	beq.n	80085a2 <__kernel_rem_pio2+0x372>
 80084b8:	ab0c      	add	r3, sp, #48	; 0x30
 80084ba:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80084be:	f1ab 0b18 	sub.w	fp, fp, #24
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f000 809f 	beq.w	8008606 <__kernel_rem_pio2+0x3d6>
 80084c8:	465a      	mov	r2, fp
 80084ca:	2000      	movs	r0, #0
 80084cc:	4914      	ldr	r1, [pc, #80]	; (8008520 <__kernel_rem_pio2+0x2f0>)
 80084ce:	f000 fc73 	bl	8008db8 <scalbn>
 80084d2:	46a2      	mov	sl, r4
 80084d4:	4606      	mov	r6, r0
 80084d6:	460f      	mov	r7, r1
 80084d8:	f04f 0800 	mov.w	r8, #0
 80084dc:	ab70      	add	r3, sp, #448	; 0x1c0
 80084de:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8008524 <__kernel_rem_pio2+0x2f4>
 80084e2:	00e5      	lsls	r5, r4, #3
 80084e4:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80084e8:	f1ba 0f00 	cmp.w	sl, #0
 80084ec:	f280 80c3 	bge.w	8008676 <__kernel_rem_pio2+0x446>
 80084f0:	4626      	mov	r6, r4
 80084f2:	2e00      	cmp	r6, #0
 80084f4:	f2c0 80f5 	blt.w	80086e2 <__kernel_rem_pio2+0x4b2>
 80084f8:	4b0d      	ldr	r3, [pc, #52]	; (8008530 <__kernel_rem_pio2+0x300>)
 80084fa:	f04f 0a00 	mov.w	sl, #0
 80084fe:	9307      	str	r3, [sp, #28]
 8008500:	ab70      	add	r3, sp, #448	; 0x1c0
 8008502:	f04f 0b00 	mov.w	fp, #0
 8008506:	f04f 0800 	mov.w	r8, #0
 800850a:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800850e:	1ba7      	subs	r7, r4, r6
 8008510:	e0db      	b.n	80086ca <__kernel_rem_pio2+0x49a>
 8008512:	2302      	movs	r3, #2
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	e757      	b.n	80083c8 <__kernel_rem_pio2+0x198>
 8008518:	0800bf28 	.word	0x0800bf28
 800851c:	40200000 	.word	0x40200000
 8008520:	3ff00000 	.word	0x3ff00000
 8008524:	3e700000 	.word	0x3e700000
 8008528:	41700000 	.word	0x41700000
 800852c:	3fe00000 	.word	0x3fe00000
 8008530:	0800bee8 	.word	0x0800bee8
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	b944      	cbnz	r4, 800854a <__kernel_rem_pio2+0x31a>
 8008538:	b11b      	cbz	r3, 8008542 <__kernel_rem_pio2+0x312>
 800853a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800853e:	603b      	str	r3, [r7, #0]
 8008540:	2301      	movs	r3, #1
 8008542:	461c      	mov	r4, r3
 8008544:	3201      	adds	r2, #1
 8008546:	3704      	adds	r7, #4
 8008548:	e745      	b.n	80083d6 <__kernel_rem_pio2+0x1a6>
 800854a:	1acb      	subs	r3, r1, r3
 800854c:	603b      	str	r3, [r7, #0]
 800854e:	4623      	mov	r3, r4
 8008550:	e7f7      	b.n	8008542 <__kernel_rem_pio2+0x312>
 8008552:	1e72      	subs	r2, r6, #1
 8008554:	ab0c      	add	r3, sp, #48	; 0x30
 8008556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800855a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800855e:	a90c      	add	r1, sp, #48	; 0x30
 8008560:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008564:	e745      	b.n	80083f2 <__kernel_rem_pio2+0x1c2>
 8008566:	1e72      	subs	r2, r6, #1
 8008568:	ab0c      	add	r3, sp, #48	; 0x30
 800856a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800856e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008572:	e7f4      	b.n	800855e <__kernel_rem_pio2+0x32e>
 8008574:	a90c      	add	r1, sp, #48	; 0x30
 8008576:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800857a:	3b01      	subs	r3, #1
 800857c:	430a      	orrs	r2, r1
 800857e:	e796      	b.n	80084ae <__kernel_rem_pio2+0x27e>
 8008580:	3401      	adds	r4, #1
 8008582:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008586:	2a00      	cmp	r2, #0
 8008588:	d0fa      	beq.n	8008580 <__kernel_rem_pio2+0x350>
 800858a:	9b08      	ldr	r3, [sp, #32]
 800858c:	f106 0801 	add.w	r8, r6, #1
 8008590:	18f5      	adds	r5, r6, r3
 8008592:	ab20      	add	r3, sp, #128	; 0x80
 8008594:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008598:	4434      	add	r4, r6
 800859a:	4544      	cmp	r4, r8
 800859c:	da04      	bge.n	80085a8 <__kernel_rem_pio2+0x378>
 800859e:	4626      	mov	r6, r4
 80085a0:	e6bf      	b.n	8008322 <__kernel_rem_pio2+0xf2>
 80085a2:	2401      	movs	r4, #1
 80085a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085a6:	e7ec      	b.n	8008582 <__kernel_rem_pio2+0x352>
 80085a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085aa:	f04f 0900 	mov.w	r9, #0
 80085ae:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80085b2:	f7f7 ff27 	bl	8000404 <__aeabi_i2d>
 80085b6:	2600      	movs	r6, #0
 80085b8:	2700      	movs	r7, #0
 80085ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085bc:	e9c5 0100 	strd	r0, r1, [r5]
 80085c0:	3b08      	subs	r3, #8
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	9504      	str	r5, [sp, #16]
 80085c6:	9b07      	ldr	r3, [sp, #28]
 80085c8:	4599      	cmp	r9, r3
 80085ca:	dd05      	ble.n	80085d8 <__kernel_rem_pio2+0x3a8>
 80085cc:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80085d0:	f108 0801 	add.w	r8, r8, #1
 80085d4:	3508      	adds	r5, #8
 80085d6:	e7e0      	b.n	800859a <__kernel_rem_pio2+0x36a>
 80085d8:	f8dd c010 	ldr.w	ip, [sp, #16]
 80085dc:	9900      	ldr	r1, [sp, #0]
 80085de:	f109 0901 	add.w	r9, r9, #1
 80085e2:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80085e6:	9100      	str	r1, [sp, #0]
 80085e8:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 80085ec:	f8cd c010 	str.w	ip, [sp, #16]
 80085f0:	f7f7 ff72 	bl	80004d8 <__aeabi_dmul>
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	4630      	mov	r0, r6
 80085fa:	4639      	mov	r1, r7
 80085fc:	f7f7 fdb6 	bl	800016c <__adddf3>
 8008600:	4606      	mov	r6, r0
 8008602:	460f      	mov	r7, r1
 8008604:	e7df      	b.n	80085c6 <__kernel_rem_pio2+0x396>
 8008606:	3c01      	subs	r4, #1
 8008608:	e756      	b.n	80084b8 <__kernel_rem_pio2+0x288>
 800860a:	f1cb 0200 	rsb	r2, fp, #0
 800860e:	4640      	mov	r0, r8
 8008610:	4649      	mov	r1, r9
 8008612:	f000 fbd1 	bl	8008db8 <scalbn>
 8008616:	2200      	movs	r2, #0
 8008618:	4ba4      	ldr	r3, [pc, #656]	; (80088ac <__kernel_rem_pio2+0x67c>)
 800861a:	4604      	mov	r4, r0
 800861c:	460d      	mov	r5, r1
 800861e:	f7f8 f9e1 	bl	80009e4 <__aeabi_dcmpge>
 8008622:	b1f8      	cbz	r0, 8008664 <__kernel_rem_pio2+0x434>
 8008624:	2200      	movs	r2, #0
 8008626:	4ba2      	ldr	r3, [pc, #648]	; (80088b0 <__kernel_rem_pio2+0x680>)
 8008628:	4620      	mov	r0, r4
 800862a:	4629      	mov	r1, r5
 800862c:	f7f7 ff54 	bl	80004d8 <__aeabi_dmul>
 8008630:	f7f8 fa02 	bl	8000a38 <__aeabi_d2iz>
 8008634:	4607      	mov	r7, r0
 8008636:	f7f7 fee5 	bl	8000404 <__aeabi_i2d>
 800863a:	2200      	movs	r2, #0
 800863c:	4b9b      	ldr	r3, [pc, #620]	; (80088ac <__kernel_rem_pio2+0x67c>)
 800863e:	f7f7 ff4b 	bl	80004d8 <__aeabi_dmul>
 8008642:	460b      	mov	r3, r1
 8008644:	4602      	mov	r2, r0
 8008646:	4629      	mov	r1, r5
 8008648:	4620      	mov	r0, r4
 800864a:	f7f7 fd8d 	bl	8000168 <__aeabi_dsub>
 800864e:	f7f8 f9f3 	bl	8000a38 <__aeabi_d2iz>
 8008652:	1c74      	adds	r4, r6, #1
 8008654:	ab0c      	add	r3, sp, #48	; 0x30
 8008656:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800865a:	f10b 0b18 	add.w	fp, fp, #24
 800865e:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8008662:	e731      	b.n	80084c8 <__kernel_rem_pio2+0x298>
 8008664:	4620      	mov	r0, r4
 8008666:	4629      	mov	r1, r5
 8008668:	f7f8 f9e6 	bl	8000a38 <__aeabi_d2iz>
 800866c:	ab0c      	add	r3, sp, #48	; 0x30
 800866e:	4634      	mov	r4, r6
 8008670:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8008674:	e728      	b.n	80084c8 <__kernel_rem_pio2+0x298>
 8008676:	ab0c      	add	r3, sp, #48	; 0x30
 8008678:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800867c:	f7f7 fec2 	bl	8000404 <__aeabi_i2d>
 8008680:	4632      	mov	r2, r6
 8008682:	463b      	mov	r3, r7
 8008684:	f7f7 ff28 	bl	80004d8 <__aeabi_dmul>
 8008688:	4642      	mov	r2, r8
 800868a:	e86b 0102 	strd	r0, r1, [fp], #-8
 800868e:	464b      	mov	r3, r9
 8008690:	4630      	mov	r0, r6
 8008692:	4639      	mov	r1, r7
 8008694:	f7f7 ff20 	bl	80004d8 <__aeabi_dmul>
 8008698:	f10a 3aff 	add.w	sl, sl, #4294967295
 800869c:	4606      	mov	r6, r0
 800869e:	460f      	mov	r7, r1
 80086a0:	e722      	b.n	80084e8 <__kernel_rem_pio2+0x2b8>
 80086a2:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80086a6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80086aa:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80086ae:	f8cd c01c 	str.w	ip, [sp, #28]
 80086b2:	f7f7 ff11 	bl	80004d8 <__aeabi_dmul>
 80086b6:	4602      	mov	r2, r0
 80086b8:	460b      	mov	r3, r1
 80086ba:	4650      	mov	r0, sl
 80086bc:	4659      	mov	r1, fp
 80086be:	f7f7 fd55 	bl	800016c <__adddf3>
 80086c2:	4682      	mov	sl, r0
 80086c4:	468b      	mov	fp, r1
 80086c6:	f108 0801 	add.w	r8, r8, #1
 80086ca:	9b02      	ldr	r3, [sp, #8]
 80086cc:	4598      	cmp	r8, r3
 80086ce:	dc01      	bgt.n	80086d4 <__kernel_rem_pio2+0x4a4>
 80086d0:	45b8      	cmp	r8, r7
 80086d2:	dde6      	ble.n	80086a2 <__kernel_rem_pio2+0x472>
 80086d4:	ab48      	add	r3, sp, #288	; 0x120
 80086d6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80086da:	e9c7 ab00 	strd	sl, fp, [r7]
 80086de:	3e01      	subs	r6, #1
 80086e0:	e707      	b.n	80084f2 <__kernel_rem_pio2+0x2c2>
 80086e2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	dc09      	bgt.n	80086fc <__kernel_rem_pio2+0x4cc>
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	dc32      	bgt.n	8008752 <__kernel_rem_pio2+0x522>
 80086ec:	d05a      	beq.n	80087a4 <__kernel_rem_pio2+0x574>
 80086ee:	9b04      	ldr	r3, [sp, #16]
 80086f0:	f003 0007 	and.w	r0, r3, #7
 80086f4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80086f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086fc:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d1f5      	bne.n	80086ee <__kernel_rem_pio2+0x4be>
 8008702:	ab48      	add	r3, sp, #288	; 0x120
 8008704:	441d      	add	r5, r3
 8008706:	46aa      	mov	sl, r5
 8008708:	46a3      	mov	fp, r4
 800870a:	f1bb 0f00 	cmp.w	fp, #0
 800870e:	dc76      	bgt.n	80087fe <__kernel_rem_pio2+0x5ce>
 8008710:	46aa      	mov	sl, r5
 8008712:	46a3      	mov	fp, r4
 8008714:	f1bb 0f01 	cmp.w	fp, #1
 8008718:	f300 8090 	bgt.w	800883c <__kernel_rem_pio2+0x60c>
 800871c:	2700      	movs	r7, #0
 800871e:	463e      	mov	r6, r7
 8008720:	2c01      	cmp	r4, #1
 8008722:	f300 80aa 	bgt.w	800887a <__kernel_rem_pio2+0x64a>
 8008726:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800872a:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800872e:	9b00      	ldr	r3, [sp, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	f040 80ac 	bne.w	800888e <__kernel_rem_pio2+0x65e>
 8008736:	4603      	mov	r3, r0
 8008738:	462a      	mov	r2, r5
 800873a:	9806      	ldr	r0, [sp, #24]
 800873c:	e9c0 2300 	strd	r2, r3, [r0]
 8008740:	4622      	mov	r2, r4
 8008742:	460b      	mov	r3, r1
 8008744:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008748:	463a      	mov	r2, r7
 800874a:	4633      	mov	r3, r6
 800874c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008750:	e7cd      	b.n	80086ee <__kernel_rem_pio2+0x4be>
 8008752:	2000      	movs	r0, #0
 8008754:	46a0      	mov	r8, r4
 8008756:	4601      	mov	r1, r0
 8008758:	ab48      	add	r3, sp, #288	; 0x120
 800875a:	441d      	add	r5, r3
 800875c:	f1b8 0f00 	cmp.w	r8, #0
 8008760:	da3a      	bge.n	80087d8 <__kernel_rem_pio2+0x5a8>
 8008762:	9b00      	ldr	r3, [sp, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d03e      	beq.n	80087e6 <__kernel_rem_pio2+0x5b6>
 8008768:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800876c:	4602      	mov	r2, r0
 800876e:	462b      	mov	r3, r5
 8008770:	9d06      	ldr	r5, [sp, #24]
 8008772:	2601      	movs	r6, #1
 8008774:	e9c5 2300 	strd	r2, r3, [r5]
 8008778:	460b      	mov	r3, r1
 800877a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800877e:	f7f7 fcf3 	bl	8000168 <__aeabi_dsub>
 8008782:	4684      	mov	ip, r0
 8008784:	460f      	mov	r7, r1
 8008786:	ad48      	add	r5, sp, #288	; 0x120
 8008788:	42b4      	cmp	r4, r6
 800878a:	f105 0508 	add.w	r5, r5, #8
 800878e:	da2c      	bge.n	80087ea <__kernel_rem_pio2+0x5ba>
 8008790:	9b00      	ldr	r3, [sp, #0]
 8008792:	b10b      	cbz	r3, 8008798 <__kernel_rem_pio2+0x568>
 8008794:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8008798:	4662      	mov	r2, ip
 800879a:	463b      	mov	r3, r7
 800879c:	9906      	ldr	r1, [sp, #24]
 800879e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80087a2:	e7a4      	b.n	80086ee <__kernel_rem_pio2+0x4be>
 80087a4:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80087a6:	ab48      	add	r3, sp, #288	; 0x120
 80087a8:	4637      	mov	r7, r6
 80087aa:	441d      	add	r5, r3
 80087ac:	2c00      	cmp	r4, #0
 80087ae:	da09      	bge.n	80087c4 <__kernel_rem_pio2+0x594>
 80087b0:	9b00      	ldr	r3, [sp, #0]
 80087b2:	b10b      	cbz	r3, 80087b8 <__kernel_rem_pio2+0x588>
 80087b4:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80087b8:	4632      	mov	r2, r6
 80087ba:	463b      	mov	r3, r7
 80087bc:	9906      	ldr	r1, [sp, #24]
 80087be:	e9c1 2300 	strd	r2, r3, [r1]
 80087c2:	e794      	b.n	80086ee <__kernel_rem_pio2+0x4be>
 80087c4:	4630      	mov	r0, r6
 80087c6:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80087ca:	4639      	mov	r1, r7
 80087cc:	f7f7 fcce 	bl	800016c <__adddf3>
 80087d0:	3c01      	subs	r4, #1
 80087d2:	4606      	mov	r6, r0
 80087d4:	460f      	mov	r7, r1
 80087d6:	e7e9      	b.n	80087ac <__kernel_rem_pio2+0x57c>
 80087d8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80087dc:	f7f7 fcc6 	bl	800016c <__adddf3>
 80087e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80087e4:	e7ba      	b.n	800875c <__kernel_rem_pio2+0x52c>
 80087e6:	460d      	mov	r5, r1
 80087e8:	e7c0      	b.n	800876c <__kernel_rem_pio2+0x53c>
 80087ea:	4660      	mov	r0, ip
 80087ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80087f0:	4639      	mov	r1, r7
 80087f2:	f7f7 fcbb 	bl	800016c <__adddf3>
 80087f6:	3601      	adds	r6, #1
 80087f8:	4684      	mov	ip, r0
 80087fa:	460f      	mov	r7, r1
 80087fc:	e7c4      	b.n	8008788 <__kernel_rem_pio2+0x558>
 80087fe:	e9da 6700 	ldrd	r6, r7, [sl]
 8008802:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8008806:	4632      	mov	r2, r6
 8008808:	463b      	mov	r3, r7
 800880a:	4640      	mov	r0, r8
 800880c:	4649      	mov	r1, r9
 800880e:	f7f7 fcad 	bl	800016c <__adddf3>
 8008812:	4602      	mov	r2, r0
 8008814:	460b      	mov	r3, r1
 8008816:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800881a:	4640      	mov	r0, r8
 800881c:	4649      	mov	r1, r9
 800881e:	f7f7 fca3 	bl	8000168 <__aeabi_dsub>
 8008822:	4632      	mov	r2, r6
 8008824:	463b      	mov	r3, r7
 8008826:	f7f7 fca1 	bl	800016c <__adddf3>
 800882a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800882e:	e86a 0102 	strd	r0, r1, [sl], #-8
 8008832:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008836:	e9ca 2300 	strd	r2, r3, [sl]
 800883a:	e766      	b.n	800870a <__kernel_rem_pio2+0x4da>
 800883c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008840:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8008844:	4642      	mov	r2, r8
 8008846:	464b      	mov	r3, r9
 8008848:	4630      	mov	r0, r6
 800884a:	4639      	mov	r1, r7
 800884c:	f7f7 fc8e 	bl	800016c <__adddf3>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008858:	4630      	mov	r0, r6
 800885a:	4639      	mov	r1, r7
 800885c:	f7f7 fc84 	bl	8000168 <__aeabi_dsub>
 8008860:	4642      	mov	r2, r8
 8008862:	464b      	mov	r3, r9
 8008864:	f7f7 fc82 	bl	800016c <__adddf3>
 8008868:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800886c:	e86a 0102 	strd	r0, r1, [sl], #-8
 8008870:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008874:	e9ca 2300 	strd	r2, r3, [sl]
 8008878:	e74c      	b.n	8008714 <__kernel_rem_pio2+0x4e4>
 800887a:	4638      	mov	r0, r7
 800887c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8008880:	4631      	mov	r1, r6
 8008882:	f7f7 fc73 	bl	800016c <__adddf3>
 8008886:	3c01      	subs	r4, #1
 8008888:	4607      	mov	r7, r0
 800888a:	460e      	mov	r6, r1
 800888c:	e748      	b.n	8008720 <__kernel_rem_pio2+0x4f0>
 800888e:	9b06      	ldr	r3, [sp, #24]
 8008890:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008894:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008898:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800889c:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80088a0:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80088a4:	601d      	str	r5, [r3, #0]
 80088a6:	615e      	str	r6, [r3, #20]
 80088a8:	e721      	b.n	80086ee <__kernel_rem_pio2+0x4be>
 80088aa:	bf00      	nop
 80088ac:	41700000 	.word	0x41700000
 80088b0:	3e700000 	.word	0x3e700000
 80088b4:	00000000 	.word	0x00000000

080088b8 <__kernel_tan>:
 80088b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088bc:	b08b      	sub	sp, #44	; 0x2c
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	4bd9      	ldr	r3, [pc, #868]	; (8008c28 <__kernel_tan+0x370>)
 80088c2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80088c6:	429e      	cmp	r6, r3
 80088c8:	4604      	mov	r4, r0
 80088ca:	460d      	mov	r5, r1
 80088cc:	4682      	mov	sl, r0
 80088ce:	468b      	mov	fp, r1
 80088d0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80088d2:	9202      	str	r2, [sp, #8]
 80088d4:	9107      	str	r1, [sp, #28]
 80088d6:	dc58      	bgt.n	800898a <__kernel_tan+0xd2>
 80088d8:	f7f8 f8ae 	bl	8000a38 <__aeabi_d2iz>
 80088dc:	4605      	mov	r5, r0
 80088de:	2800      	cmp	r0, #0
 80088e0:	d178      	bne.n	80089d4 <__kernel_tan+0x11c>
 80088e2:	1c7b      	adds	r3, r7, #1
 80088e4:	4323      	orrs	r3, r4
 80088e6:	4333      	orrs	r3, r6
 80088e8:	d110      	bne.n	800890c <__kernel_tan+0x54>
 80088ea:	4620      	mov	r0, r4
 80088ec:	4659      	mov	r1, fp
 80088ee:	f000 f9df 	bl	8008cb0 <fabs>
 80088f2:	4602      	mov	r2, r0
 80088f4:	460b      	mov	r3, r1
 80088f6:	2000      	movs	r0, #0
 80088f8:	49cc      	ldr	r1, [pc, #816]	; (8008c2c <__kernel_tan+0x374>)
 80088fa:	f7f7 ff17 	bl	800072c <__aeabi_ddiv>
 80088fe:	4682      	mov	sl, r0
 8008900:	468b      	mov	fp, r1
 8008902:	4650      	mov	r0, sl
 8008904:	4659      	mov	r1, fp
 8008906:	b00b      	add	sp, #44	; 0x2c
 8008908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800890c:	2f01      	cmp	r7, #1
 800890e:	d0f8      	beq.n	8008902 <__kernel_tan+0x4a>
 8008910:	4620      	mov	r0, r4
 8008912:	4659      	mov	r1, fp
 8008914:	9a02      	ldr	r2, [sp, #8]
 8008916:	9b00      	ldr	r3, [sp, #0]
 8008918:	f7f7 fc28 	bl	800016c <__adddf3>
 800891c:	4602      	mov	r2, r0
 800891e:	460b      	mov	r3, r1
 8008920:	460f      	mov	r7, r1
 8008922:	2000      	movs	r0, #0
 8008924:	49c2      	ldr	r1, [pc, #776]	; (8008c30 <__kernel_tan+0x378>)
 8008926:	f7f7 ff01 	bl	800072c <__aeabi_ddiv>
 800892a:	462e      	mov	r6, r5
 800892c:	4689      	mov	r9, r1
 800892e:	4652      	mov	r2, sl
 8008930:	465b      	mov	r3, fp
 8008932:	4680      	mov	r8, r0
 8008934:	462c      	mov	r4, r5
 8008936:	4630      	mov	r0, r6
 8008938:	460d      	mov	r5, r1
 800893a:	4639      	mov	r1, r7
 800893c:	f7f7 fc14 	bl	8000168 <__aeabi_dsub>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	9802      	ldr	r0, [sp, #8]
 8008946:	9900      	ldr	r1, [sp, #0]
 8008948:	f7f7 fc0e 	bl	8000168 <__aeabi_dsub>
 800894c:	4632      	mov	r2, r6
 800894e:	464b      	mov	r3, r9
 8008950:	f7f7 fdc2 	bl	80004d8 <__aeabi_dmul>
 8008954:	4632      	mov	r2, r6
 8008956:	4682      	mov	sl, r0
 8008958:	468b      	mov	fp, r1
 800895a:	464b      	mov	r3, r9
 800895c:	4630      	mov	r0, r6
 800895e:	4639      	mov	r1, r7
 8008960:	f7f7 fdba 	bl	80004d8 <__aeabi_dmul>
 8008964:	2200      	movs	r2, #0
 8008966:	4bb1      	ldr	r3, [pc, #708]	; (8008c2c <__kernel_tan+0x374>)
 8008968:	f7f7 fc00 	bl	800016c <__adddf3>
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	4650      	mov	r0, sl
 8008972:	4659      	mov	r1, fp
 8008974:	f7f7 fbfa 	bl	800016c <__adddf3>
 8008978:	4642      	mov	r2, r8
 800897a:	464b      	mov	r3, r9
 800897c:	f7f7 fdac 	bl	80004d8 <__aeabi_dmul>
 8008980:	4622      	mov	r2, r4
 8008982:	462b      	mov	r3, r5
 8008984:	f7f7 fbf2 	bl	800016c <__adddf3>
 8008988:	e7b9      	b.n	80088fe <__kernel_tan+0x46>
 800898a:	4baa      	ldr	r3, [pc, #680]	; (8008c34 <__kernel_tan+0x37c>)
 800898c:	429e      	cmp	r6, r3
 800898e:	dd21      	ble.n	80089d4 <__kernel_tan+0x11c>
 8008990:	2900      	cmp	r1, #0
 8008992:	da06      	bge.n	80089a2 <__kernel_tan+0xea>
 8008994:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008998:	469b      	mov	fp, r3
 800899a:	9b00      	ldr	r3, [sp, #0]
 800899c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80089a0:	9300      	str	r3, [sp, #0]
 80089a2:	4652      	mov	r2, sl
 80089a4:	a182      	add	r1, pc, #520	; (adr r1, 8008bb0 <__kernel_tan+0x2f8>)
 80089a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089aa:	465b      	mov	r3, fp
 80089ac:	f7f7 fbdc 	bl	8000168 <__aeabi_dsub>
 80089b0:	4604      	mov	r4, r0
 80089b2:	460d      	mov	r5, r1
 80089b4:	a180      	add	r1, pc, #512	; (adr r1, 8008bb8 <__kernel_tan+0x300>)
 80089b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089ba:	9a02      	ldr	r2, [sp, #8]
 80089bc:	9b00      	ldr	r3, [sp, #0]
 80089be:	f7f7 fbd3 	bl	8000168 <__aeabi_dsub>
 80089c2:	462b      	mov	r3, r5
 80089c4:	4622      	mov	r2, r4
 80089c6:	f7f7 fbd1 	bl	800016c <__adddf3>
 80089ca:	2300      	movs	r3, #0
 80089cc:	4682      	mov	sl, r0
 80089ce:	468b      	mov	fp, r1
 80089d0:	9302      	str	r3, [sp, #8]
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	4652      	mov	r2, sl
 80089d6:	465b      	mov	r3, fp
 80089d8:	4650      	mov	r0, sl
 80089da:	4659      	mov	r1, fp
 80089dc:	f7f7 fd7c 	bl	80004d8 <__aeabi_dmul>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	4680      	mov	r8, r0
 80089e6:	4689      	mov	r9, r1
 80089e8:	f7f7 fd76 	bl	80004d8 <__aeabi_dmul>
 80089ec:	4642      	mov	r2, r8
 80089ee:	4604      	mov	r4, r0
 80089f0:	460d      	mov	r5, r1
 80089f2:	464b      	mov	r3, r9
 80089f4:	4650      	mov	r0, sl
 80089f6:	4659      	mov	r1, fp
 80089f8:	f7f7 fd6e 	bl	80004d8 <__aeabi_dmul>
 80089fc:	a370      	add	r3, pc, #448	; (adr r3, 8008bc0 <__kernel_tan+0x308>)
 80089fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a06:	4620      	mov	r0, r4
 8008a08:	4629      	mov	r1, r5
 8008a0a:	f7f7 fd65 	bl	80004d8 <__aeabi_dmul>
 8008a0e:	a36e      	add	r3, pc, #440	; (adr r3, 8008bc8 <__kernel_tan+0x310>)
 8008a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a14:	f7f7 fbaa 	bl	800016c <__adddf3>
 8008a18:	4622      	mov	r2, r4
 8008a1a:	462b      	mov	r3, r5
 8008a1c:	f7f7 fd5c 	bl	80004d8 <__aeabi_dmul>
 8008a20:	a36b      	add	r3, pc, #428	; (adr r3, 8008bd0 <__kernel_tan+0x318>)
 8008a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a26:	f7f7 fba1 	bl	800016c <__adddf3>
 8008a2a:	4622      	mov	r2, r4
 8008a2c:	462b      	mov	r3, r5
 8008a2e:	f7f7 fd53 	bl	80004d8 <__aeabi_dmul>
 8008a32:	a369      	add	r3, pc, #420	; (adr r3, 8008bd8 <__kernel_tan+0x320>)
 8008a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a38:	f7f7 fb98 	bl	800016c <__adddf3>
 8008a3c:	4622      	mov	r2, r4
 8008a3e:	462b      	mov	r3, r5
 8008a40:	f7f7 fd4a 	bl	80004d8 <__aeabi_dmul>
 8008a44:	a366      	add	r3, pc, #408	; (adr r3, 8008be0 <__kernel_tan+0x328>)
 8008a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4a:	f7f7 fb8f 	bl	800016c <__adddf3>
 8008a4e:	4622      	mov	r2, r4
 8008a50:	462b      	mov	r3, r5
 8008a52:	f7f7 fd41 	bl	80004d8 <__aeabi_dmul>
 8008a56:	a364      	add	r3, pc, #400	; (adr r3, 8008be8 <__kernel_tan+0x330>)
 8008a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5c:	f7f7 fb86 	bl	800016c <__adddf3>
 8008a60:	4642      	mov	r2, r8
 8008a62:	464b      	mov	r3, r9
 8008a64:	f7f7 fd38 	bl	80004d8 <__aeabi_dmul>
 8008a68:	a361      	add	r3, pc, #388	; (adr r3, 8008bf0 <__kernel_tan+0x338>)
 8008a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008a72:	4620      	mov	r0, r4
 8008a74:	4629      	mov	r1, r5
 8008a76:	f7f7 fd2f 	bl	80004d8 <__aeabi_dmul>
 8008a7a:	a35f      	add	r3, pc, #380	; (adr r3, 8008bf8 <__kernel_tan+0x340>)
 8008a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a80:	f7f7 fb74 	bl	800016c <__adddf3>
 8008a84:	4622      	mov	r2, r4
 8008a86:	462b      	mov	r3, r5
 8008a88:	f7f7 fd26 	bl	80004d8 <__aeabi_dmul>
 8008a8c:	a35c      	add	r3, pc, #368	; (adr r3, 8008c00 <__kernel_tan+0x348>)
 8008a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a92:	f7f7 fb6b 	bl	800016c <__adddf3>
 8008a96:	4622      	mov	r2, r4
 8008a98:	462b      	mov	r3, r5
 8008a9a:	f7f7 fd1d 	bl	80004d8 <__aeabi_dmul>
 8008a9e:	a35a      	add	r3, pc, #360	; (adr r3, 8008c08 <__kernel_tan+0x350>)
 8008aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa4:	f7f7 fb62 	bl	800016c <__adddf3>
 8008aa8:	4622      	mov	r2, r4
 8008aaa:	462b      	mov	r3, r5
 8008aac:	f7f7 fd14 	bl	80004d8 <__aeabi_dmul>
 8008ab0:	a357      	add	r3, pc, #348	; (adr r3, 8008c10 <__kernel_tan+0x358>)
 8008ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab6:	f7f7 fb59 	bl	800016c <__adddf3>
 8008aba:	4622      	mov	r2, r4
 8008abc:	462b      	mov	r3, r5
 8008abe:	f7f7 fd0b 	bl	80004d8 <__aeabi_dmul>
 8008ac2:	a355      	add	r3, pc, #340	; (adr r3, 8008c18 <__kernel_tan+0x360>)
 8008ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac8:	f7f7 fb50 	bl	800016c <__adddf3>
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008ad4:	f7f7 fb4a 	bl	800016c <__adddf3>
 8008ad8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008adc:	f7f7 fcfc 	bl	80004d8 <__aeabi_dmul>
 8008ae0:	9a02      	ldr	r2, [sp, #8]
 8008ae2:	9b00      	ldr	r3, [sp, #0]
 8008ae4:	f7f7 fb42 	bl	800016c <__adddf3>
 8008ae8:	4642      	mov	r2, r8
 8008aea:	464b      	mov	r3, r9
 8008aec:	f7f7 fcf4 	bl	80004d8 <__aeabi_dmul>
 8008af0:	9a02      	ldr	r2, [sp, #8]
 8008af2:	9b00      	ldr	r3, [sp, #0]
 8008af4:	f7f7 fb3a 	bl	800016c <__adddf3>
 8008af8:	a349      	add	r3, pc, #292	; (adr r3, 8008c20 <__kernel_tan+0x368>)
 8008afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afe:	4604      	mov	r4, r0
 8008b00:	460d      	mov	r5, r1
 8008b02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b06:	f7f7 fce7 	bl	80004d8 <__aeabi_dmul>
 8008b0a:	4622      	mov	r2, r4
 8008b0c:	462b      	mov	r3, r5
 8008b0e:	f7f7 fb2d 	bl	800016c <__adddf3>
 8008b12:	460b      	mov	r3, r1
 8008b14:	e9cd 0100 	strd	r0, r1, [sp]
 8008b18:	4602      	mov	r2, r0
 8008b1a:	4659      	mov	r1, fp
 8008b1c:	4650      	mov	r0, sl
 8008b1e:	f7f7 fb25 	bl	800016c <__adddf3>
 8008b22:	4b44      	ldr	r3, [pc, #272]	; (8008c34 <__kernel_tan+0x37c>)
 8008b24:	4604      	mov	r4, r0
 8008b26:	429e      	cmp	r6, r3
 8008b28:	460d      	mov	r5, r1
 8008b2a:	f340 8085 	ble.w	8008c38 <__kernel_tan+0x380>
 8008b2e:	4638      	mov	r0, r7
 8008b30:	f7f7 fc68 	bl	8000404 <__aeabi_i2d>
 8008b34:	4622      	mov	r2, r4
 8008b36:	4680      	mov	r8, r0
 8008b38:	4689      	mov	r9, r1
 8008b3a:	462b      	mov	r3, r5
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	4629      	mov	r1, r5
 8008b40:	f7f7 fcca 	bl	80004d8 <__aeabi_dmul>
 8008b44:	4642      	mov	r2, r8
 8008b46:	4606      	mov	r6, r0
 8008b48:	460f      	mov	r7, r1
 8008b4a:	464b      	mov	r3, r9
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	4629      	mov	r1, r5
 8008b50:	f7f7 fb0c 	bl	800016c <__adddf3>
 8008b54:	4602      	mov	r2, r0
 8008b56:	460b      	mov	r3, r1
 8008b58:	4630      	mov	r0, r6
 8008b5a:	4639      	mov	r1, r7
 8008b5c:	f7f7 fde6 	bl	800072c <__aeabi_ddiv>
 8008b60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b64:	f7f7 fb00 	bl	8000168 <__aeabi_dsub>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	4650      	mov	r0, sl
 8008b6e:	4659      	mov	r1, fp
 8008b70:	f7f7 fafa 	bl	8000168 <__aeabi_dsub>
 8008b74:	4602      	mov	r2, r0
 8008b76:	460b      	mov	r3, r1
 8008b78:	f7f7 faf8 	bl	800016c <__adddf3>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4640      	mov	r0, r8
 8008b82:	4649      	mov	r1, r9
 8008b84:	f7f7 faf0 	bl	8000168 <__aeabi_dsub>
 8008b88:	9b07      	ldr	r3, [sp, #28]
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	179b      	asrs	r3, r3, #30
 8008b8e:	f003 0302 	and.w	r3, r3, #2
 8008b92:	f1c3 0001 	rsb	r0, r3, #1
 8008b96:	460d      	mov	r5, r1
 8008b98:	f7f7 fc34 	bl	8000404 <__aeabi_i2d>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	4629      	mov	r1, r5
 8008ba4:	f7f7 fc98 	bl	80004d8 <__aeabi_dmul>
 8008ba8:	e6a9      	b.n	80088fe <__kernel_tan+0x46>
 8008baa:	bf00      	nop
 8008bac:	f3af 8000 	nop.w
 8008bb0:	54442d18 	.word	0x54442d18
 8008bb4:	3fe921fb 	.word	0x3fe921fb
 8008bb8:	33145c07 	.word	0x33145c07
 8008bbc:	3c81a626 	.word	0x3c81a626
 8008bc0:	74bf7ad4 	.word	0x74bf7ad4
 8008bc4:	3efb2a70 	.word	0x3efb2a70
 8008bc8:	32f0a7e9 	.word	0x32f0a7e9
 8008bcc:	3f12b80f 	.word	0x3f12b80f
 8008bd0:	1a8d1068 	.word	0x1a8d1068
 8008bd4:	3f3026f7 	.word	0x3f3026f7
 8008bd8:	fee08315 	.word	0xfee08315
 8008bdc:	3f57dbc8 	.word	0x3f57dbc8
 8008be0:	e96e8493 	.word	0xe96e8493
 8008be4:	3f8226e3 	.word	0x3f8226e3
 8008be8:	1bb341fe 	.word	0x1bb341fe
 8008bec:	3faba1ba 	.word	0x3faba1ba
 8008bf0:	db605373 	.word	0xdb605373
 8008bf4:	bef375cb 	.word	0xbef375cb
 8008bf8:	a03792a6 	.word	0xa03792a6
 8008bfc:	3f147e88 	.word	0x3f147e88
 8008c00:	f2f26501 	.word	0xf2f26501
 8008c04:	3f4344d8 	.word	0x3f4344d8
 8008c08:	c9560328 	.word	0xc9560328
 8008c0c:	3f6d6d22 	.word	0x3f6d6d22
 8008c10:	8406d637 	.word	0x8406d637
 8008c14:	3f9664f4 	.word	0x3f9664f4
 8008c18:	1110fe7a 	.word	0x1110fe7a
 8008c1c:	3fc11111 	.word	0x3fc11111
 8008c20:	55555563 	.word	0x55555563
 8008c24:	3fd55555 	.word	0x3fd55555
 8008c28:	3e2fffff 	.word	0x3e2fffff
 8008c2c:	3ff00000 	.word	0x3ff00000
 8008c30:	bff00000 	.word	0xbff00000
 8008c34:	3fe59427 	.word	0x3fe59427
 8008c38:	2f01      	cmp	r7, #1
 8008c3a:	d031      	beq.n	8008ca0 <__kernel_tan+0x3e8>
 8008c3c:	460f      	mov	r7, r1
 8008c3e:	4602      	mov	r2, r0
 8008c40:	460b      	mov	r3, r1
 8008c42:	2000      	movs	r0, #0
 8008c44:	4918      	ldr	r1, [pc, #96]	; (8008ca8 <__kernel_tan+0x3f0>)
 8008c46:	f7f7 fd71 	bl	800072c <__aeabi_ddiv>
 8008c4a:	2600      	movs	r6, #0
 8008c4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008c54:	4652      	mov	r2, sl
 8008c56:	465b      	mov	r3, fp
 8008c58:	4630      	mov	r0, r6
 8008c5a:	4639      	mov	r1, r7
 8008c5c:	f7f7 fa84 	bl	8000168 <__aeabi_dsub>
 8008c60:	4602      	mov	r2, r0
 8008c62:	460b      	mov	r3, r1
 8008c64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c68:	f7f7 fa7e 	bl	8000168 <__aeabi_dsub>
 8008c6c:	4632      	mov	r2, r6
 8008c6e:	462b      	mov	r3, r5
 8008c70:	f7f7 fc32 	bl	80004d8 <__aeabi_dmul>
 8008c74:	4632      	mov	r2, r6
 8008c76:	4682      	mov	sl, r0
 8008c78:	468b      	mov	fp, r1
 8008c7a:	462b      	mov	r3, r5
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	4639      	mov	r1, r7
 8008c80:	f7f7 fc2a 	bl	80004d8 <__aeabi_dmul>
 8008c84:	2200      	movs	r2, #0
 8008c86:	4b09      	ldr	r3, [pc, #36]	; (8008cac <__kernel_tan+0x3f4>)
 8008c88:	f7f7 fa70 	bl	800016c <__adddf3>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4650      	mov	r0, sl
 8008c92:	4659      	mov	r1, fp
 8008c94:	f7f7 fa6a 	bl	800016c <__adddf3>
 8008c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c9c:	4634      	mov	r4, r6
 8008c9e:	e66d      	b.n	800897c <__kernel_tan+0xc4>
 8008ca0:	4682      	mov	sl, r0
 8008ca2:	468b      	mov	fp, r1
 8008ca4:	e62d      	b.n	8008902 <__kernel_tan+0x4a>
 8008ca6:	bf00      	nop
 8008ca8:	bff00000 	.word	0xbff00000
 8008cac:	3ff00000 	.word	0x3ff00000

08008cb0 <fabs>:
 8008cb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008cb4:	4770      	bx	lr
	...

08008cb8 <floor>:
 8008cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cbc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8008cc0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8008cc4:	2e13      	cmp	r6, #19
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	4607      	mov	r7, r0
 8008ccc:	460c      	mov	r4, r1
 8008cce:	4605      	mov	r5, r0
 8008cd0:	dc33      	bgt.n	8008d3a <floor+0x82>
 8008cd2:	2e00      	cmp	r6, #0
 8008cd4:	da14      	bge.n	8008d00 <floor+0x48>
 8008cd6:	a334      	add	r3, pc, #208	; (adr r3, 8008da8 <floor+0xf0>)
 8008cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cdc:	f7f7 fa46 	bl	800016c <__adddf3>
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f7f7 fe88 	bl	80009f8 <__aeabi_dcmpgt>
 8008ce8:	b138      	cbz	r0, 8008cfa <floor+0x42>
 8008cea:	2c00      	cmp	r4, #0
 8008cec:	da58      	bge.n	8008da0 <floor+0xe8>
 8008cee:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008cf2:	431d      	orrs	r5, r3
 8008cf4:	d001      	beq.n	8008cfa <floor+0x42>
 8008cf6:	2500      	movs	r5, #0
 8008cf8:	4c2d      	ldr	r4, [pc, #180]	; (8008db0 <floor+0xf8>)
 8008cfa:	4623      	mov	r3, r4
 8008cfc:	462f      	mov	r7, r5
 8008cfe:	e025      	b.n	8008d4c <floor+0x94>
 8008d00:	4a2c      	ldr	r2, [pc, #176]	; (8008db4 <floor+0xfc>)
 8008d02:	fa42 f806 	asr.w	r8, r2, r6
 8008d06:	ea01 0208 	and.w	r2, r1, r8
 8008d0a:	4302      	orrs	r2, r0
 8008d0c:	d01e      	beq.n	8008d4c <floor+0x94>
 8008d0e:	a326      	add	r3, pc, #152	; (adr r3, 8008da8 <floor+0xf0>)
 8008d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d14:	f7f7 fa2a 	bl	800016c <__adddf3>
 8008d18:	2200      	movs	r2, #0
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f7f7 fe6c 	bl	80009f8 <__aeabi_dcmpgt>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d0ea      	beq.n	8008cfa <floor+0x42>
 8008d24:	2c00      	cmp	r4, #0
 8008d26:	bfbe      	ittt	lt
 8008d28:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008d2c:	fa43 f606 	asrlt.w	r6, r3, r6
 8008d30:	19a4      	addlt	r4, r4, r6
 8008d32:	2500      	movs	r5, #0
 8008d34:	ea24 0408 	bic.w	r4, r4, r8
 8008d38:	e7df      	b.n	8008cfa <floor+0x42>
 8008d3a:	2e33      	cmp	r6, #51	; 0x33
 8008d3c:	dd0a      	ble.n	8008d54 <floor+0x9c>
 8008d3e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008d42:	d103      	bne.n	8008d4c <floor+0x94>
 8008d44:	f7f7 fa12 	bl	800016c <__adddf3>
 8008d48:	4607      	mov	r7, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4638      	mov	r0, r7
 8008d4e:	4619      	mov	r1, r3
 8008d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d54:	f04f 32ff 	mov.w	r2, #4294967295
 8008d58:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8008d5c:	fa22 f808 	lsr.w	r8, r2, r8
 8008d60:	ea18 0f00 	tst.w	r8, r0
 8008d64:	d0f2      	beq.n	8008d4c <floor+0x94>
 8008d66:	a310      	add	r3, pc, #64	; (adr r3, 8008da8 <floor+0xf0>)
 8008d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6c:	f7f7 f9fe 	bl	800016c <__adddf3>
 8008d70:	2200      	movs	r2, #0
 8008d72:	2300      	movs	r3, #0
 8008d74:	f7f7 fe40 	bl	80009f8 <__aeabi_dcmpgt>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d0be      	beq.n	8008cfa <floor+0x42>
 8008d7c:	2c00      	cmp	r4, #0
 8008d7e:	da02      	bge.n	8008d86 <floor+0xce>
 8008d80:	2e14      	cmp	r6, #20
 8008d82:	d103      	bne.n	8008d8c <floor+0xd4>
 8008d84:	3401      	adds	r4, #1
 8008d86:	ea25 0508 	bic.w	r5, r5, r8
 8008d8a:	e7b6      	b.n	8008cfa <floor+0x42>
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008d92:	fa03 f606 	lsl.w	r6, r3, r6
 8008d96:	4435      	add	r5, r6
 8008d98:	42bd      	cmp	r5, r7
 8008d9a:	bf38      	it	cc
 8008d9c:	18e4      	addcc	r4, r4, r3
 8008d9e:	e7f2      	b.n	8008d86 <floor+0xce>
 8008da0:	2500      	movs	r5, #0
 8008da2:	462c      	mov	r4, r5
 8008da4:	e7a9      	b.n	8008cfa <floor+0x42>
 8008da6:	bf00      	nop
 8008da8:	8800759c 	.word	0x8800759c
 8008dac:	7e37e43c 	.word	0x7e37e43c
 8008db0:	bff00000 	.word	0xbff00000
 8008db4:	000fffff 	.word	0x000fffff

08008db8 <scalbn>:
 8008db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dba:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	460d      	mov	r5, r1
 8008dc2:	4617      	mov	r7, r2
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	b996      	cbnz	r6, 8008dee <scalbn+0x36>
 8008dc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008dcc:	4303      	orrs	r3, r0
 8008dce:	d039      	beq.n	8008e44 <scalbn+0x8c>
 8008dd0:	4b33      	ldr	r3, [pc, #204]	; (8008ea0 <scalbn+0xe8>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f7f7 fb80 	bl	80004d8 <__aeabi_dmul>
 8008dd8:	4b32      	ldr	r3, [pc, #200]	; (8008ea4 <scalbn+0xec>)
 8008dda:	4604      	mov	r4, r0
 8008ddc:	429f      	cmp	r7, r3
 8008dde:	460d      	mov	r5, r1
 8008de0:	da0f      	bge.n	8008e02 <scalbn+0x4a>
 8008de2:	a32b      	add	r3, pc, #172	; (adr r3, 8008e90 <scalbn+0xd8>)
 8008de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de8:	f7f7 fb76 	bl	80004d8 <__aeabi_dmul>
 8008dec:	e006      	b.n	8008dfc <scalbn+0x44>
 8008dee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008df2:	4296      	cmp	r6, r2
 8008df4:	d10a      	bne.n	8008e0c <scalbn+0x54>
 8008df6:	4602      	mov	r2, r0
 8008df8:	f7f7 f9b8 	bl	800016c <__adddf3>
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	460d      	mov	r5, r1
 8008e00:	e020      	b.n	8008e44 <scalbn+0x8c>
 8008e02:	460b      	mov	r3, r1
 8008e04:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008e08:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8008e0c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008e10:	19b9      	adds	r1, r7, r6
 8008e12:	4291      	cmp	r1, r2
 8008e14:	dd0e      	ble.n	8008e34 <scalbn+0x7c>
 8008e16:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008e1a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8008e1e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008e22:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8008e26:	4820      	ldr	r0, [pc, #128]	; (8008ea8 <scalbn+0xf0>)
 8008e28:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8008e2c:	a31a      	add	r3, pc, #104	; (adr r3, 8008e98 <scalbn+0xe0>)
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	e7d9      	b.n	8008de8 <scalbn+0x30>
 8008e34:	2900      	cmp	r1, #0
 8008e36:	dd08      	ble.n	8008e4a <scalbn+0x92>
 8008e38:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008e3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008e40:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008e44:	4620      	mov	r0, r4
 8008e46:	4629      	mov	r1, r5
 8008e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e4a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8008e4e:	da12      	bge.n	8008e76 <scalbn+0xbe>
 8008e50:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008e54:	429f      	cmp	r7, r3
 8008e56:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8008e5a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8008e5e:	dcdc      	bgt.n	8008e1a <scalbn+0x62>
 8008e60:	a30b      	add	r3, pc, #44	; (adr r3, 8008e90 <scalbn+0xd8>)
 8008e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e66:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8008e6a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8008e6e:	480f      	ldr	r0, [pc, #60]	; (8008eac <scalbn+0xf4>)
 8008e70:	f041 011f 	orr.w	r1, r1, #31
 8008e74:	e7b8      	b.n	8008de8 <scalbn+0x30>
 8008e76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008e7a:	3136      	adds	r1, #54	; 0x36
 8008e7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008e80:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008e84:	4620      	mov	r0, r4
 8008e86:	4629      	mov	r1, r5
 8008e88:	2200      	movs	r2, #0
 8008e8a:	4b09      	ldr	r3, [pc, #36]	; (8008eb0 <scalbn+0xf8>)
 8008e8c:	e7ac      	b.n	8008de8 <scalbn+0x30>
 8008e8e:	bf00      	nop
 8008e90:	c2f8f359 	.word	0xc2f8f359
 8008e94:	01a56e1f 	.word	0x01a56e1f
 8008e98:	8800759c 	.word	0x8800759c
 8008e9c:	7e37e43c 	.word	0x7e37e43c
 8008ea0:	43500000 	.word	0x43500000
 8008ea4:	ffff3cb0 	.word	0xffff3cb0
 8008ea8:	8800759c 	.word	0x8800759c
 8008eac:	c2f8f359 	.word	0xc2f8f359
 8008eb0:	3c900000 	.word	0x3c900000

08008eb4 <__errno>:
 8008eb4:	4b01      	ldr	r3, [pc, #4]	; (8008ebc <__errno+0x8>)
 8008eb6:	6818      	ldr	r0, [r3, #0]
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	20000028 	.word	0x20000028

08008ec0 <__libc_init_array>:
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	2600      	movs	r6, #0
 8008ec4:	4d0c      	ldr	r5, [pc, #48]	; (8008ef8 <__libc_init_array+0x38>)
 8008ec6:	4c0d      	ldr	r4, [pc, #52]	; (8008efc <__libc_init_array+0x3c>)
 8008ec8:	1b64      	subs	r4, r4, r5
 8008eca:	10a4      	asrs	r4, r4, #2
 8008ecc:	42a6      	cmp	r6, r4
 8008ece:	d109      	bne.n	8008ee4 <__libc_init_array+0x24>
 8008ed0:	f002 fefa 	bl	800bcc8 <_init>
 8008ed4:	2600      	movs	r6, #0
 8008ed6:	4d0a      	ldr	r5, [pc, #40]	; (8008f00 <__libc_init_array+0x40>)
 8008ed8:	4c0a      	ldr	r4, [pc, #40]	; (8008f04 <__libc_init_array+0x44>)
 8008eda:	1b64      	subs	r4, r4, r5
 8008edc:	10a4      	asrs	r4, r4, #2
 8008ede:	42a6      	cmp	r6, r4
 8008ee0:	d105      	bne.n	8008eee <__libc_init_array+0x2e>
 8008ee2:	bd70      	pop	{r4, r5, r6, pc}
 8008ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ee8:	4798      	blx	r3
 8008eea:	3601      	adds	r6, #1
 8008eec:	e7ee      	b.n	8008ecc <__libc_init_array+0xc>
 8008eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ef2:	4798      	blx	r3
 8008ef4:	3601      	adds	r6, #1
 8008ef6:	e7f2      	b.n	8008ede <__libc_init_array+0x1e>
 8008ef8:	0800c314 	.word	0x0800c314
 8008efc:	0800c314 	.word	0x0800c314
 8008f00:	0800c314 	.word	0x0800c314
 8008f04:	0800c318 	.word	0x0800c318

08008f08 <memset>:
 8008f08:	4603      	mov	r3, r0
 8008f0a:	4402      	add	r2, r0
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d100      	bne.n	8008f12 <memset+0xa>
 8008f10:	4770      	bx	lr
 8008f12:	f803 1b01 	strb.w	r1, [r3], #1
 8008f16:	e7f9      	b.n	8008f0c <memset+0x4>

08008f18 <__cvt>:
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f1e:	461f      	mov	r7, r3
 8008f20:	bfbb      	ittet	lt
 8008f22:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008f26:	461f      	movlt	r7, r3
 8008f28:	2300      	movge	r3, #0
 8008f2a:	232d      	movlt	r3, #45	; 0x2d
 8008f2c:	b088      	sub	sp, #32
 8008f2e:	4614      	mov	r4, r2
 8008f30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f32:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008f34:	7013      	strb	r3, [r2, #0]
 8008f36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f38:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008f3c:	f023 0820 	bic.w	r8, r3, #32
 8008f40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f44:	d005      	beq.n	8008f52 <__cvt+0x3a>
 8008f46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f4a:	d100      	bne.n	8008f4e <__cvt+0x36>
 8008f4c:	3501      	adds	r5, #1
 8008f4e:	2302      	movs	r3, #2
 8008f50:	e000      	b.n	8008f54 <__cvt+0x3c>
 8008f52:	2303      	movs	r3, #3
 8008f54:	aa07      	add	r2, sp, #28
 8008f56:	9204      	str	r2, [sp, #16]
 8008f58:	aa06      	add	r2, sp, #24
 8008f5a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008f5e:	e9cd 3500 	strd	r3, r5, [sp]
 8008f62:	4622      	mov	r2, r4
 8008f64:	463b      	mov	r3, r7
 8008f66:	f000 fce3 	bl	8009930 <_dtoa_r>
 8008f6a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f6e:	4606      	mov	r6, r0
 8008f70:	d102      	bne.n	8008f78 <__cvt+0x60>
 8008f72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f74:	07db      	lsls	r3, r3, #31
 8008f76:	d522      	bpl.n	8008fbe <__cvt+0xa6>
 8008f78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f7c:	eb06 0905 	add.w	r9, r6, r5
 8008f80:	d110      	bne.n	8008fa4 <__cvt+0x8c>
 8008f82:	7833      	ldrb	r3, [r6, #0]
 8008f84:	2b30      	cmp	r3, #48	; 0x30
 8008f86:	d10a      	bne.n	8008f9e <__cvt+0x86>
 8008f88:	2200      	movs	r2, #0
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	4639      	mov	r1, r7
 8008f90:	f7f7 fd0a 	bl	80009a8 <__aeabi_dcmpeq>
 8008f94:	b918      	cbnz	r0, 8008f9e <__cvt+0x86>
 8008f96:	f1c5 0501 	rsb	r5, r5, #1
 8008f9a:	f8ca 5000 	str.w	r5, [sl]
 8008f9e:	f8da 3000 	ldr.w	r3, [sl]
 8008fa2:	4499      	add	r9, r3
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	4620      	mov	r0, r4
 8008faa:	4639      	mov	r1, r7
 8008fac:	f7f7 fcfc 	bl	80009a8 <__aeabi_dcmpeq>
 8008fb0:	b108      	cbz	r0, 8008fb6 <__cvt+0x9e>
 8008fb2:	f8cd 901c 	str.w	r9, [sp, #28]
 8008fb6:	2230      	movs	r2, #48	; 0x30
 8008fb8:	9b07      	ldr	r3, [sp, #28]
 8008fba:	454b      	cmp	r3, r9
 8008fbc:	d307      	bcc.n	8008fce <__cvt+0xb6>
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	9b07      	ldr	r3, [sp, #28]
 8008fc2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008fc4:	1b9b      	subs	r3, r3, r6
 8008fc6:	6013      	str	r3, [r2, #0]
 8008fc8:	b008      	add	sp, #32
 8008fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fce:	1c59      	adds	r1, r3, #1
 8008fd0:	9107      	str	r1, [sp, #28]
 8008fd2:	701a      	strb	r2, [r3, #0]
 8008fd4:	e7f0      	b.n	8008fb8 <__cvt+0xa0>

08008fd6 <__exponent>:
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fda:	2900      	cmp	r1, #0
 8008fdc:	f803 2b02 	strb.w	r2, [r3], #2
 8008fe0:	bfb6      	itet	lt
 8008fe2:	222d      	movlt	r2, #45	; 0x2d
 8008fe4:	222b      	movge	r2, #43	; 0x2b
 8008fe6:	4249      	neglt	r1, r1
 8008fe8:	2909      	cmp	r1, #9
 8008fea:	7042      	strb	r2, [r0, #1]
 8008fec:	dd2b      	ble.n	8009046 <__exponent+0x70>
 8008fee:	f10d 0407 	add.w	r4, sp, #7
 8008ff2:	46a4      	mov	ip, r4
 8008ff4:	270a      	movs	r7, #10
 8008ff6:	fb91 f6f7 	sdiv	r6, r1, r7
 8008ffa:	460a      	mov	r2, r1
 8008ffc:	46a6      	mov	lr, r4
 8008ffe:	fb07 1516 	mls	r5, r7, r6, r1
 8009002:	2a63      	cmp	r2, #99	; 0x63
 8009004:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009008:	4631      	mov	r1, r6
 800900a:	f104 34ff 	add.w	r4, r4, #4294967295
 800900e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009012:	dcf0      	bgt.n	8008ff6 <__exponent+0x20>
 8009014:	3130      	adds	r1, #48	; 0x30
 8009016:	f1ae 0502 	sub.w	r5, lr, #2
 800901a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800901e:	4629      	mov	r1, r5
 8009020:	1c44      	adds	r4, r0, #1
 8009022:	4561      	cmp	r1, ip
 8009024:	d30a      	bcc.n	800903c <__exponent+0x66>
 8009026:	f10d 0209 	add.w	r2, sp, #9
 800902a:	eba2 020e 	sub.w	r2, r2, lr
 800902e:	4565      	cmp	r5, ip
 8009030:	bf88      	it	hi
 8009032:	2200      	movhi	r2, #0
 8009034:	4413      	add	r3, r2
 8009036:	1a18      	subs	r0, r3, r0
 8009038:	b003      	add	sp, #12
 800903a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800903c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009040:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009044:	e7ed      	b.n	8009022 <__exponent+0x4c>
 8009046:	2330      	movs	r3, #48	; 0x30
 8009048:	3130      	adds	r1, #48	; 0x30
 800904a:	7083      	strb	r3, [r0, #2]
 800904c:	70c1      	strb	r1, [r0, #3]
 800904e:	1d03      	adds	r3, r0, #4
 8009050:	e7f1      	b.n	8009036 <__exponent+0x60>
	...

08009054 <_printf_float>:
 8009054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009058:	b091      	sub	sp, #68	; 0x44
 800905a:	460c      	mov	r4, r1
 800905c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009060:	4616      	mov	r6, r2
 8009062:	461f      	mov	r7, r3
 8009064:	4605      	mov	r5, r0
 8009066:	f001 fa51 	bl	800a50c <_localeconv_r>
 800906a:	6803      	ldr	r3, [r0, #0]
 800906c:	4618      	mov	r0, r3
 800906e:	9309      	str	r3, [sp, #36]	; 0x24
 8009070:	f7f7 f86e 	bl	8000150 <strlen>
 8009074:	2300      	movs	r3, #0
 8009076:	930e      	str	r3, [sp, #56]	; 0x38
 8009078:	f8d8 3000 	ldr.w	r3, [r8]
 800907c:	900a      	str	r0, [sp, #40]	; 0x28
 800907e:	3307      	adds	r3, #7
 8009080:	f023 0307 	bic.w	r3, r3, #7
 8009084:	f103 0208 	add.w	r2, r3, #8
 8009088:	f894 9018 	ldrb.w	r9, [r4, #24]
 800908c:	f8d4 b000 	ldr.w	fp, [r4]
 8009090:	f8c8 2000 	str.w	r2, [r8]
 8009094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009098:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800909c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80090a0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80090a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80090a6:	f04f 32ff 	mov.w	r2, #4294967295
 80090aa:	4640      	mov	r0, r8
 80090ac:	4b9c      	ldr	r3, [pc, #624]	; (8009320 <_printf_float+0x2cc>)
 80090ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090b0:	f7f7 fcac 	bl	8000a0c <__aeabi_dcmpun>
 80090b4:	bb70      	cbnz	r0, 8009114 <_printf_float+0xc0>
 80090b6:	f04f 32ff 	mov.w	r2, #4294967295
 80090ba:	4640      	mov	r0, r8
 80090bc:	4b98      	ldr	r3, [pc, #608]	; (8009320 <_printf_float+0x2cc>)
 80090be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090c0:	f7f7 fc86 	bl	80009d0 <__aeabi_dcmple>
 80090c4:	bb30      	cbnz	r0, 8009114 <_printf_float+0xc0>
 80090c6:	2200      	movs	r2, #0
 80090c8:	2300      	movs	r3, #0
 80090ca:	4640      	mov	r0, r8
 80090cc:	4651      	mov	r1, sl
 80090ce:	f7f7 fc75 	bl	80009bc <__aeabi_dcmplt>
 80090d2:	b110      	cbz	r0, 80090da <_printf_float+0x86>
 80090d4:	232d      	movs	r3, #45	; 0x2d
 80090d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090da:	4b92      	ldr	r3, [pc, #584]	; (8009324 <_printf_float+0x2d0>)
 80090dc:	4892      	ldr	r0, [pc, #584]	; (8009328 <_printf_float+0x2d4>)
 80090de:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80090e2:	bf94      	ite	ls
 80090e4:	4698      	movls	r8, r3
 80090e6:	4680      	movhi	r8, r0
 80090e8:	2303      	movs	r3, #3
 80090ea:	f04f 0a00 	mov.w	sl, #0
 80090ee:	6123      	str	r3, [r4, #16]
 80090f0:	f02b 0304 	bic.w	r3, fp, #4
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	4633      	mov	r3, r6
 80090f8:	4621      	mov	r1, r4
 80090fa:	4628      	mov	r0, r5
 80090fc:	9700      	str	r7, [sp, #0]
 80090fe:	aa0f      	add	r2, sp, #60	; 0x3c
 8009100:	f000 f9d4 	bl	80094ac <_printf_common>
 8009104:	3001      	adds	r0, #1
 8009106:	f040 8090 	bne.w	800922a <_printf_float+0x1d6>
 800910a:	f04f 30ff 	mov.w	r0, #4294967295
 800910e:	b011      	add	sp, #68	; 0x44
 8009110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009114:	4642      	mov	r2, r8
 8009116:	4653      	mov	r3, sl
 8009118:	4640      	mov	r0, r8
 800911a:	4651      	mov	r1, sl
 800911c:	f7f7 fc76 	bl	8000a0c <__aeabi_dcmpun>
 8009120:	b148      	cbz	r0, 8009136 <_printf_float+0xe2>
 8009122:	f1ba 0f00 	cmp.w	sl, #0
 8009126:	bfb8      	it	lt
 8009128:	232d      	movlt	r3, #45	; 0x2d
 800912a:	4880      	ldr	r0, [pc, #512]	; (800932c <_printf_float+0x2d8>)
 800912c:	bfb8      	it	lt
 800912e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009132:	4b7f      	ldr	r3, [pc, #508]	; (8009330 <_printf_float+0x2dc>)
 8009134:	e7d3      	b.n	80090de <_printf_float+0x8a>
 8009136:	6863      	ldr	r3, [r4, #4]
 8009138:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800913c:	1c5a      	adds	r2, r3, #1
 800913e:	d142      	bne.n	80091c6 <_printf_float+0x172>
 8009140:	2306      	movs	r3, #6
 8009142:	6063      	str	r3, [r4, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	9206      	str	r2, [sp, #24]
 8009148:	aa0e      	add	r2, sp, #56	; 0x38
 800914a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800914e:	aa0d      	add	r2, sp, #52	; 0x34
 8009150:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009154:	9203      	str	r2, [sp, #12]
 8009156:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800915a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800915e:	6023      	str	r3, [r4, #0]
 8009160:	6863      	ldr	r3, [r4, #4]
 8009162:	4642      	mov	r2, r8
 8009164:	9300      	str	r3, [sp, #0]
 8009166:	4628      	mov	r0, r5
 8009168:	4653      	mov	r3, sl
 800916a:	910b      	str	r1, [sp, #44]	; 0x2c
 800916c:	f7ff fed4 	bl	8008f18 <__cvt>
 8009170:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009172:	4680      	mov	r8, r0
 8009174:	2947      	cmp	r1, #71	; 0x47
 8009176:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009178:	d108      	bne.n	800918c <_printf_float+0x138>
 800917a:	1cc8      	adds	r0, r1, #3
 800917c:	db02      	blt.n	8009184 <_printf_float+0x130>
 800917e:	6863      	ldr	r3, [r4, #4]
 8009180:	4299      	cmp	r1, r3
 8009182:	dd40      	ble.n	8009206 <_printf_float+0x1b2>
 8009184:	f1a9 0902 	sub.w	r9, r9, #2
 8009188:	fa5f f989 	uxtb.w	r9, r9
 800918c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009190:	d81f      	bhi.n	80091d2 <_printf_float+0x17e>
 8009192:	464a      	mov	r2, r9
 8009194:	3901      	subs	r1, #1
 8009196:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800919a:	910d      	str	r1, [sp, #52]	; 0x34
 800919c:	f7ff ff1b 	bl	8008fd6 <__exponent>
 80091a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091a2:	4682      	mov	sl, r0
 80091a4:	1813      	adds	r3, r2, r0
 80091a6:	2a01      	cmp	r2, #1
 80091a8:	6123      	str	r3, [r4, #16]
 80091aa:	dc02      	bgt.n	80091b2 <_printf_float+0x15e>
 80091ac:	6822      	ldr	r2, [r4, #0]
 80091ae:	07d2      	lsls	r2, r2, #31
 80091b0:	d501      	bpl.n	80091b6 <_printf_float+0x162>
 80091b2:	3301      	adds	r3, #1
 80091b4:	6123      	str	r3, [r4, #16]
 80091b6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d09b      	beq.n	80090f6 <_printf_float+0xa2>
 80091be:	232d      	movs	r3, #45	; 0x2d
 80091c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091c4:	e797      	b.n	80090f6 <_printf_float+0xa2>
 80091c6:	2947      	cmp	r1, #71	; 0x47
 80091c8:	d1bc      	bne.n	8009144 <_printf_float+0xf0>
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d1ba      	bne.n	8009144 <_printf_float+0xf0>
 80091ce:	2301      	movs	r3, #1
 80091d0:	e7b7      	b.n	8009142 <_printf_float+0xee>
 80091d2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80091d6:	d118      	bne.n	800920a <_printf_float+0x1b6>
 80091d8:	2900      	cmp	r1, #0
 80091da:	6863      	ldr	r3, [r4, #4]
 80091dc:	dd0b      	ble.n	80091f6 <_printf_float+0x1a2>
 80091de:	6121      	str	r1, [r4, #16]
 80091e0:	b913      	cbnz	r3, 80091e8 <_printf_float+0x194>
 80091e2:	6822      	ldr	r2, [r4, #0]
 80091e4:	07d0      	lsls	r0, r2, #31
 80091e6:	d502      	bpl.n	80091ee <_printf_float+0x19a>
 80091e8:	3301      	adds	r3, #1
 80091ea:	440b      	add	r3, r1
 80091ec:	6123      	str	r3, [r4, #16]
 80091ee:	f04f 0a00 	mov.w	sl, #0
 80091f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80091f4:	e7df      	b.n	80091b6 <_printf_float+0x162>
 80091f6:	b913      	cbnz	r3, 80091fe <_printf_float+0x1aa>
 80091f8:	6822      	ldr	r2, [r4, #0]
 80091fa:	07d2      	lsls	r2, r2, #31
 80091fc:	d501      	bpl.n	8009202 <_printf_float+0x1ae>
 80091fe:	3302      	adds	r3, #2
 8009200:	e7f4      	b.n	80091ec <_printf_float+0x198>
 8009202:	2301      	movs	r3, #1
 8009204:	e7f2      	b.n	80091ec <_printf_float+0x198>
 8009206:	f04f 0967 	mov.w	r9, #103	; 0x67
 800920a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800920c:	4299      	cmp	r1, r3
 800920e:	db05      	blt.n	800921c <_printf_float+0x1c8>
 8009210:	6823      	ldr	r3, [r4, #0]
 8009212:	6121      	str	r1, [r4, #16]
 8009214:	07d8      	lsls	r0, r3, #31
 8009216:	d5ea      	bpl.n	80091ee <_printf_float+0x19a>
 8009218:	1c4b      	adds	r3, r1, #1
 800921a:	e7e7      	b.n	80091ec <_printf_float+0x198>
 800921c:	2900      	cmp	r1, #0
 800921e:	bfcc      	ite	gt
 8009220:	2201      	movgt	r2, #1
 8009222:	f1c1 0202 	rsble	r2, r1, #2
 8009226:	4413      	add	r3, r2
 8009228:	e7e0      	b.n	80091ec <_printf_float+0x198>
 800922a:	6823      	ldr	r3, [r4, #0]
 800922c:	055a      	lsls	r2, r3, #21
 800922e:	d407      	bmi.n	8009240 <_printf_float+0x1ec>
 8009230:	6923      	ldr	r3, [r4, #16]
 8009232:	4642      	mov	r2, r8
 8009234:	4631      	mov	r1, r6
 8009236:	4628      	mov	r0, r5
 8009238:	47b8      	blx	r7
 800923a:	3001      	adds	r0, #1
 800923c:	d12b      	bne.n	8009296 <_printf_float+0x242>
 800923e:	e764      	b.n	800910a <_printf_float+0xb6>
 8009240:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009244:	f240 80dd 	bls.w	8009402 <_printf_float+0x3ae>
 8009248:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800924c:	2200      	movs	r2, #0
 800924e:	2300      	movs	r3, #0
 8009250:	f7f7 fbaa 	bl	80009a8 <__aeabi_dcmpeq>
 8009254:	2800      	cmp	r0, #0
 8009256:	d033      	beq.n	80092c0 <_printf_float+0x26c>
 8009258:	2301      	movs	r3, #1
 800925a:	4631      	mov	r1, r6
 800925c:	4628      	mov	r0, r5
 800925e:	4a35      	ldr	r2, [pc, #212]	; (8009334 <_printf_float+0x2e0>)
 8009260:	47b8      	blx	r7
 8009262:	3001      	adds	r0, #1
 8009264:	f43f af51 	beq.w	800910a <_printf_float+0xb6>
 8009268:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800926c:	429a      	cmp	r2, r3
 800926e:	db02      	blt.n	8009276 <_printf_float+0x222>
 8009270:	6823      	ldr	r3, [r4, #0]
 8009272:	07d8      	lsls	r0, r3, #31
 8009274:	d50f      	bpl.n	8009296 <_printf_float+0x242>
 8009276:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800927a:	4631      	mov	r1, r6
 800927c:	4628      	mov	r0, r5
 800927e:	47b8      	blx	r7
 8009280:	3001      	adds	r0, #1
 8009282:	f43f af42 	beq.w	800910a <_printf_float+0xb6>
 8009286:	f04f 0800 	mov.w	r8, #0
 800928a:	f104 091a 	add.w	r9, r4, #26
 800928e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009290:	3b01      	subs	r3, #1
 8009292:	4543      	cmp	r3, r8
 8009294:	dc09      	bgt.n	80092aa <_printf_float+0x256>
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	079b      	lsls	r3, r3, #30
 800929a:	f100 8102 	bmi.w	80094a2 <_printf_float+0x44e>
 800929e:	68e0      	ldr	r0, [r4, #12]
 80092a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092a2:	4298      	cmp	r0, r3
 80092a4:	bfb8      	it	lt
 80092a6:	4618      	movlt	r0, r3
 80092a8:	e731      	b.n	800910e <_printf_float+0xba>
 80092aa:	2301      	movs	r3, #1
 80092ac:	464a      	mov	r2, r9
 80092ae:	4631      	mov	r1, r6
 80092b0:	4628      	mov	r0, r5
 80092b2:	47b8      	blx	r7
 80092b4:	3001      	adds	r0, #1
 80092b6:	f43f af28 	beq.w	800910a <_printf_float+0xb6>
 80092ba:	f108 0801 	add.w	r8, r8, #1
 80092be:	e7e6      	b.n	800928e <_printf_float+0x23a>
 80092c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	dc38      	bgt.n	8009338 <_printf_float+0x2e4>
 80092c6:	2301      	movs	r3, #1
 80092c8:	4631      	mov	r1, r6
 80092ca:	4628      	mov	r0, r5
 80092cc:	4a19      	ldr	r2, [pc, #100]	; (8009334 <_printf_float+0x2e0>)
 80092ce:	47b8      	blx	r7
 80092d0:	3001      	adds	r0, #1
 80092d2:	f43f af1a 	beq.w	800910a <_printf_float+0xb6>
 80092d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80092da:	4313      	orrs	r3, r2
 80092dc:	d102      	bne.n	80092e4 <_printf_float+0x290>
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	07d9      	lsls	r1, r3, #31
 80092e2:	d5d8      	bpl.n	8009296 <_printf_float+0x242>
 80092e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092e8:	4631      	mov	r1, r6
 80092ea:	4628      	mov	r0, r5
 80092ec:	47b8      	blx	r7
 80092ee:	3001      	adds	r0, #1
 80092f0:	f43f af0b 	beq.w	800910a <_printf_float+0xb6>
 80092f4:	f04f 0900 	mov.w	r9, #0
 80092f8:	f104 0a1a 	add.w	sl, r4, #26
 80092fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092fe:	425b      	negs	r3, r3
 8009300:	454b      	cmp	r3, r9
 8009302:	dc01      	bgt.n	8009308 <_printf_float+0x2b4>
 8009304:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009306:	e794      	b.n	8009232 <_printf_float+0x1de>
 8009308:	2301      	movs	r3, #1
 800930a:	4652      	mov	r2, sl
 800930c:	4631      	mov	r1, r6
 800930e:	4628      	mov	r0, r5
 8009310:	47b8      	blx	r7
 8009312:	3001      	adds	r0, #1
 8009314:	f43f aef9 	beq.w	800910a <_printf_float+0xb6>
 8009318:	f109 0901 	add.w	r9, r9, #1
 800931c:	e7ee      	b.n	80092fc <_printf_float+0x2a8>
 800931e:	bf00      	nop
 8009320:	7fefffff 	.word	0x7fefffff
 8009324:	0800bf3c 	.word	0x0800bf3c
 8009328:	0800bf40 	.word	0x0800bf40
 800932c:	0800bf48 	.word	0x0800bf48
 8009330:	0800bf44 	.word	0x0800bf44
 8009334:	0800bf4c 	.word	0x0800bf4c
 8009338:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800933a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800933c:	429a      	cmp	r2, r3
 800933e:	bfa8      	it	ge
 8009340:	461a      	movge	r2, r3
 8009342:	2a00      	cmp	r2, #0
 8009344:	4691      	mov	r9, r2
 8009346:	dc37      	bgt.n	80093b8 <_printf_float+0x364>
 8009348:	f04f 0b00 	mov.w	fp, #0
 800934c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009350:	f104 021a 	add.w	r2, r4, #26
 8009354:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009358:	ebaa 0309 	sub.w	r3, sl, r9
 800935c:	455b      	cmp	r3, fp
 800935e:	dc33      	bgt.n	80093c8 <_printf_float+0x374>
 8009360:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009364:	429a      	cmp	r2, r3
 8009366:	db3b      	blt.n	80093e0 <_printf_float+0x38c>
 8009368:	6823      	ldr	r3, [r4, #0]
 800936a:	07da      	lsls	r2, r3, #31
 800936c:	d438      	bmi.n	80093e0 <_printf_float+0x38c>
 800936e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009370:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009372:	eba3 020a 	sub.w	r2, r3, sl
 8009376:	eba3 0901 	sub.w	r9, r3, r1
 800937a:	4591      	cmp	r9, r2
 800937c:	bfa8      	it	ge
 800937e:	4691      	movge	r9, r2
 8009380:	f1b9 0f00 	cmp.w	r9, #0
 8009384:	dc34      	bgt.n	80093f0 <_printf_float+0x39c>
 8009386:	f04f 0800 	mov.w	r8, #0
 800938a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800938e:	f104 0a1a 	add.w	sl, r4, #26
 8009392:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009396:	1a9b      	subs	r3, r3, r2
 8009398:	eba3 0309 	sub.w	r3, r3, r9
 800939c:	4543      	cmp	r3, r8
 800939e:	f77f af7a 	ble.w	8009296 <_printf_float+0x242>
 80093a2:	2301      	movs	r3, #1
 80093a4:	4652      	mov	r2, sl
 80093a6:	4631      	mov	r1, r6
 80093a8:	4628      	mov	r0, r5
 80093aa:	47b8      	blx	r7
 80093ac:	3001      	adds	r0, #1
 80093ae:	f43f aeac 	beq.w	800910a <_printf_float+0xb6>
 80093b2:	f108 0801 	add.w	r8, r8, #1
 80093b6:	e7ec      	b.n	8009392 <_printf_float+0x33e>
 80093b8:	4613      	mov	r3, r2
 80093ba:	4631      	mov	r1, r6
 80093bc:	4642      	mov	r2, r8
 80093be:	4628      	mov	r0, r5
 80093c0:	47b8      	blx	r7
 80093c2:	3001      	adds	r0, #1
 80093c4:	d1c0      	bne.n	8009348 <_printf_float+0x2f4>
 80093c6:	e6a0      	b.n	800910a <_printf_float+0xb6>
 80093c8:	2301      	movs	r3, #1
 80093ca:	4631      	mov	r1, r6
 80093cc:	4628      	mov	r0, r5
 80093ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80093d0:	47b8      	blx	r7
 80093d2:	3001      	adds	r0, #1
 80093d4:	f43f ae99 	beq.w	800910a <_printf_float+0xb6>
 80093d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093da:	f10b 0b01 	add.w	fp, fp, #1
 80093de:	e7b9      	b.n	8009354 <_printf_float+0x300>
 80093e0:	4631      	mov	r1, r6
 80093e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093e6:	4628      	mov	r0, r5
 80093e8:	47b8      	blx	r7
 80093ea:	3001      	adds	r0, #1
 80093ec:	d1bf      	bne.n	800936e <_printf_float+0x31a>
 80093ee:	e68c      	b.n	800910a <_printf_float+0xb6>
 80093f0:	464b      	mov	r3, r9
 80093f2:	4631      	mov	r1, r6
 80093f4:	4628      	mov	r0, r5
 80093f6:	eb08 020a 	add.w	r2, r8, sl
 80093fa:	47b8      	blx	r7
 80093fc:	3001      	adds	r0, #1
 80093fe:	d1c2      	bne.n	8009386 <_printf_float+0x332>
 8009400:	e683      	b.n	800910a <_printf_float+0xb6>
 8009402:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009404:	2a01      	cmp	r2, #1
 8009406:	dc01      	bgt.n	800940c <_printf_float+0x3b8>
 8009408:	07db      	lsls	r3, r3, #31
 800940a:	d537      	bpl.n	800947c <_printf_float+0x428>
 800940c:	2301      	movs	r3, #1
 800940e:	4642      	mov	r2, r8
 8009410:	4631      	mov	r1, r6
 8009412:	4628      	mov	r0, r5
 8009414:	47b8      	blx	r7
 8009416:	3001      	adds	r0, #1
 8009418:	f43f ae77 	beq.w	800910a <_printf_float+0xb6>
 800941c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009420:	4631      	mov	r1, r6
 8009422:	4628      	mov	r0, r5
 8009424:	47b8      	blx	r7
 8009426:	3001      	adds	r0, #1
 8009428:	f43f ae6f 	beq.w	800910a <_printf_float+0xb6>
 800942c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009430:	2200      	movs	r2, #0
 8009432:	2300      	movs	r3, #0
 8009434:	f7f7 fab8 	bl	80009a8 <__aeabi_dcmpeq>
 8009438:	b9d8      	cbnz	r0, 8009472 <_printf_float+0x41e>
 800943a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800943c:	f108 0201 	add.w	r2, r8, #1
 8009440:	3b01      	subs	r3, #1
 8009442:	4631      	mov	r1, r6
 8009444:	4628      	mov	r0, r5
 8009446:	47b8      	blx	r7
 8009448:	3001      	adds	r0, #1
 800944a:	d10e      	bne.n	800946a <_printf_float+0x416>
 800944c:	e65d      	b.n	800910a <_printf_float+0xb6>
 800944e:	2301      	movs	r3, #1
 8009450:	464a      	mov	r2, r9
 8009452:	4631      	mov	r1, r6
 8009454:	4628      	mov	r0, r5
 8009456:	47b8      	blx	r7
 8009458:	3001      	adds	r0, #1
 800945a:	f43f ae56 	beq.w	800910a <_printf_float+0xb6>
 800945e:	f108 0801 	add.w	r8, r8, #1
 8009462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009464:	3b01      	subs	r3, #1
 8009466:	4543      	cmp	r3, r8
 8009468:	dcf1      	bgt.n	800944e <_printf_float+0x3fa>
 800946a:	4653      	mov	r3, sl
 800946c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009470:	e6e0      	b.n	8009234 <_printf_float+0x1e0>
 8009472:	f04f 0800 	mov.w	r8, #0
 8009476:	f104 091a 	add.w	r9, r4, #26
 800947a:	e7f2      	b.n	8009462 <_printf_float+0x40e>
 800947c:	2301      	movs	r3, #1
 800947e:	4642      	mov	r2, r8
 8009480:	e7df      	b.n	8009442 <_printf_float+0x3ee>
 8009482:	2301      	movs	r3, #1
 8009484:	464a      	mov	r2, r9
 8009486:	4631      	mov	r1, r6
 8009488:	4628      	mov	r0, r5
 800948a:	47b8      	blx	r7
 800948c:	3001      	adds	r0, #1
 800948e:	f43f ae3c 	beq.w	800910a <_printf_float+0xb6>
 8009492:	f108 0801 	add.w	r8, r8, #1
 8009496:	68e3      	ldr	r3, [r4, #12]
 8009498:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800949a:	1a5b      	subs	r3, r3, r1
 800949c:	4543      	cmp	r3, r8
 800949e:	dcf0      	bgt.n	8009482 <_printf_float+0x42e>
 80094a0:	e6fd      	b.n	800929e <_printf_float+0x24a>
 80094a2:	f04f 0800 	mov.w	r8, #0
 80094a6:	f104 0919 	add.w	r9, r4, #25
 80094aa:	e7f4      	b.n	8009496 <_printf_float+0x442>

080094ac <_printf_common>:
 80094ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094b0:	4616      	mov	r6, r2
 80094b2:	4699      	mov	r9, r3
 80094b4:	688a      	ldr	r2, [r1, #8]
 80094b6:	690b      	ldr	r3, [r1, #16]
 80094b8:	4607      	mov	r7, r0
 80094ba:	4293      	cmp	r3, r2
 80094bc:	bfb8      	it	lt
 80094be:	4613      	movlt	r3, r2
 80094c0:	6033      	str	r3, [r6, #0]
 80094c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094c6:	460c      	mov	r4, r1
 80094c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094cc:	b10a      	cbz	r2, 80094d2 <_printf_common+0x26>
 80094ce:	3301      	adds	r3, #1
 80094d0:	6033      	str	r3, [r6, #0]
 80094d2:	6823      	ldr	r3, [r4, #0]
 80094d4:	0699      	lsls	r1, r3, #26
 80094d6:	bf42      	ittt	mi
 80094d8:	6833      	ldrmi	r3, [r6, #0]
 80094da:	3302      	addmi	r3, #2
 80094dc:	6033      	strmi	r3, [r6, #0]
 80094de:	6825      	ldr	r5, [r4, #0]
 80094e0:	f015 0506 	ands.w	r5, r5, #6
 80094e4:	d106      	bne.n	80094f4 <_printf_common+0x48>
 80094e6:	f104 0a19 	add.w	sl, r4, #25
 80094ea:	68e3      	ldr	r3, [r4, #12]
 80094ec:	6832      	ldr	r2, [r6, #0]
 80094ee:	1a9b      	subs	r3, r3, r2
 80094f0:	42ab      	cmp	r3, r5
 80094f2:	dc28      	bgt.n	8009546 <_printf_common+0x9a>
 80094f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094f8:	1e13      	subs	r3, r2, #0
 80094fa:	6822      	ldr	r2, [r4, #0]
 80094fc:	bf18      	it	ne
 80094fe:	2301      	movne	r3, #1
 8009500:	0692      	lsls	r2, r2, #26
 8009502:	d42d      	bmi.n	8009560 <_printf_common+0xb4>
 8009504:	4649      	mov	r1, r9
 8009506:	4638      	mov	r0, r7
 8009508:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800950c:	47c0      	blx	r8
 800950e:	3001      	adds	r0, #1
 8009510:	d020      	beq.n	8009554 <_printf_common+0xa8>
 8009512:	6823      	ldr	r3, [r4, #0]
 8009514:	68e5      	ldr	r5, [r4, #12]
 8009516:	f003 0306 	and.w	r3, r3, #6
 800951a:	2b04      	cmp	r3, #4
 800951c:	bf18      	it	ne
 800951e:	2500      	movne	r5, #0
 8009520:	6832      	ldr	r2, [r6, #0]
 8009522:	f04f 0600 	mov.w	r6, #0
 8009526:	68a3      	ldr	r3, [r4, #8]
 8009528:	bf08      	it	eq
 800952a:	1aad      	subeq	r5, r5, r2
 800952c:	6922      	ldr	r2, [r4, #16]
 800952e:	bf08      	it	eq
 8009530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009534:	4293      	cmp	r3, r2
 8009536:	bfc4      	itt	gt
 8009538:	1a9b      	subgt	r3, r3, r2
 800953a:	18ed      	addgt	r5, r5, r3
 800953c:	341a      	adds	r4, #26
 800953e:	42b5      	cmp	r5, r6
 8009540:	d11a      	bne.n	8009578 <_printf_common+0xcc>
 8009542:	2000      	movs	r0, #0
 8009544:	e008      	b.n	8009558 <_printf_common+0xac>
 8009546:	2301      	movs	r3, #1
 8009548:	4652      	mov	r2, sl
 800954a:	4649      	mov	r1, r9
 800954c:	4638      	mov	r0, r7
 800954e:	47c0      	blx	r8
 8009550:	3001      	adds	r0, #1
 8009552:	d103      	bne.n	800955c <_printf_common+0xb0>
 8009554:	f04f 30ff 	mov.w	r0, #4294967295
 8009558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800955c:	3501      	adds	r5, #1
 800955e:	e7c4      	b.n	80094ea <_printf_common+0x3e>
 8009560:	2030      	movs	r0, #48	; 0x30
 8009562:	18e1      	adds	r1, r4, r3
 8009564:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009568:	1c5a      	adds	r2, r3, #1
 800956a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800956e:	4422      	add	r2, r4
 8009570:	3302      	adds	r3, #2
 8009572:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009576:	e7c5      	b.n	8009504 <_printf_common+0x58>
 8009578:	2301      	movs	r3, #1
 800957a:	4622      	mov	r2, r4
 800957c:	4649      	mov	r1, r9
 800957e:	4638      	mov	r0, r7
 8009580:	47c0      	blx	r8
 8009582:	3001      	adds	r0, #1
 8009584:	d0e6      	beq.n	8009554 <_printf_common+0xa8>
 8009586:	3601      	adds	r6, #1
 8009588:	e7d9      	b.n	800953e <_printf_common+0x92>
	...

0800958c <_printf_i>:
 800958c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009590:	7e0f      	ldrb	r7, [r1, #24]
 8009592:	4691      	mov	r9, r2
 8009594:	2f78      	cmp	r7, #120	; 0x78
 8009596:	4680      	mov	r8, r0
 8009598:	460c      	mov	r4, r1
 800959a:	469a      	mov	sl, r3
 800959c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800959e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095a2:	d807      	bhi.n	80095b4 <_printf_i+0x28>
 80095a4:	2f62      	cmp	r7, #98	; 0x62
 80095a6:	d80a      	bhi.n	80095be <_printf_i+0x32>
 80095a8:	2f00      	cmp	r7, #0
 80095aa:	f000 80d9 	beq.w	8009760 <_printf_i+0x1d4>
 80095ae:	2f58      	cmp	r7, #88	; 0x58
 80095b0:	f000 80a4 	beq.w	80096fc <_printf_i+0x170>
 80095b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095bc:	e03a      	b.n	8009634 <_printf_i+0xa8>
 80095be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095c2:	2b15      	cmp	r3, #21
 80095c4:	d8f6      	bhi.n	80095b4 <_printf_i+0x28>
 80095c6:	a101      	add	r1, pc, #4	; (adr r1, 80095cc <_printf_i+0x40>)
 80095c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095cc:	08009625 	.word	0x08009625
 80095d0:	08009639 	.word	0x08009639
 80095d4:	080095b5 	.word	0x080095b5
 80095d8:	080095b5 	.word	0x080095b5
 80095dc:	080095b5 	.word	0x080095b5
 80095e0:	080095b5 	.word	0x080095b5
 80095e4:	08009639 	.word	0x08009639
 80095e8:	080095b5 	.word	0x080095b5
 80095ec:	080095b5 	.word	0x080095b5
 80095f0:	080095b5 	.word	0x080095b5
 80095f4:	080095b5 	.word	0x080095b5
 80095f8:	08009747 	.word	0x08009747
 80095fc:	08009669 	.word	0x08009669
 8009600:	08009729 	.word	0x08009729
 8009604:	080095b5 	.word	0x080095b5
 8009608:	080095b5 	.word	0x080095b5
 800960c:	08009769 	.word	0x08009769
 8009610:	080095b5 	.word	0x080095b5
 8009614:	08009669 	.word	0x08009669
 8009618:	080095b5 	.word	0x080095b5
 800961c:	080095b5 	.word	0x080095b5
 8009620:	08009731 	.word	0x08009731
 8009624:	682b      	ldr	r3, [r5, #0]
 8009626:	1d1a      	adds	r2, r3, #4
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	602a      	str	r2, [r5, #0]
 800962c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009634:	2301      	movs	r3, #1
 8009636:	e0a4      	b.n	8009782 <_printf_i+0x1f6>
 8009638:	6820      	ldr	r0, [r4, #0]
 800963a:	6829      	ldr	r1, [r5, #0]
 800963c:	0606      	lsls	r6, r0, #24
 800963e:	f101 0304 	add.w	r3, r1, #4
 8009642:	d50a      	bpl.n	800965a <_printf_i+0xce>
 8009644:	680e      	ldr	r6, [r1, #0]
 8009646:	602b      	str	r3, [r5, #0]
 8009648:	2e00      	cmp	r6, #0
 800964a:	da03      	bge.n	8009654 <_printf_i+0xc8>
 800964c:	232d      	movs	r3, #45	; 0x2d
 800964e:	4276      	negs	r6, r6
 8009650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009654:	230a      	movs	r3, #10
 8009656:	485e      	ldr	r0, [pc, #376]	; (80097d0 <_printf_i+0x244>)
 8009658:	e019      	b.n	800968e <_printf_i+0x102>
 800965a:	680e      	ldr	r6, [r1, #0]
 800965c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009660:	602b      	str	r3, [r5, #0]
 8009662:	bf18      	it	ne
 8009664:	b236      	sxthne	r6, r6
 8009666:	e7ef      	b.n	8009648 <_printf_i+0xbc>
 8009668:	682b      	ldr	r3, [r5, #0]
 800966a:	6820      	ldr	r0, [r4, #0]
 800966c:	1d19      	adds	r1, r3, #4
 800966e:	6029      	str	r1, [r5, #0]
 8009670:	0601      	lsls	r1, r0, #24
 8009672:	d501      	bpl.n	8009678 <_printf_i+0xec>
 8009674:	681e      	ldr	r6, [r3, #0]
 8009676:	e002      	b.n	800967e <_printf_i+0xf2>
 8009678:	0646      	lsls	r6, r0, #25
 800967a:	d5fb      	bpl.n	8009674 <_printf_i+0xe8>
 800967c:	881e      	ldrh	r6, [r3, #0]
 800967e:	2f6f      	cmp	r7, #111	; 0x6f
 8009680:	bf0c      	ite	eq
 8009682:	2308      	moveq	r3, #8
 8009684:	230a      	movne	r3, #10
 8009686:	4852      	ldr	r0, [pc, #328]	; (80097d0 <_printf_i+0x244>)
 8009688:	2100      	movs	r1, #0
 800968a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800968e:	6865      	ldr	r5, [r4, #4]
 8009690:	2d00      	cmp	r5, #0
 8009692:	bfa8      	it	ge
 8009694:	6821      	ldrge	r1, [r4, #0]
 8009696:	60a5      	str	r5, [r4, #8]
 8009698:	bfa4      	itt	ge
 800969a:	f021 0104 	bicge.w	r1, r1, #4
 800969e:	6021      	strge	r1, [r4, #0]
 80096a0:	b90e      	cbnz	r6, 80096a6 <_printf_i+0x11a>
 80096a2:	2d00      	cmp	r5, #0
 80096a4:	d04d      	beq.n	8009742 <_printf_i+0x1b6>
 80096a6:	4615      	mov	r5, r2
 80096a8:	fbb6 f1f3 	udiv	r1, r6, r3
 80096ac:	fb03 6711 	mls	r7, r3, r1, r6
 80096b0:	5dc7      	ldrb	r7, [r0, r7]
 80096b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096b6:	4637      	mov	r7, r6
 80096b8:	42bb      	cmp	r3, r7
 80096ba:	460e      	mov	r6, r1
 80096bc:	d9f4      	bls.n	80096a8 <_printf_i+0x11c>
 80096be:	2b08      	cmp	r3, #8
 80096c0:	d10b      	bne.n	80096da <_printf_i+0x14e>
 80096c2:	6823      	ldr	r3, [r4, #0]
 80096c4:	07de      	lsls	r6, r3, #31
 80096c6:	d508      	bpl.n	80096da <_printf_i+0x14e>
 80096c8:	6923      	ldr	r3, [r4, #16]
 80096ca:	6861      	ldr	r1, [r4, #4]
 80096cc:	4299      	cmp	r1, r3
 80096ce:	bfde      	ittt	le
 80096d0:	2330      	movle	r3, #48	; 0x30
 80096d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80096da:	1b52      	subs	r2, r2, r5
 80096dc:	6122      	str	r2, [r4, #16]
 80096de:	464b      	mov	r3, r9
 80096e0:	4621      	mov	r1, r4
 80096e2:	4640      	mov	r0, r8
 80096e4:	f8cd a000 	str.w	sl, [sp]
 80096e8:	aa03      	add	r2, sp, #12
 80096ea:	f7ff fedf 	bl	80094ac <_printf_common>
 80096ee:	3001      	adds	r0, #1
 80096f0:	d14c      	bne.n	800978c <_printf_i+0x200>
 80096f2:	f04f 30ff 	mov.w	r0, #4294967295
 80096f6:	b004      	add	sp, #16
 80096f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096fc:	4834      	ldr	r0, [pc, #208]	; (80097d0 <_printf_i+0x244>)
 80096fe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009702:	6829      	ldr	r1, [r5, #0]
 8009704:	6823      	ldr	r3, [r4, #0]
 8009706:	f851 6b04 	ldr.w	r6, [r1], #4
 800970a:	6029      	str	r1, [r5, #0]
 800970c:	061d      	lsls	r5, r3, #24
 800970e:	d514      	bpl.n	800973a <_printf_i+0x1ae>
 8009710:	07df      	lsls	r7, r3, #31
 8009712:	bf44      	itt	mi
 8009714:	f043 0320 	orrmi.w	r3, r3, #32
 8009718:	6023      	strmi	r3, [r4, #0]
 800971a:	b91e      	cbnz	r6, 8009724 <_printf_i+0x198>
 800971c:	6823      	ldr	r3, [r4, #0]
 800971e:	f023 0320 	bic.w	r3, r3, #32
 8009722:	6023      	str	r3, [r4, #0]
 8009724:	2310      	movs	r3, #16
 8009726:	e7af      	b.n	8009688 <_printf_i+0xfc>
 8009728:	6823      	ldr	r3, [r4, #0]
 800972a:	f043 0320 	orr.w	r3, r3, #32
 800972e:	6023      	str	r3, [r4, #0]
 8009730:	2378      	movs	r3, #120	; 0x78
 8009732:	4828      	ldr	r0, [pc, #160]	; (80097d4 <_printf_i+0x248>)
 8009734:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009738:	e7e3      	b.n	8009702 <_printf_i+0x176>
 800973a:	0659      	lsls	r1, r3, #25
 800973c:	bf48      	it	mi
 800973e:	b2b6      	uxthmi	r6, r6
 8009740:	e7e6      	b.n	8009710 <_printf_i+0x184>
 8009742:	4615      	mov	r5, r2
 8009744:	e7bb      	b.n	80096be <_printf_i+0x132>
 8009746:	682b      	ldr	r3, [r5, #0]
 8009748:	6826      	ldr	r6, [r4, #0]
 800974a:	1d18      	adds	r0, r3, #4
 800974c:	6961      	ldr	r1, [r4, #20]
 800974e:	6028      	str	r0, [r5, #0]
 8009750:	0635      	lsls	r5, r6, #24
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	d501      	bpl.n	800975a <_printf_i+0x1ce>
 8009756:	6019      	str	r1, [r3, #0]
 8009758:	e002      	b.n	8009760 <_printf_i+0x1d4>
 800975a:	0670      	lsls	r0, r6, #25
 800975c:	d5fb      	bpl.n	8009756 <_printf_i+0x1ca>
 800975e:	8019      	strh	r1, [r3, #0]
 8009760:	2300      	movs	r3, #0
 8009762:	4615      	mov	r5, r2
 8009764:	6123      	str	r3, [r4, #16]
 8009766:	e7ba      	b.n	80096de <_printf_i+0x152>
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	2100      	movs	r1, #0
 800976c:	1d1a      	adds	r2, r3, #4
 800976e:	602a      	str	r2, [r5, #0]
 8009770:	681d      	ldr	r5, [r3, #0]
 8009772:	6862      	ldr	r2, [r4, #4]
 8009774:	4628      	mov	r0, r5
 8009776:	f000 fed5 	bl	800a524 <memchr>
 800977a:	b108      	cbz	r0, 8009780 <_printf_i+0x1f4>
 800977c:	1b40      	subs	r0, r0, r5
 800977e:	6060      	str	r0, [r4, #4]
 8009780:	6863      	ldr	r3, [r4, #4]
 8009782:	6123      	str	r3, [r4, #16]
 8009784:	2300      	movs	r3, #0
 8009786:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800978a:	e7a8      	b.n	80096de <_printf_i+0x152>
 800978c:	462a      	mov	r2, r5
 800978e:	4649      	mov	r1, r9
 8009790:	4640      	mov	r0, r8
 8009792:	6923      	ldr	r3, [r4, #16]
 8009794:	47d0      	blx	sl
 8009796:	3001      	adds	r0, #1
 8009798:	d0ab      	beq.n	80096f2 <_printf_i+0x166>
 800979a:	6823      	ldr	r3, [r4, #0]
 800979c:	079b      	lsls	r3, r3, #30
 800979e:	d413      	bmi.n	80097c8 <_printf_i+0x23c>
 80097a0:	68e0      	ldr	r0, [r4, #12]
 80097a2:	9b03      	ldr	r3, [sp, #12]
 80097a4:	4298      	cmp	r0, r3
 80097a6:	bfb8      	it	lt
 80097a8:	4618      	movlt	r0, r3
 80097aa:	e7a4      	b.n	80096f6 <_printf_i+0x16a>
 80097ac:	2301      	movs	r3, #1
 80097ae:	4632      	mov	r2, r6
 80097b0:	4649      	mov	r1, r9
 80097b2:	4640      	mov	r0, r8
 80097b4:	47d0      	blx	sl
 80097b6:	3001      	adds	r0, #1
 80097b8:	d09b      	beq.n	80096f2 <_printf_i+0x166>
 80097ba:	3501      	adds	r5, #1
 80097bc:	68e3      	ldr	r3, [r4, #12]
 80097be:	9903      	ldr	r1, [sp, #12]
 80097c0:	1a5b      	subs	r3, r3, r1
 80097c2:	42ab      	cmp	r3, r5
 80097c4:	dcf2      	bgt.n	80097ac <_printf_i+0x220>
 80097c6:	e7eb      	b.n	80097a0 <_printf_i+0x214>
 80097c8:	2500      	movs	r5, #0
 80097ca:	f104 0619 	add.w	r6, r4, #25
 80097ce:	e7f5      	b.n	80097bc <_printf_i+0x230>
 80097d0:	0800bf4e 	.word	0x0800bf4e
 80097d4:	0800bf5f 	.word	0x0800bf5f

080097d8 <siprintf>:
 80097d8:	b40e      	push	{r1, r2, r3}
 80097da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097de:	b500      	push	{lr}
 80097e0:	b09c      	sub	sp, #112	; 0x70
 80097e2:	ab1d      	add	r3, sp, #116	; 0x74
 80097e4:	9002      	str	r0, [sp, #8]
 80097e6:	9006      	str	r0, [sp, #24]
 80097e8:	9107      	str	r1, [sp, #28]
 80097ea:	9104      	str	r1, [sp, #16]
 80097ec:	4808      	ldr	r0, [pc, #32]	; (8009810 <siprintf+0x38>)
 80097ee:	4909      	ldr	r1, [pc, #36]	; (8009814 <siprintf+0x3c>)
 80097f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80097f4:	9105      	str	r1, [sp, #20]
 80097f6:	6800      	ldr	r0, [r0, #0]
 80097f8:	a902      	add	r1, sp, #8
 80097fa:	9301      	str	r3, [sp, #4]
 80097fc:	f001 fb7c 	bl	800aef8 <_svfiprintf_r>
 8009800:	2200      	movs	r2, #0
 8009802:	9b02      	ldr	r3, [sp, #8]
 8009804:	701a      	strb	r2, [r3, #0]
 8009806:	b01c      	add	sp, #112	; 0x70
 8009808:	f85d eb04 	ldr.w	lr, [sp], #4
 800980c:	b003      	add	sp, #12
 800980e:	4770      	bx	lr
 8009810:	20000028 	.word	0x20000028
 8009814:	ffff0208 	.word	0xffff0208

08009818 <quorem>:
 8009818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800981c:	6903      	ldr	r3, [r0, #16]
 800981e:	690c      	ldr	r4, [r1, #16]
 8009820:	4607      	mov	r7, r0
 8009822:	42a3      	cmp	r3, r4
 8009824:	f2c0 8082 	blt.w	800992c <quorem+0x114>
 8009828:	3c01      	subs	r4, #1
 800982a:	f100 0514 	add.w	r5, r0, #20
 800982e:	f101 0814 	add.w	r8, r1, #20
 8009832:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009836:	9301      	str	r3, [sp, #4]
 8009838:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800983c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009840:	3301      	adds	r3, #1
 8009842:	429a      	cmp	r2, r3
 8009844:	fbb2 f6f3 	udiv	r6, r2, r3
 8009848:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800984c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009850:	d331      	bcc.n	80098b6 <quorem+0x9e>
 8009852:	f04f 0e00 	mov.w	lr, #0
 8009856:	4640      	mov	r0, r8
 8009858:	46ac      	mov	ip, r5
 800985a:	46f2      	mov	sl, lr
 800985c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009860:	b293      	uxth	r3, r2
 8009862:	fb06 e303 	mla	r3, r6, r3, lr
 8009866:	0c12      	lsrs	r2, r2, #16
 8009868:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800986c:	b29b      	uxth	r3, r3
 800986e:	fb06 e202 	mla	r2, r6, r2, lr
 8009872:	ebaa 0303 	sub.w	r3, sl, r3
 8009876:	f8dc a000 	ldr.w	sl, [ip]
 800987a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800987e:	fa1f fa8a 	uxth.w	sl, sl
 8009882:	4453      	add	r3, sl
 8009884:	f8dc a000 	ldr.w	sl, [ip]
 8009888:	b292      	uxth	r2, r2
 800988a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800988e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009892:	b29b      	uxth	r3, r3
 8009894:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009898:	4581      	cmp	r9, r0
 800989a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800989e:	f84c 3b04 	str.w	r3, [ip], #4
 80098a2:	d2db      	bcs.n	800985c <quorem+0x44>
 80098a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80098a8:	b92b      	cbnz	r3, 80098b6 <quorem+0x9e>
 80098aa:	9b01      	ldr	r3, [sp, #4]
 80098ac:	3b04      	subs	r3, #4
 80098ae:	429d      	cmp	r5, r3
 80098b0:	461a      	mov	r2, r3
 80098b2:	d32f      	bcc.n	8009914 <quorem+0xfc>
 80098b4:	613c      	str	r4, [r7, #16]
 80098b6:	4638      	mov	r0, r7
 80098b8:	f001 f8ce 	bl	800aa58 <__mcmp>
 80098bc:	2800      	cmp	r0, #0
 80098be:	db25      	blt.n	800990c <quorem+0xf4>
 80098c0:	4628      	mov	r0, r5
 80098c2:	f04f 0c00 	mov.w	ip, #0
 80098c6:	3601      	adds	r6, #1
 80098c8:	f858 1b04 	ldr.w	r1, [r8], #4
 80098cc:	f8d0 e000 	ldr.w	lr, [r0]
 80098d0:	b28b      	uxth	r3, r1
 80098d2:	ebac 0303 	sub.w	r3, ip, r3
 80098d6:	fa1f f28e 	uxth.w	r2, lr
 80098da:	4413      	add	r3, r2
 80098dc:	0c0a      	lsrs	r2, r1, #16
 80098de:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80098e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098ec:	45c1      	cmp	r9, r8
 80098ee:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80098f2:	f840 3b04 	str.w	r3, [r0], #4
 80098f6:	d2e7      	bcs.n	80098c8 <quorem+0xb0>
 80098f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009900:	b922      	cbnz	r2, 800990c <quorem+0xf4>
 8009902:	3b04      	subs	r3, #4
 8009904:	429d      	cmp	r5, r3
 8009906:	461a      	mov	r2, r3
 8009908:	d30a      	bcc.n	8009920 <quorem+0x108>
 800990a:	613c      	str	r4, [r7, #16]
 800990c:	4630      	mov	r0, r6
 800990e:	b003      	add	sp, #12
 8009910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009914:	6812      	ldr	r2, [r2, #0]
 8009916:	3b04      	subs	r3, #4
 8009918:	2a00      	cmp	r2, #0
 800991a:	d1cb      	bne.n	80098b4 <quorem+0x9c>
 800991c:	3c01      	subs	r4, #1
 800991e:	e7c6      	b.n	80098ae <quorem+0x96>
 8009920:	6812      	ldr	r2, [r2, #0]
 8009922:	3b04      	subs	r3, #4
 8009924:	2a00      	cmp	r2, #0
 8009926:	d1f0      	bne.n	800990a <quorem+0xf2>
 8009928:	3c01      	subs	r4, #1
 800992a:	e7eb      	b.n	8009904 <quorem+0xec>
 800992c:	2000      	movs	r0, #0
 800992e:	e7ee      	b.n	800990e <quorem+0xf6>

08009930 <_dtoa_r>:
 8009930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009934:	4616      	mov	r6, r2
 8009936:	461f      	mov	r7, r3
 8009938:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800993a:	b099      	sub	sp, #100	; 0x64
 800993c:	4605      	mov	r5, r0
 800993e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009942:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009946:	b974      	cbnz	r4, 8009966 <_dtoa_r+0x36>
 8009948:	2010      	movs	r0, #16
 800994a:	f000 fde3 	bl	800a514 <malloc>
 800994e:	4602      	mov	r2, r0
 8009950:	6268      	str	r0, [r5, #36]	; 0x24
 8009952:	b920      	cbnz	r0, 800995e <_dtoa_r+0x2e>
 8009954:	21ea      	movs	r1, #234	; 0xea
 8009956:	4ba8      	ldr	r3, [pc, #672]	; (8009bf8 <_dtoa_r+0x2c8>)
 8009958:	48a8      	ldr	r0, [pc, #672]	; (8009bfc <_dtoa_r+0x2cc>)
 800995a:	f001 fbdd 	bl	800b118 <__assert_func>
 800995e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009962:	6004      	str	r4, [r0, #0]
 8009964:	60c4      	str	r4, [r0, #12]
 8009966:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009968:	6819      	ldr	r1, [r3, #0]
 800996a:	b151      	cbz	r1, 8009982 <_dtoa_r+0x52>
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	2301      	movs	r3, #1
 8009970:	4093      	lsls	r3, r2
 8009972:	604a      	str	r2, [r1, #4]
 8009974:	608b      	str	r3, [r1, #8]
 8009976:	4628      	mov	r0, r5
 8009978:	f000 fe30 	bl	800a5dc <_Bfree>
 800997c:	2200      	movs	r2, #0
 800997e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009980:	601a      	str	r2, [r3, #0]
 8009982:	1e3b      	subs	r3, r7, #0
 8009984:	bfaf      	iteee	ge
 8009986:	2300      	movge	r3, #0
 8009988:	2201      	movlt	r2, #1
 800998a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800998e:	9305      	strlt	r3, [sp, #20]
 8009990:	bfa8      	it	ge
 8009992:	f8c8 3000 	strge.w	r3, [r8]
 8009996:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800999a:	4b99      	ldr	r3, [pc, #612]	; (8009c00 <_dtoa_r+0x2d0>)
 800999c:	bfb8      	it	lt
 800999e:	f8c8 2000 	strlt.w	r2, [r8]
 80099a2:	ea33 0309 	bics.w	r3, r3, r9
 80099a6:	d119      	bne.n	80099dc <_dtoa_r+0xac>
 80099a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80099ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80099ae:	6013      	str	r3, [r2, #0]
 80099b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099b4:	4333      	orrs	r3, r6
 80099b6:	f000 857f 	beq.w	800a4b8 <_dtoa_r+0xb88>
 80099ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80099bc:	b953      	cbnz	r3, 80099d4 <_dtoa_r+0xa4>
 80099be:	4b91      	ldr	r3, [pc, #580]	; (8009c04 <_dtoa_r+0x2d4>)
 80099c0:	e022      	b.n	8009a08 <_dtoa_r+0xd8>
 80099c2:	4b91      	ldr	r3, [pc, #580]	; (8009c08 <_dtoa_r+0x2d8>)
 80099c4:	9303      	str	r3, [sp, #12]
 80099c6:	3308      	adds	r3, #8
 80099c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80099ca:	6013      	str	r3, [r2, #0]
 80099cc:	9803      	ldr	r0, [sp, #12]
 80099ce:	b019      	add	sp, #100	; 0x64
 80099d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d4:	4b8b      	ldr	r3, [pc, #556]	; (8009c04 <_dtoa_r+0x2d4>)
 80099d6:	9303      	str	r3, [sp, #12]
 80099d8:	3303      	adds	r3, #3
 80099da:	e7f5      	b.n	80099c8 <_dtoa_r+0x98>
 80099dc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80099e0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80099e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80099e8:	2200      	movs	r2, #0
 80099ea:	2300      	movs	r3, #0
 80099ec:	f7f6 ffdc 	bl	80009a8 <__aeabi_dcmpeq>
 80099f0:	4680      	mov	r8, r0
 80099f2:	b158      	cbz	r0, 8009a0c <_dtoa_r+0xdc>
 80099f4:	2301      	movs	r3, #1
 80099f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80099f8:	6013      	str	r3, [r2, #0]
 80099fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f000 8558 	beq.w	800a4b2 <_dtoa_r+0xb82>
 8009a02:	4882      	ldr	r0, [pc, #520]	; (8009c0c <_dtoa_r+0x2dc>)
 8009a04:	6018      	str	r0, [r3, #0]
 8009a06:	1e43      	subs	r3, r0, #1
 8009a08:	9303      	str	r3, [sp, #12]
 8009a0a:	e7df      	b.n	80099cc <_dtoa_r+0x9c>
 8009a0c:	ab16      	add	r3, sp, #88	; 0x58
 8009a0e:	9301      	str	r3, [sp, #4]
 8009a10:	ab17      	add	r3, sp, #92	; 0x5c
 8009a12:	9300      	str	r3, [sp, #0]
 8009a14:	4628      	mov	r0, r5
 8009a16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009a1a:	f001 f8c5 	bl	800aba8 <__d2b>
 8009a1e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009a22:	4683      	mov	fp, r0
 8009a24:	2c00      	cmp	r4, #0
 8009a26:	d07f      	beq.n	8009b28 <_dtoa_r+0x1f8>
 8009a28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a2e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009a32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a36:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009a3a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009a3e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009a42:	2200      	movs	r2, #0
 8009a44:	4b72      	ldr	r3, [pc, #456]	; (8009c10 <_dtoa_r+0x2e0>)
 8009a46:	f7f6 fb8f 	bl	8000168 <__aeabi_dsub>
 8009a4a:	a365      	add	r3, pc, #404	; (adr r3, 8009be0 <_dtoa_r+0x2b0>)
 8009a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a50:	f7f6 fd42 	bl	80004d8 <__aeabi_dmul>
 8009a54:	a364      	add	r3, pc, #400	; (adr r3, 8009be8 <_dtoa_r+0x2b8>)
 8009a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5a:	f7f6 fb87 	bl	800016c <__adddf3>
 8009a5e:	4606      	mov	r6, r0
 8009a60:	4620      	mov	r0, r4
 8009a62:	460f      	mov	r7, r1
 8009a64:	f7f6 fcce 	bl	8000404 <__aeabi_i2d>
 8009a68:	a361      	add	r3, pc, #388	; (adr r3, 8009bf0 <_dtoa_r+0x2c0>)
 8009a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6e:	f7f6 fd33 	bl	80004d8 <__aeabi_dmul>
 8009a72:	4602      	mov	r2, r0
 8009a74:	460b      	mov	r3, r1
 8009a76:	4630      	mov	r0, r6
 8009a78:	4639      	mov	r1, r7
 8009a7a:	f7f6 fb77 	bl	800016c <__adddf3>
 8009a7e:	4606      	mov	r6, r0
 8009a80:	460f      	mov	r7, r1
 8009a82:	f7f6 ffd9 	bl	8000a38 <__aeabi_d2iz>
 8009a86:	2200      	movs	r2, #0
 8009a88:	4682      	mov	sl, r0
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	4639      	mov	r1, r7
 8009a90:	f7f6 ff94 	bl	80009bc <__aeabi_dcmplt>
 8009a94:	b148      	cbz	r0, 8009aaa <_dtoa_r+0x17a>
 8009a96:	4650      	mov	r0, sl
 8009a98:	f7f6 fcb4 	bl	8000404 <__aeabi_i2d>
 8009a9c:	4632      	mov	r2, r6
 8009a9e:	463b      	mov	r3, r7
 8009aa0:	f7f6 ff82 	bl	80009a8 <__aeabi_dcmpeq>
 8009aa4:	b908      	cbnz	r0, 8009aaa <_dtoa_r+0x17a>
 8009aa6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009aaa:	f1ba 0f16 	cmp.w	sl, #22
 8009aae:	d858      	bhi.n	8009b62 <_dtoa_r+0x232>
 8009ab0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ab4:	4b57      	ldr	r3, [pc, #348]	; (8009c14 <_dtoa_r+0x2e4>)
 8009ab6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abe:	f7f6 ff7d 	bl	80009bc <__aeabi_dcmplt>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	d04f      	beq.n	8009b66 <_dtoa_r+0x236>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009acc:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ace:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009ad0:	1b1c      	subs	r4, r3, r4
 8009ad2:	1e63      	subs	r3, r4, #1
 8009ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ad6:	bf49      	itett	mi
 8009ad8:	f1c4 0301 	rsbmi	r3, r4, #1
 8009adc:	2300      	movpl	r3, #0
 8009ade:	9306      	strmi	r3, [sp, #24]
 8009ae0:	2300      	movmi	r3, #0
 8009ae2:	bf54      	ite	pl
 8009ae4:	9306      	strpl	r3, [sp, #24]
 8009ae6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009ae8:	f1ba 0f00 	cmp.w	sl, #0
 8009aec:	db3d      	blt.n	8009b6a <_dtoa_r+0x23a>
 8009aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009af0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009af4:	4453      	add	r3, sl
 8009af6:	9309      	str	r3, [sp, #36]	; 0x24
 8009af8:	2300      	movs	r3, #0
 8009afa:	930a      	str	r3, [sp, #40]	; 0x28
 8009afc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009afe:	2b09      	cmp	r3, #9
 8009b00:	f200 808c 	bhi.w	8009c1c <_dtoa_r+0x2ec>
 8009b04:	2b05      	cmp	r3, #5
 8009b06:	bfc4      	itt	gt
 8009b08:	3b04      	subgt	r3, #4
 8009b0a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009b0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b0e:	bfc8      	it	gt
 8009b10:	2400      	movgt	r4, #0
 8009b12:	f1a3 0302 	sub.w	r3, r3, #2
 8009b16:	bfd8      	it	le
 8009b18:	2401      	movle	r4, #1
 8009b1a:	2b03      	cmp	r3, #3
 8009b1c:	f200 808a 	bhi.w	8009c34 <_dtoa_r+0x304>
 8009b20:	e8df f003 	tbb	[pc, r3]
 8009b24:	5b4d4f2d 	.word	0x5b4d4f2d
 8009b28:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009b2c:	441c      	add	r4, r3
 8009b2e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009b32:	2b20      	cmp	r3, #32
 8009b34:	bfc3      	ittte	gt
 8009b36:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009b3a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009b3e:	fa09 f303 	lslgt.w	r3, r9, r3
 8009b42:	f1c3 0320 	rsble	r3, r3, #32
 8009b46:	bfc6      	itte	gt
 8009b48:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009b4c:	4318      	orrgt	r0, r3
 8009b4e:	fa06 f003 	lslle.w	r0, r6, r3
 8009b52:	f7f6 fc47 	bl	80003e4 <__aeabi_ui2d>
 8009b56:	2301      	movs	r3, #1
 8009b58:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009b5c:	3c01      	subs	r4, #1
 8009b5e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009b60:	e76f      	b.n	8009a42 <_dtoa_r+0x112>
 8009b62:	2301      	movs	r3, #1
 8009b64:	e7b2      	b.n	8009acc <_dtoa_r+0x19c>
 8009b66:	900f      	str	r0, [sp, #60]	; 0x3c
 8009b68:	e7b1      	b.n	8009ace <_dtoa_r+0x19e>
 8009b6a:	9b06      	ldr	r3, [sp, #24]
 8009b6c:	eba3 030a 	sub.w	r3, r3, sl
 8009b70:	9306      	str	r3, [sp, #24]
 8009b72:	f1ca 0300 	rsb	r3, sl, #0
 8009b76:	930a      	str	r3, [sp, #40]	; 0x28
 8009b78:	2300      	movs	r3, #0
 8009b7a:	930e      	str	r3, [sp, #56]	; 0x38
 8009b7c:	e7be      	b.n	8009afc <_dtoa_r+0x1cc>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	dc58      	bgt.n	8009c3a <_dtoa_r+0x30a>
 8009b88:	f04f 0901 	mov.w	r9, #1
 8009b8c:	464b      	mov	r3, r9
 8009b8e:	f8cd 9020 	str.w	r9, [sp, #32]
 8009b92:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009b96:	2200      	movs	r2, #0
 8009b98:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009b9a:	6042      	str	r2, [r0, #4]
 8009b9c:	2204      	movs	r2, #4
 8009b9e:	f102 0614 	add.w	r6, r2, #20
 8009ba2:	429e      	cmp	r6, r3
 8009ba4:	6841      	ldr	r1, [r0, #4]
 8009ba6:	d94e      	bls.n	8009c46 <_dtoa_r+0x316>
 8009ba8:	4628      	mov	r0, r5
 8009baa:	f000 fcd7 	bl	800a55c <_Balloc>
 8009bae:	9003      	str	r0, [sp, #12]
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d14c      	bne.n	8009c4e <_dtoa_r+0x31e>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009bba:	4b17      	ldr	r3, [pc, #92]	; (8009c18 <_dtoa_r+0x2e8>)
 8009bbc:	e6cc      	b.n	8009958 <_dtoa_r+0x28>
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e7de      	b.n	8009b80 <_dtoa_r+0x250>
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bc6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009bc8:	eb0a 0903 	add.w	r9, sl, r3
 8009bcc:	f109 0301 	add.w	r3, r9, #1
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	9308      	str	r3, [sp, #32]
 8009bd4:	bfb8      	it	lt
 8009bd6:	2301      	movlt	r3, #1
 8009bd8:	e7dd      	b.n	8009b96 <_dtoa_r+0x266>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e7f2      	b.n	8009bc4 <_dtoa_r+0x294>
 8009bde:	bf00      	nop
 8009be0:	636f4361 	.word	0x636f4361
 8009be4:	3fd287a7 	.word	0x3fd287a7
 8009be8:	8b60c8b3 	.word	0x8b60c8b3
 8009bec:	3fc68a28 	.word	0x3fc68a28
 8009bf0:	509f79fb 	.word	0x509f79fb
 8009bf4:	3fd34413 	.word	0x3fd34413
 8009bf8:	0800bf7d 	.word	0x0800bf7d
 8009bfc:	0800bf94 	.word	0x0800bf94
 8009c00:	7ff00000 	.word	0x7ff00000
 8009c04:	0800bf79 	.word	0x0800bf79
 8009c08:	0800bf70 	.word	0x0800bf70
 8009c0c:	0800bf4d 	.word	0x0800bf4d
 8009c10:	3ff80000 	.word	0x3ff80000
 8009c14:	0800c088 	.word	0x0800c088
 8009c18:	0800bfef 	.word	0x0800bfef
 8009c1c:	2401      	movs	r4, #1
 8009c1e:	2300      	movs	r3, #0
 8009c20:	940b      	str	r4, [sp, #44]	; 0x2c
 8009c22:	9322      	str	r3, [sp, #136]	; 0x88
 8009c24:	f04f 39ff 	mov.w	r9, #4294967295
 8009c28:	2200      	movs	r2, #0
 8009c2a:	2312      	movs	r3, #18
 8009c2c:	f8cd 9020 	str.w	r9, [sp, #32]
 8009c30:	9223      	str	r2, [sp, #140]	; 0x8c
 8009c32:	e7b0      	b.n	8009b96 <_dtoa_r+0x266>
 8009c34:	2301      	movs	r3, #1
 8009c36:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c38:	e7f4      	b.n	8009c24 <_dtoa_r+0x2f4>
 8009c3a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8009c3e:	464b      	mov	r3, r9
 8009c40:	f8cd 9020 	str.w	r9, [sp, #32]
 8009c44:	e7a7      	b.n	8009b96 <_dtoa_r+0x266>
 8009c46:	3101      	adds	r1, #1
 8009c48:	6041      	str	r1, [r0, #4]
 8009c4a:	0052      	lsls	r2, r2, #1
 8009c4c:	e7a7      	b.n	8009b9e <_dtoa_r+0x26e>
 8009c4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c50:	9a03      	ldr	r2, [sp, #12]
 8009c52:	601a      	str	r2, [r3, #0]
 8009c54:	9b08      	ldr	r3, [sp, #32]
 8009c56:	2b0e      	cmp	r3, #14
 8009c58:	f200 80a8 	bhi.w	8009dac <_dtoa_r+0x47c>
 8009c5c:	2c00      	cmp	r4, #0
 8009c5e:	f000 80a5 	beq.w	8009dac <_dtoa_r+0x47c>
 8009c62:	f1ba 0f00 	cmp.w	sl, #0
 8009c66:	dd34      	ble.n	8009cd2 <_dtoa_r+0x3a2>
 8009c68:	4a9a      	ldr	r2, [pc, #616]	; (8009ed4 <_dtoa_r+0x5a4>)
 8009c6a:	f00a 030f 	and.w	r3, sl, #15
 8009c6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c72:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009c76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c7a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009c7e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8009c82:	d016      	beq.n	8009cb2 <_dtoa_r+0x382>
 8009c84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c88:	4b93      	ldr	r3, [pc, #588]	; (8009ed8 <_dtoa_r+0x5a8>)
 8009c8a:	2703      	movs	r7, #3
 8009c8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c90:	f7f6 fd4c 	bl	800072c <__aeabi_ddiv>
 8009c94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c98:	f004 040f 	and.w	r4, r4, #15
 8009c9c:	4e8e      	ldr	r6, [pc, #568]	; (8009ed8 <_dtoa_r+0x5a8>)
 8009c9e:	b954      	cbnz	r4, 8009cb6 <_dtoa_r+0x386>
 8009ca0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009ca4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ca8:	f7f6 fd40 	bl	800072c <__aeabi_ddiv>
 8009cac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cb0:	e029      	b.n	8009d06 <_dtoa_r+0x3d6>
 8009cb2:	2702      	movs	r7, #2
 8009cb4:	e7f2      	b.n	8009c9c <_dtoa_r+0x36c>
 8009cb6:	07e1      	lsls	r1, r4, #31
 8009cb8:	d508      	bpl.n	8009ccc <_dtoa_r+0x39c>
 8009cba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009cbe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009cc2:	f7f6 fc09 	bl	80004d8 <__aeabi_dmul>
 8009cc6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009cca:	3701      	adds	r7, #1
 8009ccc:	1064      	asrs	r4, r4, #1
 8009cce:	3608      	adds	r6, #8
 8009cd0:	e7e5      	b.n	8009c9e <_dtoa_r+0x36e>
 8009cd2:	f000 80a5 	beq.w	8009e20 <_dtoa_r+0x4f0>
 8009cd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009cda:	f1ca 0400 	rsb	r4, sl, #0
 8009cde:	4b7d      	ldr	r3, [pc, #500]	; (8009ed4 <_dtoa_r+0x5a4>)
 8009ce0:	f004 020f 	and.w	r2, r4, #15
 8009ce4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	f7f6 fbf4 	bl	80004d8 <__aeabi_dmul>
 8009cf0:	2702      	movs	r7, #2
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cf8:	4e77      	ldr	r6, [pc, #476]	; (8009ed8 <_dtoa_r+0x5a8>)
 8009cfa:	1124      	asrs	r4, r4, #4
 8009cfc:	2c00      	cmp	r4, #0
 8009cfe:	f040 8084 	bne.w	8009e0a <_dtoa_r+0x4da>
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1d2      	bne.n	8009cac <_dtoa_r+0x37c>
 8009d06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f000 808b 	beq.w	8009e24 <_dtoa_r+0x4f4>
 8009d0e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009d12:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009d16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	4b6f      	ldr	r3, [pc, #444]	; (8009edc <_dtoa_r+0x5ac>)
 8009d1e:	f7f6 fe4d 	bl	80009bc <__aeabi_dcmplt>
 8009d22:	2800      	cmp	r0, #0
 8009d24:	d07e      	beq.n	8009e24 <_dtoa_r+0x4f4>
 8009d26:	9b08      	ldr	r3, [sp, #32]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d07b      	beq.n	8009e24 <_dtoa_r+0x4f4>
 8009d2c:	f1b9 0f00 	cmp.w	r9, #0
 8009d30:	dd38      	ble.n	8009da4 <_dtoa_r+0x474>
 8009d32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009d36:	2200      	movs	r2, #0
 8009d38:	4b69      	ldr	r3, [pc, #420]	; (8009ee0 <_dtoa_r+0x5b0>)
 8009d3a:	f7f6 fbcd 	bl	80004d8 <__aeabi_dmul>
 8009d3e:	464c      	mov	r4, r9
 8009d40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d44:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009d48:	3701      	adds	r7, #1
 8009d4a:	4638      	mov	r0, r7
 8009d4c:	f7f6 fb5a 	bl	8000404 <__aeabi_i2d>
 8009d50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d54:	f7f6 fbc0 	bl	80004d8 <__aeabi_dmul>
 8009d58:	2200      	movs	r2, #0
 8009d5a:	4b62      	ldr	r3, [pc, #392]	; (8009ee4 <_dtoa_r+0x5b4>)
 8009d5c:	f7f6 fa06 	bl	800016c <__adddf3>
 8009d60:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009d64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d68:	9611      	str	r6, [sp, #68]	; 0x44
 8009d6a:	2c00      	cmp	r4, #0
 8009d6c:	d15d      	bne.n	8009e2a <_dtoa_r+0x4fa>
 8009d6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d72:	2200      	movs	r2, #0
 8009d74:	4b5c      	ldr	r3, [pc, #368]	; (8009ee8 <_dtoa_r+0x5b8>)
 8009d76:	f7f6 f9f7 	bl	8000168 <__aeabi_dsub>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d82:	4633      	mov	r3, r6
 8009d84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d86:	f7f6 fe37 	bl	80009f8 <__aeabi_dcmpgt>
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	f040 829c 	bne.w	800a2c8 <_dtoa_r+0x998>
 8009d90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d96:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009d9a:	f7f6 fe0f 	bl	80009bc <__aeabi_dcmplt>
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	f040 8290 	bne.w	800a2c4 <_dtoa_r+0x994>
 8009da4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009da8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009dac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f2c0 8152 	blt.w	800a058 <_dtoa_r+0x728>
 8009db4:	f1ba 0f0e 	cmp.w	sl, #14
 8009db8:	f300 814e 	bgt.w	800a058 <_dtoa_r+0x728>
 8009dbc:	4b45      	ldr	r3, [pc, #276]	; (8009ed4 <_dtoa_r+0x5a4>)
 8009dbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009dc2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009dc6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009dca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	f280 80db 	bge.w	8009f88 <_dtoa_r+0x658>
 8009dd2:	9b08      	ldr	r3, [sp, #32]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f300 80d7 	bgt.w	8009f88 <_dtoa_r+0x658>
 8009dda:	f040 8272 	bne.w	800a2c2 <_dtoa_r+0x992>
 8009dde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009de2:	2200      	movs	r2, #0
 8009de4:	4b40      	ldr	r3, [pc, #256]	; (8009ee8 <_dtoa_r+0x5b8>)
 8009de6:	f7f6 fb77 	bl	80004d8 <__aeabi_dmul>
 8009dea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dee:	f7f6 fdf9 	bl	80009e4 <__aeabi_dcmpge>
 8009df2:	9c08      	ldr	r4, [sp, #32]
 8009df4:	4626      	mov	r6, r4
 8009df6:	2800      	cmp	r0, #0
 8009df8:	f040 8248 	bne.w	800a28c <_dtoa_r+0x95c>
 8009dfc:	2331      	movs	r3, #49	; 0x31
 8009dfe:	9f03      	ldr	r7, [sp, #12]
 8009e00:	f10a 0a01 	add.w	sl, sl, #1
 8009e04:	f807 3b01 	strb.w	r3, [r7], #1
 8009e08:	e244      	b.n	800a294 <_dtoa_r+0x964>
 8009e0a:	07e2      	lsls	r2, r4, #31
 8009e0c:	d505      	bpl.n	8009e1a <_dtoa_r+0x4ea>
 8009e0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e12:	f7f6 fb61 	bl	80004d8 <__aeabi_dmul>
 8009e16:	2301      	movs	r3, #1
 8009e18:	3701      	adds	r7, #1
 8009e1a:	1064      	asrs	r4, r4, #1
 8009e1c:	3608      	adds	r6, #8
 8009e1e:	e76d      	b.n	8009cfc <_dtoa_r+0x3cc>
 8009e20:	2702      	movs	r7, #2
 8009e22:	e770      	b.n	8009d06 <_dtoa_r+0x3d6>
 8009e24:	46d0      	mov	r8, sl
 8009e26:	9c08      	ldr	r4, [sp, #32]
 8009e28:	e78f      	b.n	8009d4a <_dtoa_r+0x41a>
 8009e2a:	9903      	ldr	r1, [sp, #12]
 8009e2c:	4b29      	ldr	r3, [pc, #164]	; (8009ed4 <_dtoa_r+0x5a4>)
 8009e2e:	4421      	add	r1, r4
 8009e30:	9112      	str	r1, [sp, #72]	; 0x48
 8009e32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e38:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009e3c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e40:	2900      	cmp	r1, #0
 8009e42:	d055      	beq.n	8009ef0 <_dtoa_r+0x5c0>
 8009e44:	2000      	movs	r0, #0
 8009e46:	4929      	ldr	r1, [pc, #164]	; (8009eec <_dtoa_r+0x5bc>)
 8009e48:	f7f6 fc70 	bl	800072c <__aeabi_ddiv>
 8009e4c:	463b      	mov	r3, r7
 8009e4e:	4632      	mov	r2, r6
 8009e50:	f7f6 f98a 	bl	8000168 <__aeabi_dsub>
 8009e54:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009e58:	9f03      	ldr	r7, [sp, #12]
 8009e5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e5e:	f7f6 fdeb 	bl	8000a38 <__aeabi_d2iz>
 8009e62:	4604      	mov	r4, r0
 8009e64:	f7f6 face 	bl	8000404 <__aeabi_i2d>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e70:	f7f6 f97a 	bl	8000168 <__aeabi_dsub>
 8009e74:	4602      	mov	r2, r0
 8009e76:	460b      	mov	r3, r1
 8009e78:	3430      	adds	r4, #48	; 0x30
 8009e7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009e7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e82:	f807 4b01 	strb.w	r4, [r7], #1
 8009e86:	f7f6 fd99 	bl	80009bc <__aeabi_dcmplt>
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	d174      	bne.n	8009f78 <_dtoa_r+0x648>
 8009e8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e92:	2000      	movs	r0, #0
 8009e94:	4911      	ldr	r1, [pc, #68]	; (8009edc <_dtoa_r+0x5ac>)
 8009e96:	f7f6 f967 	bl	8000168 <__aeabi_dsub>
 8009e9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e9e:	f7f6 fd8d 	bl	80009bc <__aeabi_dcmplt>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	f040 80b7 	bne.w	800a016 <_dtoa_r+0x6e6>
 8009ea8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009eaa:	429f      	cmp	r7, r3
 8009eac:	f43f af7a 	beq.w	8009da4 <_dtoa_r+0x474>
 8009eb0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	4b0a      	ldr	r3, [pc, #40]	; (8009ee0 <_dtoa_r+0x5b0>)
 8009eb8:	f7f6 fb0e 	bl	80004d8 <__aeabi_dmul>
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009ec2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ec6:	4b06      	ldr	r3, [pc, #24]	; (8009ee0 <_dtoa_r+0x5b0>)
 8009ec8:	f7f6 fb06 	bl	80004d8 <__aeabi_dmul>
 8009ecc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ed0:	e7c3      	b.n	8009e5a <_dtoa_r+0x52a>
 8009ed2:	bf00      	nop
 8009ed4:	0800c088 	.word	0x0800c088
 8009ed8:	0800c060 	.word	0x0800c060
 8009edc:	3ff00000 	.word	0x3ff00000
 8009ee0:	40240000 	.word	0x40240000
 8009ee4:	401c0000 	.word	0x401c0000
 8009ee8:	40140000 	.word	0x40140000
 8009eec:	3fe00000 	.word	0x3fe00000
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	4639      	mov	r1, r7
 8009ef4:	f7f6 faf0 	bl	80004d8 <__aeabi_dmul>
 8009ef8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009efa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009efe:	9c03      	ldr	r4, [sp, #12]
 8009f00:	9314      	str	r3, [sp, #80]	; 0x50
 8009f02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f06:	f7f6 fd97 	bl	8000a38 <__aeabi_d2iz>
 8009f0a:	9015      	str	r0, [sp, #84]	; 0x54
 8009f0c:	f7f6 fa7a 	bl	8000404 <__aeabi_i2d>
 8009f10:	4602      	mov	r2, r0
 8009f12:	460b      	mov	r3, r1
 8009f14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f18:	f7f6 f926 	bl	8000168 <__aeabi_dsub>
 8009f1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f1e:	4606      	mov	r6, r0
 8009f20:	3330      	adds	r3, #48	; 0x30
 8009f22:	f804 3b01 	strb.w	r3, [r4], #1
 8009f26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f28:	460f      	mov	r7, r1
 8009f2a:	429c      	cmp	r4, r3
 8009f2c:	f04f 0200 	mov.w	r2, #0
 8009f30:	d124      	bne.n	8009f7c <_dtoa_r+0x64c>
 8009f32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009f36:	4bb0      	ldr	r3, [pc, #704]	; (800a1f8 <_dtoa_r+0x8c8>)
 8009f38:	f7f6 f918 	bl	800016c <__adddf3>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	4630      	mov	r0, r6
 8009f42:	4639      	mov	r1, r7
 8009f44:	f7f6 fd58 	bl	80009f8 <__aeabi_dcmpgt>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	d163      	bne.n	800a014 <_dtoa_r+0x6e4>
 8009f4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f50:	2000      	movs	r0, #0
 8009f52:	49a9      	ldr	r1, [pc, #676]	; (800a1f8 <_dtoa_r+0x8c8>)
 8009f54:	f7f6 f908 	bl	8000168 <__aeabi_dsub>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	4630      	mov	r0, r6
 8009f5e:	4639      	mov	r1, r7
 8009f60:	f7f6 fd2c 	bl	80009bc <__aeabi_dcmplt>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	f43f af1d 	beq.w	8009da4 <_dtoa_r+0x474>
 8009f6a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009f6c:	1e7b      	subs	r3, r7, #1
 8009f6e:	9314      	str	r3, [sp, #80]	; 0x50
 8009f70:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009f74:	2b30      	cmp	r3, #48	; 0x30
 8009f76:	d0f8      	beq.n	8009f6a <_dtoa_r+0x63a>
 8009f78:	46c2      	mov	sl, r8
 8009f7a:	e03b      	b.n	8009ff4 <_dtoa_r+0x6c4>
 8009f7c:	4b9f      	ldr	r3, [pc, #636]	; (800a1fc <_dtoa_r+0x8cc>)
 8009f7e:	f7f6 faab 	bl	80004d8 <__aeabi_dmul>
 8009f82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f86:	e7bc      	b.n	8009f02 <_dtoa_r+0x5d2>
 8009f88:	9f03      	ldr	r7, [sp, #12]
 8009f8a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009f8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f92:	4640      	mov	r0, r8
 8009f94:	4649      	mov	r1, r9
 8009f96:	f7f6 fbc9 	bl	800072c <__aeabi_ddiv>
 8009f9a:	f7f6 fd4d 	bl	8000a38 <__aeabi_d2iz>
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	f7f6 fa30 	bl	8000404 <__aeabi_i2d>
 8009fa4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fa8:	f7f6 fa96 	bl	80004d8 <__aeabi_dmul>
 8009fac:	4602      	mov	r2, r0
 8009fae:	460b      	mov	r3, r1
 8009fb0:	4640      	mov	r0, r8
 8009fb2:	4649      	mov	r1, r9
 8009fb4:	f7f6 f8d8 	bl	8000168 <__aeabi_dsub>
 8009fb8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009fbc:	f807 6b01 	strb.w	r6, [r7], #1
 8009fc0:	9e03      	ldr	r6, [sp, #12]
 8009fc2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009fc6:	1bbe      	subs	r6, r7, r6
 8009fc8:	45b4      	cmp	ip, r6
 8009fca:	4602      	mov	r2, r0
 8009fcc:	460b      	mov	r3, r1
 8009fce:	d136      	bne.n	800a03e <_dtoa_r+0x70e>
 8009fd0:	f7f6 f8cc 	bl	800016c <__adddf3>
 8009fd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fd8:	4680      	mov	r8, r0
 8009fda:	4689      	mov	r9, r1
 8009fdc:	f7f6 fd0c 	bl	80009f8 <__aeabi_dcmpgt>
 8009fe0:	bb58      	cbnz	r0, 800a03a <_dtoa_r+0x70a>
 8009fe2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fe6:	4640      	mov	r0, r8
 8009fe8:	4649      	mov	r1, r9
 8009fea:	f7f6 fcdd 	bl	80009a8 <__aeabi_dcmpeq>
 8009fee:	b108      	cbz	r0, 8009ff4 <_dtoa_r+0x6c4>
 8009ff0:	07e1      	lsls	r1, r4, #31
 8009ff2:	d422      	bmi.n	800a03a <_dtoa_r+0x70a>
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	4659      	mov	r1, fp
 8009ff8:	f000 faf0 	bl	800a5dc <_Bfree>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	703b      	strb	r3, [r7, #0]
 800a000:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a002:	f10a 0001 	add.w	r0, sl, #1
 800a006:	6018      	str	r0, [r3, #0]
 800a008:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	f43f acde 	beq.w	80099cc <_dtoa_r+0x9c>
 800a010:	601f      	str	r7, [r3, #0]
 800a012:	e4db      	b.n	80099cc <_dtoa_r+0x9c>
 800a014:	4627      	mov	r7, r4
 800a016:	463b      	mov	r3, r7
 800a018:	461f      	mov	r7, r3
 800a01a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a01e:	2a39      	cmp	r2, #57	; 0x39
 800a020:	d107      	bne.n	800a032 <_dtoa_r+0x702>
 800a022:	9a03      	ldr	r2, [sp, #12]
 800a024:	429a      	cmp	r2, r3
 800a026:	d1f7      	bne.n	800a018 <_dtoa_r+0x6e8>
 800a028:	2230      	movs	r2, #48	; 0x30
 800a02a:	9903      	ldr	r1, [sp, #12]
 800a02c:	f108 0801 	add.w	r8, r8, #1
 800a030:	700a      	strb	r2, [r1, #0]
 800a032:	781a      	ldrb	r2, [r3, #0]
 800a034:	3201      	adds	r2, #1
 800a036:	701a      	strb	r2, [r3, #0]
 800a038:	e79e      	b.n	8009f78 <_dtoa_r+0x648>
 800a03a:	46d0      	mov	r8, sl
 800a03c:	e7eb      	b.n	800a016 <_dtoa_r+0x6e6>
 800a03e:	2200      	movs	r2, #0
 800a040:	4b6e      	ldr	r3, [pc, #440]	; (800a1fc <_dtoa_r+0x8cc>)
 800a042:	f7f6 fa49 	bl	80004d8 <__aeabi_dmul>
 800a046:	2200      	movs	r2, #0
 800a048:	2300      	movs	r3, #0
 800a04a:	4680      	mov	r8, r0
 800a04c:	4689      	mov	r9, r1
 800a04e:	f7f6 fcab 	bl	80009a8 <__aeabi_dcmpeq>
 800a052:	2800      	cmp	r0, #0
 800a054:	d09b      	beq.n	8009f8e <_dtoa_r+0x65e>
 800a056:	e7cd      	b.n	8009ff4 <_dtoa_r+0x6c4>
 800a058:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a05a:	2a00      	cmp	r2, #0
 800a05c:	f000 80d0 	beq.w	800a200 <_dtoa_r+0x8d0>
 800a060:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a062:	2a01      	cmp	r2, #1
 800a064:	f300 80ae 	bgt.w	800a1c4 <_dtoa_r+0x894>
 800a068:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a06a:	2a00      	cmp	r2, #0
 800a06c:	f000 80a6 	beq.w	800a1bc <_dtoa_r+0x88c>
 800a070:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a074:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a076:	9f06      	ldr	r7, [sp, #24]
 800a078:	9a06      	ldr	r2, [sp, #24]
 800a07a:	2101      	movs	r1, #1
 800a07c:	441a      	add	r2, r3
 800a07e:	9206      	str	r2, [sp, #24]
 800a080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a082:	4628      	mov	r0, r5
 800a084:	441a      	add	r2, r3
 800a086:	9209      	str	r2, [sp, #36]	; 0x24
 800a088:	f000 fb5e 	bl	800a748 <__i2b>
 800a08c:	4606      	mov	r6, r0
 800a08e:	2f00      	cmp	r7, #0
 800a090:	dd0c      	ble.n	800a0ac <_dtoa_r+0x77c>
 800a092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a094:	2b00      	cmp	r3, #0
 800a096:	dd09      	ble.n	800a0ac <_dtoa_r+0x77c>
 800a098:	42bb      	cmp	r3, r7
 800a09a:	bfa8      	it	ge
 800a09c:	463b      	movge	r3, r7
 800a09e:	9a06      	ldr	r2, [sp, #24]
 800a0a0:	1aff      	subs	r7, r7, r3
 800a0a2:	1ad2      	subs	r2, r2, r3
 800a0a4:	9206      	str	r2, [sp, #24]
 800a0a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0ae:	b1f3      	cbz	r3, 800a0ee <_dtoa_r+0x7be>
 800a0b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	f000 80a8 	beq.w	800a208 <_dtoa_r+0x8d8>
 800a0b8:	2c00      	cmp	r4, #0
 800a0ba:	dd10      	ble.n	800a0de <_dtoa_r+0x7ae>
 800a0bc:	4631      	mov	r1, r6
 800a0be:	4622      	mov	r2, r4
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	f000 fbff 	bl	800a8c4 <__pow5mult>
 800a0c6:	465a      	mov	r2, fp
 800a0c8:	4601      	mov	r1, r0
 800a0ca:	4606      	mov	r6, r0
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	f000 fb51 	bl	800a774 <__multiply>
 800a0d2:	4680      	mov	r8, r0
 800a0d4:	4659      	mov	r1, fp
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	f000 fa80 	bl	800a5dc <_Bfree>
 800a0dc:	46c3      	mov	fp, r8
 800a0de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e0:	1b1a      	subs	r2, r3, r4
 800a0e2:	d004      	beq.n	800a0ee <_dtoa_r+0x7be>
 800a0e4:	4659      	mov	r1, fp
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	f000 fbec 	bl	800a8c4 <__pow5mult>
 800a0ec:	4683      	mov	fp, r0
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	f000 fb29 	bl	800a748 <__i2b>
 800a0f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f340 8086 	ble.w	800a20c <_dtoa_r+0x8dc>
 800a100:	461a      	mov	r2, r3
 800a102:	4601      	mov	r1, r0
 800a104:	4628      	mov	r0, r5
 800a106:	f000 fbdd 	bl	800a8c4 <__pow5mult>
 800a10a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a10c:	4604      	mov	r4, r0
 800a10e:	2b01      	cmp	r3, #1
 800a110:	dd7f      	ble.n	800a212 <_dtoa_r+0x8e2>
 800a112:	f04f 0800 	mov.w	r8, #0
 800a116:	6923      	ldr	r3, [r4, #16]
 800a118:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a11c:	6918      	ldr	r0, [r3, #16]
 800a11e:	f000 fac5 	bl	800a6ac <__hi0bits>
 800a122:	f1c0 0020 	rsb	r0, r0, #32
 800a126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a128:	4418      	add	r0, r3
 800a12a:	f010 001f 	ands.w	r0, r0, #31
 800a12e:	f000 8092 	beq.w	800a256 <_dtoa_r+0x926>
 800a132:	f1c0 0320 	rsb	r3, r0, #32
 800a136:	2b04      	cmp	r3, #4
 800a138:	f340 808a 	ble.w	800a250 <_dtoa_r+0x920>
 800a13c:	f1c0 001c 	rsb	r0, r0, #28
 800a140:	9b06      	ldr	r3, [sp, #24]
 800a142:	4407      	add	r7, r0
 800a144:	4403      	add	r3, r0
 800a146:	9306      	str	r3, [sp, #24]
 800a148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a14a:	4403      	add	r3, r0
 800a14c:	9309      	str	r3, [sp, #36]	; 0x24
 800a14e:	9b06      	ldr	r3, [sp, #24]
 800a150:	2b00      	cmp	r3, #0
 800a152:	dd05      	ble.n	800a160 <_dtoa_r+0x830>
 800a154:	4659      	mov	r1, fp
 800a156:	461a      	mov	r2, r3
 800a158:	4628      	mov	r0, r5
 800a15a:	f000 fc0d 	bl	800a978 <__lshift>
 800a15e:	4683      	mov	fp, r0
 800a160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a162:	2b00      	cmp	r3, #0
 800a164:	dd05      	ble.n	800a172 <_dtoa_r+0x842>
 800a166:	4621      	mov	r1, r4
 800a168:	461a      	mov	r2, r3
 800a16a:	4628      	mov	r0, r5
 800a16c:	f000 fc04 	bl	800a978 <__lshift>
 800a170:	4604      	mov	r4, r0
 800a172:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a174:	2b00      	cmp	r3, #0
 800a176:	d070      	beq.n	800a25a <_dtoa_r+0x92a>
 800a178:	4621      	mov	r1, r4
 800a17a:	4658      	mov	r0, fp
 800a17c:	f000 fc6c 	bl	800aa58 <__mcmp>
 800a180:	2800      	cmp	r0, #0
 800a182:	da6a      	bge.n	800a25a <_dtoa_r+0x92a>
 800a184:	2300      	movs	r3, #0
 800a186:	4659      	mov	r1, fp
 800a188:	220a      	movs	r2, #10
 800a18a:	4628      	mov	r0, r5
 800a18c:	f000 fa48 	bl	800a620 <__multadd>
 800a190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a192:	4683      	mov	fp, r0
 800a194:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f000 8194 	beq.w	800a4c6 <_dtoa_r+0xb96>
 800a19e:	4631      	mov	r1, r6
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	220a      	movs	r2, #10
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	f000 fa3b 	bl	800a620 <__multadd>
 800a1aa:	f1b9 0f00 	cmp.w	r9, #0
 800a1ae:	4606      	mov	r6, r0
 800a1b0:	f300 8093 	bgt.w	800a2da <_dtoa_r+0x9aa>
 800a1b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1b6:	2b02      	cmp	r3, #2
 800a1b8:	dc57      	bgt.n	800a26a <_dtoa_r+0x93a>
 800a1ba:	e08e      	b.n	800a2da <_dtoa_r+0x9aa>
 800a1bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a1be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a1c2:	e757      	b.n	800a074 <_dtoa_r+0x744>
 800a1c4:	9b08      	ldr	r3, [sp, #32]
 800a1c6:	1e5c      	subs	r4, r3, #1
 800a1c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1ca:	42a3      	cmp	r3, r4
 800a1cc:	bfb7      	itett	lt
 800a1ce:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a1d0:	1b1c      	subge	r4, r3, r4
 800a1d2:	1ae2      	sublt	r2, r4, r3
 800a1d4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a1d6:	bfbe      	ittt	lt
 800a1d8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a1da:	189b      	addlt	r3, r3, r2
 800a1dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a1de:	9b08      	ldr	r3, [sp, #32]
 800a1e0:	bfb8      	it	lt
 800a1e2:	2400      	movlt	r4, #0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	bfbb      	ittet	lt
 800a1e8:	9b06      	ldrlt	r3, [sp, #24]
 800a1ea:	9a08      	ldrlt	r2, [sp, #32]
 800a1ec:	9f06      	ldrge	r7, [sp, #24]
 800a1ee:	1a9f      	sublt	r7, r3, r2
 800a1f0:	bfac      	ite	ge
 800a1f2:	9b08      	ldrge	r3, [sp, #32]
 800a1f4:	2300      	movlt	r3, #0
 800a1f6:	e73f      	b.n	800a078 <_dtoa_r+0x748>
 800a1f8:	3fe00000 	.word	0x3fe00000
 800a1fc:	40240000 	.word	0x40240000
 800a200:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a202:	9f06      	ldr	r7, [sp, #24]
 800a204:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a206:	e742      	b.n	800a08e <_dtoa_r+0x75e>
 800a208:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a20a:	e76b      	b.n	800a0e4 <_dtoa_r+0x7b4>
 800a20c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a20e:	2b01      	cmp	r3, #1
 800a210:	dc19      	bgt.n	800a246 <_dtoa_r+0x916>
 800a212:	9b04      	ldr	r3, [sp, #16]
 800a214:	b9bb      	cbnz	r3, 800a246 <_dtoa_r+0x916>
 800a216:	9b05      	ldr	r3, [sp, #20]
 800a218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a21c:	b99b      	cbnz	r3, 800a246 <_dtoa_r+0x916>
 800a21e:	9b05      	ldr	r3, [sp, #20]
 800a220:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a224:	0d1b      	lsrs	r3, r3, #20
 800a226:	051b      	lsls	r3, r3, #20
 800a228:	b183      	cbz	r3, 800a24c <_dtoa_r+0x91c>
 800a22a:	f04f 0801 	mov.w	r8, #1
 800a22e:	9b06      	ldr	r3, [sp, #24]
 800a230:	3301      	adds	r3, #1
 800a232:	9306      	str	r3, [sp, #24]
 800a234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a236:	3301      	adds	r3, #1
 800a238:	9309      	str	r3, [sp, #36]	; 0x24
 800a23a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f47f af6a 	bne.w	800a116 <_dtoa_r+0x7e6>
 800a242:	2001      	movs	r0, #1
 800a244:	e76f      	b.n	800a126 <_dtoa_r+0x7f6>
 800a246:	f04f 0800 	mov.w	r8, #0
 800a24a:	e7f6      	b.n	800a23a <_dtoa_r+0x90a>
 800a24c:	4698      	mov	r8, r3
 800a24e:	e7f4      	b.n	800a23a <_dtoa_r+0x90a>
 800a250:	f43f af7d 	beq.w	800a14e <_dtoa_r+0x81e>
 800a254:	4618      	mov	r0, r3
 800a256:	301c      	adds	r0, #28
 800a258:	e772      	b.n	800a140 <_dtoa_r+0x810>
 800a25a:	9b08      	ldr	r3, [sp, #32]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	dc36      	bgt.n	800a2ce <_dtoa_r+0x99e>
 800a260:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a262:	2b02      	cmp	r3, #2
 800a264:	dd33      	ble.n	800a2ce <_dtoa_r+0x99e>
 800a266:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a26a:	f1b9 0f00 	cmp.w	r9, #0
 800a26e:	d10d      	bne.n	800a28c <_dtoa_r+0x95c>
 800a270:	4621      	mov	r1, r4
 800a272:	464b      	mov	r3, r9
 800a274:	2205      	movs	r2, #5
 800a276:	4628      	mov	r0, r5
 800a278:	f000 f9d2 	bl	800a620 <__multadd>
 800a27c:	4601      	mov	r1, r0
 800a27e:	4604      	mov	r4, r0
 800a280:	4658      	mov	r0, fp
 800a282:	f000 fbe9 	bl	800aa58 <__mcmp>
 800a286:	2800      	cmp	r0, #0
 800a288:	f73f adb8 	bgt.w	8009dfc <_dtoa_r+0x4cc>
 800a28c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a28e:	9f03      	ldr	r7, [sp, #12]
 800a290:	ea6f 0a03 	mvn.w	sl, r3
 800a294:	f04f 0800 	mov.w	r8, #0
 800a298:	4621      	mov	r1, r4
 800a29a:	4628      	mov	r0, r5
 800a29c:	f000 f99e 	bl	800a5dc <_Bfree>
 800a2a0:	2e00      	cmp	r6, #0
 800a2a2:	f43f aea7 	beq.w	8009ff4 <_dtoa_r+0x6c4>
 800a2a6:	f1b8 0f00 	cmp.w	r8, #0
 800a2aa:	d005      	beq.n	800a2b8 <_dtoa_r+0x988>
 800a2ac:	45b0      	cmp	r8, r6
 800a2ae:	d003      	beq.n	800a2b8 <_dtoa_r+0x988>
 800a2b0:	4641      	mov	r1, r8
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	f000 f992 	bl	800a5dc <_Bfree>
 800a2b8:	4631      	mov	r1, r6
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	f000 f98e 	bl	800a5dc <_Bfree>
 800a2c0:	e698      	b.n	8009ff4 <_dtoa_r+0x6c4>
 800a2c2:	2400      	movs	r4, #0
 800a2c4:	4626      	mov	r6, r4
 800a2c6:	e7e1      	b.n	800a28c <_dtoa_r+0x95c>
 800a2c8:	46c2      	mov	sl, r8
 800a2ca:	4626      	mov	r6, r4
 800a2cc:	e596      	b.n	8009dfc <_dtoa_r+0x4cc>
 800a2ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f000 80fd 	beq.w	800a4d4 <_dtoa_r+0xba4>
 800a2da:	2f00      	cmp	r7, #0
 800a2dc:	dd05      	ble.n	800a2ea <_dtoa_r+0x9ba>
 800a2de:	4631      	mov	r1, r6
 800a2e0:	463a      	mov	r2, r7
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	f000 fb48 	bl	800a978 <__lshift>
 800a2e8:	4606      	mov	r6, r0
 800a2ea:	f1b8 0f00 	cmp.w	r8, #0
 800a2ee:	d05c      	beq.n	800a3aa <_dtoa_r+0xa7a>
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	6871      	ldr	r1, [r6, #4]
 800a2f4:	f000 f932 	bl	800a55c <_Balloc>
 800a2f8:	4607      	mov	r7, r0
 800a2fa:	b928      	cbnz	r0, 800a308 <_dtoa_r+0x9d8>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a302:	4b7f      	ldr	r3, [pc, #508]	; (800a500 <_dtoa_r+0xbd0>)
 800a304:	f7ff bb28 	b.w	8009958 <_dtoa_r+0x28>
 800a308:	6932      	ldr	r2, [r6, #16]
 800a30a:	f106 010c 	add.w	r1, r6, #12
 800a30e:	3202      	adds	r2, #2
 800a310:	0092      	lsls	r2, r2, #2
 800a312:	300c      	adds	r0, #12
 800a314:	f000 f914 	bl	800a540 <memcpy>
 800a318:	2201      	movs	r2, #1
 800a31a:	4639      	mov	r1, r7
 800a31c:	4628      	mov	r0, r5
 800a31e:	f000 fb2b 	bl	800a978 <__lshift>
 800a322:	46b0      	mov	r8, r6
 800a324:	4606      	mov	r6, r0
 800a326:	9b03      	ldr	r3, [sp, #12]
 800a328:	3301      	adds	r3, #1
 800a32a:	9308      	str	r3, [sp, #32]
 800a32c:	9b03      	ldr	r3, [sp, #12]
 800a32e:	444b      	add	r3, r9
 800a330:	930a      	str	r3, [sp, #40]	; 0x28
 800a332:	9b04      	ldr	r3, [sp, #16]
 800a334:	f003 0301 	and.w	r3, r3, #1
 800a338:	9309      	str	r3, [sp, #36]	; 0x24
 800a33a:	9b08      	ldr	r3, [sp, #32]
 800a33c:	4621      	mov	r1, r4
 800a33e:	3b01      	subs	r3, #1
 800a340:	4658      	mov	r0, fp
 800a342:	9304      	str	r3, [sp, #16]
 800a344:	f7ff fa68 	bl	8009818 <quorem>
 800a348:	4603      	mov	r3, r0
 800a34a:	4641      	mov	r1, r8
 800a34c:	3330      	adds	r3, #48	; 0x30
 800a34e:	9006      	str	r0, [sp, #24]
 800a350:	4658      	mov	r0, fp
 800a352:	930b      	str	r3, [sp, #44]	; 0x2c
 800a354:	f000 fb80 	bl	800aa58 <__mcmp>
 800a358:	4632      	mov	r2, r6
 800a35a:	4681      	mov	r9, r0
 800a35c:	4621      	mov	r1, r4
 800a35e:	4628      	mov	r0, r5
 800a360:	f000 fb96 	bl	800aa90 <__mdiff>
 800a364:	68c2      	ldr	r2, [r0, #12]
 800a366:	4607      	mov	r7, r0
 800a368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a36a:	bb02      	cbnz	r2, 800a3ae <_dtoa_r+0xa7e>
 800a36c:	4601      	mov	r1, r0
 800a36e:	4658      	mov	r0, fp
 800a370:	f000 fb72 	bl	800aa58 <__mcmp>
 800a374:	4602      	mov	r2, r0
 800a376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a378:	4639      	mov	r1, r7
 800a37a:	4628      	mov	r0, r5
 800a37c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a380:	f000 f92c 	bl	800a5dc <_Bfree>
 800a384:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a386:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a388:	9f08      	ldr	r7, [sp, #32]
 800a38a:	ea43 0102 	orr.w	r1, r3, r2
 800a38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a390:	430b      	orrs	r3, r1
 800a392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a394:	d10d      	bne.n	800a3b2 <_dtoa_r+0xa82>
 800a396:	2b39      	cmp	r3, #57	; 0x39
 800a398:	d029      	beq.n	800a3ee <_dtoa_r+0xabe>
 800a39a:	f1b9 0f00 	cmp.w	r9, #0
 800a39e:	dd01      	ble.n	800a3a4 <_dtoa_r+0xa74>
 800a3a0:	9b06      	ldr	r3, [sp, #24]
 800a3a2:	3331      	adds	r3, #49	; 0x31
 800a3a4:	9a04      	ldr	r2, [sp, #16]
 800a3a6:	7013      	strb	r3, [r2, #0]
 800a3a8:	e776      	b.n	800a298 <_dtoa_r+0x968>
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	e7b9      	b.n	800a322 <_dtoa_r+0x9f2>
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	e7e2      	b.n	800a378 <_dtoa_r+0xa48>
 800a3b2:	f1b9 0f00 	cmp.w	r9, #0
 800a3b6:	db06      	blt.n	800a3c6 <_dtoa_r+0xa96>
 800a3b8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a3ba:	ea41 0909 	orr.w	r9, r1, r9
 800a3be:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3c0:	ea59 0101 	orrs.w	r1, r9, r1
 800a3c4:	d120      	bne.n	800a408 <_dtoa_r+0xad8>
 800a3c6:	2a00      	cmp	r2, #0
 800a3c8:	ddec      	ble.n	800a3a4 <_dtoa_r+0xa74>
 800a3ca:	4659      	mov	r1, fp
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	9308      	str	r3, [sp, #32]
 800a3d2:	f000 fad1 	bl	800a978 <__lshift>
 800a3d6:	4621      	mov	r1, r4
 800a3d8:	4683      	mov	fp, r0
 800a3da:	f000 fb3d 	bl	800aa58 <__mcmp>
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	9b08      	ldr	r3, [sp, #32]
 800a3e2:	dc02      	bgt.n	800a3ea <_dtoa_r+0xaba>
 800a3e4:	d1de      	bne.n	800a3a4 <_dtoa_r+0xa74>
 800a3e6:	07da      	lsls	r2, r3, #31
 800a3e8:	d5dc      	bpl.n	800a3a4 <_dtoa_r+0xa74>
 800a3ea:	2b39      	cmp	r3, #57	; 0x39
 800a3ec:	d1d8      	bne.n	800a3a0 <_dtoa_r+0xa70>
 800a3ee:	2339      	movs	r3, #57	; 0x39
 800a3f0:	9a04      	ldr	r2, [sp, #16]
 800a3f2:	7013      	strb	r3, [r2, #0]
 800a3f4:	463b      	mov	r3, r7
 800a3f6:	461f      	mov	r7, r3
 800a3f8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	2a39      	cmp	r2, #57	; 0x39
 800a400:	d050      	beq.n	800a4a4 <_dtoa_r+0xb74>
 800a402:	3201      	adds	r2, #1
 800a404:	701a      	strb	r2, [r3, #0]
 800a406:	e747      	b.n	800a298 <_dtoa_r+0x968>
 800a408:	2a00      	cmp	r2, #0
 800a40a:	dd03      	ble.n	800a414 <_dtoa_r+0xae4>
 800a40c:	2b39      	cmp	r3, #57	; 0x39
 800a40e:	d0ee      	beq.n	800a3ee <_dtoa_r+0xabe>
 800a410:	3301      	adds	r3, #1
 800a412:	e7c7      	b.n	800a3a4 <_dtoa_r+0xa74>
 800a414:	9a08      	ldr	r2, [sp, #32]
 800a416:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a418:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a41c:	428a      	cmp	r2, r1
 800a41e:	d02a      	beq.n	800a476 <_dtoa_r+0xb46>
 800a420:	4659      	mov	r1, fp
 800a422:	2300      	movs	r3, #0
 800a424:	220a      	movs	r2, #10
 800a426:	4628      	mov	r0, r5
 800a428:	f000 f8fa 	bl	800a620 <__multadd>
 800a42c:	45b0      	cmp	r8, r6
 800a42e:	4683      	mov	fp, r0
 800a430:	f04f 0300 	mov.w	r3, #0
 800a434:	f04f 020a 	mov.w	r2, #10
 800a438:	4641      	mov	r1, r8
 800a43a:	4628      	mov	r0, r5
 800a43c:	d107      	bne.n	800a44e <_dtoa_r+0xb1e>
 800a43e:	f000 f8ef 	bl	800a620 <__multadd>
 800a442:	4680      	mov	r8, r0
 800a444:	4606      	mov	r6, r0
 800a446:	9b08      	ldr	r3, [sp, #32]
 800a448:	3301      	adds	r3, #1
 800a44a:	9308      	str	r3, [sp, #32]
 800a44c:	e775      	b.n	800a33a <_dtoa_r+0xa0a>
 800a44e:	f000 f8e7 	bl	800a620 <__multadd>
 800a452:	4631      	mov	r1, r6
 800a454:	4680      	mov	r8, r0
 800a456:	2300      	movs	r3, #0
 800a458:	220a      	movs	r2, #10
 800a45a:	4628      	mov	r0, r5
 800a45c:	f000 f8e0 	bl	800a620 <__multadd>
 800a460:	4606      	mov	r6, r0
 800a462:	e7f0      	b.n	800a446 <_dtoa_r+0xb16>
 800a464:	f1b9 0f00 	cmp.w	r9, #0
 800a468:	bfcc      	ite	gt
 800a46a:	464f      	movgt	r7, r9
 800a46c:	2701      	movle	r7, #1
 800a46e:	f04f 0800 	mov.w	r8, #0
 800a472:	9a03      	ldr	r2, [sp, #12]
 800a474:	4417      	add	r7, r2
 800a476:	4659      	mov	r1, fp
 800a478:	2201      	movs	r2, #1
 800a47a:	4628      	mov	r0, r5
 800a47c:	9308      	str	r3, [sp, #32]
 800a47e:	f000 fa7b 	bl	800a978 <__lshift>
 800a482:	4621      	mov	r1, r4
 800a484:	4683      	mov	fp, r0
 800a486:	f000 fae7 	bl	800aa58 <__mcmp>
 800a48a:	2800      	cmp	r0, #0
 800a48c:	dcb2      	bgt.n	800a3f4 <_dtoa_r+0xac4>
 800a48e:	d102      	bne.n	800a496 <_dtoa_r+0xb66>
 800a490:	9b08      	ldr	r3, [sp, #32]
 800a492:	07db      	lsls	r3, r3, #31
 800a494:	d4ae      	bmi.n	800a3f4 <_dtoa_r+0xac4>
 800a496:	463b      	mov	r3, r7
 800a498:	461f      	mov	r7, r3
 800a49a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a49e:	2a30      	cmp	r2, #48	; 0x30
 800a4a0:	d0fa      	beq.n	800a498 <_dtoa_r+0xb68>
 800a4a2:	e6f9      	b.n	800a298 <_dtoa_r+0x968>
 800a4a4:	9a03      	ldr	r2, [sp, #12]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d1a5      	bne.n	800a3f6 <_dtoa_r+0xac6>
 800a4aa:	2331      	movs	r3, #49	; 0x31
 800a4ac:	f10a 0a01 	add.w	sl, sl, #1
 800a4b0:	e779      	b.n	800a3a6 <_dtoa_r+0xa76>
 800a4b2:	4b14      	ldr	r3, [pc, #80]	; (800a504 <_dtoa_r+0xbd4>)
 800a4b4:	f7ff baa8 	b.w	8009a08 <_dtoa_r+0xd8>
 800a4b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	f47f aa81 	bne.w	80099c2 <_dtoa_r+0x92>
 800a4c0:	4b11      	ldr	r3, [pc, #68]	; (800a508 <_dtoa_r+0xbd8>)
 800a4c2:	f7ff baa1 	b.w	8009a08 <_dtoa_r+0xd8>
 800a4c6:	f1b9 0f00 	cmp.w	r9, #0
 800a4ca:	dc03      	bgt.n	800a4d4 <_dtoa_r+0xba4>
 800a4cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a4ce:	2b02      	cmp	r3, #2
 800a4d0:	f73f aecb 	bgt.w	800a26a <_dtoa_r+0x93a>
 800a4d4:	9f03      	ldr	r7, [sp, #12]
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	4658      	mov	r0, fp
 800a4da:	f7ff f99d 	bl	8009818 <quorem>
 800a4de:	9a03      	ldr	r2, [sp, #12]
 800a4e0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a4e4:	f807 3b01 	strb.w	r3, [r7], #1
 800a4e8:	1aba      	subs	r2, r7, r2
 800a4ea:	4591      	cmp	r9, r2
 800a4ec:	ddba      	ble.n	800a464 <_dtoa_r+0xb34>
 800a4ee:	4659      	mov	r1, fp
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	220a      	movs	r2, #10
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	f000 f893 	bl	800a620 <__multadd>
 800a4fa:	4683      	mov	fp, r0
 800a4fc:	e7eb      	b.n	800a4d6 <_dtoa_r+0xba6>
 800a4fe:	bf00      	nop
 800a500:	0800bfef 	.word	0x0800bfef
 800a504:	0800bf4c 	.word	0x0800bf4c
 800a508:	0800bf70 	.word	0x0800bf70

0800a50c <_localeconv_r>:
 800a50c:	4800      	ldr	r0, [pc, #0]	; (800a510 <_localeconv_r+0x4>)
 800a50e:	4770      	bx	lr
 800a510:	2000017c 	.word	0x2000017c

0800a514 <malloc>:
 800a514:	4b02      	ldr	r3, [pc, #8]	; (800a520 <malloc+0xc>)
 800a516:	4601      	mov	r1, r0
 800a518:	6818      	ldr	r0, [r3, #0]
 800a51a:	f000 bc1d 	b.w	800ad58 <_malloc_r>
 800a51e:	bf00      	nop
 800a520:	20000028 	.word	0x20000028

0800a524 <memchr>:
 800a524:	4603      	mov	r3, r0
 800a526:	b510      	push	{r4, lr}
 800a528:	b2c9      	uxtb	r1, r1
 800a52a:	4402      	add	r2, r0
 800a52c:	4293      	cmp	r3, r2
 800a52e:	4618      	mov	r0, r3
 800a530:	d101      	bne.n	800a536 <memchr+0x12>
 800a532:	2000      	movs	r0, #0
 800a534:	e003      	b.n	800a53e <memchr+0x1a>
 800a536:	7804      	ldrb	r4, [r0, #0]
 800a538:	3301      	adds	r3, #1
 800a53a:	428c      	cmp	r4, r1
 800a53c:	d1f6      	bne.n	800a52c <memchr+0x8>
 800a53e:	bd10      	pop	{r4, pc}

0800a540 <memcpy>:
 800a540:	440a      	add	r2, r1
 800a542:	4291      	cmp	r1, r2
 800a544:	f100 33ff 	add.w	r3, r0, #4294967295
 800a548:	d100      	bne.n	800a54c <memcpy+0xc>
 800a54a:	4770      	bx	lr
 800a54c:	b510      	push	{r4, lr}
 800a54e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a552:	4291      	cmp	r1, r2
 800a554:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a558:	d1f9      	bne.n	800a54e <memcpy+0xe>
 800a55a:	bd10      	pop	{r4, pc}

0800a55c <_Balloc>:
 800a55c:	b570      	push	{r4, r5, r6, lr}
 800a55e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a560:	4604      	mov	r4, r0
 800a562:	460d      	mov	r5, r1
 800a564:	b976      	cbnz	r6, 800a584 <_Balloc+0x28>
 800a566:	2010      	movs	r0, #16
 800a568:	f7ff ffd4 	bl	800a514 <malloc>
 800a56c:	4602      	mov	r2, r0
 800a56e:	6260      	str	r0, [r4, #36]	; 0x24
 800a570:	b920      	cbnz	r0, 800a57c <_Balloc+0x20>
 800a572:	2166      	movs	r1, #102	; 0x66
 800a574:	4b17      	ldr	r3, [pc, #92]	; (800a5d4 <_Balloc+0x78>)
 800a576:	4818      	ldr	r0, [pc, #96]	; (800a5d8 <_Balloc+0x7c>)
 800a578:	f000 fdce 	bl	800b118 <__assert_func>
 800a57c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a580:	6006      	str	r6, [r0, #0]
 800a582:	60c6      	str	r6, [r0, #12]
 800a584:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a586:	68f3      	ldr	r3, [r6, #12]
 800a588:	b183      	cbz	r3, 800a5ac <_Balloc+0x50>
 800a58a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a592:	b9b8      	cbnz	r0, 800a5c4 <_Balloc+0x68>
 800a594:	2101      	movs	r1, #1
 800a596:	fa01 f605 	lsl.w	r6, r1, r5
 800a59a:	1d72      	adds	r2, r6, #5
 800a59c:	4620      	mov	r0, r4
 800a59e:	0092      	lsls	r2, r2, #2
 800a5a0:	f000 fb5e 	bl	800ac60 <_calloc_r>
 800a5a4:	b160      	cbz	r0, 800a5c0 <_Balloc+0x64>
 800a5a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a5aa:	e00e      	b.n	800a5ca <_Balloc+0x6e>
 800a5ac:	2221      	movs	r2, #33	; 0x21
 800a5ae:	2104      	movs	r1, #4
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	f000 fb55 	bl	800ac60 <_calloc_r>
 800a5b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5b8:	60f0      	str	r0, [r6, #12]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d1e4      	bne.n	800a58a <_Balloc+0x2e>
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	bd70      	pop	{r4, r5, r6, pc}
 800a5c4:	6802      	ldr	r2, [r0, #0]
 800a5c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a5d0:	e7f7      	b.n	800a5c2 <_Balloc+0x66>
 800a5d2:	bf00      	nop
 800a5d4:	0800bf7d 	.word	0x0800bf7d
 800a5d8:	0800c000 	.word	0x0800c000

0800a5dc <_Bfree>:
 800a5dc:	b570      	push	{r4, r5, r6, lr}
 800a5de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a5e0:	4605      	mov	r5, r0
 800a5e2:	460c      	mov	r4, r1
 800a5e4:	b976      	cbnz	r6, 800a604 <_Bfree+0x28>
 800a5e6:	2010      	movs	r0, #16
 800a5e8:	f7ff ff94 	bl	800a514 <malloc>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	6268      	str	r0, [r5, #36]	; 0x24
 800a5f0:	b920      	cbnz	r0, 800a5fc <_Bfree+0x20>
 800a5f2:	218a      	movs	r1, #138	; 0x8a
 800a5f4:	4b08      	ldr	r3, [pc, #32]	; (800a618 <_Bfree+0x3c>)
 800a5f6:	4809      	ldr	r0, [pc, #36]	; (800a61c <_Bfree+0x40>)
 800a5f8:	f000 fd8e 	bl	800b118 <__assert_func>
 800a5fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a600:	6006      	str	r6, [r0, #0]
 800a602:	60c6      	str	r6, [r0, #12]
 800a604:	b13c      	cbz	r4, 800a616 <_Bfree+0x3a>
 800a606:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a608:	6862      	ldr	r2, [r4, #4]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a610:	6021      	str	r1, [r4, #0]
 800a612:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a616:	bd70      	pop	{r4, r5, r6, pc}
 800a618:	0800bf7d 	.word	0x0800bf7d
 800a61c:	0800c000 	.word	0x0800c000

0800a620 <__multadd>:
 800a620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a624:	4607      	mov	r7, r0
 800a626:	460c      	mov	r4, r1
 800a628:	461e      	mov	r6, r3
 800a62a:	2000      	movs	r0, #0
 800a62c:	690d      	ldr	r5, [r1, #16]
 800a62e:	f101 0c14 	add.w	ip, r1, #20
 800a632:	f8dc 3000 	ldr.w	r3, [ip]
 800a636:	3001      	adds	r0, #1
 800a638:	b299      	uxth	r1, r3
 800a63a:	fb02 6101 	mla	r1, r2, r1, r6
 800a63e:	0c1e      	lsrs	r6, r3, #16
 800a640:	0c0b      	lsrs	r3, r1, #16
 800a642:	fb02 3306 	mla	r3, r2, r6, r3
 800a646:	b289      	uxth	r1, r1
 800a648:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a64c:	4285      	cmp	r5, r0
 800a64e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a652:	f84c 1b04 	str.w	r1, [ip], #4
 800a656:	dcec      	bgt.n	800a632 <__multadd+0x12>
 800a658:	b30e      	cbz	r6, 800a69e <__multadd+0x7e>
 800a65a:	68a3      	ldr	r3, [r4, #8]
 800a65c:	42ab      	cmp	r3, r5
 800a65e:	dc19      	bgt.n	800a694 <__multadd+0x74>
 800a660:	6861      	ldr	r1, [r4, #4]
 800a662:	4638      	mov	r0, r7
 800a664:	3101      	adds	r1, #1
 800a666:	f7ff ff79 	bl	800a55c <_Balloc>
 800a66a:	4680      	mov	r8, r0
 800a66c:	b928      	cbnz	r0, 800a67a <__multadd+0x5a>
 800a66e:	4602      	mov	r2, r0
 800a670:	21b5      	movs	r1, #181	; 0xb5
 800a672:	4b0c      	ldr	r3, [pc, #48]	; (800a6a4 <__multadd+0x84>)
 800a674:	480c      	ldr	r0, [pc, #48]	; (800a6a8 <__multadd+0x88>)
 800a676:	f000 fd4f 	bl	800b118 <__assert_func>
 800a67a:	6922      	ldr	r2, [r4, #16]
 800a67c:	f104 010c 	add.w	r1, r4, #12
 800a680:	3202      	adds	r2, #2
 800a682:	0092      	lsls	r2, r2, #2
 800a684:	300c      	adds	r0, #12
 800a686:	f7ff ff5b 	bl	800a540 <memcpy>
 800a68a:	4621      	mov	r1, r4
 800a68c:	4638      	mov	r0, r7
 800a68e:	f7ff ffa5 	bl	800a5dc <_Bfree>
 800a692:	4644      	mov	r4, r8
 800a694:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a698:	3501      	adds	r5, #1
 800a69a:	615e      	str	r6, [r3, #20]
 800a69c:	6125      	str	r5, [r4, #16]
 800a69e:	4620      	mov	r0, r4
 800a6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6a4:	0800bfef 	.word	0x0800bfef
 800a6a8:	0800c000 	.word	0x0800c000

0800a6ac <__hi0bits>:
 800a6ac:	0c02      	lsrs	r2, r0, #16
 800a6ae:	0412      	lsls	r2, r2, #16
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	b9ca      	cbnz	r2, 800a6e8 <__hi0bits+0x3c>
 800a6b4:	0403      	lsls	r3, r0, #16
 800a6b6:	2010      	movs	r0, #16
 800a6b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a6bc:	bf04      	itt	eq
 800a6be:	021b      	lsleq	r3, r3, #8
 800a6c0:	3008      	addeq	r0, #8
 800a6c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a6c6:	bf04      	itt	eq
 800a6c8:	011b      	lsleq	r3, r3, #4
 800a6ca:	3004      	addeq	r0, #4
 800a6cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a6d0:	bf04      	itt	eq
 800a6d2:	009b      	lsleq	r3, r3, #2
 800a6d4:	3002      	addeq	r0, #2
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	db05      	blt.n	800a6e6 <__hi0bits+0x3a>
 800a6da:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a6de:	f100 0001 	add.w	r0, r0, #1
 800a6e2:	bf08      	it	eq
 800a6e4:	2020      	moveq	r0, #32
 800a6e6:	4770      	bx	lr
 800a6e8:	2000      	movs	r0, #0
 800a6ea:	e7e5      	b.n	800a6b8 <__hi0bits+0xc>

0800a6ec <__lo0bits>:
 800a6ec:	6803      	ldr	r3, [r0, #0]
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	f013 0007 	ands.w	r0, r3, #7
 800a6f4:	d00b      	beq.n	800a70e <__lo0bits+0x22>
 800a6f6:	07d9      	lsls	r1, r3, #31
 800a6f8:	d421      	bmi.n	800a73e <__lo0bits+0x52>
 800a6fa:	0798      	lsls	r0, r3, #30
 800a6fc:	bf49      	itett	mi
 800a6fe:	085b      	lsrmi	r3, r3, #1
 800a700:	089b      	lsrpl	r3, r3, #2
 800a702:	2001      	movmi	r0, #1
 800a704:	6013      	strmi	r3, [r2, #0]
 800a706:	bf5c      	itt	pl
 800a708:	2002      	movpl	r0, #2
 800a70a:	6013      	strpl	r3, [r2, #0]
 800a70c:	4770      	bx	lr
 800a70e:	b299      	uxth	r1, r3
 800a710:	b909      	cbnz	r1, 800a716 <__lo0bits+0x2a>
 800a712:	2010      	movs	r0, #16
 800a714:	0c1b      	lsrs	r3, r3, #16
 800a716:	b2d9      	uxtb	r1, r3
 800a718:	b909      	cbnz	r1, 800a71e <__lo0bits+0x32>
 800a71a:	3008      	adds	r0, #8
 800a71c:	0a1b      	lsrs	r3, r3, #8
 800a71e:	0719      	lsls	r1, r3, #28
 800a720:	bf04      	itt	eq
 800a722:	091b      	lsreq	r3, r3, #4
 800a724:	3004      	addeq	r0, #4
 800a726:	0799      	lsls	r1, r3, #30
 800a728:	bf04      	itt	eq
 800a72a:	089b      	lsreq	r3, r3, #2
 800a72c:	3002      	addeq	r0, #2
 800a72e:	07d9      	lsls	r1, r3, #31
 800a730:	d403      	bmi.n	800a73a <__lo0bits+0x4e>
 800a732:	085b      	lsrs	r3, r3, #1
 800a734:	f100 0001 	add.w	r0, r0, #1
 800a738:	d003      	beq.n	800a742 <__lo0bits+0x56>
 800a73a:	6013      	str	r3, [r2, #0]
 800a73c:	4770      	bx	lr
 800a73e:	2000      	movs	r0, #0
 800a740:	4770      	bx	lr
 800a742:	2020      	movs	r0, #32
 800a744:	4770      	bx	lr
	...

0800a748 <__i2b>:
 800a748:	b510      	push	{r4, lr}
 800a74a:	460c      	mov	r4, r1
 800a74c:	2101      	movs	r1, #1
 800a74e:	f7ff ff05 	bl	800a55c <_Balloc>
 800a752:	4602      	mov	r2, r0
 800a754:	b928      	cbnz	r0, 800a762 <__i2b+0x1a>
 800a756:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a75a:	4b04      	ldr	r3, [pc, #16]	; (800a76c <__i2b+0x24>)
 800a75c:	4804      	ldr	r0, [pc, #16]	; (800a770 <__i2b+0x28>)
 800a75e:	f000 fcdb 	bl	800b118 <__assert_func>
 800a762:	2301      	movs	r3, #1
 800a764:	6144      	str	r4, [r0, #20]
 800a766:	6103      	str	r3, [r0, #16]
 800a768:	bd10      	pop	{r4, pc}
 800a76a:	bf00      	nop
 800a76c:	0800bfef 	.word	0x0800bfef
 800a770:	0800c000 	.word	0x0800c000

0800a774 <__multiply>:
 800a774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a778:	4691      	mov	r9, r2
 800a77a:	690a      	ldr	r2, [r1, #16]
 800a77c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a780:	460c      	mov	r4, r1
 800a782:	429a      	cmp	r2, r3
 800a784:	bfbe      	ittt	lt
 800a786:	460b      	movlt	r3, r1
 800a788:	464c      	movlt	r4, r9
 800a78a:	4699      	movlt	r9, r3
 800a78c:	6927      	ldr	r7, [r4, #16]
 800a78e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a792:	68a3      	ldr	r3, [r4, #8]
 800a794:	6861      	ldr	r1, [r4, #4]
 800a796:	eb07 060a 	add.w	r6, r7, sl
 800a79a:	42b3      	cmp	r3, r6
 800a79c:	b085      	sub	sp, #20
 800a79e:	bfb8      	it	lt
 800a7a0:	3101      	addlt	r1, #1
 800a7a2:	f7ff fedb 	bl	800a55c <_Balloc>
 800a7a6:	b930      	cbnz	r0, 800a7b6 <__multiply+0x42>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	f240 115d 	movw	r1, #349	; 0x15d
 800a7ae:	4b43      	ldr	r3, [pc, #268]	; (800a8bc <__multiply+0x148>)
 800a7b0:	4843      	ldr	r0, [pc, #268]	; (800a8c0 <__multiply+0x14c>)
 800a7b2:	f000 fcb1 	bl	800b118 <__assert_func>
 800a7b6:	f100 0514 	add.w	r5, r0, #20
 800a7ba:	462b      	mov	r3, r5
 800a7bc:	2200      	movs	r2, #0
 800a7be:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a7c2:	4543      	cmp	r3, r8
 800a7c4:	d321      	bcc.n	800a80a <__multiply+0x96>
 800a7c6:	f104 0314 	add.w	r3, r4, #20
 800a7ca:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a7ce:	f109 0314 	add.w	r3, r9, #20
 800a7d2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a7d6:	9202      	str	r2, [sp, #8]
 800a7d8:	1b3a      	subs	r2, r7, r4
 800a7da:	3a15      	subs	r2, #21
 800a7dc:	f022 0203 	bic.w	r2, r2, #3
 800a7e0:	3204      	adds	r2, #4
 800a7e2:	f104 0115 	add.w	r1, r4, #21
 800a7e6:	428f      	cmp	r7, r1
 800a7e8:	bf38      	it	cc
 800a7ea:	2204      	movcc	r2, #4
 800a7ec:	9201      	str	r2, [sp, #4]
 800a7ee:	9a02      	ldr	r2, [sp, #8]
 800a7f0:	9303      	str	r3, [sp, #12]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d80c      	bhi.n	800a810 <__multiply+0x9c>
 800a7f6:	2e00      	cmp	r6, #0
 800a7f8:	dd03      	ble.n	800a802 <__multiply+0x8e>
 800a7fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d059      	beq.n	800a8b6 <__multiply+0x142>
 800a802:	6106      	str	r6, [r0, #16]
 800a804:	b005      	add	sp, #20
 800a806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a80a:	f843 2b04 	str.w	r2, [r3], #4
 800a80e:	e7d8      	b.n	800a7c2 <__multiply+0x4e>
 800a810:	f8b3 a000 	ldrh.w	sl, [r3]
 800a814:	f1ba 0f00 	cmp.w	sl, #0
 800a818:	d023      	beq.n	800a862 <__multiply+0xee>
 800a81a:	46a9      	mov	r9, r5
 800a81c:	f04f 0c00 	mov.w	ip, #0
 800a820:	f104 0e14 	add.w	lr, r4, #20
 800a824:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a828:	f8d9 1000 	ldr.w	r1, [r9]
 800a82c:	fa1f fb82 	uxth.w	fp, r2
 800a830:	b289      	uxth	r1, r1
 800a832:	fb0a 110b 	mla	r1, sl, fp, r1
 800a836:	4461      	add	r1, ip
 800a838:	f8d9 c000 	ldr.w	ip, [r9]
 800a83c:	0c12      	lsrs	r2, r2, #16
 800a83e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a842:	fb0a c202 	mla	r2, sl, r2, ip
 800a846:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a84a:	b289      	uxth	r1, r1
 800a84c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a850:	4577      	cmp	r7, lr
 800a852:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a856:	f849 1b04 	str.w	r1, [r9], #4
 800a85a:	d8e3      	bhi.n	800a824 <__multiply+0xb0>
 800a85c:	9a01      	ldr	r2, [sp, #4]
 800a85e:	f845 c002 	str.w	ip, [r5, r2]
 800a862:	9a03      	ldr	r2, [sp, #12]
 800a864:	3304      	adds	r3, #4
 800a866:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a86a:	f1b9 0f00 	cmp.w	r9, #0
 800a86e:	d020      	beq.n	800a8b2 <__multiply+0x13e>
 800a870:	46ae      	mov	lr, r5
 800a872:	f04f 0a00 	mov.w	sl, #0
 800a876:	6829      	ldr	r1, [r5, #0]
 800a878:	f104 0c14 	add.w	ip, r4, #20
 800a87c:	f8bc b000 	ldrh.w	fp, [ip]
 800a880:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a884:	b289      	uxth	r1, r1
 800a886:	fb09 220b 	mla	r2, r9, fp, r2
 800a88a:	4492      	add	sl, r2
 800a88c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a890:	f84e 1b04 	str.w	r1, [lr], #4
 800a894:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a898:	f8be 1000 	ldrh.w	r1, [lr]
 800a89c:	0c12      	lsrs	r2, r2, #16
 800a89e:	fb09 1102 	mla	r1, r9, r2, r1
 800a8a2:	4567      	cmp	r7, ip
 800a8a4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a8a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a8ac:	d8e6      	bhi.n	800a87c <__multiply+0x108>
 800a8ae:	9a01      	ldr	r2, [sp, #4]
 800a8b0:	50a9      	str	r1, [r5, r2]
 800a8b2:	3504      	adds	r5, #4
 800a8b4:	e79b      	b.n	800a7ee <__multiply+0x7a>
 800a8b6:	3e01      	subs	r6, #1
 800a8b8:	e79d      	b.n	800a7f6 <__multiply+0x82>
 800a8ba:	bf00      	nop
 800a8bc:	0800bfef 	.word	0x0800bfef
 800a8c0:	0800c000 	.word	0x0800c000

0800a8c4 <__pow5mult>:
 800a8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8c8:	4615      	mov	r5, r2
 800a8ca:	f012 0203 	ands.w	r2, r2, #3
 800a8ce:	4606      	mov	r6, r0
 800a8d0:	460f      	mov	r7, r1
 800a8d2:	d007      	beq.n	800a8e4 <__pow5mult+0x20>
 800a8d4:	4c25      	ldr	r4, [pc, #148]	; (800a96c <__pow5mult+0xa8>)
 800a8d6:	3a01      	subs	r2, #1
 800a8d8:	2300      	movs	r3, #0
 800a8da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a8de:	f7ff fe9f 	bl	800a620 <__multadd>
 800a8e2:	4607      	mov	r7, r0
 800a8e4:	10ad      	asrs	r5, r5, #2
 800a8e6:	d03d      	beq.n	800a964 <__pow5mult+0xa0>
 800a8e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a8ea:	b97c      	cbnz	r4, 800a90c <__pow5mult+0x48>
 800a8ec:	2010      	movs	r0, #16
 800a8ee:	f7ff fe11 	bl	800a514 <malloc>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	6270      	str	r0, [r6, #36]	; 0x24
 800a8f6:	b928      	cbnz	r0, 800a904 <__pow5mult+0x40>
 800a8f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a8fc:	4b1c      	ldr	r3, [pc, #112]	; (800a970 <__pow5mult+0xac>)
 800a8fe:	481d      	ldr	r0, [pc, #116]	; (800a974 <__pow5mult+0xb0>)
 800a900:	f000 fc0a 	bl	800b118 <__assert_func>
 800a904:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a908:	6004      	str	r4, [r0, #0]
 800a90a:	60c4      	str	r4, [r0, #12]
 800a90c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a910:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a914:	b94c      	cbnz	r4, 800a92a <__pow5mult+0x66>
 800a916:	f240 2171 	movw	r1, #625	; 0x271
 800a91a:	4630      	mov	r0, r6
 800a91c:	f7ff ff14 	bl	800a748 <__i2b>
 800a920:	2300      	movs	r3, #0
 800a922:	4604      	mov	r4, r0
 800a924:	f8c8 0008 	str.w	r0, [r8, #8]
 800a928:	6003      	str	r3, [r0, #0]
 800a92a:	f04f 0900 	mov.w	r9, #0
 800a92e:	07eb      	lsls	r3, r5, #31
 800a930:	d50a      	bpl.n	800a948 <__pow5mult+0x84>
 800a932:	4639      	mov	r1, r7
 800a934:	4622      	mov	r2, r4
 800a936:	4630      	mov	r0, r6
 800a938:	f7ff ff1c 	bl	800a774 <__multiply>
 800a93c:	4680      	mov	r8, r0
 800a93e:	4639      	mov	r1, r7
 800a940:	4630      	mov	r0, r6
 800a942:	f7ff fe4b 	bl	800a5dc <_Bfree>
 800a946:	4647      	mov	r7, r8
 800a948:	106d      	asrs	r5, r5, #1
 800a94a:	d00b      	beq.n	800a964 <__pow5mult+0xa0>
 800a94c:	6820      	ldr	r0, [r4, #0]
 800a94e:	b938      	cbnz	r0, 800a960 <__pow5mult+0x9c>
 800a950:	4622      	mov	r2, r4
 800a952:	4621      	mov	r1, r4
 800a954:	4630      	mov	r0, r6
 800a956:	f7ff ff0d 	bl	800a774 <__multiply>
 800a95a:	6020      	str	r0, [r4, #0]
 800a95c:	f8c0 9000 	str.w	r9, [r0]
 800a960:	4604      	mov	r4, r0
 800a962:	e7e4      	b.n	800a92e <__pow5mult+0x6a>
 800a964:	4638      	mov	r0, r7
 800a966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a96a:	bf00      	nop
 800a96c:	0800c150 	.word	0x0800c150
 800a970:	0800bf7d 	.word	0x0800bf7d
 800a974:	0800c000 	.word	0x0800c000

0800a978 <__lshift>:
 800a978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a97c:	460c      	mov	r4, r1
 800a97e:	4607      	mov	r7, r0
 800a980:	4691      	mov	r9, r2
 800a982:	6923      	ldr	r3, [r4, #16]
 800a984:	6849      	ldr	r1, [r1, #4]
 800a986:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a98a:	68a3      	ldr	r3, [r4, #8]
 800a98c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a990:	f108 0601 	add.w	r6, r8, #1
 800a994:	42b3      	cmp	r3, r6
 800a996:	db0b      	blt.n	800a9b0 <__lshift+0x38>
 800a998:	4638      	mov	r0, r7
 800a99a:	f7ff fddf 	bl	800a55c <_Balloc>
 800a99e:	4605      	mov	r5, r0
 800a9a0:	b948      	cbnz	r0, 800a9b6 <__lshift+0x3e>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a9a8:	4b29      	ldr	r3, [pc, #164]	; (800aa50 <__lshift+0xd8>)
 800a9aa:	482a      	ldr	r0, [pc, #168]	; (800aa54 <__lshift+0xdc>)
 800a9ac:	f000 fbb4 	bl	800b118 <__assert_func>
 800a9b0:	3101      	adds	r1, #1
 800a9b2:	005b      	lsls	r3, r3, #1
 800a9b4:	e7ee      	b.n	800a994 <__lshift+0x1c>
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	f100 0114 	add.w	r1, r0, #20
 800a9bc:	f100 0210 	add.w	r2, r0, #16
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	4553      	cmp	r3, sl
 800a9c4:	db37      	blt.n	800aa36 <__lshift+0xbe>
 800a9c6:	6920      	ldr	r0, [r4, #16]
 800a9c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a9cc:	f104 0314 	add.w	r3, r4, #20
 800a9d0:	f019 091f 	ands.w	r9, r9, #31
 800a9d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a9dc:	d02f      	beq.n	800aa3e <__lshift+0xc6>
 800a9de:	468a      	mov	sl, r1
 800a9e0:	f04f 0c00 	mov.w	ip, #0
 800a9e4:	f1c9 0e20 	rsb	lr, r9, #32
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	fa02 f209 	lsl.w	r2, r2, r9
 800a9ee:	ea42 020c 	orr.w	r2, r2, ip
 800a9f2:	f84a 2b04 	str.w	r2, [sl], #4
 800a9f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9fa:	4298      	cmp	r0, r3
 800a9fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aa00:	d8f2      	bhi.n	800a9e8 <__lshift+0x70>
 800aa02:	1b03      	subs	r3, r0, r4
 800aa04:	3b15      	subs	r3, #21
 800aa06:	f023 0303 	bic.w	r3, r3, #3
 800aa0a:	3304      	adds	r3, #4
 800aa0c:	f104 0215 	add.w	r2, r4, #21
 800aa10:	4290      	cmp	r0, r2
 800aa12:	bf38      	it	cc
 800aa14:	2304      	movcc	r3, #4
 800aa16:	f841 c003 	str.w	ip, [r1, r3]
 800aa1a:	f1bc 0f00 	cmp.w	ip, #0
 800aa1e:	d001      	beq.n	800aa24 <__lshift+0xac>
 800aa20:	f108 0602 	add.w	r6, r8, #2
 800aa24:	3e01      	subs	r6, #1
 800aa26:	4638      	mov	r0, r7
 800aa28:	4621      	mov	r1, r4
 800aa2a:	612e      	str	r6, [r5, #16]
 800aa2c:	f7ff fdd6 	bl	800a5dc <_Bfree>
 800aa30:	4628      	mov	r0, r5
 800aa32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa36:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	e7c1      	b.n	800a9c2 <__lshift+0x4a>
 800aa3e:	3904      	subs	r1, #4
 800aa40:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa44:	4298      	cmp	r0, r3
 800aa46:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa4a:	d8f9      	bhi.n	800aa40 <__lshift+0xc8>
 800aa4c:	e7ea      	b.n	800aa24 <__lshift+0xac>
 800aa4e:	bf00      	nop
 800aa50:	0800bfef 	.word	0x0800bfef
 800aa54:	0800c000 	.word	0x0800c000

0800aa58 <__mcmp>:
 800aa58:	4603      	mov	r3, r0
 800aa5a:	690a      	ldr	r2, [r1, #16]
 800aa5c:	6900      	ldr	r0, [r0, #16]
 800aa5e:	b530      	push	{r4, r5, lr}
 800aa60:	1a80      	subs	r0, r0, r2
 800aa62:	d10d      	bne.n	800aa80 <__mcmp+0x28>
 800aa64:	3314      	adds	r3, #20
 800aa66:	3114      	adds	r1, #20
 800aa68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aa6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aa70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aa74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aa78:	4295      	cmp	r5, r2
 800aa7a:	d002      	beq.n	800aa82 <__mcmp+0x2a>
 800aa7c:	d304      	bcc.n	800aa88 <__mcmp+0x30>
 800aa7e:	2001      	movs	r0, #1
 800aa80:	bd30      	pop	{r4, r5, pc}
 800aa82:	42a3      	cmp	r3, r4
 800aa84:	d3f4      	bcc.n	800aa70 <__mcmp+0x18>
 800aa86:	e7fb      	b.n	800aa80 <__mcmp+0x28>
 800aa88:	f04f 30ff 	mov.w	r0, #4294967295
 800aa8c:	e7f8      	b.n	800aa80 <__mcmp+0x28>
	...

0800aa90 <__mdiff>:
 800aa90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa94:	460d      	mov	r5, r1
 800aa96:	4607      	mov	r7, r0
 800aa98:	4611      	mov	r1, r2
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	4614      	mov	r4, r2
 800aa9e:	f7ff ffdb 	bl	800aa58 <__mcmp>
 800aaa2:	1e06      	subs	r6, r0, #0
 800aaa4:	d111      	bne.n	800aaca <__mdiff+0x3a>
 800aaa6:	4631      	mov	r1, r6
 800aaa8:	4638      	mov	r0, r7
 800aaaa:	f7ff fd57 	bl	800a55c <_Balloc>
 800aaae:	4602      	mov	r2, r0
 800aab0:	b928      	cbnz	r0, 800aabe <__mdiff+0x2e>
 800aab2:	f240 2132 	movw	r1, #562	; 0x232
 800aab6:	4b3a      	ldr	r3, [pc, #232]	; (800aba0 <__mdiff+0x110>)
 800aab8:	483a      	ldr	r0, [pc, #232]	; (800aba4 <__mdiff+0x114>)
 800aaba:	f000 fb2d 	bl	800b118 <__assert_func>
 800aabe:	2301      	movs	r3, #1
 800aac0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800aac4:	4610      	mov	r0, r2
 800aac6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaca:	bfa4      	itt	ge
 800aacc:	4623      	movge	r3, r4
 800aace:	462c      	movge	r4, r5
 800aad0:	4638      	mov	r0, r7
 800aad2:	6861      	ldr	r1, [r4, #4]
 800aad4:	bfa6      	itte	ge
 800aad6:	461d      	movge	r5, r3
 800aad8:	2600      	movge	r6, #0
 800aada:	2601      	movlt	r6, #1
 800aadc:	f7ff fd3e 	bl	800a55c <_Balloc>
 800aae0:	4602      	mov	r2, r0
 800aae2:	b918      	cbnz	r0, 800aaec <__mdiff+0x5c>
 800aae4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aae8:	4b2d      	ldr	r3, [pc, #180]	; (800aba0 <__mdiff+0x110>)
 800aaea:	e7e5      	b.n	800aab8 <__mdiff+0x28>
 800aaec:	f102 0814 	add.w	r8, r2, #20
 800aaf0:	46c2      	mov	sl, r8
 800aaf2:	f04f 0c00 	mov.w	ip, #0
 800aaf6:	6927      	ldr	r7, [r4, #16]
 800aaf8:	60c6      	str	r6, [r0, #12]
 800aafa:	692e      	ldr	r6, [r5, #16]
 800aafc:	f104 0014 	add.w	r0, r4, #20
 800ab00:	f105 0914 	add.w	r9, r5, #20
 800ab04:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800ab08:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ab0c:	3410      	adds	r4, #16
 800ab0e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800ab12:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab16:	fa1f f18b 	uxth.w	r1, fp
 800ab1a:	448c      	add	ip, r1
 800ab1c:	b299      	uxth	r1, r3
 800ab1e:	0c1b      	lsrs	r3, r3, #16
 800ab20:	ebac 0101 	sub.w	r1, ip, r1
 800ab24:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ab28:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ab2c:	b289      	uxth	r1, r1
 800ab2e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ab32:	454e      	cmp	r6, r9
 800ab34:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ab38:	f84a 3b04 	str.w	r3, [sl], #4
 800ab3c:	d8e7      	bhi.n	800ab0e <__mdiff+0x7e>
 800ab3e:	1b73      	subs	r3, r6, r5
 800ab40:	3b15      	subs	r3, #21
 800ab42:	f023 0303 	bic.w	r3, r3, #3
 800ab46:	3515      	adds	r5, #21
 800ab48:	3304      	adds	r3, #4
 800ab4a:	42ae      	cmp	r6, r5
 800ab4c:	bf38      	it	cc
 800ab4e:	2304      	movcc	r3, #4
 800ab50:	4418      	add	r0, r3
 800ab52:	4443      	add	r3, r8
 800ab54:	461e      	mov	r6, r3
 800ab56:	4605      	mov	r5, r0
 800ab58:	4575      	cmp	r5, lr
 800ab5a:	d30e      	bcc.n	800ab7a <__mdiff+0xea>
 800ab5c:	f10e 0103 	add.w	r1, lr, #3
 800ab60:	1a09      	subs	r1, r1, r0
 800ab62:	f021 0103 	bic.w	r1, r1, #3
 800ab66:	3803      	subs	r0, #3
 800ab68:	4586      	cmp	lr, r0
 800ab6a:	bf38      	it	cc
 800ab6c:	2100      	movcc	r1, #0
 800ab6e:	4419      	add	r1, r3
 800ab70:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ab74:	b18b      	cbz	r3, 800ab9a <__mdiff+0x10a>
 800ab76:	6117      	str	r7, [r2, #16]
 800ab78:	e7a4      	b.n	800aac4 <__mdiff+0x34>
 800ab7a:	f855 8b04 	ldr.w	r8, [r5], #4
 800ab7e:	fa1f f188 	uxth.w	r1, r8
 800ab82:	4461      	add	r1, ip
 800ab84:	140c      	asrs	r4, r1, #16
 800ab86:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ab8a:	b289      	uxth	r1, r1
 800ab8c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ab90:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800ab94:	f846 1b04 	str.w	r1, [r6], #4
 800ab98:	e7de      	b.n	800ab58 <__mdiff+0xc8>
 800ab9a:	3f01      	subs	r7, #1
 800ab9c:	e7e8      	b.n	800ab70 <__mdiff+0xe0>
 800ab9e:	bf00      	nop
 800aba0:	0800bfef 	.word	0x0800bfef
 800aba4:	0800c000 	.word	0x0800c000

0800aba8 <__d2b>:
 800aba8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800abac:	2101      	movs	r1, #1
 800abae:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800abb2:	4690      	mov	r8, r2
 800abb4:	461d      	mov	r5, r3
 800abb6:	f7ff fcd1 	bl	800a55c <_Balloc>
 800abba:	4604      	mov	r4, r0
 800abbc:	b930      	cbnz	r0, 800abcc <__d2b+0x24>
 800abbe:	4602      	mov	r2, r0
 800abc0:	f240 310a 	movw	r1, #778	; 0x30a
 800abc4:	4b24      	ldr	r3, [pc, #144]	; (800ac58 <__d2b+0xb0>)
 800abc6:	4825      	ldr	r0, [pc, #148]	; (800ac5c <__d2b+0xb4>)
 800abc8:	f000 faa6 	bl	800b118 <__assert_func>
 800abcc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800abd0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800abd4:	bb2d      	cbnz	r5, 800ac22 <__d2b+0x7a>
 800abd6:	9301      	str	r3, [sp, #4]
 800abd8:	f1b8 0300 	subs.w	r3, r8, #0
 800abdc:	d026      	beq.n	800ac2c <__d2b+0x84>
 800abde:	4668      	mov	r0, sp
 800abe0:	9300      	str	r3, [sp, #0]
 800abe2:	f7ff fd83 	bl	800a6ec <__lo0bits>
 800abe6:	9900      	ldr	r1, [sp, #0]
 800abe8:	b1f0      	cbz	r0, 800ac28 <__d2b+0x80>
 800abea:	9a01      	ldr	r2, [sp, #4]
 800abec:	f1c0 0320 	rsb	r3, r0, #32
 800abf0:	fa02 f303 	lsl.w	r3, r2, r3
 800abf4:	430b      	orrs	r3, r1
 800abf6:	40c2      	lsrs	r2, r0
 800abf8:	6163      	str	r3, [r4, #20]
 800abfa:	9201      	str	r2, [sp, #4]
 800abfc:	9b01      	ldr	r3, [sp, #4]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	bf14      	ite	ne
 800ac02:	2102      	movne	r1, #2
 800ac04:	2101      	moveq	r1, #1
 800ac06:	61a3      	str	r3, [r4, #24]
 800ac08:	6121      	str	r1, [r4, #16]
 800ac0a:	b1c5      	cbz	r5, 800ac3e <__d2b+0x96>
 800ac0c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ac10:	4405      	add	r5, r0
 800ac12:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac16:	603d      	str	r5, [r7, #0]
 800ac18:	6030      	str	r0, [r6, #0]
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	b002      	add	sp, #8
 800ac1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac26:	e7d6      	b.n	800abd6 <__d2b+0x2e>
 800ac28:	6161      	str	r1, [r4, #20]
 800ac2a:	e7e7      	b.n	800abfc <__d2b+0x54>
 800ac2c:	a801      	add	r0, sp, #4
 800ac2e:	f7ff fd5d 	bl	800a6ec <__lo0bits>
 800ac32:	2101      	movs	r1, #1
 800ac34:	9b01      	ldr	r3, [sp, #4]
 800ac36:	6121      	str	r1, [r4, #16]
 800ac38:	6163      	str	r3, [r4, #20]
 800ac3a:	3020      	adds	r0, #32
 800ac3c:	e7e5      	b.n	800ac0a <__d2b+0x62>
 800ac3e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800ac42:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac46:	6038      	str	r0, [r7, #0]
 800ac48:	6918      	ldr	r0, [r3, #16]
 800ac4a:	f7ff fd2f 	bl	800a6ac <__hi0bits>
 800ac4e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800ac52:	6031      	str	r1, [r6, #0]
 800ac54:	e7e1      	b.n	800ac1a <__d2b+0x72>
 800ac56:	bf00      	nop
 800ac58:	0800bfef 	.word	0x0800bfef
 800ac5c:	0800c000 	.word	0x0800c000

0800ac60 <_calloc_r>:
 800ac60:	b570      	push	{r4, r5, r6, lr}
 800ac62:	fba1 5402 	umull	r5, r4, r1, r2
 800ac66:	b934      	cbnz	r4, 800ac76 <_calloc_r+0x16>
 800ac68:	4629      	mov	r1, r5
 800ac6a:	f000 f875 	bl	800ad58 <_malloc_r>
 800ac6e:	4606      	mov	r6, r0
 800ac70:	b928      	cbnz	r0, 800ac7e <_calloc_r+0x1e>
 800ac72:	4630      	mov	r0, r6
 800ac74:	bd70      	pop	{r4, r5, r6, pc}
 800ac76:	220c      	movs	r2, #12
 800ac78:	2600      	movs	r6, #0
 800ac7a:	6002      	str	r2, [r0, #0]
 800ac7c:	e7f9      	b.n	800ac72 <_calloc_r+0x12>
 800ac7e:	462a      	mov	r2, r5
 800ac80:	4621      	mov	r1, r4
 800ac82:	f7fe f941 	bl	8008f08 <memset>
 800ac86:	e7f4      	b.n	800ac72 <_calloc_r+0x12>

0800ac88 <_free_r>:
 800ac88:	b538      	push	{r3, r4, r5, lr}
 800ac8a:	4605      	mov	r5, r0
 800ac8c:	2900      	cmp	r1, #0
 800ac8e:	d040      	beq.n	800ad12 <_free_r+0x8a>
 800ac90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac94:	1f0c      	subs	r4, r1, #4
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	bfb8      	it	lt
 800ac9a:	18e4      	addlt	r4, r4, r3
 800ac9c:	f000 fa98 	bl	800b1d0 <__malloc_lock>
 800aca0:	4a1c      	ldr	r2, [pc, #112]	; (800ad14 <_free_r+0x8c>)
 800aca2:	6813      	ldr	r3, [r2, #0]
 800aca4:	b933      	cbnz	r3, 800acb4 <_free_r+0x2c>
 800aca6:	6063      	str	r3, [r4, #4]
 800aca8:	6014      	str	r4, [r2, #0]
 800acaa:	4628      	mov	r0, r5
 800acac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acb0:	f000 ba94 	b.w	800b1dc <__malloc_unlock>
 800acb4:	42a3      	cmp	r3, r4
 800acb6:	d908      	bls.n	800acca <_free_r+0x42>
 800acb8:	6820      	ldr	r0, [r4, #0]
 800acba:	1821      	adds	r1, r4, r0
 800acbc:	428b      	cmp	r3, r1
 800acbe:	bf01      	itttt	eq
 800acc0:	6819      	ldreq	r1, [r3, #0]
 800acc2:	685b      	ldreq	r3, [r3, #4]
 800acc4:	1809      	addeq	r1, r1, r0
 800acc6:	6021      	streq	r1, [r4, #0]
 800acc8:	e7ed      	b.n	800aca6 <_free_r+0x1e>
 800acca:	461a      	mov	r2, r3
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	b10b      	cbz	r3, 800acd4 <_free_r+0x4c>
 800acd0:	42a3      	cmp	r3, r4
 800acd2:	d9fa      	bls.n	800acca <_free_r+0x42>
 800acd4:	6811      	ldr	r1, [r2, #0]
 800acd6:	1850      	adds	r0, r2, r1
 800acd8:	42a0      	cmp	r0, r4
 800acda:	d10b      	bne.n	800acf4 <_free_r+0x6c>
 800acdc:	6820      	ldr	r0, [r4, #0]
 800acde:	4401      	add	r1, r0
 800ace0:	1850      	adds	r0, r2, r1
 800ace2:	4283      	cmp	r3, r0
 800ace4:	6011      	str	r1, [r2, #0]
 800ace6:	d1e0      	bne.n	800acaa <_free_r+0x22>
 800ace8:	6818      	ldr	r0, [r3, #0]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	4401      	add	r1, r0
 800acee:	6011      	str	r1, [r2, #0]
 800acf0:	6053      	str	r3, [r2, #4]
 800acf2:	e7da      	b.n	800acaa <_free_r+0x22>
 800acf4:	d902      	bls.n	800acfc <_free_r+0x74>
 800acf6:	230c      	movs	r3, #12
 800acf8:	602b      	str	r3, [r5, #0]
 800acfa:	e7d6      	b.n	800acaa <_free_r+0x22>
 800acfc:	6820      	ldr	r0, [r4, #0]
 800acfe:	1821      	adds	r1, r4, r0
 800ad00:	428b      	cmp	r3, r1
 800ad02:	bf01      	itttt	eq
 800ad04:	6819      	ldreq	r1, [r3, #0]
 800ad06:	685b      	ldreq	r3, [r3, #4]
 800ad08:	1809      	addeq	r1, r1, r0
 800ad0a:	6021      	streq	r1, [r4, #0]
 800ad0c:	6063      	str	r3, [r4, #4]
 800ad0e:	6054      	str	r4, [r2, #4]
 800ad10:	e7cb      	b.n	800acaa <_free_r+0x22>
 800ad12:	bd38      	pop	{r3, r4, r5, pc}
 800ad14:	2000056c 	.word	0x2000056c

0800ad18 <sbrk_aligned>:
 800ad18:	b570      	push	{r4, r5, r6, lr}
 800ad1a:	4e0e      	ldr	r6, [pc, #56]	; (800ad54 <sbrk_aligned+0x3c>)
 800ad1c:	460c      	mov	r4, r1
 800ad1e:	6831      	ldr	r1, [r6, #0]
 800ad20:	4605      	mov	r5, r0
 800ad22:	b911      	cbnz	r1, 800ad2a <sbrk_aligned+0x12>
 800ad24:	f000 f9e8 	bl	800b0f8 <_sbrk_r>
 800ad28:	6030      	str	r0, [r6, #0]
 800ad2a:	4621      	mov	r1, r4
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	f000 f9e3 	bl	800b0f8 <_sbrk_r>
 800ad32:	1c43      	adds	r3, r0, #1
 800ad34:	d00a      	beq.n	800ad4c <sbrk_aligned+0x34>
 800ad36:	1cc4      	adds	r4, r0, #3
 800ad38:	f024 0403 	bic.w	r4, r4, #3
 800ad3c:	42a0      	cmp	r0, r4
 800ad3e:	d007      	beq.n	800ad50 <sbrk_aligned+0x38>
 800ad40:	1a21      	subs	r1, r4, r0
 800ad42:	4628      	mov	r0, r5
 800ad44:	f000 f9d8 	bl	800b0f8 <_sbrk_r>
 800ad48:	3001      	adds	r0, #1
 800ad4a:	d101      	bne.n	800ad50 <sbrk_aligned+0x38>
 800ad4c:	f04f 34ff 	mov.w	r4, #4294967295
 800ad50:	4620      	mov	r0, r4
 800ad52:	bd70      	pop	{r4, r5, r6, pc}
 800ad54:	20000570 	.word	0x20000570

0800ad58 <_malloc_r>:
 800ad58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad5c:	1ccd      	adds	r5, r1, #3
 800ad5e:	f025 0503 	bic.w	r5, r5, #3
 800ad62:	3508      	adds	r5, #8
 800ad64:	2d0c      	cmp	r5, #12
 800ad66:	bf38      	it	cc
 800ad68:	250c      	movcc	r5, #12
 800ad6a:	2d00      	cmp	r5, #0
 800ad6c:	4607      	mov	r7, r0
 800ad6e:	db01      	blt.n	800ad74 <_malloc_r+0x1c>
 800ad70:	42a9      	cmp	r1, r5
 800ad72:	d905      	bls.n	800ad80 <_malloc_r+0x28>
 800ad74:	230c      	movs	r3, #12
 800ad76:	2600      	movs	r6, #0
 800ad78:	603b      	str	r3, [r7, #0]
 800ad7a:	4630      	mov	r0, r6
 800ad7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad80:	4e2e      	ldr	r6, [pc, #184]	; (800ae3c <_malloc_r+0xe4>)
 800ad82:	f000 fa25 	bl	800b1d0 <__malloc_lock>
 800ad86:	6833      	ldr	r3, [r6, #0]
 800ad88:	461c      	mov	r4, r3
 800ad8a:	bb34      	cbnz	r4, 800adda <_malloc_r+0x82>
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	4638      	mov	r0, r7
 800ad90:	f7ff ffc2 	bl	800ad18 <sbrk_aligned>
 800ad94:	1c43      	adds	r3, r0, #1
 800ad96:	4604      	mov	r4, r0
 800ad98:	d14d      	bne.n	800ae36 <_malloc_r+0xde>
 800ad9a:	6834      	ldr	r4, [r6, #0]
 800ad9c:	4626      	mov	r6, r4
 800ad9e:	2e00      	cmp	r6, #0
 800ada0:	d140      	bne.n	800ae24 <_malloc_r+0xcc>
 800ada2:	6823      	ldr	r3, [r4, #0]
 800ada4:	4631      	mov	r1, r6
 800ada6:	4638      	mov	r0, r7
 800ada8:	eb04 0803 	add.w	r8, r4, r3
 800adac:	f000 f9a4 	bl	800b0f8 <_sbrk_r>
 800adb0:	4580      	cmp	r8, r0
 800adb2:	d13a      	bne.n	800ae2a <_malloc_r+0xd2>
 800adb4:	6821      	ldr	r1, [r4, #0]
 800adb6:	3503      	adds	r5, #3
 800adb8:	1a6d      	subs	r5, r5, r1
 800adba:	f025 0503 	bic.w	r5, r5, #3
 800adbe:	3508      	adds	r5, #8
 800adc0:	2d0c      	cmp	r5, #12
 800adc2:	bf38      	it	cc
 800adc4:	250c      	movcc	r5, #12
 800adc6:	4638      	mov	r0, r7
 800adc8:	4629      	mov	r1, r5
 800adca:	f7ff ffa5 	bl	800ad18 <sbrk_aligned>
 800adce:	3001      	adds	r0, #1
 800add0:	d02b      	beq.n	800ae2a <_malloc_r+0xd2>
 800add2:	6823      	ldr	r3, [r4, #0]
 800add4:	442b      	add	r3, r5
 800add6:	6023      	str	r3, [r4, #0]
 800add8:	e00e      	b.n	800adf8 <_malloc_r+0xa0>
 800adda:	6822      	ldr	r2, [r4, #0]
 800addc:	1b52      	subs	r2, r2, r5
 800adde:	d41e      	bmi.n	800ae1e <_malloc_r+0xc6>
 800ade0:	2a0b      	cmp	r2, #11
 800ade2:	d916      	bls.n	800ae12 <_malloc_r+0xba>
 800ade4:	1961      	adds	r1, r4, r5
 800ade6:	42a3      	cmp	r3, r4
 800ade8:	6025      	str	r5, [r4, #0]
 800adea:	bf18      	it	ne
 800adec:	6059      	strne	r1, [r3, #4]
 800adee:	6863      	ldr	r3, [r4, #4]
 800adf0:	bf08      	it	eq
 800adf2:	6031      	streq	r1, [r6, #0]
 800adf4:	5162      	str	r2, [r4, r5]
 800adf6:	604b      	str	r3, [r1, #4]
 800adf8:	4638      	mov	r0, r7
 800adfa:	f104 060b 	add.w	r6, r4, #11
 800adfe:	f000 f9ed 	bl	800b1dc <__malloc_unlock>
 800ae02:	f026 0607 	bic.w	r6, r6, #7
 800ae06:	1d23      	adds	r3, r4, #4
 800ae08:	1af2      	subs	r2, r6, r3
 800ae0a:	d0b6      	beq.n	800ad7a <_malloc_r+0x22>
 800ae0c:	1b9b      	subs	r3, r3, r6
 800ae0e:	50a3      	str	r3, [r4, r2]
 800ae10:	e7b3      	b.n	800ad7a <_malloc_r+0x22>
 800ae12:	6862      	ldr	r2, [r4, #4]
 800ae14:	42a3      	cmp	r3, r4
 800ae16:	bf0c      	ite	eq
 800ae18:	6032      	streq	r2, [r6, #0]
 800ae1a:	605a      	strne	r2, [r3, #4]
 800ae1c:	e7ec      	b.n	800adf8 <_malloc_r+0xa0>
 800ae1e:	4623      	mov	r3, r4
 800ae20:	6864      	ldr	r4, [r4, #4]
 800ae22:	e7b2      	b.n	800ad8a <_malloc_r+0x32>
 800ae24:	4634      	mov	r4, r6
 800ae26:	6876      	ldr	r6, [r6, #4]
 800ae28:	e7b9      	b.n	800ad9e <_malloc_r+0x46>
 800ae2a:	230c      	movs	r3, #12
 800ae2c:	4638      	mov	r0, r7
 800ae2e:	603b      	str	r3, [r7, #0]
 800ae30:	f000 f9d4 	bl	800b1dc <__malloc_unlock>
 800ae34:	e7a1      	b.n	800ad7a <_malloc_r+0x22>
 800ae36:	6025      	str	r5, [r4, #0]
 800ae38:	e7de      	b.n	800adf8 <_malloc_r+0xa0>
 800ae3a:	bf00      	nop
 800ae3c:	2000056c 	.word	0x2000056c

0800ae40 <__ssputs_r>:
 800ae40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae44:	688e      	ldr	r6, [r1, #8]
 800ae46:	4682      	mov	sl, r0
 800ae48:	429e      	cmp	r6, r3
 800ae4a:	460c      	mov	r4, r1
 800ae4c:	4690      	mov	r8, r2
 800ae4e:	461f      	mov	r7, r3
 800ae50:	d838      	bhi.n	800aec4 <__ssputs_r+0x84>
 800ae52:	898a      	ldrh	r2, [r1, #12]
 800ae54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae58:	d032      	beq.n	800aec0 <__ssputs_r+0x80>
 800ae5a:	6825      	ldr	r5, [r4, #0]
 800ae5c:	6909      	ldr	r1, [r1, #16]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	eba5 0901 	sub.w	r9, r5, r1
 800ae64:	6965      	ldr	r5, [r4, #20]
 800ae66:	444b      	add	r3, r9
 800ae68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae70:	106d      	asrs	r5, r5, #1
 800ae72:	429d      	cmp	r5, r3
 800ae74:	bf38      	it	cc
 800ae76:	461d      	movcc	r5, r3
 800ae78:	0553      	lsls	r3, r2, #21
 800ae7a:	d531      	bpl.n	800aee0 <__ssputs_r+0xa0>
 800ae7c:	4629      	mov	r1, r5
 800ae7e:	f7ff ff6b 	bl	800ad58 <_malloc_r>
 800ae82:	4606      	mov	r6, r0
 800ae84:	b950      	cbnz	r0, 800ae9c <__ssputs_r+0x5c>
 800ae86:	230c      	movs	r3, #12
 800ae88:	f04f 30ff 	mov.w	r0, #4294967295
 800ae8c:	f8ca 3000 	str.w	r3, [sl]
 800ae90:	89a3      	ldrh	r3, [r4, #12]
 800ae92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae96:	81a3      	strh	r3, [r4, #12]
 800ae98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae9c:	464a      	mov	r2, r9
 800ae9e:	6921      	ldr	r1, [r4, #16]
 800aea0:	f7ff fb4e 	bl	800a540 <memcpy>
 800aea4:	89a3      	ldrh	r3, [r4, #12]
 800aea6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aeaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeae:	81a3      	strh	r3, [r4, #12]
 800aeb0:	6126      	str	r6, [r4, #16]
 800aeb2:	444e      	add	r6, r9
 800aeb4:	6026      	str	r6, [r4, #0]
 800aeb6:	463e      	mov	r6, r7
 800aeb8:	6165      	str	r5, [r4, #20]
 800aeba:	eba5 0509 	sub.w	r5, r5, r9
 800aebe:	60a5      	str	r5, [r4, #8]
 800aec0:	42be      	cmp	r6, r7
 800aec2:	d900      	bls.n	800aec6 <__ssputs_r+0x86>
 800aec4:	463e      	mov	r6, r7
 800aec6:	4632      	mov	r2, r6
 800aec8:	4641      	mov	r1, r8
 800aeca:	6820      	ldr	r0, [r4, #0]
 800aecc:	f000 f966 	bl	800b19c <memmove>
 800aed0:	68a3      	ldr	r3, [r4, #8]
 800aed2:	2000      	movs	r0, #0
 800aed4:	1b9b      	subs	r3, r3, r6
 800aed6:	60a3      	str	r3, [r4, #8]
 800aed8:	6823      	ldr	r3, [r4, #0]
 800aeda:	4433      	add	r3, r6
 800aedc:	6023      	str	r3, [r4, #0]
 800aede:	e7db      	b.n	800ae98 <__ssputs_r+0x58>
 800aee0:	462a      	mov	r2, r5
 800aee2:	f000 f981 	bl	800b1e8 <_realloc_r>
 800aee6:	4606      	mov	r6, r0
 800aee8:	2800      	cmp	r0, #0
 800aeea:	d1e1      	bne.n	800aeb0 <__ssputs_r+0x70>
 800aeec:	4650      	mov	r0, sl
 800aeee:	6921      	ldr	r1, [r4, #16]
 800aef0:	f7ff feca 	bl	800ac88 <_free_r>
 800aef4:	e7c7      	b.n	800ae86 <__ssputs_r+0x46>
	...

0800aef8 <_svfiprintf_r>:
 800aef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aefc:	4698      	mov	r8, r3
 800aefe:	898b      	ldrh	r3, [r1, #12]
 800af00:	4607      	mov	r7, r0
 800af02:	061b      	lsls	r3, r3, #24
 800af04:	460d      	mov	r5, r1
 800af06:	4614      	mov	r4, r2
 800af08:	b09d      	sub	sp, #116	; 0x74
 800af0a:	d50e      	bpl.n	800af2a <_svfiprintf_r+0x32>
 800af0c:	690b      	ldr	r3, [r1, #16]
 800af0e:	b963      	cbnz	r3, 800af2a <_svfiprintf_r+0x32>
 800af10:	2140      	movs	r1, #64	; 0x40
 800af12:	f7ff ff21 	bl	800ad58 <_malloc_r>
 800af16:	6028      	str	r0, [r5, #0]
 800af18:	6128      	str	r0, [r5, #16]
 800af1a:	b920      	cbnz	r0, 800af26 <_svfiprintf_r+0x2e>
 800af1c:	230c      	movs	r3, #12
 800af1e:	603b      	str	r3, [r7, #0]
 800af20:	f04f 30ff 	mov.w	r0, #4294967295
 800af24:	e0d1      	b.n	800b0ca <_svfiprintf_r+0x1d2>
 800af26:	2340      	movs	r3, #64	; 0x40
 800af28:	616b      	str	r3, [r5, #20]
 800af2a:	2300      	movs	r3, #0
 800af2c:	9309      	str	r3, [sp, #36]	; 0x24
 800af2e:	2320      	movs	r3, #32
 800af30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af34:	2330      	movs	r3, #48	; 0x30
 800af36:	f04f 0901 	mov.w	r9, #1
 800af3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800af3e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b0e4 <_svfiprintf_r+0x1ec>
 800af42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af46:	4623      	mov	r3, r4
 800af48:	469a      	mov	sl, r3
 800af4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af4e:	b10a      	cbz	r2, 800af54 <_svfiprintf_r+0x5c>
 800af50:	2a25      	cmp	r2, #37	; 0x25
 800af52:	d1f9      	bne.n	800af48 <_svfiprintf_r+0x50>
 800af54:	ebba 0b04 	subs.w	fp, sl, r4
 800af58:	d00b      	beq.n	800af72 <_svfiprintf_r+0x7a>
 800af5a:	465b      	mov	r3, fp
 800af5c:	4622      	mov	r2, r4
 800af5e:	4629      	mov	r1, r5
 800af60:	4638      	mov	r0, r7
 800af62:	f7ff ff6d 	bl	800ae40 <__ssputs_r>
 800af66:	3001      	adds	r0, #1
 800af68:	f000 80aa 	beq.w	800b0c0 <_svfiprintf_r+0x1c8>
 800af6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af6e:	445a      	add	r2, fp
 800af70:	9209      	str	r2, [sp, #36]	; 0x24
 800af72:	f89a 3000 	ldrb.w	r3, [sl]
 800af76:	2b00      	cmp	r3, #0
 800af78:	f000 80a2 	beq.w	800b0c0 <_svfiprintf_r+0x1c8>
 800af7c:	2300      	movs	r3, #0
 800af7e:	f04f 32ff 	mov.w	r2, #4294967295
 800af82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af86:	f10a 0a01 	add.w	sl, sl, #1
 800af8a:	9304      	str	r3, [sp, #16]
 800af8c:	9307      	str	r3, [sp, #28]
 800af8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af92:	931a      	str	r3, [sp, #104]	; 0x68
 800af94:	4654      	mov	r4, sl
 800af96:	2205      	movs	r2, #5
 800af98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af9c:	4851      	ldr	r0, [pc, #324]	; (800b0e4 <_svfiprintf_r+0x1ec>)
 800af9e:	f7ff fac1 	bl	800a524 <memchr>
 800afa2:	9a04      	ldr	r2, [sp, #16]
 800afa4:	b9d8      	cbnz	r0, 800afde <_svfiprintf_r+0xe6>
 800afa6:	06d0      	lsls	r0, r2, #27
 800afa8:	bf44      	itt	mi
 800afaa:	2320      	movmi	r3, #32
 800afac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afb0:	0711      	lsls	r1, r2, #28
 800afb2:	bf44      	itt	mi
 800afb4:	232b      	movmi	r3, #43	; 0x2b
 800afb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afba:	f89a 3000 	ldrb.w	r3, [sl]
 800afbe:	2b2a      	cmp	r3, #42	; 0x2a
 800afc0:	d015      	beq.n	800afee <_svfiprintf_r+0xf6>
 800afc2:	4654      	mov	r4, sl
 800afc4:	2000      	movs	r0, #0
 800afc6:	f04f 0c0a 	mov.w	ip, #10
 800afca:	9a07      	ldr	r2, [sp, #28]
 800afcc:	4621      	mov	r1, r4
 800afce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afd2:	3b30      	subs	r3, #48	; 0x30
 800afd4:	2b09      	cmp	r3, #9
 800afd6:	d94e      	bls.n	800b076 <_svfiprintf_r+0x17e>
 800afd8:	b1b0      	cbz	r0, 800b008 <_svfiprintf_r+0x110>
 800afda:	9207      	str	r2, [sp, #28]
 800afdc:	e014      	b.n	800b008 <_svfiprintf_r+0x110>
 800afde:	eba0 0308 	sub.w	r3, r0, r8
 800afe2:	fa09 f303 	lsl.w	r3, r9, r3
 800afe6:	4313      	orrs	r3, r2
 800afe8:	46a2      	mov	sl, r4
 800afea:	9304      	str	r3, [sp, #16]
 800afec:	e7d2      	b.n	800af94 <_svfiprintf_r+0x9c>
 800afee:	9b03      	ldr	r3, [sp, #12]
 800aff0:	1d19      	adds	r1, r3, #4
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	9103      	str	r1, [sp, #12]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	bfbb      	ittet	lt
 800affa:	425b      	neglt	r3, r3
 800affc:	f042 0202 	orrlt.w	r2, r2, #2
 800b000:	9307      	strge	r3, [sp, #28]
 800b002:	9307      	strlt	r3, [sp, #28]
 800b004:	bfb8      	it	lt
 800b006:	9204      	strlt	r2, [sp, #16]
 800b008:	7823      	ldrb	r3, [r4, #0]
 800b00a:	2b2e      	cmp	r3, #46	; 0x2e
 800b00c:	d10c      	bne.n	800b028 <_svfiprintf_r+0x130>
 800b00e:	7863      	ldrb	r3, [r4, #1]
 800b010:	2b2a      	cmp	r3, #42	; 0x2a
 800b012:	d135      	bne.n	800b080 <_svfiprintf_r+0x188>
 800b014:	9b03      	ldr	r3, [sp, #12]
 800b016:	3402      	adds	r4, #2
 800b018:	1d1a      	adds	r2, r3, #4
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	9203      	str	r2, [sp, #12]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	bfb8      	it	lt
 800b022:	f04f 33ff 	movlt.w	r3, #4294967295
 800b026:	9305      	str	r3, [sp, #20]
 800b028:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b0e8 <_svfiprintf_r+0x1f0>
 800b02c:	2203      	movs	r2, #3
 800b02e:	4650      	mov	r0, sl
 800b030:	7821      	ldrb	r1, [r4, #0]
 800b032:	f7ff fa77 	bl	800a524 <memchr>
 800b036:	b140      	cbz	r0, 800b04a <_svfiprintf_r+0x152>
 800b038:	2340      	movs	r3, #64	; 0x40
 800b03a:	eba0 000a 	sub.w	r0, r0, sl
 800b03e:	fa03 f000 	lsl.w	r0, r3, r0
 800b042:	9b04      	ldr	r3, [sp, #16]
 800b044:	3401      	adds	r4, #1
 800b046:	4303      	orrs	r3, r0
 800b048:	9304      	str	r3, [sp, #16]
 800b04a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b04e:	2206      	movs	r2, #6
 800b050:	4826      	ldr	r0, [pc, #152]	; (800b0ec <_svfiprintf_r+0x1f4>)
 800b052:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b056:	f7ff fa65 	bl	800a524 <memchr>
 800b05a:	2800      	cmp	r0, #0
 800b05c:	d038      	beq.n	800b0d0 <_svfiprintf_r+0x1d8>
 800b05e:	4b24      	ldr	r3, [pc, #144]	; (800b0f0 <_svfiprintf_r+0x1f8>)
 800b060:	bb1b      	cbnz	r3, 800b0aa <_svfiprintf_r+0x1b2>
 800b062:	9b03      	ldr	r3, [sp, #12]
 800b064:	3307      	adds	r3, #7
 800b066:	f023 0307 	bic.w	r3, r3, #7
 800b06a:	3308      	adds	r3, #8
 800b06c:	9303      	str	r3, [sp, #12]
 800b06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b070:	4433      	add	r3, r6
 800b072:	9309      	str	r3, [sp, #36]	; 0x24
 800b074:	e767      	b.n	800af46 <_svfiprintf_r+0x4e>
 800b076:	460c      	mov	r4, r1
 800b078:	2001      	movs	r0, #1
 800b07a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b07e:	e7a5      	b.n	800afcc <_svfiprintf_r+0xd4>
 800b080:	2300      	movs	r3, #0
 800b082:	f04f 0c0a 	mov.w	ip, #10
 800b086:	4619      	mov	r1, r3
 800b088:	3401      	adds	r4, #1
 800b08a:	9305      	str	r3, [sp, #20]
 800b08c:	4620      	mov	r0, r4
 800b08e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b092:	3a30      	subs	r2, #48	; 0x30
 800b094:	2a09      	cmp	r2, #9
 800b096:	d903      	bls.n	800b0a0 <_svfiprintf_r+0x1a8>
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d0c5      	beq.n	800b028 <_svfiprintf_r+0x130>
 800b09c:	9105      	str	r1, [sp, #20]
 800b09e:	e7c3      	b.n	800b028 <_svfiprintf_r+0x130>
 800b0a0:	4604      	mov	r4, r0
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0a8:	e7f0      	b.n	800b08c <_svfiprintf_r+0x194>
 800b0aa:	ab03      	add	r3, sp, #12
 800b0ac:	9300      	str	r3, [sp, #0]
 800b0ae:	462a      	mov	r2, r5
 800b0b0:	4638      	mov	r0, r7
 800b0b2:	4b10      	ldr	r3, [pc, #64]	; (800b0f4 <_svfiprintf_r+0x1fc>)
 800b0b4:	a904      	add	r1, sp, #16
 800b0b6:	f7fd ffcd 	bl	8009054 <_printf_float>
 800b0ba:	1c42      	adds	r2, r0, #1
 800b0bc:	4606      	mov	r6, r0
 800b0be:	d1d6      	bne.n	800b06e <_svfiprintf_r+0x176>
 800b0c0:	89ab      	ldrh	r3, [r5, #12]
 800b0c2:	065b      	lsls	r3, r3, #25
 800b0c4:	f53f af2c 	bmi.w	800af20 <_svfiprintf_r+0x28>
 800b0c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0ca:	b01d      	add	sp, #116	; 0x74
 800b0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0d0:	ab03      	add	r3, sp, #12
 800b0d2:	9300      	str	r3, [sp, #0]
 800b0d4:	462a      	mov	r2, r5
 800b0d6:	4638      	mov	r0, r7
 800b0d8:	4b06      	ldr	r3, [pc, #24]	; (800b0f4 <_svfiprintf_r+0x1fc>)
 800b0da:	a904      	add	r1, sp, #16
 800b0dc:	f7fe fa56 	bl	800958c <_printf_i>
 800b0e0:	e7eb      	b.n	800b0ba <_svfiprintf_r+0x1c2>
 800b0e2:	bf00      	nop
 800b0e4:	0800c15c 	.word	0x0800c15c
 800b0e8:	0800c162 	.word	0x0800c162
 800b0ec:	0800c166 	.word	0x0800c166
 800b0f0:	08009055 	.word	0x08009055
 800b0f4:	0800ae41 	.word	0x0800ae41

0800b0f8 <_sbrk_r>:
 800b0f8:	b538      	push	{r3, r4, r5, lr}
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	4d05      	ldr	r5, [pc, #20]	; (800b114 <_sbrk_r+0x1c>)
 800b0fe:	4604      	mov	r4, r0
 800b100:	4608      	mov	r0, r1
 800b102:	602b      	str	r3, [r5, #0]
 800b104:	f7f6 ffce 	bl	80020a4 <_sbrk>
 800b108:	1c43      	adds	r3, r0, #1
 800b10a:	d102      	bne.n	800b112 <_sbrk_r+0x1a>
 800b10c:	682b      	ldr	r3, [r5, #0]
 800b10e:	b103      	cbz	r3, 800b112 <_sbrk_r+0x1a>
 800b110:	6023      	str	r3, [r4, #0]
 800b112:	bd38      	pop	{r3, r4, r5, pc}
 800b114:	20000574 	.word	0x20000574

0800b118 <__assert_func>:
 800b118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b11a:	4614      	mov	r4, r2
 800b11c:	461a      	mov	r2, r3
 800b11e:	4b09      	ldr	r3, [pc, #36]	; (800b144 <__assert_func+0x2c>)
 800b120:	4605      	mov	r5, r0
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	68d8      	ldr	r0, [r3, #12]
 800b126:	b14c      	cbz	r4, 800b13c <__assert_func+0x24>
 800b128:	4b07      	ldr	r3, [pc, #28]	; (800b148 <__assert_func+0x30>)
 800b12a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b12e:	9100      	str	r1, [sp, #0]
 800b130:	462b      	mov	r3, r5
 800b132:	4906      	ldr	r1, [pc, #24]	; (800b14c <__assert_func+0x34>)
 800b134:	f000 f80e 	bl	800b154 <fiprintf>
 800b138:	f000 faaa 	bl	800b690 <abort>
 800b13c:	4b04      	ldr	r3, [pc, #16]	; (800b150 <__assert_func+0x38>)
 800b13e:	461c      	mov	r4, r3
 800b140:	e7f3      	b.n	800b12a <__assert_func+0x12>
 800b142:	bf00      	nop
 800b144:	20000028 	.word	0x20000028
 800b148:	0800c16d 	.word	0x0800c16d
 800b14c:	0800c17a 	.word	0x0800c17a
 800b150:	0800c1a8 	.word	0x0800c1a8

0800b154 <fiprintf>:
 800b154:	b40e      	push	{r1, r2, r3}
 800b156:	b503      	push	{r0, r1, lr}
 800b158:	4601      	mov	r1, r0
 800b15a:	ab03      	add	r3, sp, #12
 800b15c:	4805      	ldr	r0, [pc, #20]	; (800b174 <fiprintf+0x20>)
 800b15e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b162:	6800      	ldr	r0, [r0, #0]
 800b164:	9301      	str	r3, [sp, #4]
 800b166:	f000 f895 	bl	800b294 <_vfiprintf_r>
 800b16a:	b002      	add	sp, #8
 800b16c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b170:	b003      	add	sp, #12
 800b172:	4770      	bx	lr
 800b174:	20000028 	.word	0x20000028

0800b178 <__ascii_mbtowc>:
 800b178:	b082      	sub	sp, #8
 800b17a:	b901      	cbnz	r1, 800b17e <__ascii_mbtowc+0x6>
 800b17c:	a901      	add	r1, sp, #4
 800b17e:	b142      	cbz	r2, 800b192 <__ascii_mbtowc+0x1a>
 800b180:	b14b      	cbz	r3, 800b196 <__ascii_mbtowc+0x1e>
 800b182:	7813      	ldrb	r3, [r2, #0]
 800b184:	600b      	str	r3, [r1, #0]
 800b186:	7812      	ldrb	r2, [r2, #0]
 800b188:	1e10      	subs	r0, r2, #0
 800b18a:	bf18      	it	ne
 800b18c:	2001      	movne	r0, #1
 800b18e:	b002      	add	sp, #8
 800b190:	4770      	bx	lr
 800b192:	4610      	mov	r0, r2
 800b194:	e7fb      	b.n	800b18e <__ascii_mbtowc+0x16>
 800b196:	f06f 0001 	mvn.w	r0, #1
 800b19a:	e7f8      	b.n	800b18e <__ascii_mbtowc+0x16>

0800b19c <memmove>:
 800b19c:	4288      	cmp	r0, r1
 800b19e:	b510      	push	{r4, lr}
 800b1a0:	eb01 0402 	add.w	r4, r1, r2
 800b1a4:	d902      	bls.n	800b1ac <memmove+0x10>
 800b1a6:	4284      	cmp	r4, r0
 800b1a8:	4623      	mov	r3, r4
 800b1aa:	d807      	bhi.n	800b1bc <memmove+0x20>
 800b1ac:	1e43      	subs	r3, r0, #1
 800b1ae:	42a1      	cmp	r1, r4
 800b1b0:	d008      	beq.n	800b1c4 <memmove+0x28>
 800b1b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1ba:	e7f8      	b.n	800b1ae <memmove+0x12>
 800b1bc:	4601      	mov	r1, r0
 800b1be:	4402      	add	r2, r0
 800b1c0:	428a      	cmp	r2, r1
 800b1c2:	d100      	bne.n	800b1c6 <memmove+0x2a>
 800b1c4:	bd10      	pop	{r4, pc}
 800b1c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1ce:	e7f7      	b.n	800b1c0 <memmove+0x24>

0800b1d0 <__malloc_lock>:
 800b1d0:	4801      	ldr	r0, [pc, #4]	; (800b1d8 <__malloc_lock+0x8>)
 800b1d2:	f000 bc19 	b.w	800ba08 <__retarget_lock_acquire_recursive>
 800b1d6:	bf00      	nop
 800b1d8:	20000578 	.word	0x20000578

0800b1dc <__malloc_unlock>:
 800b1dc:	4801      	ldr	r0, [pc, #4]	; (800b1e4 <__malloc_unlock+0x8>)
 800b1de:	f000 bc14 	b.w	800ba0a <__retarget_lock_release_recursive>
 800b1e2:	bf00      	nop
 800b1e4:	20000578 	.word	0x20000578

0800b1e8 <_realloc_r>:
 800b1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ec:	4680      	mov	r8, r0
 800b1ee:	4614      	mov	r4, r2
 800b1f0:	460e      	mov	r6, r1
 800b1f2:	b921      	cbnz	r1, 800b1fe <_realloc_r+0x16>
 800b1f4:	4611      	mov	r1, r2
 800b1f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1fa:	f7ff bdad 	b.w	800ad58 <_malloc_r>
 800b1fe:	b92a      	cbnz	r2, 800b20c <_realloc_r+0x24>
 800b200:	f7ff fd42 	bl	800ac88 <_free_r>
 800b204:	4625      	mov	r5, r4
 800b206:	4628      	mov	r0, r5
 800b208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b20c:	f000 fc64 	bl	800bad8 <_malloc_usable_size_r>
 800b210:	4284      	cmp	r4, r0
 800b212:	4607      	mov	r7, r0
 800b214:	d802      	bhi.n	800b21c <_realloc_r+0x34>
 800b216:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b21a:	d812      	bhi.n	800b242 <_realloc_r+0x5a>
 800b21c:	4621      	mov	r1, r4
 800b21e:	4640      	mov	r0, r8
 800b220:	f7ff fd9a 	bl	800ad58 <_malloc_r>
 800b224:	4605      	mov	r5, r0
 800b226:	2800      	cmp	r0, #0
 800b228:	d0ed      	beq.n	800b206 <_realloc_r+0x1e>
 800b22a:	42bc      	cmp	r4, r7
 800b22c:	4622      	mov	r2, r4
 800b22e:	4631      	mov	r1, r6
 800b230:	bf28      	it	cs
 800b232:	463a      	movcs	r2, r7
 800b234:	f7ff f984 	bl	800a540 <memcpy>
 800b238:	4631      	mov	r1, r6
 800b23a:	4640      	mov	r0, r8
 800b23c:	f7ff fd24 	bl	800ac88 <_free_r>
 800b240:	e7e1      	b.n	800b206 <_realloc_r+0x1e>
 800b242:	4635      	mov	r5, r6
 800b244:	e7df      	b.n	800b206 <_realloc_r+0x1e>

0800b246 <__sfputc_r>:
 800b246:	6893      	ldr	r3, [r2, #8]
 800b248:	b410      	push	{r4}
 800b24a:	3b01      	subs	r3, #1
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	6093      	str	r3, [r2, #8]
 800b250:	da07      	bge.n	800b262 <__sfputc_r+0x1c>
 800b252:	6994      	ldr	r4, [r2, #24]
 800b254:	42a3      	cmp	r3, r4
 800b256:	db01      	blt.n	800b25c <__sfputc_r+0x16>
 800b258:	290a      	cmp	r1, #10
 800b25a:	d102      	bne.n	800b262 <__sfputc_r+0x1c>
 800b25c:	bc10      	pop	{r4}
 800b25e:	f000 b949 	b.w	800b4f4 <__swbuf_r>
 800b262:	6813      	ldr	r3, [r2, #0]
 800b264:	1c58      	adds	r0, r3, #1
 800b266:	6010      	str	r0, [r2, #0]
 800b268:	7019      	strb	r1, [r3, #0]
 800b26a:	4608      	mov	r0, r1
 800b26c:	bc10      	pop	{r4}
 800b26e:	4770      	bx	lr

0800b270 <__sfputs_r>:
 800b270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b272:	4606      	mov	r6, r0
 800b274:	460f      	mov	r7, r1
 800b276:	4614      	mov	r4, r2
 800b278:	18d5      	adds	r5, r2, r3
 800b27a:	42ac      	cmp	r4, r5
 800b27c:	d101      	bne.n	800b282 <__sfputs_r+0x12>
 800b27e:	2000      	movs	r0, #0
 800b280:	e007      	b.n	800b292 <__sfputs_r+0x22>
 800b282:	463a      	mov	r2, r7
 800b284:	4630      	mov	r0, r6
 800b286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b28a:	f7ff ffdc 	bl	800b246 <__sfputc_r>
 800b28e:	1c43      	adds	r3, r0, #1
 800b290:	d1f3      	bne.n	800b27a <__sfputs_r+0xa>
 800b292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b294 <_vfiprintf_r>:
 800b294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b298:	460d      	mov	r5, r1
 800b29a:	4614      	mov	r4, r2
 800b29c:	4698      	mov	r8, r3
 800b29e:	4606      	mov	r6, r0
 800b2a0:	b09d      	sub	sp, #116	; 0x74
 800b2a2:	b118      	cbz	r0, 800b2ac <_vfiprintf_r+0x18>
 800b2a4:	6983      	ldr	r3, [r0, #24]
 800b2a6:	b90b      	cbnz	r3, 800b2ac <_vfiprintf_r+0x18>
 800b2a8:	f000 fb10 	bl	800b8cc <__sinit>
 800b2ac:	4b89      	ldr	r3, [pc, #548]	; (800b4d4 <_vfiprintf_r+0x240>)
 800b2ae:	429d      	cmp	r5, r3
 800b2b0:	d11b      	bne.n	800b2ea <_vfiprintf_r+0x56>
 800b2b2:	6875      	ldr	r5, [r6, #4]
 800b2b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2b6:	07d9      	lsls	r1, r3, #31
 800b2b8:	d405      	bmi.n	800b2c6 <_vfiprintf_r+0x32>
 800b2ba:	89ab      	ldrh	r3, [r5, #12]
 800b2bc:	059a      	lsls	r2, r3, #22
 800b2be:	d402      	bmi.n	800b2c6 <_vfiprintf_r+0x32>
 800b2c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2c2:	f000 fba1 	bl	800ba08 <__retarget_lock_acquire_recursive>
 800b2c6:	89ab      	ldrh	r3, [r5, #12]
 800b2c8:	071b      	lsls	r3, r3, #28
 800b2ca:	d501      	bpl.n	800b2d0 <_vfiprintf_r+0x3c>
 800b2cc:	692b      	ldr	r3, [r5, #16]
 800b2ce:	b9eb      	cbnz	r3, 800b30c <_vfiprintf_r+0x78>
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	f000 f96e 	bl	800b5b4 <__swsetup_r>
 800b2d8:	b1c0      	cbz	r0, 800b30c <_vfiprintf_r+0x78>
 800b2da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2dc:	07dc      	lsls	r4, r3, #31
 800b2de:	d50e      	bpl.n	800b2fe <_vfiprintf_r+0x6a>
 800b2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e4:	b01d      	add	sp, #116	; 0x74
 800b2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ea:	4b7b      	ldr	r3, [pc, #492]	; (800b4d8 <_vfiprintf_r+0x244>)
 800b2ec:	429d      	cmp	r5, r3
 800b2ee:	d101      	bne.n	800b2f4 <_vfiprintf_r+0x60>
 800b2f0:	68b5      	ldr	r5, [r6, #8]
 800b2f2:	e7df      	b.n	800b2b4 <_vfiprintf_r+0x20>
 800b2f4:	4b79      	ldr	r3, [pc, #484]	; (800b4dc <_vfiprintf_r+0x248>)
 800b2f6:	429d      	cmp	r5, r3
 800b2f8:	bf08      	it	eq
 800b2fa:	68f5      	ldreq	r5, [r6, #12]
 800b2fc:	e7da      	b.n	800b2b4 <_vfiprintf_r+0x20>
 800b2fe:	89ab      	ldrh	r3, [r5, #12]
 800b300:	0598      	lsls	r0, r3, #22
 800b302:	d4ed      	bmi.n	800b2e0 <_vfiprintf_r+0x4c>
 800b304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b306:	f000 fb80 	bl	800ba0a <__retarget_lock_release_recursive>
 800b30a:	e7e9      	b.n	800b2e0 <_vfiprintf_r+0x4c>
 800b30c:	2300      	movs	r3, #0
 800b30e:	9309      	str	r3, [sp, #36]	; 0x24
 800b310:	2320      	movs	r3, #32
 800b312:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b316:	2330      	movs	r3, #48	; 0x30
 800b318:	f04f 0901 	mov.w	r9, #1
 800b31c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b320:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b4e0 <_vfiprintf_r+0x24c>
 800b324:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b328:	4623      	mov	r3, r4
 800b32a:	469a      	mov	sl, r3
 800b32c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b330:	b10a      	cbz	r2, 800b336 <_vfiprintf_r+0xa2>
 800b332:	2a25      	cmp	r2, #37	; 0x25
 800b334:	d1f9      	bne.n	800b32a <_vfiprintf_r+0x96>
 800b336:	ebba 0b04 	subs.w	fp, sl, r4
 800b33a:	d00b      	beq.n	800b354 <_vfiprintf_r+0xc0>
 800b33c:	465b      	mov	r3, fp
 800b33e:	4622      	mov	r2, r4
 800b340:	4629      	mov	r1, r5
 800b342:	4630      	mov	r0, r6
 800b344:	f7ff ff94 	bl	800b270 <__sfputs_r>
 800b348:	3001      	adds	r0, #1
 800b34a:	f000 80aa 	beq.w	800b4a2 <_vfiprintf_r+0x20e>
 800b34e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b350:	445a      	add	r2, fp
 800b352:	9209      	str	r2, [sp, #36]	; 0x24
 800b354:	f89a 3000 	ldrb.w	r3, [sl]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	f000 80a2 	beq.w	800b4a2 <_vfiprintf_r+0x20e>
 800b35e:	2300      	movs	r3, #0
 800b360:	f04f 32ff 	mov.w	r2, #4294967295
 800b364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b368:	f10a 0a01 	add.w	sl, sl, #1
 800b36c:	9304      	str	r3, [sp, #16]
 800b36e:	9307      	str	r3, [sp, #28]
 800b370:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b374:	931a      	str	r3, [sp, #104]	; 0x68
 800b376:	4654      	mov	r4, sl
 800b378:	2205      	movs	r2, #5
 800b37a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b37e:	4858      	ldr	r0, [pc, #352]	; (800b4e0 <_vfiprintf_r+0x24c>)
 800b380:	f7ff f8d0 	bl	800a524 <memchr>
 800b384:	9a04      	ldr	r2, [sp, #16]
 800b386:	b9d8      	cbnz	r0, 800b3c0 <_vfiprintf_r+0x12c>
 800b388:	06d1      	lsls	r1, r2, #27
 800b38a:	bf44      	itt	mi
 800b38c:	2320      	movmi	r3, #32
 800b38e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b392:	0713      	lsls	r3, r2, #28
 800b394:	bf44      	itt	mi
 800b396:	232b      	movmi	r3, #43	; 0x2b
 800b398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b39c:	f89a 3000 	ldrb.w	r3, [sl]
 800b3a0:	2b2a      	cmp	r3, #42	; 0x2a
 800b3a2:	d015      	beq.n	800b3d0 <_vfiprintf_r+0x13c>
 800b3a4:	4654      	mov	r4, sl
 800b3a6:	2000      	movs	r0, #0
 800b3a8:	f04f 0c0a 	mov.w	ip, #10
 800b3ac:	9a07      	ldr	r2, [sp, #28]
 800b3ae:	4621      	mov	r1, r4
 800b3b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3b4:	3b30      	subs	r3, #48	; 0x30
 800b3b6:	2b09      	cmp	r3, #9
 800b3b8:	d94e      	bls.n	800b458 <_vfiprintf_r+0x1c4>
 800b3ba:	b1b0      	cbz	r0, 800b3ea <_vfiprintf_r+0x156>
 800b3bc:	9207      	str	r2, [sp, #28]
 800b3be:	e014      	b.n	800b3ea <_vfiprintf_r+0x156>
 800b3c0:	eba0 0308 	sub.w	r3, r0, r8
 800b3c4:	fa09 f303 	lsl.w	r3, r9, r3
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	46a2      	mov	sl, r4
 800b3cc:	9304      	str	r3, [sp, #16]
 800b3ce:	e7d2      	b.n	800b376 <_vfiprintf_r+0xe2>
 800b3d0:	9b03      	ldr	r3, [sp, #12]
 800b3d2:	1d19      	adds	r1, r3, #4
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	9103      	str	r1, [sp, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	bfbb      	ittet	lt
 800b3dc:	425b      	neglt	r3, r3
 800b3de:	f042 0202 	orrlt.w	r2, r2, #2
 800b3e2:	9307      	strge	r3, [sp, #28]
 800b3e4:	9307      	strlt	r3, [sp, #28]
 800b3e6:	bfb8      	it	lt
 800b3e8:	9204      	strlt	r2, [sp, #16]
 800b3ea:	7823      	ldrb	r3, [r4, #0]
 800b3ec:	2b2e      	cmp	r3, #46	; 0x2e
 800b3ee:	d10c      	bne.n	800b40a <_vfiprintf_r+0x176>
 800b3f0:	7863      	ldrb	r3, [r4, #1]
 800b3f2:	2b2a      	cmp	r3, #42	; 0x2a
 800b3f4:	d135      	bne.n	800b462 <_vfiprintf_r+0x1ce>
 800b3f6:	9b03      	ldr	r3, [sp, #12]
 800b3f8:	3402      	adds	r4, #2
 800b3fa:	1d1a      	adds	r2, r3, #4
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	9203      	str	r2, [sp, #12]
 800b400:	2b00      	cmp	r3, #0
 800b402:	bfb8      	it	lt
 800b404:	f04f 33ff 	movlt.w	r3, #4294967295
 800b408:	9305      	str	r3, [sp, #20]
 800b40a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800b4e4 <_vfiprintf_r+0x250>
 800b40e:	2203      	movs	r2, #3
 800b410:	4650      	mov	r0, sl
 800b412:	7821      	ldrb	r1, [r4, #0]
 800b414:	f7ff f886 	bl	800a524 <memchr>
 800b418:	b140      	cbz	r0, 800b42c <_vfiprintf_r+0x198>
 800b41a:	2340      	movs	r3, #64	; 0x40
 800b41c:	eba0 000a 	sub.w	r0, r0, sl
 800b420:	fa03 f000 	lsl.w	r0, r3, r0
 800b424:	9b04      	ldr	r3, [sp, #16]
 800b426:	3401      	adds	r4, #1
 800b428:	4303      	orrs	r3, r0
 800b42a:	9304      	str	r3, [sp, #16]
 800b42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b430:	2206      	movs	r2, #6
 800b432:	482d      	ldr	r0, [pc, #180]	; (800b4e8 <_vfiprintf_r+0x254>)
 800b434:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b438:	f7ff f874 	bl	800a524 <memchr>
 800b43c:	2800      	cmp	r0, #0
 800b43e:	d03f      	beq.n	800b4c0 <_vfiprintf_r+0x22c>
 800b440:	4b2a      	ldr	r3, [pc, #168]	; (800b4ec <_vfiprintf_r+0x258>)
 800b442:	bb1b      	cbnz	r3, 800b48c <_vfiprintf_r+0x1f8>
 800b444:	9b03      	ldr	r3, [sp, #12]
 800b446:	3307      	adds	r3, #7
 800b448:	f023 0307 	bic.w	r3, r3, #7
 800b44c:	3308      	adds	r3, #8
 800b44e:	9303      	str	r3, [sp, #12]
 800b450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b452:	443b      	add	r3, r7
 800b454:	9309      	str	r3, [sp, #36]	; 0x24
 800b456:	e767      	b.n	800b328 <_vfiprintf_r+0x94>
 800b458:	460c      	mov	r4, r1
 800b45a:	2001      	movs	r0, #1
 800b45c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b460:	e7a5      	b.n	800b3ae <_vfiprintf_r+0x11a>
 800b462:	2300      	movs	r3, #0
 800b464:	f04f 0c0a 	mov.w	ip, #10
 800b468:	4619      	mov	r1, r3
 800b46a:	3401      	adds	r4, #1
 800b46c:	9305      	str	r3, [sp, #20]
 800b46e:	4620      	mov	r0, r4
 800b470:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b474:	3a30      	subs	r2, #48	; 0x30
 800b476:	2a09      	cmp	r2, #9
 800b478:	d903      	bls.n	800b482 <_vfiprintf_r+0x1ee>
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d0c5      	beq.n	800b40a <_vfiprintf_r+0x176>
 800b47e:	9105      	str	r1, [sp, #20]
 800b480:	e7c3      	b.n	800b40a <_vfiprintf_r+0x176>
 800b482:	4604      	mov	r4, r0
 800b484:	2301      	movs	r3, #1
 800b486:	fb0c 2101 	mla	r1, ip, r1, r2
 800b48a:	e7f0      	b.n	800b46e <_vfiprintf_r+0x1da>
 800b48c:	ab03      	add	r3, sp, #12
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	462a      	mov	r2, r5
 800b492:	4630      	mov	r0, r6
 800b494:	4b16      	ldr	r3, [pc, #88]	; (800b4f0 <_vfiprintf_r+0x25c>)
 800b496:	a904      	add	r1, sp, #16
 800b498:	f7fd fddc 	bl	8009054 <_printf_float>
 800b49c:	4607      	mov	r7, r0
 800b49e:	1c78      	adds	r0, r7, #1
 800b4a0:	d1d6      	bne.n	800b450 <_vfiprintf_r+0x1bc>
 800b4a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4a4:	07d9      	lsls	r1, r3, #31
 800b4a6:	d405      	bmi.n	800b4b4 <_vfiprintf_r+0x220>
 800b4a8:	89ab      	ldrh	r3, [r5, #12]
 800b4aa:	059a      	lsls	r2, r3, #22
 800b4ac:	d402      	bmi.n	800b4b4 <_vfiprintf_r+0x220>
 800b4ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4b0:	f000 faab 	bl	800ba0a <__retarget_lock_release_recursive>
 800b4b4:	89ab      	ldrh	r3, [r5, #12]
 800b4b6:	065b      	lsls	r3, r3, #25
 800b4b8:	f53f af12 	bmi.w	800b2e0 <_vfiprintf_r+0x4c>
 800b4bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4be:	e711      	b.n	800b2e4 <_vfiprintf_r+0x50>
 800b4c0:	ab03      	add	r3, sp, #12
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	462a      	mov	r2, r5
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	4b09      	ldr	r3, [pc, #36]	; (800b4f0 <_vfiprintf_r+0x25c>)
 800b4ca:	a904      	add	r1, sp, #16
 800b4cc:	f7fe f85e 	bl	800958c <_printf_i>
 800b4d0:	e7e4      	b.n	800b49c <_vfiprintf_r+0x208>
 800b4d2:	bf00      	nop
 800b4d4:	0800c2d4 	.word	0x0800c2d4
 800b4d8:	0800c2f4 	.word	0x0800c2f4
 800b4dc:	0800c2b4 	.word	0x0800c2b4
 800b4e0:	0800c15c 	.word	0x0800c15c
 800b4e4:	0800c162 	.word	0x0800c162
 800b4e8:	0800c166 	.word	0x0800c166
 800b4ec:	08009055 	.word	0x08009055
 800b4f0:	0800b271 	.word	0x0800b271

0800b4f4 <__swbuf_r>:
 800b4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f6:	460e      	mov	r6, r1
 800b4f8:	4614      	mov	r4, r2
 800b4fa:	4605      	mov	r5, r0
 800b4fc:	b118      	cbz	r0, 800b506 <__swbuf_r+0x12>
 800b4fe:	6983      	ldr	r3, [r0, #24]
 800b500:	b90b      	cbnz	r3, 800b506 <__swbuf_r+0x12>
 800b502:	f000 f9e3 	bl	800b8cc <__sinit>
 800b506:	4b21      	ldr	r3, [pc, #132]	; (800b58c <__swbuf_r+0x98>)
 800b508:	429c      	cmp	r4, r3
 800b50a:	d12b      	bne.n	800b564 <__swbuf_r+0x70>
 800b50c:	686c      	ldr	r4, [r5, #4]
 800b50e:	69a3      	ldr	r3, [r4, #24]
 800b510:	60a3      	str	r3, [r4, #8]
 800b512:	89a3      	ldrh	r3, [r4, #12]
 800b514:	071a      	lsls	r2, r3, #28
 800b516:	d52f      	bpl.n	800b578 <__swbuf_r+0x84>
 800b518:	6923      	ldr	r3, [r4, #16]
 800b51a:	b36b      	cbz	r3, 800b578 <__swbuf_r+0x84>
 800b51c:	6923      	ldr	r3, [r4, #16]
 800b51e:	6820      	ldr	r0, [r4, #0]
 800b520:	b2f6      	uxtb	r6, r6
 800b522:	1ac0      	subs	r0, r0, r3
 800b524:	6963      	ldr	r3, [r4, #20]
 800b526:	4637      	mov	r7, r6
 800b528:	4283      	cmp	r3, r0
 800b52a:	dc04      	bgt.n	800b536 <__swbuf_r+0x42>
 800b52c:	4621      	mov	r1, r4
 800b52e:	4628      	mov	r0, r5
 800b530:	f000 f938 	bl	800b7a4 <_fflush_r>
 800b534:	bb30      	cbnz	r0, 800b584 <__swbuf_r+0x90>
 800b536:	68a3      	ldr	r3, [r4, #8]
 800b538:	3001      	adds	r0, #1
 800b53a:	3b01      	subs	r3, #1
 800b53c:	60a3      	str	r3, [r4, #8]
 800b53e:	6823      	ldr	r3, [r4, #0]
 800b540:	1c5a      	adds	r2, r3, #1
 800b542:	6022      	str	r2, [r4, #0]
 800b544:	701e      	strb	r6, [r3, #0]
 800b546:	6963      	ldr	r3, [r4, #20]
 800b548:	4283      	cmp	r3, r0
 800b54a:	d004      	beq.n	800b556 <__swbuf_r+0x62>
 800b54c:	89a3      	ldrh	r3, [r4, #12]
 800b54e:	07db      	lsls	r3, r3, #31
 800b550:	d506      	bpl.n	800b560 <__swbuf_r+0x6c>
 800b552:	2e0a      	cmp	r6, #10
 800b554:	d104      	bne.n	800b560 <__swbuf_r+0x6c>
 800b556:	4621      	mov	r1, r4
 800b558:	4628      	mov	r0, r5
 800b55a:	f000 f923 	bl	800b7a4 <_fflush_r>
 800b55e:	b988      	cbnz	r0, 800b584 <__swbuf_r+0x90>
 800b560:	4638      	mov	r0, r7
 800b562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b564:	4b0a      	ldr	r3, [pc, #40]	; (800b590 <__swbuf_r+0x9c>)
 800b566:	429c      	cmp	r4, r3
 800b568:	d101      	bne.n	800b56e <__swbuf_r+0x7a>
 800b56a:	68ac      	ldr	r4, [r5, #8]
 800b56c:	e7cf      	b.n	800b50e <__swbuf_r+0x1a>
 800b56e:	4b09      	ldr	r3, [pc, #36]	; (800b594 <__swbuf_r+0xa0>)
 800b570:	429c      	cmp	r4, r3
 800b572:	bf08      	it	eq
 800b574:	68ec      	ldreq	r4, [r5, #12]
 800b576:	e7ca      	b.n	800b50e <__swbuf_r+0x1a>
 800b578:	4621      	mov	r1, r4
 800b57a:	4628      	mov	r0, r5
 800b57c:	f000 f81a 	bl	800b5b4 <__swsetup_r>
 800b580:	2800      	cmp	r0, #0
 800b582:	d0cb      	beq.n	800b51c <__swbuf_r+0x28>
 800b584:	f04f 37ff 	mov.w	r7, #4294967295
 800b588:	e7ea      	b.n	800b560 <__swbuf_r+0x6c>
 800b58a:	bf00      	nop
 800b58c:	0800c2d4 	.word	0x0800c2d4
 800b590:	0800c2f4 	.word	0x0800c2f4
 800b594:	0800c2b4 	.word	0x0800c2b4

0800b598 <__ascii_wctomb>:
 800b598:	4603      	mov	r3, r0
 800b59a:	4608      	mov	r0, r1
 800b59c:	b141      	cbz	r1, 800b5b0 <__ascii_wctomb+0x18>
 800b59e:	2aff      	cmp	r2, #255	; 0xff
 800b5a0:	d904      	bls.n	800b5ac <__ascii_wctomb+0x14>
 800b5a2:	228a      	movs	r2, #138	; 0x8a
 800b5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a8:	601a      	str	r2, [r3, #0]
 800b5aa:	4770      	bx	lr
 800b5ac:	2001      	movs	r0, #1
 800b5ae:	700a      	strb	r2, [r1, #0]
 800b5b0:	4770      	bx	lr
	...

0800b5b4 <__swsetup_r>:
 800b5b4:	4b32      	ldr	r3, [pc, #200]	; (800b680 <__swsetup_r+0xcc>)
 800b5b6:	b570      	push	{r4, r5, r6, lr}
 800b5b8:	681d      	ldr	r5, [r3, #0]
 800b5ba:	4606      	mov	r6, r0
 800b5bc:	460c      	mov	r4, r1
 800b5be:	b125      	cbz	r5, 800b5ca <__swsetup_r+0x16>
 800b5c0:	69ab      	ldr	r3, [r5, #24]
 800b5c2:	b913      	cbnz	r3, 800b5ca <__swsetup_r+0x16>
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	f000 f981 	bl	800b8cc <__sinit>
 800b5ca:	4b2e      	ldr	r3, [pc, #184]	; (800b684 <__swsetup_r+0xd0>)
 800b5cc:	429c      	cmp	r4, r3
 800b5ce:	d10f      	bne.n	800b5f0 <__swsetup_r+0x3c>
 800b5d0:	686c      	ldr	r4, [r5, #4]
 800b5d2:	89a3      	ldrh	r3, [r4, #12]
 800b5d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5d8:	0719      	lsls	r1, r3, #28
 800b5da:	d42c      	bmi.n	800b636 <__swsetup_r+0x82>
 800b5dc:	06dd      	lsls	r5, r3, #27
 800b5de:	d411      	bmi.n	800b604 <__swsetup_r+0x50>
 800b5e0:	2309      	movs	r3, #9
 800b5e2:	6033      	str	r3, [r6, #0]
 800b5e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ec:	81a3      	strh	r3, [r4, #12]
 800b5ee:	e03e      	b.n	800b66e <__swsetup_r+0xba>
 800b5f0:	4b25      	ldr	r3, [pc, #148]	; (800b688 <__swsetup_r+0xd4>)
 800b5f2:	429c      	cmp	r4, r3
 800b5f4:	d101      	bne.n	800b5fa <__swsetup_r+0x46>
 800b5f6:	68ac      	ldr	r4, [r5, #8]
 800b5f8:	e7eb      	b.n	800b5d2 <__swsetup_r+0x1e>
 800b5fa:	4b24      	ldr	r3, [pc, #144]	; (800b68c <__swsetup_r+0xd8>)
 800b5fc:	429c      	cmp	r4, r3
 800b5fe:	bf08      	it	eq
 800b600:	68ec      	ldreq	r4, [r5, #12]
 800b602:	e7e6      	b.n	800b5d2 <__swsetup_r+0x1e>
 800b604:	0758      	lsls	r0, r3, #29
 800b606:	d512      	bpl.n	800b62e <__swsetup_r+0x7a>
 800b608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b60a:	b141      	cbz	r1, 800b61e <__swsetup_r+0x6a>
 800b60c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b610:	4299      	cmp	r1, r3
 800b612:	d002      	beq.n	800b61a <__swsetup_r+0x66>
 800b614:	4630      	mov	r0, r6
 800b616:	f7ff fb37 	bl	800ac88 <_free_r>
 800b61a:	2300      	movs	r3, #0
 800b61c:	6363      	str	r3, [r4, #52]	; 0x34
 800b61e:	89a3      	ldrh	r3, [r4, #12]
 800b620:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b624:	81a3      	strh	r3, [r4, #12]
 800b626:	2300      	movs	r3, #0
 800b628:	6063      	str	r3, [r4, #4]
 800b62a:	6923      	ldr	r3, [r4, #16]
 800b62c:	6023      	str	r3, [r4, #0]
 800b62e:	89a3      	ldrh	r3, [r4, #12]
 800b630:	f043 0308 	orr.w	r3, r3, #8
 800b634:	81a3      	strh	r3, [r4, #12]
 800b636:	6923      	ldr	r3, [r4, #16]
 800b638:	b94b      	cbnz	r3, 800b64e <__swsetup_r+0x9a>
 800b63a:	89a3      	ldrh	r3, [r4, #12]
 800b63c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b644:	d003      	beq.n	800b64e <__swsetup_r+0x9a>
 800b646:	4621      	mov	r1, r4
 800b648:	4630      	mov	r0, r6
 800b64a:	f000 fa05 	bl	800ba58 <__smakebuf_r>
 800b64e:	89a0      	ldrh	r0, [r4, #12]
 800b650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b654:	f010 0301 	ands.w	r3, r0, #1
 800b658:	d00a      	beq.n	800b670 <__swsetup_r+0xbc>
 800b65a:	2300      	movs	r3, #0
 800b65c:	60a3      	str	r3, [r4, #8]
 800b65e:	6963      	ldr	r3, [r4, #20]
 800b660:	425b      	negs	r3, r3
 800b662:	61a3      	str	r3, [r4, #24]
 800b664:	6923      	ldr	r3, [r4, #16]
 800b666:	b943      	cbnz	r3, 800b67a <__swsetup_r+0xc6>
 800b668:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b66c:	d1ba      	bne.n	800b5e4 <__swsetup_r+0x30>
 800b66e:	bd70      	pop	{r4, r5, r6, pc}
 800b670:	0781      	lsls	r1, r0, #30
 800b672:	bf58      	it	pl
 800b674:	6963      	ldrpl	r3, [r4, #20]
 800b676:	60a3      	str	r3, [r4, #8]
 800b678:	e7f4      	b.n	800b664 <__swsetup_r+0xb0>
 800b67a:	2000      	movs	r0, #0
 800b67c:	e7f7      	b.n	800b66e <__swsetup_r+0xba>
 800b67e:	bf00      	nop
 800b680:	20000028 	.word	0x20000028
 800b684:	0800c2d4 	.word	0x0800c2d4
 800b688:	0800c2f4 	.word	0x0800c2f4
 800b68c:	0800c2b4 	.word	0x0800c2b4

0800b690 <abort>:
 800b690:	2006      	movs	r0, #6
 800b692:	b508      	push	{r3, lr}
 800b694:	f000 fa50 	bl	800bb38 <raise>
 800b698:	2001      	movs	r0, #1
 800b69a:	f7f6 fc90 	bl	8001fbe <_exit>
	...

0800b6a0 <__sflush_r>:
 800b6a0:	898a      	ldrh	r2, [r1, #12]
 800b6a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6a4:	4605      	mov	r5, r0
 800b6a6:	0710      	lsls	r0, r2, #28
 800b6a8:	460c      	mov	r4, r1
 800b6aa:	d457      	bmi.n	800b75c <__sflush_r+0xbc>
 800b6ac:	684b      	ldr	r3, [r1, #4]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	dc04      	bgt.n	800b6bc <__sflush_r+0x1c>
 800b6b2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	dc01      	bgt.n	800b6bc <__sflush_r+0x1c>
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6be:	2e00      	cmp	r6, #0
 800b6c0:	d0fa      	beq.n	800b6b8 <__sflush_r+0x18>
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b6c8:	682f      	ldr	r7, [r5, #0]
 800b6ca:	602b      	str	r3, [r5, #0]
 800b6cc:	d032      	beq.n	800b734 <__sflush_r+0x94>
 800b6ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b6d0:	89a3      	ldrh	r3, [r4, #12]
 800b6d2:	075a      	lsls	r2, r3, #29
 800b6d4:	d505      	bpl.n	800b6e2 <__sflush_r+0x42>
 800b6d6:	6863      	ldr	r3, [r4, #4]
 800b6d8:	1ac0      	subs	r0, r0, r3
 800b6da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6dc:	b10b      	cbz	r3, 800b6e2 <__sflush_r+0x42>
 800b6de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6e0:	1ac0      	subs	r0, r0, r3
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6e8:	4628      	mov	r0, r5
 800b6ea:	6a21      	ldr	r1, [r4, #32]
 800b6ec:	47b0      	blx	r6
 800b6ee:	1c43      	adds	r3, r0, #1
 800b6f0:	89a3      	ldrh	r3, [r4, #12]
 800b6f2:	d106      	bne.n	800b702 <__sflush_r+0x62>
 800b6f4:	6829      	ldr	r1, [r5, #0]
 800b6f6:	291d      	cmp	r1, #29
 800b6f8:	d82c      	bhi.n	800b754 <__sflush_r+0xb4>
 800b6fa:	4a29      	ldr	r2, [pc, #164]	; (800b7a0 <__sflush_r+0x100>)
 800b6fc:	40ca      	lsrs	r2, r1
 800b6fe:	07d6      	lsls	r6, r2, #31
 800b700:	d528      	bpl.n	800b754 <__sflush_r+0xb4>
 800b702:	2200      	movs	r2, #0
 800b704:	6062      	str	r2, [r4, #4]
 800b706:	6922      	ldr	r2, [r4, #16]
 800b708:	04d9      	lsls	r1, r3, #19
 800b70a:	6022      	str	r2, [r4, #0]
 800b70c:	d504      	bpl.n	800b718 <__sflush_r+0x78>
 800b70e:	1c42      	adds	r2, r0, #1
 800b710:	d101      	bne.n	800b716 <__sflush_r+0x76>
 800b712:	682b      	ldr	r3, [r5, #0]
 800b714:	b903      	cbnz	r3, 800b718 <__sflush_r+0x78>
 800b716:	6560      	str	r0, [r4, #84]	; 0x54
 800b718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b71a:	602f      	str	r7, [r5, #0]
 800b71c:	2900      	cmp	r1, #0
 800b71e:	d0cb      	beq.n	800b6b8 <__sflush_r+0x18>
 800b720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b724:	4299      	cmp	r1, r3
 800b726:	d002      	beq.n	800b72e <__sflush_r+0x8e>
 800b728:	4628      	mov	r0, r5
 800b72a:	f7ff faad 	bl	800ac88 <_free_r>
 800b72e:	2000      	movs	r0, #0
 800b730:	6360      	str	r0, [r4, #52]	; 0x34
 800b732:	e7c2      	b.n	800b6ba <__sflush_r+0x1a>
 800b734:	6a21      	ldr	r1, [r4, #32]
 800b736:	2301      	movs	r3, #1
 800b738:	4628      	mov	r0, r5
 800b73a:	47b0      	blx	r6
 800b73c:	1c41      	adds	r1, r0, #1
 800b73e:	d1c7      	bne.n	800b6d0 <__sflush_r+0x30>
 800b740:	682b      	ldr	r3, [r5, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d0c4      	beq.n	800b6d0 <__sflush_r+0x30>
 800b746:	2b1d      	cmp	r3, #29
 800b748:	d001      	beq.n	800b74e <__sflush_r+0xae>
 800b74a:	2b16      	cmp	r3, #22
 800b74c:	d101      	bne.n	800b752 <__sflush_r+0xb2>
 800b74e:	602f      	str	r7, [r5, #0]
 800b750:	e7b2      	b.n	800b6b8 <__sflush_r+0x18>
 800b752:	89a3      	ldrh	r3, [r4, #12]
 800b754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b758:	81a3      	strh	r3, [r4, #12]
 800b75a:	e7ae      	b.n	800b6ba <__sflush_r+0x1a>
 800b75c:	690f      	ldr	r7, [r1, #16]
 800b75e:	2f00      	cmp	r7, #0
 800b760:	d0aa      	beq.n	800b6b8 <__sflush_r+0x18>
 800b762:	0793      	lsls	r3, r2, #30
 800b764:	bf18      	it	ne
 800b766:	2300      	movne	r3, #0
 800b768:	680e      	ldr	r6, [r1, #0]
 800b76a:	bf08      	it	eq
 800b76c:	694b      	ldreq	r3, [r1, #20]
 800b76e:	1bf6      	subs	r6, r6, r7
 800b770:	600f      	str	r7, [r1, #0]
 800b772:	608b      	str	r3, [r1, #8]
 800b774:	2e00      	cmp	r6, #0
 800b776:	dd9f      	ble.n	800b6b8 <__sflush_r+0x18>
 800b778:	4633      	mov	r3, r6
 800b77a:	463a      	mov	r2, r7
 800b77c:	4628      	mov	r0, r5
 800b77e:	6a21      	ldr	r1, [r4, #32]
 800b780:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b784:	47e0      	blx	ip
 800b786:	2800      	cmp	r0, #0
 800b788:	dc06      	bgt.n	800b798 <__sflush_r+0xf8>
 800b78a:	89a3      	ldrh	r3, [r4, #12]
 800b78c:	f04f 30ff 	mov.w	r0, #4294967295
 800b790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b794:	81a3      	strh	r3, [r4, #12]
 800b796:	e790      	b.n	800b6ba <__sflush_r+0x1a>
 800b798:	4407      	add	r7, r0
 800b79a:	1a36      	subs	r6, r6, r0
 800b79c:	e7ea      	b.n	800b774 <__sflush_r+0xd4>
 800b79e:	bf00      	nop
 800b7a0:	20400001 	.word	0x20400001

0800b7a4 <_fflush_r>:
 800b7a4:	b538      	push	{r3, r4, r5, lr}
 800b7a6:	690b      	ldr	r3, [r1, #16]
 800b7a8:	4605      	mov	r5, r0
 800b7aa:	460c      	mov	r4, r1
 800b7ac:	b913      	cbnz	r3, 800b7b4 <_fflush_r+0x10>
 800b7ae:	2500      	movs	r5, #0
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	bd38      	pop	{r3, r4, r5, pc}
 800b7b4:	b118      	cbz	r0, 800b7be <_fflush_r+0x1a>
 800b7b6:	6983      	ldr	r3, [r0, #24]
 800b7b8:	b90b      	cbnz	r3, 800b7be <_fflush_r+0x1a>
 800b7ba:	f000 f887 	bl	800b8cc <__sinit>
 800b7be:	4b14      	ldr	r3, [pc, #80]	; (800b810 <_fflush_r+0x6c>)
 800b7c0:	429c      	cmp	r4, r3
 800b7c2:	d11b      	bne.n	800b7fc <_fflush_r+0x58>
 800b7c4:	686c      	ldr	r4, [r5, #4]
 800b7c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d0ef      	beq.n	800b7ae <_fflush_r+0xa>
 800b7ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b7d0:	07d0      	lsls	r0, r2, #31
 800b7d2:	d404      	bmi.n	800b7de <_fflush_r+0x3a>
 800b7d4:	0599      	lsls	r1, r3, #22
 800b7d6:	d402      	bmi.n	800b7de <_fflush_r+0x3a>
 800b7d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7da:	f000 f915 	bl	800ba08 <__retarget_lock_acquire_recursive>
 800b7de:	4628      	mov	r0, r5
 800b7e0:	4621      	mov	r1, r4
 800b7e2:	f7ff ff5d 	bl	800b6a0 <__sflush_r>
 800b7e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7e8:	4605      	mov	r5, r0
 800b7ea:	07da      	lsls	r2, r3, #31
 800b7ec:	d4e0      	bmi.n	800b7b0 <_fflush_r+0xc>
 800b7ee:	89a3      	ldrh	r3, [r4, #12]
 800b7f0:	059b      	lsls	r3, r3, #22
 800b7f2:	d4dd      	bmi.n	800b7b0 <_fflush_r+0xc>
 800b7f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7f6:	f000 f908 	bl	800ba0a <__retarget_lock_release_recursive>
 800b7fa:	e7d9      	b.n	800b7b0 <_fflush_r+0xc>
 800b7fc:	4b05      	ldr	r3, [pc, #20]	; (800b814 <_fflush_r+0x70>)
 800b7fe:	429c      	cmp	r4, r3
 800b800:	d101      	bne.n	800b806 <_fflush_r+0x62>
 800b802:	68ac      	ldr	r4, [r5, #8]
 800b804:	e7df      	b.n	800b7c6 <_fflush_r+0x22>
 800b806:	4b04      	ldr	r3, [pc, #16]	; (800b818 <_fflush_r+0x74>)
 800b808:	429c      	cmp	r4, r3
 800b80a:	bf08      	it	eq
 800b80c:	68ec      	ldreq	r4, [r5, #12]
 800b80e:	e7da      	b.n	800b7c6 <_fflush_r+0x22>
 800b810:	0800c2d4 	.word	0x0800c2d4
 800b814:	0800c2f4 	.word	0x0800c2f4
 800b818:	0800c2b4 	.word	0x0800c2b4

0800b81c <std>:
 800b81c:	2300      	movs	r3, #0
 800b81e:	b510      	push	{r4, lr}
 800b820:	4604      	mov	r4, r0
 800b822:	e9c0 3300 	strd	r3, r3, [r0]
 800b826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b82a:	6083      	str	r3, [r0, #8]
 800b82c:	8181      	strh	r1, [r0, #12]
 800b82e:	6643      	str	r3, [r0, #100]	; 0x64
 800b830:	81c2      	strh	r2, [r0, #14]
 800b832:	6183      	str	r3, [r0, #24]
 800b834:	4619      	mov	r1, r3
 800b836:	2208      	movs	r2, #8
 800b838:	305c      	adds	r0, #92	; 0x5c
 800b83a:	f7fd fb65 	bl	8008f08 <memset>
 800b83e:	4b05      	ldr	r3, [pc, #20]	; (800b854 <std+0x38>)
 800b840:	6224      	str	r4, [r4, #32]
 800b842:	6263      	str	r3, [r4, #36]	; 0x24
 800b844:	4b04      	ldr	r3, [pc, #16]	; (800b858 <std+0x3c>)
 800b846:	62a3      	str	r3, [r4, #40]	; 0x28
 800b848:	4b04      	ldr	r3, [pc, #16]	; (800b85c <std+0x40>)
 800b84a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b84c:	4b04      	ldr	r3, [pc, #16]	; (800b860 <std+0x44>)
 800b84e:	6323      	str	r3, [r4, #48]	; 0x30
 800b850:	bd10      	pop	{r4, pc}
 800b852:	bf00      	nop
 800b854:	0800bb71 	.word	0x0800bb71
 800b858:	0800bb93 	.word	0x0800bb93
 800b85c:	0800bbcb 	.word	0x0800bbcb
 800b860:	0800bbef 	.word	0x0800bbef

0800b864 <_cleanup_r>:
 800b864:	4901      	ldr	r1, [pc, #4]	; (800b86c <_cleanup_r+0x8>)
 800b866:	f000 b8af 	b.w	800b9c8 <_fwalk_reent>
 800b86a:	bf00      	nop
 800b86c:	0800b7a5 	.word	0x0800b7a5

0800b870 <__sfmoreglue>:
 800b870:	2268      	movs	r2, #104	; 0x68
 800b872:	b570      	push	{r4, r5, r6, lr}
 800b874:	1e4d      	subs	r5, r1, #1
 800b876:	4355      	muls	r5, r2
 800b878:	460e      	mov	r6, r1
 800b87a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b87e:	f7ff fa6b 	bl	800ad58 <_malloc_r>
 800b882:	4604      	mov	r4, r0
 800b884:	b140      	cbz	r0, 800b898 <__sfmoreglue+0x28>
 800b886:	2100      	movs	r1, #0
 800b888:	e9c0 1600 	strd	r1, r6, [r0]
 800b88c:	300c      	adds	r0, #12
 800b88e:	60a0      	str	r0, [r4, #8]
 800b890:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b894:	f7fd fb38 	bl	8008f08 <memset>
 800b898:	4620      	mov	r0, r4
 800b89a:	bd70      	pop	{r4, r5, r6, pc}

0800b89c <__sfp_lock_acquire>:
 800b89c:	4801      	ldr	r0, [pc, #4]	; (800b8a4 <__sfp_lock_acquire+0x8>)
 800b89e:	f000 b8b3 	b.w	800ba08 <__retarget_lock_acquire_recursive>
 800b8a2:	bf00      	nop
 800b8a4:	20000579 	.word	0x20000579

0800b8a8 <__sfp_lock_release>:
 800b8a8:	4801      	ldr	r0, [pc, #4]	; (800b8b0 <__sfp_lock_release+0x8>)
 800b8aa:	f000 b8ae 	b.w	800ba0a <__retarget_lock_release_recursive>
 800b8ae:	bf00      	nop
 800b8b0:	20000579 	.word	0x20000579

0800b8b4 <__sinit_lock_acquire>:
 800b8b4:	4801      	ldr	r0, [pc, #4]	; (800b8bc <__sinit_lock_acquire+0x8>)
 800b8b6:	f000 b8a7 	b.w	800ba08 <__retarget_lock_acquire_recursive>
 800b8ba:	bf00      	nop
 800b8bc:	2000057a 	.word	0x2000057a

0800b8c0 <__sinit_lock_release>:
 800b8c0:	4801      	ldr	r0, [pc, #4]	; (800b8c8 <__sinit_lock_release+0x8>)
 800b8c2:	f000 b8a2 	b.w	800ba0a <__retarget_lock_release_recursive>
 800b8c6:	bf00      	nop
 800b8c8:	2000057a 	.word	0x2000057a

0800b8cc <__sinit>:
 800b8cc:	b510      	push	{r4, lr}
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	f7ff fff0 	bl	800b8b4 <__sinit_lock_acquire>
 800b8d4:	69a3      	ldr	r3, [r4, #24]
 800b8d6:	b11b      	cbz	r3, 800b8e0 <__sinit+0x14>
 800b8d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8dc:	f7ff bff0 	b.w	800b8c0 <__sinit_lock_release>
 800b8e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b8e4:	6523      	str	r3, [r4, #80]	; 0x50
 800b8e6:	4b13      	ldr	r3, [pc, #76]	; (800b934 <__sinit+0x68>)
 800b8e8:	4a13      	ldr	r2, [pc, #76]	; (800b938 <__sinit+0x6c>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800b8ee:	42a3      	cmp	r3, r4
 800b8f0:	bf08      	it	eq
 800b8f2:	2301      	moveq	r3, #1
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	bf08      	it	eq
 800b8f8:	61a3      	streq	r3, [r4, #24]
 800b8fa:	f000 f81f 	bl	800b93c <__sfp>
 800b8fe:	6060      	str	r0, [r4, #4]
 800b900:	4620      	mov	r0, r4
 800b902:	f000 f81b 	bl	800b93c <__sfp>
 800b906:	60a0      	str	r0, [r4, #8]
 800b908:	4620      	mov	r0, r4
 800b90a:	f000 f817 	bl	800b93c <__sfp>
 800b90e:	2200      	movs	r2, #0
 800b910:	2104      	movs	r1, #4
 800b912:	60e0      	str	r0, [r4, #12]
 800b914:	6860      	ldr	r0, [r4, #4]
 800b916:	f7ff ff81 	bl	800b81c <std>
 800b91a:	2201      	movs	r2, #1
 800b91c:	2109      	movs	r1, #9
 800b91e:	68a0      	ldr	r0, [r4, #8]
 800b920:	f7ff ff7c 	bl	800b81c <std>
 800b924:	2202      	movs	r2, #2
 800b926:	2112      	movs	r1, #18
 800b928:	68e0      	ldr	r0, [r4, #12]
 800b92a:	f7ff ff77 	bl	800b81c <std>
 800b92e:	2301      	movs	r3, #1
 800b930:	61a3      	str	r3, [r4, #24]
 800b932:	e7d1      	b.n	800b8d8 <__sinit+0xc>
 800b934:	0800bf38 	.word	0x0800bf38
 800b938:	0800b865 	.word	0x0800b865

0800b93c <__sfp>:
 800b93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93e:	4607      	mov	r7, r0
 800b940:	f7ff ffac 	bl	800b89c <__sfp_lock_acquire>
 800b944:	4b1e      	ldr	r3, [pc, #120]	; (800b9c0 <__sfp+0x84>)
 800b946:	681e      	ldr	r6, [r3, #0]
 800b948:	69b3      	ldr	r3, [r6, #24]
 800b94a:	b913      	cbnz	r3, 800b952 <__sfp+0x16>
 800b94c:	4630      	mov	r0, r6
 800b94e:	f7ff ffbd 	bl	800b8cc <__sinit>
 800b952:	3648      	adds	r6, #72	; 0x48
 800b954:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b958:	3b01      	subs	r3, #1
 800b95a:	d503      	bpl.n	800b964 <__sfp+0x28>
 800b95c:	6833      	ldr	r3, [r6, #0]
 800b95e:	b30b      	cbz	r3, 800b9a4 <__sfp+0x68>
 800b960:	6836      	ldr	r6, [r6, #0]
 800b962:	e7f7      	b.n	800b954 <__sfp+0x18>
 800b964:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b968:	b9d5      	cbnz	r5, 800b9a0 <__sfp+0x64>
 800b96a:	4b16      	ldr	r3, [pc, #88]	; (800b9c4 <__sfp+0x88>)
 800b96c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b970:	60e3      	str	r3, [r4, #12]
 800b972:	6665      	str	r5, [r4, #100]	; 0x64
 800b974:	f000 f847 	bl	800ba06 <__retarget_lock_init_recursive>
 800b978:	f7ff ff96 	bl	800b8a8 <__sfp_lock_release>
 800b97c:	2208      	movs	r2, #8
 800b97e:	4629      	mov	r1, r5
 800b980:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b984:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b988:	6025      	str	r5, [r4, #0]
 800b98a:	61a5      	str	r5, [r4, #24]
 800b98c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b990:	f7fd faba 	bl	8008f08 <memset>
 800b994:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b998:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b99c:	4620      	mov	r0, r4
 800b99e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9a0:	3468      	adds	r4, #104	; 0x68
 800b9a2:	e7d9      	b.n	800b958 <__sfp+0x1c>
 800b9a4:	2104      	movs	r1, #4
 800b9a6:	4638      	mov	r0, r7
 800b9a8:	f7ff ff62 	bl	800b870 <__sfmoreglue>
 800b9ac:	4604      	mov	r4, r0
 800b9ae:	6030      	str	r0, [r6, #0]
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	d1d5      	bne.n	800b960 <__sfp+0x24>
 800b9b4:	f7ff ff78 	bl	800b8a8 <__sfp_lock_release>
 800b9b8:	230c      	movs	r3, #12
 800b9ba:	603b      	str	r3, [r7, #0]
 800b9bc:	e7ee      	b.n	800b99c <__sfp+0x60>
 800b9be:	bf00      	nop
 800b9c0:	0800bf38 	.word	0x0800bf38
 800b9c4:	ffff0001 	.word	0xffff0001

0800b9c8 <_fwalk_reent>:
 800b9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9cc:	4606      	mov	r6, r0
 800b9ce:	4688      	mov	r8, r1
 800b9d0:	2700      	movs	r7, #0
 800b9d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b9d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9da:	f1b9 0901 	subs.w	r9, r9, #1
 800b9de:	d505      	bpl.n	800b9ec <_fwalk_reent+0x24>
 800b9e0:	6824      	ldr	r4, [r4, #0]
 800b9e2:	2c00      	cmp	r4, #0
 800b9e4:	d1f7      	bne.n	800b9d6 <_fwalk_reent+0xe>
 800b9e6:	4638      	mov	r0, r7
 800b9e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9ec:	89ab      	ldrh	r3, [r5, #12]
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d907      	bls.n	800ba02 <_fwalk_reent+0x3a>
 800b9f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	d003      	beq.n	800ba02 <_fwalk_reent+0x3a>
 800b9fa:	4629      	mov	r1, r5
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	47c0      	blx	r8
 800ba00:	4307      	orrs	r7, r0
 800ba02:	3568      	adds	r5, #104	; 0x68
 800ba04:	e7e9      	b.n	800b9da <_fwalk_reent+0x12>

0800ba06 <__retarget_lock_init_recursive>:
 800ba06:	4770      	bx	lr

0800ba08 <__retarget_lock_acquire_recursive>:
 800ba08:	4770      	bx	lr

0800ba0a <__retarget_lock_release_recursive>:
 800ba0a:	4770      	bx	lr

0800ba0c <__swhatbuf_r>:
 800ba0c:	b570      	push	{r4, r5, r6, lr}
 800ba0e:	460e      	mov	r6, r1
 800ba10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba14:	4614      	mov	r4, r2
 800ba16:	2900      	cmp	r1, #0
 800ba18:	461d      	mov	r5, r3
 800ba1a:	b096      	sub	sp, #88	; 0x58
 800ba1c:	da08      	bge.n	800ba30 <__swhatbuf_r+0x24>
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ba24:	602a      	str	r2, [r5, #0]
 800ba26:	061a      	lsls	r2, r3, #24
 800ba28:	d410      	bmi.n	800ba4c <__swhatbuf_r+0x40>
 800ba2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba2e:	e00e      	b.n	800ba4e <__swhatbuf_r+0x42>
 800ba30:	466a      	mov	r2, sp
 800ba32:	f000 f903 	bl	800bc3c <_fstat_r>
 800ba36:	2800      	cmp	r0, #0
 800ba38:	dbf1      	blt.n	800ba1e <__swhatbuf_r+0x12>
 800ba3a:	9a01      	ldr	r2, [sp, #4]
 800ba3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba44:	425a      	negs	r2, r3
 800ba46:	415a      	adcs	r2, r3
 800ba48:	602a      	str	r2, [r5, #0]
 800ba4a:	e7ee      	b.n	800ba2a <__swhatbuf_r+0x1e>
 800ba4c:	2340      	movs	r3, #64	; 0x40
 800ba4e:	2000      	movs	r0, #0
 800ba50:	6023      	str	r3, [r4, #0]
 800ba52:	b016      	add	sp, #88	; 0x58
 800ba54:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba58 <__smakebuf_r>:
 800ba58:	898b      	ldrh	r3, [r1, #12]
 800ba5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba5c:	079d      	lsls	r5, r3, #30
 800ba5e:	4606      	mov	r6, r0
 800ba60:	460c      	mov	r4, r1
 800ba62:	d507      	bpl.n	800ba74 <__smakebuf_r+0x1c>
 800ba64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba68:	6023      	str	r3, [r4, #0]
 800ba6a:	6123      	str	r3, [r4, #16]
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	6163      	str	r3, [r4, #20]
 800ba70:	b002      	add	sp, #8
 800ba72:	bd70      	pop	{r4, r5, r6, pc}
 800ba74:	466a      	mov	r2, sp
 800ba76:	ab01      	add	r3, sp, #4
 800ba78:	f7ff ffc8 	bl	800ba0c <__swhatbuf_r>
 800ba7c:	9900      	ldr	r1, [sp, #0]
 800ba7e:	4605      	mov	r5, r0
 800ba80:	4630      	mov	r0, r6
 800ba82:	f7ff f969 	bl	800ad58 <_malloc_r>
 800ba86:	b948      	cbnz	r0, 800ba9c <__smakebuf_r+0x44>
 800ba88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba8c:	059a      	lsls	r2, r3, #22
 800ba8e:	d4ef      	bmi.n	800ba70 <__smakebuf_r+0x18>
 800ba90:	f023 0303 	bic.w	r3, r3, #3
 800ba94:	f043 0302 	orr.w	r3, r3, #2
 800ba98:	81a3      	strh	r3, [r4, #12]
 800ba9a:	e7e3      	b.n	800ba64 <__smakebuf_r+0xc>
 800ba9c:	4b0d      	ldr	r3, [pc, #52]	; (800bad4 <__smakebuf_r+0x7c>)
 800ba9e:	62b3      	str	r3, [r6, #40]	; 0x28
 800baa0:	89a3      	ldrh	r3, [r4, #12]
 800baa2:	6020      	str	r0, [r4, #0]
 800baa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baa8:	81a3      	strh	r3, [r4, #12]
 800baaa:	9b00      	ldr	r3, [sp, #0]
 800baac:	6120      	str	r0, [r4, #16]
 800baae:	6163      	str	r3, [r4, #20]
 800bab0:	9b01      	ldr	r3, [sp, #4]
 800bab2:	b15b      	cbz	r3, 800bacc <__smakebuf_r+0x74>
 800bab4:	4630      	mov	r0, r6
 800bab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baba:	f000 f8d1 	bl	800bc60 <_isatty_r>
 800babe:	b128      	cbz	r0, 800bacc <__smakebuf_r+0x74>
 800bac0:	89a3      	ldrh	r3, [r4, #12]
 800bac2:	f023 0303 	bic.w	r3, r3, #3
 800bac6:	f043 0301 	orr.w	r3, r3, #1
 800baca:	81a3      	strh	r3, [r4, #12]
 800bacc:	89a0      	ldrh	r0, [r4, #12]
 800bace:	4305      	orrs	r5, r0
 800bad0:	81a5      	strh	r5, [r4, #12]
 800bad2:	e7cd      	b.n	800ba70 <__smakebuf_r+0x18>
 800bad4:	0800b865 	.word	0x0800b865

0800bad8 <_malloc_usable_size_r>:
 800bad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800badc:	1f18      	subs	r0, r3, #4
 800bade:	2b00      	cmp	r3, #0
 800bae0:	bfbc      	itt	lt
 800bae2:	580b      	ldrlt	r3, [r1, r0]
 800bae4:	18c0      	addlt	r0, r0, r3
 800bae6:	4770      	bx	lr

0800bae8 <_raise_r>:
 800bae8:	291f      	cmp	r1, #31
 800baea:	b538      	push	{r3, r4, r5, lr}
 800baec:	4604      	mov	r4, r0
 800baee:	460d      	mov	r5, r1
 800baf0:	d904      	bls.n	800bafc <_raise_r+0x14>
 800baf2:	2316      	movs	r3, #22
 800baf4:	6003      	str	r3, [r0, #0]
 800baf6:	f04f 30ff 	mov.w	r0, #4294967295
 800bafa:	bd38      	pop	{r3, r4, r5, pc}
 800bafc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bafe:	b112      	cbz	r2, 800bb06 <_raise_r+0x1e>
 800bb00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb04:	b94b      	cbnz	r3, 800bb1a <_raise_r+0x32>
 800bb06:	4620      	mov	r0, r4
 800bb08:	f000 f830 	bl	800bb6c <_getpid_r>
 800bb0c:	462a      	mov	r2, r5
 800bb0e:	4601      	mov	r1, r0
 800bb10:	4620      	mov	r0, r4
 800bb12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb16:	f000 b817 	b.w	800bb48 <_kill_r>
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d00a      	beq.n	800bb34 <_raise_r+0x4c>
 800bb1e:	1c59      	adds	r1, r3, #1
 800bb20:	d103      	bne.n	800bb2a <_raise_r+0x42>
 800bb22:	2316      	movs	r3, #22
 800bb24:	6003      	str	r3, [r0, #0]
 800bb26:	2001      	movs	r0, #1
 800bb28:	e7e7      	b.n	800bafa <_raise_r+0x12>
 800bb2a:	2400      	movs	r4, #0
 800bb2c:	4628      	mov	r0, r5
 800bb2e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb32:	4798      	blx	r3
 800bb34:	2000      	movs	r0, #0
 800bb36:	e7e0      	b.n	800bafa <_raise_r+0x12>

0800bb38 <raise>:
 800bb38:	4b02      	ldr	r3, [pc, #8]	; (800bb44 <raise+0xc>)
 800bb3a:	4601      	mov	r1, r0
 800bb3c:	6818      	ldr	r0, [r3, #0]
 800bb3e:	f7ff bfd3 	b.w	800bae8 <_raise_r>
 800bb42:	bf00      	nop
 800bb44:	20000028 	.word	0x20000028

0800bb48 <_kill_r>:
 800bb48:	b538      	push	{r3, r4, r5, lr}
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	4d06      	ldr	r5, [pc, #24]	; (800bb68 <_kill_r+0x20>)
 800bb4e:	4604      	mov	r4, r0
 800bb50:	4608      	mov	r0, r1
 800bb52:	4611      	mov	r1, r2
 800bb54:	602b      	str	r3, [r5, #0]
 800bb56:	f7f6 fa22 	bl	8001f9e <_kill>
 800bb5a:	1c43      	adds	r3, r0, #1
 800bb5c:	d102      	bne.n	800bb64 <_kill_r+0x1c>
 800bb5e:	682b      	ldr	r3, [r5, #0]
 800bb60:	b103      	cbz	r3, 800bb64 <_kill_r+0x1c>
 800bb62:	6023      	str	r3, [r4, #0]
 800bb64:	bd38      	pop	{r3, r4, r5, pc}
 800bb66:	bf00      	nop
 800bb68:	20000574 	.word	0x20000574

0800bb6c <_getpid_r>:
 800bb6c:	f7f6 ba10 	b.w	8001f90 <_getpid>

0800bb70 <__sread>:
 800bb70:	b510      	push	{r4, lr}
 800bb72:	460c      	mov	r4, r1
 800bb74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb78:	f000 f894 	bl	800bca4 <_read_r>
 800bb7c:	2800      	cmp	r0, #0
 800bb7e:	bfab      	itete	ge
 800bb80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb82:	89a3      	ldrhlt	r3, [r4, #12]
 800bb84:	181b      	addge	r3, r3, r0
 800bb86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb8a:	bfac      	ite	ge
 800bb8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb8e:	81a3      	strhlt	r3, [r4, #12]
 800bb90:	bd10      	pop	{r4, pc}

0800bb92 <__swrite>:
 800bb92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb96:	461f      	mov	r7, r3
 800bb98:	898b      	ldrh	r3, [r1, #12]
 800bb9a:	4605      	mov	r5, r0
 800bb9c:	05db      	lsls	r3, r3, #23
 800bb9e:	460c      	mov	r4, r1
 800bba0:	4616      	mov	r6, r2
 800bba2:	d505      	bpl.n	800bbb0 <__swrite+0x1e>
 800bba4:	2302      	movs	r3, #2
 800bba6:	2200      	movs	r2, #0
 800bba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbac:	f000 f868 	bl	800bc80 <_lseek_r>
 800bbb0:	89a3      	ldrh	r3, [r4, #12]
 800bbb2:	4632      	mov	r2, r6
 800bbb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bbb8:	81a3      	strh	r3, [r4, #12]
 800bbba:	4628      	mov	r0, r5
 800bbbc:	463b      	mov	r3, r7
 800bbbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbc6:	f000 b817 	b.w	800bbf8 <_write_r>

0800bbca <__sseek>:
 800bbca:	b510      	push	{r4, lr}
 800bbcc:	460c      	mov	r4, r1
 800bbce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbd2:	f000 f855 	bl	800bc80 <_lseek_r>
 800bbd6:	1c43      	adds	r3, r0, #1
 800bbd8:	89a3      	ldrh	r3, [r4, #12]
 800bbda:	bf15      	itete	ne
 800bbdc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bbde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bbe2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bbe6:	81a3      	strheq	r3, [r4, #12]
 800bbe8:	bf18      	it	ne
 800bbea:	81a3      	strhne	r3, [r4, #12]
 800bbec:	bd10      	pop	{r4, pc}

0800bbee <__sclose>:
 800bbee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbf2:	f000 b813 	b.w	800bc1c <_close_r>
	...

0800bbf8 <_write_r>:
 800bbf8:	b538      	push	{r3, r4, r5, lr}
 800bbfa:	4604      	mov	r4, r0
 800bbfc:	4608      	mov	r0, r1
 800bbfe:	4611      	mov	r1, r2
 800bc00:	2200      	movs	r2, #0
 800bc02:	4d05      	ldr	r5, [pc, #20]	; (800bc18 <_write_r+0x20>)
 800bc04:	602a      	str	r2, [r5, #0]
 800bc06:	461a      	mov	r2, r3
 800bc08:	f7f6 fa00 	bl	800200c <_write>
 800bc0c:	1c43      	adds	r3, r0, #1
 800bc0e:	d102      	bne.n	800bc16 <_write_r+0x1e>
 800bc10:	682b      	ldr	r3, [r5, #0]
 800bc12:	b103      	cbz	r3, 800bc16 <_write_r+0x1e>
 800bc14:	6023      	str	r3, [r4, #0]
 800bc16:	bd38      	pop	{r3, r4, r5, pc}
 800bc18:	20000574 	.word	0x20000574

0800bc1c <_close_r>:
 800bc1c:	b538      	push	{r3, r4, r5, lr}
 800bc1e:	2300      	movs	r3, #0
 800bc20:	4d05      	ldr	r5, [pc, #20]	; (800bc38 <_close_r+0x1c>)
 800bc22:	4604      	mov	r4, r0
 800bc24:	4608      	mov	r0, r1
 800bc26:	602b      	str	r3, [r5, #0]
 800bc28:	f7f6 fa0c 	bl	8002044 <_close>
 800bc2c:	1c43      	adds	r3, r0, #1
 800bc2e:	d102      	bne.n	800bc36 <_close_r+0x1a>
 800bc30:	682b      	ldr	r3, [r5, #0]
 800bc32:	b103      	cbz	r3, 800bc36 <_close_r+0x1a>
 800bc34:	6023      	str	r3, [r4, #0]
 800bc36:	bd38      	pop	{r3, r4, r5, pc}
 800bc38:	20000574 	.word	0x20000574

0800bc3c <_fstat_r>:
 800bc3c:	b538      	push	{r3, r4, r5, lr}
 800bc3e:	2300      	movs	r3, #0
 800bc40:	4d06      	ldr	r5, [pc, #24]	; (800bc5c <_fstat_r+0x20>)
 800bc42:	4604      	mov	r4, r0
 800bc44:	4608      	mov	r0, r1
 800bc46:	4611      	mov	r1, r2
 800bc48:	602b      	str	r3, [r5, #0]
 800bc4a:	f7f6 fa06 	bl	800205a <_fstat>
 800bc4e:	1c43      	adds	r3, r0, #1
 800bc50:	d102      	bne.n	800bc58 <_fstat_r+0x1c>
 800bc52:	682b      	ldr	r3, [r5, #0]
 800bc54:	b103      	cbz	r3, 800bc58 <_fstat_r+0x1c>
 800bc56:	6023      	str	r3, [r4, #0]
 800bc58:	bd38      	pop	{r3, r4, r5, pc}
 800bc5a:	bf00      	nop
 800bc5c:	20000574 	.word	0x20000574

0800bc60 <_isatty_r>:
 800bc60:	b538      	push	{r3, r4, r5, lr}
 800bc62:	2300      	movs	r3, #0
 800bc64:	4d05      	ldr	r5, [pc, #20]	; (800bc7c <_isatty_r+0x1c>)
 800bc66:	4604      	mov	r4, r0
 800bc68:	4608      	mov	r0, r1
 800bc6a:	602b      	str	r3, [r5, #0]
 800bc6c:	f7f6 fa04 	bl	8002078 <_isatty>
 800bc70:	1c43      	adds	r3, r0, #1
 800bc72:	d102      	bne.n	800bc7a <_isatty_r+0x1a>
 800bc74:	682b      	ldr	r3, [r5, #0]
 800bc76:	b103      	cbz	r3, 800bc7a <_isatty_r+0x1a>
 800bc78:	6023      	str	r3, [r4, #0]
 800bc7a:	bd38      	pop	{r3, r4, r5, pc}
 800bc7c:	20000574 	.word	0x20000574

0800bc80 <_lseek_r>:
 800bc80:	b538      	push	{r3, r4, r5, lr}
 800bc82:	4604      	mov	r4, r0
 800bc84:	4608      	mov	r0, r1
 800bc86:	4611      	mov	r1, r2
 800bc88:	2200      	movs	r2, #0
 800bc8a:	4d05      	ldr	r5, [pc, #20]	; (800bca0 <_lseek_r+0x20>)
 800bc8c:	602a      	str	r2, [r5, #0]
 800bc8e:	461a      	mov	r2, r3
 800bc90:	f7f6 f9fc 	bl	800208c <_lseek>
 800bc94:	1c43      	adds	r3, r0, #1
 800bc96:	d102      	bne.n	800bc9e <_lseek_r+0x1e>
 800bc98:	682b      	ldr	r3, [r5, #0]
 800bc9a:	b103      	cbz	r3, 800bc9e <_lseek_r+0x1e>
 800bc9c:	6023      	str	r3, [r4, #0]
 800bc9e:	bd38      	pop	{r3, r4, r5, pc}
 800bca0:	20000574 	.word	0x20000574

0800bca4 <_read_r>:
 800bca4:	b538      	push	{r3, r4, r5, lr}
 800bca6:	4604      	mov	r4, r0
 800bca8:	4608      	mov	r0, r1
 800bcaa:	4611      	mov	r1, r2
 800bcac:	2200      	movs	r2, #0
 800bcae:	4d05      	ldr	r5, [pc, #20]	; (800bcc4 <_read_r+0x20>)
 800bcb0:	602a      	str	r2, [r5, #0]
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	f7f6 f98d 	bl	8001fd2 <_read>
 800bcb8:	1c43      	adds	r3, r0, #1
 800bcba:	d102      	bne.n	800bcc2 <_read_r+0x1e>
 800bcbc:	682b      	ldr	r3, [r5, #0]
 800bcbe:	b103      	cbz	r3, 800bcc2 <_read_r+0x1e>
 800bcc0:	6023      	str	r3, [r4, #0]
 800bcc2:	bd38      	pop	{r3, r4, r5, pc}
 800bcc4:	20000574 	.word	0x20000574

0800bcc8 <_init>:
 800bcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcca:	bf00      	nop
 800bccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcce:	bc08      	pop	{r3}
 800bcd0:	469e      	mov	lr, r3
 800bcd2:	4770      	bx	lr

0800bcd4 <_fini>:
 800bcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcd6:	bf00      	nop
 800bcd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcda:	bc08      	pop	{r3}
 800bcdc:	469e      	mov	lr, r3
 800bcde:	4770      	bx	lr
