
blinyLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081cc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  080082e0  080082e0  000182e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800877c  0800877c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800877c  0800877c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800877c  0800877c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800877c  0800877c  0001877c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008780  08008780  00018780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200001e4  08008968  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08008968  00020444  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c1e4  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000391e  00000000  00000000  0003c3f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  0003fd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  00040ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a935  00000000  00000000  00041f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001723c  00000000  00000000  0005c87d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f459  00000000  00000000  00073ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102f12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a00  00000000  00000000  00102f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080082c4 	.word	0x080082c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080082c4 	.word	0x080082c4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <DHT20_getTemp>:
float temperature       = 0;
uint8_t checksum;
uint8_t buf[7] = {0};
uint8_t readCMD[3] = {0xAC, 0x33, 0x00};

float DHT20_getTemp(void){
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
	return temperature;
 8000b2c:	4b02      	ldr	r3, [pc, #8]	; (8000b38 <DHT20_getTemp+0x10>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	20000238 	.word	0x20000238

08000b3c <DHT20_getHumid>:

float DHT20_getHumid(void){
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
	return humidity;
 8000b40:	4b02      	ldr	r3, [pc, #8]	; (8000b4c <DHT20_getHumid+0x10>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	20000234 	.word	0x20000234

08000b50 <DHT20_isConnected>:
        	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!address=%02X#\r\n", address), 100);
        }
    }
}

uint8_t DHT20_isConnected(){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, DHT20_ADDRESS, 1, 100);
 8000b56:	2364      	movs	r3, #100	; 0x64
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2170      	movs	r1, #112	; 0x70
 8000b5c:	480b      	ldr	r0, [pc, #44]	; (8000b8c <DHT20_isConnected+0x3c>)
 8000b5e:	f002 f9e1 	bl	8002f24 <HAL_I2C_IsDeviceReady>
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!connectDHT=%02X#\r\n", status), 1000);
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4909      	ldr	r1, [pc, #36]	; (8000b90 <DHT20_isConnected+0x40>)
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <DHT20_isConnected+0x44>)
 8000b6e:	f005 f96f 	bl	8005e50 <siprintf>
 8000b72:	4603      	mov	r3, r0
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7a:	4906      	ldr	r1, [pc, #24]	; (8000b94 <DHT20_isConnected+0x44>)
 8000b7c:	4806      	ldr	r0, [pc, #24]	; (8000b98 <DHT20_isConnected+0x48>)
 8000b7e:	f004 fb56 	bl	800522e <HAL_UART_Transmit>
    return status;
 8000b82:	79fb      	ldrb	r3, [r7, #7]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000340 	.word	0x20000340
 8000b90:	080082f4 	.word	0x080082f4
 8000b94:	20000200 	.word	0x20000200
 8000b98:	200003e8 	.word	0x200003e8

08000b9c <DHT20_requestData>:

uint8_t DHT20_requestData(){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af02      	add	r7, sp, #8
	  HAL_StatusTypeDef ret;
	  ret =  HAL_I2C_Master_Transmit(&hi2c1, DHT20_ADDRESS, readCMD, 3, 1000);
 8000ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	2303      	movs	r3, #3
 8000baa:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <DHT20_requestData+0x28>)
 8000bac:	2170      	movs	r1, #112	; 0x70
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <DHT20_requestData+0x2c>)
 8000bb0:	f001 fe4e 	bl	8002850 <HAL_I2C_Master_Transmit>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	71fb      	strb	r3, [r7, #7]
      return ret;
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	20000340 	.word	0x20000340

08000bcc <DHT20_crc8>:

uint8_t DHT20_crc8(uint8_t *ptr, uint8_t len)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0xFF;
 8000bd8:	23ff      	movs	r3, #255	; 0xff
 8000bda:	73fb      	strb	r3, [r7, #15]
	while(len--){
 8000bdc:	e01e      	b.n	8000c1c <DHT20_crc8+0x50>
		crc ^= *ptr++;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	1c5a      	adds	r2, r3, #1
 8000be2:	607a      	str	r2, [r7, #4]
 8000be4:	781a      	ldrb	r2, [r3, #0]
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
 8000be8:	4053      	eors	r3, r2
 8000bea:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 0; i< 8; ++i)
 8000bec:	2300      	movs	r3, #0
 8000bee:	73bb      	strb	r3, [r7, #14]
 8000bf0:	e011      	b.n	8000c16 <DHT20_crc8+0x4a>
		{
			if(crc & 0x80)
 8000bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	da07      	bge.n	8000c0a <DHT20_crc8+0x3e>
			{
				crc <<= 1;
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	73fb      	strb	r3, [r7, #15]
				crc ^= 0x31;
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000c06:	73fb      	strb	r3, [r7, #15]
 8000c08:	e002      	b.n	8000c10 <DHT20_crc8+0x44>
			}
			else
			{
				crc <<= 1;
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 0; i< 8; ++i)
 8000c10:	7bbb      	ldrb	r3, [r7, #14]
 8000c12:	3301      	adds	r3, #1
 8000c14:	73bb      	strb	r3, [r7, #14]
 8000c16:	7bbb      	ldrb	r3, [r7, #14]
 8000c18:	2b07      	cmp	r3, #7
 8000c1a:	d9ea      	bls.n	8000bf2 <DHT20_crc8+0x26>
	while(len--){
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	1e5a      	subs	r2, r3, #1
 8000c20:	70fa      	strb	r2, [r7, #3]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1db      	bne.n	8000bde <DHT20_crc8+0x12>
			}
		}
	}
	return crc;
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
	...

08000c34 <DHT20_Read>:

int DHT20_Read(){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret ;
	if(DHT20_isConnected() != HAL_OK){
 8000c3a:	f7ff ff89 	bl	8000b50 <DHT20_isConnected>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d002      	beq.n	8000c4a <DHT20_Read+0x16>
		return DHT20_ERROR_CONNECT;
 8000c44:	f06f 030a 	mvn.w	r3, #10
 8000c48:	e02d      	b.n	8000ca6 <DHT20_Read+0x72>
	}
    uint8_t request_data = DHT20_requestData();
 8000c4a:	f7ff ffa7 	bl	8000b9c <DHT20_requestData>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
    if(request_data == HAL_OK){
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d124      	bne.n	8000ca2 <DHT20_Read+0x6e>
    	HAL_Delay(1000);
 8000c58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c5c:	f001 f96e 	bl	8001f3c <HAL_Delay>
    	HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!result=%s#\r\n", "OK"), 1000);
 8000c60:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <DHT20_Read+0x7c>)
 8000c62:	4914      	ldr	r1, [pc, #80]	; (8000cb4 <DHT20_Read+0x80>)
 8000c64:	4814      	ldr	r0, [pc, #80]	; (8000cb8 <DHT20_Read+0x84>)
 8000c66:	f005 f8f3 	bl	8005e50 <siprintf>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c72:	4911      	ldr	r1, [pc, #68]	; (8000cb8 <DHT20_Read+0x84>)
 8000c74:	4811      	ldr	r0, [pc, #68]	; (8000cbc <DHT20_Read+0x88>)
 8000c76:	f004 fada 	bl	800522e <HAL_UART_Transmit>
    	ret = HAL_I2C_Master_Receive(&hi2c1, DHT20_ADDRESS, buf, 7, 100);
 8000c7a:	2364      	movs	r3, #100	; 0x64
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2307      	movs	r3, #7
 8000c80:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <DHT20_Read+0x8c>)
 8000c82:	2170      	movs	r1, #112	; 0x70
 8000c84:	480f      	ldr	r0, [pc, #60]	; (8000cc4 <DHT20_Read+0x90>)
 8000c86:	f001 fee1 	bl	8002a4c <HAL_I2C_Master_Receive>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71bb      	strb	r3, [r7, #6]
    	HAL_Delay(100);
 8000c8e:	2064      	movs	r0, #100	; 0x64
 8000c90:	f001 f954 	bl	8001f3c <HAL_Delay>
    	   if(ret == HAL_OK){
 8000c94:	79bb      	ldrb	r3, [r7, #6]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d103      	bne.n	8000ca2 <DHT20_Read+0x6e>
    		   return DHT20_Convert();
 8000c9a:	f000 f815 	bl	8000cc8 <DHT20_Convert>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	e001      	b.n	8000ca6 <DHT20_Read+0x72>
    	   }

    }
    return DHT20_ERROR_BYTES_ALL_ZERO;
 8000ca2:	f06f 030c 	mvn.w	r3, #12
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	08008308 	.word	0x08008308
 8000cb4:	0800830c 	.word	0x0800830c
 8000cb8:	20000200 	.word	0x20000200
 8000cbc:	200003e8 	.word	0x200003e8
 8000cc0:	2000023c 	.word	0x2000023c
 8000cc4:	20000340 	.word	0x20000340

08000cc8 <DHT20_Convert>:

int DHT20_Convert(){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
	   //  convert temperature

	   uint32_t raw = buf[1];
 8000cce:	4b4f      	ldr	r3, [pc, #316]	; (8000e0c <DHT20_Convert+0x144>)
 8000cd0:	785b      	ldrb	r3, [r3, #1]
 8000cd2:	607b      	str	r3, [r7, #4]
	   raw <<= 8;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	021b      	lsls	r3, r3, #8
 8000cd8:	607b      	str	r3, [r7, #4]
	   raw += buf[2];
 8000cda:	4b4c      	ldr	r3, [pc, #304]	; (8000e0c <DHT20_Convert+0x144>)
 8000cdc:	789b      	ldrb	r3, [r3, #2]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	607b      	str	r3, [r7, #4]
	   raw <<= 4;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	011b      	lsls	r3, r3, #4
 8000cea:	607b      	str	r3, [r7, #4]
	   raw += (buf[3] >> 4);
 8000cec:	4b47      	ldr	r3, [pc, #284]	; (8000e0c <DHT20_Convert+0x144>)
 8000cee:	78db      	ldrb	r3, [r3, #3]
 8000cf0:	091b      	lsrs	r3, r3, #4
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	607b      	str	r3, [r7, #4]
	   humidity = raw * 9.5367431640625e-5;   // ==> / 1048576.0 * 100%;
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff fb71 	bl	80003e4 <__aeabi_ui2d>
 8000d02:	f04f 0200 	mov.w	r2, #0
 8000d06:	4b42      	ldr	r3, [pc, #264]	; (8000e10 <DHT20_Convert+0x148>)
 8000d08:	f7ff fbe6 	bl	80004d8 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4610      	mov	r0, r2
 8000d12:	4619      	mov	r1, r3
 8000d14:	f7ff feb8 	bl	8000a88 <__aeabi_d2f>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	4a3e      	ldr	r2, [pc, #248]	; (8000e14 <DHT20_Convert+0x14c>)
 8000d1c:	6013      	str	r3, [r2, #0]
	   HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "Humid=%f\r\n", humidity), 1000);
 8000d1e:	4b3d      	ldr	r3, [pc, #244]	; (8000e14 <DHT20_Convert+0x14c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fb80 	bl	8000428 <__aeabi_f2d>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	493a      	ldr	r1, [pc, #232]	; (8000e18 <DHT20_Convert+0x150>)
 8000d2e:	483b      	ldr	r0, [pc, #236]	; (8000e1c <DHT20_Convert+0x154>)
 8000d30:	f005 f88e 	bl	8005e50 <siprintf>
 8000d34:	4603      	mov	r3, r0
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3c:	4937      	ldr	r1, [pc, #220]	; (8000e1c <DHT20_Convert+0x154>)
 8000d3e:	4838      	ldr	r0, [pc, #224]	; (8000e20 <DHT20_Convert+0x158>)
 8000d40:	f004 fa75 	bl	800522e <HAL_UART_Transmit>

		//  convert humidity
	    raw = (buf[3] & 0x0F);
 8000d44:	4b31      	ldr	r3, [pc, #196]	; (8000e0c <DHT20_Convert+0x144>)
 8000d46:	78db      	ldrb	r3, [r3, #3]
 8000d48:	f003 030f 	and.w	r3, r3, #15
 8000d4c:	607b      	str	r3, [r7, #4]
	    raw <<= 8;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	021b      	lsls	r3, r3, #8
 8000d52:	607b      	str	r3, [r7, #4]
	    raw += buf[4];
 8000d54:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <DHT20_Convert+0x144>)
 8000d56:	791b      	ldrb	r3, [r3, #4]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	607b      	str	r3, [r7, #4]
	    raw <<= 8;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	021b      	lsls	r3, r3, #8
 8000d64:	607b      	str	r3, [r7, #4]
	    raw += buf[5];
 8000d66:	4b29      	ldr	r3, [pc, #164]	; (8000e0c <DHT20_Convert+0x144>)
 8000d68:	795b      	ldrb	r3, [r3, #5]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4413      	add	r3, r2
 8000d70:	607b      	str	r3, [r7, #4]
	    temperature = raw * 1.9073486328125e-4 - 50;  //  ==> / 1048576.0 * 200 - 50;
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff fb36 	bl	80003e4 <__aeabi_ui2d>
 8000d78:	f04f 0200 	mov.w	r2, #0
 8000d7c:	4b29      	ldr	r3, [pc, #164]	; (8000e24 <DHT20_Convert+0x15c>)
 8000d7e:	f7ff fbab 	bl	80004d8 <__aeabi_dmul>
 8000d82:	4602      	mov	r2, r0
 8000d84:	460b      	mov	r3, r1
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f04f 0200 	mov.w	r2, #0
 8000d8e:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <DHT20_Convert+0x160>)
 8000d90:	f7ff f9ea 	bl	8000168 <__aeabi_dsub>
 8000d94:	4602      	mov	r2, r0
 8000d96:	460b      	mov	r3, r1
 8000d98:	4610      	mov	r0, r2
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f7ff fe74 	bl	8000a88 <__aeabi_d2f>
 8000da0:	4603      	mov	r3, r0
 8000da2:	4a22      	ldr	r2, [pc, #136]	; (8000e2c <DHT20_Convert+0x164>)
 8000da4:	6013      	str	r3, [r2, #0]
	    HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "Temp=%f\r\n", temperature), 1000);
 8000da6:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <DHT20_Convert+0x164>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fb3c 	bl	8000428 <__aeabi_f2d>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	491e      	ldr	r1, [pc, #120]	; (8000e30 <DHT20_Convert+0x168>)
 8000db6:	4819      	ldr	r0, [pc, #100]	; (8000e1c <DHT20_Convert+0x154>)
 8000db8:	f005 f84a 	bl	8005e50 <siprintf>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc4:	4915      	ldr	r1, [pc, #84]	; (8000e1c <DHT20_Convert+0x154>)
 8000dc6:	4816      	ldr	r0, [pc, #88]	; (8000e20 <DHT20_Convert+0x158>)
 8000dc8:	f004 fa31 	bl	800522e <HAL_UART_Transmit>

	    // Checksum
	    uint8_t crc = DHT20_crc8(buf, 6);
 8000dcc:	2106      	movs	r1, #6
 8000dce:	480f      	ldr	r0, [pc, #60]	; (8000e0c <DHT20_Convert+0x144>)
 8000dd0:	f7ff fefc 	bl	8000bcc <DHT20_crc8>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	70fb      	strb	r3, [r7, #3]
	    if(crc != buf[6]){
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <DHT20_Convert+0x144>)
 8000dda:	799b      	ldrb	r3, [r3, #6]
 8000ddc:	78fa      	ldrb	r2, [r7, #3]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d002      	beq.n	8000de8 <DHT20_Convert+0x120>
	    	return DHT20_ERROR_CHECKSUM;
 8000de2:	f06f 0309 	mvn.w	r3, #9
 8000de6:	e00d      	b.n	8000e04 <DHT20_Convert+0x13c>
	    }
	    HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "!CRC=%s#\r\n", "OK"), 1000);
 8000de8:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <DHT20_Convert+0x16c>)
 8000dea:	4913      	ldr	r1, [pc, #76]	; (8000e38 <DHT20_Convert+0x170>)
 8000dec:	480b      	ldr	r0, [pc, #44]	; (8000e1c <DHT20_Convert+0x154>)
 8000dee:	f005 f82f 	bl	8005e50 <siprintf>
 8000df2:	4603      	mov	r3, r0
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfa:	4908      	ldr	r1, [pc, #32]	; (8000e1c <DHT20_Convert+0x154>)
 8000dfc:	4808      	ldr	r0, [pc, #32]	; (8000e20 <DHT20_Convert+0x158>)
 8000dfe:	f004 fa16 	bl	800522e <HAL_UART_Transmit>
	    return DHT20_OK;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2000023c 	.word	0x2000023c
 8000e10:	3f190000 	.word	0x3f190000
 8000e14:	20000234 	.word	0x20000234
 8000e18:	0800831c 	.word	0x0800831c
 8000e1c:	20000200 	.word	0x20000200
 8000e20:	200003e8 	.word	0x200003e8
 8000e24:	3f290000 	.word	0x3f290000
 8000e28:	40490000 	.word	0x40490000
 8000e2c:	20000238 	.word	0x20000238
 8000e30:	08008328 	.word	0x08008328
 8000e34:	08008308 	.word	0x08008308
 8000e38:	08008334 	.word	0x08008334
 8000e3c:	00000000 	.word	0x00000000

08000e40 <DHT20_FSM>:
 *      Author: admin
 */

#include "DHT20_FSM.h"

void DHT20_FSM(void){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	switch (status) {
 8000e44:	4b38      	ldr	r3, [pc, #224]	; (8000f28 <DHT20_FSM+0xe8>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b0d      	cmp	r3, #13
 8000e4a:	d860      	bhi.n	8000f0e <DHT20_FSM+0xce>
 8000e4c:	a201      	add	r2, pc, #4	; (adr r2, 8000e54 <DHT20_FSM+0x14>)
 8000e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e52:	bf00      	nop
 8000e54:	08000e8d 	.word	0x08000e8d
 8000e58:	08000f0f 	.word	0x08000f0f
 8000e5c:	08000f0f 	.word	0x08000f0f
 8000e60:	08000f0f 	.word	0x08000f0f
 8000e64:	08000f0f 	.word	0x08000f0f
 8000e68:	08000f0f 	.word	0x08000f0f
 8000e6c:	08000f0f 	.word	0x08000f0f
 8000e70:	08000f0f 	.word	0x08000f0f
 8000e74:	08000f0f 	.word	0x08000f0f
 8000e78:	08000f0f 	.word	0x08000f0f
 8000e7c:	08000f0f 	.word	0x08000f0f
 8000e80:	08000e95 	.word	0x08000e95
 8000e84:	08000ee5 	.word	0x08000ee5
 8000e88:	08000efb 	.word	0x08000efb
		case INIT:
			status = READING_STATE;
 8000e8c:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <DHT20_FSM+0xe8>)
 8000e8e:	220b      	movs	r2, #11
 8000e90:	601a      	str	r2, [r3, #0]
			break;
 8000e92:	e041      	b.n	8000f18 <DHT20_FSM+0xd8>
		case READING_STATE:
			setTimer1(10000);
 8000e94:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e98:	f000 fc76 	bl	8001788 <setTimer1>
			DHT20_Read();
 8000e9c:	f7ff feca 	bl	8000c34 <DHT20_Read>
			LCD_Display_Temp(DHT20_getTemp());
 8000ea0:	f7ff fe42 	bl	8000b28 <DHT20_getTemp>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 fac8 	bl	800143c <LCD_Display_Temp>
			LCD_Display_Humid(DHT20_getHumid());
 8000eac:	f7ff fe46 	bl	8000b3c <DHT20_getHumid>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 faec 	bl	8001490 <LCD_Display_Humid>
			if (DHT20_getTemp() > 29.3)	status = FAN_ON;
 8000eb8:	f7ff fe36 	bl	8000b28 <DHT20_getTemp>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fab2 	bl	8000428 <__aeabi_f2d>
 8000ec4:	a316      	add	r3, pc, #88	; (adr r3, 8000f20 <DHT20_FSM+0xe0>)
 8000ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eca:	f7ff fd95 	bl	80009f8 <__aeabi_dcmpgt>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <DHT20_FSM+0x9c>
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <DHT20_FSM+0xe8>)
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	601a      	str	r2, [r3, #0]
			else status = FAN_OFF;
			break;
 8000eda:	e01d      	b.n	8000f18 <DHT20_FSM+0xd8>
			else status = FAN_OFF;
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <DHT20_FSM+0xe8>)
 8000ede:	220d      	movs	r2, #13
 8000ee0:	601a      	str	r2, [r3, #0]
			break;
 8000ee2:	e019      	b.n	8000f18 <DHT20_FSM+0xd8>
		case FAN_ON:
			setFan(50);
 8000ee4:	2032      	movs	r0, #50	; 0x32
 8000ee6:	f000 f919 	bl	800111c <setFan>
			if(timer1_flag == 1)	status = READING_STATE;
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <DHT20_FSM+0xec>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d10f      	bne.n	8000f12 <DHT20_FSM+0xd2>
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <DHT20_FSM+0xe8>)
 8000ef4:	220b      	movs	r2, #11
 8000ef6:	601a      	str	r2, [r3, #0]
			break;
 8000ef8:	e00b      	b.n	8000f12 <DHT20_FSM+0xd2>
		case FAN_OFF:
			resetFan();
 8000efa:	f000 f925 	bl	8001148 <resetFan>
			if(timer1_flag == 1)	status =READING_STATE;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <DHT20_FSM+0xec>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d107      	bne.n	8000f16 <DHT20_FSM+0xd6>
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <DHT20_FSM+0xe8>)
 8000f08:	220b      	movs	r2, #11
 8000f0a:	601a      	str	r2, [r3, #0]
			break;
 8000f0c:	e003      	b.n	8000f16 <DHT20_FSM+0xd6>
		default:
			break;
 8000f0e:	bf00      	nop
 8000f10:	e002      	b.n	8000f18 <DHT20_FSM+0xd8>
			break;
 8000f12:	bf00      	nop
 8000f14:	e000      	b.n	8000f18 <DHT20_FSM+0xd8>
			break;
 8000f16:	bf00      	nop
	}
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	f3af 8000 	nop.w
 8000f20:	cccccccd 	.word	0xcccccccd
 8000f24:	403d4ccc 	.word	0x403d4ccc
 8000f28:	20000284 	.word	0x20000284
 8000f2c:	2000028c 	.word	0x2000028c

08000f30 <PWM_Init>:
 *      Author: admin
 */


#include "PWM.h"
void PWM_Init(TIM_HandleTypeDef *htim,uint16_t prescaler, uint16_t counterPeriod){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b090      	sub	sp, #64	; 0x40
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	807b      	strh	r3, [r7, #2]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	803b      	strh	r3, [r7, #0]
	 // Enable GPIOA clock
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f40:	4b30      	ldr	r3, [pc, #192]	; (8001004 <PWM_Init+0xd4>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a2f      	ldr	r2, [pc, #188]	; (8001004 <PWM_Init+0xd4>)
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b2d      	ldr	r3, [pc, #180]	; (8001004 <PWM_Init+0xd4>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	693b      	ldr	r3, [r7, #16]

	    // Enable Timer 1 clock
	    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f58:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <PWM_Init+0xd4>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a29      	ldr	r2, [pc, #164]	; (8001004 <PWM_Init+0xd4>)
 8000f5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b27      	ldr	r3, [pc, #156]	; (8001004 <PWM_Init+0xd4>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]

	    // Configure PA8 in alternate function mode
	    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
	    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	637b      	str	r3, [r7, #52]	; 0x34
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f90:	4619      	mov	r1, r3
 8000f92:	481d      	ldr	r0, [pc, #116]	; (8001008 <PWM_Init+0xd8>)
 8000f94:	f001 f97c 	bl	8002290 <HAL_GPIO_Init>

	    // Initialize Timer 1
	    htim->Instance = TIM1;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a1c      	ldr	r2, [pc, #112]	; (800100c <PWM_Init+0xdc>)
 8000f9c:	601a      	str	r2, [r3, #0]
	    htim->Init.Prescaler = prescaler - 1;
 8000f9e:	887b      	ldrh	r3, [r7, #2]
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	605a      	str	r2, [r3, #4]
	    htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
	    htim->Init.Period = counterPeriod - 1;
 8000fae:	883b      	ldrh	r3, [r7, #0]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	60da      	str	r2, [r3, #12]
	    htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
	    HAL_TIM_Base_Init(htim);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f003 f872 	bl	80040a8 <HAL_TIM_Base_Init>

	    // Configure Timer 1 channel 1 in PWM mode 1
	    TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
 8000fd4:	615a      	str	r2, [r3, #20]
 8000fd6:	619a      	str	r2, [r3, #24]
	    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd8:	2360      	movs	r3, #96	; 0x60
 8000fda:	617b      	str	r3, [r7, #20]
	    sConfigOC.Pulse = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
	    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
	    HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, TIM_CHANNEL_1);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4619      	mov	r1, r3
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f003 fbc5 	bl	800477c <HAL_TIM_PWM_ConfigChannel>

	    // Start PWM output on Timer 1 channel 1
	    HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f003 f951 	bl	800429c <HAL_TIM_PWM_Start>
}
 8000ffa:	bf00      	nop
 8000ffc:	3740      	adds	r7, #64	; 0x40
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000
 8001008:	40010800 	.word	0x40010800
 800100c:	40012c00 	.word	0x40012c00

08001010 <HAL_TIM_PWM_PulseFinishedCallback>:
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8001018:	4b3c      	ldr	r3, [pc, #240]	; (800110c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b03      	cmp	r3, #3
 800101e:	d852      	bhi.n	80010c6 <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
    // We're in. Fill the odd buffer

    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	e046      	b.n	80010b4 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8001026:	4b39      	ldr	r3, [pc, #228]	; (800110c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	4613      	mov	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4413      	add	r3, r2
 8001030:	4a37      	ldr	r2, [pc, #220]	; (8001110 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001032:	5cd3      	ldrb	r3, [r2, r3]
 8001034:	461a      	mov	r2, r3
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001040:	2b00      	cmp	r3, #0
 8001042:	dd01      	ble.n	8001048 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8001044:	2126      	movs	r1, #38	; 0x26
 8001046:	e000      	b.n	800104a <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8001048:	2113      	movs	r1, #19
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3318      	adds	r3, #24
 800104e:	4a31      	ldr	r2, [pc, #196]	; (8001114 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001050:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001052:	4b2e      	ldr	r3, [pc, #184]	; (800110c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4613      	mov	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	4413      	add	r3, r2
 800105c:	3301      	adds	r3, #1
 800105e:	4a2c      	ldr	r2, [pc, #176]	; (8001110 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001060:	5cd3      	ldrb	r3, [r2, r3]
 8001062:	461a      	mov	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800106e:	2b00      	cmp	r3, #0
 8001070:	dd01      	ble.n	8001076 <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 8001072:	2126      	movs	r1, #38	; 0x26
 8001074:	e000      	b.n	8001078 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 8001076:	2113      	movs	r1, #19
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3320      	adds	r3, #32
 800107c:	4a25      	ldr	r2, [pc, #148]	; (8001114 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 800107e:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4613      	mov	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4413      	add	r3, r2
 800108a:	3302      	adds	r3, #2
 800108c:	4a20      	ldr	r2, [pc, #128]	; (8001110 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 800108e:	5cd3      	ldrb	r3, [r2, r3]
 8001090:	461a      	mov	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109c:	2b00      	cmp	r3, #0
 800109e:	dd01      	ble.n	80010a4 <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 80010a0:	2126      	movs	r1, #38	; 0x26
 80010a2:	e000      	b.n	80010a6 <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 80010a4:	2113      	movs	r1, #19
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	3328      	adds	r3, #40	; 0x28
 80010aa:	4a1a      	ldr	r2, [pc, #104]	; (8001114 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80010ac:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3301      	adds	r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b07      	cmp	r3, #7
 80010b8:	d9b5      	bls.n	8001026 <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }

    wr_buf_p++;
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	4a12      	ldr	r2, [pc, #72]	; (800110c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80010c2:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
  }
}
 80010c4:	e01d      	b.n	8001102 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b05      	cmp	r3, #5
 80010cc:	d812      	bhi.n	80010f4 <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 80010ce:	2318      	movs	r3, #24
 80010d0:	72fb      	strb	r3, [r7, #11]
 80010d2:	e006      	b.n	80010e2 <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 80010d4:	7afb      	ldrb	r3, [r7, #11]
 80010d6:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80010d8:	2100      	movs	r1, #0
 80010da:	54d1      	strb	r1, [r2, r3]
 80010dc:	7afb      	ldrb	r3, [r7, #11]
 80010de:	3301      	adds	r3, #1
 80010e0:	72fb      	strb	r3, [r7, #11]
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	2b2f      	cmp	r3, #47	; 0x2f
 80010e6:	d9f5      	bls.n	80010d4 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>
    ++wr_buf_p;
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4a07      	ldr	r2, [pc, #28]	; (800110c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80010f0:	6013      	str	r3, [r2, #0]
}
 80010f2:	e006      	b.n	8001102 <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
    wr_buf_p = 0;
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 80010fa:	2100      	movs	r1, #0
 80010fc:	4806      	ldr	r0, [pc, #24]	; (8001118 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 80010fe:	f003 f96f 	bl	80043e0 <HAL_TIM_PWM_Stop_DMA>
}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000280 	.word	0x20000280
 8001110:	20000244 	.word	0x20000244
 8001114:	20000250 	.word	0x20000250
 8001118:	200002f4 	.word	0x200002f4

0800111c <setFan>:
void checkTemp(float temp){
	if(temp > 25.5)	setFan(100);
	else resetFan();
}

void setFan(uint8_t dutyCycle){
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
    // Giới hạn giá trị duty cycle từ 0 đến 100
    if (dutyCycle > 100) {
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b64      	cmp	r3, #100	; 0x64
 800112a:	d901      	bls.n	8001130 <setFan+0x14>
        dutyCycle = 100;
 800112c:	2364      	movs	r3, #100	; 0x64
 800112e:	71fb      	strb	r3, [r7, #7]
    }

    __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, dutyCycle);
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <setFan+0x28>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	79fa      	ldrb	r2, [r7, #7]
 8001136:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	200002ac 	.word	0x200002ac

08001148 <resetFan>:

void resetFan(void){
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,0);
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <resetFan+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2200      	movs	r2, #0
 8001152:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	200002ac 	.word	0x200002ac

08001160 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001174:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <MX_GPIO_Init+0x8c>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <MX_GPIO_Init+0x8c>)
 800117a:	f043 0320 	orr.w	r3, r3, #32
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_GPIO_Init+0x8c>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0320 	and.w	r3, r3, #32
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <MX_GPIO_Init+0x8c>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a16      	ldr	r2, [pc, #88]	; (80011ec <MX_GPIO_Init+0x8c>)
 8001192:	f043 0304 	orr.w	r3, r3, #4
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <MX_GPIO_Init+0x8c>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <MX_GPIO_Init+0x8c>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a10      	ldr	r2, [pc, #64]	; (80011ec <MX_GPIO_Init+0x8c>)
 80011aa:	f043 0308 	orr.w	r3, r3, #8
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_GPIO_Init+0x8c>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	2120      	movs	r1, #32
 80011c0:	480b      	ldr	r0, [pc, #44]	; (80011f0 <MX_GPIO_Init+0x90>)
 80011c2:	f001 f9e9 	bl	8002598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011c6:	2320      	movs	r3, #32
 80011c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	4619      	mov	r1, r3
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <MX_GPIO_Init+0x90>)
 80011de:	f001 f857 	bl	8002290 <HAL_GPIO_Init>

}
 80011e2:	bf00      	nop
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40010800 	.word	0x40010800

080011f4 <LCD_Set_Backlight>:
	if(status == HAL_OK){
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
	}
}

void LCD_Set_Backlight(uint8_t state) {
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if (state) {
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <LCD_Set_Backlight+0x18>
    backlight_state = 1;
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <LCD_Set_Backlight+0x28>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
  } else {
    backlight_state = 0;
  }
}
 800120a:	e002      	b.n	8001212 <LCD_Set_Backlight+0x1e>
    backlight_state = 0;
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <LCD_Set_Backlight+0x28>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	20000003 	.word	0x20000003

08001220 <LCD_Send_CMD>:

void LCD_Send_CMD (char cmd){
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af02      	add	r7, sp, #8
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
	uint8_t EN1 = 0x04|(backlight_state << BL_BIT);
 800122a:	4b20      	ldr	r3, [pc, #128]	; (80012ac <LCD_Send_CMD+0x8c>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	b25b      	sxtb	r3, r3
 8001232:	f043 0304 	orr.w	r3, r3, #4
 8001236:	b25b      	sxtb	r3, r3
 8001238:	73fb      	strb	r3, [r7, #15]
	uint8_t EN0 = 0x00|(backlight_state << BL_BIT);
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <LCD_Send_CMD+0x8c>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	73bb      	strb	r3, [r7, #14]

	uint8_t buffer[4] = {
			(cmd & 0xF0)|EN1,	//en=1, rs=0
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	f023 030f 	bic.w	r3, r3, #15
 800124a:	b25a      	sxtb	r2, r3
 800124c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001250:	4313      	orrs	r3, r2
 8001252:	b25b      	sxtb	r3, r3
 8001254:	b2db      	uxtb	r3, r3
	uint8_t buffer[4] = {
 8001256:	723b      	strb	r3, [r7, #8]
			(cmd & 0xF0)|EN0,	//en=0, rs=0
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	f023 030f 	bic.w	r3, r3, #15
 8001260:	b25a      	sxtb	r2, r3
 8001262:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001266:	4313      	orrs	r3, r2
 8001268:	b25b      	sxtb	r3, r3
 800126a:	b2db      	uxtb	r3, r3
	uint8_t buffer[4] = {
 800126c:	727b      	strb	r3, [r7, #9]
			(cmd << 4)|EN1,		//en=1, rs=0
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	b25a      	sxtb	r2, r3
 8001274:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001278:	4313      	orrs	r3, r2
 800127a:	b25b      	sxtb	r3, r3
 800127c:	b2db      	uxtb	r3, r3
	uint8_t buffer[4] = {
 800127e:	72bb      	strb	r3, [r7, #10]
			(cmd << 4)|EN0	 	//en=0, rs=0
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	b25a      	sxtb	r2, r3
 8001286:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800128a:	4313      	orrs	r3, r2
 800128c:	b25b      	sxtb	r3, r3
 800128e:	b2db      	uxtb	r3, r3
	uint8_t buffer[4] = {
 8001290:	72fb      	strb	r3, [r7, #11]
	};
	HAL_I2C_Master_Transmit (&hi2c1, I2C_ADDR,buffer, 4, 100);
 8001292:	f107 0208 	add.w	r2, r7, #8
 8001296:	2364      	movs	r3, #100	; 0x64
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2304      	movs	r3, #4
 800129c:	2142      	movs	r1, #66	; 0x42
 800129e:	4804      	ldr	r0, [pc, #16]	; (80012b0 <LCD_Send_CMD+0x90>)
 80012a0:	f001 fad6 	bl	8002850 <HAL_I2C_Master_Transmit>
}
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000003 	.word	0x20000003
 80012b0:	20000340 	.word	0x20000340

080012b4 <LCD_Send_Data>:

void LCD_Send_Data (char data){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af02      	add	r7, sp, #8
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]

	uint8_t EN1 = 0x05|(backlight_state << BL_BIT);
 80012be:	4b22      	ldr	r3, [pc, #136]	; (8001348 <LCD_Send_Data+0x94>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	f043 0305 	orr.w	r3, r3, #5
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	73fb      	strb	r3, [r7, #15]
	uint8_t EN0 = 0x01|(backlight_state << BL_BIT);
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <LCD_Send_Data+0x94>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	73bb      	strb	r3, [r7, #14]

	uint8_t buffer[4] = {
			(data & 0xF0)|EN1,	//en=1, rs=1
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	f023 030f 	bic.w	r3, r3, #15
 80012e6:	b25a      	sxtb	r2, r3
 80012e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	b2db      	uxtb	r3, r3
	uint8_t buffer[4] = {
 80012f2:	723b      	strb	r3, [r7, #8]
			(data & 0xF0)|EN0,	//en=0, rs=1
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	f023 030f 	bic.w	r3, r3, #15
 80012fc:	b25a      	sxtb	r2, r3
 80012fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001302:	4313      	orrs	r3, r2
 8001304:	b25b      	sxtb	r3, r3
 8001306:	b2db      	uxtb	r3, r3
	uint8_t buffer[4] = {
 8001308:	727b      	strb	r3, [r7, #9]
			(data << 4)|EN1,	//en=1, rs=1
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	b25a      	sxtb	r2, r3
 8001310:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001314:	4313      	orrs	r3, r2
 8001316:	b25b      	sxtb	r3, r3
 8001318:	b2db      	uxtb	r3, r3
	uint8_t buffer[4] = {
 800131a:	72bb      	strb	r3, [r7, #10]
			(data << 4)|EN0		//en=0, rs=1
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	011b      	lsls	r3, r3, #4
 8001320:	b25a      	sxtb	r2, r3
 8001322:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001326:	4313      	orrs	r3, r2
 8001328:	b25b      	sxtb	r3, r3
 800132a:	b2db      	uxtb	r3, r3
	uint8_t buffer[4] = {
 800132c:	72fb      	strb	r3, [r7, #11]
	};
	HAL_I2C_Master_Transmit (&hi2c1, I2C_ADDR,buffer, 4, 100);
 800132e:	f107 0208 	add.w	r2, r7, #8
 8001332:	2364      	movs	r3, #100	; 0x64
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2304      	movs	r3, #4
 8001338:	2142      	movs	r1, #66	; 0x42
 800133a:	4804      	ldr	r0, [pc, #16]	; (800134c <LCD_Send_Data+0x98>)
 800133c:	f001 fa88 	bl	8002850 <HAL_I2C_Master_Transmit>
}
 8001340:	bf00      	nop
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000003 	.word	0x20000003
 800134c:	20000340 	.word	0x20000340

08001350 <LCD_Set_Cursor>:
void LCD_Clear (void){
	LCD_Send_CMD (0x01);
	HAL_Delay(2);
}

void LCD_Set_Cursor(uint8_t row, uint8_t col){
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	460a      	mov	r2, r1
 800135a:	71fb      	strb	r3, [r7, #7]
 800135c:	4613      	mov	r3, r2
 800135e:	71bb      	strb	r3, [r7, #6]
    switch (row)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <LCD_Set_Cursor+0x1c>
 8001366:	2b01      	cmp	r3, #1
 8001368:	d005      	beq.n	8001376 <LCD_Set_Cursor+0x26>
 800136a:	e009      	b.n	8001380 <LCD_Set_Cursor+0x30>
    {
        case 0:
            col |= 0x80;
 800136c:	79bb      	ldrb	r3, [r7, #6]
 800136e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001372:	71bb      	strb	r3, [r7, #6]
            break;
 8001374:	e004      	b.n	8001380 <LCD_Set_Cursor+0x30>
        case 1:
            col |= 0xC0;
 8001376:	79bb      	ldrb	r3, [r7, #6]
 8001378:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800137c:	71bb      	strb	r3, [r7, #6]
            break;
 800137e:	bf00      	nop
    }
    LCD_Send_CMD (col);
 8001380:	79bb      	ldrb	r3, [r7, #6]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff4c 	bl	8001220 <LCD_Send_CMD>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <LCD_init>:


void LCD_init (void){
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001394:	2032      	movs	r0, #50	; 0x32
 8001396:	f000 fdd1 	bl	8001f3c <HAL_Delay>
	LCD_Send_CMD (0x30);
 800139a:	2030      	movs	r0, #48	; 0x30
 800139c:	f7ff ff40 	bl	8001220 <LCD_Send_CMD>
	HAL_Delay(5);  // wait for >4.1ms
 80013a0:	2005      	movs	r0, #5
 80013a2:	f000 fdcb 	bl	8001f3c <HAL_Delay>
	LCD_Send_CMD (0x30);
 80013a6:	2030      	movs	r0, #48	; 0x30
 80013a8:	f7ff ff3a 	bl	8001220 <LCD_Send_CMD>
	HAL_Delay(1);  // wait for >100us
 80013ac:	2001      	movs	r0, #1
 80013ae:	f000 fdc5 	bl	8001f3c <HAL_Delay>
	LCD_Send_CMD (0x30);
 80013b2:	2030      	movs	r0, #48	; 0x30
 80013b4:	f7ff ff34 	bl	8001220 <LCD_Send_CMD>
	HAL_Delay(10);
 80013b8:	200a      	movs	r0, #10
 80013ba:	f000 fdbf 	bl	8001f3c <HAL_Delay>
	LCD_Send_CMD (0x20);  // 4bit mode
 80013be:	2020      	movs	r0, #32
 80013c0:	f7ff ff2e 	bl	8001220 <LCD_Send_CMD>
	HAL_Delay(10);
 80013c4:	200a      	movs	r0, #10
 80013c6:	f000 fdb9 	bl	8001f3c <HAL_Delay>

  // dislay initialisation
	LCD_Send_CMD (0x28);
 80013ca:	2028      	movs	r0, #40	; 0x28
 80013cc:	f7ff ff28 	bl	8001220 <LCD_Send_CMD>
	HAL_Delay(1);
 80013d0:	2001      	movs	r0, #1
 80013d2:	f000 fdb3 	bl	8001f3c <HAL_Delay>
	LCD_Send_CMD (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80013d6:	2008      	movs	r0, #8
 80013d8:	f7ff ff22 	bl	8001220 <LCD_Send_CMD>
	HAL_Delay(1);
 80013dc:	2001      	movs	r0, #1
 80013de:	f000 fdad 	bl	8001f3c <HAL_Delay>
	LCD_Send_CMD(0x01);		 //Clear display
 80013e2:	2001      	movs	r0, #1
 80013e4:	f7ff ff1c 	bl	8001220 <LCD_Send_CMD>
	HAL_Delay(1);
 80013e8:	2001      	movs	r0, #1
 80013ea:	f000 fda7 	bl	8001f3c <HAL_Delay>
	HAL_Delay(1);
 80013ee:	2001      	movs	r0, #1
 80013f0:	f000 fda4 	bl	8001f3c <HAL_Delay>
	LCD_Send_CMD(0x06);		 //Auto Increment cursor
 80013f4:	2006      	movs	r0, #6
 80013f6:	f7ff ff13 	bl	8001220 <LCD_Send_CMD>
	HAL_Delay(1);
 80013fa:	2001      	movs	r0, #1
 80013fc:	f000 fd9e 	bl	8001f3c <HAL_Delay>
	LCD_Send_CMD(0x0C);		 //Display ON Cursor OFF
 8001400:	200c      	movs	r0, #12
 8001402:	f7ff ff0d 	bl	8001220 <LCD_Send_CMD>
	HAL_Delay(1);
 8001406:	2001      	movs	r0, #1
 8001408:	f000 fd98 	bl	8001f3c <HAL_Delay>
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <LCD_Send_String>:

void LCD_Send_String (char *str){
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	while (*str) LCD_Send_Data (*str++);
 8001418:	e006      	b.n	8001428 <LCD_Send_String+0x18>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff46 	bl	80012b4 <LCD_Send_Data>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f4      	bne.n	800141a <LCD_Send_String+0xa>
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <LCD_Display_Temp>:
	char buffer[8];
	sprintf(buffer,"%d",number);
	LCD_Send_String(buffer);
}

void LCD_Display_Temp(float Temp){
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	char str[20] = {0};
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
	sprintf(str, "TEMP: %.2f", Temp);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7fe ffe6 	bl	8000428 <__aeabi_f2d>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	f107 000c 	add.w	r0, r7, #12
 8001464:	4909      	ldr	r1, [pc, #36]	; (800148c <LCD_Display_Temp+0x50>)
 8001466:	f004 fcf3 	bl	8005e50 <siprintf>
	LCD_Set_Cursor(0,0);
 800146a:	2100      	movs	r1, #0
 800146c:	2000      	movs	r0, #0
 800146e:	f7ff ff6f 	bl	8001350 <LCD_Set_Cursor>
	LCD_Send_String(str);
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ffca 	bl	8001410 <LCD_Send_String>
	LCD_Send_Data('C');
 800147c:	2043      	movs	r0, #67	; 0x43
 800147e:	f7ff ff19 	bl	80012b4 <LCD_Send_Data>
}
 8001482:	bf00      	nop
 8001484:	3720      	adds	r7, #32
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	08008358 	.word	0x08008358

08001490 <LCD_Display_Humid>:

void LCD_Display_Humid(float Humid){
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	char str[20] = {0};
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
	sprintf(str, "HUMID: %.2f", Humid);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7fe ffbc 	bl	8000428 <__aeabi_f2d>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	f107 000c 	add.w	r0, r7, #12
 80014b8:	4909      	ldr	r1, [pc, #36]	; (80014e0 <LCD_Display_Humid+0x50>)
 80014ba:	f004 fcc9 	bl	8005e50 <siprintf>
	LCD_Set_Cursor(1,0);
 80014be:	2100      	movs	r1, #0
 80014c0:	2001      	movs	r0, #1
 80014c2:	f7ff ff45 	bl	8001350 <LCD_Set_Cursor>
	LCD_Send_String(str);
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ffa0 	bl	8001410 <LCD_Send_String>
	LCD_Send_Data('%');
 80014d0:	2025      	movs	r0, #37	; 0x25
 80014d2:	f7ff feef 	bl	80012b4 <LCD_Send_Data>
}
 80014d6:	bf00      	nop
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	08008364 	.word	0x08008364

080014e4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_I2C1_Init+0x50>)
 80014ea:	4a13      	ldr	r2, [pc, #76]	; (8001538 <MX_I2C1_Init+0x54>)
 80014ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_I2C1_Init+0x50>)
 80014f0:	4a12      	ldr	r2, [pc, #72]	; (800153c <MX_I2C1_Init+0x58>)
 80014f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_I2C1_Init+0x50>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_I2C1_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_I2C1_Init+0x50>)
 8001502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001506:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <MX_I2C1_Init+0x50>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_I2C1_Init+0x50>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <MX_I2C1_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_I2C1_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <MX_I2C1_Init+0x50>)
 8001522:	f001 f851 	bl	80025c8 <HAL_I2C_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800152c:	f000 f927 	bl	800177e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000340 	.word	0x20000340
 8001538:	40005400 	.word	0x40005400
 800153c:	000186a0 	.word	0x000186a0

08001540 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MX_I2C2_Init+0x50>)
 8001546:	4a13      	ldr	r2, [pc, #76]	; (8001594 <MX_I2C2_Init+0x54>)
 8001548:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_I2C2_Init+0x50>)
 800154c:	4a12      	ldr	r2, [pc, #72]	; (8001598 <MX_I2C2_Init+0x58>)
 800154e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_I2C2_Init+0x50>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_I2C2_Init+0x50>)
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_I2C2_Init+0x50>)
 800155e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001562:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <MX_I2C2_Init+0x50>)
 8001566:	2200      	movs	r2, #0
 8001568:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_I2C2_Init+0x50>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <MX_I2C2_Init+0x50>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_I2C2_Init+0x50>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800157c:	4804      	ldr	r0, [pc, #16]	; (8001590 <MX_I2C2_Init+0x50>)
 800157e:	f001 f823 	bl	80025c8 <HAL_I2C_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001588:	f000 f8f9 	bl	800177e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000394 	.word	0x20000394
 8001594:	40005800 	.word	0x40005800
 8001598:	000186a0 	.word	0x000186a0

0800159c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08c      	sub	sp, #48	; 0x30
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a32      	ldr	r2, [pc, #200]	; (8001680 <HAL_I2C_MspInit+0xe4>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d133      	bne.n	8001624 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015bc:	4b31      	ldr	r3, [pc, #196]	; (8001684 <HAL_I2C_MspInit+0xe8>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a30      	ldr	r2, [pc, #192]	; (8001684 <HAL_I2C_MspInit+0xe8>)
 80015c2:	f043 0308 	orr.w	r3, r3, #8
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b2e      	ldr	r3, [pc, #184]	; (8001684 <HAL_I2C_MspInit+0xe8>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	61bb      	str	r3, [r7, #24]
 80015d2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015da:	2312      	movs	r3, #18
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4619      	mov	r1, r3
 80015e8:	4827      	ldr	r0, [pc, #156]	; (8001688 <HAL_I2C_MspInit+0xec>)
 80015ea:	f000 fe51 	bl	8002290 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80015ee:	4b27      	ldr	r3, [pc, #156]	; (800168c <HAL_I2C_MspInit+0xf0>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fe:	f043 0302 	orr.w	r3, r3, #2
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001604:	4a21      	ldr	r2, [pc, #132]	; (800168c <HAL_I2C_MspInit+0xf0>)
 8001606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001608:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800160a:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <HAL_I2C_MspInit+0xe8>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	4a1d      	ldr	r2, [pc, #116]	; (8001684 <HAL_I2C_MspInit+0xe8>)
 8001610:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001614:	61d3      	str	r3, [r2, #28]
 8001616:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <HAL_I2C_MspInit+0xe8>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001622:	e029      	b.n	8001678 <HAL_I2C_MspInit+0xdc>
  else if(i2cHandle->Instance==I2C2)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a19      	ldr	r2, [pc, #100]	; (8001690 <HAL_I2C_MspInit+0xf4>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d124      	bne.n	8001678 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_I2C_MspInit+0xe8>)
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	4a14      	ldr	r2, [pc, #80]	; (8001684 <HAL_I2C_MspInit+0xe8>)
 8001634:	f043 0308 	orr.w	r3, r3, #8
 8001638:	6193      	str	r3, [r2, #24]
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_I2C_MspInit+0xe8>)
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001646:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164c:	2312      	movs	r3, #18
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001650:	2303      	movs	r3, #3
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	4619      	mov	r1, r3
 800165a:	480b      	ldr	r0, [pc, #44]	; (8001688 <HAL_I2C_MspInit+0xec>)
 800165c:	f000 fe18 	bl	8002290 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_I2C_MspInit+0xe8>)
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <HAL_I2C_MspInit+0xe8>)
 8001666:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800166a:	61d3      	str	r3, [r2, #28]
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_I2C_MspInit+0xe8>)
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]
}
 8001678:	bf00      	nop
 800167a:	3730      	adds	r7, #48	; 0x30
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40005400 	.word	0x40005400
 8001684:	40021000 	.word	0x40021000
 8001688:	40010c00 	.word	0x40010c00
 800168c:	40010000 	.word	0x40010000
 8001690:	40005800 	.word	0x40005800

08001694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001698:	f000 fbee 	bl	8001e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800169c:	f000 f820 	bl	80016e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a0:	f7ff fd5e 	bl	8001160 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016a4:	f000 fb4e 	bl	8001d44 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80016a8:	f000 fa94 	bl	8001bd4 <MX_TIM2_Init>
  MX_I2C1_Init();
 80016ac:	f7ff ff1a 	bl	80014e4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80016b0:	f7ff ff46 	bl	8001540 <MX_I2C2_Init>
  MX_TIM1_Init();
 80016b4:	f000 f9ee 	bl	8001a94 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  PWM_Init(&htim1,48, 100);
 80016b8:	2264      	movs	r2, #100	; 0x64
 80016ba:	2130      	movs	r1, #48	; 0x30
 80016bc:	4806      	ldr	r0, [pc, #24]	; (80016d8 <main+0x44>)
 80016be:	f7ff fc37 	bl	8000f30 <PWM_Init>
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 80016c2:	4806      	ldr	r0, [pc, #24]	; (80016dc <main+0x48>)
 80016c4:	f002 fd40 	bl	8004148 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_init();
 80016c8:	f7ff fe62 	bl	8001390 <LCD_init>
  LCD_Set_Backlight(1);
 80016cc:	2001      	movs	r0, #1
 80016ce:	f7ff fd91 	bl	80011f4 <LCD_Set_Backlight>
  while (1)
  {
	  DHT20_FSM();
 80016d2:	f7ff fbb5 	bl	8000e40 <DHT20_FSM>
 80016d6:	e7fc      	b.n	80016d2 <main+0x3e>
 80016d8:	200002ac 	.word	0x200002ac
 80016dc:	200002f4 	.word	0x200002f4

080016e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b090      	sub	sp, #64	; 0x40
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	f107 0318 	add.w	r3, r7, #24
 80016ea:	2228      	movs	r2, #40	; 0x28
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f003 ff46 	bl	8005580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001702:	2301      	movs	r3, #1
 8001704:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001706:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800170a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001710:	2301      	movs	r3, #1
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001714:	2302      	movs	r3, #2
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800171c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800171e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001722:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001724:	f107 0318 	add.w	r3, r7, #24
 8001728:	4618      	mov	r0, r3
 800172a:	f002 f8af 	bl	800388c <HAL_RCC_OscConfig>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001734:	f000 f823 	bl	800177e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001738:	230f      	movs	r3, #15
 800173a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800173c:	2302      	movs	r3, #2
 800173e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2101      	movs	r1, #1
 8001752:	4618      	mov	r0, r3
 8001754:	f002 fb1a 	bl	8003d8c <HAL_RCC_ClockConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800175e:	f000 f80e 	bl	800177e <Error_Handler>
  }
}
 8001762:	bf00      	nop
 8001764:	3740      	adds	r7, #64	; 0x40
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
	//SCH_Update();
	timerRun();
 8001772:	f000 f823 	bl	80017bc <timerRun>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001782:	b672      	cpsid	i
}
 8001784:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001786:	e7fe      	b.n	8001786 <Error_Handler+0x8>

08001788 <setTimer1>:
int timer2_flag = 0;
int timer3_counter = 0;
int timer3_flag = 0;
int TIMER_CYCLE = 10;

void setTimer1(int duration){
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <setTimer1+0x28>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	fb92 f3f3 	sdiv	r3, r2, r3
 800179a:	4a06      	ldr	r2, [pc, #24]	; (80017b4 <setTimer1+0x2c>)
 800179c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <setTimer1+0x30>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000004 	.word	0x20000004
 80017b4:	20000288 	.word	0x20000288
 80017b8:	2000028c 	.word	0x2000028c

080017bc <timerRun>:

void setTimer3(int duration){
	timer3_counter = duration / TIMER_CYCLE;
	timer3_flag = 0;
}
void timerRun(){
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <timerRun+0x6c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	dd0b      	ble.n	80017e0 <timerRun+0x24>
		timer1_counter--;
 80017c8:	4b17      	ldr	r3, [pc, #92]	; (8001828 <timerRun+0x6c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	4a16      	ldr	r2, [pc, #88]	; (8001828 <timerRun+0x6c>)
 80017d0:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <timerRun+0x6c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <timerRun+0x24>
			timer1_flag = 1;
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <timerRun+0x70>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <timerRun+0x74>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	dd0b      	ble.n	8001800 <timerRun+0x44>
		timer2_counter--;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <timerRun+0x74>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	4a10      	ldr	r2, [pc, #64]	; (8001830 <timerRun+0x74>)
 80017f0:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <timerRun+0x74>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d102      	bne.n	8001800 <timerRun+0x44>
			timer2_flag = 1;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <timerRun+0x78>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8001800:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <timerRun+0x7c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	dd0b      	ble.n	8001820 <timerRun+0x64>
		timer3_counter--;
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <timerRun+0x7c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	3b01      	subs	r3, #1
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <timerRun+0x7c>)
 8001810:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0){
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <timerRun+0x7c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <timerRun+0x64>
			timer3_flag = 1;
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <timerRun+0x80>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	20000288 	.word	0x20000288
 800182c:	2000028c 	.word	0x2000028c
 8001830:	20000290 	.word	0x20000290
 8001834:	20000294 	.word	0x20000294
 8001838:	20000298 	.word	0x20000298
 800183c:	2000029c 	.word	0x2000029c

08001840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_MspInit+0x5c>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	4a14      	ldr	r2, [pc, #80]	; (800189c <HAL_MspInit+0x5c>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6193      	str	r3, [r2, #24]
 8001852:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_MspInit+0x5c>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_MspInit+0x5c>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a0e      	ldr	r2, [pc, #56]	; (800189c <HAL_MspInit+0x5c>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	61d3      	str	r3, [r2, #28]
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <HAL_MspInit+0x5c>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <HAL_MspInit+0x60>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <HAL_MspInit+0x60>)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001892:	bf00      	nop
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	40021000 	.word	0x40021000
 80018a0:	40010000 	.word	0x40010000

080018a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <NMI_Handler+0x4>

080018aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <HardFault_Handler+0x4>

080018b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <MemManage_Handler+0x4>

080018b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <BusFault_Handler+0x4>

080018bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <UsageFault_Handler+0x4>

080018c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ea:	f000 fb0b 	bl	8001f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <TIM2_IRQHandler+0x10>)
 80018fa:	f002 fe37 	bl	800456c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200002f4 	.word	0x200002f4

08001908 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
	return 1;
 800190c:	2301      	movs	r3, #1
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <_kill>:

int _kill(int pid, int sig)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001920:	f003 fe04 	bl	800552c <__errno>
 8001924:	4603      	mov	r3, r0
 8001926:	2216      	movs	r2, #22
 8001928:	601a      	str	r2, [r3, #0]
	return -1;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <_exit>:

void _exit (int status)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800193e:	f04f 31ff 	mov.w	r1, #4294967295
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ffe7 	bl	8001916 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001948:	e7fe      	b.n	8001948 <_exit+0x12>

0800194a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	e00a      	b.n	8001972 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800195c:	f3af 8000 	nop.w
 8001960:	4601      	mov	r1, r0
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	60ba      	str	r2, [r7, #8]
 8001968:	b2ca      	uxtb	r2, r1
 800196a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3301      	adds	r3, #1
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	429a      	cmp	r2, r3
 8001978:	dbf0      	blt.n	800195c <_read+0x12>
	}

return len;
 800197a:	687b      	ldr	r3, [r7, #4]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e009      	b.n	80019aa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	60ba      	str	r2, [r7, #8]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3301      	adds	r3, #1
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	dbf1      	blt.n	8001996 <_write+0x12>
	}
	return len;
 80019b2:	687b      	ldr	r3, [r7, #4]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_close>:

int _close(int file)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	return -1;
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e2:	605a      	str	r2, [r3, #4]
	return 0;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <_isatty>:

int _isatty(int file)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	return 1;
 80019f8:	2301      	movs	r3, #1
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
	return 0;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a24:	4a14      	ldr	r2, [pc, #80]	; (8001a78 <_sbrk+0x5c>)
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <_sbrk+0x60>)
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a30:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <_sbrk+0x64>)
 8001a3a:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <_sbrk+0x68>)
 8001a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d207      	bcs.n	8001a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a4c:	f003 fd6e 	bl	800552c <__errno>
 8001a50:	4603      	mov	r3, r0
 8001a52:	220c      	movs	r2, #12
 8001a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	e009      	b.n	8001a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <_sbrk+0x64>)
 8001a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20005000 	.word	0x20005000
 8001a7c:	00000400 	.word	0x00000400
 8001a80:	200002a0 	.word	0x200002a0
 8001a84:	20000448 	.word	0x20000448

08001a88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b096      	sub	sp, #88	; 0x58
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	611a      	str	r2, [r3, #16]
 8001ac2:	615a      	str	r2, [r3, #20]
 8001ac4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2220      	movs	r2, #32
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f003 fd57 	bl	8005580 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ad2:	4b3e      	ldr	r3, [pc, #248]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001ad4:	4a3e      	ldr	r2, [pc, #248]	; (8001bd0 <MX_TIM1_Init+0x13c>)
 8001ad6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ad8:	4b3c      	ldr	r3, [pc, #240]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ade:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ae4:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aec:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001af2:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af8:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001afe:	4833      	ldr	r0, [pc, #204]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001b00:	f002 fad2 	bl	80040a8 <HAL_TIM_Base_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b0a:	f7ff fe38 	bl	800177e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b12:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b18:	4619      	mov	r1, r3
 8001b1a:	482c      	ldr	r0, [pc, #176]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001b1c:	f002 fef0 	bl	8004900 <HAL_TIM_ConfigClockSource>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b26:	f7ff fe2a 	bl	800177e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b2a:	4828      	ldr	r0, [pc, #160]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001b2c:	f002 fb5e 	bl	80041ec <HAL_TIM_PWM_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b36:	f7ff fe22 	bl	800177e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b46:	4619      	mov	r1, r3
 8001b48:	4820      	ldr	r0, [pc, #128]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001b4a:	f003 fa5f 	bl	800500c <HAL_TIMEx_MasterConfigSynchronization>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b54:	f7ff fe13 	bl	800177e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b58:	2360      	movs	r3, #96	; 0x60
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b64:	2300      	movs	r3, #0
 8001b66:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b70:	2300      	movs	r3, #0
 8001b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b78:	2200      	movs	r2, #0
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4813      	ldr	r0, [pc, #76]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001b7e:	f002 fdfd 	bl	800477c <HAL_TIM_PWM_ConfigChannel>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001b88:	f7ff fdf9 	bl	800177e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	4619      	mov	r1, r3
 8001bae:	4807      	ldr	r0, [pc, #28]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001bb0:	f003 fa8a 	bl	80050c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001bba:	f7ff fde0 	bl	800177e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bbe:	4803      	ldr	r0, [pc, #12]	; (8001bcc <MX_TIM1_Init+0x138>)
 8001bc0:	f000 f88c 	bl	8001cdc <HAL_TIM_MspPostInit>

}
 8001bc4:	bf00      	nop
 8001bc6:	3758      	adds	r7, #88	; 0x58
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200002ac 	.word	0x200002ac
 8001bd0:	40012c00 	.word	0x40012c00

08001bd4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be8:	463b      	mov	r3, r7
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001bf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bf6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4799;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001bfa:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001bfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c08:	2263      	movs	r2, #99	; 0x63
 8001c0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c18:	4813      	ldr	r0, [pc, #76]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c1a:	f002 fa45 	bl	80040a8 <HAL_TIM_Base_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c24:	f7ff fdab 	bl	800177e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c2e:	f107 0308 	add.w	r3, r7, #8
 8001c32:	4619      	mov	r1, r3
 8001c34:	480c      	ldr	r0, [pc, #48]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c36:	f002 fe63 	bl	8004900 <HAL_TIM_ConfigClockSource>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c40:	f7ff fd9d 	bl	800177e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c44:	2300      	movs	r3, #0
 8001c46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <MX_TIM2_Init+0x94>)
 8001c52:	f003 f9db 	bl	800500c <HAL_TIMEx_MasterConfigSynchronization>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c5c:	f7ff fd8f 	bl	800177e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200002f4 	.word	0x200002f4

08001c6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a16      	ldr	r2, [pc, #88]	; (8001cd4 <HAL_TIM_Base_MspInit+0x68>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d10c      	bne.n	8001c98 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c7e:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <HAL_TIM_Base_MspInit+0x6c>)
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	4a15      	ldr	r2, [pc, #84]	; (8001cd8 <HAL_TIM_Base_MspInit+0x6c>)
 8001c84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c88:	6193      	str	r3, [r2, #24]
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <HAL_TIM_Base_MspInit+0x6c>)
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c96:	e018      	b.n	8001cca <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ca0:	d113      	bne.n	8001cca <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <HAL_TIM_Base_MspInit+0x6c>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a0c      	ldr	r2, [pc, #48]	; (8001cd8 <HAL_TIM_Base_MspInit+0x6c>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	61d3      	str	r3, [r2, #28]
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_TIM_Base_MspInit+0x6c>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	201c      	movs	r0, #28
 8001cc0:	f000 fa37 	bl	8002132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cc4:	201c      	movs	r0, #28
 8001cc6:	f000 fa50 	bl	800216a <HAL_NVIC_EnableIRQ>
}
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40012c00 	.word	0x40012c00
 8001cd8:	40021000 	.word	0x40021000

08001cdc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0310 	add.w	r3, r7, #16
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a10      	ldr	r2, [pc, #64]	; (8001d38 <HAL_TIM_MspPostInit+0x5c>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d118      	bne.n	8001d2e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_TIM_MspPostInit+0x60>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	4a0e      	ldr	r2, [pc, #56]	; (8001d3c <HAL_TIM_MspPostInit+0x60>)
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	6193      	str	r3, [r2, #24]
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <HAL_TIM_MspPostInit+0x60>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d22:	f107 0310 	add.w	r3, r7, #16
 8001d26:	4619      	mov	r1, r3
 8001d28:	4805      	ldr	r0, [pc, #20]	; (8001d40 <HAL_TIM_MspPostInit+0x64>)
 8001d2a:	f000 fab1 	bl	8002290 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d2e:	bf00      	nop
 8001d30:	3720      	adds	r7, #32
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40012c00 	.word	0x40012c00
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40010800 	.word	0x40010800

08001d44 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d4a:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <MX_USART2_UART_Init+0x50>)
 8001d4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <MX_USART2_UART_Init+0x4c>)
 8001d7c:	f003 fa07 	bl	800518e <HAL_UART_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d86:	f7ff fcfa 	bl	800177e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200003e8 	.word	0x200003e8
 8001d94:	40004400 	.word	0x40004400

08001d98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0310 	add.w	r3, r7, #16
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a1b      	ldr	r2, [pc, #108]	; (8001e20 <HAL_UART_MspInit+0x88>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d12f      	bne.n	8001e18 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001db8:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_UART_MspInit+0x8c>)
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	4a19      	ldr	r2, [pc, #100]	; (8001e24 <HAL_UART_MspInit+0x8c>)
 8001dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc2:	61d3      	str	r3, [r2, #28]
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_UART_MspInit+0x8c>)
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd0:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_UART_MspInit+0x8c>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	4a13      	ldr	r2, [pc, #76]	; (8001e24 <HAL_UART_MspInit+0x8c>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	6193      	str	r3, [r2, #24]
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_UART_MspInit+0x8c>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001de8:	2304      	movs	r3, #4
 8001dea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	f107 0310 	add.w	r3, r7, #16
 8001df8:	4619      	mov	r1, r3
 8001dfa:	480b      	ldr	r0, [pc, #44]	; (8001e28 <HAL_UART_MspInit+0x90>)
 8001dfc:	f000 fa48 	bl	8002290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e00:	2308      	movs	r3, #8
 8001e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 0310 	add.w	r3, r7, #16
 8001e10:	4619      	mov	r1, r3
 8001e12:	4805      	ldr	r0, [pc, #20]	; (8001e28 <HAL_UART_MspInit+0x90>)
 8001e14:	f000 fa3c 	bl	8002290 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e18:	bf00      	nop
 8001e1a:	3720      	adds	r7, #32
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40004400 	.word	0x40004400
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40010800 	.word	0x40010800

08001e2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e2c:	f7ff fe2c 	bl	8001a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e30:	480b      	ldr	r0, [pc, #44]	; (8001e60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e32:	490c      	ldr	r1, [pc, #48]	; (8001e64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e34:	4a0c      	ldr	r2, [pc, #48]	; (8001e68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e38:	e002      	b.n	8001e40 <LoopCopyDataInit>

08001e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3e:	3304      	adds	r3, #4

08001e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e44:	d3f9      	bcc.n	8001e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e46:	4a09      	ldr	r2, [pc, #36]	; (8001e6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e48:	4c09      	ldr	r4, [pc, #36]	; (8001e70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e4c:	e001      	b.n	8001e52 <LoopFillZerobss>

08001e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e50:	3204      	adds	r2, #4

08001e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e54:	d3fb      	bcc.n	8001e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e56:	f003 fb6f 	bl	8005538 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e5a:	f7ff fc1b 	bl	8001694 <main>
  bx lr
 8001e5e:	4770      	bx	lr
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e64:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001e68:	08008784 	.word	0x08008784
  ldr r2, =_sbss
 8001e6c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001e70:	20000444 	.word	0x20000444

08001e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC1_2_IRQHandler>
	...

08001e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_Init+0x28>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <HAL_Init+0x28>)
 8001e82:	f043 0310 	orr.w	r3, r3, #16
 8001e86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e88:	2003      	movs	r0, #3
 8001e8a:	f000 f947 	bl	800211c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8e:	200f      	movs	r0, #15
 8001e90:	f000 f808 	bl	8001ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e94:	f7ff fcd4 	bl	8001840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40022000 	.word	0x40022000

08001ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_InitTick+0x54>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_InitTick+0x58>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f95f 	bl	8002186 <HAL_SYSTICK_Config>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00e      	b.n	8001ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b0f      	cmp	r3, #15
 8001ed6:	d80a      	bhi.n	8001eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee0:	f000 f927 	bl	8002132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee4:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <HAL_InitTick+0x5c>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e000      	b.n	8001ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000008 	.word	0x20000008
 8001efc:	20000010 	.word	0x20000010
 8001f00:	2000000c 	.word	0x2000000c

08001f04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_IncTick+0x1c>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <HAL_IncTick+0x20>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	4a03      	ldr	r2, [pc, #12]	; (8001f24 <HAL_IncTick+0x20>)
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	20000010 	.word	0x20000010
 8001f24:	20000430 	.word	0x20000430

08001f28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f2c:	4b02      	ldr	r3, [pc, #8]	; (8001f38 <HAL_GetTick+0x10>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	20000430 	.word	0x20000430

08001f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff fff0 	bl	8001f28 <HAL_GetTick>
 8001f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f54:	d005      	beq.n	8001f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_Delay+0x44>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f62:	bf00      	nop
 8001f64:	f7ff ffe0 	bl	8001f28 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d8f7      	bhi.n	8001f64 <HAL_Delay+0x28>
  {
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000010 	.word	0x20000010

08001f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb6:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	60d3      	str	r3, [r2, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	f003 0307 	and.w	r3, r3, #7
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	db0b      	blt.n	8002012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	f003 021f 	and.w	r2, r3, #31
 8002000:	4906      	ldr	r1, [pc, #24]	; (800201c <__NVIC_EnableIRQ+0x34>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	2001      	movs	r0, #1
 800200a:	fa00 f202 	lsl.w	r2, r0, r2
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	e000e100 	.word	0xe000e100

08002020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	6039      	str	r1, [r7, #0]
 800202a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002030:	2b00      	cmp	r3, #0
 8002032:	db0a      	blt.n	800204a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	490c      	ldr	r1, [pc, #48]	; (800206c <__NVIC_SetPriority+0x4c>)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	0112      	lsls	r2, r2, #4
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	440b      	add	r3, r1
 8002044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002048:	e00a      	b.n	8002060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4908      	ldr	r1, [pc, #32]	; (8002070 <__NVIC_SetPriority+0x50>)
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	3b04      	subs	r3, #4
 8002058:	0112      	lsls	r2, r2, #4
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	440b      	add	r3, r1
 800205e:	761a      	strb	r2, [r3, #24]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000e100 	.word	0xe000e100
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f1c3 0307 	rsb	r3, r3, #7
 800208e:	2b04      	cmp	r3, #4
 8002090:	bf28      	it	cs
 8002092:	2304      	movcs	r3, #4
 8002094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3304      	adds	r3, #4
 800209a:	2b06      	cmp	r3, #6
 800209c:	d902      	bls.n	80020a4 <NVIC_EncodePriority+0x30>
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3b03      	subs	r3, #3
 80020a2:	e000      	b.n	80020a6 <NVIC_EncodePriority+0x32>
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43da      	mvns	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	401a      	ands	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020bc:	f04f 31ff 	mov.w	r1, #4294967295
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa01 f303 	lsl.w	r3, r1, r3
 80020c6:	43d9      	mvns	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	4313      	orrs	r3, r2
         );
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3724      	adds	r7, #36	; 0x24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e8:	d301      	bcc.n	80020ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00f      	b.n	800210e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <SysTick_Config+0x40>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f6:	210f      	movs	r1, #15
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f7ff ff90 	bl	8002020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <SysTick_Config+0x40>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002106:	4b04      	ldr	r3, [pc, #16]	; (8002118 <SysTick_Config+0x40>)
 8002108:	2207      	movs	r2, #7
 800210a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	e000e010 	.word	0xe000e010

0800211c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ff2d 	bl	8001f84 <__NVIC_SetPriorityGrouping>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002144:	f7ff ff42 	bl	8001fcc <__NVIC_GetPriorityGrouping>
 8002148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	6978      	ldr	r0, [r7, #20]
 8002150:	f7ff ff90 	bl	8002074 <NVIC_EncodePriority>
 8002154:	4602      	mov	r2, r0
 8002156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff5f 	bl	8002020 <__NVIC_SetPriority>
}
 8002162:	bf00      	nop
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	4603      	mov	r3, r0
 8002172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff35 	bl	8001fe8 <__NVIC_EnableIRQ>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ffa2 	bl	80020d8 <SysTick_Config>
 8002194:	4603      	mov	r3, r0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d005      	beq.n	80021c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2204      	movs	r2, #4
 80021bc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	73fb      	strb	r3, [r7, #15]
 80021c2:	e051      	b.n	8002268 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 020e 	bic.w	r2, r2, #14
 80021d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a22      	ldr	r2, [pc, #136]	; (8002274 <HAL_DMA_Abort_IT+0xd4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d029      	beq.n	8002242 <HAL_DMA_Abort_IT+0xa2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a21      	ldr	r2, [pc, #132]	; (8002278 <HAL_DMA_Abort_IT+0xd8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d022      	beq.n	800223e <HAL_DMA_Abort_IT+0x9e>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a1f      	ldr	r2, [pc, #124]	; (800227c <HAL_DMA_Abort_IT+0xdc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d01a      	beq.n	8002238 <HAL_DMA_Abort_IT+0x98>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a1e      	ldr	r2, [pc, #120]	; (8002280 <HAL_DMA_Abort_IT+0xe0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d012      	beq.n	8002232 <HAL_DMA_Abort_IT+0x92>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a1c      	ldr	r2, [pc, #112]	; (8002284 <HAL_DMA_Abort_IT+0xe4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d00a      	beq.n	800222c <HAL_DMA_Abort_IT+0x8c>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a1b      	ldr	r2, [pc, #108]	; (8002288 <HAL_DMA_Abort_IT+0xe8>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d102      	bne.n	8002226 <HAL_DMA_Abort_IT+0x86>
 8002220:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002224:	e00e      	b.n	8002244 <HAL_DMA_Abort_IT+0xa4>
 8002226:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800222a:	e00b      	b.n	8002244 <HAL_DMA_Abort_IT+0xa4>
 800222c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002230:	e008      	b.n	8002244 <HAL_DMA_Abort_IT+0xa4>
 8002232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002236:	e005      	b.n	8002244 <HAL_DMA_Abort_IT+0xa4>
 8002238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800223c:	e002      	b.n	8002244 <HAL_DMA_Abort_IT+0xa4>
 800223e:	2310      	movs	r3, #16
 8002240:	e000      	b.n	8002244 <HAL_DMA_Abort_IT+0xa4>
 8002242:	2301      	movs	r3, #1
 8002244:	4a11      	ldr	r2, [pc, #68]	; (800228c <HAL_DMA_Abort_IT+0xec>)
 8002246:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	4798      	blx	r3
    } 
  }
  return status;
 8002268:	7bfb      	ldrb	r3, [r7, #15]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40020008 	.word	0x40020008
 8002278:	4002001c 	.word	0x4002001c
 800227c:	40020030 	.word	0x40020030
 8002280:	40020044 	.word	0x40020044
 8002284:	40020058 	.word	0x40020058
 8002288:	4002006c 	.word	0x4002006c
 800228c:	40020000 	.word	0x40020000

08002290 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002290:	b480      	push	{r7}
 8002292:	b08b      	sub	sp, #44	; 0x2c
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800229a:	2300      	movs	r3, #0
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800229e:	2300      	movs	r3, #0
 80022a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a2:	e169      	b.n	8002578 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022a4:	2201      	movs	r2, #1
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	69fa      	ldr	r2, [r7, #28]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	429a      	cmp	r2, r3
 80022be:	f040 8158 	bne.w	8002572 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	4a9a      	ldr	r2, [pc, #616]	; (8002530 <HAL_GPIO_Init+0x2a0>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d05e      	beq.n	800238a <HAL_GPIO_Init+0xfa>
 80022cc:	4a98      	ldr	r2, [pc, #608]	; (8002530 <HAL_GPIO_Init+0x2a0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d875      	bhi.n	80023be <HAL_GPIO_Init+0x12e>
 80022d2:	4a98      	ldr	r2, [pc, #608]	; (8002534 <HAL_GPIO_Init+0x2a4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d058      	beq.n	800238a <HAL_GPIO_Init+0xfa>
 80022d8:	4a96      	ldr	r2, [pc, #600]	; (8002534 <HAL_GPIO_Init+0x2a4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d86f      	bhi.n	80023be <HAL_GPIO_Init+0x12e>
 80022de:	4a96      	ldr	r2, [pc, #600]	; (8002538 <HAL_GPIO_Init+0x2a8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d052      	beq.n	800238a <HAL_GPIO_Init+0xfa>
 80022e4:	4a94      	ldr	r2, [pc, #592]	; (8002538 <HAL_GPIO_Init+0x2a8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d869      	bhi.n	80023be <HAL_GPIO_Init+0x12e>
 80022ea:	4a94      	ldr	r2, [pc, #592]	; (800253c <HAL_GPIO_Init+0x2ac>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d04c      	beq.n	800238a <HAL_GPIO_Init+0xfa>
 80022f0:	4a92      	ldr	r2, [pc, #584]	; (800253c <HAL_GPIO_Init+0x2ac>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d863      	bhi.n	80023be <HAL_GPIO_Init+0x12e>
 80022f6:	4a92      	ldr	r2, [pc, #584]	; (8002540 <HAL_GPIO_Init+0x2b0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d046      	beq.n	800238a <HAL_GPIO_Init+0xfa>
 80022fc:	4a90      	ldr	r2, [pc, #576]	; (8002540 <HAL_GPIO_Init+0x2b0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d85d      	bhi.n	80023be <HAL_GPIO_Init+0x12e>
 8002302:	2b12      	cmp	r3, #18
 8002304:	d82a      	bhi.n	800235c <HAL_GPIO_Init+0xcc>
 8002306:	2b12      	cmp	r3, #18
 8002308:	d859      	bhi.n	80023be <HAL_GPIO_Init+0x12e>
 800230a:	a201      	add	r2, pc, #4	; (adr r2, 8002310 <HAL_GPIO_Init+0x80>)
 800230c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002310:	0800238b 	.word	0x0800238b
 8002314:	08002365 	.word	0x08002365
 8002318:	08002377 	.word	0x08002377
 800231c:	080023b9 	.word	0x080023b9
 8002320:	080023bf 	.word	0x080023bf
 8002324:	080023bf 	.word	0x080023bf
 8002328:	080023bf 	.word	0x080023bf
 800232c:	080023bf 	.word	0x080023bf
 8002330:	080023bf 	.word	0x080023bf
 8002334:	080023bf 	.word	0x080023bf
 8002338:	080023bf 	.word	0x080023bf
 800233c:	080023bf 	.word	0x080023bf
 8002340:	080023bf 	.word	0x080023bf
 8002344:	080023bf 	.word	0x080023bf
 8002348:	080023bf 	.word	0x080023bf
 800234c:	080023bf 	.word	0x080023bf
 8002350:	080023bf 	.word	0x080023bf
 8002354:	0800236d 	.word	0x0800236d
 8002358:	08002381 	.word	0x08002381
 800235c:	4a79      	ldr	r2, [pc, #484]	; (8002544 <HAL_GPIO_Init+0x2b4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002362:	e02c      	b.n	80023be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	623b      	str	r3, [r7, #32]
          break;
 800236a:	e029      	b.n	80023c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	3304      	adds	r3, #4
 8002372:	623b      	str	r3, [r7, #32]
          break;
 8002374:	e024      	b.n	80023c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	3308      	adds	r3, #8
 800237c:	623b      	str	r3, [r7, #32]
          break;
 800237e:	e01f      	b.n	80023c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	330c      	adds	r3, #12
 8002386:	623b      	str	r3, [r7, #32]
          break;
 8002388:	e01a      	b.n	80023c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d102      	bne.n	8002398 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002392:	2304      	movs	r3, #4
 8002394:	623b      	str	r3, [r7, #32]
          break;
 8002396:	e013      	b.n	80023c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d105      	bne.n	80023ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023a0:	2308      	movs	r3, #8
 80023a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69fa      	ldr	r2, [r7, #28]
 80023a8:	611a      	str	r2, [r3, #16]
          break;
 80023aa:	e009      	b.n	80023c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023ac:	2308      	movs	r3, #8
 80023ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	615a      	str	r2, [r3, #20]
          break;
 80023b6:	e003      	b.n	80023c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023b8:	2300      	movs	r3, #0
 80023ba:	623b      	str	r3, [r7, #32]
          break;
 80023bc:	e000      	b.n	80023c0 <HAL_GPIO_Init+0x130>
          break;
 80023be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2bff      	cmp	r3, #255	; 0xff
 80023c4:	d801      	bhi.n	80023ca <HAL_GPIO_Init+0x13a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	e001      	b.n	80023ce <HAL_GPIO_Init+0x13e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3304      	adds	r3, #4
 80023ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	2bff      	cmp	r3, #255	; 0xff
 80023d4:	d802      	bhi.n	80023dc <HAL_GPIO_Init+0x14c>
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	e002      	b.n	80023e2 <HAL_GPIO_Init+0x152>
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	3b08      	subs	r3, #8
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	210f      	movs	r1, #15
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	fa01 f303 	lsl.w	r3, r1, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	401a      	ands	r2, r3
 80023f4:	6a39      	ldr	r1, [r7, #32]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	fa01 f303 	lsl.w	r3, r1, r3
 80023fc:	431a      	orrs	r2, r3
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 80b1 	beq.w	8002572 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002410:	4b4d      	ldr	r3, [pc, #308]	; (8002548 <HAL_GPIO_Init+0x2b8>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	4a4c      	ldr	r2, [pc, #304]	; (8002548 <HAL_GPIO_Init+0x2b8>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6193      	str	r3, [r2, #24]
 800241c:	4b4a      	ldr	r3, [pc, #296]	; (8002548 <HAL_GPIO_Init+0x2b8>)
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002428:	4a48      	ldr	r2, [pc, #288]	; (800254c <HAL_GPIO_Init+0x2bc>)
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	089b      	lsrs	r3, r3, #2
 800242e:	3302      	adds	r3, #2
 8002430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002434:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	220f      	movs	r2, #15
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4013      	ands	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a40      	ldr	r2, [pc, #256]	; (8002550 <HAL_GPIO_Init+0x2c0>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d013      	beq.n	800247c <HAL_GPIO_Init+0x1ec>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a3f      	ldr	r2, [pc, #252]	; (8002554 <HAL_GPIO_Init+0x2c4>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d00d      	beq.n	8002478 <HAL_GPIO_Init+0x1e8>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a3e      	ldr	r2, [pc, #248]	; (8002558 <HAL_GPIO_Init+0x2c8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d007      	beq.n	8002474 <HAL_GPIO_Init+0x1e4>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a3d      	ldr	r2, [pc, #244]	; (800255c <HAL_GPIO_Init+0x2cc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d101      	bne.n	8002470 <HAL_GPIO_Init+0x1e0>
 800246c:	2303      	movs	r3, #3
 800246e:	e006      	b.n	800247e <HAL_GPIO_Init+0x1ee>
 8002470:	2304      	movs	r3, #4
 8002472:	e004      	b.n	800247e <HAL_GPIO_Init+0x1ee>
 8002474:	2302      	movs	r3, #2
 8002476:	e002      	b.n	800247e <HAL_GPIO_Init+0x1ee>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <HAL_GPIO_Init+0x1ee>
 800247c:	2300      	movs	r3, #0
 800247e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002480:	f002 0203 	and.w	r2, r2, #3
 8002484:	0092      	lsls	r2, r2, #2
 8002486:	4093      	lsls	r3, r2
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800248e:	492f      	ldr	r1, [pc, #188]	; (800254c <HAL_GPIO_Init+0x2bc>)
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	089b      	lsrs	r3, r3, #2
 8002494:	3302      	adds	r3, #2
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d006      	beq.n	80024b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024a8:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <HAL_GPIO_Init+0x2d0>)
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	492c      	ldr	r1, [pc, #176]	; (8002560 <HAL_GPIO_Init+0x2d0>)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	608b      	str	r3, [r1, #8]
 80024b4:	e006      	b.n	80024c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024b6:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <HAL_GPIO_Init+0x2d0>)
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	43db      	mvns	r3, r3
 80024be:	4928      	ldr	r1, [pc, #160]	; (8002560 <HAL_GPIO_Init+0x2d0>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d006      	beq.n	80024de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024d0:	4b23      	ldr	r3, [pc, #140]	; (8002560 <HAL_GPIO_Init+0x2d0>)
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	4922      	ldr	r1, [pc, #136]	; (8002560 <HAL_GPIO_Init+0x2d0>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	60cb      	str	r3, [r1, #12]
 80024dc:	e006      	b.n	80024ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <HAL_GPIO_Init+0x2d0>)
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	491e      	ldr	r1, [pc, #120]	; (8002560 <HAL_GPIO_Init+0x2d0>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d006      	beq.n	8002506 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_GPIO_Init+0x2d0>)
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	4918      	ldr	r1, [pc, #96]	; (8002560 <HAL_GPIO_Init+0x2d0>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
 8002504:	e006      	b.n	8002514 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002506:	4b16      	ldr	r3, [pc, #88]	; (8002560 <HAL_GPIO_Init+0x2d0>)
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	43db      	mvns	r3, r3
 800250e:	4914      	ldr	r1, [pc, #80]	; (8002560 <HAL_GPIO_Init+0x2d0>)
 8002510:	4013      	ands	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d021      	beq.n	8002564 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002520:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <HAL_GPIO_Init+0x2d0>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	490e      	ldr	r1, [pc, #56]	; (8002560 <HAL_GPIO_Init+0x2d0>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	600b      	str	r3, [r1, #0]
 800252c:	e021      	b.n	8002572 <HAL_GPIO_Init+0x2e2>
 800252e:	bf00      	nop
 8002530:	10320000 	.word	0x10320000
 8002534:	10310000 	.word	0x10310000
 8002538:	10220000 	.word	0x10220000
 800253c:	10210000 	.word	0x10210000
 8002540:	10120000 	.word	0x10120000
 8002544:	10110000 	.word	0x10110000
 8002548:	40021000 	.word	0x40021000
 800254c:	40010000 	.word	0x40010000
 8002550:	40010800 	.word	0x40010800
 8002554:	40010c00 	.word	0x40010c00
 8002558:	40011000 	.word	0x40011000
 800255c:	40011400 	.word	0x40011400
 8002560:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_GPIO_Init+0x304>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	43db      	mvns	r3, r3
 800256c:	4909      	ldr	r1, [pc, #36]	; (8002594 <HAL_GPIO_Init+0x304>)
 800256e:	4013      	ands	r3, r2
 8002570:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	3301      	adds	r3, #1
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	fa22 f303 	lsr.w	r3, r2, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	f47f ae8e 	bne.w	80022a4 <HAL_GPIO_Init+0x14>
  }
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	372c      	adds	r7, #44	; 0x2c
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	40010400 	.word	0x40010400

08002598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	807b      	strh	r3, [r7, #2]
 80025a4:	4613      	mov	r3, r2
 80025a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025a8:	787b      	ldrb	r3, [r7, #1]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ae:	887a      	ldrh	r2, [r7, #2]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025b4:	e003      	b.n	80025be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025b6:	887b      	ldrh	r3, [r7, #2]
 80025b8:	041a      	lsls	r2, r3, #16
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	611a      	str	r2, [r3, #16]
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e12b      	b.n	8002832 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe ffd4 	bl	800159c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2224      	movs	r2, #36	; 0x24
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0201 	bic.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800261a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800262a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800262c:	f001 fcf6 	bl	800401c <HAL_RCC_GetPCLK1Freq>
 8002630:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4a81      	ldr	r2, [pc, #516]	; (800283c <HAL_I2C_Init+0x274>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d807      	bhi.n	800264c <HAL_I2C_Init+0x84>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4a80      	ldr	r2, [pc, #512]	; (8002840 <HAL_I2C_Init+0x278>)
 8002640:	4293      	cmp	r3, r2
 8002642:	bf94      	ite	ls
 8002644:	2301      	movls	r3, #1
 8002646:	2300      	movhi	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	e006      	b.n	800265a <HAL_I2C_Init+0x92>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4a7d      	ldr	r2, [pc, #500]	; (8002844 <HAL_I2C_Init+0x27c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	bf94      	ite	ls
 8002654:	2301      	movls	r3, #1
 8002656:	2300      	movhi	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e0e7      	b.n	8002832 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4a78      	ldr	r2, [pc, #480]	; (8002848 <HAL_I2C_Init+0x280>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	0c9b      	lsrs	r3, r3, #18
 800266c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4a6a      	ldr	r2, [pc, #424]	; (800283c <HAL_I2C_Init+0x274>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d802      	bhi.n	800269c <HAL_I2C_Init+0xd4>
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	3301      	adds	r3, #1
 800269a:	e009      	b.n	80026b0 <HAL_I2C_Init+0xe8>
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026a2:	fb02 f303 	mul.w	r3, r2, r3
 80026a6:	4a69      	ldr	r2, [pc, #420]	; (800284c <HAL_I2C_Init+0x284>)
 80026a8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	3301      	adds	r3, #1
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	430b      	orrs	r3, r1
 80026b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	495c      	ldr	r1, [pc, #368]	; (800283c <HAL_I2C_Init+0x274>)
 80026cc:	428b      	cmp	r3, r1
 80026ce:	d819      	bhi.n	8002704 <HAL_I2C_Init+0x13c>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1e59      	subs	r1, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	fbb1 f3f3 	udiv	r3, r1, r3
 80026de:	1c59      	adds	r1, r3, #1
 80026e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026e4:	400b      	ands	r3, r1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_I2C_Init+0x138>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1e59      	subs	r1, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fe:	e051      	b.n	80027a4 <HAL_I2C_Init+0x1dc>
 8002700:	2304      	movs	r3, #4
 8002702:	e04f      	b.n	80027a4 <HAL_I2C_Init+0x1dc>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d111      	bne.n	8002730 <HAL_I2C_Init+0x168>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1e58      	subs	r0, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6859      	ldr	r1, [r3, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	440b      	add	r3, r1
 800271a:	fbb0 f3f3 	udiv	r3, r0, r3
 800271e:	3301      	adds	r3, #1
 8002720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002724:	2b00      	cmp	r3, #0
 8002726:	bf0c      	ite	eq
 8002728:	2301      	moveq	r3, #1
 800272a:	2300      	movne	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	e012      	b.n	8002756 <HAL_I2C_Init+0x18e>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1e58      	subs	r0, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	0099      	lsls	r1, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	fbb0 f3f3 	udiv	r3, r0, r3
 8002746:	3301      	adds	r3, #1
 8002748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800274c:	2b00      	cmp	r3, #0
 800274e:	bf0c      	ite	eq
 8002750:	2301      	moveq	r3, #1
 8002752:	2300      	movne	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_I2C_Init+0x196>
 800275a:	2301      	movs	r3, #1
 800275c:	e022      	b.n	80027a4 <HAL_I2C_Init+0x1dc>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10e      	bne.n	8002784 <HAL_I2C_Init+0x1bc>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1e58      	subs	r0, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6859      	ldr	r1, [r3, #4]
 800276e:	460b      	mov	r3, r1
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	440b      	add	r3, r1
 8002774:	fbb0 f3f3 	udiv	r3, r0, r3
 8002778:	3301      	adds	r3, #1
 800277a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800277e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002782:	e00f      	b.n	80027a4 <HAL_I2C_Init+0x1dc>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1e58      	subs	r0, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	0099      	lsls	r1, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	fbb0 f3f3 	udiv	r3, r0, r3
 800279a:	3301      	adds	r3, #1
 800279c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	6809      	ldr	r1, [r1, #0]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69da      	ldr	r2, [r3, #28]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6911      	ldr	r1, [r2, #16]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68d2      	ldr	r2, [r2, #12]
 80027de:	4311      	orrs	r1, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	430b      	orrs	r3, r1
 80027e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695a      	ldr	r2, [r3, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	000186a0 	.word	0x000186a0
 8002840:	001e847f 	.word	0x001e847f
 8002844:	003d08ff 	.word	0x003d08ff
 8002848:	431bde83 	.word	0x431bde83
 800284c:	10624dd3 	.word	0x10624dd3

08002850 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af02      	add	r7, sp, #8
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	607a      	str	r2, [r7, #4]
 800285a:	461a      	mov	r2, r3
 800285c:	460b      	mov	r3, r1
 800285e:	817b      	strh	r3, [r7, #10]
 8002860:	4613      	mov	r3, r2
 8002862:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002864:	f7ff fb60 	bl	8001f28 <HAL_GetTick>
 8002868:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b20      	cmp	r3, #32
 8002874:	f040 80e0 	bne.w	8002a38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2319      	movs	r3, #25
 800287e:	2201      	movs	r2, #1
 8002880:	4970      	ldr	r1, [pc, #448]	; (8002a44 <HAL_I2C_Master_Transmit+0x1f4>)
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fdcc 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800288e:	2302      	movs	r3, #2
 8002890:	e0d3      	b.n	8002a3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_I2C_Master_Transmit+0x50>
 800289c:	2302      	movs	r3, #2
 800289e:	e0cc      	b.n	8002a3a <HAL_I2C_Master_Transmit+0x1ea>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d007      	beq.n	80028c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0201 	orr.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2221      	movs	r2, #33	; 0x21
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2210      	movs	r2, #16
 80028e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	893a      	ldrh	r2, [r7, #8]
 80028f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4a50      	ldr	r2, [pc, #320]	; (8002a48 <HAL_I2C_Master_Transmit+0x1f8>)
 8002906:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002908:	8979      	ldrh	r1, [r7, #10]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	6a3a      	ldr	r2, [r7, #32]
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 fc36 	bl	8003180 <I2C_MasterRequestWrite>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e08d      	b.n	8002a3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002934:	e066      	b.n	8002a04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	6a39      	ldr	r1, [r7, #32]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 fe8a 	bl	8003654 <I2C_WaitOnTXEFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00d      	beq.n	8002962 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	2b04      	cmp	r3, #4
 800294c:	d107      	bne.n	800295e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800295c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e06b      	b.n	8002a3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	781a      	ldrb	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297c:	b29b      	uxth	r3, r3
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298a:	3b01      	subs	r3, #1
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b04      	cmp	r3, #4
 800299e:	d11b      	bne.n	80029d8 <HAL_I2C_Master_Transmit+0x188>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d017      	beq.n	80029d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	781a      	ldrb	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	6a39      	ldr	r1, [r7, #32]
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 fe81 	bl	80036e4 <I2C_WaitOnBTFFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00d      	beq.n	8002a04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d107      	bne.n	8002a00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e01a      	b.n	8002a3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d194      	bne.n	8002936 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	e000      	b.n	8002a3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a38:	2302      	movs	r3, #2
  }
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	00100002 	.word	0x00100002
 8002a48:	ffff0000 	.word	0xffff0000

08002a4c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08c      	sub	sp, #48	; 0x30
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	461a      	mov	r2, r3
 8002a58:	460b      	mov	r3, r1
 8002a5a:	817b      	strh	r3, [r7, #10]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a64:	f7ff fa60 	bl	8001f28 <HAL_GetTick>
 8002a68:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	f040 824b 	bne.w	8002f0e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	2319      	movs	r3, #25
 8002a7e:	2201      	movs	r2, #1
 8002a80:	497f      	ldr	r1, [pc, #508]	; (8002c80 <HAL_I2C_Master_Receive+0x234>)
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 fccc 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e23e      	b.n	8002f10 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_I2C_Master_Receive+0x54>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e237      	b.n	8002f10 <HAL_I2C_Master_Receive+0x4c4>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d007      	beq.n	8002ac6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 0201 	orr.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ad4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2222      	movs	r2, #34	; 0x22
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2210      	movs	r2, #16
 8002ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	893a      	ldrh	r2, [r7, #8]
 8002af6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4a5f      	ldr	r2, [pc, #380]	; (8002c84 <HAL_I2C_Master_Receive+0x238>)
 8002b06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b08:	8979      	ldrh	r1, [r7, #10]
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 fbb8 	bl	8003284 <I2C_MasterRequestRead>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e1f8      	b.n	8002f10 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d113      	bne.n	8002b4e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	61fb      	str	r3, [r7, #28]
 8002b3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	e1cc      	b.n	8002ee8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d11e      	bne.n	8002b94 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b66:	b672      	cpsid	i
}
 8002b68:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	61bb      	str	r3, [r7, #24]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b90:	b662      	cpsie	i
}
 8002b92:	e035      	b.n	8002c00 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d11e      	bne.n	8002bda <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002baa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bac:	b672      	cpsid	i
}
 8002bae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002bd6:	b662      	cpsie	i
}
 8002bd8:	e012      	b.n	8002c00 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002be8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002c00:	e172      	b.n	8002ee8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	f200 811f 	bhi.w	8002e4a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d123      	bne.n	8002c5c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 fdab 	bl	8003774 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e173      	b.n	8002f10 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c5a:	e145      	b.n	8002ee8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d152      	bne.n	8002d0a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	4906      	ldr	r1, [pc, #24]	; (8002c88 <HAL_I2C_Master_Receive+0x23c>)
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 fbd6 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e148      	b.n	8002f10 <HAL_I2C_Master_Receive+0x4c4>
 8002c7e:	bf00      	nop
 8002c80:	00100002 	.word	0x00100002
 8002c84:	ffff0000 	.word	0xffff0000
 8002c88:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002c8c:	b672      	cpsid	i
}
 8002c8e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002cd2:	b662      	cpsie	i
}
 8002cd4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d08:	e0ee      	b.n	8002ee8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d10:	2200      	movs	r2, #0
 8002d12:	4981      	ldr	r1, [pc, #516]	; (8002f18 <HAL_I2C_Master_Receive+0x4cc>)
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 fb83 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0f5      	b.n	8002f10 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d34:	b672      	cpsid	i
}
 8002d36:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d6a:	4b6c      	ldr	r3, [pc, #432]	; (8002f1c <HAL_I2C_Master_Receive+0x4d0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	08db      	lsrs	r3, r3, #3
 8002d70:	4a6b      	ldr	r2, [pc, #428]	; (8002f20 <HAL_I2C_Master_Receive+0x4d4>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	0a1a      	lsrs	r2, r3, #8
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00da      	lsls	r2, r3, #3
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d118      	bne.n	8002dc2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f043 0220 	orr.w	r2, r3, #32
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002db2:	b662      	cpsie	i
}
 8002db4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e0a6      	b.n	8002f10 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d1d9      	bne.n	8002d84 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e12:	b662      	cpsie	i
}
 8002e14:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e48:	e04e      	b.n	8002ee8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fc90 	bl	8003774 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e058      	b.n	8002f10 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d124      	bne.n	8002ee8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d107      	bne.n	8002eb6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f47f ae88 	bne.w	8002c02 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e000      	b.n	8002f10 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002f0e:	2302      	movs	r3, #2
  }
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3728      	adds	r7, #40	; 0x28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	00010004 	.word	0x00010004
 8002f1c:	20000008 	.word	0x20000008
 8002f20:	14f8b589 	.word	0x14f8b589

08002f24 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	; 0x28
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	607a      	str	r2, [r7, #4]
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	460b      	mov	r3, r1
 8002f32:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f34:	f7fe fff8 	bl	8001f28 <HAL_GetTick>
 8002f38:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	f040 8111 	bne.w	800316e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	2319      	movs	r3, #25
 8002f52:	2201      	movs	r2, #1
 8002f54:	4988      	ldr	r1, [pc, #544]	; (8003178 <HAL_I2C_IsDeviceReady+0x254>)
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 fa62 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002f62:	2302      	movs	r3, #2
 8002f64:	e104      	b.n	8003170 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_I2C_IsDeviceReady+0x50>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e0fd      	b.n	8003170 <HAL_I2C_IsDeviceReady+0x24c>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d007      	beq.n	8002f9a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2224      	movs	r2, #36	; 0x24
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4a70      	ldr	r2, [pc, #448]	; (800317c <HAL_I2C_IsDeviceReady+0x258>)
 8002fbc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fcc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 fa20 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00d      	beq.n	8003002 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff4:	d103      	bne.n	8002ffe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e0b6      	b.n	8003170 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003002:	897b      	ldrh	r3, [r7, #10]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003010:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003012:	f7fe ff89 	bl	8001f28 <HAL_GetTick>
 8003016:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b02      	cmp	r3, #2
 8003024:	bf0c      	ite	eq
 8003026:	2301      	moveq	r3, #1
 8003028:	2300      	movne	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303c:	bf0c      	ite	eq
 800303e:	2301      	moveq	r3, #1
 8003040:	2300      	movne	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003046:	e025      	b.n	8003094 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003048:	f7fe ff6e 	bl	8001f28 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d302      	bcc.n	800305e <HAL_I2C_IsDeviceReady+0x13a>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d103      	bne.n	8003066 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	22a0      	movs	r2, #160	; 0xa0
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b02      	cmp	r3, #2
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2ba0      	cmp	r3, #160	; 0xa0
 800309e:	d005      	beq.n	80030ac <HAL_I2C_IsDeviceReady+0x188>
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d102      	bne.n	80030ac <HAL_I2C_IsDeviceReady+0x188>
 80030a6:	7dbb      	ldrb	r3, [r7, #22]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0cd      	beq.n	8003048 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d129      	bne.n	8003116 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	2319      	movs	r3, #25
 80030ee:	2201      	movs	r2, #1
 80030f0:	4921      	ldr	r1, [pc, #132]	; (8003178 <HAL_I2C_IsDeviceReady+0x254>)
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 f994 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e036      	b.n	8003170 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	e02c      	b.n	8003170 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003124:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800312e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	2319      	movs	r3, #25
 8003136:	2201      	movs	r2, #1
 8003138:	490f      	ldr	r1, [pc, #60]	; (8003178 <HAL_I2C_IsDeviceReady+0x254>)
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f970 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e012      	b.n	8003170 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	3301      	adds	r3, #1
 800314e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	429a      	cmp	r2, r3
 8003156:	f4ff af32 	bcc.w	8002fbe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800316e:	2302      	movs	r3, #2
  }
}
 8003170:	4618      	mov	r0, r3
 8003172:	3720      	adds	r7, #32
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	00100002 	.word	0x00100002
 800317c:	ffff0000 	.word	0xffff0000

08003180 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af02      	add	r7, sp, #8
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	460b      	mov	r3, r1
 800318e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003194:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2b08      	cmp	r3, #8
 800319a:	d006      	beq.n	80031aa <I2C_MasterRequestWrite+0x2a>
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d003      	beq.n	80031aa <I2C_MasterRequestWrite+0x2a>
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031a8:	d108      	bne.n	80031bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	e00b      	b.n	80031d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	2b12      	cmp	r3, #18
 80031c2:	d107      	bne.n	80031d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 f91d 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00d      	beq.n	8003208 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031fa:	d103      	bne.n	8003204 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003202:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e035      	b.n	8003274 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003210:	d108      	bne.n	8003224 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003212:	897b      	ldrh	r3, [r7, #10]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	461a      	mov	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003220:	611a      	str	r2, [r3, #16]
 8003222:	e01b      	b.n	800325c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003224:	897b      	ldrh	r3, [r7, #10]
 8003226:	11db      	asrs	r3, r3, #7
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f003 0306 	and.w	r3, r3, #6
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f063 030f 	orn	r3, r3, #15
 8003234:	b2da      	uxtb	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	490e      	ldr	r1, [pc, #56]	; (800327c <I2C_MasterRequestWrite+0xfc>)
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f966 	bl	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e010      	b.n	8003274 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003252:	897b      	ldrh	r3, [r7, #10]
 8003254:	b2da      	uxtb	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	4907      	ldr	r1, [pc, #28]	; (8003280 <I2C_MasterRequestWrite+0x100>)
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 f956 	bl	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	00010008 	.word	0x00010008
 8003280:	00010002 	.word	0x00010002

08003284 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af02      	add	r7, sp, #8
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	607a      	str	r2, [r7, #4]
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	460b      	mov	r3, r1
 8003292:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d006      	beq.n	80032be <I2C_MasterRequestRead+0x3a>
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d003      	beq.n	80032be <I2C_MasterRequestRead+0x3a>
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032bc:	d108      	bne.n	80032d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	e00b      	b.n	80032e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	2b11      	cmp	r3, #17
 80032d6:	d107      	bne.n	80032e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 f893 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00d      	beq.n	800331c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800330e:	d103      	bne.n	8003318 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003316:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e079      	b.n	8003410 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003324:	d108      	bne.n	8003338 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003326:	897b      	ldrh	r3, [r7, #10]
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	b2da      	uxtb	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	611a      	str	r2, [r3, #16]
 8003336:	e05f      	b.n	80033f8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003338:	897b      	ldrh	r3, [r7, #10]
 800333a:	11db      	asrs	r3, r3, #7
 800333c:	b2db      	uxtb	r3, r3
 800333e:	f003 0306 	and.w	r3, r3, #6
 8003342:	b2db      	uxtb	r3, r3
 8003344:	f063 030f 	orn	r3, r3, #15
 8003348:	b2da      	uxtb	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	4930      	ldr	r1, [pc, #192]	; (8003418 <I2C_MasterRequestRead+0x194>)
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f8dc 	bl	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e054      	b.n	8003410 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003366:	897b      	ldrh	r3, [r7, #10]
 8003368:	b2da      	uxtb	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	4929      	ldr	r1, [pc, #164]	; (800341c <I2C_MasterRequestRead+0x198>)
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f8cc 	bl	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e044      	b.n	8003410 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033aa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f831 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00d      	beq.n	80033e0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d2:	d103      	bne.n	80033dc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033da:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e017      	b.n	8003410 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80033e0:	897b      	ldrh	r3, [r7, #10]
 80033e2:	11db      	asrs	r3, r3, #7
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	f003 0306 	and.w	r3, r3, #6
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f063 030e 	orn	r3, r3, #14
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4907      	ldr	r1, [pc, #28]	; (800341c <I2C_MasterRequestRead+0x198>)
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f888 	bl	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	00010008 	.word	0x00010008
 800341c:	00010002 	.word	0x00010002

08003420 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003430:	e048      	b.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003438:	d044      	beq.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800343a:	f7fe fd75 	bl	8001f28 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d302      	bcc.n	8003450 <I2C_WaitOnFlagUntilTimeout+0x30>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d139      	bne.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	0c1b      	lsrs	r3, r3, #16
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d10d      	bne.n	8003476 <I2C_WaitOnFlagUntilTimeout+0x56>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	43da      	mvns	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	4013      	ands	r3, r2
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	bf0c      	ite	eq
 800346c:	2301      	moveq	r3, #1
 800346e:	2300      	movne	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	461a      	mov	r2, r3
 8003474:	e00c      	b.n	8003490 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	43da      	mvns	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	4013      	ands	r3, r2
 8003482:	b29b      	uxth	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	bf0c      	ite	eq
 8003488:	2301      	moveq	r3, #1
 800348a:	2300      	movne	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	429a      	cmp	r2, r3
 8003494:	d116      	bne.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	f043 0220 	orr.w	r2, r3, #32
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e023      	b.n	800350c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	0c1b      	lsrs	r3, r3, #16
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d10d      	bne.n	80034ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	43da      	mvns	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4013      	ands	r3, r2
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf0c      	ite	eq
 80034e0:	2301      	moveq	r3, #1
 80034e2:	2300      	movne	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	461a      	mov	r2, r3
 80034e8:	e00c      	b.n	8003504 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	43da      	mvns	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	4013      	ands	r3, r2
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	461a      	mov	r2, r3
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	429a      	cmp	r2, r3
 8003508:	d093      	beq.n	8003432 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003522:	e071      	b.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003532:	d123      	bne.n	800357c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003542:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800354c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	f043 0204 	orr.w	r2, r3, #4
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e067      	b.n	800364c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003582:	d041      	beq.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003584:	f7fe fcd0 	bl	8001f28 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	429a      	cmp	r2, r3
 8003592:	d302      	bcc.n	800359a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d136      	bne.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	0c1b      	lsrs	r3, r3, #16
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d10c      	bne.n	80035be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	43da      	mvns	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4013      	ands	r3, r2
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	bf14      	ite	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	2300      	moveq	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	e00b      	b.n	80035d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	43da      	mvns	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4013      	ands	r3, r2
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf14      	ite	ne
 80035d0:	2301      	movne	r3, #1
 80035d2:	2300      	moveq	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d016      	beq.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	f043 0220 	orr.w	r2, r3, #32
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e021      	b.n	800364c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	0c1b      	lsrs	r3, r3, #16
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b01      	cmp	r3, #1
 8003610:	d10c      	bne.n	800362c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	43da      	mvns	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	4013      	ands	r3, r2
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	bf14      	ite	ne
 8003624:	2301      	movne	r3, #1
 8003626:	2300      	moveq	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	e00b      	b.n	8003644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	43da      	mvns	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4013      	ands	r3, r2
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	bf14      	ite	ne
 800363e:	2301      	movne	r3, #1
 8003640:	2300      	moveq	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	f47f af6d 	bne.w	8003524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003660:	e034      	b.n	80036cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f8e3 	bl	800382e <I2C_IsAcknowledgeFailed>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e034      	b.n	80036dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003678:	d028      	beq.n	80036cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367a:	f7fe fc55 	bl	8001f28 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	429a      	cmp	r2, r3
 8003688:	d302      	bcc.n	8003690 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d11d      	bne.n	80036cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369a:	2b80      	cmp	r3, #128	; 0x80
 800369c:	d016      	beq.n	80036cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f043 0220 	orr.w	r2, r3, #32
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e007      	b.n	80036dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d6:	2b80      	cmp	r3, #128	; 0x80
 80036d8:	d1c3      	bne.n	8003662 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036f0:	e034      	b.n	800375c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f89b 	bl	800382e <I2C_IsAcknowledgeFailed>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e034      	b.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003708:	d028      	beq.n	800375c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370a:	f7fe fc0d 	bl	8001f28 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	429a      	cmp	r2, r3
 8003718:	d302      	bcc.n	8003720 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d11d      	bne.n	800375c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b04      	cmp	r3, #4
 800372c:	d016      	beq.n	800375c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	f043 0220 	orr.w	r2, r3, #32
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e007      	b.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b04      	cmp	r3, #4
 8003768:	d1c3      	bne.n	80036f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003780:	e049      	b.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2b10      	cmp	r3, #16
 800378e:	d119      	bne.n	80037c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0210 	mvn.w	r2, #16
 8003798:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e030      	b.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c4:	f7fe fbb0 	bl	8001f28 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d302      	bcc.n	80037da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d11d      	bne.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e4:	2b40      	cmp	r3, #64	; 0x40
 80037e6:	d016      	beq.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f043 0220 	orr.w	r2, r3, #32
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e007      	b.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003820:	2b40      	cmp	r3, #64	; 0x40
 8003822:	d1ae      	bne.n	8003782 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003844:	d11b      	bne.n	800387e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800384e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f043 0204 	orr.w	r2, r3, #4
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
	...

0800388c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e26c      	b.n	8003d78 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 8087 	beq.w	80039ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038ac:	4b92      	ldr	r3, [pc, #584]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 030c 	and.w	r3, r3, #12
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d00c      	beq.n	80038d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038b8:	4b8f      	ldr	r3, [pc, #572]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 030c 	and.w	r3, r3, #12
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d112      	bne.n	80038ea <HAL_RCC_OscConfig+0x5e>
 80038c4:	4b8c      	ldr	r3, [pc, #560]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d0:	d10b      	bne.n	80038ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d2:	4b89      	ldr	r3, [pc, #548]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d06c      	beq.n	80039b8 <HAL_RCC_OscConfig+0x12c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d168      	bne.n	80039b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e246      	b.n	8003d78 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f2:	d106      	bne.n	8003902 <HAL_RCC_OscConfig+0x76>
 80038f4:	4b80      	ldr	r3, [pc, #512]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a7f      	ldr	r2, [pc, #508]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80038fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	e02e      	b.n	8003960 <HAL_RCC_OscConfig+0xd4>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10c      	bne.n	8003924 <HAL_RCC_OscConfig+0x98>
 800390a:	4b7b      	ldr	r3, [pc, #492]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a7a      	ldr	r2, [pc, #488]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	4b78      	ldr	r3, [pc, #480]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a77      	ldr	r2, [pc, #476]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 800391c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e01d      	b.n	8003960 <HAL_RCC_OscConfig+0xd4>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800392c:	d10c      	bne.n	8003948 <HAL_RCC_OscConfig+0xbc>
 800392e:	4b72      	ldr	r3, [pc, #456]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a71      	ldr	r2, [pc, #452]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	4b6f      	ldr	r3, [pc, #444]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a6e      	ldr	r2, [pc, #440]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	e00b      	b.n	8003960 <HAL_RCC_OscConfig+0xd4>
 8003948:	4b6b      	ldr	r3, [pc, #428]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a6a      	ldr	r2, [pc, #424]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 800394e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	4b68      	ldr	r3, [pc, #416]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a67      	ldr	r2, [pc, #412]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 800395a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800395e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d013      	beq.n	8003990 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003968:	f7fe fade 	bl	8001f28 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003970:	f7fe fada 	bl	8001f28 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b64      	cmp	r3, #100	; 0x64
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e1fa      	b.n	8003d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	4b5d      	ldr	r3, [pc, #372]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0f0      	beq.n	8003970 <HAL_RCC_OscConfig+0xe4>
 800398e:	e014      	b.n	80039ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003990:	f7fe faca 	bl	8001f28 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003998:	f7fe fac6 	bl	8001f28 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b64      	cmp	r3, #100	; 0x64
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e1e6      	b.n	8003d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039aa:	4b53      	ldr	r3, [pc, #332]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x10c>
 80039b6:	e000      	b.n	80039ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d063      	beq.n	8003a8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039c6:	4b4c      	ldr	r3, [pc, #304]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00b      	beq.n	80039ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039d2:	4b49      	ldr	r3, [pc, #292]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d11c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x18c>
 80039de:	4b46      	ldr	r3, [pc, #280]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d116      	bne.n	8003a18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ea:	4b43      	ldr	r3, [pc, #268]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <HAL_RCC_OscConfig+0x176>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d001      	beq.n	8003a02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e1ba      	b.n	8003d78 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a02:	4b3d      	ldr	r3, [pc, #244]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4939      	ldr	r1, [pc, #228]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a16:	e03a      	b.n	8003a8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d020      	beq.n	8003a62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a20:	4b36      	ldr	r3, [pc, #216]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a26:	f7fe fa7f 	bl	8001f28 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a2e:	f7fe fa7b 	bl	8001f28 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e19b      	b.n	8003d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a40:	4b2d      	ldr	r3, [pc, #180]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4c:	4b2a      	ldr	r3, [pc, #168]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4927      	ldr	r1, [pc, #156]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	600b      	str	r3, [r1, #0]
 8003a60:	e015      	b.n	8003a8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a62:	4b26      	ldr	r3, [pc, #152]	; (8003afc <HAL_RCC_OscConfig+0x270>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7fe fa5e 	bl	8001f28 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a70:	f7fe fa5a 	bl	8001f28 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e17a      	b.n	8003d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a82:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d03a      	beq.n	8003b10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d019      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa2:	4b17      	ldr	r3, [pc, #92]	; (8003b00 <HAL_RCC_OscConfig+0x274>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa8:	f7fe fa3e 	bl	8001f28 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab0:	f7fe fa3a 	bl	8001f28 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e15a      	b.n	8003d78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ace:	2001      	movs	r0, #1
 8003ad0:	f000 facc 	bl	800406c <RCC_Delay>
 8003ad4:	e01c      	b.n	8003b10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ad6:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <HAL_RCC_OscConfig+0x274>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003adc:	f7fe fa24 	bl	8001f28 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae2:	e00f      	b.n	8003b04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae4:	f7fe fa20 	bl	8001f28 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d908      	bls.n	8003b04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e140      	b.n	8003d78 <HAL_RCC_OscConfig+0x4ec>
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000
 8003afc:	42420000 	.word	0x42420000
 8003b00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b04:	4b9e      	ldr	r3, [pc, #632]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e9      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80a6 	beq.w	8003c6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b22:	4b97      	ldr	r3, [pc, #604]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10d      	bne.n	8003b4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2e:	4b94      	ldr	r3, [pc, #592]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	4a93      	ldr	r2, [pc, #588]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b38:	61d3      	str	r3, [r2, #28]
 8003b3a:	4b91      	ldr	r3, [pc, #580]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b46:	2301      	movs	r3, #1
 8003b48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4a:	4b8e      	ldr	r3, [pc, #568]	; (8003d84 <HAL_RCC_OscConfig+0x4f8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d118      	bne.n	8003b88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b56:	4b8b      	ldr	r3, [pc, #556]	; (8003d84 <HAL_RCC_OscConfig+0x4f8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a8a      	ldr	r2, [pc, #552]	; (8003d84 <HAL_RCC_OscConfig+0x4f8>)
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b62:	f7fe f9e1 	bl	8001f28 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b6a:	f7fe f9dd 	bl	8001f28 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b64      	cmp	r3, #100	; 0x64
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e0fd      	b.n	8003d78 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7c:	4b81      	ldr	r3, [pc, #516]	; (8003d84 <HAL_RCC_OscConfig+0x4f8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d106      	bne.n	8003b9e <HAL_RCC_OscConfig+0x312>
 8003b90:	4b7b      	ldr	r3, [pc, #492]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	4a7a      	ldr	r2, [pc, #488]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	6213      	str	r3, [r2, #32]
 8003b9c:	e02d      	b.n	8003bfa <HAL_RCC_OscConfig+0x36e>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x334>
 8003ba6:	4b76      	ldr	r3, [pc, #472]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	4a75      	ldr	r2, [pc, #468]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003bac:	f023 0301 	bic.w	r3, r3, #1
 8003bb0:	6213      	str	r3, [r2, #32]
 8003bb2:	4b73      	ldr	r3, [pc, #460]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	4a72      	ldr	r2, [pc, #456]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003bb8:	f023 0304 	bic.w	r3, r3, #4
 8003bbc:	6213      	str	r3, [r2, #32]
 8003bbe:	e01c      	b.n	8003bfa <HAL_RCC_OscConfig+0x36e>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	2b05      	cmp	r3, #5
 8003bc6:	d10c      	bne.n	8003be2 <HAL_RCC_OscConfig+0x356>
 8003bc8:	4b6d      	ldr	r3, [pc, #436]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	4a6c      	ldr	r2, [pc, #432]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003bce:	f043 0304 	orr.w	r3, r3, #4
 8003bd2:	6213      	str	r3, [r2, #32]
 8003bd4:	4b6a      	ldr	r3, [pc, #424]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	4a69      	ldr	r2, [pc, #420]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	6213      	str	r3, [r2, #32]
 8003be0:	e00b      	b.n	8003bfa <HAL_RCC_OscConfig+0x36e>
 8003be2:	4b67      	ldr	r3, [pc, #412]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	4a66      	ldr	r2, [pc, #408]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	6213      	str	r3, [r2, #32]
 8003bee:	4b64      	ldr	r3, [pc, #400]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	4a63      	ldr	r2, [pc, #396]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003bf4:	f023 0304 	bic.w	r3, r3, #4
 8003bf8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d015      	beq.n	8003c2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c02:	f7fe f991 	bl	8001f28 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c08:	e00a      	b.n	8003c20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0a:	f7fe f98d 	bl	8001f28 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e0ab      	b.n	8003d78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c20:	4b57      	ldr	r3, [pc, #348]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0ee      	beq.n	8003c0a <HAL_RCC_OscConfig+0x37e>
 8003c2c:	e014      	b.n	8003c58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c2e:	f7fe f97b 	bl	8001f28 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c34:	e00a      	b.n	8003c4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c36:	f7fe f977 	bl	8001f28 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e095      	b.n	8003d78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c4c:	4b4c      	ldr	r3, [pc, #304]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1ee      	bne.n	8003c36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d105      	bne.n	8003c6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c5e:	4b48      	ldr	r3, [pc, #288]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	4a47      	ldr	r2, [pc, #284]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 8081 	beq.w	8003d76 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c74:	4b42      	ldr	r3, [pc, #264]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 030c 	and.w	r3, r3, #12
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d061      	beq.n	8003d44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d146      	bne.n	8003d16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c88:	4b3f      	ldr	r3, [pc, #252]	; (8003d88 <HAL_RCC_OscConfig+0x4fc>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8e:	f7fe f94b 	bl	8001f28 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c96:	f7fe f947 	bl	8001f28 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e067      	b.n	8003d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ca8:	4b35      	ldr	r3, [pc, #212]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f0      	bne.n	8003c96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cbc:	d108      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cbe:	4b30      	ldr	r3, [pc, #192]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	492d      	ldr	r1, [pc, #180]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cd0:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a19      	ldr	r1, [r3, #32]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	4927      	ldr	r1, [pc, #156]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ce8:	4b27      	ldr	r3, [pc, #156]	; (8003d88 <HAL_RCC_OscConfig+0x4fc>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cee:	f7fe f91b 	bl	8001f28 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf6:	f7fe f917 	bl	8001f28 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e037      	b.n	8003d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d08:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x46a>
 8003d14:	e02f      	b.n	8003d76 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d16:	4b1c      	ldr	r3, [pc, #112]	; (8003d88 <HAL_RCC_OscConfig+0x4fc>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1c:	f7fe f904 	bl	8001f28 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d24:	f7fe f900 	bl	8001f28 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e020      	b.n	8003d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d36:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x498>
 8003d42:	e018      	b.n	8003d76 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e013      	b.n	8003d78 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCC_OscConfig+0x4f4>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d106      	bne.n	8003d72 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d001      	beq.n	8003d76 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40021000 	.word	0x40021000
 8003d84:	40007000 	.word	0x40007000
 8003d88:	42420060 	.word	0x42420060

08003d8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e0d0      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003da0:	4b6a      	ldr	r3, [pc, #424]	; (8003f4c <HAL_RCC_ClockConfig+0x1c0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d910      	bls.n	8003dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	4b67      	ldr	r3, [pc, #412]	; (8003f4c <HAL_RCC_ClockConfig+0x1c0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 0207 	bic.w	r2, r3, #7
 8003db6:	4965      	ldr	r1, [pc, #404]	; (8003f4c <HAL_RCC_ClockConfig+0x1c0>)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbe:	4b63      	ldr	r3, [pc, #396]	; (8003f4c <HAL_RCC_ClockConfig+0x1c0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0b8      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d020      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003de8:	4b59      	ldr	r3, [pc, #356]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	4a58      	ldr	r2, [pc, #352]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003dee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003df2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e00:	4b53      	ldr	r3, [pc, #332]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	4a52      	ldr	r2, [pc, #328]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003e06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e0c:	4b50      	ldr	r3, [pc, #320]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	494d      	ldr	r1, [pc, #308]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d040      	beq.n	8003eac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d107      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e32:	4b47      	ldr	r3, [pc, #284]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d115      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e07f      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d107      	bne.n	8003e5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e4a:	4b41      	ldr	r3, [pc, #260]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d109      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e073      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e5a:	4b3d      	ldr	r3, [pc, #244]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e06b      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e6a:	4b39      	ldr	r3, [pc, #228]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f023 0203 	bic.w	r2, r3, #3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	4936      	ldr	r1, [pc, #216]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e7c:	f7fe f854 	bl	8001f28 <HAL_GetTick>
 8003e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e82:	e00a      	b.n	8003e9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e84:	f7fe f850 	bl	8001f28 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e053      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e9a:	4b2d      	ldr	r3, [pc, #180]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f003 020c 	and.w	r2, r3, #12
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d1eb      	bne.n	8003e84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003eac:	4b27      	ldr	r3, [pc, #156]	; (8003f4c <HAL_RCC_ClockConfig+0x1c0>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d210      	bcs.n	8003edc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eba:	4b24      	ldr	r3, [pc, #144]	; (8003f4c <HAL_RCC_ClockConfig+0x1c0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 0207 	bic.w	r2, r3, #7
 8003ec2:	4922      	ldr	r1, [pc, #136]	; (8003f4c <HAL_RCC_ClockConfig+0x1c0>)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	4b20      	ldr	r3, [pc, #128]	; (8003f4c <HAL_RCC_ClockConfig+0x1c0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e032      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d008      	beq.n	8003efa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ee8:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4916      	ldr	r1, [pc, #88]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f06:	4b12      	ldr	r3, [pc, #72]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	490e      	ldr	r1, [pc, #56]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f1a:	f000 f821 	bl	8003f60 <HAL_RCC_GetSysClockFreq>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <HAL_RCC_ClockConfig+0x1c4>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	091b      	lsrs	r3, r3, #4
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	490a      	ldr	r1, [pc, #40]	; (8003f54 <HAL_RCC_ClockConfig+0x1c8>)
 8003f2c:	5ccb      	ldrb	r3, [r1, r3]
 8003f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f32:	4a09      	ldr	r2, [pc, #36]	; (8003f58 <HAL_RCC_ClockConfig+0x1cc>)
 8003f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f36:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <HAL_RCC_ClockConfig+0x1d0>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fd ffb2 	bl	8001ea4 <HAL_InitTick>

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40022000 	.word	0x40022000
 8003f50:	40021000 	.word	0x40021000
 8003f54:	08008370 	.word	0x08008370
 8003f58:	20000008 	.word	0x20000008
 8003f5c:	2000000c 	.word	0x2000000c

08003f60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	2300      	movs	r3, #0
 8003f74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f7a:	4b1e      	ldr	r3, [pc, #120]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 030c 	and.w	r3, r3, #12
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d002      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0x30>
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d003      	beq.n	8003f96 <HAL_RCC_GetSysClockFreq+0x36>
 8003f8e:	e027      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f90:	4b19      	ldr	r3, [pc, #100]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f92:	613b      	str	r3, [r7, #16]
      break;
 8003f94:	e027      	b.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	0c9b      	lsrs	r3, r3, #18
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	4a17      	ldr	r2, [pc, #92]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fa0:	5cd3      	ldrb	r3, [r2, r3]
 8003fa2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d010      	beq.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fae:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	0c5b      	lsrs	r3, r3, #17
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	4a11      	ldr	r2, [pc, #68]	; (8004000 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003fba:	5cd3      	ldrb	r3, [r2, r3]
 8003fbc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a0d      	ldr	r2, [pc, #52]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fc2:	fb02 f203 	mul.w	r2, r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fcc:	617b      	str	r3, [r7, #20]
 8003fce:	e004      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a0c      	ldr	r2, [pc, #48]	; (8004004 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003fd4:	fb02 f303 	mul.w	r3, r2, r3
 8003fd8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	613b      	str	r3, [r7, #16]
      break;
 8003fde:	e002      	b.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fe2:	613b      	str	r3, [r7, #16]
      break;
 8003fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fe6:	693b      	ldr	r3, [r7, #16]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	007a1200 	.word	0x007a1200
 8003ffc:	08008388 	.word	0x08008388
 8004000:	08008398 	.word	0x08008398
 8004004:	003d0900 	.word	0x003d0900

08004008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800400c:	4b02      	ldr	r3, [pc, #8]	; (8004018 <HAL_RCC_GetHCLKFreq+0x10>)
 800400e:	681b      	ldr	r3, [r3, #0]
}
 8004010:	4618      	mov	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr
 8004018:	20000008 	.word	0x20000008

0800401c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004020:	f7ff fff2 	bl	8004008 <HAL_RCC_GetHCLKFreq>
 8004024:	4602      	mov	r2, r0
 8004026:	4b05      	ldr	r3, [pc, #20]	; (800403c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	0a1b      	lsrs	r3, r3, #8
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	4903      	ldr	r1, [pc, #12]	; (8004040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004032:	5ccb      	ldrb	r3, [r1, r3]
 8004034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004038:	4618      	mov	r0, r3
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40021000 	.word	0x40021000
 8004040:	08008380 	.word	0x08008380

08004044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004048:	f7ff ffde 	bl	8004008 <HAL_RCC_GetHCLKFreq>
 800404c:	4602      	mov	r2, r0
 800404e:	4b05      	ldr	r3, [pc, #20]	; (8004064 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	0adb      	lsrs	r3, r3, #11
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	4903      	ldr	r1, [pc, #12]	; (8004068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800405a:	5ccb      	ldrb	r3, [r1, r3]
 800405c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004060:	4618      	mov	r0, r3
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40021000 	.word	0x40021000
 8004068:	08008380 	.word	0x08008380

0800406c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004074:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <RCC_Delay+0x34>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <RCC_Delay+0x38>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	0a5b      	lsrs	r3, r3, #9
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	fb02 f303 	mul.w	r3, r2, r3
 8004086:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004088:	bf00      	nop
  }
  while (Delay --);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1e5a      	subs	r2, r3, #1
 800408e:	60fa      	str	r2, [r7, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f9      	bne.n	8004088 <RCC_Delay+0x1c>
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr
 80040a0:	20000008 	.word	0x20000008
 80040a4:	10624dd3 	.word	0x10624dd3

080040a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e041      	b.n	800413e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fd fdcc 	bl	8001c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f000 fcec 	bl	8004ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b01      	cmp	r3, #1
 800415a:	d001      	beq.n	8004160 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e03a      	b.n	80041d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a18      	ldr	r2, [pc, #96]	; (80041e0 <HAL_TIM_Base_Start_IT+0x98>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00e      	beq.n	80041a0 <HAL_TIM_Base_Start_IT+0x58>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418a:	d009      	beq.n	80041a0 <HAL_TIM_Base_Start_IT+0x58>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a14      	ldr	r2, [pc, #80]	; (80041e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d004      	beq.n	80041a0 <HAL_TIM_Base_Start_IT+0x58>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a13      	ldr	r2, [pc, #76]	; (80041e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d111      	bne.n	80041c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b06      	cmp	r3, #6
 80041b0:	d010      	beq.n	80041d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0201 	orr.w	r2, r2, #1
 80041c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c2:	e007      	b.n	80041d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0201 	orr.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr
 80041e0:	40012c00 	.word	0x40012c00
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40000800 	.word	0x40000800

080041ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e041      	b.n	8004282 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d106      	bne.n	8004218 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f839 	bl	800428a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3304      	adds	r3, #4
 8004228:	4619      	mov	r1, r3
 800422a:	4610      	mov	r0, r2
 800422c:	f000 fc4a 	bl	8004ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr

0800429c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d109      	bne.n	80042c0 <HAL_TIM_PWM_Start+0x24>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	bf14      	ite	ne
 80042b8:	2301      	movne	r3, #1
 80042ba:	2300      	moveq	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	e022      	b.n	8004306 <HAL_TIM_PWM_Start+0x6a>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d109      	bne.n	80042da <HAL_TIM_PWM_Start+0x3e>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	bf14      	ite	ne
 80042d2:	2301      	movne	r3, #1
 80042d4:	2300      	moveq	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	e015      	b.n	8004306 <HAL_TIM_PWM_Start+0x6a>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d109      	bne.n	80042f4 <HAL_TIM_PWM_Start+0x58>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	bf14      	ite	ne
 80042ec:	2301      	movne	r3, #1
 80042ee:	2300      	moveq	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	e008      	b.n	8004306 <HAL_TIM_PWM_Start+0x6a>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	bf14      	ite	ne
 8004300:	2301      	movne	r3, #1
 8004302:	2300      	moveq	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e05e      	b.n	80043cc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d104      	bne.n	800431e <HAL_TIM_PWM_Start+0x82>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800431c:	e013      	b.n	8004346 <HAL_TIM_PWM_Start+0xaa>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b04      	cmp	r3, #4
 8004322:	d104      	bne.n	800432e <HAL_TIM_PWM_Start+0x92>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800432c:	e00b      	b.n	8004346 <HAL_TIM_PWM_Start+0xaa>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b08      	cmp	r3, #8
 8004332:	d104      	bne.n	800433e <HAL_TIM_PWM_Start+0xa2>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800433c:	e003      	b.n	8004346 <HAL_TIM_PWM_Start+0xaa>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2202      	movs	r2, #2
 8004342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2201      	movs	r2, #1
 800434c:	6839      	ldr	r1, [r7, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fe38 	bl	8004fc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a1e      	ldr	r2, [pc, #120]	; (80043d4 <HAL_TIM_PWM_Start+0x138>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d107      	bne.n	800436e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800436c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a18      	ldr	r2, [pc, #96]	; (80043d4 <HAL_TIM_PWM_Start+0x138>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00e      	beq.n	8004396 <HAL_TIM_PWM_Start+0xfa>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004380:	d009      	beq.n	8004396 <HAL_TIM_PWM_Start+0xfa>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a14      	ldr	r2, [pc, #80]	; (80043d8 <HAL_TIM_PWM_Start+0x13c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d004      	beq.n	8004396 <HAL_TIM_PWM_Start+0xfa>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a12      	ldr	r2, [pc, #72]	; (80043dc <HAL_TIM_PWM_Start+0x140>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d111      	bne.n	80043ba <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2b06      	cmp	r3, #6
 80043a6:	d010      	beq.n	80043ca <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b8:	e007      	b.n	80043ca <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f042 0201 	orr.w	r2, r2, #1
 80043c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40012c00 	.word	0x40012c00
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800

080043e0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	73fb      	strb	r3, [r7, #15]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2b0c      	cmp	r3, #12
 80043f2:	d855      	bhi.n	80044a0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80043f4:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80043f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fa:	bf00      	nop
 80043fc:	08004431 	.word	0x08004431
 8004400:	080044a1 	.word	0x080044a1
 8004404:	080044a1 	.word	0x080044a1
 8004408:	080044a1 	.word	0x080044a1
 800440c:	0800444d 	.word	0x0800444d
 8004410:	080044a1 	.word	0x080044a1
 8004414:	080044a1 	.word	0x080044a1
 8004418:	080044a1 	.word	0x080044a1
 800441c:	08004469 	.word	0x08004469
 8004420:	080044a1 	.word	0x080044a1
 8004424:	080044a1 	.word	0x080044a1
 8004428:	080044a1 	.word	0x080044a1
 800442c:	08004485 	.word	0x08004485
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800443e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	4618      	mov	r0, r3
 8004446:	f7fd feab 	bl	80021a0 <HAL_DMA_Abort_IT>
      break;
 800444a:	e02c      	b.n	80044a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004460:	4618      	mov	r0, r3
 8004462:	f7fd fe9d 	bl	80021a0 <HAL_DMA_Abort_IT>
      break;
 8004466:	e01e      	b.n	80044a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004476:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	4618      	mov	r0, r3
 800447e:	f7fd fe8f 	bl	80021a0 <HAL_DMA_Abort_IT>
      break;
 8004482:	e010      	b.n	80044a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004492:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	4618      	mov	r0, r3
 800449a:	f7fd fe81 	bl	80021a0 <HAL_DMA_Abort_IT>
      break;
 800449e:	e002      	b.n	80044a6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	73fb      	strb	r3, [r7, #15]
      break;
 80044a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d157      	bne.n	800455c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2200      	movs	r2, #0
 80044b2:	6839      	ldr	r1, [r7, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 fd85 	bl	8004fc4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a2a      	ldr	r2, [pc, #168]	; (8004568 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d117      	bne.n	80044f4 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6a1a      	ldr	r2, [r3, #32]
 80044ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80044ce:	4013      	ands	r3, r2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10f      	bne.n	80044f4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6a1a      	ldr	r2, [r3, #32]
 80044da:	f240 4344 	movw	r3, #1092	; 0x444
 80044de:	4013      	ands	r3, r2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d107      	bne.n	80044f4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6a1a      	ldr	r2, [r3, #32]
 80044fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80044fe:	4013      	ands	r3, r2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10f      	bne.n	8004524 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	f240 4344 	movw	r3, #1092	; 0x444
 800450e:	4013      	ands	r3, r2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d107      	bne.n	8004524 <HAL_TIM_PWM_Stop_DMA+0x144>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0201 	bic.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d104      	bne.n	8004534 <HAL_TIM_PWM_Stop_DMA+0x154>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004532:	e013      	b.n	800455c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2b04      	cmp	r3, #4
 8004538:	d104      	bne.n	8004544 <HAL_TIM_PWM_Stop_DMA+0x164>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004542:	e00b      	b.n	800455c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b08      	cmp	r3, #8
 8004548:	d104      	bne.n	8004554 <HAL_TIM_PWM_Stop_DMA+0x174>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004552:	e003      	b.n	800455c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800455c:	7bfb      	ldrb	r3, [r7, #15]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40012c00 	.word	0x40012c00

0800456c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b02      	cmp	r3, #2
 8004580:	d122      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b02      	cmp	r3, #2
 800458e:	d11b      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0202 	mvn.w	r2, #2
 8004598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fa76 	bl	8004aa0 <HAL_TIM_IC_CaptureCallback>
 80045b4:	e005      	b.n	80045c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fa69 	bl	8004a8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7fc fd27 	bl	8001010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f003 0304 	and.w	r3, r3, #4
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d122      	bne.n	800461c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d11b      	bne.n	800461c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0204 	mvn.w	r2, #4
 80045ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2202      	movs	r2, #2
 80045f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fa4c 	bl	8004aa0 <HAL_TIM_IC_CaptureCallback>
 8004608:	e005      	b.n	8004616 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fa3f 	bl	8004a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7fc fcfd 	bl	8001010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b08      	cmp	r3, #8
 8004628:	d122      	bne.n	8004670 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b08      	cmp	r3, #8
 8004636:	d11b      	bne.n	8004670 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0208 	mvn.w	r2, #8
 8004640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2204      	movs	r2, #4
 8004646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fa22 	bl	8004aa0 <HAL_TIM_IC_CaptureCallback>
 800465c:	e005      	b.n	800466a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fa15 	bl	8004a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7fc fcd3 	bl	8001010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f003 0310 	and.w	r3, r3, #16
 800467a:	2b10      	cmp	r3, #16
 800467c:	d122      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	2b10      	cmp	r3, #16
 800468a:	d11b      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0210 	mvn.w	r2, #16
 8004694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2208      	movs	r2, #8
 800469a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f9f8 	bl	8004aa0 <HAL_TIM_IC_CaptureCallback>
 80046b0:	e005      	b.n	80046be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f9eb 	bl	8004a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7fc fca9 	bl	8001010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d10e      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d107      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f06f 0201 	mvn.w	r2, #1
 80046e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fd f83d 	bl	800176a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fa:	2b80      	cmp	r3, #128	; 0x80
 80046fc:	d10e      	bne.n	800471c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004708:	2b80      	cmp	r3, #128	; 0x80
 800470a:	d107      	bne.n	800471c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fd30 	bl	800517c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004726:	2b40      	cmp	r3, #64	; 0x40
 8004728:	d10e      	bne.n	8004748 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004734:	2b40      	cmp	r3, #64	; 0x40
 8004736:	d107      	bne.n	8004748 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f9b5 	bl	8004ab2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b20      	cmp	r3, #32
 8004754:	d10e      	bne.n	8004774 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b20      	cmp	r3, #32
 8004762:	d107      	bne.n	8004774 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0220 	mvn.w	r2, #32
 800476c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fcfb 	bl	800516a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004774:	bf00      	nop
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004796:	2302      	movs	r3, #2
 8004798:	e0ae      	b.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b0c      	cmp	r3, #12
 80047a6:	f200 809f 	bhi.w	80048e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80047aa:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b0:	080047e5 	.word	0x080047e5
 80047b4:	080048e9 	.word	0x080048e9
 80047b8:	080048e9 	.word	0x080048e9
 80047bc:	080048e9 	.word	0x080048e9
 80047c0:	08004825 	.word	0x08004825
 80047c4:	080048e9 	.word	0x080048e9
 80047c8:	080048e9 	.word	0x080048e9
 80047cc:	080048e9 	.word	0x080048e9
 80047d0:	08004867 	.word	0x08004867
 80047d4:	080048e9 	.word	0x080048e9
 80047d8:	080048e9 	.word	0x080048e9
 80047dc:	080048e9 	.word	0x080048e9
 80047e0:	080048a7 	.word	0x080048a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f9cc 	bl	8004b88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0208 	orr.w	r2, r2, #8
 80047fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0204 	bic.w	r2, r2, #4
 800480e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6999      	ldr	r1, [r3, #24]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	619a      	str	r2, [r3, #24]
      break;
 8004822:	e064      	b.n	80048ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68b9      	ldr	r1, [r7, #8]
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fa12 	bl	8004c54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800483e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6999      	ldr	r1, [r3, #24]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	021a      	lsls	r2, r3, #8
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	619a      	str	r2, [r3, #24]
      break;
 8004864:	e043      	b.n	80048ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68b9      	ldr	r1, [r7, #8]
 800486c:	4618      	mov	r0, r3
 800486e:	f000 fa5b 	bl	8004d28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69da      	ldr	r2, [r3, #28]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f042 0208 	orr.w	r2, r2, #8
 8004880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69da      	ldr	r2, [r3, #28]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0204 	bic.w	r2, r2, #4
 8004890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69d9      	ldr	r1, [r3, #28]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	61da      	str	r2, [r3, #28]
      break;
 80048a4:	e023      	b.n	80048ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 faa5 	bl	8004dfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69da      	ldr	r2, [r3, #28]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69da      	ldr	r2, [r3, #28]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69d9      	ldr	r1, [r3, #28]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	021a      	lsls	r2, r3, #8
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	61da      	str	r2, [r3, #28]
      break;
 80048e6:	e002      	b.n	80048ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	75fb      	strb	r3, [r7, #23]
      break;
 80048ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_TIM_ConfigClockSource+0x1c>
 8004918:	2302      	movs	r3, #2
 800491a:	e0b4      	b.n	8004a86 <HAL_TIM_ConfigClockSource+0x186>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800493a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004942:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004954:	d03e      	beq.n	80049d4 <HAL_TIM_ConfigClockSource+0xd4>
 8004956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800495a:	f200 8087 	bhi.w	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 800495e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004962:	f000 8086 	beq.w	8004a72 <HAL_TIM_ConfigClockSource+0x172>
 8004966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800496a:	d87f      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 800496c:	2b70      	cmp	r3, #112	; 0x70
 800496e:	d01a      	beq.n	80049a6 <HAL_TIM_ConfigClockSource+0xa6>
 8004970:	2b70      	cmp	r3, #112	; 0x70
 8004972:	d87b      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 8004974:	2b60      	cmp	r3, #96	; 0x60
 8004976:	d050      	beq.n	8004a1a <HAL_TIM_ConfigClockSource+0x11a>
 8004978:	2b60      	cmp	r3, #96	; 0x60
 800497a:	d877      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 800497c:	2b50      	cmp	r3, #80	; 0x50
 800497e:	d03c      	beq.n	80049fa <HAL_TIM_ConfigClockSource+0xfa>
 8004980:	2b50      	cmp	r3, #80	; 0x50
 8004982:	d873      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 8004984:	2b40      	cmp	r3, #64	; 0x40
 8004986:	d058      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0x13a>
 8004988:	2b40      	cmp	r3, #64	; 0x40
 800498a:	d86f      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 800498c:	2b30      	cmp	r3, #48	; 0x30
 800498e:	d064      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0x15a>
 8004990:	2b30      	cmp	r3, #48	; 0x30
 8004992:	d86b      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 8004994:	2b20      	cmp	r3, #32
 8004996:	d060      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0x15a>
 8004998:	2b20      	cmp	r3, #32
 800499a:	d867      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
 800499c:	2b00      	cmp	r3, #0
 800499e:	d05c      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0x15a>
 80049a0:	2b10      	cmp	r3, #16
 80049a2:	d05a      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0x15a>
 80049a4:	e062      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6818      	ldr	r0, [r3, #0]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6899      	ldr	r1, [r3, #8]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f000 fae6 	bl	8004f86 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	609a      	str	r2, [r3, #8]
      break;
 80049d2:	e04f      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	6899      	ldr	r1, [r3, #8]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f000 facf 	bl	8004f86 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049f6:	609a      	str	r2, [r3, #8]
      break;
 80049f8:	e03c      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	6859      	ldr	r1, [r3, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	461a      	mov	r2, r3
 8004a08:	f000 fa46 	bl	8004e98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2150      	movs	r1, #80	; 0x50
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fa9d 	bl	8004f52 <TIM_ITRx_SetConfig>
      break;
 8004a18:	e02c      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6859      	ldr	r1, [r3, #4]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	461a      	mov	r2, r3
 8004a28:	f000 fa64 	bl	8004ef4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2160      	movs	r1, #96	; 0x60
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fa8d 	bl	8004f52 <TIM_ITRx_SetConfig>
      break;
 8004a38:	e01c      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6859      	ldr	r1, [r3, #4]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	461a      	mov	r2, r3
 8004a48:	f000 fa26 	bl	8004e98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2140      	movs	r1, #64	; 0x40
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fa7d 	bl	8004f52 <TIM_ITRx_SetConfig>
      break;
 8004a58:	e00c      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4619      	mov	r1, r3
 8004a64:	4610      	mov	r0, r2
 8004a66:	f000 fa74 	bl	8004f52 <TIM_ITRx_SetConfig>
      break;
 8004a6a:	e003      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a70:	e000      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bc80      	pop	{r7}
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr

08004ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a29      	ldr	r2, [pc, #164]	; (8004b7c <TIM_Base_SetConfig+0xb8>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00b      	beq.n	8004af4 <TIM_Base_SetConfig+0x30>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae2:	d007      	beq.n	8004af4 <TIM_Base_SetConfig+0x30>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a26      	ldr	r2, [pc, #152]	; (8004b80 <TIM_Base_SetConfig+0xbc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d003      	beq.n	8004af4 <TIM_Base_SetConfig+0x30>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a25      	ldr	r2, [pc, #148]	; (8004b84 <TIM_Base_SetConfig+0xc0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d108      	bne.n	8004b06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a1c      	ldr	r2, [pc, #112]	; (8004b7c <TIM_Base_SetConfig+0xb8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00b      	beq.n	8004b26 <TIM_Base_SetConfig+0x62>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b14:	d007      	beq.n	8004b26 <TIM_Base_SetConfig+0x62>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a19      	ldr	r2, [pc, #100]	; (8004b80 <TIM_Base_SetConfig+0xbc>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d003      	beq.n	8004b26 <TIM_Base_SetConfig+0x62>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a18      	ldr	r2, [pc, #96]	; (8004b84 <TIM_Base_SetConfig+0xc0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d108      	bne.n	8004b38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a07      	ldr	r2, [pc, #28]	; (8004b7c <TIM_Base_SetConfig+0xb8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d103      	bne.n	8004b6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	615a      	str	r2, [r3, #20]
}
 8004b72:	bf00      	nop
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr
 8004b7c:	40012c00 	.word	0x40012c00
 8004b80:	40000400 	.word	0x40000400
 8004b84:	40000800 	.word	0x40000800

08004b88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	f023 0201 	bic.w	r2, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0303 	bic.w	r3, r3, #3
 8004bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f023 0302 	bic.w	r3, r3, #2
 8004bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a1c      	ldr	r2, [pc, #112]	; (8004c50 <TIM_OC1_SetConfig+0xc8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d10c      	bne.n	8004bfe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f023 0308 	bic.w	r3, r3, #8
 8004bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f023 0304 	bic.w	r3, r3, #4
 8004bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a13      	ldr	r2, [pc, #76]	; (8004c50 <TIM_OC1_SetConfig+0xc8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d111      	bne.n	8004c2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	621a      	str	r2, [r3, #32]
}
 8004c44:	bf00      	nop
 8004c46:	371c      	adds	r7, #28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40012c00 	.word	0x40012c00

08004c54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	f023 0210 	bic.w	r2, r3, #16
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	021b      	lsls	r3, r3, #8
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f023 0320 	bic.w	r3, r3, #32
 8004c9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a1d      	ldr	r2, [pc, #116]	; (8004d24 <TIM_OC2_SetConfig+0xd0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d10d      	bne.n	8004cd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a14      	ldr	r2, [pc, #80]	; (8004d24 <TIM_OC2_SetConfig+0xd0>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d113      	bne.n	8004d00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	621a      	str	r2, [r3, #32]
}
 8004d1a:	bf00      	nop
 8004d1c:	371c      	adds	r7, #28
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bc80      	pop	{r7}
 8004d22:	4770      	bx	lr
 8004d24:	40012c00 	.word	0x40012c00

08004d28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b087      	sub	sp, #28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 0303 	bic.w	r3, r3, #3
 8004d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	021b      	lsls	r3, r3, #8
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a1d      	ldr	r2, [pc, #116]	; (8004df8 <TIM_OC3_SetConfig+0xd0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d10d      	bne.n	8004da2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a14      	ldr	r2, [pc, #80]	; (8004df8 <TIM_OC3_SetConfig+0xd0>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d113      	bne.n	8004dd2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	621a      	str	r2, [r3, #32]
}
 8004dec:	bf00      	nop
 8004dee:	371c      	adds	r7, #28
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bc80      	pop	{r7}
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40012c00 	.word	0x40012c00

08004dfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	021b      	lsls	r3, r3, #8
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	031b      	lsls	r3, r3, #12
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a0f      	ldr	r2, [pc, #60]	; (8004e94 <TIM_OC4_SetConfig+0x98>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d109      	bne.n	8004e70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	019b      	lsls	r3, r3, #6
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	621a      	str	r2, [r3, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	371c      	adds	r7, #28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr
 8004e94:	40012c00 	.word	0x40012c00

08004e98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	f023 0201 	bic.w	r2, r3, #1
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f023 030a 	bic.w	r3, r3, #10
 8004ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	621a      	str	r2, [r3, #32]
}
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr

08004ef4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	f023 0210 	bic.w	r2, r3, #16
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	031b      	lsls	r3, r3, #12
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f30:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	621a      	str	r2, [r3, #32]
}
 8004f48:	bf00      	nop
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr

08004f52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b085      	sub	sp, #20
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f043 0307 	orr.w	r3, r3, #7
 8004f74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	609a      	str	r2, [r3, #8]
}
 8004f7c:	bf00      	nop
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bc80      	pop	{r7}
 8004f84:	4770      	bx	lr

08004f86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b087      	sub	sp, #28
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	607a      	str	r2, [r7, #4]
 8004f92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fa0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	021a      	lsls	r2, r3, #8
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	609a      	str	r2, [r3, #8]
}
 8004fba:	bf00      	nop
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr

08004fc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f003 031f 	and.w	r3, r3, #31
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a1a      	ldr	r2, [r3, #32]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	401a      	ands	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a1a      	ldr	r2, [r3, #32]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f003 031f 	and.w	r3, r3, #31
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	621a      	str	r2, [r3, #32]
}
 8005002:	bf00      	nop
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr

0800500c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005020:	2302      	movs	r3, #2
 8005022:	e046      	b.n	80050b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a16      	ldr	r2, [pc, #88]	; (80050bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d00e      	beq.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005070:	d009      	beq.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a12      	ldr	r2, [pc, #72]	; (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d004      	beq.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a10      	ldr	r2, [pc, #64]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d10c      	bne.n	80050a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800508c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	4313      	orrs	r3, r2
 8005096:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr
 80050bc:	40012c00 	.word	0x40012c00
 80050c0:	40000400 	.word	0x40000400
 80050c4:	40000800 	.word	0x40000800

080050c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e03d      	b.n	8005160 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	bc80      	pop	{r7}
 8005168:	4770      	bx	lr

0800516a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr

0800517c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr

0800518e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e042      	b.n	8005226 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d106      	bne.n	80051ba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7fc fdef 	bl	8001d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2224      	movs	r2, #36	; 0x24
 80051be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68da      	ldr	r2, [r3, #12]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f91c 	bl	8005410 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691a      	ldr	r2, [r3, #16]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695a      	ldr	r2, [r3, #20]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005206:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2220      	movs	r2, #32
 8005212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2220      	movs	r2, #32
 800521a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b08a      	sub	sp, #40	; 0x28
 8005232:	af02      	add	r7, sp, #8
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	603b      	str	r3, [r7, #0]
 800523a:	4613      	mov	r3, r2
 800523c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b20      	cmp	r3, #32
 800524c:	d16d      	bne.n	800532a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <HAL_UART_Transmit+0x2c>
 8005254:	88fb      	ldrh	r3, [r7, #6]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e066      	b.n	800532c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2221      	movs	r2, #33	; 0x21
 8005268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800526c:	f7fc fe5c 	bl	8001f28 <HAL_GetTick>
 8005270:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	88fa      	ldrh	r2, [r7, #6]
 8005276:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	88fa      	ldrh	r2, [r7, #6]
 800527c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005286:	d108      	bne.n	800529a <HAL_UART_Transmit+0x6c>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d104      	bne.n	800529a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005290:	2300      	movs	r3, #0
 8005292:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	61bb      	str	r3, [r7, #24]
 8005298:	e003      	b.n	80052a2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800529e:	2300      	movs	r3, #0
 80052a0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052a2:	e02a      	b.n	80052fa <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2200      	movs	r2, #0
 80052ac:	2180      	movs	r1, #128	; 0x80
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 f840 	bl	8005334 <UART_WaitOnFlagUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e036      	b.n	800532c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10b      	bne.n	80052dc <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	461a      	mov	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052d2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	3302      	adds	r3, #2
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	e007      	b.n	80052ec <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	781a      	ldrb	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	3301      	adds	r3, #1
 80052ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1cf      	bne.n	80052a4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2200      	movs	r2, #0
 800530c:	2140      	movs	r1, #64	; 0x40
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 f810 	bl	8005334 <UART_WaitOnFlagUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e006      	b.n	800532c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2220      	movs	r2, #32
 8005322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	e000      	b.n	800532c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800532a:	2302      	movs	r3, #2
  }
}
 800532c:	4618      	mov	r0, r3
 800532e:	3720      	adds	r7, #32
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b090      	sub	sp, #64	; 0x40
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	603b      	str	r3, [r7, #0]
 8005340:	4613      	mov	r3, r2
 8005342:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005344:	e050      	b.n	80053e8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534c:	d04c      	beq.n	80053e8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800534e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005350:	2b00      	cmp	r3, #0
 8005352:	d007      	beq.n	8005364 <UART_WaitOnFlagUntilTimeout+0x30>
 8005354:	f7fc fde8 	bl	8001f28 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005360:	429a      	cmp	r2, r3
 8005362:	d241      	bcs.n	80053e8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	330c      	adds	r3, #12
 800536a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	e853 3f00 	ldrex	r3, [r3]
 8005372:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800537a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	330c      	adds	r3, #12
 8005382:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005384:	637a      	str	r2, [r7, #52]	; 0x34
 8005386:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005388:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800538a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800538c:	e841 2300 	strex	r3, r2, [r1]
 8005390:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1e5      	bne.n	8005364 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3314      	adds	r3, #20
 800539e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	e853 3f00 	ldrex	r3, [r3]
 80053a6:	613b      	str	r3, [r7, #16]
   return(result);
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	f023 0301 	bic.w	r3, r3, #1
 80053ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3314      	adds	r3, #20
 80053b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053b8:	623a      	str	r2, [r7, #32]
 80053ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053bc:	69f9      	ldr	r1, [r7, #28]
 80053be:	6a3a      	ldr	r2, [r7, #32]
 80053c0:	e841 2300 	strex	r3, r2, [r1]
 80053c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1e5      	bne.n	8005398 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e00f      	b.n	8005408 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	4013      	ands	r3, r2
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	bf0c      	ite	eq
 80053f8:	2301      	moveq	r3, #1
 80053fa:	2300      	movne	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	429a      	cmp	r2, r3
 8005404:	d09f      	beq.n	8005346 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3740      	adds	r7, #64	; 0x40
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800544a:	f023 030c 	bic.w	r3, r3, #12
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6812      	ldr	r2, [r2, #0]
 8005452:	68b9      	ldr	r1, [r7, #8]
 8005454:	430b      	orrs	r3, r1
 8005456:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a2c      	ldr	r2, [pc, #176]	; (8005524 <UART_SetConfig+0x114>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d103      	bne.n	8005480 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005478:	f7fe fde4 	bl	8004044 <HAL_RCC_GetPCLK2Freq>
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	e002      	b.n	8005486 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005480:	f7fe fdcc 	bl	800401c <HAL_RCC_GetPCLK1Freq>
 8005484:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4613      	mov	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	009a      	lsls	r2, r3, #2
 8005490:	441a      	add	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	fbb2 f3f3 	udiv	r3, r2, r3
 800549c:	4a22      	ldr	r2, [pc, #136]	; (8005528 <UART_SetConfig+0x118>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	0119      	lsls	r1, r3, #4
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4613      	mov	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	009a      	lsls	r2, r3, #2
 80054b0:	441a      	add	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80054bc:	4b1a      	ldr	r3, [pc, #104]	; (8005528 <UART_SetConfig+0x118>)
 80054be:	fba3 0302 	umull	r0, r3, r3, r2
 80054c2:	095b      	lsrs	r3, r3, #5
 80054c4:	2064      	movs	r0, #100	; 0x64
 80054c6:	fb00 f303 	mul.w	r3, r0, r3
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	3332      	adds	r3, #50	; 0x32
 80054d0:	4a15      	ldr	r2, [pc, #84]	; (8005528 <UART_SetConfig+0x118>)
 80054d2:	fba2 2303 	umull	r2, r3, r2, r3
 80054d6:	095b      	lsrs	r3, r3, #5
 80054d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054dc:	4419      	add	r1, r3
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4613      	mov	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	009a      	lsls	r2, r3, #2
 80054e8:	441a      	add	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80054f4:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <UART_SetConfig+0x118>)
 80054f6:	fba3 0302 	umull	r0, r3, r3, r2
 80054fa:	095b      	lsrs	r3, r3, #5
 80054fc:	2064      	movs	r0, #100	; 0x64
 80054fe:	fb00 f303 	mul.w	r3, r0, r3
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	011b      	lsls	r3, r3, #4
 8005506:	3332      	adds	r3, #50	; 0x32
 8005508:	4a07      	ldr	r2, [pc, #28]	; (8005528 <UART_SetConfig+0x118>)
 800550a:	fba2 2303 	umull	r2, r3, r2, r3
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	f003 020f 	and.w	r2, r3, #15
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	440a      	add	r2, r1
 800551a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800551c:	bf00      	nop
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40013800 	.word	0x40013800
 8005528:	51eb851f 	.word	0x51eb851f

0800552c <__errno>:
 800552c:	4b01      	ldr	r3, [pc, #4]	; (8005534 <__errno+0x8>)
 800552e:	6818      	ldr	r0, [r3, #0]
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	20000014 	.word	0x20000014

08005538 <__libc_init_array>:
 8005538:	b570      	push	{r4, r5, r6, lr}
 800553a:	2600      	movs	r6, #0
 800553c:	4d0c      	ldr	r5, [pc, #48]	; (8005570 <__libc_init_array+0x38>)
 800553e:	4c0d      	ldr	r4, [pc, #52]	; (8005574 <__libc_init_array+0x3c>)
 8005540:	1b64      	subs	r4, r4, r5
 8005542:	10a4      	asrs	r4, r4, #2
 8005544:	42a6      	cmp	r6, r4
 8005546:	d109      	bne.n	800555c <__libc_init_array+0x24>
 8005548:	f002 febc 	bl	80082c4 <_init>
 800554c:	2600      	movs	r6, #0
 800554e:	4d0a      	ldr	r5, [pc, #40]	; (8005578 <__libc_init_array+0x40>)
 8005550:	4c0a      	ldr	r4, [pc, #40]	; (800557c <__libc_init_array+0x44>)
 8005552:	1b64      	subs	r4, r4, r5
 8005554:	10a4      	asrs	r4, r4, #2
 8005556:	42a6      	cmp	r6, r4
 8005558:	d105      	bne.n	8005566 <__libc_init_array+0x2e>
 800555a:	bd70      	pop	{r4, r5, r6, pc}
 800555c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005560:	4798      	blx	r3
 8005562:	3601      	adds	r6, #1
 8005564:	e7ee      	b.n	8005544 <__libc_init_array+0xc>
 8005566:	f855 3b04 	ldr.w	r3, [r5], #4
 800556a:	4798      	blx	r3
 800556c:	3601      	adds	r6, #1
 800556e:	e7f2      	b.n	8005556 <__libc_init_array+0x1e>
 8005570:	0800877c 	.word	0x0800877c
 8005574:	0800877c 	.word	0x0800877c
 8005578:	0800877c 	.word	0x0800877c
 800557c:	08008780 	.word	0x08008780

08005580 <memset>:
 8005580:	4603      	mov	r3, r0
 8005582:	4402      	add	r2, r0
 8005584:	4293      	cmp	r3, r2
 8005586:	d100      	bne.n	800558a <memset+0xa>
 8005588:	4770      	bx	lr
 800558a:	f803 1b01 	strb.w	r1, [r3], #1
 800558e:	e7f9      	b.n	8005584 <memset+0x4>

08005590 <__cvt>:
 8005590:	2b00      	cmp	r3, #0
 8005592:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005596:	461f      	mov	r7, r3
 8005598:	bfbb      	ittet	lt
 800559a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800559e:	461f      	movlt	r7, r3
 80055a0:	2300      	movge	r3, #0
 80055a2:	232d      	movlt	r3, #45	; 0x2d
 80055a4:	b088      	sub	sp, #32
 80055a6:	4614      	mov	r4, r2
 80055a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80055aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80055ac:	7013      	strb	r3, [r2, #0]
 80055ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80055b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80055b4:	f023 0820 	bic.w	r8, r3, #32
 80055b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055bc:	d005      	beq.n	80055ca <__cvt+0x3a>
 80055be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80055c2:	d100      	bne.n	80055c6 <__cvt+0x36>
 80055c4:	3501      	adds	r5, #1
 80055c6:	2302      	movs	r3, #2
 80055c8:	e000      	b.n	80055cc <__cvt+0x3c>
 80055ca:	2303      	movs	r3, #3
 80055cc:	aa07      	add	r2, sp, #28
 80055ce:	9204      	str	r2, [sp, #16]
 80055d0:	aa06      	add	r2, sp, #24
 80055d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80055d6:	e9cd 3500 	strd	r3, r5, [sp]
 80055da:	4622      	mov	r2, r4
 80055dc:	463b      	mov	r3, r7
 80055de:	f000 fce7 	bl	8005fb0 <_dtoa_r>
 80055e2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80055e6:	4606      	mov	r6, r0
 80055e8:	d102      	bne.n	80055f0 <__cvt+0x60>
 80055ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055ec:	07db      	lsls	r3, r3, #31
 80055ee:	d522      	bpl.n	8005636 <__cvt+0xa6>
 80055f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055f4:	eb06 0905 	add.w	r9, r6, r5
 80055f8:	d110      	bne.n	800561c <__cvt+0x8c>
 80055fa:	7833      	ldrb	r3, [r6, #0]
 80055fc:	2b30      	cmp	r3, #48	; 0x30
 80055fe:	d10a      	bne.n	8005616 <__cvt+0x86>
 8005600:	2200      	movs	r2, #0
 8005602:	2300      	movs	r3, #0
 8005604:	4620      	mov	r0, r4
 8005606:	4639      	mov	r1, r7
 8005608:	f7fb f9ce 	bl	80009a8 <__aeabi_dcmpeq>
 800560c:	b918      	cbnz	r0, 8005616 <__cvt+0x86>
 800560e:	f1c5 0501 	rsb	r5, r5, #1
 8005612:	f8ca 5000 	str.w	r5, [sl]
 8005616:	f8da 3000 	ldr.w	r3, [sl]
 800561a:	4499      	add	r9, r3
 800561c:	2200      	movs	r2, #0
 800561e:	2300      	movs	r3, #0
 8005620:	4620      	mov	r0, r4
 8005622:	4639      	mov	r1, r7
 8005624:	f7fb f9c0 	bl	80009a8 <__aeabi_dcmpeq>
 8005628:	b108      	cbz	r0, 800562e <__cvt+0x9e>
 800562a:	f8cd 901c 	str.w	r9, [sp, #28]
 800562e:	2230      	movs	r2, #48	; 0x30
 8005630:	9b07      	ldr	r3, [sp, #28]
 8005632:	454b      	cmp	r3, r9
 8005634:	d307      	bcc.n	8005646 <__cvt+0xb6>
 8005636:	4630      	mov	r0, r6
 8005638:	9b07      	ldr	r3, [sp, #28]
 800563a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800563c:	1b9b      	subs	r3, r3, r6
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	b008      	add	sp, #32
 8005642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005646:	1c59      	adds	r1, r3, #1
 8005648:	9107      	str	r1, [sp, #28]
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	e7f0      	b.n	8005630 <__cvt+0xa0>

0800564e <__exponent>:
 800564e:	4603      	mov	r3, r0
 8005650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005652:	2900      	cmp	r1, #0
 8005654:	f803 2b02 	strb.w	r2, [r3], #2
 8005658:	bfb6      	itet	lt
 800565a:	222d      	movlt	r2, #45	; 0x2d
 800565c:	222b      	movge	r2, #43	; 0x2b
 800565e:	4249      	neglt	r1, r1
 8005660:	2909      	cmp	r1, #9
 8005662:	7042      	strb	r2, [r0, #1]
 8005664:	dd2b      	ble.n	80056be <__exponent+0x70>
 8005666:	f10d 0407 	add.w	r4, sp, #7
 800566a:	46a4      	mov	ip, r4
 800566c:	270a      	movs	r7, #10
 800566e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005672:	460a      	mov	r2, r1
 8005674:	46a6      	mov	lr, r4
 8005676:	fb07 1516 	mls	r5, r7, r6, r1
 800567a:	2a63      	cmp	r2, #99	; 0x63
 800567c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005680:	4631      	mov	r1, r6
 8005682:	f104 34ff 	add.w	r4, r4, #4294967295
 8005686:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800568a:	dcf0      	bgt.n	800566e <__exponent+0x20>
 800568c:	3130      	adds	r1, #48	; 0x30
 800568e:	f1ae 0502 	sub.w	r5, lr, #2
 8005692:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005696:	4629      	mov	r1, r5
 8005698:	1c44      	adds	r4, r0, #1
 800569a:	4561      	cmp	r1, ip
 800569c:	d30a      	bcc.n	80056b4 <__exponent+0x66>
 800569e:	f10d 0209 	add.w	r2, sp, #9
 80056a2:	eba2 020e 	sub.w	r2, r2, lr
 80056a6:	4565      	cmp	r5, ip
 80056a8:	bf88      	it	hi
 80056aa:	2200      	movhi	r2, #0
 80056ac:	4413      	add	r3, r2
 80056ae:	1a18      	subs	r0, r3, r0
 80056b0:	b003      	add	sp, #12
 80056b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056b8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80056bc:	e7ed      	b.n	800569a <__exponent+0x4c>
 80056be:	2330      	movs	r3, #48	; 0x30
 80056c0:	3130      	adds	r1, #48	; 0x30
 80056c2:	7083      	strb	r3, [r0, #2]
 80056c4:	70c1      	strb	r1, [r0, #3]
 80056c6:	1d03      	adds	r3, r0, #4
 80056c8:	e7f1      	b.n	80056ae <__exponent+0x60>
	...

080056cc <_printf_float>:
 80056cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d0:	b091      	sub	sp, #68	; 0x44
 80056d2:	460c      	mov	r4, r1
 80056d4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80056d8:	4616      	mov	r6, r2
 80056da:	461f      	mov	r7, r3
 80056dc:	4605      	mov	r5, r0
 80056de:	f001 fa55 	bl	8006b8c <_localeconv_r>
 80056e2:	6803      	ldr	r3, [r0, #0]
 80056e4:	4618      	mov	r0, r3
 80056e6:	9309      	str	r3, [sp, #36]	; 0x24
 80056e8:	f7fa fd32 	bl	8000150 <strlen>
 80056ec:	2300      	movs	r3, #0
 80056ee:	930e      	str	r3, [sp, #56]	; 0x38
 80056f0:	f8d8 3000 	ldr.w	r3, [r8]
 80056f4:	900a      	str	r0, [sp, #40]	; 0x28
 80056f6:	3307      	adds	r3, #7
 80056f8:	f023 0307 	bic.w	r3, r3, #7
 80056fc:	f103 0208 	add.w	r2, r3, #8
 8005700:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005704:	f8d4 b000 	ldr.w	fp, [r4]
 8005708:	f8c8 2000 	str.w	r2, [r8]
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005714:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005718:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800571c:	930b      	str	r3, [sp, #44]	; 0x2c
 800571e:	f04f 32ff 	mov.w	r2, #4294967295
 8005722:	4640      	mov	r0, r8
 8005724:	4b9c      	ldr	r3, [pc, #624]	; (8005998 <_printf_float+0x2cc>)
 8005726:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005728:	f7fb f970 	bl	8000a0c <__aeabi_dcmpun>
 800572c:	bb70      	cbnz	r0, 800578c <_printf_float+0xc0>
 800572e:	f04f 32ff 	mov.w	r2, #4294967295
 8005732:	4640      	mov	r0, r8
 8005734:	4b98      	ldr	r3, [pc, #608]	; (8005998 <_printf_float+0x2cc>)
 8005736:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005738:	f7fb f94a 	bl	80009d0 <__aeabi_dcmple>
 800573c:	bb30      	cbnz	r0, 800578c <_printf_float+0xc0>
 800573e:	2200      	movs	r2, #0
 8005740:	2300      	movs	r3, #0
 8005742:	4640      	mov	r0, r8
 8005744:	4651      	mov	r1, sl
 8005746:	f7fb f939 	bl	80009bc <__aeabi_dcmplt>
 800574a:	b110      	cbz	r0, 8005752 <_printf_float+0x86>
 800574c:	232d      	movs	r3, #45	; 0x2d
 800574e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005752:	4b92      	ldr	r3, [pc, #584]	; (800599c <_printf_float+0x2d0>)
 8005754:	4892      	ldr	r0, [pc, #584]	; (80059a0 <_printf_float+0x2d4>)
 8005756:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800575a:	bf94      	ite	ls
 800575c:	4698      	movls	r8, r3
 800575e:	4680      	movhi	r8, r0
 8005760:	2303      	movs	r3, #3
 8005762:	f04f 0a00 	mov.w	sl, #0
 8005766:	6123      	str	r3, [r4, #16]
 8005768:	f02b 0304 	bic.w	r3, fp, #4
 800576c:	6023      	str	r3, [r4, #0]
 800576e:	4633      	mov	r3, r6
 8005770:	4621      	mov	r1, r4
 8005772:	4628      	mov	r0, r5
 8005774:	9700      	str	r7, [sp, #0]
 8005776:	aa0f      	add	r2, sp, #60	; 0x3c
 8005778:	f000 f9d4 	bl	8005b24 <_printf_common>
 800577c:	3001      	adds	r0, #1
 800577e:	f040 8090 	bne.w	80058a2 <_printf_float+0x1d6>
 8005782:	f04f 30ff 	mov.w	r0, #4294967295
 8005786:	b011      	add	sp, #68	; 0x44
 8005788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800578c:	4642      	mov	r2, r8
 800578e:	4653      	mov	r3, sl
 8005790:	4640      	mov	r0, r8
 8005792:	4651      	mov	r1, sl
 8005794:	f7fb f93a 	bl	8000a0c <__aeabi_dcmpun>
 8005798:	b148      	cbz	r0, 80057ae <_printf_float+0xe2>
 800579a:	f1ba 0f00 	cmp.w	sl, #0
 800579e:	bfb8      	it	lt
 80057a0:	232d      	movlt	r3, #45	; 0x2d
 80057a2:	4880      	ldr	r0, [pc, #512]	; (80059a4 <_printf_float+0x2d8>)
 80057a4:	bfb8      	it	lt
 80057a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80057aa:	4b7f      	ldr	r3, [pc, #508]	; (80059a8 <_printf_float+0x2dc>)
 80057ac:	e7d3      	b.n	8005756 <_printf_float+0x8a>
 80057ae:	6863      	ldr	r3, [r4, #4]
 80057b0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	d142      	bne.n	800583e <_printf_float+0x172>
 80057b8:	2306      	movs	r3, #6
 80057ba:	6063      	str	r3, [r4, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	9206      	str	r2, [sp, #24]
 80057c0:	aa0e      	add	r2, sp, #56	; 0x38
 80057c2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80057c6:	aa0d      	add	r2, sp, #52	; 0x34
 80057c8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80057cc:	9203      	str	r2, [sp, #12]
 80057ce:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80057d2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80057d6:	6023      	str	r3, [r4, #0]
 80057d8:	6863      	ldr	r3, [r4, #4]
 80057da:	4642      	mov	r2, r8
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	4628      	mov	r0, r5
 80057e0:	4653      	mov	r3, sl
 80057e2:	910b      	str	r1, [sp, #44]	; 0x2c
 80057e4:	f7ff fed4 	bl	8005590 <__cvt>
 80057e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057ea:	4680      	mov	r8, r0
 80057ec:	2947      	cmp	r1, #71	; 0x47
 80057ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 80057f0:	d108      	bne.n	8005804 <_printf_float+0x138>
 80057f2:	1cc8      	adds	r0, r1, #3
 80057f4:	db02      	blt.n	80057fc <_printf_float+0x130>
 80057f6:	6863      	ldr	r3, [r4, #4]
 80057f8:	4299      	cmp	r1, r3
 80057fa:	dd40      	ble.n	800587e <_printf_float+0x1b2>
 80057fc:	f1a9 0902 	sub.w	r9, r9, #2
 8005800:	fa5f f989 	uxtb.w	r9, r9
 8005804:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005808:	d81f      	bhi.n	800584a <_printf_float+0x17e>
 800580a:	464a      	mov	r2, r9
 800580c:	3901      	subs	r1, #1
 800580e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005812:	910d      	str	r1, [sp, #52]	; 0x34
 8005814:	f7ff ff1b 	bl	800564e <__exponent>
 8005818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800581a:	4682      	mov	sl, r0
 800581c:	1813      	adds	r3, r2, r0
 800581e:	2a01      	cmp	r2, #1
 8005820:	6123      	str	r3, [r4, #16]
 8005822:	dc02      	bgt.n	800582a <_printf_float+0x15e>
 8005824:	6822      	ldr	r2, [r4, #0]
 8005826:	07d2      	lsls	r2, r2, #31
 8005828:	d501      	bpl.n	800582e <_printf_float+0x162>
 800582a:	3301      	adds	r3, #1
 800582c:	6123      	str	r3, [r4, #16]
 800582e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005832:	2b00      	cmp	r3, #0
 8005834:	d09b      	beq.n	800576e <_printf_float+0xa2>
 8005836:	232d      	movs	r3, #45	; 0x2d
 8005838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800583c:	e797      	b.n	800576e <_printf_float+0xa2>
 800583e:	2947      	cmp	r1, #71	; 0x47
 8005840:	d1bc      	bne.n	80057bc <_printf_float+0xf0>
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1ba      	bne.n	80057bc <_printf_float+0xf0>
 8005846:	2301      	movs	r3, #1
 8005848:	e7b7      	b.n	80057ba <_printf_float+0xee>
 800584a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800584e:	d118      	bne.n	8005882 <_printf_float+0x1b6>
 8005850:	2900      	cmp	r1, #0
 8005852:	6863      	ldr	r3, [r4, #4]
 8005854:	dd0b      	ble.n	800586e <_printf_float+0x1a2>
 8005856:	6121      	str	r1, [r4, #16]
 8005858:	b913      	cbnz	r3, 8005860 <_printf_float+0x194>
 800585a:	6822      	ldr	r2, [r4, #0]
 800585c:	07d0      	lsls	r0, r2, #31
 800585e:	d502      	bpl.n	8005866 <_printf_float+0x19a>
 8005860:	3301      	adds	r3, #1
 8005862:	440b      	add	r3, r1
 8005864:	6123      	str	r3, [r4, #16]
 8005866:	f04f 0a00 	mov.w	sl, #0
 800586a:	65a1      	str	r1, [r4, #88]	; 0x58
 800586c:	e7df      	b.n	800582e <_printf_float+0x162>
 800586e:	b913      	cbnz	r3, 8005876 <_printf_float+0x1aa>
 8005870:	6822      	ldr	r2, [r4, #0]
 8005872:	07d2      	lsls	r2, r2, #31
 8005874:	d501      	bpl.n	800587a <_printf_float+0x1ae>
 8005876:	3302      	adds	r3, #2
 8005878:	e7f4      	b.n	8005864 <_printf_float+0x198>
 800587a:	2301      	movs	r3, #1
 800587c:	e7f2      	b.n	8005864 <_printf_float+0x198>
 800587e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005884:	4299      	cmp	r1, r3
 8005886:	db05      	blt.n	8005894 <_printf_float+0x1c8>
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	6121      	str	r1, [r4, #16]
 800588c:	07d8      	lsls	r0, r3, #31
 800588e:	d5ea      	bpl.n	8005866 <_printf_float+0x19a>
 8005890:	1c4b      	adds	r3, r1, #1
 8005892:	e7e7      	b.n	8005864 <_printf_float+0x198>
 8005894:	2900      	cmp	r1, #0
 8005896:	bfcc      	ite	gt
 8005898:	2201      	movgt	r2, #1
 800589a:	f1c1 0202 	rsble	r2, r1, #2
 800589e:	4413      	add	r3, r2
 80058a0:	e7e0      	b.n	8005864 <_printf_float+0x198>
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	055a      	lsls	r2, r3, #21
 80058a6:	d407      	bmi.n	80058b8 <_printf_float+0x1ec>
 80058a8:	6923      	ldr	r3, [r4, #16]
 80058aa:	4642      	mov	r2, r8
 80058ac:	4631      	mov	r1, r6
 80058ae:	4628      	mov	r0, r5
 80058b0:	47b8      	blx	r7
 80058b2:	3001      	adds	r0, #1
 80058b4:	d12b      	bne.n	800590e <_printf_float+0x242>
 80058b6:	e764      	b.n	8005782 <_printf_float+0xb6>
 80058b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80058bc:	f240 80dd 	bls.w	8005a7a <_printf_float+0x3ae>
 80058c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058c4:	2200      	movs	r2, #0
 80058c6:	2300      	movs	r3, #0
 80058c8:	f7fb f86e 	bl	80009a8 <__aeabi_dcmpeq>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d033      	beq.n	8005938 <_printf_float+0x26c>
 80058d0:	2301      	movs	r3, #1
 80058d2:	4631      	mov	r1, r6
 80058d4:	4628      	mov	r0, r5
 80058d6:	4a35      	ldr	r2, [pc, #212]	; (80059ac <_printf_float+0x2e0>)
 80058d8:	47b8      	blx	r7
 80058da:	3001      	adds	r0, #1
 80058dc:	f43f af51 	beq.w	8005782 <_printf_float+0xb6>
 80058e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80058e4:	429a      	cmp	r2, r3
 80058e6:	db02      	blt.n	80058ee <_printf_float+0x222>
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	07d8      	lsls	r0, r3, #31
 80058ec:	d50f      	bpl.n	800590e <_printf_float+0x242>
 80058ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058f2:	4631      	mov	r1, r6
 80058f4:	4628      	mov	r0, r5
 80058f6:	47b8      	blx	r7
 80058f8:	3001      	adds	r0, #1
 80058fa:	f43f af42 	beq.w	8005782 <_printf_float+0xb6>
 80058fe:	f04f 0800 	mov.w	r8, #0
 8005902:	f104 091a 	add.w	r9, r4, #26
 8005906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005908:	3b01      	subs	r3, #1
 800590a:	4543      	cmp	r3, r8
 800590c:	dc09      	bgt.n	8005922 <_printf_float+0x256>
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	079b      	lsls	r3, r3, #30
 8005912:	f100 8102 	bmi.w	8005b1a <_printf_float+0x44e>
 8005916:	68e0      	ldr	r0, [r4, #12]
 8005918:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800591a:	4298      	cmp	r0, r3
 800591c:	bfb8      	it	lt
 800591e:	4618      	movlt	r0, r3
 8005920:	e731      	b.n	8005786 <_printf_float+0xba>
 8005922:	2301      	movs	r3, #1
 8005924:	464a      	mov	r2, r9
 8005926:	4631      	mov	r1, r6
 8005928:	4628      	mov	r0, r5
 800592a:	47b8      	blx	r7
 800592c:	3001      	adds	r0, #1
 800592e:	f43f af28 	beq.w	8005782 <_printf_float+0xb6>
 8005932:	f108 0801 	add.w	r8, r8, #1
 8005936:	e7e6      	b.n	8005906 <_printf_float+0x23a>
 8005938:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800593a:	2b00      	cmp	r3, #0
 800593c:	dc38      	bgt.n	80059b0 <_printf_float+0x2e4>
 800593e:	2301      	movs	r3, #1
 8005940:	4631      	mov	r1, r6
 8005942:	4628      	mov	r0, r5
 8005944:	4a19      	ldr	r2, [pc, #100]	; (80059ac <_printf_float+0x2e0>)
 8005946:	47b8      	blx	r7
 8005948:	3001      	adds	r0, #1
 800594a:	f43f af1a 	beq.w	8005782 <_printf_float+0xb6>
 800594e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005952:	4313      	orrs	r3, r2
 8005954:	d102      	bne.n	800595c <_printf_float+0x290>
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	07d9      	lsls	r1, r3, #31
 800595a:	d5d8      	bpl.n	800590e <_printf_float+0x242>
 800595c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005960:	4631      	mov	r1, r6
 8005962:	4628      	mov	r0, r5
 8005964:	47b8      	blx	r7
 8005966:	3001      	adds	r0, #1
 8005968:	f43f af0b 	beq.w	8005782 <_printf_float+0xb6>
 800596c:	f04f 0900 	mov.w	r9, #0
 8005970:	f104 0a1a 	add.w	sl, r4, #26
 8005974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005976:	425b      	negs	r3, r3
 8005978:	454b      	cmp	r3, r9
 800597a:	dc01      	bgt.n	8005980 <_printf_float+0x2b4>
 800597c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800597e:	e794      	b.n	80058aa <_printf_float+0x1de>
 8005980:	2301      	movs	r3, #1
 8005982:	4652      	mov	r2, sl
 8005984:	4631      	mov	r1, r6
 8005986:	4628      	mov	r0, r5
 8005988:	47b8      	blx	r7
 800598a:	3001      	adds	r0, #1
 800598c:	f43f aef9 	beq.w	8005782 <_printf_float+0xb6>
 8005990:	f109 0901 	add.w	r9, r9, #1
 8005994:	e7ee      	b.n	8005974 <_printf_float+0x2a8>
 8005996:	bf00      	nop
 8005998:	7fefffff 	.word	0x7fefffff
 800599c:	080083a0 	.word	0x080083a0
 80059a0:	080083a4 	.word	0x080083a4
 80059a4:	080083ac 	.word	0x080083ac
 80059a8:	080083a8 	.word	0x080083a8
 80059ac:	080083b0 	.word	0x080083b0
 80059b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80059b4:	429a      	cmp	r2, r3
 80059b6:	bfa8      	it	ge
 80059b8:	461a      	movge	r2, r3
 80059ba:	2a00      	cmp	r2, #0
 80059bc:	4691      	mov	r9, r2
 80059be:	dc37      	bgt.n	8005a30 <_printf_float+0x364>
 80059c0:	f04f 0b00 	mov.w	fp, #0
 80059c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059c8:	f104 021a 	add.w	r2, r4, #26
 80059cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80059d0:	ebaa 0309 	sub.w	r3, sl, r9
 80059d4:	455b      	cmp	r3, fp
 80059d6:	dc33      	bgt.n	8005a40 <_printf_float+0x374>
 80059d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80059dc:	429a      	cmp	r2, r3
 80059de:	db3b      	blt.n	8005a58 <_printf_float+0x38c>
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	07da      	lsls	r2, r3, #31
 80059e4:	d438      	bmi.n	8005a58 <_printf_float+0x38c>
 80059e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80059ea:	eba2 030a 	sub.w	r3, r2, sl
 80059ee:	eba2 0901 	sub.w	r9, r2, r1
 80059f2:	4599      	cmp	r9, r3
 80059f4:	bfa8      	it	ge
 80059f6:	4699      	movge	r9, r3
 80059f8:	f1b9 0f00 	cmp.w	r9, #0
 80059fc:	dc34      	bgt.n	8005a68 <_printf_float+0x39c>
 80059fe:	f04f 0800 	mov.w	r8, #0
 8005a02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a06:	f104 0a1a 	add.w	sl, r4, #26
 8005a0a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a0e:	1a9b      	subs	r3, r3, r2
 8005a10:	eba3 0309 	sub.w	r3, r3, r9
 8005a14:	4543      	cmp	r3, r8
 8005a16:	f77f af7a 	ble.w	800590e <_printf_float+0x242>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	4652      	mov	r2, sl
 8005a1e:	4631      	mov	r1, r6
 8005a20:	4628      	mov	r0, r5
 8005a22:	47b8      	blx	r7
 8005a24:	3001      	adds	r0, #1
 8005a26:	f43f aeac 	beq.w	8005782 <_printf_float+0xb6>
 8005a2a:	f108 0801 	add.w	r8, r8, #1
 8005a2e:	e7ec      	b.n	8005a0a <_printf_float+0x33e>
 8005a30:	4613      	mov	r3, r2
 8005a32:	4631      	mov	r1, r6
 8005a34:	4642      	mov	r2, r8
 8005a36:	4628      	mov	r0, r5
 8005a38:	47b8      	blx	r7
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	d1c0      	bne.n	80059c0 <_printf_float+0x2f4>
 8005a3e:	e6a0      	b.n	8005782 <_printf_float+0xb6>
 8005a40:	2301      	movs	r3, #1
 8005a42:	4631      	mov	r1, r6
 8005a44:	4628      	mov	r0, r5
 8005a46:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a48:	47b8      	blx	r7
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	f43f ae99 	beq.w	8005782 <_printf_float+0xb6>
 8005a50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a52:	f10b 0b01 	add.w	fp, fp, #1
 8005a56:	e7b9      	b.n	80059cc <_printf_float+0x300>
 8005a58:	4631      	mov	r1, r6
 8005a5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a5e:	4628      	mov	r0, r5
 8005a60:	47b8      	blx	r7
 8005a62:	3001      	adds	r0, #1
 8005a64:	d1bf      	bne.n	80059e6 <_printf_float+0x31a>
 8005a66:	e68c      	b.n	8005782 <_printf_float+0xb6>
 8005a68:	464b      	mov	r3, r9
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	eb08 020a 	add.w	r2, r8, sl
 8005a72:	47b8      	blx	r7
 8005a74:	3001      	adds	r0, #1
 8005a76:	d1c2      	bne.n	80059fe <_printf_float+0x332>
 8005a78:	e683      	b.n	8005782 <_printf_float+0xb6>
 8005a7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a7c:	2a01      	cmp	r2, #1
 8005a7e:	dc01      	bgt.n	8005a84 <_printf_float+0x3b8>
 8005a80:	07db      	lsls	r3, r3, #31
 8005a82:	d537      	bpl.n	8005af4 <_printf_float+0x428>
 8005a84:	2301      	movs	r3, #1
 8005a86:	4642      	mov	r2, r8
 8005a88:	4631      	mov	r1, r6
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	47b8      	blx	r7
 8005a8e:	3001      	adds	r0, #1
 8005a90:	f43f ae77 	beq.w	8005782 <_printf_float+0xb6>
 8005a94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a98:	4631      	mov	r1, r6
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	47b8      	blx	r7
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	f43f ae6f 	beq.w	8005782 <_printf_float+0xb6>
 8005aa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f7fa ff7c 	bl	80009a8 <__aeabi_dcmpeq>
 8005ab0:	b9d8      	cbnz	r0, 8005aea <_printf_float+0x41e>
 8005ab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ab4:	f108 0201 	add.w	r2, r8, #1
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	4631      	mov	r1, r6
 8005abc:	4628      	mov	r0, r5
 8005abe:	47b8      	blx	r7
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	d10e      	bne.n	8005ae2 <_printf_float+0x416>
 8005ac4:	e65d      	b.n	8005782 <_printf_float+0xb6>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	464a      	mov	r2, r9
 8005aca:	4631      	mov	r1, r6
 8005acc:	4628      	mov	r0, r5
 8005ace:	47b8      	blx	r7
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	f43f ae56 	beq.w	8005782 <_printf_float+0xb6>
 8005ad6:	f108 0801 	add.w	r8, r8, #1
 8005ada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005adc:	3b01      	subs	r3, #1
 8005ade:	4543      	cmp	r3, r8
 8005ae0:	dcf1      	bgt.n	8005ac6 <_printf_float+0x3fa>
 8005ae2:	4653      	mov	r3, sl
 8005ae4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ae8:	e6e0      	b.n	80058ac <_printf_float+0x1e0>
 8005aea:	f04f 0800 	mov.w	r8, #0
 8005aee:	f104 091a 	add.w	r9, r4, #26
 8005af2:	e7f2      	b.n	8005ada <_printf_float+0x40e>
 8005af4:	2301      	movs	r3, #1
 8005af6:	4642      	mov	r2, r8
 8005af8:	e7df      	b.n	8005aba <_printf_float+0x3ee>
 8005afa:	2301      	movs	r3, #1
 8005afc:	464a      	mov	r2, r9
 8005afe:	4631      	mov	r1, r6
 8005b00:	4628      	mov	r0, r5
 8005b02:	47b8      	blx	r7
 8005b04:	3001      	adds	r0, #1
 8005b06:	f43f ae3c 	beq.w	8005782 <_printf_float+0xb6>
 8005b0a:	f108 0801 	add.w	r8, r8, #1
 8005b0e:	68e3      	ldr	r3, [r4, #12]
 8005b10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005b12:	1a5b      	subs	r3, r3, r1
 8005b14:	4543      	cmp	r3, r8
 8005b16:	dcf0      	bgt.n	8005afa <_printf_float+0x42e>
 8005b18:	e6fd      	b.n	8005916 <_printf_float+0x24a>
 8005b1a:	f04f 0800 	mov.w	r8, #0
 8005b1e:	f104 0919 	add.w	r9, r4, #25
 8005b22:	e7f4      	b.n	8005b0e <_printf_float+0x442>

08005b24 <_printf_common>:
 8005b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b28:	4616      	mov	r6, r2
 8005b2a:	4699      	mov	r9, r3
 8005b2c:	688a      	ldr	r2, [r1, #8]
 8005b2e:	690b      	ldr	r3, [r1, #16]
 8005b30:	4607      	mov	r7, r0
 8005b32:	4293      	cmp	r3, r2
 8005b34:	bfb8      	it	lt
 8005b36:	4613      	movlt	r3, r2
 8005b38:	6033      	str	r3, [r6, #0]
 8005b3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b3e:	460c      	mov	r4, r1
 8005b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b44:	b10a      	cbz	r2, 8005b4a <_printf_common+0x26>
 8005b46:	3301      	adds	r3, #1
 8005b48:	6033      	str	r3, [r6, #0]
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	0699      	lsls	r1, r3, #26
 8005b4e:	bf42      	ittt	mi
 8005b50:	6833      	ldrmi	r3, [r6, #0]
 8005b52:	3302      	addmi	r3, #2
 8005b54:	6033      	strmi	r3, [r6, #0]
 8005b56:	6825      	ldr	r5, [r4, #0]
 8005b58:	f015 0506 	ands.w	r5, r5, #6
 8005b5c:	d106      	bne.n	8005b6c <_printf_common+0x48>
 8005b5e:	f104 0a19 	add.w	sl, r4, #25
 8005b62:	68e3      	ldr	r3, [r4, #12]
 8005b64:	6832      	ldr	r2, [r6, #0]
 8005b66:	1a9b      	subs	r3, r3, r2
 8005b68:	42ab      	cmp	r3, r5
 8005b6a:	dc28      	bgt.n	8005bbe <_printf_common+0x9a>
 8005b6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b70:	1e13      	subs	r3, r2, #0
 8005b72:	6822      	ldr	r2, [r4, #0]
 8005b74:	bf18      	it	ne
 8005b76:	2301      	movne	r3, #1
 8005b78:	0692      	lsls	r2, r2, #26
 8005b7a:	d42d      	bmi.n	8005bd8 <_printf_common+0xb4>
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	4638      	mov	r0, r7
 8005b80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b84:	47c0      	blx	r8
 8005b86:	3001      	adds	r0, #1
 8005b88:	d020      	beq.n	8005bcc <_printf_common+0xa8>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	68e5      	ldr	r5, [r4, #12]
 8005b8e:	f003 0306 	and.w	r3, r3, #6
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	bf18      	it	ne
 8005b96:	2500      	movne	r5, #0
 8005b98:	6832      	ldr	r2, [r6, #0]
 8005b9a:	f04f 0600 	mov.w	r6, #0
 8005b9e:	68a3      	ldr	r3, [r4, #8]
 8005ba0:	bf08      	it	eq
 8005ba2:	1aad      	subeq	r5, r5, r2
 8005ba4:	6922      	ldr	r2, [r4, #16]
 8005ba6:	bf08      	it	eq
 8005ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bac:	4293      	cmp	r3, r2
 8005bae:	bfc4      	itt	gt
 8005bb0:	1a9b      	subgt	r3, r3, r2
 8005bb2:	18ed      	addgt	r5, r5, r3
 8005bb4:	341a      	adds	r4, #26
 8005bb6:	42b5      	cmp	r5, r6
 8005bb8:	d11a      	bne.n	8005bf0 <_printf_common+0xcc>
 8005bba:	2000      	movs	r0, #0
 8005bbc:	e008      	b.n	8005bd0 <_printf_common+0xac>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	4652      	mov	r2, sl
 8005bc2:	4649      	mov	r1, r9
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	47c0      	blx	r8
 8005bc8:	3001      	adds	r0, #1
 8005bca:	d103      	bne.n	8005bd4 <_printf_common+0xb0>
 8005bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd4:	3501      	adds	r5, #1
 8005bd6:	e7c4      	b.n	8005b62 <_printf_common+0x3e>
 8005bd8:	2030      	movs	r0, #48	; 0x30
 8005bda:	18e1      	adds	r1, r4, r3
 8005bdc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005be6:	4422      	add	r2, r4
 8005be8:	3302      	adds	r3, #2
 8005bea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bee:	e7c5      	b.n	8005b7c <_printf_common+0x58>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	4622      	mov	r2, r4
 8005bf4:	4649      	mov	r1, r9
 8005bf6:	4638      	mov	r0, r7
 8005bf8:	47c0      	blx	r8
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	d0e6      	beq.n	8005bcc <_printf_common+0xa8>
 8005bfe:	3601      	adds	r6, #1
 8005c00:	e7d9      	b.n	8005bb6 <_printf_common+0x92>
	...

08005c04 <_printf_i>:
 8005c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c08:	460c      	mov	r4, r1
 8005c0a:	7e27      	ldrb	r7, [r4, #24]
 8005c0c:	4691      	mov	r9, r2
 8005c0e:	2f78      	cmp	r7, #120	; 0x78
 8005c10:	4680      	mov	r8, r0
 8005c12:	469a      	mov	sl, r3
 8005c14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c1a:	d807      	bhi.n	8005c2c <_printf_i+0x28>
 8005c1c:	2f62      	cmp	r7, #98	; 0x62
 8005c1e:	d80a      	bhi.n	8005c36 <_printf_i+0x32>
 8005c20:	2f00      	cmp	r7, #0
 8005c22:	f000 80d9 	beq.w	8005dd8 <_printf_i+0x1d4>
 8005c26:	2f58      	cmp	r7, #88	; 0x58
 8005c28:	f000 80a4 	beq.w	8005d74 <_printf_i+0x170>
 8005c2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c34:	e03a      	b.n	8005cac <_printf_i+0xa8>
 8005c36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c3a:	2b15      	cmp	r3, #21
 8005c3c:	d8f6      	bhi.n	8005c2c <_printf_i+0x28>
 8005c3e:	a001      	add	r0, pc, #4	; (adr r0, 8005c44 <_printf_i+0x40>)
 8005c40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005c44:	08005c9d 	.word	0x08005c9d
 8005c48:	08005cb1 	.word	0x08005cb1
 8005c4c:	08005c2d 	.word	0x08005c2d
 8005c50:	08005c2d 	.word	0x08005c2d
 8005c54:	08005c2d 	.word	0x08005c2d
 8005c58:	08005c2d 	.word	0x08005c2d
 8005c5c:	08005cb1 	.word	0x08005cb1
 8005c60:	08005c2d 	.word	0x08005c2d
 8005c64:	08005c2d 	.word	0x08005c2d
 8005c68:	08005c2d 	.word	0x08005c2d
 8005c6c:	08005c2d 	.word	0x08005c2d
 8005c70:	08005dbf 	.word	0x08005dbf
 8005c74:	08005ce1 	.word	0x08005ce1
 8005c78:	08005da1 	.word	0x08005da1
 8005c7c:	08005c2d 	.word	0x08005c2d
 8005c80:	08005c2d 	.word	0x08005c2d
 8005c84:	08005de1 	.word	0x08005de1
 8005c88:	08005c2d 	.word	0x08005c2d
 8005c8c:	08005ce1 	.word	0x08005ce1
 8005c90:	08005c2d 	.word	0x08005c2d
 8005c94:	08005c2d 	.word	0x08005c2d
 8005c98:	08005da9 	.word	0x08005da9
 8005c9c:	680b      	ldr	r3, [r1, #0]
 8005c9e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ca2:	1d1a      	adds	r2, r3, #4
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	600a      	str	r2, [r1, #0]
 8005ca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cac:	2301      	movs	r3, #1
 8005cae:	e0a4      	b.n	8005dfa <_printf_i+0x1f6>
 8005cb0:	6825      	ldr	r5, [r4, #0]
 8005cb2:	6808      	ldr	r0, [r1, #0]
 8005cb4:	062e      	lsls	r6, r5, #24
 8005cb6:	f100 0304 	add.w	r3, r0, #4
 8005cba:	d50a      	bpl.n	8005cd2 <_printf_i+0xce>
 8005cbc:	6805      	ldr	r5, [r0, #0]
 8005cbe:	600b      	str	r3, [r1, #0]
 8005cc0:	2d00      	cmp	r5, #0
 8005cc2:	da03      	bge.n	8005ccc <_printf_i+0xc8>
 8005cc4:	232d      	movs	r3, #45	; 0x2d
 8005cc6:	426d      	negs	r5, r5
 8005cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ccc:	230a      	movs	r3, #10
 8005cce:	485e      	ldr	r0, [pc, #376]	; (8005e48 <_printf_i+0x244>)
 8005cd0:	e019      	b.n	8005d06 <_printf_i+0x102>
 8005cd2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005cd6:	6805      	ldr	r5, [r0, #0]
 8005cd8:	600b      	str	r3, [r1, #0]
 8005cda:	bf18      	it	ne
 8005cdc:	b22d      	sxthne	r5, r5
 8005cde:	e7ef      	b.n	8005cc0 <_printf_i+0xbc>
 8005ce0:	680b      	ldr	r3, [r1, #0]
 8005ce2:	6825      	ldr	r5, [r4, #0]
 8005ce4:	1d18      	adds	r0, r3, #4
 8005ce6:	6008      	str	r0, [r1, #0]
 8005ce8:	0628      	lsls	r0, r5, #24
 8005cea:	d501      	bpl.n	8005cf0 <_printf_i+0xec>
 8005cec:	681d      	ldr	r5, [r3, #0]
 8005cee:	e002      	b.n	8005cf6 <_printf_i+0xf2>
 8005cf0:	0669      	lsls	r1, r5, #25
 8005cf2:	d5fb      	bpl.n	8005cec <_printf_i+0xe8>
 8005cf4:	881d      	ldrh	r5, [r3, #0]
 8005cf6:	2f6f      	cmp	r7, #111	; 0x6f
 8005cf8:	bf0c      	ite	eq
 8005cfa:	2308      	moveq	r3, #8
 8005cfc:	230a      	movne	r3, #10
 8005cfe:	4852      	ldr	r0, [pc, #328]	; (8005e48 <_printf_i+0x244>)
 8005d00:	2100      	movs	r1, #0
 8005d02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d06:	6866      	ldr	r6, [r4, #4]
 8005d08:	2e00      	cmp	r6, #0
 8005d0a:	bfa8      	it	ge
 8005d0c:	6821      	ldrge	r1, [r4, #0]
 8005d0e:	60a6      	str	r6, [r4, #8]
 8005d10:	bfa4      	itt	ge
 8005d12:	f021 0104 	bicge.w	r1, r1, #4
 8005d16:	6021      	strge	r1, [r4, #0]
 8005d18:	b90d      	cbnz	r5, 8005d1e <_printf_i+0x11a>
 8005d1a:	2e00      	cmp	r6, #0
 8005d1c:	d04d      	beq.n	8005dba <_printf_i+0x1b6>
 8005d1e:	4616      	mov	r6, r2
 8005d20:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d24:	fb03 5711 	mls	r7, r3, r1, r5
 8005d28:	5dc7      	ldrb	r7, [r0, r7]
 8005d2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d2e:	462f      	mov	r7, r5
 8005d30:	42bb      	cmp	r3, r7
 8005d32:	460d      	mov	r5, r1
 8005d34:	d9f4      	bls.n	8005d20 <_printf_i+0x11c>
 8005d36:	2b08      	cmp	r3, #8
 8005d38:	d10b      	bne.n	8005d52 <_printf_i+0x14e>
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	07df      	lsls	r7, r3, #31
 8005d3e:	d508      	bpl.n	8005d52 <_printf_i+0x14e>
 8005d40:	6923      	ldr	r3, [r4, #16]
 8005d42:	6861      	ldr	r1, [r4, #4]
 8005d44:	4299      	cmp	r1, r3
 8005d46:	bfde      	ittt	le
 8005d48:	2330      	movle	r3, #48	; 0x30
 8005d4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d52:	1b92      	subs	r2, r2, r6
 8005d54:	6122      	str	r2, [r4, #16]
 8005d56:	464b      	mov	r3, r9
 8005d58:	4621      	mov	r1, r4
 8005d5a:	4640      	mov	r0, r8
 8005d5c:	f8cd a000 	str.w	sl, [sp]
 8005d60:	aa03      	add	r2, sp, #12
 8005d62:	f7ff fedf 	bl	8005b24 <_printf_common>
 8005d66:	3001      	adds	r0, #1
 8005d68:	d14c      	bne.n	8005e04 <_printf_i+0x200>
 8005d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6e:	b004      	add	sp, #16
 8005d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d74:	4834      	ldr	r0, [pc, #208]	; (8005e48 <_printf_i+0x244>)
 8005d76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d7a:	680e      	ldr	r6, [r1, #0]
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d82:	061f      	lsls	r7, r3, #24
 8005d84:	600e      	str	r6, [r1, #0]
 8005d86:	d514      	bpl.n	8005db2 <_printf_i+0x1ae>
 8005d88:	07d9      	lsls	r1, r3, #31
 8005d8a:	bf44      	itt	mi
 8005d8c:	f043 0320 	orrmi.w	r3, r3, #32
 8005d90:	6023      	strmi	r3, [r4, #0]
 8005d92:	b91d      	cbnz	r5, 8005d9c <_printf_i+0x198>
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	f023 0320 	bic.w	r3, r3, #32
 8005d9a:	6023      	str	r3, [r4, #0]
 8005d9c:	2310      	movs	r3, #16
 8005d9e:	e7af      	b.n	8005d00 <_printf_i+0xfc>
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	f043 0320 	orr.w	r3, r3, #32
 8005da6:	6023      	str	r3, [r4, #0]
 8005da8:	2378      	movs	r3, #120	; 0x78
 8005daa:	4828      	ldr	r0, [pc, #160]	; (8005e4c <_printf_i+0x248>)
 8005dac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005db0:	e7e3      	b.n	8005d7a <_printf_i+0x176>
 8005db2:	065e      	lsls	r6, r3, #25
 8005db4:	bf48      	it	mi
 8005db6:	b2ad      	uxthmi	r5, r5
 8005db8:	e7e6      	b.n	8005d88 <_printf_i+0x184>
 8005dba:	4616      	mov	r6, r2
 8005dbc:	e7bb      	b.n	8005d36 <_printf_i+0x132>
 8005dbe:	680b      	ldr	r3, [r1, #0]
 8005dc0:	6826      	ldr	r6, [r4, #0]
 8005dc2:	1d1d      	adds	r5, r3, #4
 8005dc4:	6960      	ldr	r0, [r4, #20]
 8005dc6:	600d      	str	r5, [r1, #0]
 8005dc8:	0635      	lsls	r5, r6, #24
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	d501      	bpl.n	8005dd2 <_printf_i+0x1ce>
 8005dce:	6018      	str	r0, [r3, #0]
 8005dd0:	e002      	b.n	8005dd8 <_printf_i+0x1d4>
 8005dd2:	0671      	lsls	r1, r6, #25
 8005dd4:	d5fb      	bpl.n	8005dce <_printf_i+0x1ca>
 8005dd6:	8018      	strh	r0, [r3, #0]
 8005dd8:	2300      	movs	r3, #0
 8005dda:	4616      	mov	r6, r2
 8005ddc:	6123      	str	r3, [r4, #16]
 8005dde:	e7ba      	b.n	8005d56 <_printf_i+0x152>
 8005de0:	680b      	ldr	r3, [r1, #0]
 8005de2:	1d1a      	adds	r2, r3, #4
 8005de4:	600a      	str	r2, [r1, #0]
 8005de6:	681e      	ldr	r6, [r3, #0]
 8005de8:	2100      	movs	r1, #0
 8005dea:	4630      	mov	r0, r6
 8005dec:	6862      	ldr	r2, [r4, #4]
 8005dee:	f000 fed9 	bl	8006ba4 <memchr>
 8005df2:	b108      	cbz	r0, 8005df8 <_printf_i+0x1f4>
 8005df4:	1b80      	subs	r0, r0, r6
 8005df6:	6060      	str	r0, [r4, #4]
 8005df8:	6863      	ldr	r3, [r4, #4]
 8005dfa:	6123      	str	r3, [r4, #16]
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e02:	e7a8      	b.n	8005d56 <_printf_i+0x152>
 8005e04:	4632      	mov	r2, r6
 8005e06:	4649      	mov	r1, r9
 8005e08:	4640      	mov	r0, r8
 8005e0a:	6923      	ldr	r3, [r4, #16]
 8005e0c:	47d0      	blx	sl
 8005e0e:	3001      	adds	r0, #1
 8005e10:	d0ab      	beq.n	8005d6a <_printf_i+0x166>
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	079b      	lsls	r3, r3, #30
 8005e16:	d413      	bmi.n	8005e40 <_printf_i+0x23c>
 8005e18:	68e0      	ldr	r0, [r4, #12]
 8005e1a:	9b03      	ldr	r3, [sp, #12]
 8005e1c:	4298      	cmp	r0, r3
 8005e1e:	bfb8      	it	lt
 8005e20:	4618      	movlt	r0, r3
 8005e22:	e7a4      	b.n	8005d6e <_printf_i+0x16a>
 8005e24:	2301      	movs	r3, #1
 8005e26:	4632      	mov	r2, r6
 8005e28:	4649      	mov	r1, r9
 8005e2a:	4640      	mov	r0, r8
 8005e2c:	47d0      	blx	sl
 8005e2e:	3001      	adds	r0, #1
 8005e30:	d09b      	beq.n	8005d6a <_printf_i+0x166>
 8005e32:	3501      	adds	r5, #1
 8005e34:	68e3      	ldr	r3, [r4, #12]
 8005e36:	9903      	ldr	r1, [sp, #12]
 8005e38:	1a5b      	subs	r3, r3, r1
 8005e3a:	42ab      	cmp	r3, r5
 8005e3c:	dcf2      	bgt.n	8005e24 <_printf_i+0x220>
 8005e3e:	e7eb      	b.n	8005e18 <_printf_i+0x214>
 8005e40:	2500      	movs	r5, #0
 8005e42:	f104 0619 	add.w	r6, r4, #25
 8005e46:	e7f5      	b.n	8005e34 <_printf_i+0x230>
 8005e48:	080083b2 	.word	0x080083b2
 8005e4c:	080083c3 	.word	0x080083c3

08005e50 <siprintf>:
 8005e50:	b40e      	push	{r1, r2, r3}
 8005e52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e56:	b500      	push	{lr}
 8005e58:	b09c      	sub	sp, #112	; 0x70
 8005e5a:	ab1d      	add	r3, sp, #116	; 0x74
 8005e5c:	9002      	str	r0, [sp, #8]
 8005e5e:	9006      	str	r0, [sp, #24]
 8005e60:	9107      	str	r1, [sp, #28]
 8005e62:	9104      	str	r1, [sp, #16]
 8005e64:	4808      	ldr	r0, [pc, #32]	; (8005e88 <siprintf+0x38>)
 8005e66:	4909      	ldr	r1, [pc, #36]	; (8005e8c <siprintf+0x3c>)
 8005e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e6c:	9105      	str	r1, [sp, #20]
 8005e6e:	6800      	ldr	r0, [r0, #0]
 8005e70:	a902      	add	r1, sp, #8
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	f001 fb44 	bl	8007500 <_svfiprintf_r>
 8005e78:	2200      	movs	r2, #0
 8005e7a:	9b02      	ldr	r3, [sp, #8]
 8005e7c:	701a      	strb	r2, [r3, #0]
 8005e7e:	b01c      	add	sp, #112	; 0x70
 8005e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e84:	b003      	add	sp, #12
 8005e86:	4770      	bx	lr
 8005e88:	20000014 	.word	0x20000014
 8005e8c:	ffff0208 	.word	0xffff0208

08005e90 <quorem>:
 8005e90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e94:	6903      	ldr	r3, [r0, #16]
 8005e96:	690c      	ldr	r4, [r1, #16]
 8005e98:	4607      	mov	r7, r0
 8005e9a:	42a3      	cmp	r3, r4
 8005e9c:	f2c0 8083 	blt.w	8005fa6 <quorem+0x116>
 8005ea0:	3c01      	subs	r4, #1
 8005ea2:	f100 0514 	add.w	r5, r0, #20
 8005ea6:	f101 0814 	add.w	r8, r1, #20
 8005eaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005eae:	9301      	str	r3, [sp, #4]
 8005eb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005eb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ec0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ec4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ec8:	d332      	bcc.n	8005f30 <quorem+0xa0>
 8005eca:	f04f 0e00 	mov.w	lr, #0
 8005ece:	4640      	mov	r0, r8
 8005ed0:	46ac      	mov	ip, r5
 8005ed2:	46f2      	mov	sl, lr
 8005ed4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ed8:	b293      	uxth	r3, r2
 8005eda:	fb06 e303 	mla	r3, r6, r3, lr
 8005ede:	0c12      	lsrs	r2, r2, #16
 8005ee0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005ee4:	fb06 e202 	mla	r2, r6, r2, lr
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	ebaa 0303 	sub.w	r3, sl, r3
 8005eee:	f8dc a000 	ldr.w	sl, [ip]
 8005ef2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ef6:	fa1f fa8a 	uxth.w	sl, sl
 8005efa:	4453      	add	r3, sl
 8005efc:	fa1f fa82 	uxth.w	sl, r2
 8005f00:	f8dc 2000 	ldr.w	r2, [ip]
 8005f04:	4581      	cmp	r9, r0
 8005f06:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005f0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f14:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f18:	f84c 3b04 	str.w	r3, [ip], #4
 8005f1c:	d2da      	bcs.n	8005ed4 <quorem+0x44>
 8005f1e:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f22:	b92b      	cbnz	r3, 8005f30 <quorem+0xa0>
 8005f24:	9b01      	ldr	r3, [sp, #4]
 8005f26:	3b04      	subs	r3, #4
 8005f28:	429d      	cmp	r5, r3
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	d32f      	bcc.n	8005f8e <quorem+0xfe>
 8005f2e:	613c      	str	r4, [r7, #16]
 8005f30:	4638      	mov	r0, r7
 8005f32:	f001 f8cd 	bl	80070d0 <__mcmp>
 8005f36:	2800      	cmp	r0, #0
 8005f38:	db25      	blt.n	8005f86 <quorem+0xf6>
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	f04f 0c00 	mov.w	ip, #0
 8005f40:	3601      	adds	r6, #1
 8005f42:	f858 1b04 	ldr.w	r1, [r8], #4
 8005f46:	f8d0 e000 	ldr.w	lr, [r0]
 8005f4a:	b28b      	uxth	r3, r1
 8005f4c:	ebac 0303 	sub.w	r3, ip, r3
 8005f50:	fa1f f28e 	uxth.w	r2, lr
 8005f54:	4413      	add	r3, r2
 8005f56:	0c0a      	lsrs	r2, r1, #16
 8005f58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005f5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f66:	45c1      	cmp	r9, r8
 8005f68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f6c:	f840 3b04 	str.w	r3, [r0], #4
 8005f70:	d2e7      	bcs.n	8005f42 <quorem+0xb2>
 8005f72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f7a:	b922      	cbnz	r2, 8005f86 <quorem+0xf6>
 8005f7c:	3b04      	subs	r3, #4
 8005f7e:	429d      	cmp	r5, r3
 8005f80:	461a      	mov	r2, r3
 8005f82:	d30a      	bcc.n	8005f9a <quorem+0x10a>
 8005f84:	613c      	str	r4, [r7, #16]
 8005f86:	4630      	mov	r0, r6
 8005f88:	b003      	add	sp, #12
 8005f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	3b04      	subs	r3, #4
 8005f92:	2a00      	cmp	r2, #0
 8005f94:	d1cb      	bne.n	8005f2e <quorem+0x9e>
 8005f96:	3c01      	subs	r4, #1
 8005f98:	e7c6      	b.n	8005f28 <quorem+0x98>
 8005f9a:	6812      	ldr	r2, [r2, #0]
 8005f9c:	3b04      	subs	r3, #4
 8005f9e:	2a00      	cmp	r2, #0
 8005fa0:	d1f0      	bne.n	8005f84 <quorem+0xf4>
 8005fa2:	3c01      	subs	r4, #1
 8005fa4:	e7eb      	b.n	8005f7e <quorem+0xee>
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	e7ee      	b.n	8005f88 <quorem+0xf8>
 8005faa:	0000      	movs	r0, r0
 8005fac:	0000      	movs	r0, r0
	...

08005fb0 <_dtoa_r>:
 8005fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb4:	4616      	mov	r6, r2
 8005fb6:	461f      	mov	r7, r3
 8005fb8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005fba:	b099      	sub	sp, #100	; 0x64
 8005fbc:	4605      	mov	r5, r0
 8005fbe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005fc2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005fc6:	b974      	cbnz	r4, 8005fe6 <_dtoa_r+0x36>
 8005fc8:	2010      	movs	r0, #16
 8005fca:	f000 fde3 	bl	8006b94 <malloc>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	6268      	str	r0, [r5, #36]	; 0x24
 8005fd2:	b920      	cbnz	r0, 8005fde <_dtoa_r+0x2e>
 8005fd4:	21ea      	movs	r1, #234	; 0xea
 8005fd6:	4bae      	ldr	r3, [pc, #696]	; (8006290 <_dtoa_r+0x2e0>)
 8005fd8:	48ae      	ldr	r0, [pc, #696]	; (8006294 <_dtoa_r+0x2e4>)
 8005fda:	f001 fba1 	bl	8007720 <__assert_func>
 8005fde:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fe2:	6004      	str	r4, [r0, #0]
 8005fe4:	60c4      	str	r4, [r0, #12]
 8005fe6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005fe8:	6819      	ldr	r1, [r3, #0]
 8005fea:	b151      	cbz	r1, 8006002 <_dtoa_r+0x52>
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	2301      	movs	r3, #1
 8005ff0:	4093      	lsls	r3, r2
 8005ff2:	604a      	str	r2, [r1, #4]
 8005ff4:	608b      	str	r3, [r1, #8]
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	f000 fe30 	bl	8006c5c <_Bfree>
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	1e3b      	subs	r3, r7, #0
 8006004:	bfaf      	iteee	ge
 8006006:	2300      	movge	r3, #0
 8006008:	2201      	movlt	r2, #1
 800600a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800600e:	9305      	strlt	r3, [sp, #20]
 8006010:	bfa8      	it	ge
 8006012:	f8c8 3000 	strge.w	r3, [r8]
 8006016:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800601a:	4b9f      	ldr	r3, [pc, #636]	; (8006298 <_dtoa_r+0x2e8>)
 800601c:	bfb8      	it	lt
 800601e:	f8c8 2000 	strlt.w	r2, [r8]
 8006022:	ea33 0309 	bics.w	r3, r3, r9
 8006026:	d119      	bne.n	800605c <_dtoa_r+0xac>
 8006028:	f242 730f 	movw	r3, #9999	; 0x270f
 800602c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006034:	4333      	orrs	r3, r6
 8006036:	f000 8580 	beq.w	8006b3a <_dtoa_r+0xb8a>
 800603a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800603c:	b953      	cbnz	r3, 8006054 <_dtoa_r+0xa4>
 800603e:	4b97      	ldr	r3, [pc, #604]	; (800629c <_dtoa_r+0x2ec>)
 8006040:	e022      	b.n	8006088 <_dtoa_r+0xd8>
 8006042:	4b97      	ldr	r3, [pc, #604]	; (80062a0 <_dtoa_r+0x2f0>)
 8006044:	9308      	str	r3, [sp, #32]
 8006046:	3308      	adds	r3, #8
 8006048:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800604a:	6013      	str	r3, [r2, #0]
 800604c:	9808      	ldr	r0, [sp, #32]
 800604e:	b019      	add	sp, #100	; 0x64
 8006050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006054:	4b91      	ldr	r3, [pc, #580]	; (800629c <_dtoa_r+0x2ec>)
 8006056:	9308      	str	r3, [sp, #32]
 8006058:	3303      	adds	r3, #3
 800605a:	e7f5      	b.n	8006048 <_dtoa_r+0x98>
 800605c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006060:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006064:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006068:	2200      	movs	r2, #0
 800606a:	2300      	movs	r3, #0
 800606c:	f7fa fc9c 	bl	80009a8 <__aeabi_dcmpeq>
 8006070:	4680      	mov	r8, r0
 8006072:	b158      	cbz	r0, 800608c <_dtoa_r+0xdc>
 8006074:	2301      	movs	r3, #1
 8006076:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 8559 	beq.w	8006b34 <_dtoa_r+0xb84>
 8006082:	4888      	ldr	r0, [pc, #544]	; (80062a4 <_dtoa_r+0x2f4>)
 8006084:	6018      	str	r0, [r3, #0]
 8006086:	1e43      	subs	r3, r0, #1
 8006088:	9308      	str	r3, [sp, #32]
 800608a:	e7df      	b.n	800604c <_dtoa_r+0x9c>
 800608c:	ab16      	add	r3, sp, #88	; 0x58
 800608e:	9301      	str	r3, [sp, #4]
 8006090:	ab17      	add	r3, sp, #92	; 0x5c
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	4628      	mov	r0, r5
 8006096:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800609a:	f001 f8c5 	bl	8007228 <__d2b>
 800609e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80060a2:	4682      	mov	sl, r0
 80060a4:	2c00      	cmp	r4, #0
 80060a6:	d07e      	beq.n	80061a6 <_dtoa_r+0x1f6>
 80060a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060ae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80060b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060b6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80060ba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80060be:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80060c2:	2200      	movs	r2, #0
 80060c4:	4b78      	ldr	r3, [pc, #480]	; (80062a8 <_dtoa_r+0x2f8>)
 80060c6:	f7fa f84f 	bl	8000168 <__aeabi_dsub>
 80060ca:	a36b      	add	r3, pc, #428	; (adr r3, 8006278 <_dtoa_r+0x2c8>)
 80060cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d0:	f7fa fa02 	bl	80004d8 <__aeabi_dmul>
 80060d4:	a36a      	add	r3, pc, #424	; (adr r3, 8006280 <_dtoa_r+0x2d0>)
 80060d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060da:	f7fa f847 	bl	800016c <__adddf3>
 80060de:	4606      	mov	r6, r0
 80060e0:	4620      	mov	r0, r4
 80060e2:	460f      	mov	r7, r1
 80060e4:	f7fa f98e 	bl	8000404 <__aeabi_i2d>
 80060e8:	a367      	add	r3, pc, #412	; (adr r3, 8006288 <_dtoa_r+0x2d8>)
 80060ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ee:	f7fa f9f3 	bl	80004d8 <__aeabi_dmul>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	4630      	mov	r0, r6
 80060f8:	4639      	mov	r1, r7
 80060fa:	f7fa f837 	bl	800016c <__adddf3>
 80060fe:	4606      	mov	r6, r0
 8006100:	460f      	mov	r7, r1
 8006102:	f7fa fc99 	bl	8000a38 <__aeabi_d2iz>
 8006106:	2200      	movs	r2, #0
 8006108:	4681      	mov	r9, r0
 800610a:	2300      	movs	r3, #0
 800610c:	4630      	mov	r0, r6
 800610e:	4639      	mov	r1, r7
 8006110:	f7fa fc54 	bl	80009bc <__aeabi_dcmplt>
 8006114:	b148      	cbz	r0, 800612a <_dtoa_r+0x17a>
 8006116:	4648      	mov	r0, r9
 8006118:	f7fa f974 	bl	8000404 <__aeabi_i2d>
 800611c:	4632      	mov	r2, r6
 800611e:	463b      	mov	r3, r7
 8006120:	f7fa fc42 	bl	80009a8 <__aeabi_dcmpeq>
 8006124:	b908      	cbnz	r0, 800612a <_dtoa_r+0x17a>
 8006126:	f109 39ff 	add.w	r9, r9, #4294967295
 800612a:	f1b9 0f16 	cmp.w	r9, #22
 800612e:	d857      	bhi.n	80061e0 <_dtoa_r+0x230>
 8006130:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006134:	4b5d      	ldr	r3, [pc, #372]	; (80062ac <_dtoa_r+0x2fc>)
 8006136:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613e:	f7fa fc3d 	bl	80009bc <__aeabi_dcmplt>
 8006142:	2800      	cmp	r0, #0
 8006144:	d04e      	beq.n	80061e4 <_dtoa_r+0x234>
 8006146:	2300      	movs	r3, #0
 8006148:	f109 39ff 	add.w	r9, r9, #4294967295
 800614c:	930f      	str	r3, [sp, #60]	; 0x3c
 800614e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006150:	1b1c      	subs	r4, r3, r4
 8006152:	1e63      	subs	r3, r4, #1
 8006154:	9309      	str	r3, [sp, #36]	; 0x24
 8006156:	bf49      	itett	mi
 8006158:	f1c4 0301 	rsbmi	r3, r4, #1
 800615c:	2300      	movpl	r3, #0
 800615e:	9306      	strmi	r3, [sp, #24]
 8006160:	2300      	movmi	r3, #0
 8006162:	bf54      	ite	pl
 8006164:	9306      	strpl	r3, [sp, #24]
 8006166:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006168:	f1b9 0f00 	cmp.w	r9, #0
 800616c:	db3c      	blt.n	80061e8 <_dtoa_r+0x238>
 800616e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006170:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006174:	444b      	add	r3, r9
 8006176:	9309      	str	r3, [sp, #36]	; 0x24
 8006178:	2300      	movs	r3, #0
 800617a:	930a      	str	r3, [sp, #40]	; 0x28
 800617c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800617e:	2b09      	cmp	r3, #9
 8006180:	d86c      	bhi.n	800625c <_dtoa_r+0x2ac>
 8006182:	2b05      	cmp	r3, #5
 8006184:	bfc4      	itt	gt
 8006186:	3b04      	subgt	r3, #4
 8006188:	9322      	strgt	r3, [sp, #136]	; 0x88
 800618a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800618c:	bfc8      	it	gt
 800618e:	2400      	movgt	r4, #0
 8006190:	f1a3 0302 	sub.w	r3, r3, #2
 8006194:	bfd8      	it	le
 8006196:	2401      	movle	r4, #1
 8006198:	2b03      	cmp	r3, #3
 800619a:	f200 808b 	bhi.w	80062b4 <_dtoa_r+0x304>
 800619e:	e8df f003 	tbb	[pc, r3]
 80061a2:	4f2d      	.short	0x4f2d
 80061a4:	5b4d      	.short	0x5b4d
 80061a6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80061aa:	441c      	add	r4, r3
 80061ac:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	bfc3      	ittte	gt
 80061b4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061b8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80061bc:	fa09 f303 	lslgt.w	r3, r9, r3
 80061c0:	f1c3 0320 	rsble	r3, r3, #32
 80061c4:	bfc6      	itte	gt
 80061c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80061ca:	4318      	orrgt	r0, r3
 80061cc:	fa06 f003 	lslle.w	r0, r6, r3
 80061d0:	f7fa f908 	bl	80003e4 <__aeabi_ui2d>
 80061d4:	2301      	movs	r3, #1
 80061d6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80061da:	3c01      	subs	r4, #1
 80061dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80061de:	e770      	b.n	80060c2 <_dtoa_r+0x112>
 80061e0:	2301      	movs	r3, #1
 80061e2:	e7b3      	b.n	800614c <_dtoa_r+0x19c>
 80061e4:	900f      	str	r0, [sp, #60]	; 0x3c
 80061e6:	e7b2      	b.n	800614e <_dtoa_r+0x19e>
 80061e8:	9b06      	ldr	r3, [sp, #24]
 80061ea:	eba3 0309 	sub.w	r3, r3, r9
 80061ee:	9306      	str	r3, [sp, #24]
 80061f0:	f1c9 0300 	rsb	r3, r9, #0
 80061f4:	930a      	str	r3, [sp, #40]	; 0x28
 80061f6:	2300      	movs	r3, #0
 80061f8:	930e      	str	r3, [sp, #56]	; 0x38
 80061fa:	e7bf      	b.n	800617c <_dtoa_r+0x1cc>
 80061fc:	2300      	movs	r3, #0
 80061fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006200:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006202:	2b00      	cmp	r3, #0
 8006204:	dc59      	bgt.n	80062ba <_dtoa_r+0x30a>
 8006206:	f04f 0b01 	mov.w	fp, #1
 800620a:	465b      	mov	r3, fp
 800620c:	f8cd b008 	str.w	fp, [sp, #8]
 8006210:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006214:	2200      	movs	r2, #0
 8006216:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006218:	6042      	str	r2, [r0, #4]
 800621a:	2204      	movs	r2, #4
 800621c:	f102 0614 	add.w	r6, r2, #20
 8006220:	429e      	cmp	r6, r3
 8006222:	6841      	ldr	r1, [r0, #4]
 8006224:	d94f      	bls.n	80062c6 <_dtoa_r+0x316>
 8006226:	4628      	mov	r0, r5
 8006228:	f000 fcd8 	bl	8006bdc <_Balloc>
 800622c:	9008      	str	r0, [sp, #32]
 800622e:	2800      	cmp	r0, #0
 8006230:	d14d      	bne.n	80062ce <_dtoa_r+0x31e>
 8006232:	4602      	mov	r2, r0
 8006234:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006238:	4b1d      	ldr	r3, [pc, #116]	; (80062b0 <_dtoa_r+0x300>)
 800623a:	e6cd      	b.n	8005fd8 <_dtoa_r+0x28>
 800623c:	2301      	movs	r3, #1
 800623e:	e7de      	b.n	80061fe <_dtoa_r+0x24e>
 8006240:	2300      	movs	r3, #0
 8006242:	930b      	str	r3, [sp, #44]	; 0x2c
 8006244:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006246:	eb09 0b03 	add.w	fp, r9, r3
 800624a:	f10b 0301 	add.w	r3, fp, #1
 800624e:	2b01      	cmp	r3, #1
 8006250:	9302      	str	r3, [sp, #8]
 8006252:	bfb8      	it	lt
 8006254:	2301      	movlt	r3, #1
 8006256:	e7dd      	b.n	8006214 <_dtoa_r+0x264>
 8006258:	2301      	movs	r3, #1
 800625a:	e7f2      	b.n	8006242 <_dtoa_r+0x292>
 800625c:	2401      	movs	r4, #1
 800625e:	2300      	movs	r3, #0
 8006260:	940b      	str	r4, [sp, #44]	; 0x2c
 8006262:	9322      	str	r3, [sp, #136]	; 0x88
 8006264:	f04f 3bff 	mov.w	fp, #4294967295
 8006268:	2200      	movs	r2, #0
 800626a:	2312      	movs	r3, #18
 800626c:	f8cd b008 	str.w	fp, [sp, #8]
 8006270:	9223      	str	r2, [sp, #140]	; 0x8c
 8006272:	e7cf      	b.n	8006214 <_dtoa_r+0x264>
 8006274:	f3af 8000 	nop.w
 8006278:	636f4361 	.word	0x636f4361
 800627c:	3fd287a7 	.word	0x3fd287a7
 8006280:	8b60c8b3 	.word	0x8b60c8b3
 8006284:	3fc68a28 	.word	0x3fc68a28
 8006288:	509f79fb 	.word	0x509f79fb
 800628c:	3fd34413 	.word	0x3fd34413
 8006290:	080083e1 	.word	0x080083e1
 8006294:	080083f8 	.word	0x080083f8
 8006298:	7ff00000 	.word	0x7ff00000
 800629c:	080083dd 	.word	0x080083dd
 80062a0:	080083d4 	.word	0x080083d4
 80062a4:	080083b1 	.word	0x080083b1
 80062a8:	3ff80000 	.word	0x3ff80000
 80062ac:	080084f0 	.word	0x080084f0
 80062b0:	08008457 	.word	0x08008457
 80062b4:	2301      	movs	r3, #1
 80062b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80062b8:	e7d4      	b.n	8006264 <_dtoa_r+0x2b4>
 80062ba:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80062be:	465b      	mov	r3, fp
 80062c0:	f8cd b008 	str.w	fp, [sp, #8]
 80062c4:	e7a6      	b.n	8006214 <_dtoa_r+0x264>
 80062c6:	3101      	adds	r1, #1
 80062c8:	6041      	str	r1, [r0, #4]
 80062ca:	0052      	lsls	r2, r2, #1
 80062cc:	e7a6      	b.n	800621c <_dtoa_r+0x26c>
 80062ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80062d0:	9a08      	ldr	r2, [sp, #32]
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	9b02      	ldr	r3, [sp, #8]
 80062d6:	2b0e      	cmp	r3, #14
 80062d8:	f200 80a8 	bhi.w	800642c <_dtoa_r+0x47c>
 80062dc:	2c00      	cmp	r4, #0
 80062de:	f000 80a5 	beq.w	800642c <_dtoa_r+0x47c>
 80062e2:	f1b9 0f00 	cmp.w	r9, #0
 80062e6:	dd34      	ble.n	8006352 <_dtoa_r+0x3a2>
 80062e8:	4a9a      	ldr	r2, [pc, #616]	; (8006554 <_dtoa_r+0x5a4>)
 80062ea:	f009 030f 	and.w	r3, r9, #15
 80062ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80062f2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80062f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80062fe:	ea4f 1429 	mov.w	r4, r9, asr #4
 8006302:	d016      	beq.n	8006332 <_dtoa_r+0x382>
 8006304:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006308:	4b93      	ldr	r3, [pc, #588]	; (8006558 <_dtoa_r+0x5a8>)
 800630a:	2703      	movs	r7, #3
 800630c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006310:	f7fa fa0c 	bl	800072c <__aeabi_ddiv>
 8006314:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006318:	f004 040f 	and.w	r4, r4, #15
 800631c:	4e8e      	ldr	r6, [pc, #568]	; (8006558 <_dtoa_r+0x5a8>)
 800631e:	b954      	cbnz	r4, 8006336 <_dtoa_r+0x386>
 8006320:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006324:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006328:	f7fa fa00 	bl	800072c <__aeabi_ddiv>
 800632c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006330:	e029      	b.n	8006386 <_dtoa_r+0x3d6>
 8006332:	2702      	movs	r7, #2
 8006334:	e7f2      	b.n	800631c <_dtoa_r+0x36c>
 8006336:	07e1      	lsls	r1, r4, #31
 8006338:	d508      	bpl.n	800634c <_dtoa_r+0x39c>
 800633a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800633e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006342:	f7fa f8c9 	bl	80004d8 <__aeabi_dmul>
 8006346:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800634a:	3701      	adds	r7, #1
 800634c:	1064      	asrs	r4, r4, #1
 800634e:	3608      	adds	r6, #8
 8006350:	e7e5      	b.n	800631e <_dtoa_r+0x36e>
 8006352:	f000 80a5 	beq.w	80064a0 <_dtoa_r+0x4f0>
 8006356:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800635a:	f1c9 0400 	rsb	r4, r9, #0
 800635e:	4b7d      	ldr	r3, [pc, #500]	; (8006554 <_dtoa_r+0x5a4>)
 8006360:	f004 020f 	and.w	r2, r4, #15
 8006364:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636c:	f7fa f8b4 	bl	80004d8 <__aeabi_dmul>
 8006370:	2702      	movs	r7, #2
 8006372:	2300      	movs	r3, #0
 8006374:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006378:	4e77      	ldr	r6, [pc, #476]	; (8006558 <_dtoa_r+0x5a8>)
 800637a:	1124      	asrs	r4, r4, #4
 800637c:	2c00      	cmp	r4, #0
 800637e:	f040 8084 	bne.w	800648a <_dtoa_r+0x4da>
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1d2      	bne.n	800632c <_dtoa_r+0x37c>
 8006386:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 808b 	beq.w	80064a4 <_dtoa_r+0x4f4>
 800638e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006392:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006396:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800639a:	2200      	movs	r2, #0
 800639c:	4b6f      	ldr	r3, [pc, #444]	; (800655c <_dtoa_r+0x5ac>)
 800639e:	f7fa fb0d 	bl	80009bc <__aeabi_dcmplt>
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d07e      	beq.n	80064a4 <_dtoa_r+0x4f4>
 80063a6:	9b02      	ldr	r3, [sp, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d07b      	beq.n	80064a4 <_dtoa_r+0x4f4>
 80063ac:	f1bb 0f00 	cmp.w	fp, #0
 80063b0:	dd38      	ble.n	8006424 <_dtoa_r+0x474>
 80063b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063b6:	2200      	movs	r2, #0
 80063b8:	4b69      	ldr	r3, [pc, #420]	; (8006560 <_dtoa_r+0x5b0>)
 80063ba:	f7fa f88d 	bl	80004d8 <__aeabi_dmul>
 80063be:	465c      	mov	r4, fp
 80063c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063c4:	f109 38ff 	add.w	r8, r9, #4294967295
 80063c8:	3701      	adds	r7, #1
 80063ca:	4638      	mov	r0, r7
 80063cc:	f7fa f81a 	bl	8000404 <__aeabi_i2d>
 80063d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063d4:	f7fa f880 	bl	80004d8 <__aeabi_dmul>
 80063d8:	2200      	movs	r2, #0
 80063da:	4b62      	ldr	r3, [pc, #392]	; (8006564 <_dtoa_r+0x5b4>)
 80063dc:	f7f9 fec6 	bl	800016c <__adddf3>
 80063e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80063e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80063e8:	9611      	str	r6, [sp, #68]	; 0x44
 80063ea:	2c00      	cmp	r4, #0
 80063ec:	d15d      	bne.n	80064aa <_dtoa_r+0x4fa>
 80063ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063f2:	2200      	movs	r2, #0
 80063f4:	4b5c      	ldr	r3, [pc, #368]	; (8006568 <_dtoa_r+0x5b8>)
 80063f6:	f7f9 feb7 	bl	8000168 <__aeabi_dsub>
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006402:	4633      	mov	r3, r6
 8006404:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006406:	f7fa faf7 	bl	80009f8 <__aeabi_dcmpgt>
 800640a:	2800      	cmp	r0, #0
 800640c:	f040 829e 	bne.w	800694c <_dtoa_r+0x99c>
 8006410:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006414:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006416:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800641a:	f7fa facf 	bl	80009bc <__aeabi_dcmplt>
 800641e:	2800      	cmp	r0, #0
 8006420:	f040 8292 	bne.w	8006948 <_dtoa_r+0x998>
 8006424:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006428:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800642c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800642e:	2b00      	cmp	r3, #0
 8006430:	f2c0 8153 	blt.w	80066da <_dtoa_r+0x72a>
 8006434:	f1b9 0f0e 	cmp.w	r9, #14
 8006438:	f300 814f 	bgt.w	80066da <_dtoa_r+0x72a>
 800643c:	4b45      	ldr	r3, [pc, #276]	; (8006554 <_dtoa_r+0x5a4>)
 800643e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006442:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006446:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800644a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800644c:	2b00      	cmp	r3, #0
 800644e:	f280 80db 	bge.w	8006608 <_dtoa_r+0x658>
 8006452:	9b02      	ldr	r3, [sp, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	f300 80d7 	bgt.w	8006608 <_dtoa_r+0x658>
 800645a:	f040 8274 	bne.w	8006946 <_dtoa_r+0x996>
 800645e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006462:	2200      	movs	r2, #0
 8006464:	4b40      	ldr	r3, [pc, #256]	; (8006568 <_dtoa_r+0x5b8>)
 8006466:	f7fa f837 	bl	80004d8 <__aeabi_dmul>
 800646a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800646e:	f7fa fab9 	bl	80009e4 <__aeabi_dcmpge>
 8006472:	9c02      	ldr	r4, [sp, #8]
 8006474:	4626      	mov	r6, r4
 8006476:	2800      	cmp	r0, #0
 8006478:	f040 824a 	bne.w	8006910 <_dtoa_r+0x960>
 800647c:	2331      	movs	r3, #49	; 0x31
 800647e:	9f08      	ldr	r7, [sp, #32]
 8006480:	f109 0901 	add.w	r9, r9, #1
 8006484:	f807 3b01 	strb.w	r3, [r7], #1
 8006488:	e246      	b.n	8006918 <_dtoa_r+0x968>
 800648a:	07e2      	lsls	r2, r4, #31
 800648c:	d505      	bpl.n	800649a <_dtoa_r+0x4ea>
 800648e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006492:	f7fa f821 	bl	80004d8 <__aeabi_dmul>
 8006496:	2301      	movs	r3, #1
 8006498:	3701      	adds	r7, #1
 800649a:	1064      	asrs	r4, r4, #1
 800649c:	3608      	adds	r6, #8
 800649e:	e76d      	b.n	800637c <_dtoa_r+0x3cc>
 80064a0:	2702      	movs	r7, #2
 80064a2:	e770      	b.n	8006386 <_dtoa_r+0x3d6>
 80064a4:	46c8      	mov	r8, r9
 80064a6:	9c02      	ldr	r4, [sp, #8]
 80064a8:	e78f      	b.n	80063ca <_dtoa_r+0x41a>
 80064aa:	9908      	ldr	r1, [sp, #32]
 80064ac:	4b29      	ldr	r3, [pc, #164]	; (8006554 <_dtoa_r+0x5a4>)
 80064ae:	4421      	add	r1, r4
 80064b0:	9112      	str	r1, [sp, #72]	; 0x48
 80064b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80064b8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80064bc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064c0:	2900      	cmp	r1, #0
 80064c2:	d055      	beq.n	8006570 <_dtoa_r+0x5c0>
 80064c4:	2000      	movs	r0, #0
 80064c6:	4929      	ldr	r1, [pc, #164]	; (800656c <_dtoa_r+0x5bc>)
 80064c8:	f7fa f930 	bl	800072c <__aeabi_ddiv>
 80064cc:	463b      	mov	r3, r7
 80064ce:	4632      	mov	r2, r6
 80064d0:	f7f9 fe4a 	bl	8000168 <__aeabi_dsub>
 80064d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064d8:	9f08      	ldr	r7, [sp, #32]
 80064da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064de:	f7fa faab 	bl	8000a38 <__aeabi_d2iz>
 80064e2:	4604      	mov	r4, r0
 80064e4:	f7f9 ff8e 	bl	8000404 <__aeabi_i2d>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064f0:	f7f9 fe3a 	bl	8000168 <__aeabi_dsub>
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	3430      	adds	r4, #48	; 0x30
 80064fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80064fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006502:	f807 4b01 	strb.w	r4, [r7], #1
 8006506:	f7fa fa59 	bl	80009bc <__aeabi_dcmplt>
 800650a:	2800      	cmp	r0, #0
 800650c:	d174      	bne.n	80065f8 <_dtoa_r+0x648>
 800650e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006512:	2000      	movs	r0, #0
 8006514:	4911      	ldr	r1, [pc, #68]	; (800655c <_dtoa_r+0x5ac>)
 8006516:	f7f9 fe27 	bl	8000168 <__aeabi_dsub>
 800651a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800651e:	f7fa fa4d 	bl	80009bc <__aeabi_dcmplt>
 8006522:	2800      	cmp	r0, #0
 8006524:	f040 80b6 	bne.w	8006694 <_dtoa_r+0x6e4>
 8006528:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800652a:	429f      	cmp	r7, r3
 800652c:	f43f af7a 	beq.w	8006424 <_dtoa_r+0x474>
 8006530:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006534:	2200      	movs	r2, #0
 8006536:	4b0a      	ldr	r3, [pc, #40]	; (8006560 <_dtoa_r+0x5b0>)
 8006538:	f7f9 ffce 	bl	80004d8 <__aeabi_dmul>
 800653c:	2200      	movs	r2, #0
 800653e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006542:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006546:	4b06      	ldr	r3, [pc, #24]	; (8006560 <_dtoa_r+0x5b0>)
 8006548:	f7f9 ffc6 	bl	80004d8 <__aeabi_dmul>
 800654c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006550:	e7c3      	b.n	80064da <_dtoa_r+0x52a>
 8006552:	bf00      	nop
 8006554:	080084f0 	.word	0x080084f0
 8006558:	080084c8 	.word	0x080084c8
 800655c:	3ff00000 	.word	0x3ff00000
 8006560:	40240000 	.word	0x40240000
 8006564:	401c0000 	.word	0x401c0000
 8006568:	40140000 	.word	0x40140000
 800656c:	3fe00000 	.word	0x3fe00000
 8006570:	4630      	mov	r0, r6
 8006572:	4639      	mov	r1, r7
 8006574:	f7f9 ffb0 	bl	80004d8 <__aeabi_dmul>
 8006578:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800657a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800657e:	9c08      	ldr	r4, [sp, #32]
 8006580:	9314      	str	r3, [sp, #80]	; 0x50
 8006582:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006586:	f7fa fa57 	bl	8000a38 <__aeabi_d2iz>
 800658a:	9015      	str	r0, [sp, #84]	; 0x54
 800658c:	f7f9 ff3a 	bl	8000404 <__aeabi_i2d>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006598:	f7f9 fde6 	bl	8000168 <__aeabi_dsub>
 800659c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800659e:	4606      	mov	r6, r0
 80065a0:	3330      	adds	r3, #48	; 0x30
 80065a2:	f804 3b01 	strb.w	r3, [r4], #1
 80065a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065a8:	460f      	mov	r7, r1
 80065aa:	429c      	cmp	r4, r3
 80065ac:	f04f 0200 	mov.w	r2, #0
 80065b0:	d124      	bne.n	80065fc <_dtoa_r+0x64c>
 80065b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065b6:	4bb3      	ldr	r3, [pc, #716]	; (8006884 <_dtoa_r+0x8d4>)
 80065b8:	f7f9 fdd8 	bl	800016c <__adddf3>
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	4630      	mov	r0, r6
 80065c2:	4639      	mov	r1, r7
 80065c4:	f7fa fa18 	bl	80009f8 <__aeabi_dcmpgt>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d162      	bne.n	8006692 <_dtoa_r+0x6e2>
 80065cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80065d0:	2000      	movs	r0, #0
 80065d2:	49ac      	ldr	r1, [pc, #688]	; (8006884 <_dtoa_r+0x8d4>)
 80065d4:	f7f9 fdc8 	bl	8000168 <__aeabi_dsub>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	4630      	mov	r0, r6
 80065de:	4639      	mov	r1, r7
 80065e0:	f7fa f9ec 	bl	80009bc <__aeabi_dcmplt>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	f43f af1d 	beq.w	8006424 <_dtoa_r+0x474>
 80065ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80065ec:	1e7b      	subs	r3, r7, #1
 80065ee:	9314      	str	r3, [sp, #80]	; 0x50
 80065f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80065f4:	2b30      	cmp	r3, #48	; 0x30
 80065f6:	d0f8      	beq.n	80065ea <_dtoa_r+0x63a>
 80065f8:	46c1      	mov	r9, r8
 80065fa:	e03a      	b.n	8006672 <_dtoa_r+0x6c2>
 80065fc:	4ba2      	ldr	r3, [pc, #648]	; (8006888 <_dtoa_r+0x8d8>)
 80065fe:	f7f9 ff6b 	bl	80004d8 <__aeabi_dmul>
 8006602:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006606:	e7bc      	b.n	8006582 <_dtoa_r+0x5d2>
 8006608:	9f08      	ldr	r7, [sp, #32]
 800660a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800660e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006612:	f7fa f88b 	bl	800072c <__aeabi_ddiv>
 8006616:	f7fa fa0f 	bl	8000a38 <__aeabi_d2iz>
 800661a:	4604      	mov	r4, r0
 800661c:	f7f9 fef2 	bl	8000404 <__aeabi_i2d>
 8006620:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006624:	f7f9 ff58 	bl	80004d8 <__aeabi_dmul>
 8006628:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800662c:	460b      	mov	r3, r1
 800662e:	4602      	mov	r2, r0
 8006630:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006634:	f7f9 fd98 	bl	8000168 <__aeabi_dsub>
 8006638:	f807 6b01 	strb.w	r6, [r7], #1
 800663c:	9e08      	ldr	r6, [sp, #32]
 800663e:	9b02      	ldr	r3, [sp, #8]
 8006640:	1bbe      	subs	r6, r7, r6
 8006642:	42b3      	cmp	r3, r6
 8006644:	d13a      	bne.n	80066bc <_dtoa_r+0x70c>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	f7f9 fd8f 	bl	800016c <__adddf3>
 800664e:	4602      	mov	r2, r0
 8006650:	460b      	mov	r3, r1
 8006652:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006656:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800665a:	f7fa f9cd 	bl	80009f8 <__aeabi_dcmpgt>
 800665e:	bb58      	cbnz	r0, 80066b8 <_dtoa_r+0x708>
 8006660:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006668:	f7fa f99e 	bl	80009a8 <__aeabi_dcmpeq>
 800666c:	b108      	cbz	r0, 8006672 <_dtoa_r+0x6c2>
 800666e:	07e1      	lsls	r1, r4, #31
 8006670:	d422      	bmi.n	80066b8 <_dtoa_r+0x708>
 8006672:	4628      	mov	r0, r5
 8006674:	4651      	mov	r1, sl
 8006676:	f000 faf1 	bl	8006c5c <_Bfree>
 800667a:	2300      	movs	r3, #0
 800667c:	703b      	strb	r3, [r7, #0]
 800667e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006680:	f109 0001 	add.w	r0, r9, #1
 8006684:	6018      	str	r0, [r3, #0]
 8006686:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006688:	2b00      	cmp	r3, #0
 800668a:	f43f acdf 	beq.w	800604c <_dtoa_r+0x9c>
 800668e:	601f      	str	r7, [r3, #0]
 8006690:	e4dc      	b.n	800604c <_dtoa_r+0x9c>
 8006692:	4627      	mov	r7, r4
 8006694:	463b      	mov	r3, r7
 8006696:	461f      	mov	r7, r3
 8006698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800669c:	2a39      	cmp	r2, #57	; 0x39
 800669e:	d107      	bne.n	80066b0 <_dtoa_r+0x700>
 80066a0:	9a08      	ldr	r2, [sp, #32]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d1f7      	bne.n	8006696 <_dtoa_r+0x6e6>
 80066a6:	2230      	movs	r2, #48	; 0x30
 80066a8:	9908      	ldr	r1, [sp, #32]
 80066aa:	f108 0801 	add.w	r8, r8, #1
 80066ae:	700a      	strb	r2, [r1, #0]
 80066b0:	781a      	ldrb	r2, [r3, #0]
 80066b2:	3201      	adds	r2, #1
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	e79f      	b.n	80065f8 <_dtoa_r+0x648>
 80066b8:	46c8      	mov	r8, r9
 80066ba:	e7eb      	b.n	8006694 <_dtoa_r+0x6e4>
 80066bc:	2200      	movs	r2, #0
 80066be:	4b72      	ldr	r3, [pc, #456]	; (8006888 <_dtoa_r+0x8d8>)
 80066c0:	f7f9 ff0a 	bl	80004d8 <__aeabi_dmul>
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066cc:	2200      	movs	r2, #0
 80066ce:	2300      	movs	r3, #0
 80066d0:	f7fa f96a 	bl	80009a8 <__aeabi_dcmpeq>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	d098      	beq.n	800660a <_dtoa_r+0x65a>
 80066d8:	e7cb      	b.n	8006672 <_dtoa_r+0x6c2>
 80066da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066dc:	2a00      	cmp	r2, #0
 80066de:	f000 80cd 	beq.w	800687c <_dtoa_r+0x8cc>
 80066e2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80066e4:	2a01      	cmp	r2, #1
 80066e6:	f300 80af 	bgt.w	8006848 <_dtoa_r+0x898>
 80066ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80066ec:	2a00      	cmp	r2, #0
 80066ee:	f000 80a7 	beq.w	8006840 <_dtoa_r+0x890>
 80066f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80066f8:	9f06      	ldr	r7, [sp, #24]
 80066fa:	9a06      	ldr	r2, [sp, #24]
 80066fc:	2101      	movs	r1, #1
 80066fe:	441a      	add	r2, r3
 8006700:	9206      	str	r2, [sp, #24]
 8006702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006704:	4628      	mov	r0, r5
 8006706:	441a      	add	r2, r3
 8006708:	9209      	str	r2, [sp, #36]	; 0x24
 800670a:	f000 fb61 	bl	8006dd0 <__i2b>
 800670e:	4606      	mov	r6, r0
 8006710:	2f00      	cmp	r7, #0
 8006712:	dd0c      	ble.n	800672e <_dtoa_r+0x77e>
 8006714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006716:	2b00      	cmp	r3, #0
 8006718:	dd09      	ble.n	800672e <_dtoa_r+0x77e>
 800671a:	42bb      	cmp	r3, r7
 800671c:	bfa8      	it	ge
 800671e:	463b      	movge	r3, r7
 8006720:	9a06      	ldr	r2, [sp, #24]
 8006722:	1aff      	subs	r7, r7, r3
 8006724:	1ad2      	subs	r2, r2, r3
 8006726:	9206      	str	r2, [sp, #24]
 8006728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	9309      	str	r3, [sp, #36]	; 0x24
 800672e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006730:	b1f3      	cbz	r3, 8006770 <_dtoa_r+0x7c0>
 8006732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 80a9 	beq.w	800688c <_dtoa_r+0x8dc>
 800673a:	2c00      	cmp	r4, #0
 800673c:	dd10      	ble.n	8006760 <_dtoa_r+0x7b0>
 800673e:	4631      	mov	r1, r6
 8006740:	4622      	mov	r2, r4
 8006742:	4628      	mov	r0, r5
 8006744:	f000 fbfe 	bl	8006f44 <__pow5mult>
 8006748:	4652      	mov	r2, sl
 800674a:	4601      	mov	r1, r0
 800674c:	4606      	mov	r6, r0
 800674e:	4628      	mov	r0, r5
 8006750:	f000 fb54 	bl	8006dfc <__multiply>
 8006754:	4680      	mov	r8, r0
 8006756:	4651      	mov	r1, sl
 8006758:	4628      	mov	r0, r5
 800675a:	f000 fa7f 	bl	8006c5c <_Bfree>
 800675e:	46c2      	mov	sl, r8
 8006760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006762:	1b1a      	subs	r2, r3, r4
 8006764:	d004      	beq.n	8006770 <_dtoa_r+0x7c0>
 8006766:	4651      	mov	r1, sl
 8006768:	4628      	mov	r0, r5
 800676a:	f000 fbeb 	bl	8006f44 <__pow5mult>
 800676e:	4682      	mov	sl, r0
 8006770:	2101      	movs	r1, #1
 8006772:	4628      	mov	r0, r5
 8006774:	f000 fb2c 	bl	8006dd0 <__i2b>
 8006778:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800677a:	4604      	mov	r4, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	f340 8087 	ble.w	8006890 <_dtoa_r+0x8e0>
 8006782:	461a      	mov	r2, r3
 8006784:	4601      	mov	r1, r0
 8006786:	4628      	mov	r0, r5
 8006788:	f000 fbdc 	bl	8006f44 <__pow5mult>
 800678c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800678e:	4604      	mov	r4, r0
 8006790:	2b01      	cmp	r3, #1
 8006792:	f340 8080 	ble.w	8006896 <_dtoa_r+0x8e6>
 8006796:	f04f 0800 	mov.w	r8, #0
 800679a:	6923      	ldr	r3, [r4, #16]
 800679c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80067a0:	6918      	ldr	r0, [r3, #16]
 80067a2:	f000 fac7 	bl	8006d34 <__hi0bits>
 80067a6:	f1c0 0020 	rsb	r0, r0, #32
 80067aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ac:	4418      	add	r0, r3
 80067ae:	f010 001f 	ands.w	r0, r0, #31
 80067b2:	f000 8092 	beq.w	80068da <_dtoa_r+0x92a>
 80067b6:	f1c0 0320 	rsb	r3, r0, #32
 80067ba:	2b04      	cmp	r3, #4
 80067bc:	f340 808a 	ble.w	80068d4 <_dtoa_r+0x924>
 80067c0:	f1c0 001c 	rsb	r0, r0, #28
 80067c4:	9b06      	ldr	r3, [sp, #24]
 80067c6:	4407      	add	r7, r0
 80067c8:	4403      	add	r3, r0
 80067ca:	9306      	str	r3, [sp, #24]
 80067cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ce:	4403      	add	r3, r0
 80067d0:	9309      	str	r3, [sp, #36]	; 0x24
 80067d2:	9b06      	ldr	r3, [sp, #24]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	dd05      	ble.n	80067e4 <_dtoa_r+0x834>
 80067d8:	4651      	mov	r1, sl
 80067da:	461a      	mov	r2, r3
 80067dc:	4628      	mov	r0, r5
 80067de:	f000 fc0b 	bl	8006ff8 <__lshift>
 80067e2:	4682      	mov	sl, r0
 80067e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	dd05      	ble.n	80067f6 <_dtoa_r+0x846>
 80067ea:	4621      	mov	r1, r4
 80067ec:	461a      	mov	r2, r3
 80067ee:	4628      	mov	r0, r5
 80067f0:	f000 fc02 	bl	8006ff8 <__lshift>
 80067f4:	4604      	mov	r4, r0
 80067f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d070      	beq.n	80068de <_dtoa_r+0x92e>
 80067fc:	4621      	mov	r1, r4
 80067fe:	4650      	mov	r0, sl
 8006800:	f000 fc66 	bl	80070d0 <__mcmp>
 8006804:	2800      	cmp	r0, #0
 8006806:	da6a      	bge.n	80068de <_dtoa_r+0x92e>
 8006808:	2300      	movs	r3, #0
 800680a:	4651      	mov	r1, sl
 800680c:	220a      	movs	r2, #10
 800680e:	4628      	mov	r0, r5
 8006810:	f000 fa46 	bl	8006ca0 <__multadd>
 8006814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006816:	4682      	mov	sl, r0
 8006818:	f109 39ff 	add.w	r9, r9, #4294967295
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 8193 	beq.w	8006b48 <_dtoa_r+0xb98>
 8006822:	4631      	mov	r1, r6
 8006824:	2300      	movs	r3, #0
 8006826:	220a      	movs	r2, #10
 8006828:	4628      	mov	r0, r5
 800682a:	f000 fa39 	bl	8006ca0 <__multadd>
 800682e:	f1bb 0f00 	cmp.w	fp, #0
 8006832:	4606      	mov	r6, r0
 8006834:	f300 8093 	bgt.w	800695e <_dtoa_r+0x9ae>
 8006838:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800683a:	2b02      	cmp	r3, #2
 800683c:	dc57      	bgt.n	80068ee <_dtoa_r+0x93e>
 800683e:	e08e      	b.n	800695e <_dtoa_r+0x9ae>
 8006840:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006842:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006846:	e756      	b.n	80066f6 <_dtoa_r+0x746>
 8006848:	9b02      	ldr	r3, [sp, #8]
 800684a:	1e5c      	subs	r4, r3, #1
 800684c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800684e:	42a3      	cmp	r3, r4
 8006850:	bfb7      	itett	lt
 8006852:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006854:	1b1c      	subge	r4, r3, r4
 8006856:	1ae2      	sublt	r2, r4, r3
 8006858:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800685a:	bfbe      	ittt	lt
 800685c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800685e:	189b      	addlt	r3, r3, r2
 8006860:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006862:	9b02      	ldr	r3, [sp, #8]
 8006864:	bfb8      	it	lt
 8006866:	2400      	movlt	r4, #0
 8006868:	2b00      	cmp	r3, #0
 800686a:	bfbb      	ittet	lt
 800686c:	9b06      	ldrlt	r3, [sp, #24]
 800686e:	9a02      	ldrlt	r2, [sp, #8]
 8006870:	9f06      	ldrge	r7, [sp, #24]
 8006872:	1a9f      	sublt	r7, r3, r2
 8006874:	bfac      	ite	ge
 8006876:	9b02      	ldrge	r3, [sp, #8]
 8006878:	2300      	movlt	r3, #0
 800687a:	e73e      	b.n	80066fa <_dtoa_r+0x74a>
 800687c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800687e:	9f06      	ldr	r7, [sp, #24]
 8006880:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006882:	e745      	b.n	8006710 <_dtoa_r+0x760>
 8006884:	3fe00000 	.word	0x3fe00000
 8006888:	40240000 	.word	0x40240000
 800688c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800688e:	e76a      	b.n	8006766 <_dtoa_r+0x7b6>
 8006890:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006892:	2b01      	cmp	r3, #1
 8006894:	dc19      	bgt.n	80068ca <_dtoa_r+0x91a>
 8006896:	9b04      	ldr	r3, [sp, #16]
 8006898:	b9bb      	cbnz	r3, 80068ca <_dtoa_r+0x91a>
 800689a:	9b05      	ldr	r3, [sp, #20]
 800689c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068a0:	b99b      	cbnz	r3, 80068ca <_dtoa_r+0x91a>
 80068a2:	9b05      	ldr	r3, [sp, #20]
 80068a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068a8:	0d1b      	lsrs	r3, r3, #20
 80068aa:	051b      	lsls	r3, r3, #20
 80068ac:	b183      	cbz	r3, 80068d0 <_dtoa_r+0x920>
 80068ae:	f04f 0801 	mov.w	r8, #1
 80068b2:	9b06      	ldr	r3, [sp, #24]
 80068b4:	3301      	adds	r3, #1
 80068b6:	9306      	str	r3, [sp, #24]
 80068b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ba:	3301      	adds	r3, #1
 80068bc:	9309      	str	r3, [sp, #36]	; 0x24
 80068be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f47f af6a 	bne.w	800679a <_dtoa_r+0x7ea>
 80068c6:	2001      	movs	r0, #1
 80068c8:	e76f      	b.n	80067aa <_dtoa_r+0x7fa>
 80068ca:	f04f 0800 	mov.w	r8, #0
 80068ce:	e7f6      	b.n	80068be <_dtoa_r+0x90e>
 80068d0:	4698      	mov	r8, r3
 80068d2:	e7f4      	b.n	80068be <_dtoa_r+0x90e>
 80068d4:	f43f af7d 	beq.w	80067d2 <_dtoa_r+0x822>
 80068d8:	4618      	mov	r0, r3
 80068da:	301c      	adds	r0, #28
 80068dc:	e772      	b.n	80067c4 <_dtoa_r+0x814>
 80068de:	9b02      	ldr	r3, [sp, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	dc36      	bgt.n	8006952 <_dtoa_r+0x9a2>
 80068e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	dd33      	ble.n	8006952 <_dtoa_r+0x9a2>
 80068ea:	f8dd b008 	ldr.w	fp, [sp, #8]
 80068ee:	f1bb 0f00 	cmp.w	fp, #0
 80068f2:	d10d      	bne.n	8006910 <_dtoa_r+0x960>
 80068f4:	4621      	mov	r1, r4
 80068f6:	465b      	mov	r3, fp
 80068f8:	2205      	movs	r2, #5
 80068fa:	4628      	mov	r0, r5
 80068fc:	f000 f9d0 	bl	8006ca0 <__multadd>
 8006900:	4601      	mov	r1, r0
 8006902:	4604      	mov	r4, r0
 8006904:	4650      	mov	r0, sl
 8006906:	f000 fbe3 	bl	80070d0 <__mcmp>
 800690a:	2800      	cmp	r0, #0
 800690c:	f73f adb6 	bgt.w	800647c <_dtoa_r+0x4cc>
 8006910:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006912:	9f08      	ldr	r7, [sp, #32]
 8006914:	ea6f 0903 	mvn.w	r9, r3
 8006918:	f04f 0800 	mov.w	r8, #0
 800691c:	4621      	mov	r1, r4
 800691e:	4628      	mov	r0, r5
 8006920:	f000 f99c 	bl	8006c5c <_Bfree>
 8006924:	2e00      	cmp	r6, #0
 8006926:	f43f aea4 	beq.w	8006672 <_dtoa_r+0x6c2>
 800692a:	f1b8 0f00 	cmp.w	r8, #0
 800692e:	d005      	beq.n	800693c <_dtoa_r+0x98c>
 8006930:	45b0      	cmp	r8, r6
 8006932:	d003      	beq.n	800693c <_dtoa_r+0x98c>
 8006934:	4641      	mov	r1, r8
 8006936:	4628      	mov	r0, r5
 8006938:	f000 f990 	bl	8006c5c <_Bfree>
 800693c:	4631      	mov	r1, r6
 800693e:	4628      	mov	r0, r5
 8006940:	f000 f98c 	bl	8006c5c <_Bfree>
 8006944:	e695      	b.n	8006672 <_dtoa_r+0x6c2>
 8006946:	2400      	movs	r4, #0
 8006948:	4626      	mov	r6, r4
 800694a:	e7e1      	b.n	8006910 <_dtoa_r+0x960>
 800694c:	46c1      	mov	r9, r8
 800694e:	4626      	mov	r6, r4
 8006950:	e594      	b.n	800647c <_dtoa_r+0x4cc>
 8006952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006954:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 80fc 	beq.w	8006b56 <_dtoa_r+0xba6>
 800695e:	2f00      	cmp	r7, #0
 8006960:	dd05      	ble.n	800696e <_dtoa_r+0x9be>
 8006962:	4631      	mov	r1, r6
 8006964:	463a      	mov	r2, r7
 8006966:	4628      	mov	r0, r5
 8006968:	f000 fb46 	bl	8006ff8 <__lshift>
 800696c:	4606      	mov	r6, r0
 800696e:	f1b8 0f00 	cmp.w	r8, #0
 8006972:	d05c      	beq.n	8006a2e <_dtoa_r+0xa7e>
 8006974:	4628      	mov	r0, r5
 8006976:	6871      	ldr	r1, [r6, #4]
 8006978:	f000 f930 	bl	8006bdc <_Balloc>
 800697c:	4607      	mov	r7, r0
 800697e:	b928      	cbnz	r0, 800698c <_dtoa_r+0x9dc>
 8006980:	4602      	mov	r2, r0
 8006982:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006986:	4b7e      	ldr	r3, [pc, #504]	; (8006b80 <_dtoa_r+0xbd0>)
 8006988:	f7ff bb26 	b.w	8005fd8 <_dtoa_r+0x28>
 800698c:	6932      	ldr	r2, [r6, #16]
 800698e:	f106 010c 	add.w	r1, r6, #12
 8006992:	3202      	adds	r2, #2
 8006994:	0092      	lsls	r2, r2, #2
 8006996:	300c      	adds	r0, #12
 8006998:	f000 f912 	bl	8006bc0 <memcpy>
 800699c:	2201      	movs	r2, #1
 800699e:	4639      	mov	r1, r7
 80069a0:	4628      	mov	r0, r5
 80069a2:	f000 fb29 	bl	8006ff8 <__lshift>
 80069a6:	46b0      	mov	r8, r6
 80069a8:	4606      	mov	r6, r0
 80069aa:	9b08      	ldr	r3, [sp, #32]
 80069ac:	3301      	adds	r3, #1
 80069ae:	9302      	str	r3, [sp, #8]
 80069b0:	9b08      	ldr	r3, [sp, #32]
 80069b2:	445b      	add	r3, fp
 80069b4:	930a      	str	r3, [sp, #40]	; 0x28
 80069b6:	9b04      	ldr	r3, [sp, #16]
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	9309      	str	r3, [sp, #36]	; 0x24
 80069be:	9b02      	ldr	r3, [sp, #8]
 80069c0:	4621      	mov	r1, r4
 80069c2:	4650      	mov	r0, sl
 80069c4:	f103 3bff 	add.w	fp, r3, #4294967295
 80069c8:	f7ff fa62 	bl	8005e90 <quorem>
 80069cc:	4603      	mov	r3, r0
 80069ce:	4641      	mov	r1, r8
 80069d0:	3330      	adds	r3, #48	; 0x30
 80069d2:	9004      	str	r0, [sp, #16]
 80069d4:	4650      	mov	r0, sl
 80069d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80069d8:	f000 fb7a 	bl	80070d0 <__mcmp>
 80069dc:	4632      	mov	r2, r6
 80069de:	9006      	str	r0, [sp, #24]
 80069e0:	4621      	mov	r1, r4
 80069e2:	4628      	mov	r0, r5
 80069e4:	f000 fb90 	bl	8007108 <__mdiff>
 80069e8:	68c2      	ldr	r2, [r0, #12]
 80069ea:	4607      	mov	r7, r0
 80069ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069ee:	bb02      	cbnz	r2, 8006a32 <_dtoa_r+0xa82>
 80069f0:	4601      	mov	r1, r0
 80069f2:	4650      	mov	r0, sl
 80069f4:	f000 fb6c 	bl	80070d0 <__mcmp>
 80069f8:	4602      	mov	r2, r0
 80069fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069fc:	4639      	mov	r1, r7
 80069fe:	4628      	mov	r0, r5
 8006a00:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006a04:	f000 f92a 	bl	8006c5c <_Bfree>
 8006a08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a0c:	9f02      	ldr	r7, [sp, #8]
 8006a0e:	ea43 0102 	orr.w	r1, r3, r2
 8006a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a14:	430b      	orrs	r3, r1
 8006a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a18:	d10d      	bne.n	8006a36 <_dtoa_r+0xa86>
 8006a1a:	2b39      	cmp	r3, #57	; 0x39
 8006a1c:	d027      	beq.n	8006a6e <_dtoa_r+0xabe>
 8006a1e:	9a06      	ldr	r2, [sp, #24]
 8006a20:	2a00      	cmp	r2, #0
 8006a22:	dd01      	ble.n	8006a28 <_dtoa_r+0xa78>
 8006a24:	9b04      	ldr	r3, [sp, #16]
 8006a26:	3331      	adds	r3, #49	; 0x31
 8006a28:	f88b 3000 	strb.w	r3, [fp]
 8006a2c:	e776      	b.n	800691c <_dtoa_r+0x96c>
 8006a2e:	4630      	mov	r0, r6
 8006a30:	e7b9      	b.n	80069a6 <_dtoa_r+0x9f6>
 8006a32:	2201      	movs	r2, #1
 8006a34:	e7e2      	b.n	80069fc <_dtoa_r+0xa4c>
 8006a36:	9906      	ldr	r1, [sp, #24]
 8006a38:	2900      	cmp	r1, #0
 8006a3a:	db04      	blt.n	8006a46 <_dtoa_r+0xa96>
 8006a3c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006a3e:	4301      	orrs	r1, r0
 8006a40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a42:	4301      	orrs	r1, r0
 8006a44:	d120      	bne.n	8006a88 <_dtoa_r+0xad8>
 8006a46:	2a00      	cmp	r2, #0
 8006a48:	ddee      	ble.n	8006a28 <_dtoa_r+0xa78>
 8006a4a:	4651      	mov	r1, sl
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	4628      	mov	r0, r5
 8006a50:	9302      	str	r3, [sp, #8]
 8006a52:	f000 fad1 	bl	8006ff8 <__lshift>
 8006a56:	4621      	mov	r1, r4
 8006a58:	4682      	mov	sl, r0
 8006a5a:	f000 fb39 	bl	80070d0 <__mcmp>
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	9b02      	ldr	r3, [sp, #8]
 8006a62:	dc02      	bgt.n	8006a6a <_dtoa_r+0xaba>
 8006a64:	d1e0      	bne.n	8006a28 <_dtoa_r+0xa78>
 8006a66:	07da      	lsls	r2, r3, #31
 8006a68:	d5de      	bpl.n	8006a28 <_dtoa_r+0xa78>
 8006a6a:	2b39      	cmp	r3, #57	; 0x39
 8006a6c:	d1da      	bne.n	8006a24 <_dtoa_r+0xa74>
 8006a6e:	2339      	movs	r3, #57	; 0x39
 8006a70:	f88b 3000 	strb.w	r3, [fp]
 8006a74:	463b      	mov	r3, r7
 8006a76:	461f      	mov	r7, r3
 8006a78:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	2a39      	cmp	r2, #57	; 0x39
 8006a80:	d050      	beq.n	8006b24 <_dtoa_r+0xb74>
 8006a82:	3201      	adds	r2, #1
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	e749      	b.n	800691c <_dtoa_r+0x96c>
 8006a88:	2a00      	cmp	r2, #0
 8006a8a:	dd03      	ble.n	8006a94 <_dtoa_r+0xae4>
 8006a8c:	2b39      	cmp	r3, #57	; 0x39
 8006a8e:	d0ee      	beq.n	8006a6e <_dtoa_r+0xabe>
 8006a90:	3301      	adds	r3, #1
 8006a92:	e7c9      	b.n	8006a28 <_dtoa_r+0xa78>
 8006a94:	9a02      	ldr	r2, [sp, #8]
 8006a96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a98:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006a9c:	428a      	cmp	r2, r1
 8006a9e:	d02a      	beq.n	8006af6 <_dtoa_r+0xb46>
 8006aa0:	4651      	mov	r1, sl
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	220a      	movs	r2, #10
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	f000 f8fa 	bl	8006ca0 <__multadd>
 8006aac:	45b0      	cmp	r8, r6
 8006aae:	4682      	mov	sl, r0
 8006ab0:	f04f 0300 	mov.w	r3, #0
 8006ab4:	f04f 020a 	mov.w	r2, #10
 8006ab8:	4641      	mov	r1, r8
 8006aba:	4628      	mov	r0, r5
 8006abc:	d107      	bne.n	8006ace <_dtoa_r+0xb1e>
 8006abe:	f000 f8ef 	bl	8006ca0 <__multadd>
 8006ac2:	4680      	mov	r8, r0
 8006ac4:	4606      	mov	r6, r0
 8006ac6:	9b02      	ldr	r3, [sp, #8]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	9302      	str	r3, [sp, #8]
 8006acc:	e777      	b.n	80069be <_dtoa_r+0xa0e>
 8006ace:	f000 f8e7 	bl	8006ca0 <__multadd>
 8006ad2:	4631      	mov	r1, r6
 8006ad4:	4680      	mov	r8, r0
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	220a      	movs	r2, #10
 8006ada:	4628      	mov	r0, r5
 8006adc:	f000 f8e0 	bl	8006ca0 <__multadd>
 8006ae0:	4606      	mov	r6, r0
 8006ae2:	e7f0      	b.n	8006ac6 <_dtoa_r+0xb16>
 8006ae4:	f1bb 0f00 	cmp.w	fp, #0
 8006ae8:	bfcc      	ite	gt
 8006aea:	465f      	movgt	r7, fp
 8006aec:	2701      	movle	r7, #1
 8006aee:	f04f 0800 	mov.w	r8, #0
 8006af2:	9a08      	ldr	r2, [sp, #32]
 8006af4:	4417      	add	r7, r2
 8006af6:	4651      	mov	r1, sl
 8006af8:	2201      	movs	r2, #1
 8006afa:	4628      	mov	r0, r5
 8006afc:	9302      	str	r3, [sp, #8]
 8006afe:	f000 fa7b 	bl	8006ff8 <__lshift>
 8006b02:	4621      	mov	r1, r4
 8006b04:	4682      	mov	sl, r0
 8006b06:	f000 fae3 	bl	80070d0 <__mcmp>
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	dcb2      	bgt.n	8006a74 <_dtoa_r+0xac4>
 8006b0e:	d102      	bne.n	8006b16 <_dtoa_r+0xb66>
 8006b10:	9b02      	ldr	r3, [sp, #8]
 8006b12:	07db      	lsls	r3, r3, #31
 8006b14:	d4ae      	bmi.n	8006a74 <_dtoa_r+0xac4>
 8006b16:	463b      	mov	r3, r7
 8006b18:	461f      	mov	r7, r3
 8006b1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b1e:	2a30      	cmp	r2, #48	; 0x30
 8006b20:	d0fa      	beq.n	8006b18 <_dtoa_r+0xb68>
 8006b22:	e6fb      	b.n	800691c <_dtoa_r+0x96c>
 8006b24:	9a08      	ldr	r2, [sp, #32]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d1a5      	bne.n	8006a76 <_dtoa_r+0xac6>
 8006b2a:	2331      	movs	r3, #49	; 0x31
 8006b2c:	f109 0901 	add.w	r9, r9, #1
 8006b30:	7013      	strb	r3, [r2, #0]
 8006b32:	e6f3      	b.n	800691c <_dtoa_r+0x96c>
 8006b34:	4b13      	ldr	r3, [pc, #76]	; (8006b84 <_dtoa_r+0xbd4>)
 8006b36:	f7ff baa7 	b.w	8006088 <_dtoa_r+0xd8>
 8006b3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f47f aa80 	bne.w	8006042 <_dtoa_r+0x92>
 8006b42:	4b11      	ldr	r3, [pc, #68]	; (8006b88 <_dtoa_r+0xbd8>)
 8006b44:	f7ff baa0 	b.w	8006088 <_dtoa_r+0xd8>
 8006b48:	f1bb 0f00 	cmp.w	fp, #0
 8006b4c:	dc03      	bgt.n	8006b56 <_dtoa_r+0xba6>
 8006b4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	f73f aecc 	bgt.w	80068ee <_dtoa_r+0x93e>
 8006b56:	9f08      	ldr	r7, [sp, #32]
 8006b58:	4621      	mov	r1, r4
 8006b5a:	4650      	mov	r0, sl
 8006b5c:	f7ff f998 	bl	8005e90 <quorem>
 8006b60:	9a08      	ldr	r2, [sp, #32]
 8006b62:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006b66:	f807 3b01 	strb.w	r3, [r7], #1
 8006b6a:	1aba      	subs	r2, r7, r2
 8006b6c:	4593      	cmp	fp, r2
 8006b6e:	ddb9      	ble.n	8006ae4 <_dtoa_r+0xb34>
 8006b70:	4651      	mov	r1, sl
 8006b72:	2300      	movs	r3, #0
 8006b74:	220a      	movs	r2, #10
 8006b76:	4628      	mov	r0, r5
 8006b78:	f000 f892 	bl	8006ca0 <__multadd>
 8006b7c:	4682      	mov	sl, r0
 8006b7e:	e7eb      	b.n	8006b58 <_dtoa_r+0xba8>
 8006b80:	08008457 	.word	0x08008457
 8006b84:	080083b0 	.word	0x080083b0
 8006b88:	080083d4 	.word	0x080083d4

08006b8c <_localeconv_r>:
 8006b8c:	4800      	ldr	r0, [pc, #0]	; (8006b90 <_localeconv_r+0x4>)
 8006b8e:	4770      	bx	lr
 8006b90:	20000168 	.word	0x20000168

08006b94 <malloc>:
 8006b94:	4b02      	ldr	r3, [pc, #8]	; (8006ba0 <malloc+0xc>)
 8006b96:	4601      	mov	r1, r0
 8006b98:	6818      	ldr	r0, [r3, #0]
 8006b9a:	f000 bbfb 	b.w	8007394 <_malloc_r>
 8006b9e:	bf00      	nop
 8006ba0:	20000014 	.word	0x20000014

08006ba4 <memchr>:
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	b510      	push	{r4, lr}
 8006ba8:	b2c9      	uxtb	r1, r1
 8006baa:	4402      	add	r2, r0
 8006bac:	4293      	cmp	r3, r2
 8006bae:	4618      	mov	r0, r3
 8006bb0:	d101      	bne.n	8006bb6 <memchr+0x12>
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	e003      	b.n	8006bbe <memchr+0x1a>
 8006bb6:	7804      	ldrb	r4, [r0, #0]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	428c      	cmp	r4, r1
 8006bbc:	d1f6      	bne.n	8006bac <memchr+0x8>
 8006bbe:	bd10      	pop	{r4, pc}

08006bc0 <memcpy>:
 8006bc0:	440a      	add	r2, r1
 8006bc2:	4291      	cmp	r1, r2
 8006bc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bc8:	d100      	bne.n	8006bcc <memcpy+0xc>
 8006bca:	4770      	bx	lr
 8006bcc:	b510      	push	{r4, lr}
 8006bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bd2:	4291      	cmp	r1, r2
 8006bd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bd8:	d1f9      	bne.n	8006bce <memcpy+0xe>
 8006bda:	bd10      	pop	{r4, pc}

08006bdc <_Balloc>:
 8006bdc:	b570      	push	{r4, r5, r6, lr}
 8006bde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006be0:	4604      	mov	r4, r0
 8006be2:	460d      	mov	r5, r1
 8006be4:	b976      	cbnz	r6, 8006c04 <_Balloc+0x28>
 8006be6:	2010      	movs	r0, #16
 8006be8:	f7ff ffd4 	bl	8006b94 <malloc>
 8006bec:	4602      	mov	r2, r0
 8006bee:	6260      	str	r0, [r4, #36]	; 0x24
 8006bf0:	b920      	cbnz	r0, 8006bfc <_Balloc+0x20>
 8006bf2:	2166      	movs	r1, #102	; 0x66
 8006bf4:	4b17      	ldr	r3, [pc, #92]	; (8006c54 <_Balloc+0x78>)
 8006bf6:	4818      	ldr	r0, [pc, #96]	; (8006c58 <_Balloc+0x7c>)
 8006bf8:	f000 fd92 	bl	8007720 <__assert_func>
 8006bfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c00:	6006      	str	r6, [r0, #0]
 8006c02:	60c6      	str	r6, [r0, #12]
 8006c04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c06:	68f3      	ldr	r3, [r6, #12]
 8006c08:	b183      	cbz	r3, 8006c2c <_Balloc+0x50>
 8006c0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c12:	b9b8      	cbnz	r0, 8006c44 <_Balloc+0x68>
 8006c14:	2101      	movs	r1, #1
 8006c16:	fa01 f605 	lsl.w	r6, r1, r5
 8006c1a:	1d72      	adds	r2, r6, #5
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	0092      	lsls	r2, r2, #2
 8006c20:	f000 fb5e 	bl	80072e0 <_calloc_r>
 8006c24:	b160      	cbz	r0, 8006c40 <_Balloc+0x64>
 8006c26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c2a:	e00e      	b.n	8006c4a <_Balloc+0x6e>
 8006c2c:	2221      	movs	r2, #33	; 0x21
 8006c2e:	2104      	movs	r1, #4
 8006c30:	4620      	mov	r0, r4
 8006c32:	f000 fb55 	bl	80072e0 <_calloc_r>
 8006c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c38:	60f0      	str	r0, [r6, #12]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e4      	bne.n	8006c0a <_Balloc+0x2e>
 8006c40:	2000      	movs	r0, #0
 8006c42:	bd70      	pop	{r4, r5, r6, pc}
 8006c44:	6802      	ldr	r2, [r0, #0]
 8006c46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c50:	e7f7      	b.n	8006c42 <_Balloc+0x66>
 8006c52:	bf00      	nop
 8006c54:	080083e1 	.word	0x080083e1
 8006c58:	08008468 	.word	0x08008468

08006c5c <_Bfree>:
 8006c5c:	b570      	push	{r4, r5, r6, lr}
 8006c5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c60:	4605      	mov	r5, r0
 8006c62:	460c      	mov	r4, r1
 8006c64:	b976      	cbnz	r6, 8006c84 <_Bfree+0x28>
 8006c66:	2010      	movs	r0, #16
 8006c68:	f7ff ff94 	bl	8006b94 <malloc>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	6268      	str	r0, [r5, #36]	; 0x24
 8006c70:	b920      	cbnz	r0, 8006c7c <_Bfree+0x20>
 8006c72:	218a      	movs	r1, #138	; 0x8a
 8006c74:	4b08      	ldr	r3, [pc, #32]	; (8006c98 <_Bfree+0x3c>)
 8006c76:	4809      	ldr	r0, [pc, #36]	; (8006c9c <_Bfree+0x40>)
 8006c78:	f000 fd52 	bl	8007720 <__assert_func>
 8006c7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c80:	6006      	str	r6, [r0, #0]
 8006c82:	60c6      	str	r6, [r0, #12]
 8006c84:	b13c      	cbz	r4, 8006c96 <_Bfree+0x3a>
 8006c86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c88:	6862      	ldr	r2, [r4, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c90:	6021      	str	r1, [r4, #0]
 8006c92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c96:	bd70      	pop	{r4, r5, r6, pc}
 8006c98:	080083e1 	.word	0x080083e1
 8006c9c:	08008468 	.word	0x08008468

08006ca0 <__multadd>:
 8006ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca4:	4698      	mov	r8, r3
 8006ca6:	460c      	mov	r4, r1
 8006ca8:	2300      	movs	r3, #0
 8006caa:	690e      	ldr	r6, [r1, #16]
 8006cac:	4607      	mov	r7, r0
 8006cae:	f101 0014 	add.w	r0, r1, #20
 8006cb2:	6805      	ldr	r5, [r0, #0]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	b2a9      	uxth	r1, r5
 8006cb8:	fb02 8101 	mla	r1, r2, r1, r8
 8006cbc:	0c2d      	lsrs	r5, r5, #16
 8006cbe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006cc2:	fb02 c505 	mla	r5, r2, r5, ip
 8006cc6:	b289      	uxth	r1, r1
 8006cc8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006ccc:	429e      	cmp	r6, r3
 8006cce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006cd2:	f840 1b04 	str.w	r1, [r0], #4
 8006cd6:	dcec      	bgt.n	8006cb2 <__multadd+0x12>
 8006cd8:	f1b8 0f00 	cmp.w	r8, #0
 8006cdc:	d022      	beq.n	8006d24 <__multadd+0x84>
 8006cde:	68a3      	ldr	r3, [r4, #8]
 8006ce0:	42b3      	cmp	r3, r6
 8006ce2:	dc19      	bgt.n	8006d18 <__multadd+0x78>
 8006ce4:	6861      	ldr	r1, [r4, #4]
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	3101      	adds	r1, #1
 8006cea:	f7ff ff77 	bl	8006bdc <_Balloc>
 8006cee:	4605      	mov	r5, r0
 8006cf0:	b928      	cbnz	r0, 8006cfe <__multadd+0x5e>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	21b5      	movs	r1, #181	; 0xb5
 8006cf6:	4b0d      	ldr	r3, [pc, #52]	; (8006d2c <__multadd+0x8c>)
 8006cf8:	480d      	ldr	r0, [pc, #52]	; (8006d30 <__multadd+0x90>)
 8006cfa:	f000 fd11 	bl	8007720 <__assert_func>
 8006cfe:	6922      	ldr	r2, [r4, #16]
 8006d00:	f104 010c 	add.w	r1, r4, #12
 8006d04:	3202      	adds	r2, #2
 8006d06:	0092      	lsls	r2, r2, #2
 8006d08:	300c      	adds	r0, #12
 8006d0a:	f7ff ff59 	bl	8006bc0 <memcpy>
 8006d0e:	4621      	mov	r1, r4
 8006d10:	4638      	mov	r0, r7
 8006d12:	f7ff ffa3 	bl	8006c5c <_Bfree>
 8006d16:	462c      	mov	r4, r5
 8006d18:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006d1c:	3601      	adds	r6, #1
 8006d1e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006d22:	6126      	str	r6, [r4, #16]
 8006d24:	4620      	mov	r0, r4
 8006d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d2a:	bf00      	nop
 8006d2c:	08008457 	.word	0x08008457
 8006d30:	08008468 	.word	0x08008468

08006d34 <__hi0bits>:
 8006d34:	0c02      	lsrs	r2, r0, #16
 8006d36:	0412      	lsls	r2, r2, #16
 8006d38:	4603      	mov	r3, r0
 8006d3a:	b9ca      	cbnz	r2, 8006d70 <__hi0bits+0x3c>
 8006d3c:	0403      	lsls	r3, r0, #16
 8006d3e:	2010      	movs	r0, #16
 8006d40:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006d44:	bf04      	itt	eq
 8006d46:	021b      	lsleq	r3, r3, #8
 8006d48:	3008      	addeq	r0, #8
 8006d4a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006d4e:	bf04      	itt	eq
 8006d50:	011b      	lsleq	r3, r3, #4
 8006d52:	3004      	addeq	r0, #4
 8006d54:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006d58:	bf04      	itt	eq
 8006d5a:	009b      	lsleq	r3, r3, #2
 8006d5c:	3002      	addeq	r0, #2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	db05      	blt.n	8006d6e <__hi0bits+0x3a>
 8006d62:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006d66:	f100 0001 	add.w	r0, r0, #1
 8006d6a:	bf08      	it	eq
 8006d6c:	2020      	moveq	r0, #32
 8006d6e:	4770      	bx	lr
 8006d70:	2000      	movs	r0, #0
 8006d72:	e7e5      	b.n	8006d40 <__hi0bits+0xc>

08006d74 <__lo0bits>:
 8006d74:	6803      	ldr	r3, [r0, #0]
 8006d76:	4602      	mov	r2, r0
 8006d78:	f013 0007 	ands.w	r0, r3, #7
 8006d7c:	d00b      	beq.n	8006d96 <__lo0bits+0x22>
 8006d7e:	07d9      	lsls	r1, r3, #31
 8006d80:	d422      	bmi.n	8006dc8 <__lo0bits+0x54>
 8006d82:	0798      	lsls	r0, r3, #30
 8006d84:	bf49      	itett	mi
 8006d86:	085b      	lsrmi	r3, r3, #1
 8006d88:	089b      	lsrpl	r3, r3, #2
 8006d8a:	2001      	movmi	r0, #1
 8006d8c:	6013      	strmi	r3, [r2, #0]
 8006d8e:	bf5c      	itt	pl
 8006d90:	2002      	movpl	r0, #2
 8006d92:	6013      	strpl	r3, [r2, #0]
 8006d94:	4770      	bx	lr
 8006d96:	b299      	uxth	r1, r3
 8006d98:	b909      	cbnz	r1, 8006d9e <__lo0bits+0x2a>
 8006d9a:	2010      	movs	r0, #16
 8006d9c:	0c1b      	lsrs	r3, r3, #16
 8006d9e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006da2:	bf04      	itt	eq
 8006da4:	0a1b      	lsreq	r3, r3, #8
 8006da6:	3008      	addeq	r0, #8
 8006da8:	0719      	lsls	r1, r3, #28
 8006daa:	bf04      	itt	eq
 8006dac:	091b      	lsreq	r3, r3, #4
 8006dae:	3004      	addeq	r0, #4
 8006db0:	0799      	lsls	r1, r3, #30
 8006db2:	bf04      	itt	eq
 8006db4:	089b      	lsreq	r3, r3, #2
 8006db6:	3002      	addeq	r0, #2
 8006db8:	07d9      	lsls	r1, r3, #31
 8006dba:	d403      	bmi.n	8006dc4 <__lo0bits+0x50>
 8006dbc:	085b      	lsrs	r3, r3, #1
 8006dbe:	f100 0001 	add.w	r0, r0, #1
 8006dc2:	d003      	beq.n	8006dcc <__lo0bits+0x58>
 8006dc4:	6013      	str	r3, [r2, #0]
 8006dc6:	4770      	bx	lr
 8006dc8:	2000      	movs	r0, #0
 8006dca:	4770      	bx	lr
 8006dcc:	2020      	movs	r0, #32
 8006dce:	4770      	bx	lr

08006dd0 <__i2b>:
 8006dd0:	b510      	push	{r4, lr}
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	f7ff ff01 	bl	8006bdc <_Balloc>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	b928      	cbnz	r0, 8006dea <__i2b+0x1a>
 8006dde:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006de2:	4b04      	ldr	r3, [pc, #16]	; (8006df4 <__i2b+0x24>)
 8006de4:	4804      	ldr	r0, [pc, #16]	; (8006df8 <__i2b+0x28>)
 8006de6:	f000 fc9b 	bl	8007720 <__assert_func>
 8006dea:	2301      	movs	r3, #1
 8006dec:	6144      	str	r4, [r0, #20]
 8006dee:	6103      	str	r3, [r0, #16]
 8006df0:	bd10      	pop	{r4, pc}
 8006df2:	bf00      	nop
 8006df4:	08008457 	.word	0x08008457
 8006df8:	08008468 	.word	0x08008468

08006dfc <__multiply>:
 8006dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e00:	4614      	mov	r4, r2
 8006e02:	690a      	ldr	r2, [r1, #16]
 8006e04:	6923      	ldr	r3, [r4, #16]
 8006e06:	460d      	mov	r5, r1
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	bfbe      	ittt	lt
 8006e0c:	460b      	movlt	r3, r1
 8006e0e:	4625      	movlt	r5, r4
 8006e10:	461c      	movlt	r4, r3
 8006e12:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006e16:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006e1a:	68ab      	ldr	r3, [r5, #8]
 8006e1c:	6869      	ldr	r1, [r5, #4]
 8006e1e:	eb0a 0709 	add.w	r7, sl, r9
 8006e22:	42bb      	cmp	r3, r7
 8006e24:	b085      	sub	sp, #20
 8006e26:	bfb8      	it	lt
 8006e28:	3101      	addlt	r1, #1
 8006e2a:	f7ff fed7 	bl	8006bdc <_Balloc>
 8006e2e:	b930      	cbnz	r0, 8006e3e <__multiply+0x42>
 8006e30:	4602      	mov	r2, r0
 8006e32:	f240 115d 	movw	r1, #349	; 0x15d
 8006e36:	4b41      	ldr	r3, [pc, #260]	; (8006f3c <__multiply+0x140>)
 8006e38:	4841      	ldr	r0, [pc, #260]	; (8006f40 <__multiply+0x144>)
 8006e3a:	f000 fc71 	bl	8007720 <__assert_func>
 8006e3e:	f100 0614 	add.w	r6, r0, #20
 8006e42:	4633      	mov	r3, r6
 8006e44:	2200      	movs	r2, #0
 8006e46:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006e4a:	4543      	cmp	r3, r8
 8006e4c:	d31e      	bcc.n	8006e8c <__multiply+0x90>
 8006e4e:	f105 0c14 	add.w	ip, r5, #20
 8006e52:	f104 0314 	add.w	r3, r4, #20
 8006e56:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006e5a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006e5e:	9202      	str	r2, [sp, #8]
 8006e60:	ebac 0205 	sub.w	r2, ip, r5
 8006e64:	3a15      	subs	r2, #21
 8006e66:	f022 0203 	bic.w	r2, r2, #3
 8006e6a:	3204      	adds	r2, #4
 8006e6c:	f105 0115 	add.w	r1, r5, #21
 8006e70:	458c      	cmp	ip, r1
 8006e72:	bf38      	it	cc
 8006e74:	2204      	movcc	r2, #4
 8006e76:	9201      	str	r2, [sp, #4]
 8006e78:	9a02      	ldr	r2, [sp, #8]
 8006e7a:	9303      	str	r3, [sp, #12]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d808      	bhi.n	8006e92 <__multiply+0x96>
 8006e80:	2f00      	cmp	r7, #0
 8006e82:	dc55      	bgt.n	8006f30 <__multiply+0x134>
 8006e84:	6107      	str	r7, [r0, #16]
 8006e86:	b005      	add	sp, #20
 8006e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e8c:	f843 2b04 	str.w	r2, [r3], #4
 8006e90:	e7db      	b.n	8006e4a <__multiply+0x4e>
 8006e92:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e96:	f1ba 0f00 	cmp.w	sl, #0
 8006e9a:	d020      	beq.n	8006ede <__multiply+0xe2>
 8006e9c:	46b1      	mov	r9, r6
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f105 0e14 	add.w	lr, r5, #20
 8006ea4:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006ea8:	f8d9 b000 	ldr.w	fp, [r9]
 8006eac:	b2a1      	uxth	r1, r4
 8006eae:	fa1f fb8b 	uxth.w	fp, fp
 8006eb2:	fb0a b101 	mla	r1, sl, r1, fp
 8006eb6:	4411      	add	r1, r2
 8006eb8:	f8d9 2000 	ldr.w	r2, [r9]
 8006ebc:	0c24      	lsrs	r4, r4, #16
 8006ebe:	0c12      	lsrs	r2, r2, #16
 8006ec0:	fb0a 2404 	mla	r4, sl, r4, r2
 8006ec4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006ec8:	b289      	uxth	r1, r1
 8006eca:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006ece:	45f4      	cmp	ip, lr
 8006ed0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006ed4:	f849 1b04 	str.w	r1, [r9], #4
 8006ed8:	d8e4      	bhi.n	8006ea4 <__multiply+0xa8>
 8006eda:	9901      	ldr	r1, [sp, #4]
 8006edc:	5072      	str	r2, [r6, r1]
 8006ede:	9a03      	ldr	r2, [sp, #12]
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ee6:	f1b9 0f00 	cmp.w	r9, #0
 8006eea:	d01f      	beq.n	8006f2c <__multiply+0x130>
 8006eec:	46b6      	mov	lr, r6
 8006eee:	f04f 0a00 	mov.w	sl, #0
 8006ef2:	6834      	ldr	r4, [r6, #0]
 8006ef4:	f105 0114 	add.w	r1, r5, #20
 8006ef8:	880a      	ldrh	r2, [r1, #0]
 8006efa:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006efe:	b2a4      	uxth	r4, r4
 8006f00:	fb09 b202 	mla	r2, r9, r2, fp
 8006f04:	4492      	add	sl, r2
 8006f06:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006f0a:	f84e 4b04 	str.w	r4, [lr], #4
 8006f0e:	f851 4b04 	ldr.w	r4, [r1], #4
 8006f12:	f8be 2000 	ldrh.w	r2, [lr]
 8006f16:	0c24      	lsrs	r4, r4, #16
 8006f18:	fb09 2404 	mla	r4, r9, r4, r2
 8006f1c:	458c      	cmp	ip, r1
 8006f1e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006f22:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006f26:	d8e7      	bhi.n	8006ef8 <__multiply+0xfc>
 8006f28:	9a01      	ldr	r2, [sp, #4]
 8006f2a:	50b4      	str	r4, [r6, r2]
 8006f2c:	3604      	adds	r6, #4
 8006f2e:	e7a3      	b.n	8006e78 <__multiply+0x7c>
 8006f30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1a5      	bne.n	8006e84 <__multiply+0x88>
 8006f38:	3f01      	subs	r7, #1
 8006f3a:	e7a1      	b.n	8006e80 <__multiply+0x84>
 8006f3c:	08008457 	.word	0x08008457
 8006f40:	08008468 	.word	0x08008468

08006f44 <__pow5mult>:
 8006f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f48:	4615      	mov	r5, r2
 8006f4a:	f012 0203 	ands.w	r2, r2, #3
 8006f4e:	4606      	mov	r6, r0
 8006f50:	460f      	mov	r7, r1
 8006f52:	d007      	beq.n	8006f64 <__pow5mult+0x20>
 8006f54:	4c25      	ldr	r4, [pc, #148]	; (8006fec <__pow5mult+0xa8>)
 8006f56:	3a01      	subs	r2, #1
 8006f58:	2300      	movs	r3, #0
 8006f5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f5e:	f7ff fe9f 	bl	8006ca0 <__multadd>
 8006f62:	4607      	mov	r7, r0
 8006f64:	10ad      	asrs	r5, r5, #2
 8006f66:	d03d      	beq.n	8006fe4 <__pow5mult+0xa0>
 8006f68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f6a:	b97c      	cbnz	r4, 8006f8c <__pow5mult+0x48>
 8006f6c:	2010      	movs	r0, #16
 8006f6e:	f7ff fe11 	bl	8006b94 <malloc>
 8006f72:	4602      	mov	r2, r0
 8006f74:	6270      	str	r0, [r6, #36]	; 0x24
 8006f76:	b928      	cbnz	r0, 8006f84 <__pow5mult+0x40>
 8006f78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006f7c:	4b1c      	ldr	r3, [pc, #112]	; (8006ff0 <__pow5mult+0xac>)
 8006f7e:	481d      	ldr	r0, [pc, #116]	; (8006ff4 <__pow5mult+0xb0>)
 8006f80:	f000 fbce 	bl	8007720 <__assert_func>
 8006f84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f88:	6004      	str	r4, [r0, #0]
 8006f8a:	60c4      	str	r4, [r0, #12]
 8006f8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f94:	b94c      	cbnz	r4, 8006faa <__pow5mult+0x66>
 8006f96:	f240 2171 	movw	r1, #625	; 0x271
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	f7ff ff18 	bl	8006dd0 <__i2b>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	f8c8 0008 	str.w	r0, [r8, #8]
 8006fa8:	6003      	str	r3, [r0, #0]
 8006faa:	f04f 0900 	mov.w	r9, #0
 8006fae:	07eb      	lsls	r3, r5, #31
 8006fb0:	d50a      	bpl.n	8006fc8 <__pow5mult+0x84>
 8006fb2:	4639      	mov	r1, r7
 8006fb4:	4622      	mov	r2, r4
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	f7ff ff20 	bl	8006dfc <__multiply>
 8006fbc:	4680      	mov	r8, r0
 8006fbe:	4639      	mov	r1, r7
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	f7ff fe4b 	bl	8006c5c <_Bfree>
 8006fc6:	4647      	mov	r7, r8
 8006fc8:	106d      	asrs	r5, r5, #1
 8006fca:	d00b      	beq.n	8006fe4 <__pow5mult+0xa0>
 8006fcc:	6820      	ldr	r0, [r4, #0]
 8006fce:	b938      	cbnz	r0, 8006fe0 <__pow5mult+0x9c>
 8006fd0:	4622      	mov	r2, r4
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	f7ff ff11 	bl	8006dfc <__multiply>
 8006fda:	6020      	str	r0, [r4, #0]
 8006fdc:	f8c0 9000 	str.w	r9, [r0]
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	e7e4      	b.n	8006fae <__pow5mult+0x6a>
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fea:	bf00      	nop
 8006fec:	080085b8 	.word	0x080085b8
 8006ff0:	080083e1 	.word	0x080083e1
 8006ff4:	08008468 	.word	0x08008468

08006ff8 <__lshift>:
 8006ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ffc:	460c      	mov	r4, r1
 8006ffe:	4607      	mov	r7, r0
 8007000:	4691      	mov	r9, r2
 8007002:	6923      	ldr	r3, [r4, #16]
 8007004:	6849      	ldr	r1, [r1, #4]
 8007006:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800700a:	68a3      	ldr	r3, [r4, #8]
 800700c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007010:	f108 0601 	add.w	r6, r8, #1
 8007014:	42b3      	cmp	r3, r6
 8007016:	db0b      	blt.n	8007030 <__lshift+0x38>
 8007018:	4638      	mov	r0, r7
 800701a:	f7ff fddf 	bl	8006bdc <_Balloc>
 800701e:	4605      	mov	r5, r0
 8007020:	b948      	cbnz	r0, 8007036 <__lshift+0x3e>
 8007022:	4602      	mov	r2, r0
 8007024:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007028:	4b27      	ldr	r3, [pc, #156]	; (80070c8 <__lshift+0xd0>)
 800702a:	4828      	ldr	r0, [pc, #160]	; (80070cc <__lshift+0xd4>)
 800702c:	f000 fb78 	bl	8007720 <__assert_func>
 8007030:	3101      	adds	r1, #1
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	e7ee      	b.n	8007014 <__lshift+0x1c>
 8007036:	2300      	movs	r3, #0
 8007038:	f100 0114 	add.w	r1, r0, #20
 800703c:	f100 0210 	add.w	r2, r0, #16
 8007040:	4618      	mov	r0, r3
 8007042:	4553      	cmp	r3, sl
 8007044:	db33      	blt.n	80070ae <__lshift+0xb6>
 8007046:	6920      	ldr	r0, [r4, #16]
 8007048:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800704c:	f104 0314 	add.w	r3, r4, #20
 8007050:	f019 091f 	ands.w	r9, r9, #31
 8007054:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007058:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800705c:	d02b      	beq.n	80070b6 <__lshift+0xbe>
 800705e:	468a      	mov	sl, r1
 8007060:	2200      	movs	r2, #0
 8007062:	f1c9 0e20 	rsb	lr, r9, #32
 8007066:	6818      	ldr	r0, [r3, #0]
 8007068:	fa00 f009 	lsl.w	r0, r0, r9
 800706c:	4302      	orrs	r2, r0
 800706e:	f84a 2b04 	str.w	r2, [sl], #4
 8007072:	f853 2b04 	ldr.w	r2, [r3], #4
 8007076:	459c      	cmp	ip, r3
 8007078:	fa22 f20e 	lsr.w	r2, r2, lr
 800707c:	d8f3      	bhi.n	8007066 <__lshift+0x6e>
 800707e:	ebac 0304 	sub.w	r3, ip, r4
 8007082:	3b15      	subs	r3, #21
 8007084:	f023 0303 	bic.w	r3, r3, #3
 8007088:	3304      	adds	r3, #4
 800708a:	f104 0015 	add.w	r0, r4, #21
 800708e:	4584      	cmp	ip, r0
 8007090:	bf38      	it	cc
 8007092:	2304      	movcc	r3, #4
 8007094:	50ca      	str	r2, [r1, r3]
 8007096:	b10a      	cbz	r2, 800709c <__lshift+0xa4>
 8007098:	f108 0602 	add.w	r6, r8, #2
 800709c:	3e01      	subs	r6, #1
 800709e:	4638      	mov	r0, r7
 80070a0:	4621      	mov	r1, r4
 80070a2:	612e      	str	r6, [r5, #16]
 80070a4:	f7ff fdda 	bl	8006c5c <_Bfree>
 80070a8:	4628      	mov	r0, r5
 80070aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80070b2:	3301      	adds	r3, #1
 80070b4:	e7c5      	b.n	8007042 <__lshift+0x4a>
 80070b6:	3904      	subs	r1, #4
 80070b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80070bc:	459c      	cmp	ip, r3
 80070be:	f841 2f04 	str.w	r2, [r1, #4]!
 80070c2:	d8f9      	bhi.n	80070b8 <__lshift+0xc0>
 80070c4:	e7ea      	b.n	800709c <__lshift+0xa4>
 80070c6:	bf00      	nop
 80070c8:	08008457 	.word	0x08008457
 80070cc:	08008468 	.word	0x08008468

080070d0 <__mcmp>:
 80070d0:	4603      	mov	r3, r0
 80070d2:	690a      	ldr	r2, [r1, #16]
 80070d4:	6900      	ldr	r0, [r0, #16]
 80070d6:	b530      	push	{r4, r5, lr}
 80070d8:	1a80      	subs	r0, r0, r2
 80070da:	d10d      	bne.n	80070f8 <__mcmp+0x28>
 80070dc:	3314      	adds	r3, #20
 80070de:	3114      	adds	r1, #20
 80070e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80070e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80070e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80070ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80070f0:	4295      	cmp	r5, r2
 80070f2:	d002      	beq.n	80070fa <__mcmp+0x2a>
 80070f4:	d304      	bcc.n	8007100 <__mcmp+0x30>
 80070f6:	2001      	movs	r0, #1
 80070f8:	bd30      	pop	{r4, r5, pc}
 80070fa:	42a3      	cmp	r3, r4
 80070fc:	d3f4      	bcc.n	80070e8 <__mcmp+0x18>
 80070fe:	e7fb      	b.n	80070f8 <__mcmp+0x28>
 8007100:	f04f 30ff 	mov.w	r0, #4294967295
 8007104:	e7f8      	b.n	80070f8 <__mcmp+0x28>
	...

08007108 <__mdiff>:
 8007108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710c:	460c      	mov	r4, r1
 800710e:	4606      	mov	r6, r0
 8007110:	4611      	mov	r1, r2
 8007112:	4620      	mov	r0, r4
 8007114:	4692      	mov	sl, r2
 8007116:	f7ff ffdb 	bl	80070d0 <__mcmp>
 800711a:	1e05      	subs	r5, r0, #0
 800711c:	d111      	bne.n	8007142 <__mdiff+0x3a>
 800711e:	4629      	mov	r1, r5
 8007120:	4630      	mov	r0, r6
 8007122:	f7ff fd5b 	bl	8006bdc <_Balloc>
 8007126:	4602      	mov	r2, r0
 8007128:	b928      	cbnz	r0, 8007136 <__mdiff+0x2e>
 800712a:	f240 2132 	movw	r1, #562	; 0x232
 800712e:	4b3c      	ldr	r3, [pc, #240]	; (8007220 <__mdiff+0x118>)
 8007130:	483c      	ldr	r0, [pc, #240]	; (8007224 <__mdiff+0x11c>)
 8007132:	f000 faf5 	bl	8007720 <__assert_func>
 8007136:	2301      	movs	r3, #1
 8007138:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800713c:	4610      	mov	r0, r2
 800713e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007142:	bfa4      	itt	ge
 8007144:	4653      	movge	r3, sl
 8007146:	46a2      	movge	sl, r4
 8007148:	4630      	mov	r0, r6
 800714a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800714e:	bfa6      	itte	ge
 8007150:	461c      	movge	r4, r3
 8007152:	2500      	movge	r5, #0
 8007154:	2501      	movlt	r5, #1
 8007156:	f7ff fd41 	bl	8006bdc <_Balloc>
 800715a:	4602      	mov	r2, r0
 800715c:	b918      	cbnz	r0, 8007166 <__mdiff+0x5e>
 800715e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007162:	4b2f      	ldr	r3, [pc, #188]	; (8007220 <__mdiff+0x118>)
 8007164:	e7e4      	b.n	8007130 <__mdiff+0x28>
 8007166:	f100 0814 	add.w	r8, r0, #20
 800716a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800716e:	60c5      	str	r5, [r0, #12]
 8007170:	f04f 0c00 	mov.w	ip, #0
 8007174:	f10a 0514 	add.w	r5, sl, #20
 8007178:	f10a 0010 	add.w	r0, sl, #16
 800717c:	46c2      	mov	sl, r8
 800717e:	6926      	ldr	r6, [r4, #16]
 8007180:	f104 0914 	add.w	r9, r4, #20
 8007184:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007188:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800718c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007190:	f859 3b04 	ldr.w	r3, [r9], #4
 8007194:	fa1f f18b 	uxth.w	r1, fp
 8007198:	4461      	add	r1, ip
 800719a:	fa1f fc83 	uxth.w	ip, r3
 800719e:	0c1b      	lsrs	r3, r3, #16
 80071a0:	eba1 010c 	sub.w	r1, r1, ip
 80071a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80071a8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80071ac:	b289      	uxth	r1, r1
 80071ae:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80071b2:	454e      	cmp	r6, r9
 80071b4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80071b8:	f84a 3b04 	str.w	r3, [sl], #4
 80071bc:	d8e6      	bhi.n	800718c <__mdiff+0x84>
 80071be:	1b33      	subs	r3, r6, r4
 80071c0:	3b15      	subs	r3, #21
 80071c2:	f023 0303 	bic.w	r3, r3, #3
 80071c6:	3415      	adds	r4, #21
 80071c8:	3304      	adds	r3, #4
 80071ca:	42a6      	cmp	r6, r4
 80071cc:	bf38      	it	cc
 80071ce:	2304      	movcc	r3, #4
 80071d0:	441d      	add	r5, r3
 80071d2:	4443      	add	r3, r8
 80071d4:	461e      	mov	r6, r3
 80071d6:	462c      	mov	r4, r5
 80071d8:	4574      	cmp	r4, lr
 80071da:	d30e      	bcc.n	80071fa <__mdiff+0xf2>
 80071dc:	f10e 0103 	add.w	r1, lr, #3
 80071e0:	1b49      	subs	r1, r1, r5
 80071e2:	f021 0103 	bic.w	r1, r1, #3
 80071e6:	3d03      	subs	r5, #3
 80071e8:	45ae      	cmp	lr, r5
 80071ea:	bf38      	it	cc
 80071ec:	2100      	movcc	r1, #0
 80071ee:	4419      	add	r1, r3
 80071f0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80071f4:	b18b      	cbz	r3, 800721a <__mdiff+0x112>
 80071f6:	6117      	str	r7, [r2, #16]
 80071f8:	e7a0      	b.n	800713c <__mdiff+0x34>
 80071fa:	f854 8b04 	ldr.w	r8, [r4], #4
 80071fe:	fa1f f188 	uxth.w	r1, r8
 8007202:	4461      	add	r1, ip
 8007204:	1408      	asrs	r0, r1, #16
 8007206:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800720a:	b289      	uxth	r1, r1
 800720c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007210:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007214:	f846 1b04 	str.w	r1, [r6], #4
 8007218:	e7de      	b.n	80071d8 <__mdiff+0xd0>
 800721a:	3f01      	subs	r7, #1
 800721c:	e7e8      	b.n	80071f0 <__mdiff+0xe8>
 800721e:	bf00      	nop
 8007220:	08008457 	.word	0x08008457
 8007224:	08008468 	.word	0x08008468

08007228 <__d2b>:
 8007228:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800722c:	2101      	movs	r1, #1
 800722e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007232:	4690      	mov	r8, r2
 8007234:	461d      	mov	r5, r3
 8007236:	f7ff fcd1 	bl	8006bdc <_Balloc>
 800723a:	4604      	mov	r4, r0
 800723c:	b930      	cbnz	r0, 800724c <__d2b+0x24>
 800723e:	4602      	mov	r2, r0
 8007240:	f240 310a 	movw	r1, #778	; 0x30a
 8007244:	4b24      	ldr	r3, [pc, #144]	; (80072d8 <__d2b+0xb0>)
 8007246:	4825      	ldr	r0, [pc, #148]	; (80072dc <__d2b+0xb4>)
 8007248:	f000 fa6a 	bl	8007720 <__assert_func>
 800724c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007250:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007254:	bb2d      	cbnz	r5, 80072a2 <__d2b+0x7a>
 8007256:	9301      	str	r3, [sp, #4]
 8007258:	f1b8 0300 	subs.w	r3, r8, #0
 800725c:	d026      	beq.n	80072ac <__d2b+0x84>
 800725e:	4668      	mov	r0, sp
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	f7ff fd87 	bl	8006d74 <__lo0bits>
 8007266:	9900      	ldr	r1, [sp, #0]
 8007268:	b1f0      	cbz	r0, 80072a8 <__d2b+0x80>
 800726a:	9a01      	ldr	r2, [sp, #4]
 800726c:	f1c0 0320 	rsb	r3, r0, #32
 8007270:	fa02 f303 	lsl.w	r3, r2, r3
 8007274:	430b      	orrs	r3, r1
 8007276:	40c2      	lsrs	r2, r0
 8007278:	6163      	str	r3, [r4, #20]
 800727a:	9201      	str	r2, [sp, #4]
 800727c:	9b01      	ldr	r3, [sp, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	bf14      	ite	ne
 8007282:	2102      	movne	r1, #2
 8007284:	2101      	moveq	r1, #1
 8007286:	61a3      	str	r3, [r4, #24]
 8007288:	6121      	str	r1, [r4, #16]
 800728a:	b1c5      	cbz	r5, 80072be <__d2b+0x96>
 800728c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007290:	4405      	add	r5, r0
 8007292:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007296:	603d      	str	r5, [r7, #0]
 8007298:	6030      	str	r0, [r6, #0]
 800729a:	4620      	mov	r0, r4
 800729c:	b002      	add	sp, #8
 800729e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072a6:	e7d6      	b.n	8007256 <__d2b+0x2e>
 80072a8:	6161      	str	r1, [r4, #20]
 80072aa:	e7e7      	b.n	800727c <__d2b+0x54>
 80072ac:	a801      	add	r0, sp, #4
 80072ae:	f7ff fd61 	bl	8006d74 <__lo0bits>
 80072b2:	2101      	movs	r1, #1
 80072b4:	9b01      	ldr	r3, [sp, #4]
 80072b6:	6121      	str	r1, [r4, #16]
 80072b8:	6163      	str	r3, [r4, #20]
 80072ba:	3020      	adds	r0, #32
 80072bc:	e7e5      	b.n	800728a <__d2b+0x62>
 80072be:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80072c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80072c6:	6038      	str	r0, [r7, #0]
 80072c8:	6918      	ldr	r0, [r3, #16]
 80072ca:	f7ff fd33 	bl	8006d34 <__hi0bits>
 80072ce:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80072d2:	6031      	str	r1, [r6, #0]
 80072d4:	e7e1      	b.n	800729a <__d2b+0x72>
 80072d6:	bf00      	nop
 80072d8:	08008457 	.word	0x08008457
 80072dc:	08008468 	.word	0x08008468

080072e0 <_calloc_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	fb02 f501 	mul.w	r5, r2, r1
 80072e6:	4629      	mov	r1, r5
 80072e8:	f000 f854 	bl	8007394 <_malloc_r>
 80072ec:	4604      	mov	r4, r0
 80072ee:	b118      	cbz	r0, 80072f8 <_calloc_r+0x18>
 80072f0:	462a      	mov	r2, r5
 80072f2:	2100      	movs	r1, #0
 80072f4:	f7fe f944 	bl	8005580 <memset>
 80072f8:	4620      	mov	r0, r4
 80072fa:	bd38      	pop	{r3, r4, r5, pc}

080072fc <_free_r>:
 80072fc:	b538      	push	{r3, r4, r5, lr}
 80072fe:	4605      	mov	r5, r0
 8007300:	2900      	cmp	r1, #0
 8007302:	d043      	beq.n	800738c <_free_r+0x90>
 8007304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007308:	1f0c      	subs	r4, r1, #4
 800730a:	2b00      	cmp	r3, #0
 800730c:	bfb8      	it	lt
 800730e:	18e4      	addlt	r4, r4, r3
 8007310:	f000 fa62 	bl	80077d8 <__malloc_lock>
 8007314:	4a1e      	ldr	r2, [pc, #120]	; (8007390 <_free_r+0x94>)
 8007316:	6813      	ldr	r3, [r2, #0]
 8007318:	4610      	mov	r0, r2
 800731a:	b933      	cbnz	r3, 800732a <_free_r+0x2e>
 800731c:	6063      	str	r3, [r4, #4]
 800731e:	6014      	str	r4, [r2, #0]
 8007320:	4628      	mov	r0, r5
 8007322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007326:	f000 ba5d 	b.w	80077e4 <__malloc_unlock>
 800732a:	42a3      	cmp	r3, r4
 800732c:	d90a      	bls.n	8007344 <_free_r+0x48>
 800732e:	6821      	ldr	r1, [r4, #0]
 8007330:	1862      	adds	r2, r4, r1
 8007332:	4293      	cmp	r3, r2
 8007334:	bf01      	itttt	eq
 8007336:	681a      	ldreq	r2, [r3, #0]
 8007338:	685b      	ldreq	r3, [r3, #4]
 800733a:	1852      	addeq	r2, r2, r1
 800733c:	6022      	streq	r2, [r4, #0]
 800733e:	6063      	str	r3, [r4, #4]
 8007340:	6004      	str	r4, [r0, #0]
 8007342:	e7ed      	b.n	8007320 <_free_r+0x24>
 8007344:	461a      	mov	r2, r3
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	b10b      	cbz	r3, 800734e <_free_r+0x52>
 800734a:	42a3      	cmp	r3, r4
 800734c:	d9fa      	bls.n	8007344 <_free_r+0x48>
 800734e:	6811      	ldr	r1, [r2, #0]
 8007350:	1850      	adds	r0, r2, r1
 8007352:	42a0      	cmp	r0, r4
 8007354:	d10b      	bne.n	800736e <_free_r+0x72>
 8007356:	6820      	ldr	r0, [r4, #0]
 8007358:	4401      	add	r1, r0
 800735a:	1850      	adds	r0, r2, r1
 800735c:	4283      	cmp	r3, r0
 800735e:	6011      	str	r1, [r2, #0]
 8007360:	d1de      	bne.n	8007320 <_free_r+0x24>
 8007362:	6818      	ldr	r0, [r3, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	4401      	add	r1, r0
 8007368:	6011      	str	r1, [r2, #0]
 800736a:	6053      	str	r3, [r2, #4]
 800736c:	e7d8      	b.n	8007320 <_free_r+0x24>
 800736e:	d902      	bls.n	8007376 <_free_r+0x7a>
 8007370:	230c      	movs	r3, #12
 8007372:	602b      	str	r3, [r5, #0]
 8007374:	e7d4      	b.n	8007320 <_free_r+0x24>
 8007376:	6820      	ldr	r0, [r4, #0]
 8007378:	1821      	adds	r1, r4, r0
 800737a:	428b      	cmp	r3, r1
 800737c:	bf01      	itttt	eq
 800737e:	6819      	ldreq	r1, [r3, #0]
 8007380:	685b      	ldreq	r3, [r3, #4]
 8007382:	1809      	addeq	r1, r1, r0
 8007384:	6021      	streq	r1, [r4, #0]
 8007386:	6063      	str	r3, [r4, #4]
 8007388:	6054      	str	r4, [r2, #4]
 800738a:	e7c9      	b.n	8007320 <_free_r+0x24>
 800738c:	bd38      	pop	{r3, r4, r5, pc}
 800738e:	bf00      	nop
 8007390:	200002a4 	.word	0x200002a4

08007394 <_malloc_r>:
 8007394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007396:	1ccd      	adds	r5, r1, #3
 8007398:	f025 0503 	bic.w	r5, r5, #3
 800739c:	3508      	adds	r5, #8
 800739e:	2d0c      	cmp	r5, #12
 80073a0:	bf38      	it	cc
 80073a2:	250c      	movcc	r5, #12
 80073a4:	2d00      	cmp	r5, #0
 80073a6:	4606      	mov	r6, r0
 80073a8:	db01      	blt.n	80073ae <_malloc_r+0x1a>
 80073aa:	42a9      	cmp	r1, r5
 80073ac:	d903      	bls.n	80073b6 <_malloc_r+0x22>
 80073ae:	230c      	movs	r3, #12
 80073b0:	6033      	str	r3, [r6, #0]
 80073b2:	2000      	movs	r0, #0
 80073b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073b6:	f000 fa0f 	bl	80077d8 <__malloc_lock>
 80073ba:	4921      	ldr	r1, [pc, #132]	; (8007440 <_malloc_r+0xac>)
 80073bc:	680a      	ldr	r2, [r1, #0]
 80073be:	4614      	mov	r4, r2
 80073c0:	b99c      	cbnz	r4, 80073ea <_malloc_r+0x56>
 80073c2:	4f20      	ldr	r7, [pc, #128]	; (8007444 <_malloc_r+0xb0>)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	b923      	cbnz	r3, 80073d2 <_malloc_r+0x3e>
 80073c8:	4621      	mov	r1, r4
 80073ca:	4630      	mov	r0, r6
 80073cc:	f000 f998 	bl	8007700 <_sbrk_r>
 80073d0:	6038      	str	r0, [r7, #0]
 80073d2:	4629      	mov	r1, r5
 80073d4:	4630      	mov	r0, r6
 80073d6:	f000 f993 	bl	8007700 <_sbrk_r>
 80073da:	1c43      	adds	r3, r0, #1
 80073dc:	d123      	bne.n	8007426 <_malloc_r+0x92>
 80073de:	230c      	movs	r3, #12
 80073e0:	4630      	mov	r0, r6
 80073e2:	6033      	str	r3, [r6, #0]
 80073e4:	f000 f9fe 	bl	80077e4 <__malloc_unlock>
 80073e8:	e7e3      	b.n	80073b2 <_malloc_r+0x1e>
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	1b5b      	subs	r3, r3, r5
 80073ee:	d417      	bmi.n	8007420 <_malloc_r+0x8c>
 80073f0:	2b0b      	cmp	r3, #11
 80073f2:	d903      	bls.n	80073fc <_malloc_r+0x68>
 80073f4:	6023      	str	r3, [r4, #0]
 80073f6:	441c      	add	r4, r3
 80073f8:	6025      	str	r5, [r4, #0]
 80073fa:	e004      	b.n	8007406 <_malloc_r+0x72>
 80073fc:	6863      	ldr	r3, [r4, #4]
 80073fe:	42a2      	cmp	r2, r4
 8007400:	bf0c      	ite	eq
 8007402:	600b      	streq	r3, [r1, #0]
 8007404:	6053      	strne	r3, [r2, #4]
 8007406:	4630      	mov	r0, r6
 8007408:	f000 f9ec 	bl	80077e4 <__malloc_unlock>
 800740c:	f104 000b 	add.w	r0, r4, #11
 8007410:	1d23      	adds	r3, r4, #4
 8007412:	f020 0007 	bic.w	r0, r0, #7
 8007416:	1ac2      	subs	r2, r0, r3
 8007418:	d0cc      	beq.n	80073b4 <_malloc_r+0x20>
 800741a:	1a1b      	subs	r3, r3, r0
 800741c:	50a3      	str	r3, [r4, r2]
 800741e:	e7c9      	b.n	80073b4 <_malloc_r+0x20>
 8007420:	4622      	mov	r2, r4
 8007422:	6864      	ldr	r4, [r4, #4]
 8007424:	e7cc      	b.n	80073c0 <_malloc_r+0x2c>
 8007426:	1cc4      	adds	r4, r0, #3
 8007428:	f024 0403 	bic.w	r4, r4, #3
 800742c:	42a0      	cmp	r0, r4
 800742e:	d0e3      	beq.n	80073f8 <_malloc_r+0x64>
 8007430:	1a21      	subs	r1, r4, r0
 8007432:	4630      	mov	r0, r6
 8007434:	f000 f964 	bl	8007700 <_sbrk_r>
 8007438:	3001      	adds	r0, #1
 800743a:	d1dd      	bne.n	80073f8 <_malloc_r+0x64>
 800743c:	e7cf      	b.n	80073de <_malloc_r+0x4a>
 800743e:	bf00      	nop
 8007440:	200002a4 	.word	0x200002a4
 8007444:	200002a8 	.word	0x200002a8

08007448 <__ssputs_r>:
 8007448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800744c:	688e      	ldr	r6, [r1, #8]
 800744e:	4682      	mov	sl, r0
 8007450:	429e      	cmp	r6, r3
 8007452:	460c      	mov	r4, r1
 8007454:	4690      	mov	r8, r2
 8007456:	461f      	mov	r7, r3
 8007458:	d838      	bhi.n	80074cc <__ssputs_r+0x84>
 800745a:	898a      	ldrh	r2, [r1, #12]
 800745c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007460:	d032      	beq.n	80074c8 <__ssputs_r+0x80>
 8007462:	6825      	ldr	r5, [r4, #0]
 8007464:	6909      	ldr	r1, [r1, #16]
 8007466:	3301      	adds	r3, #1
 8007468:	eba5 0901 	sub.w	r9, r5, r1
 800746c:	6965      	ldr	r5, [r4, #20]
 800746e:	444b      	add	r3, r9
 8007470:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007474:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007478:	106d      	asrs	r5, r5, #1
 800747a:	429d      	cmp	r5, r3
 800747c:	bf38      	it	cc
 800747e:	461d      	movcc	r5, r3
 8007480:	0553      	lsls	r3, r2, #21
 8007482:	d531      	bpl.n	80074e8 <__ssputs_r+0xa0>
 8007484:	4629      	mov	r1, r5
 8007486:	f7ff ff85 	bl	8007394 <_malloc_r>
 800748a:	4606      	mov	r6, r0
 800748c:	b950      	cbnz	r0, 80074a4 <__ssputs_r+0x5c>
 800748e:	230c      	movs	r3, #12
 8007490:	f04f 30ff 	mov.w	r0, #4294967295
 8007494:	f8ca 3000 	str.w	r3, [sl]
 8007498:	89a3      	ldrh	r3, [r4, #12]
 800749a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800749e:	81a3      	strh	r3, [r4, #12]
 80074a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a4:	464a      	mov	r2, r9
 80074a6:	6921      	ldr	r1, [r4, #16]
 80074a8:	f7ff fb8a 	bl	8006bc0 <memcpy>
 80074ac:	89a3      	ldrh	r3, [r4, #12]
 80074ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b6:	81a3      	strh	r3, [r4, #12]
 80074b8:	6126      	str	r6, [r4, #16]
 80074ba:	444e      	add	r6, r9
 80074bc:	6026      	str	r6, [r4, #0]
 80074be:	463e      	mov	r6, r7
 80074c0:	6165      	str	r5, [r4, #20]
 80074c2:	eba5 0509 	sub.w	r5, r5, r9
 80074c6:	60a5      	str	r5, [r4, #8]
 80074c8:	42be      	cmp	r6, r7
 80074ca:	d900      	bls.n	80074ce <__ssputs_r+0x86>
 80074cc:	463e      	mov	r6, r7
 80074ce:	4632      	mov	r2, r6
 80074d0:	4641      	mov	r1, r8
 80074d2:	6820      	ldr	r0, [r4, #0]
 80074d4:	f000 f966 	bl	80077a4 <memmove>
 80074d8:	68a3      	ldr	r3, [r4, #8]
 80074da:	6822      	ldr	r2, [r4, #0]
 80074dc:	1b9b      	subs	r3, r3, r6
 80074de:	4432      	add	r2, r6
 80074e0:	2000      	movs	r0, #0
 80074e2:	60a3      	str	r3, [r4, #8]
 80074e4:	6022      	str	r2, [r4, #0]
 80074e6:	e7db      	b.n	80074a0 <__ssputs_r+0x58>
 80074e8:	462a      	mov	r2, r5
 80074ea:	f000 f981 	bl	80077f0 <_realloc_r>
 80074ee:	4606      	mov	r6, r0
 80074f0:	2800      	cmp	r0, #0
 80074f2:	d1e1      	bne.n	80074b8 <__ssputs_r+0x70>
 80074f4:	4650      	mov	r0, sl
 80074f6:	6921      	ldr	r1, [r4, #16]
 80074f8:	f7ff ff00 	bl	80072fc <_free_r>
 80074fc:	e7c7      	b.n	800748e <__ssputs_r+0x46>
	...

08007500 <_svfiprintf_r>:
 8007500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007504:	4698      	mov	r8, r3
 8007506:	898b      	ldrh	r3, [r1, #12]
 8007508:	4607      	mov	r7, r0
 800750a:	061b      	lsls	r3, r3, #24
 800750c:	460d      	mov	r5, r1
 800750e:	4614      	mov	r4, r2
 8007510:	b09d      	sub	sp, #116	; 0x74
 8007512:	d50e      	bpl.n	8007532 <_svfiprintf_r+0x32>
 8007514:	690b      	ldr	r3, [r1, #16]
 8007516:	b963      	cbnz	r3, 8007532 <_svfiprintf_r+0x32>
 8007518:	2140      	movs	r1, #64	; 0x40
 800751a:	f7ff ff3b 	bl	8007394 <_malloc_r>
 800751e:	6028      	str	r0, [r5, #0]
 8007520:	6128      	str	r0, [r5, #16]
 8007522:	b920      	cbnz	r0, 800752e <_svfiprintf_r+0x2e>
 8007524:	230c      	movs	r3, #12
 8007526:	603b      	str	r3, [r7, #0]
 8007528:	f04f 30ff 	mov.w	r0, #4294967295
 800752c:	e0d1      	b.n	80076d2 <_svfiprintf_r+0x1d2>
 800752e:	2340      	movs	r3, #64	; 0x40
 8007530:	616b      	str	r3, [r5, #20]
 8007532:	2300      	movs	r3, #0
 8007534:	9309      	str	r3, [sp, #36]	; 0x24
 8007536:	2320      	movs	r3, #32
 8007538:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800753c:	2330      	movs	r3, #48	; 0x30
 800753e:	f04f 0901 	mov.w	r9, #1
 8007542:	f8cd 800c 	str.w	r8, [sp, #12]
 8007546:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80076ec <_svfiprintf_r+0x1ec>
 800754a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800754e:	4623      	mov	r3, r4
 8007550:	469a      	mov	sl, r3
 8007552:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007556:	b10a      	cbz	r2, 800755c <_svfiprintf_r+0x5c>
 8007558:	2a25      	cmp	r2, #37	; 0x25
 800755a:	d1f9      	bne.n	8007550 <_svfiprintf_r+0x50>
 800755c:	ebba 0b04 	subs.w	fp, sl, r4
 8007560:	d00b      	beq.n	800757a <_svfiprintf_r+0x7a>
 8007562:	465b      	mov	r3, fp
 8007564:	4622      	mov	r2, r4
 8007566:	4629      	mov	r1, r5
 8007568:	4638      	mov	r0, r7
 800756a:	f7ff ff6d 	bl	8007448 <__ssputs_r>
 800756e:	3001      	adds	r0, #1
 8007570:	f000 80aa 	beq.w	80076c8 <_svfiprintf_r+0x1c8>
 8007574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007576:	445a      	add	r2, fp
 8007578:	9209      	str	r2, [sp, #36]	; 0x24
 800757a:	f89a 3000 	ldrb.w	r3, [sl]
 800757e:	2b00      	cmp	r3, #0
 8007580:	f000 80a2 	beq.w	80076c8 <_svfiprintf_r+0x1c8>
 8007584:	2300      	movs	r3, #0
 8007586:	f04f 32ff 	mov.w	r2, #4294967295
 800758a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800758e:	f10a 0a01 	add.w	sl, sl, #1
 8007592:	9304      	str	r3, [sp, #16]
 8007594:	9307      	str	r3, [sp, #28]
 8007596:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800759a:	931a      	str	r3, [sp, #104]	; 0x68
 800759c:	4654      	mov	r4, sl
 800759e:	2205      	movs	r2, #5
 80075a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075a4:	4851      	ldr	r0, [pc, #324]	; (80076ec <_svfiprintf_r+0x1ec>)
 80075a6:	f7ff fafd 	bl	8006ba4 <memchr>
 80075aa:	9a04      	ldr	r2, [sp, #16]
 80075ac:	b9d8      	cbnz	r0, 80075e6 <_svfiprintf_r+0xe6>
 80075ae:	06d0      	lsls	r0, r2, #27
 80075b0:	bf44      	itt	mi
 80075b2:	2320      	movmi	r3, #32
 80075b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075b8:	0711      	lsls	r1, r2, #28
 80075ba:	bf44      	itt	mi
 80075bc:	232b      	movmi	r3, #43	; 0x2b
 80075be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075c2:	f89a 3000 	ldrb.w	r3, [sl]
 80075c6:	2b2a      	cmp	r3, #42	; 0x2a
 80075c8:	d015      	beq.n	80075f6 <_svfiprintf_r+0xf6>
 80075ca:	4654      	mov	r4, sl
 80075cc:	2000      	movs	r0, #0
 80075ce:	f04f 0c0a 	mov.w	ip, #10
 80075d2:	9a07      	ldr	r2, [sp, #28]
 80075d4:	4621      	mov	r1, r4
 80075d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075da:	3b30      	subs	r3, #48	; 0x30
 80075dc:	2b09      	cmp	r3, #9
 80075de:	d94e      	bls.n	800767e <_svfiprintf_r+0x17e>
 80075e0:	b1b0      	cbz	r0, 8007610 <_svfiprintf_r+0x110>
 80075e2:	9207      	str	r2, [sp, #28]
 80075e4:	e014      	b.n	8007610 <_svfiprintf_r+0x110>
 80075e6:	eba0 0308 	sub.w	r3, r0, r8
 80075ea:	fa09 f303 	lsl.w	r3, r9, r3
 80075ee:	4313      	orrs	r3, r2
 80075f0:	46a2      	mov	sl, r4
 80075f2:	9304      	str	r3, [sp, #16]
 80075f4:	e7d2      	b.n	800759c <_svfiprintf_r+0x9c>
 80075f6:	9b03      	ldr	r3, [sp, #12]
 80075f8:	1d19      	adds	r1, r3, #4
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	9103      	str	r1, [sp, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	bfbb      	ittet	lt
 8007602:	425b      	neglt	r3, r3
 8007604:	f042 0202 	orrlt.w	r2, r2, #2
 8007608:	9307      	strge	r3, [sp, #28]
 800760a:	9307      	strlt	r3, [sp, #28]
 800760c:	bfb8      	it	lt
 800760e:	9204      	strlt	r2, [sp, #16]
 8007610:	7823      	ldrb	r3, [r4, #0]
 8007612:	2b2e      	cmp	r3, #46	; 0x2e
 8007614:	d10c      	bne.n	8007630 <_svfiprintf_r+0x130>
 8007616:	7863      	ldrb	r3, [r4, #1]
 8007618:	2b2a      	cmp	r3, #42	; 0x2a
 800761a:	d135      	bne.n	8007688 <_svfiprintf_r+0x188>
 800761c:	9b03      	ldr	r3, [sp, #12]
 800761e:	3402      	adds	r4, #2
 8007620:	1d1a      	adds	r2, r3, #4
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	9203      	str	r2, [sp, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	bfb8      	it	lt
 800762a:	f04f 33ff 	movlt.w	r3, #4294967295
 800762e:	9305      	str	r3, [sp, #20]
 8007630:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80076fc <_svfiprintf_r+0x1fc>
 8007634:	2203      	movs	r2, #3
 8007636:	4650      	mov	r0, sl
 8007638:	7821      	ldrb	r1, [r4, #0]
 800763a:	f7ff fab3 	bl	8006ba4 <memchr>
 800763e:	b140      	cbz	r0, 8007652 <_svfiprintf_r+0x152>
 8007640:	2340      	movs	r3, #64	; 0x40
 8007642:	eba0 000a 	sub.w	r0, r0, sl
 8007646:	fa03 f000 	lsl.w	r0, r3, r0
 800764a:	9b04      	ldr	r3, [sp, #16]
 800764c:	3401      	adds	r4, #1
 800764e:	4303      	orrs	r3, r0
 8007650:	9304      	str	r3, [sp, #16]
 8007652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007656:	2206      	movs	r2, #6
 8007658:	4825      	ldr	r0, [pc, #148]	; (80076f0 <_svfiprintf_r+0x1f0>)
 800765a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800765e:	f7ff faa1 	bl	8006ba4 <memchr>
 8007662:	2800      	cmp	r0, #0
 8007664:	d038      	beq.n	80076d8 <_svfiprintf_r+0x1d8>
 8007666:	4b23      	ldr	r3, [pc, #140]	; (80076f4 <_svfiprintf_r+0x1f4>)
 8007668:	bb1b      	cbnz	r3, 80076b2 <_svfiprintf_r+0x1b2>
 800766a:	9b03      	ldr	r3, [sp, #12]
 800766c:	3307      	adds	r3, #7
 800766e:	f023 0307 	bic.w	r3, r3, #7
 8007672:	3308      	adds	r3, #8
 8007674:	9303      	str	r3, [sp, #12]
 8007676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007678:	4433      	add	r3, r6
 800767a:	9309      	str	r3, [sp, #36]	; 0x24
 800767c:	e767      	b.n	800754e <_svfiprintf_r+0x4e>
 800767e:	460c      	mov	r4, r1
 8007680:	2001      	movs	r0, #1
 8007682:	fb0c 3202 	mla	r2, ip, r2, r3
 8007686:	e7a5      	b.n	80075d4 <_svfiprintf_r+0xd4>
 8007688:	2300      	movs	r3, #0
 800768a:	f04f 0c0a 	mov.w	ip, #10
 800768e:	4619      	mov	r1, r3
 8007690:	3401      	adds	r4, #1
 8007692:	9305      	str	r3, [sp, #20]
 8007694:	4620      	mov	r0, r4
 8007696:	f810 2b01 	ldrb.w	r2, [r0], #1
 800769a:	3a30      	subs	r2, #48	; 0x30
 800769c:	2a09      	cmp	r2, #9
 800769e:	d903      	bls.n	80076a8 <_svfiprintf_r+0x1a8>
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d0c5      	beq.n	8007630 <_svfiprintf_r+0x130>
 80076a4:	9105      	str	r1, [sp, #20]
 80076a6:	e7c3      	b.n	8007630 <_svfiprintf_r+0x130>
 80076a8:	4604      	mov	r4, r0
 80076aa:	2301      	movs	r3, #1
 80076ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80076b0:	e7f0      	b.n	8007694 <_svfiprintf_r+0x194>
 80076b2:	ab03      	add	r3, sp, #12
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	462a      	mov	r2, r5
 80076b8:	4638      	mov	r0, r7
 80076ba:	4b0f      	ldr	r3, [pc, #60]	; (80076f8 <_svfiprintf_r+0x1f8>)
 80076bc:	a904      	add	r1, sp, #16
 80076be:	f7fe f805 	bl	80056cc <_printf_float>
 80076c2:	1c42      	adds	r2, r0, #1
 80076c4:	4606      	mov	r6, r0
 80076c6:	d1d6      	bne.n	8007676 <_svfiprintf_r+0x176>
 80076c8:	89ab      	ldrh	r3, [r5, #12]
 80076ca:	065b      	lsls	r3, r3, #25
 80076cc:	f53f af2c 	bmi.w	8007528 <_svfiprintf_r+0x28>
 80076d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076d2:	b01d      	add	sp, #116	; 0x74
 80076d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d8:	ab03      	add	r3, sp, #12
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	462a      	mov	r2, r5
 80076de:	4638      	mov	r0, r7
 80076e0:	4b05      	ldr	r3, [pc, #20]	; (80076f8 <_svfiprintf_r+0x1f8>)
 80076e2:	a904      	add	r1, sp, #16
 80076e4:	f7fe fa8e 	bl	8005c04 <_printf_i>
 80076e8:	e7eb      	b.n	80076c2 <_svfiprintf_r+0x1c2>
 80076ea:	bf00      	nop
 80076ec:	080085c4 	.word	0x080085c4
 80076f0:	080085ce 	.word	0x080085ce
 80076f4:	080056cd 	.word	0x080056cd
 80076f8:	08007449 	.word	0x08007449
 80076fc:	080085ca 	.word	0x080085ca

08007700 <_sbrk_r>:
 8007700:	b538      	push	{r3, r4, r5, lr}
 8007702:	2300      	movs	r3, #0
 8007704:	4d05      	ldr	r5, [pc, #20]	; (800771c <_sbrk_r+0x1c>)
 8007706:	4604      	mov	r4, r0
 8007708:	4608      	mov	r0, r1
 800770a:	602b      	str	r3, [r5, #0]
 800770c:	f7fa f986 	bl	8001a1c <_sbrk>
 8007710:	1c43      	adds	r3, r0, #1
 8007712:	d102      	bne.n	800771a <_sbrk_r+0x1a>
 8007714:	682b      	ldr	r3, [r5, #0]
 8007716:	b103      	cbz	r3, 800771a <_sbrk_r+0x1a>
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	bd38      	pop	{r3, r4, r5, pc}
 800771c:	20000434 	.word	0x20000434

08007720 <__assert_func>:
 8007720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007722:	4614      	mov	r4, r2
 8007724:	461a      	mov	r2, r3
 8007726:	4b09      	ldr	r3, [pc, #36]	; (800774c <__assert_func+0x2c>)
 8007728:	4605      	mov	r5, r0
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68d8      	ldr	r0, [r3, #12]
 800772e:	b14c      	cbz	r4, 8007744 <__assert_func+0x24>
 8007730:	4b07      	ldr	r3, [pc, #28]	; (8007750 <__assert_func+0x30>)
 8007732:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007736:	9100      	str	r1, [sp, #0]
 8007738:	462b      	mov	r3, r5
 800773a:	4906      	ldr	r1, [pc, #24]	; (8007754 <__assert_func+0x34>)
 800773c:	f000 f80e 	bl	800775c <fiprintf>
 8007740:	f000 faa2 	bl	8007c88 <abort>
 8007744:	4b04      	ldr	r3, [pc, #16]	; (8007758 <__assert_func+0x38>)
 8007746:	461c      	mov	r4, r3
 8007748:	e7f3      	b.n	8007732 <__assert_func+0x12>
 800774a:	bf00      	nop
 800774c:	20000014 	.word	0x20000014
 8007750:	080085d5 	.word	0x080085d5
 8007754:	080085e2 	.word	0x080085e2
 8007758:	08008610 	.word	0x08008610

0800775c <fiprintf>:
 800775c:	b40e      	push	{r1, r2, r3}
 800775e:	b503      	push	{r0, r1, lr}
 8007760:	4601      	mov	r1, r0
 8007762:	ab03      	add	r3, sp, #12
 8007764:	4805      	ldr	r0, [pc, #20]	; (800777c <fiprintf+0x20>)
 8007766:	f853 2b04 	ldr.w	r2, [r3], #4
 800776a:	6800      	ldr	r0, [r0, #0]
 800776c:	9301      	str	r3, [sp, #4]
 800776e:	f000 f88d 	bl	800788c <_vfiprintf_r>
 8007772:	b002      	add	sp, #8
 8007774:	f85d eb04 	ldr.w	lr, [sp], #4
 8007778:	b003      	add	sp, #12
 800777a:	4770      	bx	lr
 800777c:	20000014 	.word	0x20000014

08007780 <__ascii_mbtowc>:
 8007780:	b082      	sub	sp, #8
 8007782:	b901      	cbnz	r1, 8007786 <__ascii_mbtowc+0x6>
 8007784:	a901      	add	r1, sp, #4
 8007786:	b142      	cbz	r2, 800779a <__ascii_mbtowc+0x1a>
 8007788:	b14b      	cbz	r3, 800779e <__ascii_mbtowc+0x1e>
 800778a:	7813      	ldrb	r3, [r2, #0]
 800778c:	600b      	str	r3, [r1, #0]
 800778e:	7812      	ldrb	r2, [r2, #0]
 8007790:	1e10      	subs	r0, r2, #0
 8007792:	bf18      	it	ne
 8007794:	2001      	movne	r0, #1
 8007796:	b002      	add	sp, #8
 8007798:	4770      	bx	lr
 800779a:	4610      	mov	r0, r2
 800779c:	e7fb      	b.n	8007796 <__ascii_mbtowc+0x16>
 800779e:	f06f 0001 	mvn.w	r0, #1
 80077a2:	e7f8      	b.n	8007796 <__ascii_mbtowc+0x16>

080077a4 <memmove>:
 80077a4:	4288      	cmp	r0, r1
 80077a6:	b510      	push	{r4, lr}
 80077a8:	eb01 0402 	add.w	r4, r1, r2
 80077ac:	d902      	bls.n	80077b4 <memmove+0x10>
 80077ae:	4284      	cmp	r4, r0
 80077b0:	4623      	mov	r3, r4
 80077b2:	d807      	bhi.n	80077c4 <memmove+0x20>
 80077b4:	1e43      	subs	r3, r0, #1
 80077b6:	42a1      	cmp	r1, r4
 80077b8:	d008      	beq.n	80077cc <memmove+0x28>
 80077ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077c2:	e7f8      	b.n	80077b6 <memmove+0x12>
 80077c4:	4601      	mov	r1, r0
 80077c6:	4402      	add	r2, r0
 80077c8:	428a      	cmp	r2, r1
 80077ca:	d100      	bne.n	80077ce <memmove+0x2a>
 80077cc:	bd10      	pop	{r4, pc}
 80077ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077d6:	e7f7      	b.n	80077c8 <memmove+0x24>

080077d8 <__malloc_lock>:
 80077d8:	4801      	ldr	r0, [pc, #4]	; (80077e0 <__malloc_lock+0x8>)
 80077da:	f000 bc15 	b.w	8008008 <__retarget_lock_acquire_recursive>
 80077de:	bf00      	nop
 80077e0:	2000043c 	.word	0x2000043c

080077e4 <__malloc_unlock>:
 80077e4:	4801      	ldr	r0, [pc, #4]	; (80077ec <__malloc_unlock+0x8>)
 80077e6:	f000 bc10 	b.w	800800a <__retarget_lock_release_recursive>
 80077ea:	bf00      	nop
 80077ec:	2000043c 	.word	0x2000043c

080077f0 <_realloc_r>:
 80077f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f2:	4607      	mov	r7, r0
 80077f4:	4614      	mov	r4, r2
 80077f6:	460e      	mov	r6, r1
 80077f8:	b921      	cbnz	r1, 8007804 <_realloc_r+0x14>
 80077fa:	4611      	mov	r1, r2
 80077fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007800:	f7ff bdc8 	b.w	8007394 <_malloc_r>
 8007804:	b922      	cbnz	r2, 8007810 <_realloc_r+0x20>
 8007806:	f7ff fd79 	bl	80072fc <_free_r>
 800780a:	4625      	mov	r5, r4
 800780c:	4628      	mov	r0, r5
 800780e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007810:	f000 fc60 	bl	80080d4 <_malloc_usable_size_r>
 8007814:	42a0      	cmp	r0, r4
 8007816:	d20f      	bcs.n	8007838 <_realloc_r+0x48>
 8007818:	4621      	mov	r1, r4
 800781a:	4638      	mov	r0, r7
 800781c:	f7ff fdba 	bl	8007394 <_malloc_r>
 8007820:	4605      	mov	r5, r0
 8007822:	2800      	cmp	r0, #0
 8007824:	d0f2      	beq.n	800780c <_realloc_r+0x1c>
 8007826:	4631      	mov	r1, r6
 8007828:	4622      	mov	r2, r4
 800782a:	f7ff f9c9 	bl	8006bc0 <memcpy>
 800782e:	4631      	mov	r1, r6
 8007830:	4638      	mov	r0, r7
 8007832:	f7ff fd63 	bl	80072fc <_free_r>
 8007836:	e7e9      	b.n	800780c <_realloc_r+0x1c>
 8007838:	4635      	mov	r5, r6
 800783a:	e7e7      	b.n	800780c <_realloc_r+0x1c>

0800783c <__sfputc_r>:
 800783c:	6893      	ldr	r3, [r2, #8]
 800783e:	b410      	push	{r4}
 8007840:	3b01      	subs	r3, #1
 8007842:	2b00      	cmp	r3, #0
 8007844:	6093      	str	r3, [r2, #8]
 8007846:	da07      	bge.n	8007858 <__sfputc_r+0x1c>
 8007848:	6994      	ldr	r4, [r2, #24]
 800784a:	42a3      	cmp	r3, r4
 800784c:	db01      	blt.n	8007852 <__sfputc_r+0x16>
 800784e:	290a      	cmp	r1, #10
 8007850:	d102      	bne.n	8007858 <__sfputc_r+0x1c>
 8007852:	bc10      	pop	{r4}
 8007854:	f000 b94a 	b.w	8007aec <__swbuf_r>
 8007858:	6813      	ldr	r3, [r2, #0]
 800785a:	1c58      	adds	r0, r3, #1
 800785c:	6010      	str	r0, [r2, #0]
 800785e:	7019      	strb	r1, [r3, #0]
 8007860:	4608      	mov	r0, r1
 8007862:	bc10      	pop	{r4}
 8007864:	4770      	bx	lr

08007866 <__sfputs_r>:
 8007866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007868:	4606      	mov	r6, r0
 800786a:	460f      	mov	r7, r1
 800786c:	4614      	mov	r4, r2
 800786e:	18d5      	adds	r5, r2, r3
 8007870:	42ac      	cmp	r4, r5
 8007872:	d101      	bne.n	8007878 <__sfputs_r+0x12>
 8007874:	2000      	movs	r0, #0
 8007876:	e007      	b.n	8007888 <__sfputs_r+0x22>
 8007878:	463a      	mov	r2, r7
 800787a:	4630      	mov	r0, r6
 800787c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007880:	f7ff ffdc 	bl	800783c <__sfputc_r>
 8007884:	1c43      	adds	r3, r0, #1
 8007886:	d1f3      	bne.n	8007870 <__sfputs_r+0xa>
 8007888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800788c <_vfiprintf_r>:
 800788c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007890:	460d      	mov	r5, r1
 8007892:	4614      	mov	r4, r2
 8007894:	4698      	mov	r8, r3
 8007896:	4606      	mov	r6, r0
 8007898:	b09d      	sub	sp, #116	; 0x74
 800789a:	b118      	cbz	r0, 80078a4 <_vfiprintf_r+0x18>
 800789c:	6983      	ldr	r3, [r0, #24]
 800789e:	b90b      	cbnz	r3, 80078a4 <_vfiprintf_r+0x18>
 80078a0:	f000 fb14 	bl	8007ecc <__sinit>
 80078a4:	4b89      	ldr	r3, [pc, #548]	; (8007acc <_vfiprintf_r+0x240>)
 80078a6:	429d      	cmp	r5, r3
 80078a8:	d11b      	bne.n	80078e2 <_vfiprintf_r+0x56>
 80078aa:	6875      	ldr	r5, [r6, #4]
 80078ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078ae:	07d9      	lsls	r1, r3, #31
 80078b0:	d405      	bmi.n	80078be <_vfiprintf_r+0x32>
 80078b2:	89ab      	ldrh	r3, [r5, #12]
 80078b4:	059a      	lsls	r2, r3, #22
 80078b6:	d402      	bmi.n	80078be <_vfiprintf_r+0x32>
 80078b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078ba:	f000 fba5 	bl	8008008 <__retarget_lock_acquire_recursive>
 80078be:	89ab      	ldrh	r3, [r5, #12]
 80078c0:	071b      	lsls	r3, r3, #28
 80078c2:	d501      	bpl.n	80078c8 <_vfiprintf_r+0x3c>
 80078c4:	692b      	ldr	r3, [r5, #16]
 80078c6:	b9eb      	cbnz	r3, 8007904 <_vfiprintf_r+0x78>
 80078c8:	4629      	mov	r1, r5
 80078ca:	4630      	mov	r0, r6
 80078cc:	f000 f96e 	bl	8007bac <__swsetup_r>
 80078d0:	b1c0      	cbz	r0, 8007904 <_vfiprintf_r+0x78>
 80078d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078d4:	07dc      	lsls	r4, r3, #31
 80078d6:	d50e      	bpl.n	80078f6 <_vfiprintf_r+0x6a>
 80078d8:	f04f 30ff 	mov.w	r0, #4294967295
 80078dc:	b01d      	add	sp, #116	; 0x74
 80078de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e2:	4b7b      	ldr	r3, [pc, #492]	; (8007ad0 <_vfiprintf_r+0x244>)
 80078e4:	429d      	cmp	r5, r3
 80078e6:	d101      	bne.n	80078ec <_vfiprintf_r+0x60>
 80078e8:	68b5      	ldr	r5, [r6, #8]
 80078ea:	e7df      	b.n	80078ac <_vfiprintf_r+0x20>
 80078ec:	4b79      	ldr	r3, [pc, #484]	; (8007ad4 <_vfiprintf_r+0x248>)
 80078ee:	429d      	cmp	r5, r3
 80078f0:	bf08      	it	eq
 80078f2:	68f5      	ldreq	r5, [r6, #12]
 80078f4:	e7da      	b.n	80078ac <_vfiprintf_r+0x20>
 80078f6:	89ab      	ldrh	r3, [r5, #12]
 80078f8:	0598      	lsls	r0, r3, #22
 80078fa:	d4ed      	bmi.n	80078d8 <_vfiprintf_r+0x4c>
 80078fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078fe:	f000 fb84 	bl	800800a <__retarget_lock_release_recursive>
 8007902:	e7e9      	b.n	80078d8 <_vfiprintf_r+0x4c>
 8007904:	2300      	movs	r3, #0
 8007906:	9309      	str	r3, [sp, #36]	; 0x24
 8007908:	2320      	movs	r3, #32
 800790a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800790e:	2330      	movs	r3, #48	; 0x30
 8007910:	f04f 0901 	mov.w	r9, #1
 8007914:	f8cd 800c 	str.w	r8, [sp, #12]
 8007918:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007ad8 <_vfiprintf_r+0x24c>
 800791c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007920:	4623      	mov	r3, r4
 8007922:	469a      	mov	sl, r3
 8007924:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007928:	b10a      	cbz	r2, 800792e <_vfiprintf_r+0xa2>
 800792a:	2a25      	cmp	r2, #37	; 0x25
 800792c:	d1f9      	bne.n	8007922 <_vfiprintf_r+0x96>
 800792e:	ebba 0b04 	subs.w	fp, sl, r4
 8007932:	d00b      	beq.n	800794c <_vfiprintf_r+0xc0>
 8007934:	465b      	mov	r3, fp
 8007936:	4622      	mov	r2, r4
 8007938:	4629      	mov	r1, r5
 800793a:	4630      	mov	r0, r6
 800793c:	f7ff ff93 	bl	8007866 <__sfputs_r>
 8007940:	3001      	adds	r0, #1
 8007942:	f000 80aa 	beq.w	8007a9a <_vfiprintf_r+0x20e>
 8007946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007948:	445a      	add	r2, fp
 800794a:	9209      	str	r2, [sp, #36]	; 0x24
 800794c:	f89a 3000 	ldrb.w	r3, [sl]
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 80a2 	beq.w	8007a9a <_vfiprintf_r+0x20e>
 8007956:	2300      	movs	r3, #0
 8007958:	f04f 32ff 	mov.w	r2, #4294967295
 800795c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007960:	f10a 0a01 	add.w	sl, sl, #1
 8007964:	9304      	str	r3, [sp, #16]
 8007966:	9307      	str	r3, [sp, #28]
 8007968:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800796c:	931a      	str	r3, [sp, #104]	; 0x68
 800796e:	4654      	mov	r4, sl
 8007970:	2205      	movs	r2, #5
 8007972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007976:	4858      	ldr	r0, [pc, #352]	; (8007ad8 <_vfiprintf_r+0x24c>)
 8007978:	f7ff f914 	bl	8006ba4 <memchr>
 800797c:	9a04      	ldr	r2, [sp, #16]
 800797e:	b9d8      	cbnz	r0, 80079b8 <_vfiprintf_r+0x12c>
 8007980:	06d1      	lsls	r1, r2, #27
 8007982:	bf44      	itt	mi
 8007984:	2320      	movmi	r3, #32
 8007986:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800798a:	0713      	lsls	r3, r2, #28
 800798c:	bf44      	itt	mi
 800798e:	232b      	movmi	r3, #43	; 0x2b
 8007990:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007994:	f89a 3000 	ldrb.w	r3, [sl]
 8007998:	2b2a      	cmp	r3, #42	; 0x2a
 800799a:	d015      	beq.n	80079c8 <_vfiprintf_r+0x13c>
 800799c:	4654      	mov	r4, sl
 800799e:	2000      	movs	r0, #0
 80079a0:	f04f 0c0a 	mov.w	ip, #10
 80079a4:	9a07      	ldr	r2, [sp, #28]
 80079a6:	4621      	mov	r1, r4
 80079a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079ac:	3b30      	subs	r3, #48	; 0x30
 80079ae:	2b09      	cmp	r3, #9
 80079b0:	d94e      	bls.n	8007a50 <_vfiprintf_r+0x1c4>
 80079b2:	b1b0      	cbz	r0, 80079e2 <_vfiprintf_r+0x156>
 80079b4:	9207      	str	r2, [sp, #28]
 80079b6:	e014      	b.n	80079e2 <_vfiprintf_r+0x156>
 80079b8:	eba0 0308 	sub.w	r3, r0, r8
 80079bc:	fa09 f303 	lsl.w	r3, r9, r3
 80079c0:	4313      	orrs	r3, r2
 80079c2:	46a2      	mov	sl, r4
 80079c4:	9304      	str	r3, [sp, #16]
 80079c6:	e7d2      	b.n	800796e <_vfiprintf_r+0xe2>
 80079c8:	9b03      	ldr	r3, [sp, #12]
 80079ca:	1d19      	adds	r1, r3, #4
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	9103      	str	r1, [sp, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	bfbb      	ittet	lt
 80079d4:	425b      	neglt	r3, r3
 80079d6:	f042 0202 	orrlt.w	r2, r2, #2
 80079da:	9307      	strge	r3, [sp, #28]
 80079dc:	9307      	strlt	r3, [sp, #28]
 80079de:	bfb8      	it	lt
 80079e0:	9204      	strlt	r2, [sp, #16]
 80079e2:	7823      	ldrb	r3, [r4, #0]
 80079e4:	2b2e      	cmp	r3, #46	; 0x2e
 80079e6:	d10c      	bne.n	8007a02 <_vfiprintf_r+0x176>
 80079e8:	7863      	ldrb	r3, [r4, #1]
 80079ea:	2b2a      	cmp	r3, #42	; 0x2a
 80079ec:	d135      	bne.n	8007a5a <_vfiprintf_r+0x1ce>
 80079ee:	9b03      	ldr	r3, [sp, #12]
 80079f0:	3402      	adds	r4, #2
 80079f2:	1d1a      	adds	r2, r3, #4
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	9203      	str	r2, [sp, #12]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	bfb8      	it	lt
 80079fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a00:	9305      	str	r3, [sp, #20]
 8007a02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007ae8 <_vfiprintf_r+0x25c>
 8007a06:	2203      	movs	r2, #3
 8007a08:	4650      	mov	r0, sl
 8007a0a:	7821      	ldrb	r1, [r4, #0]
 8007a0c:	f7ff f8ca 	bl	8006ba4 <memchr>
 8007a10:	b140      	cbz	r0, 8007a24 <_vfiprintf_r+0x198>
 8007a12:	2340      	movs	r3, #64	; 0x40
 8007a14:	eba0 000a 	sub.w	r0, r0, sl
 8007a18:	fa03 f000 	lsl.w	r0, r3, r0
 8007a1c:	9b04      	ldr	r3, [sp, #16]
 8007a1e:	3401      	adds	r4, #1
 8007a20:	4303      	orrs	r3, r0
 8007a22:	9304      	str	r3, [sp, #16]
 8007a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a28:	2206      	movs	r2, #6
 8007a2a:	482c      	ldr	r0, [pc, #176]	; (8007adc <_vfiprintf_r+0x250>)
 8007a2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a30:	f7ff f8b8 	bl	8006ba4 <memchr>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d03f      	beq.n	8007ab8 <_vfiprintf_r+0x22c>
 8007a38:	4b29      	ldr	r3, [pc, #164]	; (8007ae0 <_vfiprintf_r+0x254>)
 8007a3a:	bb1b      	cbnz	r3, 8007a84 <_vfiprintf_r+0x1f8>
 8007a3c:	9b03      	ldr	r3, [sp, #12]
 8007a3e:	3307      	adds	r3, #7
 8007a40:	f023 0307 	bic.w	r3, r3, #7
 8007a44:	3308      	adds	r3, #8
 8007a46:	9303      	str	r3, [sp, #12]
 8007a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a4a:	443b      	add	r3, r7
 8007a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a4e:	e767      	b.n	8007920 <_vfiprintf_r+0x94>
 8007a50:	460c      	mov	r4, r1
 8007a52:	2001      	movs	r0, #1
 8007a54:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a58:	e7a5      	b.n	80079a6 <_vfiprintf_r+0x11a>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f04f 0c0a 	mov.w	ip, #10
 8007a60:	4619      	mov	r1, r3
 8007a62:	3401      	adds	r4, #1
 8007a64:	9305      	str	r3, [sp, #20]
 8007a66:	4620      	mov	r0, r4
 8007a68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a6c:	3a30      	subs	r2, #48	; 0x30
 8007a6e:	2a09      	cmp	r2, #9
 8007a70:	d903      	bls.n	8007a7a <_vfiprintf_r+0x1ee>
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d0c5      	beq.n	8007a02 <_vfiprintf_r+0x176>
 8007a76:	9105      	str	r1, [sp, #20]
 8007a78:	e7c3      	b.n	8007a02 <_vfiprintf_r+0x176>
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a82:	e7f0      	b.n	8007a66 <_vfiprintf_r+0x1da>
 8007a84:	ab03      	add	r3, sp, #12
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	462a      	mov	r2, r5
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	4b15      	ldr	r3, [pc, #84]	; (8007ae4 <_vfiprintf_r+0x258>)
 8007a8e:	a904      	add	r1, sp, #16
 8007a90:	f7fd fe1c 	bl	80056cc <_printf_float>
 8007a94:	4607      	mov	r7, r0
 8007a96:	1c78      	adds	r0, r7, #1
 8007a98:	d1d6      	bne.n	8007a48 <_vfiprintf_r+0x1bc>
 8007a9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a9c:	07d9      	lsls	r1, r3, #31
 8007a9e:	d405      	bmi.n	8007aac <_vfiprintf_r+0x220>
 8007aa0:	89ab      	ldrh	r3, [r5, #12]
 8007aa2:	059a      	lsls	r2, r3, #22
 8007aa4:	d402      	bmi.n	8007aac <_vfiprintf_r+0x220>
 8007aa6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aa8:	f000 faaf 	bl	800800a <__retarget_lock_release_recursive>
 8007aac:	89ab      	ldrh	r3, [r5, #12]
 8007aae:	065b      	lsls	r3, r3, #25
 8007ab0:	f53f af12 	bmi.w	80078d8 <_vfiprintf_r+0x4c>
 8007ab4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ab6:	e711      	b.n	80078dc <_vfiprintf_r+0x50>
 8007ab8:	ab03      	add	r3, sp, #12
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	462a      	mov	r2, r5
 8007abe:	4630      	mov	r0, r6
 8007ac0:	4b08      	ldr	r3, [pc, #32]	; (8007ae4 <_vfiprintf_r+0x258>)
 8007ac2:	a904      	add	r1, sp, #16
 8007ac4:	f7fe f89e 	bl	8005c04 <_printf_i>
 8007ac8:	e7e4      	b.n	8007a94 <_vfiprintf_r+0x208>
 8007aca:	bf00      	nop
 8007acc:	0800873c 	.word	0x0800873c
 8007ad0:	0800875c 	.word	0x0800875c
 8007ad4:	0800871c 	.word	0x0800871c
 8007ad8:	080085c4 	.word	0x080085c4
 8007adc:	080085ce 	.word	0x080085ce
 8007ae0:	080056cd 	.word	0x080056cd
 8007ae4:	08007867 	.word	0x08007867
 8007ae8:	080085ca 	.word	0x080085ca

08007aec <__swbuf_r>:
 8007aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aee:	460e      	mov	r6, r1
 8007af0:	4614      	mov	r4, r2
 8007af2:	4605      	mov	r5, r0
 8007af4:	b118      	cbz	r0, 8007afe <__swbuf_r+0x12>
 8007af6:	6983      	ldr	r3, [r0, #24]
 8007af8:	b90b      	cbnz	r3, 8007afe <__swbuf_r+0x12>
 8007afa:	f000 f9e7 	bl	8007ecc <__sinit>
 8007afe:	4b21      	ldr	r3, [pc, #132]	; (8007b84 <__swbuf_r+0x98>)
 8007b00:	429c      	cmp	r4, r3
 8007b02:	d12b      	bne.n	8007b5c <__swbuf_r+0x70>
 8007b04:	686c      	ldr	r4, [r5, #4]
 8007b06:	69a3      	ldr	r3, [r4, #24]
 8007b08:	60a3      	str	r3, [r4, #8]
 8007b0a:	89a3      	ldrh	r3, [r4, #12]
 8007b0c:	071a      	lsls	r2, r3, #28
 8007b0e:	d52f      	bpl.n	8007b70 <__swbuf_r+0x84>
 8007b10:	6923      	ldr	r3, [r4, #16]
 8007b12:	b36b      	cbz	r3, 8007b70 <__swbuf_r+0x84>
 8007b14:	6923      	ldr	r3, [r4, #16]
 8007b16:	6820      	ldr	r0, [r4, #0]
 8007b18:	b2f6      	uxtb	r6, r6
 8007b1a:	1ac0      	subs	r0, r0, r3
 8007b1c:	6963      	ldr	r3, [r4, #20]
 8007b1e:	4637      	mov	r7, r6
 8007b20:	4283      	cmp	r3, r0
 8007b22:	dc04      	bgt.n	8007b2e <__swbuf_r+0x42>
 8007b24:	4621      	mov	r1, r4
 8007b26:	4628      	mov	r0, r5
 8007b28:	f000 f93c 	bl	8007da4 <_fflush_r>
 8007b2c:	bb30      	cbnz	r0, 8007b7c <__swbuf_r+0x90>
 8007b2e:	68a3      	ldr	r3, [r4, #8]
 8007b30:	3001      	adds	r0, #1
 8007b32:	3b01      	subs	r3, #1
 8007b34:	60a3      	str	r3, [r4, #8]
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	1c5a      	adds	r2, r3, #1
 8007b3a:	6022      	str	r2, [r4, #0]
 8007b3c:	701e      	strb	r6, [r3, #0]
 8007b3e:	6963      	ldr	r3, [r4, #20]
 8007b40:	4283      	cmp	r3, r0
 8007b42:	d004      	beq.n	8007b4e <__swbuf_r+0x62>
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	07db      	lsls	r3, r3, #31
 8007b48:	d506      	bpl.n	8007b58 <__swbuf_r+0x6c>
 8007b4a:	2e0a      	cmp	r6, #10
 8007b4c:	d104      	bne.n	8007b58 <__swbuf_r+0x6c>
 8007b4e:	4621      	mov	r1, r4
 8007b50:	4628      	mov	r0, r5
 8007b52:	f000 f927 	bl	8007da4 <_fflush_r>
 8007b56:	b988      	cbnz	r0, 8007b7c <__swbuf_r+0x90>
 8007b58:	4638      	mov	r0, r7
 8007b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b5c:	4b0a      	ldr	r3, [pc, #40]	; (8007b88 <__swbuf_r+0x9c>)
 8007b5e:	429c      	cmp	r4, r3
 8007b60:	d101      	bne.n	8007b66 <__swbuf_r+0x7a>
 8007b62:	68ac      	ldr	r4, [r5, #8]
 8007b64:	e7cf      	b.n	8007b06 <__swbuf_r+0x1a>
 8007b66:	4b09      	ldr	r3, [pc, #36]	; (8007b8c <__swbuf_r+0xa0>)
 8007b68:	429c      	cmp	r4, r3
 8007b6a:	bf08      	it	eq
 8007b6c:	68ec      	ldreq	r4, [r5, #12]
 8007b6e:	e7ca      	b.n	8007b06 <__swbuf_r+0x1a>
 8007b70:	4621      	mov	r1, r4
 8007b72:	4628      	mov	r0, r5
 8007b74:	f000 f81a 	bl	8007bac <__swsetup_r>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	d0cb      	beq.n	8007b14 <__swbuf_r+0x28>
 8007b7c:	f04f 37ff 	mov.w	r7, #4294967295
 8007b80:	e7ea      	b.n	8007b58 <__swbuf_r+0x6c>
 8007b82:	bf00      	nop
 8007b84:	0800873c 	.word	0x0800873c
 8007b88:	0800875c 	.word	0x0800875c
 8007b8c:	0800871c 	.word	0x0800871c

08007b90 <__ascii_wctomb>:
 8007b90:	4603      	mov	r3, r0
 8007b92:	4608      	mov	r0, r1
 8007b94:	b141      	cbz	r1, 8007ba8 <__ascii_wctomb+0x18>
 8007b96:	2aff      	cmp	r2, #255	; 0xff
 8007b98:	d904      	bls.n	8007ba4 <__ascii_wctomb+0x14>
 8007b9a:	228a      	movs	r2, #138	; 0x8a
 8007b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba0:	601a      	str	r2, [r3, #0]
 8007ba2:	4770      	bx	lr
 8007ba4:	2001      	movs	r0, #1
 8007ba6:	700a      	strb	r2, [r1, #0]
 8007ba8:	4770      	bx	lr
	...

08007bac <__swsetup_r>:
 8007bac:	4b32      	ldr	r3, [pc, #200]	; (8007c78 <__swsetup_r+0xcc>)
 8007bae:	b570      	push	{r4, r5, r6, lr}
 8007bb0:	681d      	ldr	r5, [r3, #0]
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	b125      	cbz	r5, 8007bc2 <__swsetup_r+0x16>
 8007bb8:	69ab      	ldr	r3, [r5, #24]
 8007bba:	b913      	cbnz	r3, 8007bc2 <__swsetup_r+0x16>
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	f000 f985 	bl	8007ecc <__sinit>
 8007bc2:	4b2e      	ldr	r3, [pc, #184]	; (8007c7c <__swsetup_r+0xd0>)
 8007bc4:	429c      	cmp	r4, r3
 8007bc6:	d10f      	bne.n	8007be8 <__swsetup_r+0x3c>
 8007bc8:	686c      	ldr	r4, [r5, #4]
 8007bca:	89a3      	ldrh	r3, [r4, #12]
 8007bcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bd0:	0719      	lsls	r1, r3, #28
 8007bd2:	d42c      	bmi.n	8007c2e <__swsetup_r+0x82>
 8007bd4:	06dd      	lsls	r5, r3, #27
 8007bd6:	d411      	bmi.n	8007bfc <__swsetup_r+0x50>
 8007bd8:	2309      	movs	r3, #9
 8007bda:	6033      	str	r3, [r6, #0]
 8007bdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007be0:	f04f 30ff 	mov.w	r0, #4294967295
 8007be4:	81a3      	strh	r3, [r4, #12]
 8007be6:	e03e      	b.n	8007c66 <__swsetup_r+0xba>
 8007be8:	4b25      	ldr	r3, [pc, #148]	; (8007c80 <__swsetup_r+0xd4>)
 8007bea:	429c      	cmp	r4, r3
 8007bec:	d101      	bne.n	8007bf2 <__swsetup_r+0x46>
 8007bee:	68ac      	ldr	r4, [r5, #8]
 8007bf0:	e7eb      	b.n	8007bca <__swsetup_r+0x1e>
 8007bf2:	4b24      	ldr	r3, [pc, #144]	; (8007c84 <__swsetup_r+0xd8>)
 8007bf4:	429c      	cmp	r4, r3
 8007bf6:	bf08      	it	eq
 8007bf8:	68ec      	ldreq	r4, [r5, #12]
 8007bfa:	e7e6      	b.n	8007bca <__swsetup_r+0x1e>
 8007bfc:	0758      	lsls	r0, r3, #29
 8007bfe:	d512      	bpl.n	8007c26 <__swsetup_r+0x7a>
 8007c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c02:	b141      	cbz	r1, 8007c16 <__swsetup_r+0x6a>
 8007c04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c08:	4299      	cmp	r1, r3
 8007c0a:	d002      	beq.n	8007c12 <__swsetup_r+0x66>
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	f7ff fb75 	bl	80072fc <_free_r>
 8007c12:	2300      	movs	r3, #0
 8007c14:	6363      	str	r3, [r4, #52]	; 0x34
 8007c16:	89a3      	ldrh	r3, [r4, #12]
 8007c18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c1c:	81a3      	strh	r3, [r4, #12]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	6063      	str	r3, [r4, #4]
 8007c22:	6923      	ldr	r3, [r4, #16]
 8007c24:	6023      	str	r3, [r4, #0]
 8007c26:	89a3      	ldrh	r3, [r4, #12]
 8007c28:	f043 0308 	orr.w	r3, r3, #8
 8007c2c:	81a3      	strh	r3, [r4, #12]
 8007c2e:	6923      	ldr	r3, [r4, #16]
 8007c30:	b94b      	cbnz	r3, 8007c46 <__swsetup_r+0x9a>
 8007c32:	89a3      	ldrh	r3, [r4, #12]
 8007c34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c3c:	d003      	beq.n	8007c46 <__swsetup_r+0x9a>
 8007c3e:	4621      	mov	r1, r4
 8007c40:	4630      	mov	r0, r6
 8007c42:	f000 fa07 	bl	8008054 <__smakebuf_r>
 8007c46:	89a0      	ldrh	r0, [r4, #12]
 8007c48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c4c:	f010 0301 	ands.w	r3, r0, #1
 8007c50:	d00a      	beq.n	8007c68 <__swsetup_r+0xbc>
 8007c52:	2300      	movs	r3, #0
 8007c54:	60a3      	str	r3, [r4, #8]
 8007c56:	6963      	ldr	r3, [r4, #20]
 8007c58:	425b      	negs	r3, r3
 8007c5a:	61a3      	str	r3, [r4, #24]
 8007c5c:	6923      	ldr	r3, [r4, #16]
 8007c5e:	b943      	cbnz	r3, 8007c72 <__swsetup_r+0xc6>
 8007c60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c64:	d1ba      	bne.n	8007bdc <__swsetup_r+0x30>
 8007c66:	bd70      	pop	{r4, r5, r6, pc}
 8007c68:	0781      	lsls	r1, r0, #30
 8007c6a:	bf58      	it	pl
 8007c6c:	6963      	ldrpl	r3, [r4, #20]
 8007c6e:	60a3      	str	r3, [r4, #8]
 8007c70:	e7f4      	b.n	8007c5c <__swsetup_r+0xb0>
 8007c72:	2000      	movs	r0, #0
 8007c74:	e7f7      	b.n	8007c66 <__swsetup_r+0xba>
 8007c76:	bf00      	nop
 8007c78:	20000014 	.word	0x20000014
 8007c7c:	0800873c 	.word	0x0800873c
 8007c80:	0800875c 	.word	0x0800875c
 8007c84:	0800871c 	.word	0x0800871c

08007c88 <abort>:
 8007c88:	2006      	movs	r0, #6
 8007c8a:	b508      	push	{r3, lr}
 8007c8c:	f000 fa52 	bl	8008134 <raise>
 8007c90:	2001      	movs	r0, #1
 8007c92:	f7f9 fe50 	bl	8001936 <_exit>
	...

08007c98 <__sflush_r>:
 8007c98:	898a      	ldrh	r2, [r1, #12]
 8007c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9e:	4605      	mov	r5, r0
 8007ca0:	0710      	lsls	r0, r2, #28
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	d458      	bmi.n	8007d58 <__sflush_r+0xc0>
 8007ca6:	684b      	ldr	r3, [r1, #4]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	dc05      	bgt.n	8007cb8 <__sflush_r+0x20>
 8007cac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	dc02      	bgt.n	8007cb8 <__sflush_r+0x20>
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cba:	2e00      	cmp	r6, #0
 8007cbc:	d0f9      	beq.n	8007cb2 <__sflush_r+0x1a>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007cc4:	682f      	ldr	r7, [r5, #0]
 8007cc6:	602b      	str	r3, [r5, #0]
 8007cc8:	d032      	beq.n	8007d30 <__sflush_r+0x98>
 8007cca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ccc:	89a3      	ldrh	r3, [r4, #12]
 8007cce:	075a      	lsls	r2, r3, #29
 8007cd0:	d505      	bpl.n	8007cde <__sflush_r+0x46>
 8007cd2:	6863      	ldr	r3, [r4, #4]
 8007cd4:	1ac0      	subs	r0, r0, r3
 8007cd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cd8:	b10b      	cbz	r3, 8007cde <__sflush_r+0x46>
 8007cda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cdc:	1ac0      	subs	r0, r0, r3
 8007cde:	2300      	movs	r3, #0
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	6a21      	ldr	r1, [r4, #32]
 8007ce8:	47b0      	blx	r6
 8007cea:	1c43      	adds	r3, r0, #1
 8007cec:	89a3      	ldrh	r3, [r4, #12]
 8007cee:	d106      	bne.n	8007cfe <__sflush_r+0x66>
 8007cf0:	6829      	ldr	r1, [r5, #0]
 8007cf2:	291d      	cmp	r1, #29
 8007cf4:	d82c      	bhi.n	8007d50 <__sflush_r+0xb8>
 8007cf6:	4a2a      	ldr	r2, [pc, #168]	; (8007da0 <__sflush_r+0x108>)
 8007cf8:	40ca      	lsrs	r2, r1
 8007cfa:	07d6      	lsls	r6, r2, #31
 8007cfc:	d528      	bpl.n	8007d50 <__sflush_r+0xb8>
 8007cfe:	2200      	movs	r2, #0
 8007d00:	6062      	str	r2, [r4, #4]
 8007d02:	6922      	ldr	r2, [r4, #16]
 8007d04:	04d9      	lsls	r1, r3, #19
 8007d06:	6022      	str	r2, [r4, #0]
 8007d08:	d504      	bpl.n	8007d14 <__sflush_r+0x7c>
 8007d0a:	1c42      	adds	r2, r0, #1
 8007d0c:	d101      	bne.n	8007d12 <__sflush_r+0x7a>
 8007d0e:	682b      	ldr	r3, [r5, #0]
 8007d10:	b903      	cbnz	r3, 8007d14 <__sflush_r+0x7c>
 8007d12:	6560      	str	r0, [r4, #84]	; 0x54
 8007d14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d16:	602f      	str	r7, [r5, #0]
 8007d18:	2900      	cmp	r1, #0
 8007d1a:	d0ca      	beq.n	8007cb2 <__sflush_r+0x1a>
 8007d1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d20:	4299      	cmp	r1, r3
 8007d22:	d002      	beq.n	8007d2a <__sflush_r+0x92>
 8007d24:	4628      	mov	r0, r5
 8007d26:	f7ff fae9 	bl	80072fc <_free_r>
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	6360      	str	r0, [r4, #52]	; 0x34
 8007d2e:	e7c1      	b.n	8007cb4 <__sflush_r+0x1c>
 8007d30:	6a21      	ldr	r1, [r4, #32]
 8007d32:	2301      	movs	r3, #1
 8007d34:	4628      	mov	r0, r5
 8007d36:	47b0      	blx	r6
 8007d38:	1c41      	adds	r1, r0, #1
 8007d3a:	d1c7      	bne.n	8007ccc <__sflush_r+0x34>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0c4      	beq.n	8007ccc <__sflush_r+0x34>
 8007d42:	2b1d      	cmp	r3, #29
 8007d44:	d001      	beq.n	8007d4a <__sflush_r+0xb2>
 8007d46:	2b16      	cmp	r3, #22
 8007d48:	d101      	bne.n	8007d4e <__sflush_r+0xb6>
 8007d4a:	602f      	str	r7, [r5, #0]
 8007d4c:	e7b1      	b.n	8007cb2 <__sflush_r+0x1a>
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d54:	81a3      	strh	r3, [r4, #12]
 8007d56:	e7ad      	b.n	8007cb4 <__sflush_r+0x1c>
 8007d58:	690f      	ldr	r7, [r1, #16]
 8007d5a:	2f00      	cmp	r7, #0
 8007d5c:	d0a9      	beq.n	8007cb2 <__sflush_r+0x1a>
 8007d5e:	0793      	lsls	r3, r2, #30
 8007d60:	bf18      	it	ne
 8007d62:	2300      	movne	r3, #0
 8007d64:	680e      	ldr	r6, [r1, #0]
 8007d66:	bf08      	it	eq
 8007d68:	694b      	ldreq	r3, [r1, #20]
 8007d6a:	eba6 0807 	sub.w	r8, r6, r7
 8007d6e:	600f      	str	r7, [r1, #0]
 8007d70:	608b      	str	r3, [r1, #8]
 8007d72:	f1b8 0f00 	cmp.w	r8, #0
 8007d76:	dd9c      	ble.n	8007cb2 <__sflush_r+0x1a>
 8007d78:	4643      	mov	r3, r8
 8007d7a:	463a      	mov	r2, r7
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	6a21      	ldr	r1, [r4, #32]
 8007d80:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d82:	47b0      	blx	r6
 8007d84:	2800      	cmp	r0, #0
 8007d86:	dc06      	bgt.n	8007d96 <__sflush_r+0xfe>
 8007d88:	89a3      	ldrh	r3, [r4, #12]
 8007d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d92:	81a3      	strh	r3, [r4, #12]
 8007d94:	e78e      	b.n	8007cb4 <__sflush_r+0x1c>
 8007d96:	4407      	add	r7, r0
 8007d98:	eba8 0800 	sub.w	r8, r8, r0
 8007d9c:	e7e9      	b.n	8007d72 <__sflush_r+0xda>
 8007d9e:	bf00      	nop
 8007da0:	20400001 	.word	0x20400001

08007da4 <_fflush_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	690b      	ldr	r3, [r1, #16]
 8007da8:	4605      	mov	r5, r0
 8007daa:	460c      	mov	r4, r1
 8007dac:	b913      	cbnz	r3, 8007db4 <_fflush_r+0x10>
 8007dae:	2500      	movs	r5, #0
 8007db0:	4628      	mov	r0, r5
 8007db2:	bd38      	pop	{r3, r4, r5, pc}
 8007db4:	b118      	cbz	r0, 8007dbe <_fflush_r+0x1a>
 8007db6:	6983      	ldr	r3, [r0, #24]
 8007db8:	b90b      	cbnz	r3, 8007dbe <_fflush_r+0x1a>
 8007dba:	f000 f887 	bl	8007ecc <__sinit>
 8007dbe:	4b14      	ldr	r3, [pc, #80]	; (8007e10 <_fflush_r+0x6c>)
 8007dc0:	429c      	cmp	r4, r3
 8007dc2:	d11b      	bne.n	8007dfc <_fflush_r+0x58>
 8007dc4:	686c      	ldr	r4, [r5, #4]
 8007dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0ef      	beq.n	8007dae <_fflush_r+0xa>
 8007dce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007dd0:	07d0      	lsls	r0, r2, #31
 8007dd2:	d404      	bmi.n	8007dde <_fflush_r+0x3a>
 8007dd4:	0599      	lsls	r1, r3, #22
 8007dd6:	d402      	bmi.n	8007dde <_fflush_r+0x3a>
 8007dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dda:	f000 f915 	bl	8008008 <__retarget_lock_acquire_recursive>
 8007dde:	4628      	mov	r0, r5
 8007de0:	4621      	mov	r1, r4
 8007de2:	f7ff ff59 	bl	8007c98 <__sflush_r>
 8007de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007de8:	4605      	mov	r5, r0
 8007dea:	07da      	lsls	r2, r3, #31
 8007dec:	d4e0      	bmi.n	8007db0 <_fflush_r+0xc>
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	059b      	lsls	r3, r3, #22
 8007df2:	d4dd      	bmi.n	8007db0 <_fflush_r+0xc>
 8007df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007df6:	f000 f908 	bl	800800a <__retarget_lock_release_recursive>
 8007dfa:	e7d9      	b.n	8007db0 <_fflush_r+0xc>
 8007dfc:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <_fflush_r+0x70>)
 8007dfe:	429c      	cmp	r4, r3
 8007e00:	d101      	bne.n	8007e06 <_fflush_r+0x62>
 8007e02:	68ac      	ldr	r4, [r5, #8]
 8007e04:	e7df      	b.n	8007dc6 <_fflush_r+0x22>
 8007e06:	4b04      	ldr	r3, [pc, #16]	; (8007e18 <_fflush_r+0x74>)
 8007e08:	429c      	cmp	r4, r3
 8007e0a:	bf08      	it	eq
 8007e0c:	68ec      	ldreq	r4, [r5, #12]
 8007e0e:	e7da      	b.n	8007dc6 <_fflush_r+0x22>
 8007e10:	0800873c 	.word	0x0800873c
 8007e14:	0800875c 	.word	0x0800875c
 8007e18:	0800871c 	.word	0x0800871c

08007e1c <std>:
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	b510      	push	{r4, lr}
 8007e20:	4604      	mov	r4, r0
 8007e22:	e9c0 3300 	strd	r3, r3, [r0]
 8007e26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e2a:	6083      	str	r3, [r0, #8]
 8007e2c:	8181      	strh	r1, [r0, #12]
 8007e2e:	6643      	str	r3, [r0, #100]	; 0x64
 8007e30:	81c2      	strh	r2, [r0, #14]
 8007e32:	6183      	str	r3, [r0, #24]
 8007e34:	4619      	mov	r1, r3
 8007e36:	2208      	movs	r2, #8
 8007e38:	305c      	adds	r0, #92	; 0x5c
 8007e3a:	f7fd fba1 	bl	8005580 <memset>
 8007e3e:	4b05      	ldr	r3, [pc, #20]	; (8007e54 <std+0x38>)
 8007e40:	6224      	str	r4, [r4, #32]
 8007e42:	6263      	str	r3, [r4, #36]	; 0x24
 8007e44:	4b04      	ldr	r3, [pc, #16]	; (8007e58 <std+0x3c>)
 8007e46:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e48:	4b04      	ldr	r3, [pc, #16]	; (8007e5c <std+0x40>)
 8007e4a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e4c:	4b04      	ldr	r3, [pc, #16]	; (8007e60 <std+0x44>)
 8007e4e:	6323      	str	r3, [r4, #48]	; 0x30
 8007e50:	bd10      	pop	{r4, pc}
 8007e52:	bf00      	nop
 8007e54:	0800816d 	.word	0x0800816d
 8007e58:	0800818f 	.word	0x0800818f
 8007e5c:	080081c7 	.word	0x080081c7
 8007e60:	080081eb 	.word	0x080081eb

08007e64 <_cleanup_r>:
 8007e64:	4901      	ldr	r1, [pc, #4]	; (8007e6c <_cleanup_r+0x8>)
 8007e66:	f000 b8af 	b.w	8007fc8 <_fwalk_reent>
 8007e6a:	bf00      	nop
 8007e6c:	08007da5 	.word	0x08007da5

08007e70 <__sfmoreglue>:
 8007e70:	b570      	push	{r4, r5, r6, lr}
 8007e72:	2568      	movs	r5, #104	; 0x68
 8007e74:	1e4a      	subs	r2, r1, #1
 8007e76:	4355      	muls	r5, r2
 8007e78:	460e      	mov	r6, r1
 8007e7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e7e:	f7ff fa89 	bl	8007394 <_malloc_r>
 8007e82:	4604      	mov	r4, r0
 8007e84:	b140      	cbz	r0, 8007e98 <__sfmoreglue+0x28>
 8007e86:	2100      	movs	r1, #0
 8007e88:	e9c0 1600 	strd	r1, r6, [r0]
 8007e8c:	300c      	adds	r0, #12
 8007e8e:	60a0      	str	r0, [r4, #8]
 8007e90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e94:	f7fd fb74 	bl	8005580 <memset>
 8007e98:	4620      	mov	r0, r4
 8007e9a:	bd70      	pop	{r4, r5, r6, pc}

08007e9c <__sfp_lock_acquire>:
 8007e9c:	4801      	ldr	r0, [pc, #4]	; (8007ea4 <__sfp_lock_acquire+0x8>)
 8007e9e:	f000 b8b3 	b.w	8008008 <__retarget_lock_acquire_recursive>
 8007ea2:	bf00      	nop
 8007ea4:	20000440 	.word	0x20000440

08007ea8 <__sfp_lock_release>:
 8007ea8:	4801      	ldr	r0, [pc, #4]	; (8007eb0 <__sfp_lock_release+0x8>)
 8007eaa:	f000 b8ae 	b.w	800800a <__retarget_lock_release_recursive>
 8007eae:	bf00      	nop
 8007eb0:	20000440 	.word	0x20000440

08007eb4 <__sinit_lock_acquire>:
 8007eb4:	4801      	ldr	r0, [pc, #4]	; (8007ebc <__sinit_lock_acquire+0x8>)
 8007eb6:	f000 b8a7 	b.w	8008008 <__retarget_lock_acquire_recursive>
 8007eba:	bf00      	nop
 8007ebc:	2000043b 	.word	0x2000043b

08007ec0 <__sinit_lock_release>:
 8007ec0:	4801      	ldr	r0, [pc, #4]	; (8007ec8 <__sinit_lock_release+0x8>)
 8007ec2:	f000 b8a2 	b.w	800800a <__retarget_lock_release_recursive>
 8007ec6:	bf00      	nop
 8007ec8:	2000043b 	.word	0x2000043b

08007ecc <__sinit>:
 8007ecc:	b510      	push	{r4, lr}
 8007ece:	4604      	mov	r4, r0
 8007ed0:	f7ff fff0 	bl	8007eb4 <__sinit_lock_acquire>
 8007ed4:	69a3      	ldr	r3, [r4, #24]
 8007ed6:	b11b      	cbz	r3, 8007ee0 <__sinit+0x14>
 8007ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007edc:	f7ff bff0 	b.w	8007ec0 <__sinit_lock_release>
 8007ee0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ee4:	6523      	str	r3, [r4, #80]	; 0x50
 8007ee6:	4b13      	ldr	r3, [pc, #76]	; (8007f34 <__sinit+0x68>)
 8007ee8:	4a13      	ldr	r2, [pc, #76]	; (8007f38 <__sinit+0x6c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	62a2      	str	r2, [r4, #40]	; 0x28
 8007eee:	42a3      	cmp	r3, r4
 8007ef0:	bf08      	it	eq
 8007ef2:	2301      	moveq	r3, #1
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	bf08      	it	eq
 8007ef8:	61a3      	streq	r3, [r4, #24]
 8007efa:	f000 f81f 	bl	8007f3c <__sfp>
 8007efe:	6060      	str	r0, [r4, #4]
 8007f00:	4620      	mov	r0, r4
 8007f02:	f000 f81b 	bl	8007f3c <__sfp>
 8007f06:	60a0      	str	r0, [r4, #8]
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f000 f817 	bl	8007f3c <__sfp>
 8007f0e:	2200      	movs	r2, #0
 8007f10:	2104      	movs	r1, #4
 8007f12:	60e0      	str	r0, [r4, #12]
 8007f14:	6860      	ldr	r0, [r4, #4]
 8007f16:	f7ff ff81 	bl	8007e1c <std>
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	2109      	movs	r1, #9
 8007f1e:	68a0      	ldr	r0, [r4, #8]
 8007f20:	f7ff ff7c 	bl	8007e1c <std>
 8007f24:	2202      	movs	r2, #2
 8007f26:	2112      	movs	r1, #18
 8007f28:	68e0      	ldr	r0, [r4, #12]
 8007f2a:	f7ff ff77 	bl	8007e1c <std>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	61a3      	str	r3, [r4, #24]
 8007f32:	e7d1      	b.n	8007ed8 <__sinit+0xc>
 8007f34:	0800839c 	.word	0x0800839c
 8007f38:	08007e65 	.word	0x08007e65

08007f3c <__sfp>:
 8007f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3e:	4607      	mov	r7, r0
 8007f40:	f7ff ffac 	bl	8007e9c <__sfp_lock_acquire>
 8007f44:	4b1e      	ldr	r3, [pc, #120]	; (8007fc0 <__sfp+0x84>)
 8007f46:	681e      	ldr	r6, [r3, #0]
 8007f48:	69b3      	ldr	r3, [r6, #24]
 8007f4a:	b913      	cbnz	r3, 8007f52 <__sfp+0x16>
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	f7ff ffbd 	bl	8007ecc <__sinit>
 8007f52:	3648      	adds	r6, #72	; 0x48
 8007f54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	d503      	bpl.n	8007f64 <__sfp+0x28>
 8007f5c:	6833      	ldr	r3, [r6, #0]
 8007f5e:	b30b      	cbz	r3, 8007fa4 <__sfp+0x68>
 8007f60:	6836      	ldr	r6, [r6, #0]
 8007f62:	e7f7      	b.n	8007f54 <__sfp+0x18>
 8007f64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f68:	b9d5      	cbnz	r5, 8007fa0 <__sfp+0x64>
 8007f6a:	4b16      	ldr	r3, [pc, #88]	; (8007fc4 <__sfp+0x88>)
 8007f6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f70:	60e3      	str	r3, [r4, #12]
 8007f72:	6665      	str	r5, [r4, #100]	; 0x64
 8007f74:	f000 f847 	bl	8008006 <__retarget_lock_init_recursive>
 8007f78:	f7ff ff96 	bl	8007ea8 <__sfp_lock_release>
 8007f7c:	2208      	movs	r2, #8
 8007f7e:	4629      	mov	r1, r5
 8007f80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f88:	6025      	str	r5, [r4, #0]
 8007f8a:	61a5      	str	r5, [r4, #24]
 8007f8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f90:	f7fd faf6 	bl	8005580 <memset>
 8007f94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fa0:	3468      	adds	r4, #104	; 0x68
 8007fa2:	e7d9      	b.n	8007f58 <__sfp+0x1c>
 8007fa4:	2104      	movs	r1, #4
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	f7ff ff62 	bl	8007e70 <__sfmoreglue>
 8007fac:	4604      	mov	r4, r0
 8007fae:	6030      	str	r0, [r6, #0]
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	d1d5      	bne.n	8007f60 <__sfp+0x24>
 8007fb4:	f7ff ff78 	bl	8007ea8 <__sfp_lock_release>
 8007fb8:	230c      	movs	r3, #12
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	e7ee      	b.n	8007f9c <__sfp+0x60>
 8007fbe:	bf00      	nop
 8007fc0:	0800839c 	.word	0x0800839c
 8007fc4:	ffff0001 	.word	0xffff0001

08007fc8 <_fwalk_reent>:
 8007fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fcc:	4606      	mov	r6, r0
 8007fce:	4688      	mov	r8, r1
 8007fd0:	2700      	movs	r7, #0
 8007fd2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007fd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fda:	f1b9 0901 	subs.w	r9, r9, #1
 8007fde:	d505      	bpl.n	8007fec <_fwalk_reent+0x24>
 8007fe0:	6824      	ldr	r4, [r4, #0]
 8007fe2:	2c00      	cmp	r4, #0
 8007fe4:	d1f7      	bne.n	8007fd6 <_fwalk_reent+0xe>
 8007fe6:	4638      	mov	r0, r7
 8007fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fec:	89ab      	ldrh	r3, [r5, #12]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d907      	bls.n	8008002 <_fwalk_reent+0x3a>
 8007ff2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	d003      	beq.n	8008002 <_fwalk_reent+0x3a>
 8007ffa:	4629      	mov	r1, r5
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	47c0      	blx	r8
 8008000:	4307      	orrs	r7, r0
 8008002:	3568      	adds	r5, #104	; 0x68
 8008004:	e7e9      	b.n	8007fda <_fwalk_reent+0x12>

08008006 <__retarget_lock_init_recursive>:
 8008006:	4770      	bx	lr

08008008 <__retarget_lock_acquire_recursive>:
 8008008:	4770      	bx	lr

0800800a <__retarget_lock_release_recursive>:
 800800a:	4770      	bx	lr

0800800c <__swhatbuf_r>:
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	460e      	mov	r6, r1
 8008010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008014:	4614      	mov	r4, r2
 8008016:	2900      	cmp	r1, #0
 8008018:	461d      	mov	r5, r3
 800801a:	b096      	sub	sp, #88	; 0x58
 800801c:	da07      	bge.n	800802e <__swhatbuf_r+0x22>
 800801e:	2300      	movs	r3, #0
 8008020:	602b      	str	r3, [r5, #0]
 8008022:	89b3      	ldrh	r3, [r6, #12]
 8008024:	061a      	lsls	r2, r3, #24
 8008026:	d410      	bmi.n	800804a <__swhatbuf_r+0x3e>
 8008028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800802c:	e00e      	b.n	800804c <__swhatbuf_r+0x40>
 800802e:	466a      	mov	r2, sp
 8008030:	f000 f902 	bl	8008238 <_fstat_r>
 8008034:	2800      	cmp	r0, #0
 8008036:	dbf2      	blt.n	800801e <__swhatbuf_r+0x12>
 8008038:	9a01      	ldr	r2, [sp, #4]
 800803a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800803e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008042:	425a      	negs	r2, r3
 8008044:	415a      	adcs	r2, r3
 8008046:	602a      	str	r2, [r5, #0]
 8008048:	e7ee      	b.n	8008028 <__swhatbuf_r+0x1c>
 800804a:	2340      	movs	r3, #64	; 0x40
 800804c:	2000      	movs	r0, #0
 800804e:	6023      	str	r3, [r4, #0]
 8008050:	b016      	add	sp, #88	; 0x58
 8008052:	bd70      	pop	{r4, r5, r6, pc}

08008054 <__smakebuf_r>:
 8008054:	898b      	ldrh	r3, [r1, #12]
 8008056:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008058:	079d      	lsls	r5, r3, #30
 800805a:	4606      	mov	r6, r0
 800805c:	460c      	mov	r4, r1
 800805e:	d507      	bpl.n	8008070 <__smakebuf_r+0x1c>
 8008060:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008064:	6023      	str	r3, [r4, #0]
 8008066:	6123      	str	r3, [r4, #16]
 8008068:	2301      	movs	r3, #1
 800806a:	6163      	str	r3, [r4, #20]
 800806c:	b002      	add	sp, #8
 800806e:	bd70      	pop	{r4, r5, r6, pc}
 8008070:	466a      	mov	r2, sp
 8008072:	ab01      	add	r3, sp, #4
 8008074:	f7ff ffca 	bl	800800c <__swhatbuf_r>
 8008078:	9900      	ldr	r1, [sp, #0]
 800807a:	4605      	mov	r5, r0
 800807c:	4630      	mov	r0, r6
 800807e:	f7ff f989 	bl	8007394 <_malloc_r>
 8008082:	b948      	cbnz	r0, 8008098 <__smakebuf_r+0x44>
 8008084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008088:	059a      	lsls	r2, r3, #22
 800808a:	d4ef      	bmi.n	800806c <__smakebuf_r+0x18>
 800808c:	f023 0303 	bic.w	r3, r3, #3
 8008090:	f043 0302 	orr.w	r3, r3, #2
 8008094:	81a3      	strh	r3, [r4, #12]
 8008096:	e7e3      	b.n	8008060 <__smakebuf_r+0xc>
 8008098:	4b0d      	ldr	r3, [pc, #52]	; (80080d0 <__smakebuf_r+0x7c>)
 800809a:	62b3      	str	r3, [r6, #40]	; 0x28
 800809c:	89a3      	ldrh	r3, [r4, #12]
 800809e:	6020      	str	r0, [r4, #0]
 80080a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a4:	81a3      	strh	r3, [r4, #12]
 80080a6:	9b00      	ldr	r3, [sp, #0]
 80080a8:	6120      	str	r0, [r4, #16]
 80080aa:	6163      	str	r3, [r4, #20]
 80080ac:	9b01      	ldr	r3, [sp, #4]
 80080ae:	b15b      	cbz	r3, 80080c8 <__smakebuf_r+0x74>
 80080b0:	4630      	mov	r0, r6
 80080b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080b6:	f000 f8d1 	bl	800825c <_isatty_r>
 80080ba:	b128      	cbz	r0, 80080c8 <__smakebuf_r+0x74>
 80080bc:	89a3      	ldrh	r3, [r4, #12]
 80080be:	f023 0303 	bic.w	r3, r3, #3
 80080c2:	f043 0301 	orr.w	r3, r3, #1
 80080c6:	81a3      	strh	r3, [r4, #12]
 80080c8:	89a0      	ldrh	r0, [r4, #12]
 80080ca:	4305      	orrs	r5, r0
 80080cc:	81a5      	strh	r5, [r4, #12]
 80080ce:	e7cd      	b.n	800806c <__smakebuf_r+0x18>
 80080d0:	08007e65 	.word	0x08007e65

080080d4 <_malloc_usable_size_r>:
 80080d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080d8:	1f18      	subs	r0, r3, #4
 80080da:	2b00      	cmp	r3, #0
 80080dc:	bfbc      	itt	lt
 80080de:	580b      	ldrlt	r3, [r1, r0]
 80080e0:	18c0      	addlt	r0, r0, r3
 80080e2:	4770      	bx	lr

080080e4 <_raise_r>:
 80080e4:	291f      	cmp	r1, #31
 80080e6:	b538      	push	{r3, r4, r5, lr}
 80080e8:	4604      	mov	r4, r0
 80080ea:	460d      	mov	r5, r1
 80080ec:	d904      	bls.n	80080f8 <_raise_r+0x14>
 80080ee:	2316      	movs	r3, #22
 80080f0:	6003      	str	r3, [r0, #0]
 80080f2:	f04f 30ff 	mov.w	r0, #4294967295
 80080f6:	bd38      	pop	{r3, r4, r5, pc}
 80080f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80080fa:	b112      	cbz	r2, 8008102 <_raise_r+0x1e>
 80080fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008100:	b94b      	cbnz	r3, 8008116 <_raise_r+0x32>
 8008102:	4620      	mov	r0, r4
 8008104:	f000 f830 	bl	8008168 <_getpid_r>
 8008108:	462a      	mov	r2, r5
 800810a:	4601      	mov	r1, r0
 800810c:	4620      	mov	r0, r4
 800810e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008112:	f000 b817 	b.w	8008144 <_kill_r>
 8008116:	2b01      	cmp	r3, #1
 8008118:	d00a      	beq.n	8008130 <_raise_r+0x4c>
 800811a:	1c59      	adds	r1, r3, #1
 800811c:	d103      	bne.n	8008126 <_raise_r+0x42>
 800811e:	2316      	movs	r3, #22
 8008120:	6003      	str	r3, [r0, #0]
 8008122:	2001      	movs	r0, #1
 8008124:	e7e7      	b.n	80080f6 <_raise_r+0x12>
 8008126:	2400      	movs	r4, #0
 8008128:	4628      	mov	r0, r5
 800812a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800812e:	4798      	blx	r3
 8008130:	2000      	movs	r0, #0
 8008132:	e7e0      	b.n	80080f6 <_raise_r+0x12>

08008134 <raise>:
 8008134:	4b02      	ldr	r3, [pc, #8]	; (8008140 <raise+0xc>)
 8008136:	4601      	mov	r1, r0
 8008138:	6818      	ldr	r0, [r3, #0]
 800813a:	f7ff bfd3 	b.w	80080e4 <_raise_r>
 800813e:	bf00      	nop
 8008140:	20000014 	.word	0x20000014

08008144 <_kill_r>:
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	2300      	movs	r3, #0
 8008148:	4d06      	ldr	r5, [pc, #24]	; (8008164 <_kill_r+0x20>)
 800814a:	4604      	mov	r4, r0
 800814c:	4608      	mov	r0, r1
 800814e:	4611      	mov	r1, r2
 8008150:	602b      	str	r3, [r5, #0]
 8008152:	f7f9 fbe0 	bl	8001916 <_kill>
 8008156:	1c43      	adds	r3, r0, #1
 8008158:	d102      	bne.n	8008160 <_kill_r+0x1c>
 800815a:	682b      	ldr	r3, [r5, #0]
 800815c:	b103      	cbz	r3, 8008160 <_kill_r+0x1c>
 800815e:	6023      	str	r3, [r4, #0]
 8008160:	bd38      	pop	{r3, r4, r5, pc}
 8008162:	bf00      	nop
 8008164:	20000434 	.word	0x20000434

08008168 <_getpid_r>:
 8008168:	f7f9 bbce 	b.w	8001908 <_getpid>

0800816c <__sread>:
 800816c:	b510      	push	{r4, lr}
 800816e:	460c      	mov	r4, r1
 8008170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008174:	f000 f894 	bl	80082a0 <_read_r>
 8008178:	2800      	cmp	r0, #0
 800817a:	bfab      	itete	ge
 800817c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800817e:	89a3      	ldrhlt	r3, [r4, #12]
 8008180:	181b      	addge	r3, r3, r0
 8008182:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008186:	bfac      	ite	ge
 8008188:	6563      	strge	r3, [r4, #84]	; 0x54
 800818a:	81a3      	strhlt	r3, [r4, #12]
 800818c:	bd10      	pop	{r4, pc}

0800818e <__swrite>:
 800818e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008192:	461f      	mov	r7, r3
 8008194:	898b      	ldrh	r3, [r1, #12]
 8008196:	4605      	mov	r5, r0
 8008198:	05db      	lsls	r3, r3, #23
 800819a:	460c      	mov	r4, r1
 800819c:	4616      	mov	r6, r2
 800819e:	d505      	bpl.n	80081ac <__swrite+0x1e>
 80081a0:	2302      	movs	r3, #2
 80081a2:	2200      	movs	r2, #0
 80081a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a8:	f000 f868 	bl	800827c <_lseek_r>
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	4632      	mov	r2, r6
 80081b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081b4:	81a3      	strh	r3, [r4, #12]
 80081b6:	4628      	mov	r0, r5
 80081b8:	463b      	mov	r3, r7
 80081ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081c2:	f000 b817 	b.w	80081f4 <_write_r>

080081c6 <__sseek>:
 80081c6:	b510      	push	{r4, lr}
 80081c8:	460c      	mov	r4, r1
 80081ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ce:	f000 f855 	bl	800827c <_lseek_r>
 80081d2:	1c43      	adds	r3, r0, #1
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	bf15      	itete	ne
 80081d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80081da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80081de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80081e2:	81a3      	strheq	r3, [r4, #12]
 80081e4:	bf18      	it	ne
 80081e6:	81a3      	strhne	r3, [r4, #12]
 80081e8:	bd10      	pop	{r4, pc}

080081ea <__sclose>:
 80081ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ee:	f000 b813 	b.w	8008218 <_close_r>
	...

080081f4 <_write_r>:
 80081f4:	b538      	push	{r3, r4, r5, lr}
 80081f6:	4604      	mov	r4, r0
 80081f8:	4608      	mov	r0, r1
 80081fa:	4611      	mov	r1, r2
 80081fc:	2200      	movs	r2, #0
 80081fe:	4d05      	ldr	r5, [pc, #20]	; (8008214 <_write_r+0x20>)
 8008200:	602a      	str	r2, [r5, #0]
 8008202:	461a      	mov	r2, r3
 8008204:	f7f9 fbbe 	bl	8001984 <_write>
 8008208:	1c43      	adds	r3, r0, #1
 800820a:	d102      	bne.n	8008212 <_write_r+0x1e>
 800820c:	682b      	ldr	r3, [r5, #0]
 800820e:	b103      	cbz	r3, 8008212 <_write_r+0x1e>
 8008210:	6023      	str	r3, [r4, #0]
 8008212:	bd38      	pop	{r3, r4, r5, pc}
 8008214:	20000434 	.word	0x20000434

08008218 <_close_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	2300      	movs	r3, #0
 800821c:	4d05      	ldr	r5, [pc, #20]	; (8008234 <_close_r+0x1c>)
 800821e:	4604      	mov	r4, r0
 8008220:	4608      	mov	r0, r1
 8008222:	602b      	str	r3, [r5, #0]
 8008224:	f7f9 fbca 	bl	80019bc <_close>
 8008228:	1c43      	adds	r3, r0, #1
 800822a:	d102      	bne.n	8008232 <_close_r+0x1a>
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	b103      	cbz	r3, 8008232 <_close_r+0x1a>
 8008230:	6023      	str	r3, [r4, #0]
 8008232:	bd38      	pop	{r3, r4, r5, pc}
 8008234:	20000434 	.word	0x20000434

08008238 <_fstat_r>:
 8008238:	b538      	push	{r3, r4, r5, lr}
 800823a:	2300      	movs	r3, #0
 800823c:	4d06      	ldr	r5, [pc, #24]	; (8008258 <_fstat_r+0x20>)
 800823e:	4604      	mov	r4, r0
 8008240:	4608      	mov	r0, r1
 8008242:	4611      	mov	r1, r2
 8008244:	602b      	str	r3, [r5, #0]
 8008246:	f7f9 fbc4 	bl	80019d2 <_fstat>
 800824a:	1c43      	adds	r3, r0, #1
 800824c:	d102      	bne.n	8008254 <_fstat_r+0x1c>
 800824e:	682b      	ldr	r3, [r5, #0]
 8008250:	b103      	cbz	r3, 8008254 <_fstat_r+0x1c>
 8008252:	6023      	str	r3, [r4, #0]
 8008254:	bd38      	pop	{r3, r4, r5, pc}
 8008256:	bf00      	nop
 8008258:	20000434 	.word	0x20000434

0800825c <_isatty_r>:
 800825c:	b538      	push	{r3, r4, r5, lr}
 800825e:	2300      	movs	r3, #0
 8008260:	4d05      	ldr	r5, [pc, #20]	; (8008278 <_isatty_r+0x1c>)
 8008262:	4604      	mov	r4, r0
 8008264:	4608      	mov	r0, r1
 8008266:	602b      	str	r3, [r5, #0]
 8008268:	f7f9 fbc2 	bl	80019f0 <_isatty>
 800826c:	1c43      	adds	r3, r0, #1
 800826e:	d102      	bne.n	8008276 <_isatty_r+0x1a>
 8008270:	682b      	ldr	r3, [r5, #0]
 8008272:	b103      	cbz	r3, 8008276 <_isatty_r+0x1a>
 8008274:	6023      	str	r3, [r4, #0]
 8008276:	bd38      	pop	{r3, r4, r5, pc}
 8008278:	20000434 	.word	0x20000434

0800827c <_lseek_r>:
 800827c:	b538      	push	{r3, r4, r5, lr}
 800827e:	4604      	mov	r4, r0
 8008280:	4608      	mov	r0, r1
 8008282:	4611      	mov	r1, r2
 8008284:	2200      	movs	r2, #0
 8008286:	4d05      	ldr	r5, [pc, #20]	; (800829c <_lseek_r+0x20>)
 8008288:	602a      	str	r2, [r5, #0]
 800828a:	461a      	mov	r2, r3
 800828c:	f7f9 fbba 	bl	8001a04 <_lseek>
 8008290:	1c43      	adds	r3, r0, #1
 8008292:	d102      	bne.n	800829a <_lseek_r+0x1e>
 8008294:	682b      	ldr	r3, [r5, #0]
 8008296:	b103      	cbz	r3, 800829a <_lseek_r+0x1e>
 8008298:	6023      	str	r3, [r4, #0]
 800829a:	bd38      	pop	{r3, r4, r5, pc}
 800829c:	20000434 	.word	0x20000434

080082a0 <_read_r>:
 80082a0:	b538      	push	{r3, r4, r5, lr}
 80082a2:	4604      	mov	r4, r0
 80082a4:	4608      	mov	r0, r1
 80082a6:	4611      	mov	r1, r2
 80082a8:	2200      	movs	r2, #0
 80082aa:	4d05      	ldr	r5, [pc, #20]	; (80082c0 <_read_r+0x20>)
 80082ac:	602a      	str	r2, [r5, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	f7f9 fb4b 	bl	800194a <_read>
 80082b4:	1c43      	adds	r3, r0, #1
 80082b6:	d102      	bne.n	80082be <_read_r+0x1e>
 80082b8:	682b      	ldr	r3, [r5, #0]
 80082ba:	b103      	cbz	r3, 80082be <_read_r+0x1e>
 80082bc:	6023      	str	r3, [r4, #0]
 80082be:	bd38      	pop	{r3, r4, r5, pc}
 80082c0:	20000434 	.word	0x20000434

080082c4 <_init>:
 80082c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c6:	bf00      	nop
 80082c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ca:	bc08      	pop	{r3}
 80082cc:	469e      	mov	lr, r3
 80082ce:	4770      	bx	lr

080082d0 <_fini>:
 80082d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d2:	bf00      	nop
 80082d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082d6:	bc08      	pop	{r3}
 80082d8:	469e      	mov	lr, r3
 80082da:	4770      	bx	lr
