
blinyLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08007908  08007908  00017908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d14  08007d14  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007d14  08007d14  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d14  08007d14  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d14  08007d14  00017d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d18  08007d18  00017d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  200001e0  08007efc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000740  08007efc  00020740  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001809c  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000363d  00000000  00000000  000382a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  0003b8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  0003c9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aacb  00000000  00000000  0003d900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161a2  00000000  00000000  000583cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000924a2  00000000  00000000  0006e56d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00100a0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053fc  00000000  00000000  00100a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080078ec 	.word	0x080078ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080078ec 	.word	0x080078ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <MX_ADC1_Init+0x74>)
 8000a9a:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <MX_ADC1_Init+0x78>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <MX_ADC1_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <MX_ADC1_Init+0x74>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_ADC1_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <MX_ADC1_Init+0x74>)
 8000ab2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ab6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ab8:	4b10      	ldr	r3, [pc, #64]	; (8000afc <MX_ADC1_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_ADC1_Init+0x74>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ac4:	480d      	ldr	r0, [pc, #52]	; (8000afc <MX_ADC1_Init+0x74>)
 8000ac6:	f001 f92b 	bl	8001d20 <HAL_ADC_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ad0:	f000 fa34 	bl	8000f3c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_ADC1_Init+0x74>)
 8000ae6:	f001 fac5 	bl	8002074 <HAL_ADC_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000af0:	f000 fa24 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200002ec 	.word	0x200002ec
 8000b00:	40012400 	.word	0x40012400

08000b04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a18      	ldr	r2, [pc, #96]	; (8000b80 <HAL_ADC_MspInit+0x7c>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d129      	bne.n	8000b78 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_ADC_MspInit+0x80>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	4a16      	ldr	r2, [pc, #88]	; (8000b84 <HAL_ADC_MspInit+0x80>)
 8000b2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b2e:	6193      	str	r3, [r2, #24]
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_ADC_MspInit+0x80>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_ADC_MspInit+0x80>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <HAL_ADC_MspInit+0x80>)
 8000b42:	f043 0304 	orr.w	r3, r3, #4
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_ADC_MspInit+0x80>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b54:	2301      	movs	r3, #1
 8000b56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0310 	add.w	r3, r7, #16
 8000b60:	4619      	mov	r1, r3
 8000b62:	4809      	ldr	r0, [pc, #36]	; (8000b88 <HAL_ADC_MspInit+0x84>)
 8000b64:	f001 ff3c 	bl	80029e0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2012      	movs	r0, #18
 8000b6e:	f001 fc9a 	bl	80024a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b72:	2012      	movs	r0, #18
 8000b74:	f001 fcb3 	bl	80024de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b78:	bf00      	nop
 8000b7a:	3720      	adds	r7, #32
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40012400 	.word	0x40012400
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40010800 	.word	0x40010800

08000b8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_DMA_Init+0x38>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <MX_DMA_Init+0x38>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6153      	str	r3, [r2, #20]
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_DMA_Init+0x38>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	200d      	movs	r0, #13
 8000bb0:	f001 fc79 	bl	80024a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000bb4:	200d      	movs	r0, #13
 8000bb6:	f001 fc92 	bl	80024de <HAL_NVIC_EnableIRQ>

}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bdc:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <MX_GPIO_Init+0xa4>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a22      	ldr	r2, [pc, #136]	; (8000c6c <MX_GPIO_Init+0xa4>)
 8000be2:	f043 0320 	orr.w	r3, r3, #32
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <MX_GPIO_Init+0xa4>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0320 	and.w	r3, r3, #32
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <MX_GPIO_Init+0xa4>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a1c      	ldr	r2, [pc, #112]	; (8000c6c <MX_GPIO_Init+0xa4>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <MX_GPIO_Init+0xa4>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_GPIO_Init+0xa4>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a16      	ldr	r2, [pc, #88]	; (8000c6c <MX_GPIO_Init+0xa4>)
 8000c12:	f043 0308 	orr.w	r3, r3, #8
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_GPIO_Init+0xa4>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0308 	and.w	r3, r3, #8
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2120      	movs	r1, #32
 8000c28:	4811      	ldr	r0, [pc, #68]	; (8000c70 <MX_GPIO_Init+0xa8>)
 8000c2a:	f002 f85d 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c2e:	2320      	movs	r3, #32
 8000c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0310 	add.w	r3, r7, #16
 8000c42:	4619      	mov	r1, r3
 8000c44:	480a      	ldr	r0, [pc, #40]	; (8000c70 <MX_GPIO_Init+0xa8>)
 8000c46:	f001 fecb 	bl	80029e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Button0_Pin|Button1_Pin|Button2_Pin;
 8000c4a:	2307      	movs	r3, #7
 8000c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_GPIO_Init+0xac>)
 8000c5e:	f001 febf 	bl	80029e0 <HAL_GPIO_Init>

}
 8000c62:	bf00      	nop
 8000c64:	3720      	adds	r7, #32
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40010800 	.word	0x40010800
 8000c74:	40010c00 	.word	0x40010c00

08000c78 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c7e:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <MX_I2C1_Init+0x54>)
 8000c80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <MX_I2C1_Init+0x58>)
 8000c86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_I2C1_Init+0x50>)
 8000cb6:	f002 f82f 	bl	8002d18 <HAL_I2C_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cc0:	f000 f93c 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	2000031c 	.word	0x2000031c
 8000ccc:	40005400 	.word	0x40005400
 8000cd0:	000186a0 	.word	0x000186a0

08000cd4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_I2C2_Init+0x50>)
 8000cda:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <MX_I2C2_Init+0x54>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_I2C2_Init+0x50>)
 8000ce0:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <MX_I2C2_Init+0x58>)
 8000ce2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_I2C2_Init+0x50>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_I2C2_Init+0x50>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_I2C2_Init+0x50>)
 8000cf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cf6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <MX_I2C2_Init+0x50>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_I2C2_Init+0x50>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <MX_I2C2_Init+0x50>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_I2C2_Init+0x50>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <MX_I2C2_Init+0x50>)
 8000d12:	f002 f801 	bl	8002d18 <HAL_I2C_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d1c:	f000 f90e 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000370 	.word	0x20000370
 8000d28:	40005800 	.word	0x40005800
 8000d2c:	000186a0 	.word	0x000186a0

08000d30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	; 0x30
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a32      	ldr	r2, [pc, #200]	; (8000e14 <HAL_I2C_MspInit+0xe4>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d133      	bne.n	8000db8 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d50:	4b31      	ldr	r3, [pc, #196]	; (8000e18 <HAL_I2C_MspInit+0xe8>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	4a30      	ldr	r2, [pc, #192]	; (8000e18 <HAL_I2C_MspInit+0xe8>)
 8000d56:	f043 0308 	orr.w	r3, r3, #8
 8000d5a:	6193      	str	r3, [r2, #24]
 8000d5c:	4b2e      	ldr	r3, [pc, #184]	; (8000e18 <HAL_I2C_MspInit+0xe8>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f003 0308 	and.w	r3, r3, #8
 8000d64:	61bb      	str	r3, [r7, #24]
 8000d66:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6e:	2312      	movs	r3, #18
 8000d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d72:	2303      	movs	r3, #3
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4827      	ldr	r0, [pc, #156]	; (8000e1c <HAL_I2C_MspInit+0xec>)
 8000d7e:	f001 fe2f 	bl	80029e0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000d82:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <HAL_I2C_MspInit+0xf0>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d92:	f043 0302 	orr.w	r3, r3, #2
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d98:	4a21      	ldr	r2, [pc, #132]	; (8000e20 <HAL_I2C_MspInit+0xf0>)
 8000d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d9e:	4b1e      	ldr	r3, [pc, #120]	; (8000e18 <HAL_I2C_MspInit+0xe8>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	4a1d      	ldr	r2, [pc, #116]	; (8000e18 <HAL_I2C_MspInit+0xe8>)
 8000da4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000da8:	61d3      	str	r3, [r2, #28]
 8000daa:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <HAL_I2C_MspInit+0xe8>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000db6:	e029      	b.n	8000e0c <HAL_I2C_MspInit+0xdc>
  else if(i2cHandle->Instance==I2C2)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a19      	ldr	r2, [pc, #100]	; (8000e24 <HAL_I2C_MspInit+0xf4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d124      	bne.n	8000e0c <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <HAL_I2C_MspInit+0xe8>)
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	4a14      	ldr	r2, [pc, #80]	; (8000e18 <HAL_I2C_MspInit+0xe8>)
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	6193      	str	r3, [r2, #24]
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_I2C_MspInit+0xe8>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de0:	2312      	movs	r3, #18
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	4619      	mov	r1, r3
 8000dee:	480b      	ldr	r0, [pc, #44]	; (8000e1c <HAL_I2C_MspInit+0xec>)
 8000df0:	f001 fdf6 	bl	80029e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <HAL_I2C_MspInit+0xe8>)
 8000df6:	69db      	ldr	r3, [r3, #28]
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <HAL_I2C_MspInit+0xe8>)
 8000dfa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dfe:	61d3      	str	r3, [r2, #28]
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <HAL_I2C_MspInit+0xe8>)
 8000e02:	69db      	ldr	r3, [r3, #28]
 8000e04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	bf00      	nop
 8000e0e:	3730      	adds	r7, #48	; 0x30
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40005400 	.word	0x40005400
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40010c00 	.word	0x40010c00
 8000e20:	40010000 	.word	0x40010000
 8000e24:	40005800 	.word	0x40005800

08000e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e2c:	f000 fef2 	bl	8001c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e30:	f000 f820 	bl	8000e74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e34:	f7ff fec8 	bl	8000bc8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e38:	f000 fde4 	bl	8001a04 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000e3c:	f7ff ff1c 	bl	8000c78 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e40:	f7ff ff48 	bl	8000cd4 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000e44:	f000 fd32 	bl	80018ac <MX_TIM1_Init>
  MX_DMA_Init();
 8000e48:	f7ff fea0 	bl	8000b8c <MX_DMA_Init>
  MX_ADC1_Init();
 8000e4c:	f7ff fe1c 	bl	8000a88 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000e50:	4806      	ldr	r0, [pc, #24]	; (8000e6c <main+0x44>)
 8000e52:	f002 fda5 	bl	80039a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <main+0x48>)
 8000e58:	f002 fda2 	bl	80039a0 <HAL_TIM_Base_Start_IT>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000e5c:	2104      	movs	r1, #4
 8000e5e:	4804      	ldr	r0, [pc, #16]	; (8000e70 <main+0x48>)
 8000e60:	f002 fe48 	bl	8003af4 <HAL_TIM_PWM_Start>
  SCH_Add_Task(LCD_init, 0, 0);
  SCH_Add_Task(timerRun, 0, 10);
  SCH_Add_Task(DHT20_FSM,200,10);*/
  while (1)
  {
	  NeoPixel_set_led_cycle();
 8000e64:	f000 fa76 	bl	8001354 <NeoPixel_set_led_cycle>
 8000e68:	e7fc      	b.n	8000e64 <main+0x3c>
 8000e6a:	bf00      	nop
 8000e6c:	200002a0 	.word	0x200002a0
 8000e70:	20000258 	.word	0x20000258

08000e74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b094      	sub	sp, #80	; 0x50
 8000e78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e7e:	2228      	movs	r2, #40	; 0x28
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f004 f856 	bl	8004f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ea8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ebe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ec0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f002 f868 	bl	8002fa0 <HAL_RCC_OscConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ed6:	f000 f831 	bl	8000f3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eda:	230f      	movs	r3, #15
 8000edc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f002 fad2 	bl	80034a0 <HAL_RCC_ClockConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f02:	f000 f81b 	bl	8000f3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f06:	2302      	movs	r3, #2
 8000f08:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 fc3f 	bl	8003794 <HAL_RCCEx_PeriphCLKConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f1c:	f000 f80e 	bl	8000f3c <Error_Handler>
  }
}
 8000f20:	bf00      	nop
 8000f22:	3750      	adds	r7, #80	; 0x50
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000f30:	f000 fb1e 	bl	8001570 <SCH_Update>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
}
 8000f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <Error_Handler+0x8>

08000f46 <scale8>:
uint8_t b;

uint8_t angle = 0;
const uint8_t angle_difference = 11;

static inline uint8_t scale8(uint8_t x, uint8_t scale) {
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	460a      	mov	r2, r1
 8000f50:	71fb      	strb	r3, [r7, #7]
 8000f52:	4613      	mov	r3, r2
 8000f54:	71bb      	strb	r3, [r7, #6]
  return ((uint16_t)x * scale) >> 8;
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	79ba      	ldrb	r2, [r7, #6]
 8000f5a:	fb02 f303 	mul.w	r3, r2, r3
 8000f5e:	121b      	asrs	r3, r3, #8
 8000f60:	b2db      	uxtb	r3, r3
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <NeoPixel_led_set_RGB>:
		 NeoPixel_led_set_all_RGB();
	}
	NeoPixel_status =  !NeoPixel_status;
}
// Set a single color (RGB) to index
void NeoPixel_led_set_RGB(uint8_t index) {
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	r = (NeoPixel_RGB_Color >> 16) & 0xFF;
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <NeoPixel_led_set_RGB+0x7c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	0c1b      	lsrs	r3, r3, #16
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <NeoPixel_led_set_RGB+0x80>)
 8000f80:	701a      	strb	r2, [r3, #0]
	g = (NeoPixel_RGB_Color >> 8) & 0xFF;
 8000f82:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <NeoPixel_led_set_RGB+0x7c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	0a1b      	lsrs	r3, r3, #8
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <NeoPixel_led_set_RGB+0x84>)
 8000f8c:	701a      	strb	r2, [r3, #0]
	b =  NeoPixel_RGB_Color & 0xFF;
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <NeoPixel_led_set_RGB+0x7c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <NeoPixel_led_set_RGB+0x88>)
 8000f96:	701a      	strb	r2, [r3, #0]
  rgb_arr[4 * index] = scale8(g, 0xB0); // g;
  rgb_arr[4 * index + 1] = r;
  rgb_arr[4 * index + 2] = scale8(b, 0xF0); // b;
  rgb_arr[4 * index + 3] = 0;
#else // WS2812B
  rgb_arr[3 * index] = scale8(g, 0xB0); // g;
 8000f98:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <NeoPixel_led_set_RGB+0x84>)
 8000f9a:	7818      	ldrb	r0, [r3, #0]
 8000f9c:	79fa      	ldrb	r2, [r7, #7]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	189c      	adds	r4, r3, r2
 8000fa4:	21b0      	movs	r1, #176	; 0xb0
 8000fa6:	f7ff ffce 	bl	8000f46 <scale8>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <NeoPixel_led_set_RGB+0x8c>)
 8000fb0:	551a      	strb	r2, [r3, r4]
  rgb_arr[3 * index + 1] = r;
 8000fb2:	79fa      	ldrb	r2, [r7, #7]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4413      	add	r3, r2
 8000fba:	3301      	adds	r3, #1
 8000fbc:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <NeoPixel_led_set_RGB+0x80>)
 8000fbe:	7811      	ldrb	r1, [r2, #0]
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <NeoPixel_led_set_RGB+0x8c>)
 8000fc2:	54d1      	strb	r1, [r2, r3]
  rgb_arr[3 * index + 2] = scale8(b, 0xF0); // b;
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <NeoPixel_led_set_RGB+0x88>)
 8000fc6:	7818      	ldrb	r0, [r3, #0]
 8000fc8:	79fa      	ldrb	r2, [r7, #7]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	1c9c      	adds	r4, r3, #2
 8000fd2:	21f0      	movs	r1, #240	; 0xf0
 8000fd4:	f7ff ffb7 	bl	8000f46 <scale8>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <NeoPixel_led_set_RGB+0x8c>)
 8000fde:	551a      	strb	r2, [r3, r4]
#endif // End SK6812 WS2812B case differentiation
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd90      	pop	{r4, r7, pc}
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	200003c6 	.word	0x200003c6
 8000ff0:	200003c5 	.word	0x200003c5
 8000ff4:	200003c4 	.word	0x200003c4
 8000ff8:	200001fc 	.word	0x200001fc

08000ffc <NeoPixel_led_render>:
  }
	NeoPixel_led_render();
}

// Shuttle the data to the LEDs!
void NeoPixel_led_render() {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
  if(wr_buf_p != 0 || hdma_tim1_ch2.State != HAL_DMA_STATE_READY) {
 8001002:	4b4d      	ldr	r3, [pc, #308]	; (8001138 <NeoPixel_led_render+0x13c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d105      	bne.n	8001016 <NeoPixel_led_render+0x1a>
 800100a:	4b4c      	ldr	r3, [pc, #304]	; (800113c <NeoPixel_led_render+0x140>)
 800100c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b01      	cmp	r3, #1
 8001014:	d014      	beq.n	8001040 <NeoPixel_led_render+0x44>
    // Ongoing transfer, cancel!
    for(uint8_t i = 0; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	e006      	b.n	800102a <NeoPixel_led_render+0x2e>
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	4a48      	ldr	r2, [pc, #288]	; (8001140 <NeoPixel_led_render+0x144>)
 8001020:	2100      	movs	r1, #0
 8001022:	54d1      	strb	r1, [r2, r3]
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	3301      	adds	r3, #1
 8001028:	71fb      	strb	r3, [r7, #7]
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b2f      	cmp	r3, #47	; 0x2f
 800102e:	d9f5      	bls.n	800101c <NeoPixel_led_render+0x20>
    wr_buf_p = 0;
 8001030:	4b41      	ldr	r3, [pc, #260]	; (8001138 <NeoPixel_led_render+0x13c>)
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001036:	2100      	movs	r1, #0
 8001038:	4842      	ldr	r0, [pc, #264]	; (8001144 <NeoPixel_led_render+0x148>)
 800103a:	f002 ff9f 	bl	8003f7c <HAL_TIM_PWM_Stop_DMA>
    return;
 800103e:	e078      	b.n	8001132 <NeoPixel_led_render+0x136>
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
    wr_buf[i + 48] = PWM_LO << (((rgb_arr[6] << i) & 0x80) > 0);
    wr_buf[i + 56] = PWM_LO << (((rgb_arr[7] << i) & 0x80) > 0);
  }
#else // WS2812B
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8001040:	2300      	movs	r3, #0
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	e069      	b.n	800111a <NeoPixel_led_render+0x11e>
    wr_buf[i     ] = PWM_LO << (((rgb_arr[0] << i) & 0x80) > 0);
 8001046:	4b40      	ldr	r3, [pc, #256]	; (8001148 <NeoPixel_led_render+0x14c>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001056:	2b00      	cmp	r3, #0
 8001058:	dd01      	ble.n	800105e <NeoPixel_led_render+0x62>
 800105a:	213a      	movs	r1, #58	; 0x3a
 800105c:	e000      	b.n	8001060 <NeoPixel_led_render+0x64>
 800105e:	211d      	movs	r1, #29
 8001060:	4a37      	ldr	r2, [pc, #220]	; (8001140 <NeoPixel_led_render+0x144>)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	4413      	add	r3, r2
 8001066:	460a      	mov	r2, r1
 8001068:	701a      	strb	r2, [r3, #0]
    wr_buf[i +  8] = PWM_LO << (((rgb_arr[1] << i) & 0x80) > 0);
 800106a:	4b37      	ldr	r3, [pc, #220]	; (8001148 <NeoPixel_led_render+0x14c>)
 800106c:	785b      	ldrb	r3, [r3, #1]
 800106e:	461a      	mov	r2, r3
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107a:	2b00      	cmp	r3, #0
 800107c:	dd01      	ble.n	8001082 <NeoPixel_led_render+0x86>
 800107e:	213a      	movs	r1, #58	; 0x3a
 8001080:	e000      	b.n	8001084 <NeoPixel_led_render+0x88>
 8001082:	211d      	movs	r1, #29
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	3308      	adds	r3, #8
 8001088:	4a2d      	ldr	r2, [pc, #180]	; (8001140 <NeoPixel_led_render+0x144>)
 800108a:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 16] = PWM_LO << (((rgb_arr[2] << i) & 0x80) > 0);
 800108c:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <NeoPixel_led_render+0x14c>)
 800108e:	789b      	ldrb	r3, [r3, #2]
 8001090:	461a      	mov	r2, r3
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109c:	2b00      	cmp	r3, #0
 800109e:	dd01      	ble.n	80010a4 <NeoPixel_led_render+0xa8>
 80010a0:	213a      	movs	r1, #58	; 0x3a
 80010a2:	e000      	b.n	80010a6 <NeoPixel_led_render+0xaa>
 80010a4:	211d      	movs	r1, #29
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	3310      	adds	r3, #16
 80010aa:	4a25      	ldr	r2, [pc, #148]	; (8001140 <NeoPixel_led_render+0x144>)
 80010ac:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 24] = PWM_LO << (((rgb_arr[3] << i) & 0x80) > 0);
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <NeoPixel_led_render+0x14c>)
 80010b0:	78db      	ldrb	r3, [r3, #3]
 80010b2:	461a      	mov	r2, r3
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010be:	2b00      	cmp	r3, #0
 80010c0:	dd01      	ble.n	80010c6 <NeoPixel_led_render+0xca>
 80010c2:	213a      	movs	r1, #58	; 0x3a
 80010c4:	e000      	b.n	80010c8 <NeoPixel_led_render+0xcc>
 80010c6:	211d      	movs	r1, #29
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	3318      	adds	r3, #24
 80010cc:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <NeoPixel_led_render+0x144>)
 80010ce:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 32] = PWM_LO << (((rgb_arr[4] << i) & 0x80) > 0);
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <NeoPixel_led_render+0x14c>)
 80010d2:	791b      	ldrb	r3, [r3, #4]
 80010d4:	461a      	mov	r2, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	dd01      	ble.n	80010e8 <NeoPixel_led_render+0xec>
 80010e4:	213a      	movs	r1, #58	; 0x3a
 80010e6:	e000      	b.n	80010ea <NeoPixel_led_render+0xee>
 80010e8:	211d      	movs	r1, #29
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	3320      	adds	r3, #32
 80010ee:	4a14      	ldr	r2, [pc, #80]	; (8001140 <NeoPixel_led_render+0x144>)
 80010f0:	54d1      	strb	r1, [r2, r3]
    wr_buf[i + 40] = PWM_LO << (((rgb_arr[5] << i) & 0x80) > 0);
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <NeoPixel_led_render+0x14c>)
 80010f4:	795b      	ldrb	r3, [r3, #5]
 80010f6:	461a      	mov	r2, r3
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001102:	2b00      	cmp	r3, #0
 8001104:	dd01      	ble.n	800110a <NeoPixel_led_render+0x10e>
 8001106:	213a      	movs	r1, #58	; 0x3a
 8001108:	e000      	b.n	800110c <NeoPixel_led_render+0x110>
 800110a:	211d      	movs	r1, #29
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	3328      	adds	r3, #40	; 0x28
 8001110:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <NeoPixel_led_render+0x144>)
 8001112:	54d1      	strb	r1, [r2, r3]
  for(uint_fast8_t i = 0; i < 8; ++i) {
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	2b07      	cmp	r3, #7
 800111e:	d992      	bls.n	8001046 <NeoPixel_led_render+0x4a>
//	dmaState = HAL_DMA_GetState(&hdma_tim1_ch2);
//	if(newStatus == HAL_OK){
//		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "newstatus=%02X#\r\n", newStatus), 1000);
//		HAL_UART_Transmit(&huart2 , (void *)str , sprintf(str, "dmaState=%02X#\r\n", dmaState), 1000);
//	}
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)wr_buf, WR_BUF_LEN);
 8001120:	2330      	movs	r3, #48	; 0x30
 8001122:	4a07      	ldr	r2, [pc, #28]	; (8001140 <NeoPixel_led_render+0x144>)
 8001124:	2100      	movs	r1, #0
 8001126:	4807      	ldr	r0, [pc, #28]	; (8001144 <NeoPixel_led_render+0x148>)
 8001128:	f002 fd86 	bl	8003c38 <HAL_TIM_PWM_Start_DMA>
  wr_buf_p = 2; // Since we're ready for the next buffer
 800112c:	4b02      	ldr	r3, [pc, #8]	; (8001138 <NeoPixel_led_render+0x13c>)
 800112e:	2202      	movs	r2, #2
 8001130:	601a      	str	r2, [r3, #0]
}
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000244 	.word	0x20000244
 800113c:	200006e8 	.word	0x200006e8
 8001140:	20000214 	.word	0x20000214
 8001144:	20000258 	.word	0x20000258
 8001148:	200001fc 	.word	0x200001fc

0800114c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:

void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim) {
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8001154:	4b39      	ldr	r3, [pc, #228]	; (800123c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b07      	cmp	r3, #7
 800115a:	d853      	bhi.n	8001204 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb8>
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	e047      	b.n	80011f2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa6>
      wr_buf[i     ] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 8001162:	4b36      	ldr	r3, [pc, #216]	; (800123c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4613      	mov	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4413      	add	r3, r2
 800116c:	4a34      	ldr	r2, [pc, #208]	; (8001240 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800116e:	5cd3      	ldrb	r3, [r2, r3]
 8001170:	461a      	mov	r2, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800117c:	2b00      	cmp	r3, #0
 800117e:	dd01      	ble.n	8001184 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
 8001180:	213a      	movs	r1, #58	; 0x3a
 8001182:	e000      	b.n	8001186 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x3a>
 8001184:	211d      	movs	r1, #29
 8001186:	4a2f      	ldr	r2, [pc, #188]	; (8001244 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	460a      	mov	r2, r1
 800118e:	701a      	strb	r2, [r3, #0]
      wr_buf[i +  8] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 8001190:	4b2a      	ldr	r3, [pc, #168]	; (800123c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4613      	mov	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4413      	add	r3, r2
 800119a:	3301      	adds	r3, #1
 800119c:	4a28      	ldr	r2, [pc, #160]	; (8001240 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 800119e:	5cd3      	ldrb	r3, [r2, r3]
 80011a0:	461a      	mov	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	dd01      	ble.n	80011b4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x68>
 80011b0:	213a      	movs	r1, #58	; 0x3a
 80011b2:	e000      	b.n	80011b6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x6a>
 80011b4:	211d      	movs	r1, #29
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3308      	adds	r3, #8
 80011ba:	4a22      	ldr	r2, [pc, #136]	; (8001244 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80011bc:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 16] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	3302      	adds	r3, #2
 80011ca:	4a1d      	ldr	r2, [pc, #116]	; (8001240 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf4>)
 80011cc:	5cd3      	ldrb	r3, [r2, r3]
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011da:	2b00      	cmp	r3, #0
 80011dc:	dd01      	ble.n	80011e2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x96>
 80011de:	213a      	movs	r1, #58	; 0x3a
 80011e0:	e000      	b.n	80011e4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x98>
 80011e2:	211d      	movs	r1, #29
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3310      	adds	r3, #16
 80011e8:	4a16      	ldr	r2, [pc, #88]	; (8001244 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 80011ea:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	3301      	adds	r3, #1
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2b07      	cmp	r3, #7
 80011f6:	d9b4      	bls.n	8001162 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 80011f8:	4b10      	ldr	r3, [pc, #64]	; (800123c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	3301      	adds	r3, #1
 80011fe:	4a0f      	ldr	r2, [pc, #60]	; (800123c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8001200:	6013      	str	r3, [r2, #0]
  	//                               WS2812B: 48 * 1.25 us = 60 us == good enough reset
    // First half reset zero fill
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
    wr_buf_p++;
  }
}
 8001202:	e015      	b.n	8001230 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 8001204:	4b0d      	ldr	r3, [pc, #52]	; (800123c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b09      	cmp	r3, #9
 800120a:	d811      	bhi.n	8001230 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe4>
    for(uint8_t i = 0; i < WR_BUF_LEN / 2; ++i) wr_buf[i] = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	72fb      	strb	r3, [r7, #11]
 8001210:	e006      	b.n	8001220 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd4>
 8001212:	7afb      	ldrb	r3, [r7, #11]
 8001214:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf8>)
 8001216:	2100      	movs	r1, #0
 8001218:	54d1      	strb	r1, [r2, r3]
 800121a:	7afb      	ldrb	r3, [r7, #11]
 800121c:	3301      	adds	r3, #1
 800121e:	72fb      	strb	r3, [r7, #11]
 8001220:	7afb      	ldrb	r3, [r7, #11]
 8001222:	2b17      	cmp	r3, #23
 8001224:	d9f5      	bls.n	8001212 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc6>
    wr_buf_p++;
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	4a03      	ldr	r2, [pc, #12]	; (800123c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xf0>)
 800122e:	6013      	str	r3, [r2, #0]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000244 	.word	0x20000244
 8001240:	200001fc 	.word	0x200001fc
 8001244:	20000214 	.word	0x20000214

08001248 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  // DMA buffer set from LED(wr_buf_p) to LED(wr_buf_p + 1)
  if(wr_buf_p < NUM_PIXELS) {
 8001250:	4b3c      	ldr	r3, [pc, #240]	; (8001344 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b07      	cmp	r3, #7
 8001256:	d852      	bhi.n	80012fe <HAL_TIM_PWM_PulseFinishedCallback+0xb6>
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 1] << i) & 0x80) > 0);
      wr_buf[i + 48] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 2] << i) & 0x80) > 0);
      wr_buf[i + 56] = PWM_LO << (((rgb_arr[4 * wr_buf_p + 3] << i) & 0x80) > 0);
    }
#else // WS2812B
    for(uint_fast8_t i = 0; i < 8; ++i) {
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	e046      	b.n	80012ec <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
      wr_buf[i + 24] = PWM_LO << (((rgb_arr[3 * wr_buf_p    ] << i) & 0x80) > 0);
 800125e:	4b39      	ldr	r3, [pc, #228]	; (8001344 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4613      	mov	r3, r2
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	4413      	add	r3, r2
 8001268:	4a37      	ldr	r2, [pc, #220]	; (8001348 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 800126a:	5cd3      	ldrb	r3, [r2, r3]
 800126c:	461a      	mov	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001278:	2b00      	cmp	r3, #0
 800127a:	dd01      	ble.n	8001280 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 800127c:	213a      	movs	r1, #58	; 0x3a
 800127e:	e000      	b.n	8001282 <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
 8001280:	211d      	movs	r1, #29
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3318      	adds	r3, #24
 8001286:	4a31      	ldr	r2, [pc, #196]	; (800134c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001288:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 32] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 1] << i) & 0x80) > 0);
 800128a:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4613      	mov	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	3301      	adds	r3, #1
 8001296:	4a2c      	ldr	r2, [pc, #176]	; (8001348 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 8001298:	5cd3      	ldrb	r3, [r2, r3]
 800129a:	461a      	mov	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	dd01      	ble.n	80012ae <HAL_TIM_PWM_PulseFinishedCallback+0x66>
 80012aa:	213a      	movs	r1, #58	; 0x3a
 80012ac:	e000      	b.n	80012b0 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 80012ae:	211d      	movs	r1, #29
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	3320      	adds	r3, #32
 80012b4:	4a25      	ldr	r2, [pc, #148]	; (800134c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80012b6:	54d1      	strb	r1, [r2, r3]
      wr_buf[i + 40] = PWM_LO << (((rgb_arr[3 * wr_buf_p + 2] << i) & 0x80) > 0);
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4613      	mov	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	3302      	adds	r3, #2
 80012c4:	4a20      	ldr	r2, [pc, #128]	; (8001348 <HAL_TIM_PWM_PulseFinishedCallback+0x100>)
 80012c6:	5cd3      	ldrb	r3, [r2, r3]
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	dd01      	ble.n	80012dc <HAL_TIM_PWM_PulseFinishedCallback+0x94>
 80012d8:	213a      	movs	r1, #58	; 0x3a
 80012da:	e000      	b.n	80012de <HAL_TIM_PWM_PulseFinishedCallback+0x96>
 80012dc:	211d      	movs	r1, #29
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3328      	adds	r3, #40	; 0x28
 80012e2:	4a1a      	ldr	r2, [pc, #104]	; (800134c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 80012e4:	54d1      	strb	r1, [r2, r3]
    for(uint_fast8_t i = 0; i < 8; ++i) {
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3301      	adds	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b07      	cmp	r3, #7
 80012f0:	d9b5      	bls.n	800125e <HAL_TIM_PWM_PulseFinishedCallback+0x16>
    }
#endif // End SK6812 WS2812B case differentiation
    wr_buf_p++;
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	3301      	adds	r3, #1
 80012f8:	4a12      	ldr	r2, [pc, #72]	; (8001344 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 80012fa:	6013      	str	r3, [r2, #0]
  } else {
    // We're done. Lean back and until next time!
    wr_buf_p = 0;
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
  }
}
 80012fc:	e01d      	b.n	800133a <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
  } else if (wr_buf_p < NUM_PIXELS + 2) {
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b09      	cmp	r3, #9
 8001304:	d812      	bhi.n	800132c <HAL_TIM_PWM_PulseFinishedCallback+0xe4>
    for(uint8_t i = WR_BUF_LEN / 2; i < WR_BUF_LEN; ++i) wr_buf[i] = 0;
 8001306:	2318      	movs	r3, #24
 8001308:	72fb      	strb	r3, [r7, #11]
 800130a:	e006      	b.n	800131a <HAL_TIM_PWM_PulseFinishedCallback+0xd2>
 800130c:	7afb      	ldrb	r3, [r7, #11]
 800130e:	4a0f      	ldr	r2, [pc, #60]	; (800134c <HAL_TIM_PWM_PulseFinishedCallback+0x104>)
 8001310:	2100      	movs	r1, #0
 8001312:	54d1      	strb	r1, [r2, r3]
 8001314:	7afb      	ldrb	r3, [r7, #11]
 8001316:	3301      	adds	r3, #1
 8001318:	72fb      	strb	r3, [r7, #11]
 800131a:	7afb      	ldrb	r3, [r7, #11]
 800131c:	2b2f      	cmp	r3, #47	; 0x2f
 800131e:	d9f5      	bls.n	800130c <HAL_TIM_PWM_PulseFinishedCallback+0xc4>
    ++wr_buf_p;
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	4a07      	ldr	r2, [pc, #28]	; (8001344 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 8001328:	6013      	str	r3, [r2, #0]
}
 800132a:	e006      	b.n	800133a <HAL_TIM_PWM_PulseFinishedCallback+0xf2>
    wr_buf_p = 0;
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_TIM_PWM_PulseFinishedCallback+0xfc>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001332:	2100      	movs	r1, #0
 8001334:	4806      	ldr	r0, [pc, #24]	; (8001350 <HAL_TIM_PWM_PulseFinishedCallback+0x108>)
 8001336:	f002 fe21 	bl	8003f7c <HAL_TIM_PWM_Stop_DMA>
}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000244 	.word	0x20000244
 8001348:	200001fc 	.word	0x200001fc
 800134c:	20000214 	.word	0x20000214
 8001350:	20000258 	.word	0x20000258

08001354 <NeoPixel_set_led_cycle>:

void NeoPixel_set_led_cycle(){
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_LED; i++) {
 800135a:	2300      	movs	r3, #0
 800135c:	71fb      	strb	r3, [r7, #7]
 800135e:	e014      	b.n	800138a <NeoPixel_set_led_cycle+0x36>
		 NeoPixel_hslColor(angle + (i * angle_difference), 255, 127);
 8001360:	220b      	movs	r2, #11
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	fb03 f302 	mul.w	r3, r3, r2
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <NeoPixel_set_led_cycle+0x5c>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	4413      	add	r3, r2
 8001370:	b2db      	uxtb	r3, r3
 8001372:	227f      	movs	r2, #127	; 0x7f
 8001374:	21ff      	movs	r1, #255	; 0xff
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f81c 	bl	80013b4 <NeoPixel_hslColor>
		 NeoPixel_led_set_RGB(i);
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fdf4 	bl	8000f6c <NeoPixel_led_set_RGB>
	for(uint8_t i = 0; i < MAX_LED; i++) {
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	3301      	adds	r3, #1
 8001388:	71fb      	strb	r3, [r7, #7]
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2b03      	cmp	r3, #3
 800138e:	d9e7      	bls.n	8001360 <NeoPixel_set_led_cycle+0xc>
	}
	++angle;
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <NeoPixel_set_led_cycle+0x5c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	3301      	adds	r3, #1
 8001396:	b2da      	uxtb	r2, r3
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <NeoPixel_set_led_cycle+0x5c>)
 800139a:	701a      	strb	r2, [r3, #0]
	NeoPixel_led_render();
 800139c:	f7ff fe2e 	bl	8000ffc <NeoPixel_led_render>
	HAL_Delay(10);
 80013a0:	200a      	movs	r0, #10
 80013a2:	f000 fc99 	bl	8001cd8 <HAL_Delay>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000248 	.word	0x20000248

080013b4 <NeoPixel_hslColor>:

void  NeoPixel_hslColor(uint8_t h, uint8_t s, uint8_t l){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
 80013be:	460b      	mov	r3, r1
 80013c0:	71bb      	strb	r3, [r7, #6]
 80013c2:	4613      	mov	r3, r2
 80013c4:	717b      	strb	r3, [r7, #5]
	NeoPixel_hsl_to_rgb(h, s, l);
 80013c6:	797a      	ldrb	r2, [r7, #5]
 80013c8:	79b9      	ldrb	r1, [r7, #6]
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 f805 	bl	80013dc <NeoPixel_hsl_to_rgb>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <NeoPixel_hsl_to_rgb>:
void NeoPixel_hsl_to_rgb(uint8_t h, uint8_t s, uint8_t l) {
 80013dc:	b480      	push	{r7}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
 80013e6:	460b      	mov	r3, r1
 80013e8:	71bb      	strb	r3, [r7, #6]
 80013ea:	4613      	mov	r3, r2
 80013ec:	717b      	strb	r3, [r7, #5]
	if(l == 0) return;
 80013ee:	797b      	ldrb	r3, [r7, #5]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80b6 	beq.w	8001562 <NeoPixel_hsl_to_rgb+0x186>

	volatile uint8_t  r, g, b, lo, c, x, m;
	volatile uint16_t h1, l1, H;
	l1 = l + 1;
 80013f6:	797b      	ldrb	r3, [r7, #5]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	3301      	adds	r3, #1
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	81bb      	strh	r3, [r7, #12]
	if (l < 128)    c = ((l1 << 1) * s) >> 8;
 8001400:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db09      	blt.n	800141c <NeoPixel_hsl_to_rgb+0x40>
 8001408:	89bb      	ldrh	r3, [r7, #12]
 800140a:	b29b      	uxth	r3, r3
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	79ba      	ldrb	r2, [r7, #6]
 8001410:	fb02 f303 	mul.w	r3, r2, r3
 8001414:	121b      	asrs	r3, r3, #8
 8001416:	b2db      	uxtb	r3, r3
 8001418:	74fb      	strb	r3, [r7, #19]
 800141a:	e00a      	b.n	8001432 <NeoPixel_hsl_to_rgb+0x56>
	else            c = (512 - (l1 << 1)) * s >> 8;
 800141c:	89bb      	ldrh	r3, [r7, #12]
 800141e:	b29b      	uxth	r3, r3
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001426:	79ba      	ldrb	r2, [r7, #6]
 8001428:	fb02 f303 	mul.w	r3, r2, r3
 800142c:	121b      	asrs	r3, r3, #8
 800142e:	b2db      	uxtb	r3, r3
 8001430:	74fb      	strb	r3, [r7, #19]

	H = h * 6;              // 0 to 1535 (actually 1530)
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	b29b      	uxth	r3, r3
 8001436:	461a      	mov	r2, r3
 8001438:	0052      	lsls	r2, r2, #1
 800143a:	4413      	add	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	b29b      	uxth	r3, r3
 8001440:	817b      	strh	r3, [r7, #10]
	lo = H & 255;           // Low byte  = primary/secondary color mix
 8001442:	897b      	ldrh	r3, [r7, #10]
 8001444:	b29b      	uxth	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	753b      	strb	r3, [r7, #20]
	h1 = lo + 1;
 800144a:	7d3b      	ldrb	r3, [r7, #20]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	b29b      	uxth	r3, r3
 8001450:	3301      	adds	r3, #1
 8001452:	b29b      	uxth	r3, r3
 8001454:	81fb      	strh	r3, [r7, #14]

	if ((H & 256) == 0)   x = h1 * c >> 8;          // even sextant, like red to yellow
 8001456:	897b      	ldrh	r3, [r7, #10]
 8001458:	b29b      	uxth	r3, r3
 800145a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145e:	2b00      	cmp	r3, #0
 8001460:	d109      	bne.n	8001476 <NeoPixel_hsl_to_rgb+0x9a>
 8001462:	89fb      	ldrh	r3, [r7, #14]
 8001464:	b29b      	uxth	r3, r3
 8001466:	7cfa      	ldrb	r2, [r7, #19]
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	121b      	asrs	r3, r3, #8
 8001470:	b2db      	uxtb	r3, r3
 8001472:	74bb      	strb	r3, [r7, #18]
 8001474:	e00a      	b.n	800148c <NeoPixel_hsl_to_rgb+0xb0>
	else                  x = (256 - h1) * c >> 8;  // odd sextant, like yellow to green
 8001476:	89fb      	ldrh	r3, [r7, #14]
 8001478:	b29b      	uxth	r3, r3
 800147a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800147e:	7cfa      	ldrb	r2, [r7, #19]
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	fb02 f303 	mul.w	r3, r2, r3
 8001486:	121b      	asrs	r3, r3, #8
 8001488:	b2db      	uxtb	r3, r3
 800148a:	74bb      	strb	r3, [r7, #18]

	 m = l - (c >> 1);
 800148c:	7cfb      	ldrb	r3, [r7, #19]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	085b      	lsrs	r3, r3, #1
 8001492:	b2db      	uxtb	r3, r3
 8001494:	797a      	ldrb	r2, [r7, #5]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	b2db      	uxtb	r3, r3
 800149a:	747b      	strb	r3, [r7, #17]
	 switch(H >> 8) {       // High byte = sextant of colorwheel
 800149c:	897b      	ldrh	r3, [r7, #10]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	0a1b      	lsrs	r3, r3, #8
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d83a      	bhi.n	800151e <NeoPixel_hsl_to_rgb+0x142>
 80014a8:	a201      	add	r2, pc, #4	; (adr r2, 80014b0 <NeoPixel_hsl_to_rgb+0xd4>)
 80014aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ae:	bf00      	nop
 80014b0:	080014c5 	.word	0x080014c5
 80014b4:	080014d7 	.word	0x080014d7
 80014b8:	080014e9 	.word	0x080014e9
 80014bc:	080014fb 	.word	0x080014fb
 80014c0:	0800150d 	.word	0x0800150d
	 case 0 : r = c; g = x; b = 0; break; // R to Y
 80014c4:	7cfb      	ldrb	r3, [r7, #19]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	75fb      	strb	r3, [r7, #23]
 80014ca:	7cbb      	ldrb	r3, [r7, #18]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	75bb      	strb	r3, [r7, #22]
 80014d0:	2300      	movs	r3, #0
 80014d2:	757b      	strb	r3, [r7, #21]
 80014d4:	e02c      	b.n	8001530 <NeoPixel_hsl_to_rgb+0x154>
	 case 1 : r = x; g = c; b = 0; break; // Y to G
 80014d6:	7cbb      	ldrb	r3, [r7, #18]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	75fb      	strb	r3, [r7, #23]
 80014dc:	7cfb      	ldrb	r3, [r7, #19]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	75bb      	strb	r3, [r7, #22]
 80014e2:	2300      	movs	r3, #0
 80014e4:	757b      	strb	r3, [r7, #21]
 80014e6:	e023      	b.n	8001530 <NeoPixel_hsl_to_rgb+0x154>
	 case 2 : r = 0; g = c; b = x; break; // G to C
 80014e8:	2300      	movs	r3, #0
 80014ea:	75fb      	strb	r3, [r7, #23]
 80014ec:	7cfb      	ldrb	r3, [r7, #19]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	75bb      	strb	r3, [r7, #22]
 80014f2:	7cbb      	ldrb	r3, [r7, #18]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	757b      	strb	r3, [r7, #21]
 80014f8:	e01a      	b.n	8001530 <NeoPixel_hsl_to_rgb+0x154>
	 case 3 : r = 0; g = x; b = c; break; // C to B
 80014fa:	2300      	movs	r3, #0
 80014fc:	75fb      	strb	r3, [r7, #23]
 80014fe:	7cbb      	ldrb	r3, [r7, #18]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	75bb      	strb	r3, [r7, #22]
 8001504:	7cfb      	ldrb	r3, [r7, #19]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	757b      	strb	r3, [r7, #21]
 800150a:	e011      	b.n	8001530 <NeoPixel_hsl_to_rgb+0x154>
	 case 4 : r = x; g = 0; b = c; break; // B to M
 800150c:	7cbb      	ldrb	r3, [r7, #18]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	75fb      	strb	r3, [r7, #23]
 8001512:	2300      	movs	r3, #0
 8001514:	75bb      	strb	r3, [r7, #22]
 8001516:	7cfb      	ldrb	r3, [r7, #19]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	757b      	strb	r3, [r7, #21]
 800151c:	e008      	b.n	8001530 <NeoPixel_hsl_to_rgb+0x154>
	 default: r = c; g = 0; b = x; break; // M to R
 800151e:	7cfb      	ldrb	r3, [r7, #19]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	75fb      	strb	r3, [r7, #23]
 8001524:	2300      	movs	r3, #0
 8001526:	75bb      	strb	r3, [r7, #22]
 8001528:	7cbb      	ldrb	r3, [r7, #18]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	757b      	strb	r3, [r7, #21]
 800152e:	bf00      	nop
	}
     NeoPixel_RGB_Color = (((uint32_t)r + m) << 16) | (((uint32_t)g + m) << 8) | ((uint32_t)b + m);
 8001530:	7dfb      	ldrb	r3, [r7, #23]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	7c7b      	ldrb	r3, [r7, #17]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	4413      	add	r3, r2
 800153c:	041a      	lsls	r2, r3, #16
 800153e:	7dbb      	ldrb	r3, [r7, #22]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	4619      	mov	r1, r3
 8001544:	7c7b      	ldrb	r3, [r7, #17]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	440b      	add	r3, r1
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	431a      	orrs	r2, r3
 800154e:	7d7b      	ldrb	r3, [r7, #21]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4619      	mov	r1, r3
 8001554:	7c7b      	ldrb	r3, [r7, #17]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	440b      	add	r3, r1
 800155a:	4313      	orrs	r3, r2
 800155c:	4a03      	ldr	r2, [pc, #12]	; (800156c <NeoPixel_hsl_to_rgb+0x190>)
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	e000      	b.n	8001564 <NeoPixel_hsl_to_rgb+0x188>
	if(l == 0) return;
 8001562:	bf00      	nop
}
 8001564:	371c      	adds	r7, #28
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	20000000 	.word	0x20000000

08001570 <SCH_Update>:

		current_index_task++;
	}
}

void SCH_Update(void){
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
	for(int i =0 ; i<current_index_task;i++){
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	e048      	b.n	800160e <SCH_Update+0x9e>
		if(SCH_tasks_G[i].Delay > 0){
 800157c:	492a      	ldr	r1, [pc, #168]	; (8001628 <SCH_Update+0xb8>)
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	3304      	adds	r3, #4
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d013      	beq.n	80015ba <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay --;
 8001592:	4925      	ldr	r1, [pc, #148]	; (8001628 <SCH_Update+0xb8>)
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	440b      	add	r3, r1
 80015a0:	3304      	adds	r3, #4
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	1e59      	subs	r1, r3, #1
 80015a6:	4820      	ldr	r0, [pc, #128]	; (8001628 <SCH_Update+0xb8>)
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4403      	add	r3, r0
 80015b4:	3304      	adds	r3, #4
 80015b6:	6019      	str	r1, [r3, #0]
 80015b8:	e026      	b.n	8001608 <SCH_Update+0x98>
		}else{
			SCH_tasks_G[i].RunMe += 1;
 80015ba:	491b      	ldr	r1, [pc, #108]	; (8001628 <SCH_Update+0xb8>)
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	440b      	add	r3, r1
 80015c8:	330c      	adds	r3, #12
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	3301      	adds	r3, #1
 80015ce:	b2d8      	uxtb	r0, r3
 80015d0:	4915      	ldr	r1, [pc, #84]	; (8001628 <SCH_Update+0xb8>)
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	330c      	adds	r3, #12
 80015e0:	4602      	mov	r2, r0
 80015e2:	701a      	strb	r2, [r3, #0]
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 80015e4:	4910      	ldr	r1, [pc, #64]	; (8001628 <SCH_Update+0xb8>)
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	3308      	adds	r3, #8
 80015f4:	6819      	ldr	r1, [r3, #0]
 80015f6:	480c      	ldr	r0, [pc, #48]	; (8001628 <SCH_Update+0xb8>)
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4403      	add	r3, r0
 8001604:	3304      	adds	r3, #4
 8001606:	6019      	str	r1, [r3, #0]
	for(int i =0 ; i<current_index_task;i++){
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3301      	adds	r3, #1
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	4b07      	ldr	r3, [pc, #28]	; (800162c <SCH_Update+0xbc>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4293      	cmp	r3, r2
 8001618:	dbb0      	blt.n	800157c <SCH_Update+0xc>
		}
	}
}
 800161a:	bf00      	nop
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	200003c8 	.word	0x200003c8
 800162c:	20000249 	.word	0x20000249

08001630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_MspInit+0x5c>)
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	4a14      	ldr	r2, [pc, #80]	; (800168c <HAL_MspInit+0x5c>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6193      	str	r3, [r2, #24]
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_MspInit+0x5c>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <HAL_MspInit+0x5c>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	4a0e      	ldr	r2, [pc, #56]	; (800168c <HAL_MspInit+0x5c>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001658:	61d3      	str	r3, [r2, #28]
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_MspInit+0x5c>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_MspInit+0x60>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	4a04      	ldr	r2, [pc, #16]	; (8001690 <HAL_MspInit+0x60>)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	40021000 	.word	0x40021000
 8001690:	40010000 	.word	0x40010000

08001694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <NMI_Handler+0x4>

0800169a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <HardFault_Handler+0x4>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <MemManage_Handler+0x4>

080016a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr

080016be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016da:	f000 fae1 	bl	8001ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <DMA1_Channel3_IRQHandler+0x10>)
 80016ea:	f001 f845 	bl	8002778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200006e8 	.word	0x200006e8

080016f8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <ADC1_2_IRQHandler+0x10>)
 80016fe:	f000 fbe7 	bl	8001ed0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200002ec 	.word	0x200002ec

0800170c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <TIM2_IRQHandler+0x10>)
 8001712:	f002 fcf9 	bl	8004108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200002a0 	.word	0x200002a0

08001720 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
	return 1;
 8001724:	2301      	movs	r3, #1
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr

0800172e <_kill>:

int _kill(int pid, int sig)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001738:	f003 fbd2 	bl	8004ee0 <__errno>
 800173c:	4603      	mov	r3, r0
 800173e:	2216      	movs	r2, #22
 8001740:	601a      	str	r2, [r3, #0]
	return -1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <_exit>:

void _exit (int status)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001756:	f04f 31ff 	mov.w	r1, #4294967295
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ffe7 	bl	800172e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001760:	e7fe      	b.n	8001760 <_exit+0x12>

08001762 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	e00a      	b.n	800178a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001774:	f3af 8000 	nop.w
 8001778:	4601      	mov	r1, r0
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	1c5a      	adds	r2, r3, #1
 800177e:	60ba      	str	r2, [r7, #8]
 8001780:	b2ca      	uxtb	r2, r1
 8001782:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	3301      	adds	r3, #1
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	429a      	cmp	r2, r3
 8001790:	dbf0      	blt.n	8001774 <_read+0x12>
	}

return len;
 8001792:	687b      	ldr	r3, [r7, #4]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	e009      	b.n	80017c2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	60ba      	str	r2, [r7, #8]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	dbf1      	blt.n	80017ae <_write+0x12>
	}
	return len;
 80017ca:	687b      	ldr	r3, [r7, #4]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <_close>:

int _close(int file)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	return -1;
 80017dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017fa:	605a      	str	r2, [r3, #4]
	return 0;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <_isatty>:

int _isatty(int file)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	return 1;
 8001810:	2301      	movs	r3, #1
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
	return 0;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800183c:	4a14      	ldr	r2, [pc, #80]	; (8001890 <_sbrk+0x5c>)
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <_sbrk+0x60>)
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001848:	4b13      	ldr	r3, [pc, #76]	; (8001898 <_sbrk+0x64>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d102      	bne.n	8001856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <_sbrk+0x64>)
 8001852:	4a12      	ldr	r2, [pc, #72]	; (800189c <_sbrk+0x68>)
 8001854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	429a      	cmp	r2, r3
 8001862:	d207      	bcs.n	8001874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001864:	f003 fb3c 	bl	8004ee0 <__errno>
 8001868:	4603      	mov	r3, r0
 800186a:	220c      	movs	r2, #12
 800186c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
 8001872:	e009      	b.n	8001888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <_sbrk+0x64>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800187a:	4b07      	ldr	r3, [pc, #28]	; (8001898 <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <_sbrk+0x64>)
 8001884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001886:	68fb      	ldr	r3, [r7, #12]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20005000 	.word	0x20005000
 8001894:	00000400 	.word	0x00000400
 8001898:	2000024c 	.word	0x2000024c
 800189c:	20000740 	.word	0x20000740

080018a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b096      	sub	sp, #88	; 0x58
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]
 80018d8:	611a      	str	r2, [r3, #16]
 80018da:	615a      	str	r2, [r3, #20]
 80018dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	2220      	movs	r2, #32
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f003 fb25 	bl	8004f34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018ea:	4b44      	ldr	r3, [pc, #272]	; (80019fc <MX_TIM1_Init+0x150>)
 80018ec:	4a44      	ldr	r2, [pc, #272]	; (8001a00 <MX_TIM1_Init+0x154>)
 80018ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <MX_TIM1_Init+0x150>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f6:	4b41      	ldr	r3, [pc, #260]	; (80019fc <MX_TIM1_Init+0x150>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 47;
 80018fc:	4b3f      	ldr	r3, [pc, #252]	; (80019fc <MX_TIM1_Init+0x150>)
 80018fe:	222f      	movs	r2, #47	; 0x2f
 8001900:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001902:	4b3e      	ldr	r3, [pc, #248]	; (80019fc <MX_TIM1_Init+0x150>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <MX_TIM1_Init+0x150>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190e:	4b3b      	ldr	r3, [pc, #236]	; (80019fc <MX_TIM1_Init+0x150>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001914:	4839      	ldr	r0, [pc, #228]	; (80019fc <MX_TIM1_Init+0x150>)
 8001916:	f001 fff3 	bl	8003900 <HAL_TIM_Base_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001920:	f7ff fb0c 	bl	8000f3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001928:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800192a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800192e:	4619      	mov	r1, r3
 8001930:	4832      	ldr	r0, [pc, #200]	; (80019fc <MX_TIM1_Init+0x150>)
 8001932:	f002 fdb3 	bl	800449c <HAL_TIM_ConfigClockSource>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800193c:	f7ff fafe 	bl	8000f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001940:	482e      	ldr	r0, [pc, #184]	; (80019fc <MX_TIM1_Init+0x150>)
 8001942:	f002 f87f 	bl	8003a44 <HAL_TIM_PWM_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800194c:	f7ff faf6 	bl	8000f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001950:	2300      	movs	r3, #0
 8001952:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001958:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800195c:	4619      	mov	r1, r3
 800195e:	4827      	ldr	r0, [pc, #156]	; (80019fc <MX_TIM1_Init+0x150>)
 8001960:	f003 f9fc 	bl	8004d5c <HAL_TIMEx_MasterConfigSynchronization>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800196a:	f7ff fae7 	bl	8000f3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800196e:	2360      	movs	r3, #96	; 0x60
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001976:	2300      	movs	r3, #0
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800197a:	2300      	movs	r3, #0
 800197c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800198a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198e:	2200      	movs	r2, #0
 8001990:	4619      	mov	r1, r3
 8001992:	481a      	ldr	r0, [pc, #104]	; (80019fc <MX_TIM1_Init+0x150>)
 8001994:	f002 fcc0 	bl	8004318 <HAL_TIM_PWM_ConfigChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800199e:	f7ff facd 	bl	8000f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a6:	2204      	movs	r2, #4
 80019a8:	4619      	mov	r1, r3
 80019aa:	4814      	ldr	r0, [pc, #80]	; (80019fc <MX_TIM1_Init+0x150>)
 80019ac:	f002 fcb4 	bl	8004318 <HAL_TIM_PWM_ConfigChannel>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80019b6:	f7ff fac1 	bl	8000f3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	4619      	mov	r1, r3
 80019dc:	4807      	ldr	r0, [pc, #28]	; (80019fc <MX_TIM1_Init+0x150>)
 80019de:	f003 fa1b 	bl	8004e18 <HAL_TIMEx_ConfigBreakDeadTime>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80019e8:	f7ff faa8 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019ec:	4803      	ldr	r0, [pc, #12]	; (80019fc <MX_TIM1_Init+0x150>)
 80019ee:	f000 f8b7 	bl	8001b60 <HAL_TIM_MspPostInit>

}
 80019f2:	bf00      	nop
 80019f4:	3758      	adds	r7, #88	; 0x58
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000258 	.word	0x20000258
 8001a00:	40012c00 	.word	0x40012c00

08001a04 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a0a:	f107 0308 	add.w	r3, r7, #8
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a18:	463b      	mov	r3, r7
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <MX_TIM2_Init+0x94>)
 8001a22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4799;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <MX_TIM2_Init+0x94>)
 8001a2a:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001a2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <MX_TIM2_Init+0x94>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001a36:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <MX_TIM2_Init+0x94>)
 8001a38:	2263      	movs	r2, #99	; 0x63
 8001a3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <MX_TIM2_Init+0x94>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <MX_TIM2_Init+0x94>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a48:	4813      	ldr	r0, [pc, #76]	; (8001a98 <MX_TIM2_Init+0x94>)
 8001a4a:	f001 ff59 	bl	8003900 <HAL_TIM_Base_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a54:	f7ff fa72 	bl	8000f3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a5e:	f107 0308 	add.w	r3, r7, #8
 8001a62:	4619      	mov	r1, r3
 8001a64:	480c      	ldr	r0, [pc, #48]	; (8001a98 <MX_TIM2_Init+0x94>)
 8001a66:	f002 fd19 	bl	800449c <HAL_TIM_ConfigClockSource>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a70:	f7ff fa64 	bl	8000f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a74:	2300      	movs	r3, #0
 8001a76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_TIM2_Init+0x94>)
 8001a82:	f003 f96b 	bl	8004d5c <HAL_TIMEx_MasterConfigSynchronization>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a8c:	f7ff fa56 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200002a0 	.word	0x200002a0

08001a9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a29      	ldr	r2, [pc, #164]	; (8001b50 <HAL_TIM_Base_MspInit+0xb4>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d133      	bne.n	8001b16 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aae:	4b29      	ldr	r3, [pc, #164]	; (8001b54 <HAL_TIM_Base_MspInit+0xb8>)
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	4a28      	ldr	r2, [pc, #160]	; (8001b54 <HAL_TIM_Base_MspInit+0xb8>)
 8001ab4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ab8:	6193      	str	r3, [r2, #24]
 8001aba:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <HAL_TIM_Base_MspInit+0xb8>)
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 8001ac6:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <HAL_TIM_Base_MspInit+0xbc>)
 8001ac8:	4a24      	ldr	r2, [pc, #144]	; (8001b5c <HAL_TIM_Base_MspInit+0xc0>)
 8001aca:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001acc:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <HAL_TIM_Base_MspInit+0xbc>)
 8001ace:	2210      	movs	r2, #16
 8001ad0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad2:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <HAL_TIM_Base_MspInit+0xbc>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <HAL_TIM_Base_MspInit+0xbc>)
 8001ada:	2280      	movs	r2, #128	; 0x80
 8001adc:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ade:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <HAL_TIM_Base_MspInit+0xbc>)
 8001ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <HAL_TIM_Base_MspInit+0xbc>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <HAL_TIM_Base_MspInit+0xbc>)
 8001aee:	2220      	movs	r2, #32
 8001af0:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001af2:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_TIM_Base_MspInit+0xbc>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8001af8:	4817      	ldr	r0, [pc, #92]	; (8001b58 <HAL_TIM_Base_MspInit+0xbc>)
 8001afa:	f000 fd0b 	bl	8002514 <HAL_DMA_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_TIM_Base_MspInit+0x6c>
    {
      Error_Handler();
 8001b04:	f7ff fa1a 	bl	8000f3c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a13      	ldr	r2, [pc, #76]	; (8001b58 <HAL_TIM_Base_MspInit+0xbc>)
 8001b0c:	629a      	str	r2, [r3, #40]	; 0x28
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <HAL_TIM_Base_MspInit+0xbc>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b14:	e018      	b.n	8001b48 <HAL_TIM_Base_MspInit+0xac>
  else if(tim_baseHandle->Instance==TIM2)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b1e:	d113      	bne.n	8001b48 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <HAL_TIM_Base_MspInit+0xb8>)
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <HAL_TIM_Base_MspInit+0xb8>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	61d3      	str	r3, [r2, #28]
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_TIM_Base_MspInit+0xb8>)
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	201c      	movs	r0, #28
 8001b3e:	f000 fcb2 	bl	80024a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b42:	201c      	movs	r0, #28
 8001b44:	f000 fccb 	bl	80024de <HAL_NVIC_EnableIRQ>
}
 8001b48:	bf00      	nop
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40012c00 	.word	0x40012c00
 8001b54:	40021000 	.word	0x40021000
 8001b58:	200006e8 	.word	0x200006e8
 8001b5c:	40020030 	.word	0x40020030

08001b60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0310 	add.w	r3, r7, #16
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a10      	ldr	r2, [pc, #64]	; (8001bbc <HAL_TIM_MspPostInit+0x5c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d118      	bne.n	8001bb2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <HAL_TIM_MspPostInit+0x60>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <HAL_TIM_MspPostInit+0x60>)
 8001b86:	f043 0304 	orr.w	r3, r3, #4
 8001b8a:	6193      	str	r3, [r2, #24]
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <HAL_TIM_MspPostInit+0x60>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f107 0310 	add.w	r3, r7, #16
 8001baa:	4619      	mov	r1, r3
 8001bac:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <HAL_TIM_MspPostInit+0x64>)
 8001bae:	f000 ff17 	bl	80029e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3720      	adds	r7, #32
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40012c00 	.word	0x40012c00
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40010800 	.word	0x40010800

08001bc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc8:	f7ff fe6a 	bl	80018a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bcc:	480b      	ldr	r0, [pc, #44]	; (8001bfc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bce:	490c      	ldr	r1, [pc, #48]	; (8001c00 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bd0:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd4:	e002      	b.n	8001bdc <LoopCopyDataInit>

08001bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bda:	3304      	adds	r3, #4

08001bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be0:	d3f9      	bcc.n	8001bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be2:	4a09      	ldr	r2, [pc, #36]	; (8001c08 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001be4:	4c09      	ldr	r4, [pc, #36]	; (8001c0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be8:	e001      	b.n	8001bee <LoopFillZerobss>

08001bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bec:	3204      	adds	r2, #4

08001bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf0:	d3fb      	bcc.n	8001bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f003 f97b 	bl	8004eec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bf6:	f7ff f917 	bl	8000e28 <main>
  bx lr
 8001bfa:	4770      	bx	lr
  ldr r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c00:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001c04:	08007d1c 	.word	0x08007d1c
  ldr r2, =_sbss
 8001c08:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001c0c:	20000740 	.word	0x20000740

08001c10 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c10:	e7fe      	b.n	8001c10 <CAN1_RX1_IRQHandler>
	...

08001c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <HAL_Init+0x28>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <HAL_Init+0x28>)
 8001c1e:	f043 0310 	orr.w	r3, r3, #16
 8001c22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c24:	2003      	movs	r0, #3
 8001c26:	f000 fc33 	bl	8002490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2a:	200f      	movs	r0, #15
 8001c2c:	f000 f808 	bl	8001c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c30:	f7ff fcfe 	bl	8001630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40022000 	.word	0x40022000

08001c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_InitTick+0x54>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_InitTick+0x58>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 fc4b 	bl	80024fa <HAL_SYSTICK_Config>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00e      	b.n	8001c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b0f      	cmp	r3, #15
 8001c72:	d80a      	bhi.n	8001c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c74:	2200      	movs	r2, #0
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f000 fc13 	bl	80024a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c80:	4a06      	ldr	r2, [pc, #24]	; (8001c9c <HAL_InitTick+0x5c>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000004 	.word	0x20000004
 8001c98:	2000000c 	.word	0x2000000c
 8001c9c:	20000008 	.word	0x20000008

08001ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_IncTick+0x1c>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_IncTick+0x20>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <HAL_IncTick+0x20>)
 8001cb2:	6013      	str	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	2000000c 	.word	0x2000000c
 8001cc0:	2000072c 	.word	0x2000072c

08001cc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc8:	4b02      	ldr	r3, [pc, #8]	; (8001cd4 <HAL_GetTick+0x10>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	2000072c 	.word	0x2000072c

08001cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce0:	f7ff fff0 	bl	8001cc4 <HAL_GetTick>
 8001ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf0:	d005      	beq.n	8001cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <HAL_Delay+0x44>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cfe:	bf00      	nop
 8001d00:	f7ff ffe0 	bl	8001cc4 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d8f7      	bhi.n	8001d00 <HAL_Delay+0x28>
  {
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	2000000c 	.word	0x2000000c

08001d20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e0be      	b.n	8001ec0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d109      	bne.n	8001d64 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7fe fed0 	bl	8000b04 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fa7d 	bl	8002264 <ADC_ConversionStop_Disable>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d72:	f003 0310 	and.w	r3, r3, #16
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f040 8099 	bne.w	8001eae <HAL_ADC_Init+0x18e>
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f040 8095 	bne.w	8001eae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d8c:	f023 0302 	bic.w	r3, r3, #2
 8001d90:	f043 0202 	orr.w	r2, r3, #2
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001da0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7b1b      	ldrb	r3, [r3, #12]
 8001da6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001da8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001db8:	d003      	beq.n	8001dc2 <HAL_ADC_Init+0xa2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d102      	bne.n	8001dc8 <HAL_ADC_Init+0xa8>
 8001dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dc6:	e000      	b.n	8001dca <HAL_ADC_Init+0xaa>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	7d1b      	ldrb	r3, [r3, #20]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d119      	bne.n	8001e0c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7b1b      	ldrb	r3, [r3, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d109      	bne.n	8001df4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	035a      	lsls	r2, r3, #13
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	e00b      	b.n	8001e0c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df8:	f043 0220 	orr.w	r2, r3, #32
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	f043 0201 	orr.w	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <HAL_ADC_Init+0x1a8>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	68b9      	ldr	r1, [r7, #8]
 8001e30:	430b      	orrs	r3, r1
 8001e32:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e3c:	d003      	beq.n	8001e46 <HAL_ADC_Init+0x126>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d104      	bne.n	8001e50 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	051b      	lsls	r3, r3, #20
 8001e4e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e56:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <HAL_ADC_Init+0x1ac>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d10b      	bne.n	8001e8c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	f023 0303 	bic.w	r3, r3, #3
 8001e82:	f043 0201 	orr.w	r2, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e8a:	e018      	b.n	8001ebe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e90:	f023 0312 	bic.w	r3, r3, #18
 8001e94:	f043 0210 	orr.w	r2, r3, #16
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	f043 0201 	orr.w	r2, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001eac:	e007      	b.n	8001ebe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	f043 0210 	orr.w	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	ffe1f7fd 	.word	0xffe1f7fd
 8001ecc:	ff1f0efe 	.word	0xff1f0efe

08001ed0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d03e      	beq.n	8001f70 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d039      	beq.n	8001f70 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f1e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f22:	d11d      	bne.n	8001f60 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d119      	bne.n	8001f60 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0220 	bic.w	r2, r2, #32
 8001f3a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d105      	bne.n	8001f60 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	f043 0201 	orr.w	r2, r3, #1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f874 	bl	800204e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f06f 0212 	mvn.w	r2, #18
 8001f6e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d04d      	beq.n	8002016 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d048      	beq.n	8002016 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d105      	bne.n	8001f9c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001fa6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001faa:	d012      	beq.n	8001fd2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d125      	bne.n	8002006 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001fc4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fc8:	d11d      	bne.n	8002006 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d119      	bne.n	8002006 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d105      	bne.n	8002006 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffe:	f043 0201 	orr.w	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f96d 	bl	80022e6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 020c 	mvn.w	r2, #12
 8002014:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201c:	2b00      	cmp	r3, #0
 800201e:	d012      	beq.n	8002046 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00d      	beq.n	8002046 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f812 	bl	8002060 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f06f 0201 	mvn.w	r2, #1
 8002044:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
	...

08002074 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x20>
 8002090:	2302      	movs	r3, #2
 8002092:	e0dc      	b.n	800224e <HAL_ADC_ConfigChannel+0x1da>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b06      	cmp	r3, #6
 80020a2:	d81c      	bhi.n	80020de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	3b05      	subs	r3, #5
 80020b6:	221f      	movs	r2, #31
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	4019      	ands	r1, r3
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	3b05      	subs	r3, #5
 80020d0:	fa00 f203 	lsl.w	r2, r0, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	635a      	str	r2, [r3, #52]	; 0x34
 80020dc:	e03c      	b.n	8002158 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d81c      	bhi.n	8002120 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	3b23      	subs	r3, #35	; 0x23
 80020f8:	221f      	movs	r2, #31
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	4019      	ands	r1, r3
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	6818      	ldr	r0, [r3, #0]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	3b23      	subs	r3, #35	; 0x23
 8002112:	fa00 f203 	lsl.w	r2, r0, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
 800211e:	e01b      	b.n	8002158 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	3b41      	subs	r3, #65	; 0x41
 8002132:	221f      	movs	r2, #31
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	4019      	ands	r1, r3
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	3b41      	subs	r3, #65	; 0x41
 800214c:	fa00 f203 	lsl.w	r2, r0, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b09      	cmp	r3, #9
 800215e:	d91c      	bls.n	800219a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68d9      	ldr	r1, [r3, #12]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	4613      	mov	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	3b1e      	subs	r3, #30
 8002172:	2207      	movs	r2, #7
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	4019      	ands	r1, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	6898      	ldr	r0, [r3, #8]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	3b1e      	subs	r3, #30
 800218c:	fa00 f203 	lsl.w	r2, r0, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	60da      	str	r2, [r3, #12]
 8002198:	e019      	b.n	80021ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6919      	ldr	r1, [r3, #16]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4613      	mov	r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4413      	add	r3, r2
 80021aa:	2207      	movs	r2, #7
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	4019      	ands	r1, r3
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	6898      	ldr	r0, [r3, #8]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	fa00 f203 	lsl.w	r2, r0, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b10      	cmp	r3, #16
 80021d4:	d003      	beq.n	80021de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021da:	2b11      	cmp	r3, #17
 80021dc:	d132      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <HAL_ADC_ConfigChannel+0x1e4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d125      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d126      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002204:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2b10      	cmp	r3, #16
 800220c:	d11a      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800220e:	4b13      	ldr	r3, [pc, #76]	; (800225c <HAL_ADC_ConfigChannel+0x1e8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a13      	ldr	r2, [pc, #76]	; (8002260 <HAL_ADC_ConfigChannel+0x1ec>)
 8002214:	fba2 2303 	umull	r2, r3, r2, r3
 8002218:	0c9a      	lsrs	r2, r3, #18
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002224:	e002      	b.n	800222c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	3b01      	subs	r3, #1
 800222a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f9      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x1b2>
 8002232:	e007      	b.n	8002244 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002238:	f043 0220 	orr.w	r2, r3, #32
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800224c:	7bfb      	ldrb	r3, [r7, #15]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	40012400 	.word	0x40012400
 800225c:	20000004 	.word	0x20000004
 8002260:	431bde83 	.word	0x431bde83

08002264 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b01      	cmp	r3, #1
 800227c:	d12e      	bne.n	80022dc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0201 	bic.w	r2, r2, #1
 800228c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800228e:	f7ff fd19 	bl	8001cc4 <HAL_GetTick>
 8002292:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002294:	e01b      	b.n	80022ce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002296:	f7ff fd15 	bl	8001cc4 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d914      	bls.n	80022ce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d10d      	bne.n	80022ce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	f043 0210 	orr.w	r2, r3, #16
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c2:	f043 0201 	orr.w	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e007      	b.n	80022de <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d0dc      	beq.n	8002296 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002314:	4013      	ands	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002320:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232a:	4a04      	ldr	r2, [pc, #16]	; (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	60d3      	str	r3, [r2, #12]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <__NVIC_GetPriorityGrouping+0x18>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	f003 0307 	and.w	r3, r3, #7
}
 800234e:	4618      	mov	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	2b00      	cmp	r3, #0
 800236c:	db0b      	blt.n	8002386 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	f003 021f 	and.w	r2, r3, #31
 8002374:	4906      	ldr	r1, [pc, #24]	; (8002390 <__NVIC_EnableIRQ+0x34>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	2001      	movs	r0, #1
 800237e:	fa00 f202 	lsl.w	r2, r0, r2
 8002382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	e000e100 	.word	0xe000e100

08002394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	db0a      	blt.n	80023be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	490c      	ldr	r1, [pc, #48]	; (80023e0 <__NVIC_SetPriority+0x4c>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	440b      	add	r3, r1
 80023b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023bc:	e00a      	b.n	80023d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4908      	ldr	r1, [pc, #32]	; (80023e4 <__NVIC_SetPriority+0x50>)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	3b04      	subs	r3, #4
 80023cc:	0112      	lsls	r2, r2, #4
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	440b      	add	r3, r1
 80023d2:	761a      	strb	r2, [r3, #24]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000e100 	.word	0xe000e100
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	; 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f1c3 0307 	rsb	r3, r3, #7
 8002402:	2b04      	cmp	r3, #4
 8002404:	bf28      	it	cs
 8002406:	2304      	movcs	r3, #4
 8002408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3304      	adds	r3, #4
 800240e:	2b06      	cmp	r3, #6
 8002410:	d902      	bls.n	8002418 <NVIC_EncodePriority+0x30>
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3b03      	subs	r3, #3
 8002416:	e000      	b.n	800241a <NVIC_EncodePriority+0x32>
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	f04f 32ff 	mov.w	r2, #4294967295
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002430:	f04f 31ff 	mov.w	r1, #4294967295
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	43d9      	mvns	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	4313      	orrs	r3, r2
         );
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3b01      	subs	r3, #1
 8002458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800245c:	d301      	bcc.n	8002462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800245e:	2301      	movs	r3, #1
 8002460:	e00f      	b.n	8002482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002462:	4a0a      	ldr	r2, [pc, #40]	; (800248c <SysTick_Config+0x40>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3b01      	subs	r3, #1
 8002468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246a:	210f      	movs	r1, #15
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	f7ff ff90 	bl	8002394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <SysTick_Config+0x40>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247a:	4b04      	ldr	r3, [pc, #16]	; (800248c <SysTick_Config+0x40>)
 800247c:	2207      	movs	r2, #7
 800247e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	e000e010 	.word	0xe000e010

08002490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff ff2d 	bl	80022f8 <__NVIC_SetPriorityGrouping>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b086      	sub	sp, #24
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024b8:	f7ff ff42 	bl	8002340 <__NVIC_GetPriorityGrouping>
 80024bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	6978      	ldr	r0, [r7, #20]
 80024c4:	f7ff ff90 	bl	80023e8 <NVIC_EncodePriority>
 80024c8:	4602      	mov	r2, r0
 80024ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff5f 	bl	8002394 <__NVIC_SetPriority>
}
 80024d6:	bf00      	nop
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff35 	bl	800235c <__NVIC_EnableIRQ>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ffa2 	bl	800244c <SysTick_Config>
 8002508:	4603      	mov	r3, r0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e043      	b.n	80025b2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	4b22      	ldr	r3, [pc, #136]	; (80025bc <HAL_DMA_Init+0xa8>)
 8002532:	4413      	add	r3, r2
 8002534:	4a22      	ldr	r2, [pc, #136]	; (80025c0 <HAL_DMA_Init+0xac>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	091b      	lsrs	r3, r3, #4
 800253c:	009a      	lsls	r2, r3, #2
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a1f      	ldr	r2, [pc, #124]	; (80025c4 <HAL_DMA_Init+0xb0>)
 8002546:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800255e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002562:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800256c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002578:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002584:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	bffdfff8 	.word	0xbffdfff8
 80025c0:	cccccccd 	.word	0xcccccccd
 80025c4:	40020000 	.word	0x40020000

080025c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_DMA_Start_IT+0x20>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e04b      	b.n	8002680 <HAL_DMA_Start_IT+0xb8>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d13a      	bne.n	8002672 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0201 	bic.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	68b9      	ldr	r1, [r7, #8]
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 f9af 	bl	8002984 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262a:	2b00      	cmp	r3, #0
 800262c:	d008      	beq.n	8002640 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 020e 	orr.w	r2, r2, #14
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	e00f      	b.n	8002660 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0204 	bic.w	r2, r2, #4
 800264e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 020a 	orr.w	r2, r2, #10
 800265e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0201 	orr.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	e005      	b.n	800267e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800267a:	2302      	movs	r3, #2
 800267c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800267e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d005      	beq.n	80026ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2204      	movs	r2, #4
 80026a4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
 80026aa:	e051      	b.n	8002750 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 020e 	bic.w	r2, r2, #14
 80026ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0201 	bic.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a22      	ldr	r2, [pc, #136]	; (800275c <HAL_DMA_Abort_IT+0xd4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d029      	beq.n	800272a <HAL_DMA_Abort_IT+0xa2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a21      	ldr	r2, [pc, #132]	; (8002760 <HAL_DMA_Abort_IT+0xd8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d022      	beq.n	8002726 <HAL_DMA_Abort_IT+0x9e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1f      	ldr	r2, [pc, #124]	; (8002764 <HAL_DMA_Abort_IT+0xdc>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d01a      	beq.n	8002720 <HAL_DMA_Abort_IT+0x98>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a1e      	ldr	r2, [pc, #120]	; (8002768 <HAL_DMA_Abort_IT+0xe0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d012      	beq.n	800271a <HAL_DMA_Abort_IT+0x92>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1c      	ldr	r2, [pc, #112]	; (800276c <HAL_DMA_Abort_IT+0xe4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00a      	beq.n	8002714 <HAL_DMA_Abort_IT+0x8c>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a1b      	ldr	r2, [pc, #108]	; (8002770 <HAL_DMA_Abort_IT+0xe8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d102      	bne.n	800270e <HAL_DMA_Abort_IT+0x86>
 8002708:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800270c:	e00e      	b.n	800272c <HAL_DMA_Abort_IT+0xa4>
 800270e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002712:	e00b      	b.n	800272c <HAL_DMA_Abort_IT+0xa4>
 8002714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002718:	e008      	b.n	800272c <HAL_DMA_Abort_IT+0xa4>
 800271a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800271e:	e005      	b.n	800272c <HAL_DMA_Abort_IT+0xa4>
 8002720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002724:	e002      	b.n	800272c <HAL_DMA_Abort_IT+0xa4>
 8002726:	2310      	movs	r3, #16
 8002728:	e000      	b.n	800272c <HAL_DMA_Abort_IT+0xa4>
 800272a:	2301      	movs	r3, #1
 800272c:	4a11      	ldr	r2, [pc, #68]	; (8002774 <HAL_DMA_Abort_IT+0xec>)
 800272e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	4798      	blx	r3
    } 
  }
  return status;
 8002750:	7bfb      	ldrb	r3, [r7, #15]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40020008 	.word	0x40020008
 8002760:	4002001c 	.word	0x4002001c
 8002764:	40020030 	.word	0x40020030
 8002768:	40020044 	.word	0x40020044
 800276c:	40020058 	.word	0x40020058
 8002770:	4002006c 	.word	0x4002006c
 8002774:	40020000 	.word	0x40020000

08002778 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	2204      	movs	r2, #4
 8002796:	409a      	lsls	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4013      	ands	r3, r2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d04f      	beq.n	8002840 <HAL_DMA_IRQHandler+0xc8>
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d04a      	beq.n	8002840 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d107      	bne.n	80027c8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0204 	bic.w	r2, r2, #4
 80027c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a66      	ldr	r2, [pc, #408]	; (8002968 <HAL_DMA_IRQHandler+0x1f0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d029      	beq.n	8002826 <HAL_DMA_IRQHandler+0xae>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a65      	ldr	r2, [pc, #404]	; (800296c <HAL_DMA_IRQHandler+0x1f4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d022      	beq.n	8002822 <HAL_DMA_IRQHandler+0xaa>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a63      	ldr	r2, [pc, #396]	; (8002970 <HAL_DMA_IRQHandler+0x1f8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d01a      	beq.n	800281c <HAL_DMA_IRQHandler+0xa4>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a62      	ldr	r2, [pc, #392]	; (8002974 <HAL_DMA_IRQHandler+0x1fc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d012      	beq.n	8002816 <HAL_DMA_IRQHandler+0x9e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a60      	ldr	r2, [pc, #384]	; (8002978 <HAL_DMA_IRQHandler+0x200>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d00a      	beq.n	8002810 <HAL_DMA_IRQHandler+0x98>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a5f      	ldr	r2, [pc, #380]	; (800297c <HAL_DMA_IRQHandler+0x204>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d102      	bne.n	800280a <HAL_DMA_IRQHandler+0x92>
 8002804:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002808:	e00e      	b.n	8002828 <HAL_DMA_IRQHandler+0xb0>
 800280a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800280e:	e00b      	b.n	8002828 <HAL_DMA_IRQHandler+0xb0>
 8002810:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002814:	e008      	b.n	8002828 <HAL_DMA_IRQHandler+0xb0>
 8002816:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800281a:	e005      	b.n	8002828 <HAL_DMA_IRQHandler+0xb0>
 800281c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002820:	e002      	b.n	8002828 <HAL_DMA_IRQHandler+0xb0>
 8002822:	2340      	movs	r3, #64	; 0x40
 8002824:	e000      	b.n	8002828 <HAL_DMA_IRQHandler+0xb0>
 8002826:	2304      	movs	r3, #4
 8002828:	4a55      	ldr	r2, [pc, #340]	; (8002980 <HAL_DMA_IRQHandler+0x208>)
 800282a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8094 	beq.w	800295e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800283e:	e08e      	b.n	800295e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	2202      	movs	r2, #2
 8002846:	409a      	lsls	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d056      	beq.n	80028fe <HAL_DMA_IRQHandler+0x186>
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d051      	beq.n	80028fe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0320 	and.w	r3, r3, #32
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10b      	bne.n	8002880 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 020a 	bic.w	r2, r2, #10
 8002876:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a38      	ldr	r2, [pc, #224]	; (8002968 <HAL_DMA_IRQHandler+0x1f0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d029      	beq.n	80028de <HAL_DMA_IRQHandler+0x166>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a37      	ldr	r2, [pc, #220]	; (800296c <HAL_DMA_IRQHandler+0x1f4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d022      	beq.n	80028da <HAL_DMA_IRQHandler+0x162>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a35      	ldr	r2, [pc, #212]	; (8002970 <HAL_DMA_IRQHandler+0x1f8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d01a      	beq.n	80028d4 <HAL_DMA_IRQHandler+0x15c>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a34      	ldr	r2, [pc, #208]	; (8002974 <HAL_DMA_IRQHandler+0x1fc>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d012      	beq.n	80028ce <HAL_DMA_IRQHandler+0x156>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a32      	ldr	r2, [pc, #200]	; (8002978 <HAL_DMA_IRQHandler+0x200>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00a      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x150>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a31      	ldr	r2, [pc, #196]	; (800297c <HAL_DMA_IRQHandler+0x204>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d102      	bne.n	80028c2 <HAL_DMA_IRQHandler+0x14a>
 80028bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028c0:	e00e      	b.n	80028e0 <HAL_DMA_IRQHandler+0x168>
 80028c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028c6:	e00b      	b.n	80028e0 <HAL_DMA_IRQHandler+0x168>
 80028c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028cc:	e008      	b.n	80028e0 <HAL_DMA_IRQHandler+0x168>
 80028ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028d2:	e005      	b.n	80028e0 <HAL_DMA_IRQHandler+0x168>
 80028d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028d8:	e002      	b.n	80028e0 <HAL_DMA_IRQHandler+0x168>
 80028da:	2320      	movs	r3, #32
 80028dc:	e000      	b.n	80028e0 <HAL_DMA_IRQHandler+0x168>
 80028de:	2302      	movs	r3, #2
 80028e0:	4a27      	ldr	r2, [pc, #156]	; (8002980 <HAL_DMA_IRQHandler+0x208>)
 80028e2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d034      	beq.n	800295e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80028fc:	e02f      	b.n	800295e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	2208      	movs	r2, #8
 8002904:	409a      	lsls	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d028      	beq.n	8002960 <HAL_DMA_IRQHandler+0x1e8>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	2b00      	cmp	r3, #0
 8002916:	d023      	beq.n	8002960 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 020e 	bic.w	r2, r2, #14
 8002926:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002930:	2101      	movs	r1, #1
 8002932:	fa01 f202 	lsl.w	r2, r1, r2
 8002936:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	2b00      	cmp	r3, #0
 8002954:	d004      	beq.n	8002960 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	4798      	blx	r3
    }
  }
  return;
 800295e:	bf00      	nop
 8002960:	bf00      	nop
}
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40020008 	.word	0x40020008
 800296c:	4002001c 	.word	0x4002001c
 8002970:	40020030 	.word	0x40020030
 8002974:	40020044 	.word	0x40020044
 8002978:	40020058 	.word	0x40020058
 800297c:	4002006c 	.word	0x4002006c
 8002980:	40020000 	.word	0x40020000

08002984 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299a:	2101      	movs	r1, #1
 800299c:	fa01 f202 	lsl.w	r2, r1, r2
 80029a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b10      	cmp	r3, #16
 80029b0:	d108      	bne.n	80029c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029c2:	e007      	b.n	80029d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	60da      	str	r2, [r3, #12]
}
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
	...

080029e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b08b      	sub	sp, #44	; 0x2c
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029ea:	2300      	movs	r3, #0
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029ee:	2300      	movs	r3, #0
 80029f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029f2:	e169      	b.n	8002cc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029f4:	2201      	movs	r2, #1
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	f040 8158 	bne.w	8002cc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	4a9a      	ldr	r2, [pc, #616]	; (8002c80 <HAL_GPIO_Init+0x2a0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d05e      	beq.n	8002ada <HAL_GPIO_Init+0xfa>
 8002a1c:	4a98      	ldr	r2, [pc, #608]	; (8002c80 <HAL_GPIO_Init+0x2a0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d875      	bhi.n	8002b0e <HAL_GPIO_Init+0x12e>
 8002a22:	4a98      	ldr	r2, [pc, #608]	; (8002c84 <HAL_GPIO_Init+0x2a4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d058      	beq.n	8002ada <HAL_GPIO_Init+0xfa>
 8002a28:	4a96      	ldr	r2, [pc, #600]	; (8002c84 <HAL_GPIO_Init+0x2a4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d86f      	bhi.n	8002b0e <HAL_GPIO_Init+0x12e>
 8002a2e:	4a96      	ldr	r2, [pc, #600]	; (8002c88 <HAL_GPIO_Init+0x2a8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d052      	beq.n	8002ada <HAL_GPIO_Init+0xfa>
 8002a34:	4a94      	ldr	r2, [pc, #592]	; (8002c88 <HAL_GPIO_Init+0x2a8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d869      	bhi.n	8002b0e <HAL_GPIO_Init+0x12e>
 8002a3a:	4a94      	ldr	r2, [pc, #592]	; (8002c8c <HAL_GPIO_Init+0x2ac>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d04c      	beq.n	8002ada <HAL_GPIO_Init+0xfa>
 8002a40:	4a92      	ldr	r2, [pc, #584]	; (8002c8c <HAL_GPIO_Init+0x2ac>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d863      	bhi.n	8002b0e <HAL_GPIO_Init+0x12e>
 8002a46:	4a92      	ldr	r2, [pc, #584]	; (8002c90 <HAL_GPIO_Init+0x2b0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d046      	beq.n	8002ada <HAL_GPIO_Init+0xfa>
 8002a4c:	4a90      	ldr	r2, [pc, #576]	; (8002c90 <HAL_GPIO_Init+0x2b0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d85d      	bhi.n	8002b0e <HAL_GPIO_Init+0x12e>
 8002a52:	2b12      	cmp	r3, #18
 8002a54:	d82a      	bhi.n	8002aac <HAL_GPIO_Init+0xcc>
 8002a56:	2b12      	cmp	r3, #18
 8002a58:	d859      	bhi.n	8002b0e <HAL_GPIO_Init+0x12e>
 8002a5a:	a201      	add	r2, pc, #4	; (adr r2, 8002a60 <HAL_GPIO_Init+0x80>)
 8002a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a60:	08002adb 	.word	0x08002adb
 8002a64:	08002ab5 	.word	0x08002ab5
 8002a68:	08002ac7 	.word	0x08002ac7
 8002a6c:	08002b09 	.word	0x08002b09
 8002a70:	08002b0f 	.word	0x08002b0f
 8002a74:	08002b0f 	.word	0x08002b0f
 8002a78:	08002b0f 	.word	0x08002b0f
 8002a7c:	08002b0f 	.word	0x08002b0f
 8002a80:	08002b0f 	.word	0x08002b0f
 8002a84:	08002b0f 	.word	0x08002b0f
 8002a88:	08002b0f 	.word	0x08002b0f
 8002a8c:	08002b0f 	.word	0x08002b0f
 8002a90:	08002b0f 	.word	0x08002b0f
 8002a94:	08002b0f 	.word	0x08002b0f
 8002a98:	08002b0f 	.word	0x08002b0f
 8002a9c:	08002b0f 	.word	0x08002b0f
 8002aa0:	08002b0f 	.word	0x08002b0f
 8002aa4:	08002abd 	.word	0x08002abd
 8002aa8:	08002ad1 	.word	0x08002ad1
 8002aac:	4a79      	ldr	r2, [pc, #484]	; (8002c94 <HAL_GPIO_Init+0x2b4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d013      	beq.n	8002ada <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ab2:	e02c      	b.n	8002b0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	623b      	str	r3, [r7, #32]
          break;
 8002aba:	e029      	b.n	8002b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	623b      	str	r3, [r7, #32]
          break;
 8002ac4:	e024      	b.n	8002b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	3308      	adds	r3, #8
 8002acc:	623b      	str	r3, [r7, #32]
          break;
 8002ace:	e01f      	b.n	8002b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	330c      	adds	r3, #12
 8002ad6:	623b      	str	r3, [r7, #32]
          break;
 8002ad8:	e01a      	b.n	8002b10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d102      	bne.n	8002ae8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ae2:	2304      	movs	r3, #4
 8002ae4:	623b      	str	r3, [r7, #32]
          break;
 8002ae6:	e013      	b.n	8002b10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d105      	bne.n	8002afc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002af0:	2308      	movs	r3, #8
 8002af2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	611a      	str	r2, [r3, #16]
          break;
 8002afa:	e009      	b.n	8002b10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002afc:	2308      	movs	r3, #8
 8002afe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	615a      	str	r2, [r3, #20]
          break;
 8002b06:	e003      	b.n	8002b10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	623b      	str	r3, [r7, #32]
          break;
 8002b0c:	e000      	b.n	8002b10 <HAL_GPIO_Init+0x130>
          break;
 8002b0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	2bff      	cmp	r3, #255	; 0xff
 8002b14:	d801      	bhi.n	8002b1a <HAL_GPIO_Init+0x13a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	e001      	b.n	8002b1e <HAL_GPIO_Init+0x13e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2bff      	cmp	r3, #255	; 0xff
 8002b24:	d802      	bhi.n	8002b2c <HAL_GPIO_Init+0x14c>
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	e002      	b.n	8002b32 <HAL_GPIO_Init+0x152>
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	3b08      	subs	r3, #8
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	210f      	movs	r1, #15
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	401a      	ands	r2, r3
 8002b44:	6a39      	ldr	r1, [r7, #32]
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 80b1 	beq.w	8002cc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b60:	4b4d      	ldr	r3, [pc, #308]	; (8002c98 <HAL_GPIO_Init+0x2b8>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	4a4c      	ldr	r2, [pc, #304]	; (8002c98 <HAL_GPIO_Init+0x2b8>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6193      	str	r3, [r2, #24]
 8002b6c:	4b4a      	ldr	r3, [pc, #296]	; (8002c98 <HAL_GPIO_Init+0x2b8>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b78:	4a48      	ldr	r2, [pc, #288]	; (8002c9c <HAL_GPIO_Init+0x2bc>)
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	089b      	lsrs	r3, r3, #2
 8002b7e:	3302      	adds	r3, #2
 8002b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	220f      	movs	r2, #15
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a40      	ldr	r2, [pc, #256]	; (8002ca0 <HAL_GPIO_Init+0x2c0>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d013      	beq.n	8002bcc <HAL_GPIO_Init+0x1ec>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a3f      	ldr	r2, [pc, #252]	; (8002ca4 <HAL_GPIO_Init+0x2c4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d00d      	beq.n	8002bc8 <HAL_GPIO_Init+0x1e8>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a3e      	ldr	r2, [pc, #248]	; (8002ca8 <HAL_GPIO_Init+0x2c8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d007      	beq.n	8002bc4 <HAL_GPIO_Init+0x1e4>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a3d      	ldr	r2, [pc, #244]	; (8002cac <HAL_GPIO_Init+0x2cc>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d101      	bne.n	8002bc0 <HAL_GPIO_Init+0x1e0>
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e006      	b.n	8002bce <HAL_GPIO_Init+0x1ee>
 8002bc0:	2304      	movs	r3, #4
 8002bc2:	e004      	b.n	8002bce <HAL_GPIO_Init+0x1ee>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e002      	b.n	8002bce <HAL_GPIO_Init+0x1ee>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e000      	b.n	8002bce <HAL_GPIO_Init+0x1ee>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd0:	f002 0203 	and.w	r2, r2, #3
 8002bd4:	0092      	lsls	r2, r2, #2
 8002bd6:	4093      	lsls	r3, r2
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bde:	492f      	ldr	r1, [pc, #188]	; (8002c9c <HAL_GPIO_Init+0x2bc>)
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	089b      	lsrs	r3, r3, #2
 8002be4:	3302      	adds	r3, #2
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d006      	beq.n	8002c06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bf8:	4b2d      	ldr	r3, [pc, #180]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	492c      	ldr	r1, [pc, #176]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	608b      	str	r3, [r1, #8]
 8002c04:	e006      	b.n	8002c14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c06:	4b2a      	ldr	r3, [pc, #168]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	4928      	ldr	r1, [pc, #160]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d006      	beq.n	8002c2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c20:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	4922      	ldr	r1, [pc, #136]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60cb      	str	r3, [r1, #12]
 8002c2c:	e006      	b.n	8002c3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c2e:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	491e      	ldr	r1, [pc, #120]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d006      	beq.n	8002c56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	4918      	ldr	r1, [pc, #96]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]
 8002c54:	e006      	b.n	8002c64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c56:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	4914      	ldr	r1, [pc, #80]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d021      	beq.n	8002cb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	490e      	ldr	r1, [pc, #56]	; (8002cb0 <HAL_GPIO_Init+0x2d0>)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	600b      	str	r3, [r1, #0]
 8002c7c:	e021      	b.n	8002cc2 <HAL_GPIO_Init+0x2e2>
 8002c7e:	bf00      	nop
 8002c80:	10320000 	.word	0x10320000
 8002c84:	10310000 	.word	0x10310000
 8002c88:	10220000 	.word	0x10220000
 8002c8c:	10210000 	.word	0x10210000
 8002c90:	10120000 	.word	0x10120000
 8002c94:	10110000 	.word	0x10110000
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40010000 	.word	0x40010000
 8002ca0:	40010800 	.word	0x40010800
 8002ca4:	40010c00 	.word	0x40010c00
 8002ca8:	40011000 	.word	0x40011000
 8002cac:	40011400 	.word	0x40011400
 8002cb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_GPIO_Init+0x304>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	4909      	ldr	r1, [pc, #36]	; (8002ce4 <HAL_GPIO_Init+0x304>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f47f ae8e 	bne.w	80029f4 <HAL_GPIO_Init+0x14>
  }
}
 8002cd8:	bf00      	nop
 8002cda:	bf00      	nop
 8002cdc:	372c      	adds	r7, #44	; 0x2c
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr
 8002ce4:	40010400 	.word	0x40010400

08002ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	807b      	strh	r3, [r7, #2]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cf8:	787b      	ldrb	r3, [r7, #1]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cfe:	887a      	ldrh	r2, [r7, #2]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d04:	e003      	b.n	8002d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d06:	887b      	ldrh	r3, [r7, #2]
 8002d08:	041a      	lsls	r2, r3, #16
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	611a      	str	r2, [r3, #16]
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e12b      	b.n	8002f82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7fd fff6 	bl	8000d30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2224      	movs	r2, #36	; 0x24
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0201 	bic.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d7c:	f000 fcd8 	bl	8003730 <HAL_RCC_GetPCLK1Freq>
 8002d80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	4a81      	ldr	r2, [pc, #516]	; (8002f8c <HAL_I2C_Init+0x274>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d807      	bhi.n	8002d9c <HAL_I2C_Init+0x84>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4a80      	ldr	r2, [pc, #512]	; (8002f90 <HAL_I2C_Init+0x278>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	bf94      	ite	ls
 8002d94:	2301      	movls	r3, #1
 8002d96:	2300      	movhi	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	e006      	b.n	8002daa <HAL_I2C_Init+0x92>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4a7d      	ldr	r2, [pc, #500]	; (8002f94 <HAL_I2C_Init+0x27c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	bf94      	ite	ls
 8002da4:	2301      	movls	r3, #1
 8002da6:	2300      	movhi	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e0e7      	b.n	8002f82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4a78      	ldr	r2, [pc, #480]	; (8002f98 <HAL_I2C_Init+0x280>)
 8002db6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dba:	0c9b      	lsrs	r3, r3, #18
 8002dbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4a6a      	ldr	r2, [pc, #424]	; (8002f8c <HAL_I2C_Init+0x274>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d802      	bhi.n	8002dec <HAL_I2C_Init+0xd4>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	3301      	adds	r3, #1
 8002dea:	e009      	b.n	8002e00 <HAL_I2C_Init+0xe8>
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002df2:	fb02 f303 	mul.w	r3, r2, r3
 8002df6:	4a69      	ldr	r2, [pc, #420]	; (8002f9c <HAL_I2C_Init+0x284>)
 8002df8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfc:	099b      	lsrs	r3, r3, #6
 8002dfe:	3301      	adds	r3, #1
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	430b      	orrs	r3, r1
 8002e06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	495c      	ldr	r1, [pc, #368]	; (8002f8c <HAL_I2C_Init+0x274>)
 8002e1c:	428b      	cmp	r3, r1
 8002e1e:	d819      	bhi.n	8002e54 <HAL_I2C_Init+0x13c>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	1e59      	subs	r1, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e2e:	1c59      	adds	r1, r3, #1
 8002e30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e34:	400b      	ands	r3, r1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <HAL_I2C_Init+0x138>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	1e59      	subs	r1, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e48:	3301      	adds	r3, #1
 8002e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e4e:	e051      	b.n	8002ef4 <HAL_I2C_Init+0x1dc>
 8002e50:	2304      	movs	r3, #4
 8002e52:	e04f      	b.n	8002ef4 <HAL_I2C_Init+0x1dc>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d111      	bne.n	8002e80 <HAL_I2C_Init+0x168>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1e58      	subs	r0, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6859      	ldr	r1, [r3, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	440b      	add	r3, r1
 8002e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e6e:	3301      	adds	r3, #1
 8002e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bf0c      	ite	eq
 8002e78:	2301      	moveq	r3, #1
 8002e7a:	2300      	movne	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	e012      	b.n	8002ea6 <HAL_I2C_Init+0x18e>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1e58      	subs	r0, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6859      	ldr	r1, [r3, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	0099      	lsls	r1, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e96:	3301      	adds	r3, #1
 8002e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_I2C_Init+0x196>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e022      	b.n	8002ef4 <HAL_I2C_Init+0x1dc>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10e      	bne.n	8002ed4 <HAL_I2C_Init+0x1bc>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1e58      	subs	r0, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6859      	ldr	r1, [r3, #4]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	440b      	add	r3, r1
 8002ec4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ec8:	3301      	adds	r3, #1
 8002eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ed2:	e00f      	b.n	8002ef4 <HAL_I2C_Init+0x1dc>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1e58      	subs	r0, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6859      	ldr	r1, [r3, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	0099      	lsls	r1, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eea:	3301      	adds	r3, #1
 8002eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	6809      	ldr	r1, [r1, #0]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69da      	ldr	r2, [r3, #28]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6911      	ldr	r1, [r2, #16]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	68d2      	ldr	r2, [r2, #12]
 8002f2e:	4311      	orrs	r1, r2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	430b      	orrs	r3, r1
 8002f36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695a      	ldr	r2, [r3, #20]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	000186a0 	.word	0x000186a0
 8002f90:	001e847f 	.word	0x001e847f
 8002f94:	003d08ff 	.word	0x003d08ff
 8002f98:	431bde83 	.word	0x431bde83
 8002f9c:	10624dd3 	.word	0x10624dd3

08002fa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e26c      	b.n	800348c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8087 	beq.w	80030ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fc0:	4b92      	ldr	r3, [pc, #584]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 030c 	and.w	r3, r3, #12
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d00c      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fcc:	4b8f      	ldr	r3, [pc, #572]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d112      	bne.n	8002ffe <HAL_RCC_OscConfig+0x5e>
 8002fd8:	4b8c      	ldr	r3, [pc, #560]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe4:	d10b      	bne.n	8002ffe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe6:	4b89      	ldr	r3, [pc, #548]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d06c      	beq.n	80030cc <HAL_RCC_OscConfig+0x12c>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d168      	bne.n	80030cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e246      	b.n	800348c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003006:	d106      	bne.n	8003016 <HAL_RCC_OscConfig+0x76>
 8003008:	4b80      	ldr	r3, [pc, #512]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a7f      	ldr	r2, [pc, #508]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 800300e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	e02e      	b.n	8003074 <HAL_RCC_OscConfig+0xd4>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10c      	bne.n	8003038 <HAL_RCC_OscConfig+0x98>
 800301e:	4b7b      	ldr	r3, [pc, #492]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a7a      	ldr	r2, [pc, #488]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	4b78      	ldr	r3, [pc, #480]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a77      	ldr	r2, [pc, #476]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003030:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	e01d      	b.n	8003074 <HAL_RCC_OscConfig+0xd4>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003040:	d10c      	bne.n	800305c <HAL_RCC_OscConfig+0xbc>
 8003042:	4b72      	ldr	r3, [pc, #456]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a71      	ldr	r2, [pc, #452]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	4b6f      	ldr	r3, [pc, #444]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a6e      	ldr	r2, [pc, #440]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	e00b      	b.n	8003074 <HAL_RCC_OscConfig+0xd4>
 800305c:	4b6b      	ldr	r3, [pc, #428]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a6a      	ldr	r2, [pc, #424]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	4b68      	ldr	r3, [pc, #416]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a67      	ldr	r2, [pc, #412]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 800306e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003072:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d013      	beq.n	80030a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7fe fe22 	bl	8001cc4 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003084:	f7fe fe1e 	bl	8001cc4 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b64      	cmp	r3, #100	; 0x64
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e1fa      	b.n	800348c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003096:	4b5d      	ldr	r3, [pc, #372]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0xe4>
 80030a2:	e014      	b.n	80030ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a4:	f7fe fe0e 	bl	8001cc4 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ac:	f7fe fe0a 	bl	8001cc4 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	; 0x64
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e1e6      	b.n	800348c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030be:	4b53      	ldr	r3, [pc, #332]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x10c>
 80030ca:	e000      	b.n	80030ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d063      	beq.n	80031a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030da:	4b4c      	ldr	r3, [pc, #304]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00b      	beq.n	80030fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030e6:	4b49      	ldr	r3, [pc, #292]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d11c      	bne.n	800312c <HAL_RCC_OscConfig+0x18c>
 80030f2:	4b46      	ldr	r3, [pc, #280]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d116      	bne.n	800312c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fe:	4b43      	ldr	r3, [pc, #268]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d005      	beq.n	8003116 <HAL_RCC_OscConfig+0x176>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d001      	beq.n	8003116 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e1ba      	b.n	800348c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003116:	4b3d      	ldr	r3, [pc, #244]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	4939      	ldr	r1, [pc, #228]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312a:	e03a      	b.n	80031a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d020      	beq.n	8003176 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003134:	4b36      	ldr	r3, [pc, #216]	; (8003210 <HAL_RCC_OscConfig+0x270>)
 8003136:	2201      	movs	r2, #1
 8003138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313a:	f7fe fdc3 	bl	8001cc4 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003142:	f7fe fdbf 	bl	8001cc4 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e19b      	b.n	800348c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003154:	4b2d      	ldr	r3, [pc, #180]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003160:	4b2a      	ldr	r3, [pc, #168]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4927      	ldr	r1, [pc, #156]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003170:	4313      	orrs	r3, r2
 8003172:	600b      	str	r3, [r1, #0]
 8003174:	e015      	b.n	80031a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003176:	4b26      	ldr	r3, [pc, #152]	; (8003210 <HAL_RCC_OscConfig+0x270>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7fe fda2 	bl	8001cc4 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003184:	f7fe fd9e 	bl	8001cc4 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e17a      	b.n	800348c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003196:	4b1d      	ldr	r3, [pc, #116]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d03a      	beq.n	8003224 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d019      	beq.n	80031ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b6:	4b17      	ldr	r3, [pc, #92]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031bc:	f7fe fd82 	bl	8001cc4 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c4:	f7fe fd7e 	bl	8001cc4 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e15a      	b.n	800348c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d6:	4b0d      	ldr	r3, [pc, #52]	; (800320c <HAL_RCC_OscConfig+0x26c>)
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0f0      	beq.n	80031c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031e2:	2001      	movs	r0, #1
 80031e4:	f000 fab8 	bl	8003758 <RCC_Delay>
 80031e8:	e01c      	b.n	8003224 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ea:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f0:	f7fe fd68 	bl	8001cc4 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f6:	e00f      	b.n	8003218 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f8:	f7fe fd64 	bl	8001cc4 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d908      	bls.n	8003218 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e140      	b.n	800348c <HAL_RCC_OscConfig+0x4ec>
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
 8003210:	42420000 	.word	0x42420000
 8003214:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003218:	4b9e      	ldr	r3, [pc, #632]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1e9      	bne.n	80031f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80a6 	beq.w	800337e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003232:	2300      	movs	r3, #0
 8003234:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003236:	4b97      	ldr	r3, [pc, #604]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10d      	bne.n	800325e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	4b94      	ldr	r3, [pc, #592]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	4a93      	ldr	r2, [pc, #588]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 8003248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324c:	61d3      	str	r3, [r2, #28]
 800324e:	4b91      	ldr	r3, [pc, #580]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325e:	4b8e      	ldr	r3, [pc, #568]	; (8003498 <HAL_RCC_OscConfig+0x4f8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d118      	bne.n	800329c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800326a:	4b8b      	ldr	r3, [pc, #556]	; (8003498 <HAL_RCC_OscConfig+0x4f8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a8a      	ldr	r2, [pc, #552]	; (8003498 <HAL_RCC_OscConfig+0x4f8>)
 8003270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003276:	f7fe fd25 	bl	8001cc4 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327e:	f7fe fd21 	bl	8001cc4 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b64      	cmp	r3, #100	; 0x64
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e0fd      	b.n	800348c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003290:	4b81      	ldr	r3, [pc, #516]	; (8003498 <HAL_RCC_OscConfig+0x4f8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d106      	bne.n	80032b2 <HAL_RCC_OscConfig+0x312>
 80032a4:	4b7b      	ldr	r3, [pc, #492]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	4a7a      	ldr	r2, [pc, #488]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6213      	str	r3, [r2, #32]
 80032b0:	e02d      	b.n	800330e <HAL_RCC_OscConfig+0x36e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCC_OscConfig+0x334>
 80032ba:	4b76      	ldr	r3, [pc, #472]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	4a75      	ldr	r2, [pc, #468]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	6213      	str	r3, [r2, #32]
 80032c6:	4b73      	ldr	r3, [pc, #460]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	4a72      	ldr	r2, [pc, #456]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 80032cc:	f023 0304 	bic.w	r3, r3, #4
 80032d0:	6213      	str	r3, [r2, #32]
 80032d2:	e01c      	b.n	800330e <HAL_RCC_OscConfig+0x36e>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	2b05      	cmp	r3, #5
 80032da:	d10c      	bne.n	80032f6 <HAL_RCC_OscConfig+0x356>
 80032dc:	4b6d      	ldr	r3, [pc, #436]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	4a6c      	ldr	r2, [pc, #432]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 80032e2:	f043 0304 	orr.w	r3, r3, #4
 80032e6:	6213      	str	r3, [r2, #32]
 80032e8:	4b6a      	ldr	r3, [pc, #424]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	4a69      	ldr	r2, [pc, #420]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6213      	str	r3, [r2, #32]
 80032f4:	e00b      	b.n	800330e <HAL_RCC_OscConfig+0x36e>
 80032f6:	4b67      	ldr	r3, [pc, #412]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	4a66      	ldr	r2, [pc, #408]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 80032fc:	f023 0301 	bic.w	r3, r3, #1
 8003300:	6213      	str	r3, [r2, #32]
 8003302:	4b64      	ldr	r3, [pc, #400]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	4a63      	ldr	r2, [pc, #396]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 8003308:	f023 0304 	bic.w	r3, r3, #4
 800330c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d015      	beq.n	8003342 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003316:	f7fe fcd5 	bl	8001cc4 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331c:	e00a      	b.n	8003334 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331e:	f7fe fcd1 	bl	8001cc4 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	f241 3288 	movw	r2, #5000	; 0x1388
 800332c:	4293      	cmp	r3, r2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e0ab      	b.n	800348c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003334:	4b57      	ldr	r3, [pc, #348]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0ee      	beq.n	800331e <HAL_RCC_OscConfig+0x37e>
 8003340:	e014      	b.n	800336c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003342:	f7fe fcbf 	bl	8001cc4 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003348:	e00a      	b.n	8003360 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334a:	f7fe fcbb 	bl	8001cc4 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	f241 3288 	movw	r2, #5000	; 0x1388
 8003358:	4293      	cmp	r3, r2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e095      	b.n	800348c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003360:	4b4c      	ldr	r3, [pc, #304]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1ee      	bne.n	800334a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d105      	bne.n	800337e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003372:	4b48      	ldr	r3, [pc, #288]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	4a47      	ldr	r2, [pc, #284]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 8003378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800337c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 8081 	beq.w	800348a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003388:	4b42      	ldr	r3, [pc, #264]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 030c 	and.w	r3, r3, #12
 8003390:	2b08      	cmp	r3, #8
 8003392:	d061      	beq.n	8003458 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d146      	bne.n	800342a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339c:	4b3f      	ldr	r3, [pc, #252]	; (800349c <HAL_RCC_OscConfig+0x4fc>)
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a2:	f7fe fc8f 	bl	8001cc4 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033aa:	f7fe fc8b 	bl	8001cc4 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e067      	b.n	800348c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033bc:	4b35      	ldr	r3, [pc, #212]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f0      	bne.n	80033aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d0:	d108      	bne.n	80033e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033d2:	4b30      	ldr	r3, [pc, #192]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	492d      	ldr	r1, [pc, #180]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033e4:	4b2b      	ldr	r3, [pc, #172]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a19      	ldr	r1, [r3, #32]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	430b      	orrs	r3, r1
 80033f6:	4927      	ldr	r1, [pc, #156]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033fc:	4b27      	ldr	r3, [pc, #156]	; (800349c <HAL_RCC_OscConfig+0x4fc>)
 80033fe:	2201      	movs	r2, #1
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003402:	f7fe fc5f 	bl	8001cc4 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340a:	f7fe fc5b 	bl	8001cc4 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e037      	b.n	800348c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800341c:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x46a>
 8003428:	e02f      	b.n	800348a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342a:	4b1c      	ldr	r3, [pc, #112]	; (800349c <HAL_RCC_OscConfig+0x4fc>)
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fe fc48 	bl	8001cc4 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003438:	f7fe fc44 	bl	8001cc4 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e020      	b.n	800348c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800344a:	4b12      	ldr	r3, [pc, #72]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <HAL_RCC_OscConfig+0x498>
 8003456:	e018      	b.n	800348a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e013      	b.n	800348c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003464:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <HAL_RCC_OscConfig+0x4f4>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	429a      	cmp	r2, r3
 8003476:	d106      	bne.n	8003486 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003482:	429a      	cmp	r2, r3
 8003484:	d001      	beq.n	800348a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40021000 	.word	0x40021000
 8003498:	40007000 	.word	0x40007000
 800349c:	42420060 	.word	0x42420060

080034a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0d0      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034b4:	4b6a      	ldr	r3, [pc, #424]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d910      	bls.n	80034e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b67      	ldr	r3, [pc, #412]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 0207 	bic.w	r2, r3, #7
 80034ca:	4965      	ldr	r1, [pc, #404]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d2:	4b63      	ldr	r3, [pc, #396]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0b8      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d020      	beq.n	8003532 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034fc:	4b59      	ldr	r3, [pc, #356]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4a58      	ldr	r2, [pc, #352]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003502:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003506:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003514:	4b53      	ldr	r3, [pc, #332]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4a52      	ldr	r2, [pc, #328]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800351a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800351e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003520:	4b50      	ldr	r3, [pc, #320]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	494d      	ldr	r1, [pc, #308]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800352e:	4313      	orrs	r3, r2
 8003530:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d040      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d107      	bne.n	8003556 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	4b47      	ldr	r3, [pc, #284]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d115      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e07f      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d107      	bne.n	800356e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355e:	4b41      	ldr	r3, [pc, #260]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e073      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356e:	4b3d      	ldr	r3, [pc, #244]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e06b      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357e:	4b39      	ldr	r3, [pc, #228]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f023 0203 	bic.w	r2, r3, #3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4936      	ldr	r1, [pc, #216]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	4313      	orrs	r3, r2
 800358e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003590:	f7fe fb98 	bl	8001cc4 <HAL_GetTick>
 8003594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	e00a      	b.n	80035ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003598:	f7fe fb94 	bl	8001cc4 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e053      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ae:	4b2d      	ldr	r3, [pc, #180]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 020c 	and.w	r2, r3, #12
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	429a      	cmp	r2, r3
 80035be:	d1eb      	bne.n	8003598 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035c0:	4b27      	ldr	r3, [pc, #156]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d210      	bcs.n	80035f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ce:	4b24      	ldr	r3, [pc, #144]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 0207 	bic.w	r2, r3, #7
 80035d6:	4922      	ldr	r1, [pc, #136]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	4313      	orrs	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b20      	ldr	r3, [pc, #128]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e032      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035fc:	4b19      	ldr	r3, [pc, #100]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4916      	ldr	r1, [pc, #88]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800360a:	4313      	orrs	r3, r2
 800360c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800361a:	4b12      	ldr	r3, [pc, #72]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	490e      	ldr	r1, [pc, #56]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800362a:	4313      	orrs	r3, r2
 800362c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800362e:	f000 f821 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 8003632:	4602      	mov	r2, r0
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	490a      	ldr	r1, [pc, #40]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 8003640:	5ccb      	ldrb	r3, [r1, r3]
 8003642:	fa22 f303 	lsr.w	r3, r2, r3
 8003646:	4a09      	ldr	r2, [pc, #36]	; (800366c <HAL_RCC_ClockConfig+0x1cc>)
 8003648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800364a:	4b09      	ldr	r3, [pc, #36]	; (8003670 <HAL_RCC_ClockConfig+0x1d0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe faf6 	bl	8001c40 <HAL_InitTick>

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40022000 	.word	0x40022000
 8003664:	40021000 	.word	0x40021000
 8003668:	08007908 	.word	0x08007908
 800366c:	20000004 	.word	0x20000004
 8003670:	20000008 	.word	0x20000008

08003674 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	2300      	movs	r3, #0
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	2300      	movs	r3, #0
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800368e:	4b1e      	ldr	r3, [pc, #120]	; (8003708 <HAL_RCC_GetSysClockFreq+0x94>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b04      	cmp	r3, #4
 800369c:	d002      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0x30>
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d003      	beq.n	80036aa <HAL_RCC_GetSysClockFreq+0x36>
 80036a2:	e027      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036a4:	4b19      	ldr	r3, [pc, #100]	; (800370c <HAL_RCC_GetSysClockFreq+0x98>)
 80036a6:	613b      	str	r3, [r7, #16]
      break;
 80036a8:	e027      	b.n	80036fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	0c9b      	lsrs	r3, r3, #18
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	4a17      	ldr	r2, [pc, #92]	; (8003710 <HAL_RCC_GetSysClockFreq+0x9c>)
 80036b4:	5cd3      	ldrb	r3, [r2, r3]
 80036b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d010      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036c2:	4b11      	ldr	r3, [pc, #68]	; (8003708 <HAL_RCC_GetSysClockFreq+0x94>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	0c5b      	lsrs	r3, r3, #17
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	4a11      	ldr	r2, [pc, #68]	; (8003714 <HAL_RCC_GetSysClockFreq+0xa0>)
 80036ce:	5cd3      	ldrb	r3, [r2, r3]
 80036d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a0d      	ldr	r2, [pc, #52]	; (800370c <HAL_RCC_GetSysClockFreq+0x98>)
 80036d6:	fb02 f203 	mul.w	r2, r2, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	e004      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a0c      	ldr	r2, [pc, #48]	; (8003718 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036e8:	fb02 f303 	mul.w	r3, r2, r3
 80036ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	613b      	str	r3, [r7, #16]
      break;
 80036f2:	e002      	b.n	80036fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <HAL_RCC_GetSysClockFreq+0x98>)
 80036f6:	613b      	str	r3, [r7, #16]
      break;
 80036f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036fa:	693b      	ldr	r3, [r7, #16]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	371c      	adds	r7, #28
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40021000 	.word	0x40021000
 800370c:	007a1200 	.word	0x007a1200
 8003710:	08007920 	.word	0x08007920
 8003714:	08007930 	.word	0x08007930
 8003718:	003d0900 	.word	0x003d0900

0800371c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003720:	4b02      	ldr	r3, [pc, #8]	; (800372c <HAL_RCC_GetHCLKFreq+0x10>)
 8003722:	681b      	ldr	r3, [r3, #0]
}
 8003724:	4618      	mov	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	20000004 	.word	0x20000004

08003730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003734:	f7ff fff2 	bl	800371c <HAL_RCC_GetHCLKFreq>
 8003738:	4602      	mov	r2, r0
 800373a:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	0a1b      	lsrs	r3, r3, #8
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	4903      	ldr	r1, [pc, #12]	; (8003754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003746:	5ccb      	ldrb	r3, [r1, r3]
 8003748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800374c:	4618      	mov	r0, r3
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40021000 	.word	0x40021000
 8003754:	08007918 	.word	0x08007918

08003758 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003760:	4b0a      	ldr	r3, [pc, #40]	; (800378c <RCC_Delay+0x34>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a0a      	ldr	r2, [pc, #40]	; (8003790 <RCC_Delay+0x38>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	0a5b      	lsrs	r3, r3, #9
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003774:	bf00      	nop
  }
  while (Delay --);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1e5a      	subs	r2, r3, #1
 800377a:	60fa      	str	r2, [r7, #12]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f9      	bne.n	8003774 <RCC_Delay+0x1c>
}
 8003780:	bf00      	nop
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	20000004 	.word	0x20000004
 8003790:	10624dd3 	.word	0x10624dd3

08003794 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d07d      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80037b0:	2300      	movs	r3, #0
 80037b2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b4:	4b4f      	ldr	r3, [pc, #316]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10d      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037c0:	4b4c      	ldr	r3, [pc, #304]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	4a4b      	ldr	r2, [pc, #300]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ca:	61d3      	str	r3, [r2, #28]
 80037cc:	4b49      	ldr	r3, [pc, #292]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d8:	2301      	movs	r3, #1
 80037da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037dc:	4b46      	ldr	r3, [pc, #280]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d118      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e8:	4b43      	ldr	r3, [pc, #268]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a42      	ldr	r2, [pc, #264]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f4:	f7fe fa66 	bl	8001cc4 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fa:	e008      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fc:	f7fe fa62 	bl	8001cc4 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b64      	cmp	r3, #100	; 0x64
 8003808:	d901      	bls.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e06d      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380e:	4b3a      	ldr	r3, [pc, #232]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800381a:	4b36      	ldr	r3, [pc, #216]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003822:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d02e      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	429a      	cmp	r2, r3
 8003836:	d027      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003838:	4b2e      	ldr	r3, [pc, #184]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003840:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003842:	4b2e      	ldr	r3, [pc, #184]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003844:	2201      	movs	r2, #1
 8003846:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003848:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800384a:	2200      	movs	r2, #0
 800384c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800384e:	4a29      	ldr	r2, [pc, #164]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d014      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385e:	f7fe fa31 	bl	8001cc4 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003864:	e00a      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003866:	f7fe fa2d 	bl	8001cc4 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	f241 3288 	movw	r2, #5000	; 0x1388
 8003874:	4293      	cmp	r3, r2
 8003876:	d901      	bls.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e036      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387c:	4b1d      	ldr	r3, [pc, #116]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0ee      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003888:	4b1a      	ldr	r3, [pc, #104]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4917      	ldr	r1, [pc, #92]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003896:	4313      	orrs	r3, r2
 8003898:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800389a:	7dfb      	ldrb	r3, [r7, #23]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d105      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a0:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038b8:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	490b      	ldr	r1, [pc, #44]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d008      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038d6:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	4904      	ldr	r1, [pc, #16]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40007000 	.word	0x40007000
 80038fc:	42420440 	.word	0x42420440

08003900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e041      	b.n	8003996 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fe f8b8 	bl	8001a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3304      	adds	r3, #4
 800393c:	4619      	mov	r1, r3
 800393e:	4610      	mov	r0, r2
 8003940:	f000 ff68 	bl	8004814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d001      	beq.n	80039b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e03a      	b.n	8003a2e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <HAL_TIM_Base_Start_IT+0x98>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00e      	beq.n	80039f8 <HAL_TIM_Base_Start_IT+0x58>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e2:	d009      	beq.n	80039f8 <HAL_TIM_Base_Start_IT+0x58>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <HAL_TIM_Base_Start_IT+0x9c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d004      	beq.n	80039f8 <HAL_TIM_Base_Start_IT+0x58>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <HAL_TIM_Base_Start_IT+0xa0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d111      	bne.n	8003a1c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b06      	cmp	r3, #6
 8003a08:	d010      	beq.n	8003a2c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0201 	orr.w	r2, r2, #1
 8003a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a1a:	e007      	b.n	8003a2c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr
 8003a38:	40012c00 	.word	0x40012c00
 8003a3c:	40000400 	.word	0x40000400
 8003a40:	40000800 	.word	0x40000800

08003a44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e041      	b.n	8003ada <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f839 	bl	8003ae2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3304      	adds	r3, #4
 8003a80:	4619      	mov	r1, r3
 8003a82:	4610      	mov	r0, r2
 8003a84:	f000 fec6 	bl	8004814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr

08003af4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d109      	bne.n	8003b18 <HAL_TIM_PWM_Start+0x24>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	bf14      	ite	ne
 8003b10:	2301      	movne	r3, #1
 8003b12:	2300      	moveq	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	e022      	b.n	8003b5e <HAL_TIM_PWM_Start+0x6a>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d109      	bne.n	8003b32 <HAL_TIM_PWM_Start+0x3e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	bf14      	ite	ne
 8003b2a:	2301      	movne	r3, #1
 8003b2c:	2300      	moveq	r3, #0
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	e015      	b.n	8003b5e <HAL_TIM_PWM_Start+0x6a>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d109      	bne.n	8003b4c <HAL_TIM_PWM_Start+0x58>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	bf14      	ite	ne
 8003b44:	2301      	movne	r3, #1
 8003b46:	2300      	moveq	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	e008      	b.n	8003b5e <HAL_TIM_PWM_Start+0x6a>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	bf14      	ite	ne
 8003b58:	2301      	movne	r3, #1
 8003b5a:	2300      	moveq	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e05e      	b.n	8003c24 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d104      	bne.n	8003b76 <HAL_TIM_PWM_Start+0x82>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b74:	e013      	b.n	8003b9e <HAL_TIM_PWM_Start+0xaa>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d104      	bne.n	8003b86 <HAL_TIM_PWM_Start+0x92>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b84:	e00b      	b.n	8003b9e <HAL_TIM_PWM_Start+0xaa>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d104      	bne.n	8003b96 <HAL_TIM_PWM_Start+0xa2>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b94:	e003      	b.n	8003b9e <HAL_TIM_PWM_Start+0xaa>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2202      	movs	r2, #2
 8003b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	6839      	ldr	r1, [r7, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f001 f8b4 	bl	8004d14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1e      	ldr	r2, [pc, #120]	; (8003c2c <HAL_TIM_PWM_Start+0x138>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d107      	bne.n	8003bc6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <HAL_TIM_PWM_Start+0x138>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00e      	beq.n	8003bee <HAL_TIM_PWM_Start+0xfa>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd8:	d009      	beq.n	8003bee <HAL_TIM_PWM_Start+0xfa>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a14      	ldr	r2, [pc, #80]	; (8003c30 <HAL_TIM_PWM_Start+0x13c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d004      	beq.n	8003bee <HAL_TIM_PWM_Start+0xfa>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <HAL_TIM_PWM_Start+0x140>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d111      	bne.n	8003c12 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2b06      	cmp	r3, #6
 8003bfe:	d010      	beq.n	8003c22 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c10:	e007      	b.n	8003c22 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0201 	orr.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40012c00 	.word	0x40012c00
 8003c30:	40000400 	.word	0x40000400
 8003c34:	40000800 	.word	0x40000800

08003c38 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d109      	bne.n	8003c64 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e022      	b.n	8003caa <HAL_TIM_PWM_Start_DMA+0x72>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d109      	bne.n	8003c7e <HAL_TIM_PWM_Start_DMA+0x46>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	bf0c      	ite	eq
 8003c76:	2301      	moveq	r3, #1
 8003c78:	2300      	movne	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	e015      	b.n	8003caa <HAL_TIM_PWM_Start_DMA+0x72>
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d109      	bne.n	8003c98 <HAL_TIM_PWM_Start_DMA+0x60>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	bf0c      	ite	eq
 8003c90:	2301      	moveq	r3, #1
 8003c92:	2300      	movne	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	e008      	b.n	8003caa <HAL_TIM_PWM_Start_DMA+0x72>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e153      	b.n	8003f5a <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d109      	bne.n	8003ccc <HAL_TIM_PWM_Start_DMA+0x94>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	bf0c      	ite	eq
 8003cc4:	2301      	moveq	r3, #1
 8003cc6:	2300      	movne	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	e022      	b.n	8003d12 <HAL_TIM_PWM_Start_DMA+0xda>
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d109      	bne.n	8003ce6 <HAL_TIM_PWM_Start_DMA+0xae>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	bf0c      	ite	eq
 8003cde:	2301      	moveq	r3, #1
 8003ce0:	2300      	movne	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	e015      	b.n	8003d12 <HAL_TIM_PWM_Start_DMA+0xda>
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d109      	bne.n	8003d00 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	bf0c      	ite	eq
 8003cf8:	2301      	moveq	r3, #1
 8003cfa:	2300      	movne	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e008      	b.n	8003d12 <HAL_TIM_PWM_Start_DMA+0xda>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	bf0c      	ite	eq
 8003d0c:	2301      	moveq	r3, #1
 8003d0e:	2300      	movne	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d024      	beq.n	8003d60 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <HAL_TIM_PWM_Start_DMA+0xea>
 8003d1c:	887b      	ldrh	r3, [r7, #2]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e119      	b.n	8003f5a <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d104      	bne.n	8003d36 <HAL_TIM_PWM_Start_DMA+0xfe>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d34:	e016      	b.n	8003d64 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d104      	bne.n	8003d46 <HAL_TIM_PWM_Start_DMA+0x10e>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d44:	e00e      	b.n	8003d64 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d104      	bne.n	8003d56 <HAL_TIM_PWM_Start_DMA+0x11e>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d54:	e006      	b.n	8003d64 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d5e:	e001      	b.n	8003d64 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0fa      	b.n	8003f5a <HAL_TIM_PWM_Start_DMA+0x322>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b0c      	cmp	r3, #12
 8003d68:	f200 80ae 	bhi.w	8003ec8 <HAL_TIM_PWM_Start_DMA+0x290>
 8003d6c:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d72:	bf00      	nop
 8003d74:	08003da9 	.word	0x08003da9
 8003d78:	08003ec9 	.word	0x08003ec9
 8003d7c:	08003ec9 	.word	0x08003ec9
 8003d80:	08003ec9 	.word	0x08003ec9
 8003d84:	08003df1 	.word	0x08003df1
 8003d88:	08003ec9 	.word	0x08003ec9
 8003d8c:	08003ec9 	.word	0x08003ec9
 8003d90:	08003ec9 	.word	0x08003ec9
 8003d94:	08003e39 	.word	0x08003e39
 8003d98:	08003ec9 	.word	0x08003ec9
 8003d9c:	08003ec9 	.word	0x08003ec9
 8003da0:	08003ec9 	.word	0x08003ec9
 8003da4:	08003e81 	.word	0x08003e81
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	4a6d      	ldr	r2, [pc, #436]	; (8003f64 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003dae:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	4a6c      	ldr	r2, [pc, #432]	; (8003f68 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003db6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	4a6b      	ldr	r2, [pc, #428]	; (8003f6c <HAL_TIM_PWM_Start_DMA+0x334>)
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3334      	adds	r3, #52	; 0x34
 8003dcc:	461a      	mov	r2, r3
 8003dce:	887b      	ldrh	r3, [r7, #2]
 8003dd0:	f7fe fbfa 	bl	80025c8 <HAL_DMA_Start_IT>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e0bd      	b.n	8003f5a <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dec:	60da      	str	r2, [r3, #12]
      break;
 8003dee:	e06e      	b.n	8003ece <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df4:	4a5b      	ldr	r2, [pc, #364]	; (8003f64 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003df6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfc:	4a5a      	ldr	r2, [pc, #360]	; (8003f68 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003dfe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	4a59      	ldr	r2, [pc, #356]	; (8003f6c <HAL_TIM_PWM_Start_DMA+0x334>)
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3338      	adds	r3, #56	; 0x38
 8003e14:	461a      	mov	r2, r3
 8003e16:	887b      	ldrh	r3, [r7, #2]
 8003e18:	f7fe fbd6 	bl	80025c8 <HAL_DMA_Start_IT>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e099      	b.n	8003f5a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e34:	60da      	str	r2, [r3, #12]
      break;
 8003e36:	e04a      	b.n	8003ece <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	4a49      	ldr	r2, [pc, #292]	; (8003f64 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003e3e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	4a48      	ldr	r2, [pc, #288]	; (8003f68 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003e46:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	4a47      	ldr	r2, [pc, #284]	; (8003f6c <HAL_TIM_PWM_Start_DMA+0x334>)
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	333c      	adds	r3, #60	; 0x3c
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	887b      	ldrh	r3, [r7, #2]
 8003e60:	f7fe fbb2 	bl	80025c8 <HAL_DMA_Start_IT>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e075      	b.n	8003f5a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e7c:	60da      	str	r2, [r3, #12]
      break;
 8003e7e:	e026      	b.n	8003ece <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	4a37      	ldr	r2, [pc, #220]	; (8003f64 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003e86:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	4a36      	ldr	r2, [pc, #216]	; (8003f68 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003e8e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	4a35      	ldr	r2, [pc, #212]	; (8003f6c <HAL_TIM_PWM_Start_DMA+0x334>)
 8003e96:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3340      	adds	r3, #64	; 0x40
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	887b      	ldrh	r3, [r7, #2]
 8003ea8:	f7fe fb8e 	bl	80025c8 <HAL_DMA_Start_IT>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e051      	b.n	8003f5a <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ec4:	60da      	str	r2, [r3, #12]
      break;
 8003ec6:	e002      	b.n	8003ece <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	75fb      	strb	r3, [r7, #23]
      break;
 8003ecc:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d141      	bne.n	8003f58 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 ff19 	bl	8004d14 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a22      	ldr	r2, [pc, #136]	; (8003f70 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d107      	bne.n	8003efc <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003efa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1b      	ldr	r2, [pc, #108]	; (8003f70 <HAL_TIM_PWM_Start_DMA+0x338>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00e      	beq.n	8003f24 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0e:	d009      	beq.n	8003f24 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a17      	ldr	r2, [pc, #92]	; (8003f74 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d004      	beq.n	8003f24 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a16      	ldr	r2, [pc, #88]	; (8003f78 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d111      	bne.n	8003f48 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	2b06      	cmp	r3, #6
 8003f34:	d010      	beq.n	8003f58 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0201 	orr.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f46:	e007      	b.n	8003f58 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	08004705 	.word	0x08004705
 8003f68:	080047ad 	.word	0x080047ad
 8003f6c:	08004673 	.word	0x08004673
 8003f70:	40012c00 	.word	0x40012c00
 8003f74:	40000400 	.word	0x40000400
 8003f78:	40000800 	.word	0x40000800

08003f7c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	73fb      	strb	r3, [r7, #15]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b0c      	cmp	r3, #12
 8003f8e:	d855      	bhi.n	800403c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003f90:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f96:	bf00      	nop
 8003f98:	08003fcd 	.word	0x08003fcd
 8003f9c:	0800403d 	.word	0x0800403d
 8003fa0:	0800403d 	.word	0x0800403d
 8003fa4:	0800403d 	.word	0x0800403d
 8003fa8:	08003fe9 	.word	0x08003fe9
 8003fac:	0800403d 	.word	0x0800403d
 8003fb0:	0800403d 	.word	0x0800403d
 8003fb4:	0800403d 	.word	0x0800403d
 8003fb8:	08004005 	.word	0x08004005
 8003fbc:	0800403d 	.word	0x0800403d
 8003fc0:	0800403d 	.word	0x0800403d
 8003fc4:	0800403d 	.word	0x0800403d
 8003fc8:	08004021 	.word	0x08004021
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003fda:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fe fb51 	bl	8002688 <HAL_DMA_Abort_IT>
      break;
 8003fe6:	e02c      	b.n	8004042 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fe fb43 	bl	8002688 <HAL_DMA_Abort_IT>
      break;
 8004002:	e01e      	b.n	8004042 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004012:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	4618      	mov	r0, r3
 800401a:	f7fe fb35 	bl	8002688 <HAL_DMA_Abort_IT>
      break;
 800401e:	e010      	b.n	8004042 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800402e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004034:	4618      	mov	r0, r3
 8004036:	f7fe fb27 	bl	8002688 <HAL_DMA_Abort_IT>
      break;
 800403a:	e002      	b.n	8004042 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	73fb      	strb	r3, [r7, #15]
      break;
 8004040:	bf00      	nop
  }

  if (status == HAL_OK)
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d157      	bne.n	80040f8 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2200      	movs	r2, #0
 800404e:	6839      	ldr	r1, [r7, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fe5f 	bl	8004d14 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a2a      	ldr	r2, [pc, #168]	; (8004104 <HAL_TIM_PWM_Stop_DMA+0x188>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d117      	bne.n	8004090 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6a1a      	ldr	r2, [r3, #32]
 8004066:	f241 1311 	movw	r3, #4369	; 0x1111
 800406a:	4013      	ands	r3, r2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10f      	bne.n	8004090 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6a1a      	ldr	r2, [r3, #32]
 8004076:	f240 4344 	movw	r3, #1092	; 0x444
 800407a:	4013      	ands	r3, r2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d107      	bne.n	8004090 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800408e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6a1a      	ldr	r2, [r3, #32]
 8004096:	f241 1311 	movw	r3, #4369	; 0x1111
 800409a:	4013      	ands	r3, r2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10f      	bne.n	80040c0 <HAL_TIM_PWM_Stop_DMA+0x144>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6a1a      	ldr	r2, [r3, #32]
 80040a6:	f240 4344 	movw	r3, #1092	; 0x444
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d107      	bne.n	80040c0 <HAL_TIM_PWM_Stop_DMA+0x144>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d104      	bne.n	80040d0 <HAL_TIM_PWM_Stop_DMA+0x154>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040ce:	e013      	b.n	80040f8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d104      	bne.n	80040e0 <HAL_TIM_PWM_Stop_DMA+0x164>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040de:	e00b      	b.n	80040f8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d104      	bne.n	80040f0 <HAL_TIM_PWM_Stop_DMA+0x174>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ee:	e003      	b.n	80040f8 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40012c00 	.word	0x40012c00

08004108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b02      	cmp	r3, #2
 800411c:	d122      	bne.n	8004164 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b02      	cmp	r3, #2
 800412a:	d11b      	bne.n	8004164 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0202 	mvn.w	r2, #2
 8004134:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fa76 	bl	800463c <HAL_TIM_IC_CaptureCallback>
 8004150:	e005      	b.n	800415e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fa69 	bl	800462a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7fd f875 	bl	8001248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b04      	cmp	r3, #4
 8004170:	d122      	bne.n	80041b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b04      	cmp	r3, #4
 800417e:	d11b      	bne.n	80041b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0204 	mvn.w	r2, #4
 8004188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2202      	movs	r2, #2
 800418e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fa4c 	bl	800463c <HAL_TIM_IC_CaptureCallback>
 80041a4:	e005      	b.n	80041b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fa3f 	bl	800462a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7fd f84b 	bl	8001248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d122      	bne.n	800420c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d11b      	bne.n	800420c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0208 	mvn.w	r2, #8
 80041dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2204      	movs	r2, #4
 80041e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fa22 	bl	800463c <HAL_TIM_IC_CaptureCallback>
 80041f8:	e005      	b.n	8004206 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fa15 	bl	800462a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7fd f821 	bl	8001248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b10      	cmp	r3, #16
 8004218:	d122      	bne.n	8004260 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0310 	and.w	r3, r3, #16
 8004224:	2b10      	cmp	r3, #16
 8004226:	d11b      	bne.n	8004260 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0210 	mvn.w	r2, #16
 8004230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2208      	movs	r2, #8
 8004236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f9f8 	bl	800463c <HAL_TIM_IC_CaptureCallback>
 800424c:	e005      	b.n	800425a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f9eb 	bl	800462a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7fc fff7 	bl	8001248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b01      	cmp	r3, #1
 800426c:	d10e      	bne.n	800428c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b01      	cmp	r3, #1
 800427a:	d107      	bne.n	800428c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0201 	mvn.w	r2, #1
 8004284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fc fe4e 	bl	8000f28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004296:	2b80      	cmp	r3, #128	; 0x80
 8004298:	d10e      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a4:	2b80      	cmp	r3, #128	; 0x80
 80042a6:	d107      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fe0a 	bl	8004ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c2:	2b40      	cmp	r3, #64	; 0x40
 80042c4:	d10e      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d0:	2b40      	cmp	r3, #64	; 0x40
 80042d2:	d107      	bne.n	80042e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f9b5 	bl	800464e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b20      	cmp	r3, #32
 80042f0:	d10e      	bne.n	8004310 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b20      	cmp	r3, #32
 80042fe:	d107      	bne.n	8004310 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f06f 0220 	mvn.w	r2, #32
 8004308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 fdd5 	bl	8004eba <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004332:	2302      	movs	r3, #2
 8004334:	e0ae      	b.n	8004494 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b0c      	cmp	r3, #12
 8004342:	f200 809f 	bhi.w	8004484 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004346:	a201      	add	r2, pc, #4	; (adr r2, 800434c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434c:	08004381 	.word	0x08004381
 8004350:	08004485 	.word	0x08004485
 8004354:	08004485 	.word	0x08004485
 8004358:	08004485 	.word	0x08004485
 800435c:	080043c1 	.word	0x080043c1
 8004360:	08004485 	.word	0x08004485
 8004364:	08004485 	.word	0x08004485
 8004368:	08004485 	.word	0x08004485
 800436c:	08004403 	.word	0x08004403
 8004370:	08004485 	.word	0x08004485
 8004374:	08004485 	.word	0x08004485
 8004378:	08004485 	.word	0x08004485
 800437c:	08004443 	.word	0x08004443
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	4618      	mov	r0, r3
 8004388:	f000 faa6 	bl	80048d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699a      	ldr	r2, [r3, #24]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0208 	orr.w	r2, r2, #8
 800439a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0204 	bic.w	r2, r2, #4
 80043aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6999      	ldr	r1, [r3, #24]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	691a      	ldr	r2, [r3, #16]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	619a      	str	r2, [r3, #24]
      break;
 80043be:	e064      	b.n	800448a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 faec 	bl	80049a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699a      	ldr	r2, [r3, #24]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6999      	ldr	r1, [r3, #24]
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	021a      	lsls	r2, r3, #8
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	619a      	str	r2, [r3, #24]
      break;
 8004400:	e043      	b.n	800448a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68b9      	ldr	r1, [r7, #8]
 8004408:	4618      	mov	r0, r3
 800440a:	f000 fb35 	bl	8004a78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69da      	ldr	r2, [r3, #28]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0208 	orr.w	r2, r2, #8
 800441c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	69da      	ldr	r2, [r3, #28]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0204 	bic.w	r2, r2, #4
 800442c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	69d9      	ldr	r1, [r3, #28]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	61da      	str	r2, [r3, #28]
      break;
 8004440:	e023      	b.n	800448a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68b9      	ldr	r1, [r7, #8]
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fb7f 	bl	8004b4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69da      	ldr	r2, [r3, #28]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800445c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69da      	ldr	r2, [r3, #28]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800446c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69d9      	ldr	r1, [r3, #28]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	021a      	lsls	r2, r3, #8
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	61da      	str	r2, [r3, #28]
      break;
 8004482:	e002      	b.n	800448a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	75fb      	strb	r3, [r7, #23]
      break;
 8004488:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004492:	7dfb      	ldrb	r3, [r7, #23]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_TIM_ConfigClockSource+0x1c>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e0b4      	b.n	8004622 <HAL_TIM_ConfigClockSource+0x186>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044f0:	d03e      	beq.n	8004570 <HAL_TIM_ConfigClockSource+0xd4>
 80044f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044f6:	f200 8087 	bhi.w	8004608 <HAL_TIM_ConfigClockSource+0x16c>
 80044fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044fe:	f000 8086 	beq.w	800460e <HAL_TIM_ConfigClockSource+0x172>
 8004502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004506:	d87f      	bhi.n	8004608 <HAL_TIM_ConfigClockSource+0x16c>
 8004508:	2b70      	cmp	r3, #112	; 0x70
 800450a:	d01a      	beq.n	8004542 <HAL_TIM_ConfigClockSource+0xa6>
 800450c:	2b70      	cmp	r3, #112	; 0x70
 800450e:	d87b      	bhi.n	8004608 <HAL_TIM_ConfigClockSource+0x16c>
 8004510:	2b60      	cmp	r3, #96	; 0x60
 8004512:	d050      	beq.n	80045b6 <HAL_TIM_ConfigClockSource+0x11a>
 8004514:	2b60      	cmp	r3, #96	; 0x60
 8004516:	d877      	bhi.n	8004608 <HAL_TIM_ConfigClockSource+0x16c>
 8004518:	2b50      	cmp	r3, #80	; 0x50
 800451a:	d03c      	beq.n	8004596 <HAL_TIM_ConfigClockSource+0xfa>
 800451c:	2b50      	cmp	r3, #80	; 0x50
 800451e:	d873      	bhi.n	8004608 <HAL_TIM_ConfigClockSource+0x16c>
 8004520:	2b40      	cmp	r3, #64	; 0x40
 8004522:	d058      	beq.n	80045d6 <HAL_TIM_ConfigClockSource+0x13a>
 8004524:	2b40      	cmp	r3, #64	; 0x40
 8004526:	d86f      	bhi.n	8004608 <HAL_TIM_ConfigClockSource+0x16c>
 8004528:	2b30      	cmp	r3, #48	; 0x30
 800452a:	d064      	beq.n	80045f6 <HAL_TIM_ConfigClockSource+0x15a>
 800452c:	2b30      	cmp	r3, #48	; 0x30
 800452e:	d86b      	bhi.n	8004608 <HAL_TIM_ConfigClockSource+0x16c>
 8004530:	2b20      	cmp	r3, #32
 8004532:	d060      	beq.n	80045f6 <HAL_TIM_ConfigClockSource+0x15a>
 8004534:	2b20      	cmp	r3, #32
 8004536:	d867      	bhi.n	8004608 <HAL_TIM_ConfigClockSource+0x16c>
 8004538:	2b00      	cmp	r3, #0
 800453a:	d05c      	beq.n	80045f6 <HAL_TIM_ConfigClockSource+0x15a>
 800453c:	2b10      	cmp	r3, #16
 800453e:	d05a      	beq.n	80045f6 <HAL_TIM_ConfigClockSource+0x15a>
 8004540:	e062      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	6899      	ldr	r1, [r3, #8]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f000 fbc0 	bl	8004cd6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004564:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	609a      	str	r2, [r3, #8]
      break;
 800456e:	e04f      	b.n	8004610 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	6899      	ldr	r1, [r3, #8]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f000 fba9 	bl	8004cd6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004592:	609a      	str	r2, [r3, #8]
      break;
 8004594:	e03c      	b.n	8004610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6859      	ldr	r1, [r3, #4]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	461a      	mov	r2, r3
 80045a4:	f000 fb20 	bl	8004be8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2150      	movs	r1, #80	; 0x50
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fb77 	bl	8004ca2 <TIM_ITRx_SetConfig>
      break;
 80045b4:	e02c      	b.n	8004610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	6859      	ldr	r1, [r3, #4]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	461a      	mov	r2, r3
 80045c4:	f000 fb3e 	bl	8004c44 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2160      	movs	r1, #96	; 0x60
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fb67 	bl	8004ca2 <TIM_ITRx_SetConfig>
      break;
 80045d4:	e01c      	b.n	8004610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	6859      	ldr	r1, [r3, #4]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	461a      	mov	r2, r3
 80045e4:	f000 fb00 	bl	8004be8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2140      	movs	r1, #64	; 0x40
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fb57 	bl	8004ca2 <TIM_ITRx_SetConfig>
      break;
 80045f4:	e00c      	b.n	8004610 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4619      	mov	r1, r3
 8004600:	4610      	mov	r0, r2
 8004602:	f000 fb4e 	bl	8004ca2 <TIM_ITRx_SetConfig>
      break;
 8004606:	e003      	b.n	8004610 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	73fb      	strb	r3, [r7, #15]
      break;
 800460c:	e000      	b.n	8004610 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800460e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004620:	7bfb      	ldrb	r3, [r7, #15]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr

0800463c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr

0800464e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr

08004660 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr

08004672 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b084      	sub	sp, #16
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	429a      	cmp	r2, r3
 8004688:	d107      	bne.n	800469a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004698:	e02a      	b.n	80046f0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d107      	bne.n	80046b4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2202      	movs	r2, #2
 80046a8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046b2:	e01d      	b.n	80046f0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d107      	bne.n	80046ce <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2204      	movs	r2, #4
 80046c2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046cc:	e010      	b.n	80046f0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d107      	bne.n	80046e8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2208      	movs	r2, #8
 80046dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046e6:	e003      	b.n	80046f0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f7ff ffb5 	bl	8004660 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	771a      	strb	r2, [r3, #28]
}
 80046fc:	bf00      	nop
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	429a      	cmp	r2, r3
 800471a:	d10b      	bne.n	8004734 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2201      	movs	r2, #1
 8004720:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d136      	bne.n	8004798 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004732:	e031      	b.n	8004798 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	429a      	cmp	r2, r3
 800473c:	d10b      	bne.n	8004756 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2202      	movs	r2, #2
 8004742:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d125      	bne.n	8004798 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004754:	e020      	b.n	8004798 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	429a      	cmp	r2, r3
 800475e:	d10b      	bne.n	8004778 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2204      	movs	r2, #4
 8004764:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d114      	bne.n	8004798 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004776:	e00f      	b.n	8004798 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	429a      	cmp	r2, r3
 8004780:	d10a      	bne.n	8004798 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2208      	movs	r2, #8
 8004786:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d103      	bne.n	8004798 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f7fc fd55 	bl	8001248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	771a      	strb	r2, [r3, #28]
}
 80047a4:	bf00      	nop
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d103      	bne.n	80047cc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2201      	movs	r2, #1
 80047c8:	771a      	strb	r2, [r3, #28]
 80047ca:	e019      	b.n	8004800 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d103      	bne.n	80047de <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2202      	movs	r2, #2
 80047da:	771a      	strb	r2, [r3, #28]
 80047dc:	e010      	b.n	8004800 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d103      	bne.n	80047f0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2204      	movs	r2, #4
 80047ec:	771a      	strb	r2, [r3, #28]
 80047ee:	e007      	b.n	8004800 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d102      	bne.n	8004800 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2208      	movs	r2, #8
 80047fe:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f7fc fca3 	bl	800114c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	771a      	strb	r2, [r3, #28]
}
 800480c:	bf00      	nop
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a29      	ldr	r2, [pc, #164]	; (80048cc <TIM_Base_SetConfig+0xb8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00b      	beq.n	8004844 <TIM_Base_SetConfig+0x30>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004832:	d007      	beq.n	8004844 <TIM_Base_SetConfig+0x30>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a26      	ldr	r2, [pc, #152]	; (80048d0 <TIM_Base_SetConfig+0xbc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d003      	beq.n	8004844 <TIM_Base_SetConfig+0x30>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a25      	ldr	r2, [pc, #148]	; (80048d4 <TIM_Base_SetConfig+0xc0>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d108      	bne.n	8004856 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a1c      	ldr	r2, [pc, #112]	; (80048cc <TIM_Base_SetConfig+0xb8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00b      	beq.n	8004876 <TIM_Base_SetConfig+0x62>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004864:	d007      	beq.n	8004876 <TIM_Base_SetConfig+0x62>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a19      	ldr	r2, [pc, #100]	; (80048d0 <TIM_Base_SetConfig+0xbc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d003      	beq.n	8004876 <TIM_Base_SetConfig+0x62>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a18      	ldr	r2, [pc, #96]	; (80048d4 <TIM_Base_SetConfig+0xc0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d108      	bne.n	8004888 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800487c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a07      	ldr	r2, [pc, #28]	; (80048cc <TIM_Base_SetConfig+0xb8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d103      	bne.n	80048bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	615a      	str	r2, [r3, #20]
}
 80048c2:	bf00      	nop
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr
 80048cc:	40012c00 	.word	0x40012c00
 80048d0:	40000400 	.word	0x40000400
 80048d4:	40000800 	.word	0x40000800

080048d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	f023 0201 	bic.w	r2, r3, #1
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f023 0303 	bic.w	r3, r3, #3
 800490e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f023 0302 	bic.w	r3, r3, #2
 8004920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a1c      	ldr	r2, [pc, #112]	; (80049a0 <TIM_OC1_SetConfig+0xc8>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d10c      	bne.n	800494e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f023 0308 	bic.w	r3, r3, #8
 800493a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f023 0304 	bic.w	r3, r3, #4
 800494c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a13      	ldr	r2, [pc, #76]	; (80049a0 <TIM_OC1_SetConfig+0xc8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d111      	bne.n	800497a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800495c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	621a      	str	r2, [r3, #32]
}
 8004994:	bf00      	nop
 8004996:	371c      	adds	r7, #28
 8004998:	46bd      	mov	sp, r7
 800499a:	bc80      	pop	{r7}
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40012c00 	.word	0x40012c00

080049a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	f023 0210 	bic.w	r2, r3, #16
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	021b      	lsls	r3, r3, #8
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f023 0320 	bic.w	r3, r3, #32
 80049ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a1d      	ldr	r2, [pc, #116]	; (8004a74 <TIM_OC2_SetConfig+0xd0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d10d      	bne.n	8004a20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a14      	ldr	r2, [pc, #80]	; (8004a74 <TIM_OC2_SetConfig+0xd0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d113      	bne.n	8004a50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	621a      	str	r2, [r3, #32]
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bc80      	pop	{r7}
 8004a72:	4770      	bx	lr
 8004a74:	40012c00 	.word	0x40012c00

08004a78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0303 	bic.w	r3, r3, #3
 8004aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a1d      	ldr	r2, [pc, #116]	; (8004b48 <TIM_OC3_SetConfig+0xd0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d10d      	bne.n	8004af2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004adc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a14      	ldr	r2, [pc, #80]	; (8004b48 <TIM_OC3_SetConfig+0xd0>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d113      	bne.n	8004b22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	621a      	str	r2, [r3, #32]
}
 8004b3c:	bf00      	nop
 8004b3e:	371c      	adds	r7, #28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40012c00 	.word	0x40012c00

08004b4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	031b      	lsls	r3, r3, #12
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a0f      	ldr	r2, [pc, #60]	; (8004be4 <TIM_OC4_SetConfig+0x98>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d109      	bne.n	8004bc0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	019b      	lsls	r3, r3, #6
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	621a      	str	r2, [r3, #32]
}
 8004bda:	bf00      	nop
 8004bdc:	371c      	adds	r7, #28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr
 8004be4:	40012c00 	.word	0x40012c00

08004be8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	f023 0201 	bic.w	r2, r3, #1
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f023 030a 	bic.w	r3, r3, #10
 8004c24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	621a      	str	r2, [r3, #32]
}
 8004c3a:	bf00      	nop
 8004c3c:	371c      	adds	r7, #28
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr

08004c44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f023 0210 	bic.w	r2, r3, #16
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	031b      	lsls	r3, r3, #12
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c80:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	621a      	str	r2, [r3, #32]
}
 8004c98:	bf00      	nop
 8004c9a:	371c      	adds	r7, #28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	4770      	bx	lr

08004ca2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b085      	sub	sp, #20
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f043 0307 	orr.w	r3, r3, #7
 8004cc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	609a      	str	r2, [r3, #8]
}
 8004ccc:	bf00      	nop
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr

08004cd6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b087      	sub	sp, #28
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
 8004ce2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cf0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	021a      	lsls	r2, r3, #8
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	609a      	str	r2, [r3, #8]
}
 8004d0a:	bf00      	nop
 8004d0c:	371c      	adds	r7, #28
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr

08004d14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	2201      	movs	r2, #1
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a1a      	ldr	r2, [r3, #32]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	43db      	mvns	r3, r3
 8004d36:	401a      	ands	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a1a      	ldr	r2, [r3, #32]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 031f 	and.w	r3, r3, #31
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	fa01 f303 	lsl.w	r3, r1, r3
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	621a      	str	r2, [r3, #32]
}
 8004d52:	bf00      	nop
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bc80      	pop	{r7}
 8004d5a:	4770      	bx	lr

08004d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d101      	bne.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d70:	2302      	movs	r3, #2
 8004d72:	e046      	b.n	8004e02 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a16      	ldr	r2, [pc, #88]	; (8004e0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00e      	beq.n	8004dd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc0:	d009      	beq.n	8004dd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a12      	ldr	r2, [pc, #72]	; (8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d004      	beq.n	8004dd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a10      	ldr	r2, [pc, #64]	; (8004e14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d10c      	bne.n	8004df0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ddc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bc80      	pop	{r7}
 8004e0a:	4770      	bx	lr
 8004e0c:	40012c00 	.word	0x40012c00
 8004e10:	40000400 	.word	0x40000400
 8004e14:	40000800 	.word	0x40000800

08004e18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d101      	bne.n	8004e34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e30:	2302      	movs	r3, #2
 8004e32:	e03d      	b.n	8004eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr

08004ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr
	...

08004ee0 <__errno>:
 8004ee0:	4b01      	ldr	r3, [pc, #4]	; (8004ee8 <__errno+0x8>)
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	20000010 	.word	0x20000010

08004eec <__libc_init_array>:
 8004eec:	b570      	push	{r4, r5, r6, lr}
 8004eee:	2600      	movs	r6, #0
 8004ef0:	4d0c      	ldr	r5, [pc, #48]	; (8004f24 <__libc_init_array+0x38>)
 8004ef2:	4c0d      	ldr	r4, [pc, #52]	; (8004f28 <__libc_init_array+0x3c>)
 8004ef4:	1b64      	subs	r4, r4, r5
 8004ef6:	10a4      	asrs	r4, r4, #2
 8004ef8:	42a6      	cmp	r6, r4
 8004efa:	d109      	bne.n	8004f10 <__libc_init_array+0x24>
 8004efc:	f002 fcf6 	bl	80078ec <_init>
 8004f00:	2600      	movs	r6, #0
 8004f02:	4d0a      	ldr	r5, [pc, #40]	; (8004f2c <__libc_init_array+0x40>)
 8004f04:	4c0a      	ldr	r4, [pc, #40]	; (8004f30 <__libc_init_array+0x44>)
 8004f06:	1b64      	subs	r4, r4, r5
 8004f08:	10a4      	asrs	r4, r4, #2
 8004f0a:	42a6      	cmp	r6, r4
 8004f0c:	d105      	bne.n	8004f1a <__libc_init_array+0x2e>
 8004f0e:	bd70      	pop	{r4, r5, r6, pc}
 8004f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f14:	4798      	blx	r3
 8004f16:	3601      	adds	r6, #1
 8004f18:	e7ee      	b.n	8004ef8 <__libc_init_array+0xc>
 8004f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f1e:	4798      	blx	r3
 8004f20:	3601      	adds	r6, #1
 8004f22:	e7f2      	b.n	8004f0a <__libc_init_array+0x1e>
 8004f24:	08007d14 	.word	0x08007d14
 8004f28:	08007d14 	.word	0x08007d14
 8004f2c:	08007d14 	.word	0x08007d14
 8004f30:	08007d18 	.word	0x08007d18

08004f34 <memset>:
 8004f34:	4603      	mov	r3, r0
 8004f36:	4402      	add	r2, r0
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d100      	bne.n	8004f3e <memset+0xa>
 8004f3c:	4770      	bx	lr
 8004f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f42:	e7f9      	b.n	8004f38 <memset+0x4>

08004f44 <__cvt>:
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f4a:	461f      	mov	r7, r3
 8004f4c:	bfbb      	ittet	lt
 8004f4e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004f52:	461f      	movlt	r7, r3
 8004f54:	2300      	movge	r3, #0
 8004f56:	232d      	movlt	r3, #45	; 0x2d
 8004f58:	b088      	sub	sp, #32
 8004f5a:	4614      	mov	r4, r2
 8004f5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004f5e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004f60:	7013      	strb	r3, [r2, #0]
 8004f62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004f64:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004f68:	f023 0820 	bic.w	r8, r3, #32
 8004f6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f70:	d005      	beq.n	8004f7e <__cvt+0x3a>
 8004f72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004f76:	d100      	bne.n	8004f7a <__cvt+0x36>
 8004f78:	3501      	adds	r5, #1
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e000      	b.n	8004f80 <__cvt+0x3c>
 8004f7e:	2303      	movs	r3, #3
 8004f80:	aa07      	add	r2, sp, #28
 8004f82:	9204      	str	r2, [sp, #16]
 8004f84:	aa06      	add	r2, sp, #24
 8004f86:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004f8a:	e9cd 3500 	strd	r3, r5, [sp]
 8004f8e:	4622      	mov	r2, r4
 8004f90:	463b      	mov	r3, r7
 8004f92:	f000 fcc5 	bl	8005920 <_dtoa_r>
 8004f96:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f9a:	4606      	mov	r6, r0
 8004f9c:	d102      	bne.n	8004fa4 <__cvt+0x60>
 8004f9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004fa0:	07db      	lsls	r3, r3, #31
 8004fa2:	d522      	bpl.n	8004fea <__cvt+0xa6>
 8004fa4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fa8:	eb06 0905 	add.w	r9, r6, r5
 8004fac:	d110      	bne.n	8004fd0 <__cvt+0x8c>
 8004fae:	7833      	ldrb	r3, [r6, #0]
 8004fb0:	2b30      	cmp	r3, #48	; 0x30
 8004fb2:	d10a      	bne.n	8004fca <__cvt+0x86>
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	4620      	mov	r0, r4
 8004fba:	4639      	mov	r1, r7
 8004fbc:	f7fb fcf4 	bl	80009a8 <__aeabi_dcmpeq>
 8004fc0:	b918      	cbnz	r0, 8004fca <__cvt+0x86>
 8004fc2:	f1c5 0501 	rsb	r5, r5, #1
 8004fc6:	f8ca 5000 	str.w	r5, [sl]
 8004fca:	f8da 3000 	ldr.w	r3, [sl]
 8004fce:	4499      	add	r9, r3
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	4639      	mov	r1, r7
 8004fd8:	f7fb fce6 	bl	80009a8 <__aeabi_dcmpeq>
 8004fdc:	b108      	cbz	r0, 8004fe2 <__cvt+0x9e>
 8004fde:	f8cd 901c 	str.w	r9, [sp, #28]
 8004fe2:	2230      	movs	r2, #48	; 0x30
 8004fe4:	9b07      	ldr	r3, [sp, #28]
 8004fe6:	454b      	cmp	r3, r9
 8004fe8:	d307      	bcc.n	8004ffa <__cvt+0xb6>
 8004fea:	4630      	mov	r0, r6
 8004fec:	9b07      	ldr	r3, [sp, #28]
 8004fee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004ff0:	1b9b      	subs	r3, r3, r6
 8004ff2:	6013      	str	r3, [r2, #0]
 8004ff4:	b008      	add	sp, #32
 8004ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ffa:	1c59      	adds	r1, r3, #1
 8004ffc:	9107      	str	r1, [sp, #28]
 8004ffe:	701a      	strb	r2, [r3, #0]
 8005000:	e7f0      	b.n	8004fe4 <__cvt+0xa0>

08005002 <__exponent>:
 8005002:	4603      	mov	r3, r0
 8005004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005006:	2900      	cmp	r1, #0
 8005008:	f803 2b02 	strb.w	r2, [r3], #2
 800500c:	bfb6      	itet	lt
 800500e:	222d      	movlt	r2, #45	; 0x2d
 8005010:	222b      	movge	r2, #43	; 0x2b
 8005012:	4249      	neglt	r1, r1
 8005014:	2909      	cmp	r1, #9
 8005016:	7042      	strb	r2, [r0, #1]
 8005018:	dd2b      	ble.n	8005072 <__exponent+0x70>
 800501a:	f10d 0407 	add.w	r4, sp, #7
 800501e:	46a4      	mov	ip, r4
 8005020:	270a      	movs	r7, #10
 8005022:	fb91 f6f7 	sdiv	r6, r1, r7
 8005026:	460a      	mov	r2, r1
 8005028:	46a6      	mov	lr, r4
 800502a:	fb07 1516 	mls	r5, r7, r6, r1
 800502e:	2a63      	cmp	r2, #99	; 0x63
 8005030:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005034:	4631      	mov	r1, r6
 8005036:	f104 34ff 	add.w	r4, r4, #4294967295
 800503a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800503e:	dcf0      	bgt.n	8005022 <__exponent+0x20>
 8005040:	3130      	adds	r1, #48	; 0x30
 8005042:	f1ae 0502 	sub.w	r5, lr, #2
 8005046:	f804 1c01 	strb.w	r1, [r4, #-1]
 800504a:	4629      	mov	r1, r5
 800504c:	1c44      	adds	r4, r0, #1
 800504e:	4561      	cmp	r1, ip
 8005050:	d30a      	bcc.n	8005068 <__exponent+0x66>
 8005052:	f10d 0209 	add.w	r2, sp, #9
 8005056:	eba2 020e 	sub.w	r2, r2, lr
 800505a:	4565      	cmp	r5, ip
 800505c:	bf88      	it	hi
 800505e:	2200      	movhi	r2, #0
 8005060:	4413      	add	r3, r2
 8005062:	1a18      	subs	r0, r3, r0
 8005064:	b003      	add	sp, #12
 8005066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005068:	f811 2b01 	ldrb.w	r2, [r1], #1
 800506c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005070:	e7ed      	b.n	800504e <__exponent+0x4c>
 8005072:	2330      	movs	r3, #48	; 0x30
 8005074:	3130      	adds	r1, #48	; 0x30
 8005076:	7083      	strb	r3, [r0, #2]
 8005078:	70c1      	strb	r1, [r0, #3]
 800507a:	1d03      	adds	r3, r0, #4
 800507c:	e7f1      	b.n	8005062 <__exponent+0x60>
	...

08005080 <_printf_float>:
 8005080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005084:	b091      	sub	sp, #68	; 0x44
 8005086:	460c      	mov	r4, r1
 8005088:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800508c:	4616      	mov	r6, r2
 800508e:	461f      	mov	r7, r3
 8005090:	4605      	mov	r5, r0
 8005092:	f001 fa33 	bl	80064fc <_localeconv_r>
 8005096:	6803      	ldr	r3, [r0, #0]
 8005098:	4618      	mov	r0, r3
 800509a:	9309      	str	r3, [sp, #36]	; 0x24
 800509c:	f7fb f858 	bl	8000150 <strlen>
 80050a0:	2300      	movs	r3, #0
 80050a2:	930e      	str	r3, [sp, #56]	; 0x38
 80050a4:	f8d8 3000 	ldr.w	r3, [r8]
 80050a8:	900a      	str	r0, [sp, #40]	; 0x28
 80050aa:	3307      	adds	r3, #7
 80050ac:	f023 0307 	bic.w	r3, r3, #7
 80050b0:	f103 0208 	add.w	r2, r3, #8
 80050b4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80050b8:	f8d4 b000 	ldr.w	fp, [r4]
 80050bc:	f8c8 2000 	str.w	r2, [r8]
 80050c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80050c8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80050cc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80050d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80050d2:	f04f 32ff 	mov.w	r2, #4294967295
 80050d6:	4640      	mov	r0, r8
 80050d8:	4b9c      	ldr	r3, [pc, #624]	; (800534c <_printf_float+0x2cc>)
 80050da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050dc:	f7fb fc96 	bl	8000a0c <__aeabi_dcmpun>
 80050e0:	bb70      	cbnz	r0, 8005140 <_printf_float+0xc0>
 80050e2:	f04f 32ff 	mov.w	r2, #4294967295
 80050e6:	4640      	mov	r0, r8
 80050e8:	4b98      	ldr	r3, [pc, #608]	; (800534c <_printf_float+0x2cc>)
 80050ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050ec:	f7fb fc70 	bl	80009d0 <__aeabi_dcmple>
 80050f0:	bb30      	cbnz	r0, 8005140 <_printf_float+0xc0>
 80050f2:	2200      	movs	r2, #0
 80050f4:	2300      	movs	r3, #0
 80050f6:	4640      	mov	r0, r8
 80050f8:	4651      	mov	r1, sl
 80050fa:	f7fb fc5f 	bl	80009bc <__aeabi_dcmplt>
 80050fe:	b110      	cbz	r0, 8005106 <_printf_float+0x86>
 8005100:	232d      	movs	r3, #45	; 0x2d
 8005102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005106:	4b92      	ldr	r3, [pc, #584]	; (8005350 <_printf_float+0x2d0>)
 8005108:	4892      	ldr	r0, [pc, #584]	; (8005354 <_printf_float+0x2d4>)
 800510a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800510e:	bf94      	ite	ls
 8005110:	4698      	movls	r8, r3
 8005112:	4680      	movhi	r8, r0
 8005114:	2303      	movs	r3, #3
 8005116:	f04f 0a00 	mov.w	sl, #0
 800511a:	6123      	str	r3, [r4, #16]
 800511c:	f02b 0304 	bic.w	r3, fp, #4
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	4633      	mov	r3, r6
 8005124:	4621      	mov	r1, r4
 8005126:	4628      	mov	r0, r5
 8005128:	9700      	str	r7, [sp, #0]
 800512a:	aa0f      	add	r2, sp, #60	; 0x3c
 800512c:	f000 f9d4 	bl	80054d8 <_printf_common>
 8005130:	3001      	adds	r0, #1
 8005132:	f040 8090 	bne.w	8005256 <_printf_float+0x1d6>
 8005136:	f04f 30ff 	mov.w	r0, #4294967295
 800513a:	b011      	add	sp, #68	; 0x44
 800513c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005140:	4642      	mov	r2, r8
 8005142:	4653      	mov	r3, sl
 8005144:	4640      	mov	r0, r8
 8005146:	4651      	mov	r1, sl
 8005148:	f7fb fc60 	bl	8000a0c <__aeabi_dcmpun>
 800514c:	b148      	cbz	r0, 8005162 <_printf_float+0xe2>
 800514e:	f1ba 0f00 	cmp.w	sl, #0
 8005152:	bfb8      	it	lt
 8005154:	232d      	movlt	r3, #45	; 0x2d
 8005156:	4880      	ldr	r0, [pc, #512]	; (8005358 <_printf_float+0x2d8>)
 8005158:	bfb8      	it	lt
 800515a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800515e:	4b7f      	ldr	r3, [pc, #508]	; (800535c <_printf_float+0x2dc>)
 8005160:	e7d3      	b.n	800510a <_printf_float+0x8a>
 8005162:	6863      	ldr	r3, [r4, #4]
 8005164:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	d142      	bne.n	80051f2 <_printf_float+0x172>
 800516c:	2306      	movs	r3, #6
 800516e:	6063      	str	r3, [r4, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	9206      	str	r2, [sp, #24]
 8005174:	aa0e      	add	r2, sp, #56	; 0x38
 8005176:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800517a:	aa0d      	add	r2, sp, #52	; 0x34
 800517c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005180:	9203      	str	r2, [sp, #12]
 8005182:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005186:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800518a:	6023      	str	r3, [r4, #0]
 800518c:	6863      	ldr	r3, [r4, #4]
 800518e:	4642      	mov	r2, r8
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	4628      	mov	r0, r5
 8005194:	4653      	mov	r3, sl
 8005196:	910b      	str	r1, [sp, #44]	; 0x2c
 8005198:	f7ff fed4 	bl	8004f44 <__cvt>
 800519c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800519e:	4680      	mov	r8, r0
 80051a0:	2947      	cmp	r1, #71	; 0x47
 80051a2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80051a4:	d108      	bne.n	80051b8 <_printf_float+0x138>
 80051a6:	1cc8      	adds	r0, r1, #3
 80051a8:	db02      	blt.n	80051b0 <_printf_float+0x130>
 80051aa:	6863      	ldr	r3, [r4, #4]
 80051ac:	4299      	cmp	r1, r3
 80051ae:	dd40      	ble.n	8005232 <_printf_float+0x1b2>
 80051b0:	f1a9 0902 	sub.w	r9, r9, #2
 80051b4:	fa5f f989 	uxtb.w	r9, r9
 80051b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80051bc:	d81f      	bhi.n	80051fe <_printf_float+0x17e>
 80051be:	464a      	mov	r2, r9
 80051c0:	3901      	subs	r1, #1
 80051c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80051c6:	910d      	str	r1, [sp, #52]	; 0x34
 80051c8:	f7ff ff1b 	bl	8005002 <__exponent>
 80051cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051ce:	4682      	mov	sl, r0
 80051d0:	1813      	adds	r3, r2, r0
 80051d2:	2a01      	cmp	r2, #1
 80051d4:	6123      	str	r3, [r4, #16]
 80051d6:	dc02      	bgt.n	80051de <_printf_float+0x15e>
 80051d8:	6822      	ldr	r2, [r4, #0]
 80051da:	07d2      	lsls	r2, r2, #31
 80051dc:	d501      	bpl.n	80051e2 <_printf_float+0x162>
 80051de:	3301      	adds	r3, #1
 80051e0:	6123      	str	r3, [r4, #16]
 80051e2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d09b      	beq.n	8005122 <_printf_float+0xa2>
 80051ea:	232d      	movs	r3, #45	; 0x2d
 80051ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051f0:	e797      	b.n	8005122 <_printf_float+0xa2>
 80051f2:	2947      	cmp	r1, #71	; 0x47
 80051f4:	d1bc      	bne.n	8005170 <_printf_float+0xf0>
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1ba      	bne.n	8005170 <_printf_float+0xf0>
 80051fa:	2301      	movs	r3, #1
 80051fc:	e7b7      	b.n	800516e <_printf_float+0xee>
 80051fe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005202:	d118      	bne.n	8005236 <_printf_float+0x1b6>
 8005204:	2900      	cmp	r1, #0
 8005206:	6863      	ldr	r3, [r4, #4]
 8005208:	dd0b      	ble.n	8005222 <_printf_float+0x1a2>
 800520a:	6121      	str	r1, [r4, #16]
 800520c:	b913      	cbnz	r3, 8005214 <_printf_float+0x194>
 800520e:	6822      	ldr	r2, [r4, #0]
 8005210:	07d0      	lsls	r0, r2, #31
 8005212:	d502      	bpl.n	800521a <_printf_float+0x19a>
 8005214:	3301      	adds	r3, #1
 8005216:	440b      	add	r3, r1
 8005218:	6123      	str	r3, [r4, #16]
 800521a:	f04f 0a00 	mov.w	sl, #0
 800521e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005220:	e7df      	b.n	80051e2 <_printf_float+0x162>
 8005222:	b913      	cbnz	r3, 800522a <_printf_float+0x1aa>
 8005224:	6822      	ldr	r2, [r4, #0]
 8005226:	07d2      	lsls	r2, r2, #31
 8005228:	d501      	bpl.n	800522e <_printf_float+0x1ae>
 800522a:	3302      	adds	r3, #2
 800522c:	e7f4      	b.n	8005218 <_printf_float+0x198>
 800522e:	2301      	movs	r3, #1
 8005230:	e7f2      	b.n	8005218 <_printf_float+0x198>
 8005232:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005236:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005238:	4299      	cmp	r1, r3
 800523a:	db05      	blt.n	8005248 <_printf_float+0x1c8>
 800523c:	6823      	ldr	r3, [r4, #0]
 800523e:	6121      	str	r1, [r4, #16]
 8005240:	07d8      	lsls	r0, r3, #31
 8005242:	d5ea      	bpl.n	800521a <_printf_float+0x19a>
 8005244:	1c4b      	adds	r3, r1, #1
 8005246:	e7e7      	b.n	8005218 <_printf_float+0x198>
 8005248:	2900      	cmp	r1, #0
 800524a:	bfcc      	ite	gt
 800524c:	2201      	movgt	r2, #1
 800524e:	f1c1 0202 	rsble	r2, r1, #2
 8005252:	4413      	add	r3, r2
 8005254:	e7e0      	b.n	8005218 <_printf_float+0x198>
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	055a      	lsls	r2, r3, #21
 800525a:	d407      	bmi.n	800526c <_printf_float+0x1ec>
 800525c:	6923      	ldr	r3, [r4, #16]
 800525e:	4642      	mov	r2, r8
 8005260:	4631      	mov	r1, r6
 8005262:	4628      	mov	r0, r5
 8005264:	47b8      	blx	r7
 8005266:	3001      	adds	r0, #1
 8005268:	d12b      	bne.n	80052c2 <_printf_float+0x242>
 800526a:	e764      	b.n	8005136 <_printf_float+0xb6>
 800526c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005270:	f240 80dd 	bls.w	800542e <_printf_float+0x3ae>
 8005274:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005278:	2200      	movs	r2, #0
 800527a:	2300      	movs	r3, #0
 800527c:	f7fb fb94 	bl	80009a8 <__aeabi_dcmpeq>
 8005280:	2800      	cmp	r0, #0
 8005282:	d033      	beq.n	80052ec <_printf_float+0x26c>
 8005284:	2301      	movs	r3, #1
 8005286:	4631      	mov	r1, r6
 8005288:	4628      	mov	r0, r5
 800528a:	4a35      	ldr	r2, [pc, #212]	; (8005360 <_printf_float+0x2e0>)
 800528c:	47b8      	blx	r7
 800528e:	3001      	adds	r0, #1
 8005290:	f43f af51 	beq.w	8005136 <_printf_float+0xb6>
 8005294:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005298:	429a      	cmp	r2, r3
 800529a:	db02      	blt.n	80052a2 <_printf_float+0x222>
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	07d8      	lsls	r0, r3, #31
 80052a0:	d50f      	bpl.n	80052c2 <_printf_float+0x242>
 80052a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052a6:	4631      	mov	r1, r6
 80052a8:	4628      	mov	r0, r5
 80052aa:	47b8      	blx	r7
 80052ac:	3001      	adds	r0, #1
 80052ae:	f43f af42 	beq.w	8005136 <_printf_float+0xb6>
 80052b2:	f04f 0800 	mov.w	r8, #0
 80052b6:	f104 091a 	add.w	r9, r4, #26
 80052ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052bc:	3b01      	subs	r3, #1
 80052be:	4543      	cmp	r3, r8
 80052c0:	dc09      	bgt.n	80052d6 <_printf_float+0x256>
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	079b      	lsls	r3, r3, #30
 80052c6:	f100 8102 	bmi.w	80054ce <_printf_float+0x44e>
 80052ca:	68e0      	ldr	r0, [r4, #12]
 80052cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052ce:	4298      	cmp	r0, r3
 80052d0:	bfb8      	it	lt
 80052d2:	4618      	movlt	r0, r3
 80052d4:	e731      	b.n	800513a <_printf_float+0xba>
 80052d6:	2301      	movs	r3, #1
 80052d8:	464a      	mov	r2, r9
 80052da:	4631      	mov	r1, r6
 80052dc:	4628      	mov	r0, r5
 80052de:	47b8      	blx	r7
 80052e0:	3001      	adds	r0, #1
 80052e2:	f43f af28 	beq.w	8005136 <_printf_float+0xb6>
 80052e6:	f108 0801 	add.w	r8, r8, #1
 80052ea:	e7e6      	b.n	80052ba <_printf_float+0x23a>
 80052ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	dc38      	bgt.n	8005364 <_printf_float+0x2e4>
 80052f2:	2301      	movs	r3, #1
 80052f4:	4631      	mov	r1, r6
 80052f6:	4628      	mov	r0, r5
 80052f8:	4a19      	ldr	r2, [pc, #100]	; (8005360 <_printf_float+0x2e0>)
 80052fa:	47b8      	blx	r7
 80052fc:	3001      	adds	r0, #1
 80052fe:	f43f af1a 	beq.w	8005136 <_printf_float+0xb6>
 8005302:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005306:	4313      	orrs	r3, r2
 8005308:	d102      	bne.n	8005310 <_printf_float+0x290>
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	07d9      	lsls	r1, r3, #31
 800530e:	d5d8      	bpl.n	80052c2 <_printf_float+0x242>
 8005310:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005314:	4631      	mov	r1, r6
 8005316:	4628      	mov	r0, r5
 8005318:	47b8      	blx	r7
 800531a:	3001      	adds	r0, #1
 800531c:	f43f af0b 	beq.w	8005136 <_printf_float+0xb6>
 8005320:	f04f 0900 	mov.w	r9, #0
 8005324:	f104 0a1a 	add.w	sl, r4, #26
 8005328:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800532a:	425b      	negs	r3, r3
 800532c:	454b      	cmp	r3, r9
 800532e:	dc01      	bgt.n	8005334 <_printf_float+0x2b4>
 8005330:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005332:	e794      	b.n	800525e <_printf_float+0x1de>
 8005334:	2301      	movs	r3, #1
 8005336:	4652      	mov	r2, sl
 8005338:	4631      	mov	r1, r6
 800533a:	4628      	mov	r0, r5
 800533c:	47b8      	blx	r7
 800533e:	3001      	adds	r0, #1
 8005340:	f43f aef9 	beq.w	8005136 <_printf_float+0xb6>
 8005344:	f109 0901 	add.w	r9, r9, #1
 8005348:	e7ee      	b.n	8005328 <_printf_float+0x2a8>
 800534a:	bf00      	nop
 800534c:	7fefffff 	.word	0x7fefffff
 8005350:	08007938 	.word	0x08007938
 8005354:	0800793c 	.word	0x0800793c
 8005358:	08007944 	.word	0x08007944
 800535c:	08007940 	.word	0x08007940
 8005360:	08007948 	.word	0x08007948
 8005364:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005366:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005368:	429a      	cmp	r2, r3
 800536a:	bfa8      	it	ge
 800536c:	461a      	movge	r2, r3
 800536e:	2a00      	cmp	r2, #0
 8005370:	4691      	mov	r9, r2
 8005372:	dc37      	bgt.n	80053e4 <_printf_float+0x364>
 8005374:	f04f 0b00 	mov.w	fp, #0
 8005378:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800537c:	f104 021a 	add.w	r2, r4, #26
 8005380:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005384:	ebaa 0309 	sub.w	r3, sl, r9
 8005388:	455b      	cmp	r3, fp
 800538a:	dc33      	bgt.n	80053f4 <_printf_float+0x374>
 800538c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005390:	429a      	cmp	r2, r3
 8005392:	db3b      	blt.n	800540c <_printf_float+0x38c>
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	07da      	lsls	r2, r3, #31
 8005398:	d438      	bmi.n	800540c <_printf_float+0x38c>
 800539a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800539c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800539e:	eba2 030a 	sub.w	r3, r2, sl
 80053a2:	eba2 0901 	sub.w	r9, r2, r1
 80053a6:	4599      	cmp	r9, r3
 80053a8:	bfa8      	it	ge
 80053aa:	4699      	movge	r9, r3
 80053ac:	f1b9 0f00 	cmp.w	r9, #0
 80053b0:	dc34      	bgt.n	800541c <_printf_float+0x39c>
 80053b2:	f04f 0800 	mov.w	r8, #0
 80053b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053ba:	f104 0a1a 	add.w	sl, r4, #26
 80053be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053c2:	1a9b      	subs	r3, r3, r2
 80053c4:	eba3 0309 	sub.w	r3, r3, r9
 80053c8:	4543      	cmp	r3, r8
 80053ca:	f77f af7a 	ble.w	80052c2 <_printf_float+0x242>
 80053ce:	2301      	movs	r3, #1
 80053d0:	4652      	mov	r2, sl
 80053d2:	4631      	mov	r1, r6
 80053d4:	4628      	mov	r0, r5
 80053d6:	47b8      	blx	r7
 80053d8:	3001      	adds	r0, #1
 80053da:	f43f aeac 	beq.w	8005136 <_printf_float+0xb6>
 80053de:	f108 0801 	add.w	r8, r8, #1
 80053e2:	e7ec      	b.n	80053be <_printf_float+0x33e>
 80053e4:	4613      	mov	r3, r2
 80053e6:	4631      	mov	r1, r6
 80053e8:	4642      	mov	r2, r8
 80053ea:	4628      	mov	r0, r5
 80053ec:	47b8      	blx	r7
 80053ee:	3001      	adds	r0, #1
 80053f0:	d1c0      	bne.n	8005374 <_printf_float+0x2f4>
 80053f2:	e6a0      	b.n	8005136 <_printf_float+0xb6>
 80053f4:	2301      	movs	r3, #1
 80053f6:	4631      	mov	r1, r6
 80053f8:	4628      	mov	r0, r5
 80053fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80053fc:	47b8      	blx	r7
 80053fe:	3001      	adds	r0, #1
 8005400:	f43f ae99 	beq.w	8005136 <_printf_float+0xb6>
 8005404:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005406:	f10b 0b01 	add.w	fp, fp, #1
 800540a:	e7b9      	b.n	8005380 <_printf_float+0x300>
 800540c:	4631      	mov	r1, r6
 800540e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005412:	4628      	mov	r0, r5
 8005414:	47b8      	blx	r7
 8005416:	3001      	adds	r0, #1
 8005418:	d1bf      	bne.n	800539a <_printf_float+0x31a>
 800541a:	e68c      	b.n	8005136 <_printf_float+0xb6>
 800541c:	464b      	mov	r3, r9
 800541e:	4631      	mov	r1, r6
 8005420:	4628      	mov	r0, r5
 8005422:	eb08 020a 	add.w	r2, r8, sl
 8005426:	47b8      	blx	r7
 8005428:	3001      	adds	r0, #1
 800542a:	d1c2      	bne.n	80053b2 <_printf_float+0x332>
 800542c:	e683      	b.n	8005136 <_printf_float+0xb6>
 800542e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005430:	2a01      	cmp	r2, #1
 8005432:	dc01      	bgt.n	8005438 <_printf_float+0x3b8>
 8005434:	07db      	lsls	r3, r3, #31
 8005436:	d537      	bpl.n	80054a8 <_printf_float+0x428>
 8005438:	2301      	movs	r3, #1
 800543a:	4642      	mov	r2, r8
 800543c:	4631      	mov	r1, r6
 800543e:	4628      	mov	r0, r5
 8005440:	47b8      	blx	r7
 8005442:	3001      	adds	r0, #1
 8005444:	f43f ae77 	beq.w	8005136 <_printf_float+0xb6>
 8005448:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800544c:	4631      	mov	r1, r6
 800544e:	4628      	mov	r0, r5
 8005450:	47b8      	blx	r7
 8005452:	3001      	adds	r0, #1
 8005454:	f43f ae6f 	beq.w	8005136 <_printf_float+0xb6>
 8005458:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800545c:	2200      	movs	r2, #0
 800545e:	2300      	movs	r3, #0
 8005460:	f7fb faa2 	bl	80009a8 <__aeabi_dcmpeq>
 8005464:	b9d8      	cbnz	r0, 800549e <_printf_float+0x41e>
 8005466:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005468:	f108 0201 	add.w	r2, r8, #1
 800546c:	3b01      	subs	r3, #1
 800546e:	4631      	mov	r1, r6
 8005470:	4628      	mov	r0, r5
 8005472:	47b8      	blx	r7
 8005474:	3001      	adds	r0, #1
 8005476:	d10e      	bne.n	8005496 <_printf_float+0x416>
 8005478:	e65d      	b.n	8005136 <_printf_float+0xb6>
 800547a:	2301      	movs	r3, #1
 800547c:	464a      	mov	r2, r9
 800547e:	4631      	mov	r1, r6
 8005480:	4628      	mov	r0, r5
 8005482:	47b8      	blx	r7
 8005484:	3001      	adds	r0, #1
 8005486:	f43f ae56 	beq.w	8005136 <_printf_float+0xb6>
 800548a:	f108 0801 	add.w	r8, r8, #1
 800548e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005490:	3b01      	subs	r3, #1
 8005492:	4543      	cmp	r3, r8
 8005494:	dcf1      	bgt.n	800547a <_printf_float+0x3fa>
 8005496:	4653      	mov	r3, sl
 8005498:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800549c:	e6e0      	b.n	8005260 <_printf_float+0x1e0>
 800549e:	f04f 0800 	mov.w	r8, #0
 80054a2:	f104 091a 	add.w	r9, r4, #26
 80054a6:	e7f2      	b.n	800548e <_printf_float+0x40e>
 80054a8:	2301      	movs	r3, #1
 80054aa:	4642      	mov	r2, r8
 80054ac:	e7df      	b.n	800546e <_printf_float+0x3ee>
 80054ae:	2301      	movs	r3, #1
 80054b0:	464a      	mov	r2, r9
 80054b2:	4631      	mov	r1, r6
 80054b4:	4628      	mov	r0, r5
 80054b6:	47b8      	blx	r7
 80054b8:	3001      	adds	r0, #1
 80054ba:	f43f ae3c 	beq.w	8005136 <_printf_float+0xb6>
 80054be:	f108 0801 	add.w	r8, r8, #1
 80054c2:	68e3      	ldr	r3, [r4, #12]
 80054c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80054c6:	1a5b      	subs	r3, r3, r1
 80054c8:	4543      	cmp	r3, r8
 80054ca:	dcf0      	bgt.n	80054ae <_printf_float+0x42e>
 80054cc:	e6fd      	b.n	80052ca <_printf_float+0x24a>
 80054ce:	f04f 0800 	mov.w	r8, #0
 80054d2:	f104 0919 	add.w	r9, r4, #25
 80054d6:	e7f4      	b.n	80054c2 <_printf_float+0x442>

080054d8 <_printf_common>:
 80054d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054dc:	4616      	mov	r6, r2
 80054de:	4699      	mov	r9, r3
 80054e0:	688a      	ldr	r2, [r1, #8]
 80054e2:	690b      	ldr	r3, [r1, #16]
 80054e4:	4607      	mov	r7, r0
 80054e6:	4293      	cmp	r3, r2
 80054e8:	bfb8      	it	lt
 80054ea:	4613      	movlt	r3, r2
 80054ec:	6033      	str	r3, [r6, #0]
 80054ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054f2:	460c      	mov	r4, r1
 80054f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054f8:	b10a      	cbz	r2, 80054fe <_printf_common+0x26>
 80054fa:	3301      	adds	r3, #1
 80054fc:	6033      	str	r3, [r6, #0]
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	0699      	lsls	r1, r3, #26
 8005502:	bf42      	ittt	mi
 8005504:	6833      	ldrmi	r3, [r6, #0]
 8005506:	3302      	addmi	r3, #2
 8005508:	6033      	strmi	r3, [r6, #0]
 800550a:	6825      	ldr	r5, [r4, #0]
 800550c:	f015 0506 	ands.w	r5, r5, #6
 8005510:	d106      	bne.n	8005520 <_printf_common+0x48>
 8005512:	f104 0a19 	add.w	sl, r4, #25
 8005516:	68e3      	ldr	r3, [r4, #12]
 8005518:	6832      	ldr	r2, [r6, #0]
 800551a:	1a9b      	subs	r3, r3, r2
 800551c:	42ab      	cmp	r3, r5
 800551e:	dc28      	bgt.n	8005572 <_printf_common+0x9a>
 8005520:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005524:	1e13      	subs	r3, r2, #0
 8005526:	6822      	ldr	r2, [r4, #0]
 8005528:	bf18      	it	ne
 800552a:	2301      	movne	r3, #1
 800552c:	0692      	lsls	r2, r2, #26
 800552e:	d42d      	bmi.n	800558c <_printf_common+0xb4>
 8005530:	4649      	mov	r1, r9
 8005532:	4638      	mov	r0, r7
 8005534:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005538:	47c0      	blx	r8
 800553a:	3001      	adds	r0, #1
 800553c:	d020      	beq.n	8005580 <_printf_common+0xa8>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	68e5      	ldr	r5, [r4, #12]
 8005542:	f003 0306 	and.w	r3, r3, #6
 8005546:	2b04      	cmp	r3, #4
 8005548:	bf18      	it	ne
 800554a:	2500      	movne	r5, #0
 800554c:	6832      	ldr	r2, [r6, #0]
 800554e:	f04f 0600 	mov.w	r6, #0
 8005552:	68a3      	ldr	r3, [r4, #8]
 8005554:	bf08      	it	eq
 8005556:	1aad      	subeq	r5, r5, r2
 8005558:	6922      	ldr	r2, [r4, #16]
 800555a:	bf08      	it	eq
 800555c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005560:	4293      	cmp	r3, r2
 8005562:	bfc4      	itt	gt
 8005564:	1a9b      	subgt	r3, r3, r2
 8005566:	18ed      	addgt	r5, r5, r3
 8005568:	341a      	adds	r4, #26
 800556a:	42b5      	cmp	r5, r6
 800556c:	d11a      	bne.n	80055a4 <_printf_common+0xcc>
 800556e:	2000      	movs	r0, #0
 8005570:	e008      	b.n	8005584 <_printf_common+0xac>
 8005572:	2301      	movs	r3, #1
 8005574:	4652      	mov	r2, sl
 8005576:	4649      	mov	r1, r9
 8005578:	4638      	mov	r0, r7
 800557a:	47c0      	blx	r8
 800557c:	3001      	adds	r0, #1
 800557e:	d103      	bne.n	8005588 <_printf_common+0xb0>
 8005580:	f04f 30ff 	mov.w	r0, #4294967295
 8005584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005588:	3501      	adds	r5, #1
 800558a:	e7c4      	b.n	8005516 <_printf_common+0x3e>
 800558c:	2030      	movs	r0, #48	; 0x30
 800558e:	18e1      	adds	r1, r4, r3
 8005590:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800559a:	4422      	add	r2, r4
 800559c:	3302      	adds	r3, #2
 800559e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055a2:	e7c5      	b.n	8005530 <_printf_common+0x58>
 80055a4:	2301      	movs	r3, #1
 80055a6:	4622      	mov	r2, r4
 80055a8:	4649      	mov	r1, r9
 80055aa:	4638      	mov	r0, r7
 80055ac:	47c0      	blx	r8
 80055ae:	3001      	adds	r0, #1
 80055b0:	d0e6      	beq.n	8005580 <_printf_common+0xa8>
 80055b2:	3601      	adds	r6, #1
 80055b4:	e7d9      	b.n	800556a <_printf_common+0x92>
	...

080055b8 <_printf_i>:
 80055b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055bc:	460c      	mov	r4, r1
 80055be:	7e27      	ldrb	r7, [r4, #24]
 80055c0:	4691      	mov	r9, r2
 80055c2:	2f78      	cmp	r7, #120	; 0x78
 80055c4:	4680      	mov	r8, r0
 80055c6:	469a      	mov	sl, r3
 80055c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80055ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055ce:	d807      	bhi.n	80055e0 <_printf_i+0x28>
 80055d0:	2f62      	cmp	r7, #98	; 0x62
 80055d2:	d80a      	bhi.n	80055ea <_printf_i+0x32>
 80055d4:	2f00      	cmp	r7, #0
 80055d6:	f000 80d9 	beq.w	800578c <_printf_i+0x1d4>
 80055da:	2f58      	cmp	r7, #88	; 0x58
 80055dc:	f000 80a4 	beq.w	8005728 <_printf_i+0x170>
 80055e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055e8:	e03a      	b.n	8005660 <_printf_i+0xa8>
 80055ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055ee:	2b15      	cmp	r3, #21
 80055f0:	d8f6      	bhi.n	80055e0 <_printf_i+0x28>
 80055f2:	a001      	add	r0, pc, #4	; (adr r0, 80055f8 <_printf_i+0x40>)
 80055f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80055f8:	08005651 	.word	0x08005651
 80055fc:	08005665 	.word	0x08005665
 8005600:	080055e1 	.word	0x080055e1
 8005604:	080055e1 	.word	0x080055e1
 8005608:	080055e1 	.word	0x080055e1
 800560c:	080055e1 	.word	0x080055e1
 8005610:	08005665 	.word	0x08005665
 8005614:	080055e1 	.word	0x080055e1
 8005618:	080055e1 	.word	0x080055e1
 800561c:	080055e1 	.word	0x080055e1
 8005620:	080055e1 	.word	0x080055e1
 8005624:	08005773 	.word	0x08005773
 8005628:	08005695 	.word	0x08005695
 800562c:	08005755 	.word	0x08005755
 8005630:	080055e1 	.word	0x080055e1
 8005634:	080055e1 	.word	0x080055e1
 8005638:	08005795 	.word	0x08005795
 800563c:	080055e1 	.word	0x080055e1
 8005640:	08005695 	.word	0x08005695
 8005644:	080055e1 	.word	0x080055e1
 8005648:	080055e1 	.word	0x080055e1
 800564c:	0800575d 	.word	0x0800575d
 8005650:	680b      	ldr	r3, [r1, #0]
 8005652:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005656:	1d1a      	adds	r2, r3, #4
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	600a      	str	r2, [r1, #0]
 800565c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005660:	2301      	movs	r3, #1
 8005662:	e0a4      	b.n	80057ae <_printf_i+0x1f6>
 8005664:	6825      	ldr	r5, [r4, #0]
 8005666:	6808      	ldr	r0, [r1, #0]
 8005668:	062e      	lsls	r6, r5, #24
 800566a:	f100 0304 	add.w	r3, r0, #4
 800566e:	d50a      	bpl.n	8005686 <_printf_i+0xce>
 8005670:	6805      	ldr	r5, [r0, #0]
 8005672:	600b      	str	r3, [r1, #0]
 8005674:	2d00      	cmp	r5, #0
 8005676:	da03      	bge.n	8005680 <_printf_i+0xc8>
 8005678:	232d      	movs	r3, #45	; 0x2d
 800567a:	426d      	negs	r5, r5
 800567c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005680:	230a      	movs	r3, #10
 8005682:	485e      	ldr	r0, [pc, #376]	; (80057fc <_printf_i+0x244>)
 8005684:	e019      	b.n	80056ba <_printf_i+0x102>
 8005686:	f015 0f40 	tst.w	r5, #64	; 0x40
 800568a:	6805      	ldr	r5, [r0, #0]
 800568c:	600b      	str	r3, [r1, #0]
 800568e:	bf18      	it	ne
 8005690:	b22d      	sxthne	r5, r5
 8005692:	e7ef      	b.n	8005674 <_printf_i+0xbc>
 8005694:	680b      	ldr	r3, [r1, #0]
 8005696:	6825      	ldr	r5, [r4, #0]
 8005698:	1d18      	adds	r0, r3, #4
 800569a:	6008      	str	r0, [r1, #0]
 800569c:	0628      	lsls	r0, r5, #24
 800569e:	d501      	bpl.n	80056a4 <_printf_i+0xec>
 80056a0:	681d      	ldr	r5, [r3, #0]
 80056a2:	e002      	b.n	80056aa <_printf_i+0xf2>
 80056a4:	0669      	lsls	r1, r5, #25
 80056a6:	d5fb      	bpl.n	80056a0 <_printf_i+0xe8>
 80056a8:	881d      	ldrh	r5, [r3, #0]
 80056aa:	2f6f      	cmp	r7, #111	; 0x6f
 80056ac:	bf0c      	ite	eq
 80056ae:	2308      	moveq	r3, #8
 80056b0:	230a      	movne	r3, #10
 80056b2:	4852      	ldr	r0, [pc, #328]	; (80057fc <_printf_i+0x244>)
 80056b4:	2100      	movs	r1, #0
 80056b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056ba:	6866      	ldr	r6, [r4, #4]
 80056bc:	2e00      	cmp	r6, #0
 80056be:	bfa8      	it	ge
 80056c0:	6821      	ldrge	r1, [r4, #0]
 80056c2:	60a6      	str	r6, [r4, #8]
 80056c4:	bfa4      	itt	ge
 80056c6:	f021 0104 	bicge.w	r1, r1, #4
 80056ca:	6021      	strge	r1, [r4, #0]
 80056cc:	b90d      	cbnz	r5, 80056d2 <_printf_i+0x11a>
 80056ce:	2e00      	cmp	r6, #0
 80056d0:	d04d      	beq.n	800576e <_printf_i+0x1b6>
 80056d2:	4616      	mov	r6, r2
 80056d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80056d8:	fb03 5711 	mls	r7, r3, r1, r5
 80056dc:	5dc7      	ldrb	r7, [r0, r7]
 80056de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056e2:	462f      	mov	r7, r5
 80056e4:	42bb      	cmp	r3, r7
 80056e6:	460d      	mov	r5, r1
 80056e8:	d9f4      	bls.n	80056d4 <_printf_i+0x11c>
 80056ea:	2b08      	cmp	r3, #8
 80056ec:	d10b      	bne.n	8005706 <_printf_i+0x14e>
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	07df      	lsls	r7, r3, #31
 80056f2:	d508      	bpl.n	8005706 <_printf_i+0x14e>
 80056f4:	6923      	ldr	r3, [r4, #16]
 80056f6:	6861      	ldr	r1, [r4, #4]
 80056f8:	4299      	cmp	r1, r3
 80056fa:	bfde      	ittt	le
 80056fc:	2330      	movle	r3, #48	; 0x30
 80056fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005702:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005706:	1b92      	subs	r2, r2, r6
 8005708:	6122      	str	r2, [r4, #16]
 800570a:	464b      	mov	r3, r9
 800570c:	4621      	mov	r1, r4
 800570e:	4640      	mov	r0, r8
 8005710:	f8cd a000 	str.w	sl, [sp]
 8005714:	aa03      	add	r2, sp, #12
 8005716:	f7ff fedf 	bl	80054d8 <_printf_common>
 800571a:	3001      	adds	r0, #1
 800571c:	d14c      	bne.n	80057b8 <_printf_i+0x200>
 800571e:	f04f 30ff 	mov.w	r0, #4294967295
 8005722:	b004      	add	sp, #16
 8005724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005728:	4834      	ldr	r0, [pc, #208]	; (80057fc <_printf_i+0x244>)
 800572a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800572e:	680e      	ldr	r6, [r1, #0]
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	f856 5b04 	ldr.w	r5, [r6], #4
 8005736:	061f      	lsls	r7, r3, #24
 8005738:	600e      	str	r6, [r1, #0]
 800573a:	d514      	bpl.n	8005766 <_printf_i+0x1ae>
 800573c:	07d9      	lsls	r1, r3, #31
 800573e:	bf44      	itt	mi
 8005740:	f043 0320 	orrmi.w	r3, r3, #32
 8005744:	6023      	strmi	r3, [r4, #0]
 8005746:	b91d      	cbnz	r5, 8005750 <_printf_i+0x198>
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	f023 0320 	bic.w	r3, r3, #32
 800574e:	6023      	str	r3, [r4, #0]
 8005750:	2310      	movs	r3, #16
 8005752:	e7af      	b.n	80056b4 <_printf_i+0xfc>
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	f043 0320 	orr.w	r3, r3, #32
 800575a:	6023      	str	r3, [r4, #0]
 800575c:	2378      	movs	r3, #120	; 0x78
 800575e:	4828      	ldr	r0, [pc, #160]	; (8005800 <_printf_i+0x248>)
 8005760:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005764:	e7e3      	b.n	800572e <_printf_i+0x176>
 8005766:	065e      	lsls	r6, r3, #25
 8005768:	bf48      	it	mi
 800576a:	b2ad      	uxthmi	r5, r5
 800576c:	e7e6      	b.n	800573c <_printf_i+0x184>
 800576e:	4616      	mov	r6, r2
 8005770:	e7bb      	b.n	80056ea <_printf_i+0x132>
 8005772:	680b      	ldr	r3, [r1, #0]
 8005774:	6826      	ldr	r6, [r4, #0]
 8005776:	1d1d      	adds	r5, r3, #4
 8005778:	6960      	ldr	r0, [r4, #20]
 800577a:	600d      	str	r5, [r1, #0]
 800577c:	0635      	lsls	r5, r6, #24
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	d501      	bpl.n	8005786 <_printf_i+0x1ce>
 8005782:	6018      	str	r0, [r3, #0]
 8005784:	e002      	b.n	800578c <_printf_i+0x1d4>
 8005786:	0671      	lsls	r1, r6, #25
 8005788:	d5fb      	bpl.n	8005782 <_printf_i+0x1ca>
 800578a:	8018      	strh	r0, [r3, #0]
 800578c:	2300      	movs	r3, #0
 800578e:	4616      	mov	r6, r2
 8005790:	6123      	str	r3, [r4, #16]
 8005792:	e7ba      	b.n	800570a <_printf_i+0x152>
 8005794:	680b      	ldr	r3, [r1, #0]
 8005796:	1d1a      	adds	r2, r3, #4
 8005798:	600a      	str	r2, [r1, #0]
 800579a:	681e      	ldr	r6, [r3, #0]
 800579c:	2100      	movs	r1, #0
 800579e:	4630      	mov	r0, r6
 80057a0:	6862      	ldr	r2, [r4, #4]
 80057a2:	f000 feb7 	bl	8006514 <memchr>
 80057a6:	b108      	cbz	r0, 80057ac <_printf_i+0x1f4>
 80057a8:	1b80      	subs	r0, r0, r6
 80057aa:	6060      	str	r0, [r4, #4]
 80057ac:	6863      	ldr	r3, [r4, #4]
 80057ae:	6123      	str	r3, [r4, #16]
 80057b0:	2300      	movs	r3, #0
 80057b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057b6:	e7a8      	b.n	800570a <_printf_i+0x152>
 80057b8:	4632      	mov	r2, r6
 80057ba:	4649      	mov	r1, r9
 80057bc:	4640      	mov	r0, r8
 80057be:	6923      	ldr	r3, [r4, #16]
 80057c0:	47d0      	blx	sl
 80057c2:	3001      	adds	r0, #1
 80057c4:	d0ab      	beq.n	800571e <_printf_i+0x166>
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	079b      	lsls	r3, r3, #30
 80057ca:	d413      	bmi.n	80057f4 <_printf_i+0x23c>
 80057cc:	68e0      	ldr	r0, [r4, #12]
 80057ce:	9b03      	ldr	r3, [sp, #12]
 80057d0:	4298      	cmp	r0, r3
 80057d2:	bfb8      	it	lt
 80057d4:	4618      	movlt	r0, r3
 80057d6:	e7a4      	b.n	8005722 <_printf_i+0x16a>
 80057d8:	2301      	movs	r3, #1
 80057da:	4632      	mov	r2, r6
 80057dc:	4649      	mov	r1, r9
 80057de:	4640      	mov	r0, r8
 80057e0:	47d0      	blx	sl
 80057e2:	3001      	adds	r0, #1
 80057e4:	d09b      	beq.n	800571e <_printf_i+0x166>
 80057e6:	3501      	adds	r5, #1
 80057e8:	68e3      	ldr	r3, [r4, #12]
 80057ea:	9903      	ldr	r1, [sp, #12]
 80057ec:	1a5b      	subs	r3, r3, r1
 80057ee:	42ab      	cmp	r3, r5
 80057f0:	dcf2      	bgt.n	80057d8 <_printf_i+0x220>
 80057f2:	e7eb      	b.n	80057cc <_printf_i+0x214>
 80057f4:	2500      	movs	r5, #0
 80057f6:	f104 0619 	add.w	r6, r4, #25
 80057fa:	e7f5      	b.n	80057e8 <_printf_i+0x230>
 80057fc:	0800794a 	.word	0x0800794a
 8005800:	0800795b 	.word	0x0800795b

08005804 <quorem>:
 8005804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005808:	6903      	ldr	r3, [r0, #16]
 800580a:	690c      	ldr	r4, [r1, #16]
 800580c:	4607      	mov	r7, r0
 800580e:	42a3      	cmp	r3, r4
 8005810:	f2c0 8083 	blt.w	800591a <quorem+0x116>
 8005814:	3c01      	subs	r4, #1
 8005816:	f100 0514 	add.w	r5, r0, #20
 800581a:	f101 0814 	add.w	r8, r1, #20
 800581e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005822:	9301      	str	r3, [sp, #4]
 8005824:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005828:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800582c:	3301      	adds	r3, #1
 800582e:	429a      	cmp	r2, r3
 8005830:	fbb2 f6f3 	udiv	r6, r2, r3
 8005834:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005838:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800583c:	d332      	bcc.n	80058a4 <quorem+0xa0>
 800583e:	f04f 0e00 	mov.w	lr, #0
 8005842:	4640      	mov	r0, r8
 8005844:	46ac      	mov	ip, r5
 8005846:	46f2      	mov	sl, lr
 8005848:	f850 2b04 	ldr.w	r2, [r0], #4
 800584c:	b293      	uxth	r3, r2
 800584e:	fb06 e303 	mla	r3, r6, r3, lr
 8005852:	0c12      	lsrs	r2, r2, #16
 8005854:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005858:	fb06 e202 	mla	r2, r6, r2, lr
 800585c:	b29b      	uxth	r3, r3
 800585e:	ebaa 0303 	sub.w	r3, sl, r3
 8005862:	f8dc a000 	ldr.w	sl, [ip]
 8005866:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800586a:	fa1f fa8a 	uxth.w	sl, sl
 800586e:	4453      	add	r3, sl
 8005870:	fa1f fa82 	uxth.w	sl, r2
 8005874:	f8dc 2000 	ldr.w	r2, [ip]
 8005878:	4581      	cmp	r9, r0
 800587a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800587e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005882:	b29b      	uxth	r3, r3
 8005884:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005888:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800588c:	f84c 3b04 	str.w	r3, [ip], #4
 8005890:	d2da      	bcs.n	8005848 <quorem+0x44>
 8005892:	f855 300b 	ldr.w	r3, [r5, fp]
 8005896:	b92b      	cbnz	r3, 80058a4 <quorem+0xa0>
 8005898:	9b01      	ldr	r3, [sp, #4]
 800589a:	3b04      	subs	r3, #4
 800589c:	429d      	cmp	r5, r3
 800589e:	461a      	mov	r2, r3
 80058a0:	d32f      	bcc.n	8005902 <quorem+0xfe>
 80058a2:	613c      	str	r4, [r7, #16]
 80058a4:	4638      	mov	r0, r7
 80058a6:	f001 f8cb 	bl	8006a40 <__mcmp>
 80058aa:	2800      	cmp	r0, #0
 80058ac:	db25      	blt.n	80058fa <quorem+0xf6>
 80058ae:	4628      	mov	r0, r5
 80058b0:	f04f 0c00 	mov.w	ip, #0
 80058b4:	3601      	adds	r6, #1
 80058b6:	f858 1b04 	ldr.w	r1, [r8], #4
 80058ba:	f8d0 e000 	ldr.w	lr, [r0]
 80058be:	b28b      	uxth	r3, r1
 80058c0:	ebac 0303 	sub.w	r3, ip, r3
 80058c4:	fa1f f28e 	uxth.w	r2, lr
 80058c8:	4413      	add	r3, r2
 80058ca:	0c0a      	lsrs	r2, r1, #16
 80058cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80058d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058da:	45c1      	cmp	r9, r8
 80058dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80058e0:	f840 3b04 	str.w	r3, [r0], #4
 80058e4:	d2e7      	bcs.n	80058b6 <quorem+0xb2>
 80058e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058ee:	b922      	cbnz	r2, 80058fa <quorem+0xf6>
 80058f0:	3b04      	subs	r3, #4
 80058f2:	429d      	cmp	r5, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	d30a      	bcc.n	800590e <quorem+0x10a>
 80058f8:	613c      	str	r4, [r7, #16]
 80058fa:	4630      	mov	r0, r6
 80058fc:	b003      	add	sp, #12
 80058fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005902:	6812      	ldr	r2, [r2, #0]
 8005904:	3b04      	subs	r3, #4
 8005906:	2a00      	cmp	r2, #0
 8005908:	d1cb      	bne.n	80058a2 <quorem+0x9e>
 800590a:	3c01      	subs	r4, #1
 800590c:	e7c6      	b.n	800589c <quorem+0x98>
 800590e:	6812      	ldr	r2, [r2, #0]
 8005910:	3b04      	subs	r3, #4
 8005912:	2a00      	cmp	r2, #0
 8005914:	d1f0      	bne.n	80058f8 <quorem+0xf4>
 8005916:	3c01      	subs	r4, #1
 8005918:	e7eb      	b.n	80058f2 <quorem+0xee>
 800591a:	2000      	movs	r0, #0
 800591c:	e7ee      	b.n	80058fc <quorem+0xf8>
	...

08005920 <_dtoa_r>:
 8005920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005924:	4616      	mov	r6, r2
 8005926:	461f      	mov	r7, r3
 8005928:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800592a:	b099      	sub	sp, #100	; 0x64
 800592c:	4605      	mov	r5, r0
 800592e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005932:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005936:	b974      	cbnz	r4, 8005956 <_dtoa_r+0x36>
 8005938:	2010      	movs	r0, #16
 800593a:	f000 fde3 	bl	8006504 <malloc>
 800593e:	4602      	mov	r2, r0
 8005940:	6268      	str	r0, [r5, #36]	; 0x24
 8005942:	b920      	cbnz	r0, 800594e <_dtoa_r+0x2e>
 8005944:	21ea      	movs	r1, #234	; 0xea
 8005946:	4bae      	ldr	r3, [pc, #696]	; (8005c00 <_dtoa_r+0x2e0>)
 8005948:	48ae      	ldr	r0, [pc, #696]	; (8005c04 <_dtoa_r+0x2e4>)
 800594a:	f001 fa45 	bl	8006dd8 <__assert_func>
 800594e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005952:	6004      	str	r4, [r0, #0]
 8005954:	60c4      	str	r4, [r0, #12]
 8005956:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005958:	6819      	ldr	r1, [r3, #0]
 800595a:	b151      	cbz	r1, 8005972 <_dtoa_r+0x52>
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	2301      	movs	r3, #1
 8005960:	4093      	lsls	r3, r2
 8005962:	604a      	str	r2, [r1, #4]
 8005964:	608b      	str	r3, [r1, #8]
 8005966:	4628      	mov	r0, r5
 8005968:	f000 fe30 	bl	80065cc <_Bfree>
 800596c:	2200      	movs	r2, #0
 800596e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	1e3b      	subs	r3, r7, #0
 8005974:	bfaf      	iteee	ge
 8005976:	2300      	movge	r3, #0
 8005978:	2201      	movlt	r2, #1
 800597a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800597e:	9305      	strlt	r3, [sp, #20]
 8005980:	bfa8      	it	ge
 8005982:	f8c8 3000 	strge.w	r3, [r8]
 8005986:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800598a:	4b9f      	ldr	r3, [pc, #636]	; (8005c08 <_dtoa_r+0x2e8>)
 800598c:	bfb8      	it	lt
 800598e:	f8c8 2000 	strlt.w	r2, [r8]
 8005992:	ea33 0309 	bics.w	r3, r3, r9
 8005996:	d119      	bne.n	80059cc <_dtoa_r+0xac>
 8005998:	f242 730f 	movw	r3, #9999	; 0x270f
 800599c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059a4:	4333      	orrs	r3, r6
 80059a6:	f000 8580 	beq.w	80064aa <_dtoa_r+0xb8a>
 80059aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80059ac:	b953      	cbnz	r3, 80059c4 <_dtoa_r+0xa4>
 80059ae:	4b97      	ldr	r3, [pc, #604]	; (8005c0c <_dtoa_r+0x2ec>)
 80059b0:	e022      	b.n	80059f8 <_dtoa_r+0xd8>
 80059b2:	4b97      	ldr	r3, [pc, #604]	; (8005c10 <_dtoa_r+0x2f0>)
 80059b4:	9308      	str	r3, [sp, #32]
 80059b6:	3308      	adds	r3, #8
 80059b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	9808      	ldr	r0, [sp, #32]
 80059be:	b019      	add	sp, #100	; 0x64
 80059c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c4:	4b91      	ldr	r3, [pc, #580]	; (8005c0c <_dtoa_r+0x2ec>)
 80059c6:	9308      	str	r3, [sp, #32]
 80059c8:	3303      	adds	r3, #3
 80059ca:	e7f5      	b.n	80059b8 <_dtoa_r+0x98>
 80059cc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80059d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80059d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059d8:	2200      	movs	r2, #0
 80059da:	2300      	movs	r3, #0
 80059dc:	f7fa ffe4 	bl	80009a8 <__aeabi_dcmpeq>
 80059e0:	4680      	mov	r8, r0
 80059e2:	b158      	cbz	r0, 80059fc <_dtoa_r+0xdc>
 80059e4:	2301      	movs	r3, #1
 80059e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 8559 	beq.w	80064a4 <_dtoa_r+0xb84>
 80059f2:	4888      	ldr	r0, [pc, #544]	; (8005c14 <_dtoa_r+0x2f4>)
 80059f4:	6018      	str	r0, [r3, #0]
 80059f6:	1e43      	subs	r3, r0, #1
 80059f8:	9308      	str	r3, [sp, #32]
 80059fa:	e7df      	b.n	80059bc <_dtoa_r+0x9c>
 80059fc:	ab16      	add	r3, sp, #88	; 0x58
 80059fe:	9301      	str	r3, [sp, #4]
 8005a00:	ab17      	add	r3, sp, #92	; 0x5c
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	4628      	mov	r0, r5
 8005a06:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005a0a:	f001 f8c5 	bl	8006b98 <__d2b>
 8005a0e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005a12:	4682      	mov	sl, r0
 8005a14:	2c00      	cmp	r4, #0
 8005a16:	d07e      	beq.n	8005b16 <_dtoa_r+0x1f6>
 8005a18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a1e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005a22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a26:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005a2a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005a2e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005a32:	2200      	movs	r2, #0
 8005a34:	4b78      	ldr	r3, [pc, #480]	; (8005c18 <_dtoa_r+0x2f8>)
 8005a36:	f7fa fb97 	bl	8000168 <__aeabi_dsub>
 8005a3a:	a36b      	add	r3, pc, #428	; (adr r3, 8005be8 <_dtoa_r+0x2c8>)
 8005a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a40:	f7fa fd4a 	bl	80004d8 <__aeabi_dmul>
 8005a44:	a36a      	add	r3, pc, #424	; (adr r3, 8005bf0 <_dtoa_r+0x2d0>)
 8005a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4a:	f7fa fb8f 	bl	800016c <__adddf3>
 8005a4e:	4606      	mov	r6, r0
 8005a50:	4620      	mov	r0, r4
 8005a52:	460f      	mov	r7, r1
 8005a54:	f7fa fcd6 	bl	8000404 <__aeabi_i2d>
 8005a58:	a367      	add	r3, pc, #412	; (adr r3, 8005bf8 <_dtoa_r+0x2d8>)
 8005a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5e:	f7fa fd3b 	bl	80004d8 <__aeabi_dmul>
 8005a62:	4602      	mov	r2, r0
 8005a64:	460b      	mov	r3, r1
 8005a66:	4630      	mov	r0, r6
 8005a68:	4639      	mov	r1, r7
 8005a6a:	f7fa fb7f 	bl	800016c <__adddf3>
 8005a6e:	4606      	mov	r6, r0
 8005a70:	460f      	mov	r7, r1
 8005a72:	f7fa ffe1 	bl	8000a38 <__aeabi_d2iz>
 8005a76:	2200      	movs	r2, #0
 8005a78:	4681      	mov	r9, r0
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	4639      	mov	r1, r7
 8005a80:	f7fa ff9c 	bl	80009bc <__aeabi_dcmplt>
 8005a84:	b148      	cbz	r0, 8005a9a <_dtoa_r+0x17a>
 8005a86:	4648      	mov	r0, r9
 8005a88:	f7fa fcbc 	bl	8000404 <__aeabi_i2d>
 8005a8c:	4632      	mov	r2, r6
 8005a8e:	463b      	mov	r3, r7
 8005a90:	f7fa ff8a 	bl	80009a8 <__aeabi_dcmpeq>
 8005a94:	b908      	cbnz	r0, 8005a9a <_dtoa_r+0x17a>
 8005a96:	f109 39ff 	add.w	r9, r9, #4294967295
 8005a9a:	f1b9 0f16 	cmp.w	r9, #22
 8005a9e:	d857      	bhi.n	8005b50 <_dtoa_r+0x230>
 8005aa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005aa4:	4b5d      	ldr	r3, [pc, #372]	; (8005c1c <_dtoa_r+0x2fc>)
 8005aa6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aae:	f7fa ff85 	bl	80009bc <__aeabi_dcmplt>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	d04e      	beq.n	8005b54 <_dtoa_r+0x234>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f109 39ff 	add.w	r9, r9, #4294967295
 8005abc:	930f      	str	r3, [sp, #60]	; 0x3c
 8005abe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005ac0:	1b1c      	subs	r4, r3, r4
 8005ac2:	1e63      	subs	r3, r4, #1
 8005ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ac6:	bf49      	itett	mi
 8005ac8:	f1c4 0301 	rsbmi	r3, r4, #1
 8005acc:	2300      	movpl	r3, #0
 8005ace:	9306      	strmi	r3, [sp, #24]
 8005ad0:	2300      	movmi	r3, #0
 8005ad2:	bf54      	ite	pl
 8005ad4:	9306      	strpl	r3, [sp, #24]
 8005ad6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005ad8:	f1b9 0f00 	cmp.w	r9, #0
 8005adc:	db3c      	blt.n	8005b58 <_dtoa_r+0x238>
 8005ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005ae4:	444b      	add	r3, r9
 8005ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ae8:	2300      	movs	r3, #0
 8005aea:	930a      	str	r3, [sp, #40]	; 0x28
 8005aec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aee:	2b09      	cmp	r3, #9
 8005af0:	d86c      	bhi.n	8005bcc <_dtoa_r+0x2ac>
 8005af2:	2b05      	cmp	r3, #5
 8005af4:	bfc4      	itt	gt
 8005af6:	3b04      	subgt	r3, #4
 8005af8:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005afa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005afc:	bfc8      	it	gt
 8005afe:	2400      	movgt	r4, #0
 8005b00:	f1a3 0302 	sub.w	r3, r3, #2
 8005b04:	bfd8      	it	le
 8005b06:	2401      	movle	r4, #1
 8005b08:	2b03      	cmp	r3, #3
 8005b0a:	f200 808b 	bhi.w	8005c24 <_dtoa_r+0x304>
 8005b0e:	e8df f003 	tbb	[pc, r3]
 8005b12:	4f2d      	.short	0x4f2d
 8005b14:	5b4d      	.short	0x5b4d
 8005b16:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005b1a:	441c      	add	r4, r3
 8005b1c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005b20:	2b20      	cmp	r3, #32
 8005b22:	bfc3      	ittte	gt
 8005b24:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b28:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005b2c:	fa09 f303 	lslgt.w	r3, r9, r3
 8005b30:	f1c3 0320 	rsble	r3, r3, #32
 8005b34:	bfc6      	itte	gt
 8005b36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005b3a:	4318      	orrgt	r0, r3
 8005b3c:	fa06 f003 	lslle.w	r0, r6, r3
 8005b40:	f7fa fc50 	bl	80003e4 <__aeabi_ui2d>
 8005b44:	2301      	movs	r3, #1
 8005b46:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005b4a:	3c01      	subs	r4, #1
 8005b4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005b4e:	e770      	b.n	8005a32 <_dtoa_r+0x112>
 8005b50:	2301      	movs	r3, #1
 8005b52:	e7b3      	b.n	8005abc <_dtoa_r+0x19c>
 8005b54:	900f      	str	r0, [sp, #60]	; 0x3c
 8005b56:	e7b2      	b.n	8005abe <_dtoa_r+0x19e>
 8005b58:	9b06      	ldr	r3, [sp, #24]
 8005b5a:	eba3 0309 	sub.w	r3, r3, r9
 8005b5e:	9306      	str	r3, [sp, #24]
 8005b60:	f1c9 0300 	rsb	r3, r9, #0
 8005b64:	930a      	str	r3, [sp, #40]	; 0x28
 8005b66:	2300      	movs	r3, #0
 8005b68:	930e      	str	r3, [sp, #56]	; 0x38
 8005b6a:	e7bf      	b.n	8005aec <_dtoa_r+0x1cc>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	dc59      	bgt.n	8005c2a <_dtoa_r+0x30a>
 8005b76:	f04f 0b01 	mov.w	fp, #1
 8005b7a:	465b      	mov	r3, fp
 8005b7c:	f8cd b008 	str.w	fp, [sp, #8]
 8005b80:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005b84:	2200      	movs	r2, #0
 8005b86:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005b88:	6042      	str	r2, [r0, #4]
 8005b8a:	2204      	movs	r2, #4
 8005b8c:	f102 0614 	add.w	r6, r2, #20
 8005b90:	429e      	cmp	r6, r3
 8005b92:	6841      	ldr	r1, [r0, #4]
 8005b94:	d94f      	bls.n	8005c36 <_dtoa_r+0x316>
 8005b96:	4628      	mov	r0, r5
 8005b98:	f000 fcd8 	bl	800654c <_Balloc>
 8005b9c:	9008      	str	r0, [sp, #32]
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d14d      	bne.n	8005c3e <_dtoa_r+0x31e>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005ba8:	4b1d      	ldr	r3, [pc, #116]	; (8005c20 <_dtoa_r+0x300>)
 8005baa:	e6cd      	b.n	8005948 <_dtoa_r+0x28>
 8005bac:	2301      	movs	r3, #1
 8005bae:	e7de      	b.n	8005b6e <_dtoa_r+0x24e>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005bb6:	eb09 0b03 	add.w	fp, r9, r3
 8005bba:	f10b 0301 	add.w	r3, fp, #1
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	9302      	str	r3, [sp, #8]
 8005bc2:	bfb8      	it	lt
 8005bc4:	2301      	movlt	r3, #1
 8005bc6:	e7dd      	b.n	8005b84 <_dtoa_r+0x264>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e7f2      	b.n	8005bb2 <_dtoa_r+0x292>
 8005bcc:	2401      	movs	r4, #1
 8005bce:	2300      	movs	r3, #0
 8005bd0:	940b      	str	r4, [sp, #44]	; 0x2c
 8005bd2:	9322      	str	r3, [sp, #136]	; 0x88
 8005bd4:	f04f 3bff 	mov.w	fp, #4294967295
 8005bd8:	2200      	movs	r2, #0
 8005bda:	2312      	movs	r3, #18
 8005bdc:	f8cd b008 	str.w	fp, [sp, #8]
 8005be0:	9223      	str	r2, [sp, #140]	; 0x8c
 8005be2:	e7cf      	b.n	8005b84 <_dtoa_r+0x264>
 8005be4:	f3af 8000 	nop.w
 8005be8:	636f4361 	.word	0x636f4361
 8005bec:	3fd287a7 	.word	0x3fd287a7
 8005bf0:	8b60c8b3 	.word	0x8b60c8b3
 8005bf4:	3fc68a28 	.word	0x3fc68a28
 8005bf8:	509f79fb 	.word	0x509f79fb
 8005bfc:	3fd34413 	.word	0x3fd34413
 8005c00:	08007979 	.word	0x08007979
 8005c04:	08007990 	.word	0x08007990
 8005c08:	7ff00000 	.word	0x7ff00000
 8005c0c:	08007975 	.word	0x08007975
 8005c10:	0800796c 	.word	0x0800796c
 8005c14:	08007949 	.word	0x08007949
 8005c18:	3ff80000 	.word	0x3ff80000
 8005c1c:	08007a88 	.word	0x08007a88
 8005c20:	080079ef 	.word	0x080079ef
 8005c24:	2301      	movs	r3, #1
 8005c26:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c28:	e7d4      	b.n	8005bd4 <_dtoa_r+0x2b4>
 8005c2a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005c2e:	465b      	mov	r3, fp
 8005c30:	f8cd b008 	str.w	fp, [sp, #8]
 8005c34:	e7a6      	b.n	8005b84 <_dtoa_r+0x264>
 8005c36:	3101      	adds	r1, #1
 8005c38:	6041      	str	r1, [r0, #4]
 8005c3a:	0052      	lsls	r2, r2, #1
 8005c3c:	e7a6      	b.n	8005b8c <_dtoa_r+0x26c>
 8005c3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c40:	9a08      	ldr	r2, [sp, #32]
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	9b02      	ldr	r3, [sp, #8]
 8005c46:	2b0e      	cmp	r3, #14
 8005c48:	f200 80a8 	bhi.w	8005d9c <_dtoa_r+0x47c>
 8005c4c:	2c00      	cmp	r4, #0
 8005c4e:	f000 80a5 	beq.w	8005d9c <_dtoa_r+0x47c>
 8005c52:	f1b9 0f00 	cmp.w	r9, #0
 8005c56:	dd34      	ble.n	8005cc2 <_dtoa_r+0x3a2>
 8005c58:	4a9a      	ldr	r2, [pc, #616]	; (8005ec4 <_dtoa_r+0x5a4>)
 8005c5a:	f009 030f 	and.w	r3, r9, #15
 8005c5e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c62:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005c66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c6a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005c6e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005c72:	d016      	beq.n	8005ca2 <_dtoa_r+0x382>
 8005c74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c78:	4b93      	ldr	r3, [pc, #588]	; (8005ec8 <_dtoa_r+0x5a8>)
 8005c7a:	2703      	movs	r7, #3
 8005c7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c80:	f7fa fd54 	bl	800072c <__aeabi_ddiv>
 8005c84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c88:	f004 040f 	and.w	r4, r4, #15
 8005c8c:	4e8e      	ldr	r6, [pc, #568]	; (8005ec8 <_dtoa_r+0x5a8>)
 8005c8e:	b954      	cbnz	r4, 8005ca6 <_dtoa_r+0x386>
 8005c90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c98:	f7fa fd48 	bl	800072c <__aeabi_ddiv>
 8005c9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ca0:	e029      	b.n	8005cf6 <_dtoa_r+0x3d6>
 8005ca2:	2702      	movs	r7, #2
 8005ca4:	e7f2      	b.n	8005c8c <_dtoa_r+0x36c>
 8005ca6:	07e1      	lsls	r1, r4, #31
 8005ca8:	d508      	bpl.n	8005cbc <_dtoa_r+0x39c>
 8005caa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005cae:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005cb2:	f7fa fc11 	bl	80004d8 <__aeabi_dmul>
 8005cb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005cba:	3701      	adds	r7, #1
 8005cbc:	1064      	asrs	r4, r4, #1
 8005cbe:	3608      	adds	r6, #8
 8005cc0:	e7e5      	b.n	8005c8e <_dtoa_r+0x36e>
 8005cc2:	f000 80a5 	beq.w	8005e10 <_dtoa_r+0x4f0>
 8005cc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005cca:	f1c9 0400 	rsb	r4, r9, #0
 8005cce:	4b7d      	ldr	r3, [pc, #500]	; (8005ec4 <_dtoa_r+0x5a4>)
 8005cd0:	f004 020f 	and.w	r2, r4, #15
 8005cd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	f7fa fbfc 	bl	80004d8 <__aeabi_dmul>
 8005ce0:	2702      	movs	r7, #2
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ce8:	4e77      	ldr	r6, [pc, #476]	; (8005ec8 <_dtoa_r+0x5a8>)
 8005cea:	1124      	asrs	r4, r4, #4
 8005cec:	2c00      	cmp	r4, #0
 8005cee:	f040 8084 	bne.w	8005dfa <_dtoa_r+0x4da>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1d2      	bne.n	8005c9c <_dtoa_r+0x37c>
 8005cf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 808b 	beq.w	8005e14 <_dtoa_r+0x4f4>
 8005cfe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005d02:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005d06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	4b6f      	ldr	r3, [pc, #444]	; (8005ecc <_dtoa_r+0x5ac>)
 8005d0e:	f7fa fe55 	bl	80009bc <__aeabi_dcmplt>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d07e      	beq.n	8005e14 <_dtoa_r+0x4f4>
 8005d16:	9b02      	ldr	r3, [sp, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d07b      	beq.n	8005e14 <_dtoa_r+0x4f4>
 8005d1c:	f1bb 0f00 	cmp.w	fp, #0
 8005d20:	dd38      	ble.n	8005d94 <_dtoa_r+0x474>
 8005d22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d26:	2200      	movs	r2, #0
 8005d28:	4b69      	ldr	r3, [pc, #420]	; (8005ed0 <_dtoa_r+0x5b0>)
 8005d2a:	f7fa fbd5 	bl	80004d8 <__aeabi_dmul>
 8005d2e:	465c      	mov	r4, fp
 8005d30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d34:	f109 38ff 	add.w	r8, r9, #4294967295
 8005d38:	3701      	adds	r7, #1
 8005d3a:	4638      	mov	r0, r7
 8005d3c:	f7fa fb62 	bl	8000404 <__aeabi_i2d>
 8005d40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d44:	f7fa fbc8 	bl	80004d8 <__aeabi_dmul>
 8005d48:	2200      	movs	r2, #0
 8005d4a:	4b62      	ldr	r3, [pc, #392]	; (8005ed4 <_dtoa_r+0x5b4>)
 8005d4c:	f7fa fa0e 	bl	800016c <__adddf3>
 8005d50:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005d54:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d58:	9611      	str	r6, [sp, #68]	; 0x44
 8005d5a:	2c00      	cmp	r4, #0
 8005d5c:	d15d      	bne.n	8005e1a <_dtoa_r+0x4fa>
 8005d5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d62:	2200      	movs	r2, #0
 8005d64:	4b5c      	ldr	r3, [pc, #368]	; (8005ed8 <_dtoa_r+0x5b8>)
 8005d66:	f7fa f9ff 	bl	8000168 <__aeabi_dsub>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d72:	4633      	mov	r3, r6
 8005d74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d76:	f7fa fe3f 	bl	80009f8 <__aeabi_dcmpgt>
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	f040 829e 	bne.w	80062bc <_dtoa_r+0x99c>
 8005d80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d86:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005d8a:	f7fa fe17 	bl	80009bc <__aeabi_dcmplt>
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	f040 8292 	bne.w	80062b8 <_dtoa_r+0x998>
 8005d94:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005d98:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005d9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f2c0 8153 	blt.w	800604a <_dtoa_r+0x72a>
 8005da4:	f1b9 0f0e 	cmp.w	r9, #14
 8005da8:	f300 814f 	bgt.w	800604a <_dtoa_r+0x72a>
 8005dac:	4b45      	ldr	r3, [pc, #276]	; (8005ec4 <_dtoa_r+0x5a4>)
 8005dae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005db2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005db6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005dba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f280 80db 	bge.w	8005f78 <_dtoa_r+0x658>
 8005dc2:	9b02      	ldr	r3, [sp, #8]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f300 80d7 	bgt.w	8005f78 <_dtoa_r+0x658>
 8005dca:	f040 8274 	bne.w	80062b6 <_dtoa_r+0x996>
 8005dce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	4b40      	ldr	r3, [pc, #256]	; (8005ed8 <_dtoa_r+0x5b8>)
 8005dd6:	f7fa fb7f 	bl	80004d8 <__aeabi_dmul>
 8005dda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dde:	f7fa fe01 	bl	80009e4 <__aeabi_dcmpge>
 8005de2:	9c02      	ldr	r4, [sp, #8]
 8005de4:	4626      	mov	r6, r4
 8005de6:	2800      	cmp	r0, #0
 8005de8:	f040 824a 	bne.w	8006280 <_dtoa_r+0x960>
 8005dec:	2331      	movs	r3, #49	; 0x31
 8005dee:	9f08      	ldr	r7, [sp, #32]
 8005df0:	f109 0901 	add.w	r9, r9, #1
 8005df4:	f807 3b01 	strb.w	r3, [r7], #1
 8005df8:	e246      	b.n	8006288 <_dtoa_r+0x968>
 8005dfa:	07e2      	lsls	r2, r4, #31
 8005dfc:	d505      	bpl.n	8005e0a <_dtoa_r+0x4ea>
 8005dfe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e02:	f7fa fb69 	bl	80004d8 <__aeabi_dmul>
 8005e06:	2301      	movs	r3, #1
 8005e08:	3701      	adds	r7, #1
 8005e0a:	1064      	asrs	r4, r4, #1
 8005e0c:	3608      	adds	r6, #8
 8005e0e:	e76d      	b.n	8005cec <_dtoa_r+0x3cc>
 8005e10:	2702      	movs	r7, #2
 8005e12:	e770      	b.n	8005cf6 <_dtoa_r+0x3d6>
 8005e14:	46c8      	mov	r8, r9
 8005e16:	9c02      	ldr	r4, [sp, #8]
 8005e18:	e78f      	b.n	8005d3a <_dtoa_r+0x41a>
 8005e1a:	9908      	ldr	r1, [sp, #32]
 8005e1c:	4b29      	ldr	r3, [pc, #164]	; (8005ec4 <_dtoa_r+0x5a4>)
 8005e1e:	4421      	add	r1, r4
 8005e20:	9112      	str	r1, [sp, #72]	; 0x48
 8005e22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e28:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005e2c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e30:	2900      	cmp	r1, #0
 8005e32:	d055      	beq.n	8005ee0 <_dtoa_r+0x5c0>
 8005e34:	2000      	movs	r0, #0
 8005e36:	4929      	ldr	r1, [pc, #164]	; (8005edc <_dtoa_r+0x5bc>)
 8005e38:	f7fa fc78 	bl	800072c <__aeabi_ddiv>
 8005e3c:	463b      	mov	r3, r7
 8005e3e:	4632      	mov	r2, r6
 8005e40:	f7fa f992 	bl	8000168 <__aeabi_dsub>
 8005e44:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e48:	9f08      	ldr	r7, [sp, #32]
 8005e4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e4e:	f7fa fdf3 	bl	8000a38 <__aeabi_d2iz>
 8005e52:	4604      	mov	r4, r0
 8005e54:	f7fa fad6 	bl	8000404 <__aeabi_i2d>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e60:	f7fa f982 	bl	8000168 <__aeabi_dsub>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	3430      	adds	r4, #48	; 0x30
 8005e6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e72:	f807 4b01 	strb.w	r4, [r7], #1
 8005e76:	f7fa fda1 	bl	80009bc <__aeabi_dcmplt>
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	d174      	bne.n	8005f68 <_dtoa_r+0x648>
 8005e7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e82:	2000      	movs	r0, #0
 8005e84:	4911      	ldr	r1, [pc, #68]	; (8005ecc <_dtoa_r+0x5ac>)
 8005e86:	f7fa f96f 	bl	8000168 <__aeabi_dsub>
 8005e8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e8e:	f7fa fd95 	bl	80009bc <__aeabi_dcmplt>
 8005e92:	2800      	cmp	r0, #0
 8005e94:	f040 80b6 	bne.w	8006004 <_dtoa_r+0x6e4>
 8005e98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e9a:	429f      	cmp	r7, r3
 8005e9c:	f43f af7a 	beq.w	8005d94 <_dtoa_r+0x474>
 8005ea0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	4b0a      	ldr	r3, [pc, #40]	; (8005ed0 <_dtoa_r+0x5b0>)
 8005ea8:	f7fa fb16 	bl	80004d8 <__aeabi_dmul>
 8005eac:	2200      	movs	r2, #0
 8005eae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005eb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005eb6:	4b06      	ldr	r3, [pc, #24]	; (8005ed0 <_dtoa_r+0x5b0>)
 8005eb8:	f7fa fb0e 	bl	80004d8 <__aeabi_dmul>
 8005ebc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ec0:	e7c3      	b.n	8005e4a <_dtoa_r+0x52a>
 8005ec2:	bf00      	nop
 8005ec4:	08007a88 	.word	0x08007a88
 8005ec8:	08007a60 	.word	0x08007a60
 8005ecc:	3ff00000 	.word	0x3ff00000
 8005ed0:	40240000 	.word	0x40240000
 8005ed4:	401c0000 	.word	0x401c0000
 8005ed8:	40140000 	.word	0x40140000
 8005edc:	3fe00000 	.word	0x3fe00000
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	f7fa faf8 	bl	80004d8 <__aeabi_dmul>
 8005ee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005eea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005eee:	9c08      	ldr	r4, [sp, #32]
 8005ef0:	9314      	str	r3, [sp, #80]	; 0x50
 8005ef2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ef6:	f7fa fd9f 	bl	8000a38 <__aeabi_d2iz>
 8005efa:	9015      	str	r0, [sp, #84]	; 0x54
 8005efc:	f7fa fa82 	bl	8000404 <__aeabi_i2d>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f08:	f7fa f92e 	bl	8000168 <__aeabi_dsub>
 8005f0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f0e:	4606      	mov	r6, r0
 8005f10:	3330      	adds	r3, #48	; 0x30
 8005f12:	f804 3b01 	strb.w	r3, [r4], #1
 8005f16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f18:	460f      	mov	r7, r1
 8005f1a:	429c      	cmp	r4, r3
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	d124      	bne.n	8005f6c <_dtoa_r+0x64c>
 8005f22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f26:	4bb3      	ldr	r3, [pc, #716]	; (80061f4 <_dtoa_r+0x8d4>)
 8005f28:	f7fa f920 	bl	800016c <__adddf3>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4630      	mov	r0, r6
 8005f32:	4639      	mov	r1, r7
 8005f34:	f7fa fd60 	bl	80009f8 <__aeabi_dcmpgt>
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	d162      	bne.n	8006002 <_dtoa_r+0x6e2>
 8005f3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005f40:	2000      	movs	r0, #0
 8005f42:	49ac      	ldr	r1, [pc, #688]	; (80061f4 <_dtoa_r+0x8d4>)
 8005f44:	f7fa f910 	bl	8000168 <__aeabi_dsub>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	4639      	mov	r1, r7
 8005f50:	f7fa fd34 	bl	80009bc <__aeabi_dcmplt>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	f43f af1d 	beq.w	8005d94 <_dtoa_r+0x474>
 8005f5a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005f5c:	1e7b      	subs	r3, r7, #1
 8005f5e:	9314      	str	r3, [sp, #80]	; 0x50
 8005f60:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005f64:	2b30      	cmp	r3, #48	; 0x30
 8005f66:	d0f8      	beq.n	8005f5a <_dtoa_r+0x63a>
 8005f68:	46c1      	mov	r9, r8
 8005f6a:	e03a      	b.n	8005fe2 <_dtoa_r+0x6c2>
 8005f6c:	4ba2      	ldr	r3, [pc, #648]	; (80061f8 <_dtoa_r+0x8d8>)
 8005f6e:	f7fa fab3 	bl	80004d8 <__aeabi_dmul>
 8005f72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f76:	e7bc      	b.n	8005ef2 <_dtoa_r+0x5d2>
 8005f78:	9f08      	ldr	r7, [sp, #32]
 8005f7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f82:	f7fa fbd3 	bl	800072c <__aeabi_ddiv>
 8005f86:	f7fa fd57 	bl	8000a38 <__aeabi_d2iz>
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	f7fa fa3a 	bl	8000404 <__aeabi_i2d>
 8005f90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f94:	f7fa faa0 	bl	80004d8 <__aeabi_dmul>
 8005f98:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fa4:	f7fa f8e0 	bl	8000168 <__aeabi_dsub>
 8005fa8:	f807 6b01 	strb.w	r6, [r7], #1
 8005fac:	9e08      	ldr	r6, [sp, #32]
 8005fae:	9b02      	ldr	r3, [sp, #8]
 8005fb0:	1bbe      	subs	r6, r7, r6
 8005fb2:	42b3      	cmp	r3, r6
 8005fb4:	d13a      	bne.n	800602c <_dtoa_r+0x70c>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	f7fa f8d7 	bl	800016c <__adddf3>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005fc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005fca:	f7fa fd15 	bl	80009f8 <__aeabi_dcmpgt>
 8005fce:	bb58      	cbnz	r0, 8006028 <_dtoa_r+0x708>
 8005fd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005fd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fd8:	f7fa fce6 	bl	80009a8 <__aeabi_dcmpeq>
 8005fdc:	b108      	cbz	r0, 8005fe2 <_dtoa_r+0x6c2>
 8005fde:	07e1      	lsls	r1, r4, #31
 8005fe0:	d422      	bmi.n	8006028 <_dtoa_r+0x708>
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	4651      	mov	r1, sl
 8005fe6:	f000 faf1 	bl	80065cc <_Bfree>
 8005fea:	2300      	movs	r3, #0
 8005fec:	703b      	strb	r3, [r7, #0]
 8005fee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005ff0:	f109 0001 	add.w	r0, r9, #1
 8005ff4:	6018      	str	r0, [r3, #0]
 8005ff6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f43f acdf 	beq.w	80059bc <_dtoa_r+0x9c>
 8005ffe:	601f      	str	r7, [r3, #0]
 8006000:	e4dc      	b.n	80059bc <_dtoa_r+0x9c>
 8006002:	4627      	mov	r7, r4
 8006004:	463b      	mov	r3, r7
 8006006:	461f      	mov	r7, r3
 8006008:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800600c:	2a39      	cmp	r2, #57	; 0x39
 800600e:	d107      	bne.n	8006020 <_dtoa_r+0x700>
 8006010:	9a08      	ldr	r2, [sp, #32]
 8006012:	429a      	cmp	r2, r3
 8006014:	d1f7      	bne.n	8006006 <_dtoa_r+0x6e6>
 8006016:	2230      	movs	r2, #48	; 0x30
 8006018:	9908      	ldr	r1, [sp, #32]
 800601a:	f108 0801 	add.w	r8, r8, #1
 800601e:	700a      	strb	r2, [r1, #0]
 8006020:	781a      	ldrb	r2, [r3, #0]
 8006022:	3201      	adds	r2, #1
 8006024:	701a      	strb	r2, [r3, #0]
 8006026:	e79f      	b.n	8005f68 <_dtoa_r+0x648>
 8006028:	46c8      	mov	r8, r9
 800602a:	e7eb      	b.n	8006004 <_dtoa_r+0x6e4>
 800602c:	2200      	movs	r2, #0
 800602e:	4b72      	ldr	r3, [pc, #456]	; (80061f8 <_dtoa_r+0x8d8>)
 8006030:	f7fa fa52 	bl	80004d8 <__aeabi_dmul>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800603c:	2200      	movs	r2, #0
 800603e:	2300      	movs	r3, #0
 8006040:	f7fa fcb2 	bl	80009a8 <__aeabi_dcmpeq>
 8006044:	2800      	cmp	r0, #0
 8006046:	d098      	beq.n	8005f7a <_dtoa_r+0x65a>
 8006048:	e7cb      	b.n	8005fe2 <_dtoa_r+0x6c2>
 800604a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800604c:	2a00      	cmp	r2, #0
 800604e:	f000 80cd 	beq.w	80061ec <_dtoa_r+0x8cc>
 8006052:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006054:	2a01      	cmp	r2, #1
 8006056:	f300 80af 	bgt.w	80061b8 <_dtoa_r+0x898>
 800605a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800605c:	2a00      	cmp	r2, #0
 800605e:	f000 80a7 	beq.w	80061b0 <_dtoa_r+0x890>
 8006062:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006066:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006068:	9f06      	ldr	r7, [sp, #24]
 800606a:	9a06      	ldr	r2, [sp, #24]
 800606c:	2101      	movs	r1, #1
 800606e:	441a      	add	r2, r3
 8006070:	9206      	str	r2, [sp, #24]
 8006072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006074:	4628      	mov	r0, r5
 8006076:	441a      	add	r2, r3
 8006078:	9209      	str	r2, [sp, #36]	; 0x24
 800607a:	f000 fb61 	bl	8006740 <__i2b>
 800607e:	4606      	mov	r6, r0
 8006080:	2f00      	cmp	r7, #0
 8006082:	dd0c      	ble.n	800609e <_dtoa_r+0x77e>
 8006084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006086:	2b00      	cmp	r3, #0
 8006088:	dd09      	ble.n	800609e <_dtoa_r+0x77e>
 800608a:	42bb      	cmp	r3, r7
 800608c:	bfa8      	it	ge
 800608e:	463b      	movge	r3, r7
 8006090:	9a06      	ldr	r2, [sp, #24]
 8006092:	1aff      	subs	r7, r7, r3
 8006094:	1ad2      	subs	r2, r2, r3
 8006096:	9206      	str	r2, [sp, #24]
 8006098:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	9309      	str	r3, [sp, #36]	; 0x24
 800609e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060a0:	b1f3      	cbz	r3, 80060e0 <_dtoa_r+0x7c0>
 80060a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 80a9 	beq.w	80061fc <_dtoa_r+0x8dc>
 80060aa:	2c00      	cmp	r4, #0
 80060ac:	dd10      	ble.n	80060d0 <_dtoa_r+0x7b0>
 80060ae:	4631      	mov	r1, r6
 80060b0:	4622      	mov	r2, r4
 80060b2:	4628      	mov	r0, r5
 80060b4:	f000 fbfe 	bl	80068b4 <__pow5mult>
 80060b8:	4652      	mov	r2, sl
 80060ba:	4601      	mov	r1, r0
 80060bc:	4606      	mov	r6, r0
 80060be:	4628      	mov	r0, r5
 80060c0:	f000 fb54 	bl	800676c <__multiply>
 80060c4:	4680      	mov	r8, r0
 80060c6:	4651      	mov	r1, sl
 80060c8:	4628      	mov	r0, r5
 80060ca:	f000 fa7f 	bl	80065cc <_Bfree>
 80060ce:	46c2      	mov	sl, r8
 80060d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060d2:	1b1a      	subs	r2, r3, r4
 80060d4:	d004      	beq.n	80060e0 <_dtoa_r+0x7c0>
 80060d6:	4651      	mov	r1, sl
 80060d8:	4628      	mov	r0, r5
 80060da:	f000 fbeb 	bl	80068b4 <__pow5mult>
 80060de:	4682      	mov	sl, r0
 80060e0:	2101      	movs	r1, #1
 80060e2:	4628      	mov	r0, r5
 80060e4:	f000 fb2c 	bl	8006740 <__i2b>
 80060e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060ea:	4604      	mov	r4, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f340 8087 	ble.w	8006200 <_dtoa_r+0x8e0>
 80060f2:	461a      	mov	r2, r3
 80060f4:	4601      	mov	r1, r0
 80060f6:	4628      	mov	r0, r5
 80060f8:	f000 fbdc 	bl	80068b4 <__pow5mult>
 80060fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060fe:	4604      	mov	r4, r0
 8006100:	2b01      	cmp	r3, #1
 8006102:	f340 8080 	ble.w	8006206 <_dtoa_r+0x8e6>
 8006106:	f04f 0800 	mov.w	r8, #0
 800610a:	6923      	ldr	r3, [r4, #16]
 800610c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006110:	6918      	ldr	r0, [r3, #16]
 8006112:	f000 fac7 	bl	80066a4 <__hi0bits>
 8006116:	f1c0 0020 	rsb	r0, r0, #32
 800611a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800611c:	4418      	add	r0, r3
 800611e:	f010 001f 	ands.w	r0, r0, #31
 8006122:	f000 8092 	beq.w	800624a <_dtoa_r+0x92a>
 8006126:	f1c0 0320 	rsb	r3, r0, #32
 800612a:	2b04      	cmp	r3, #4
 800612c:	f340 808a 	ble.w	8006244 <_dtoa_r+0x924>
 8006130:	f1c0 001c 	rsb	r0, r0, #28
 8006134:	9b06      	ldr	r3, [sp, #24]
 8006136:	4407      	add	r7, r0
 8006138:	4403      	add	r3, r0
 800613a:	9306      	str	r3, [sp, #24]
 800613c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800613e:	4403      	add	r3, r0
 8006140:	9309      	str	r3, [sp, #36]	; 0x24
 8006142:	9b06      	ldr	r3, [sp, #24]
 8006144:	2b00      	cmp	r3, #0
 8006146:	dd05      	ble.n	8006154 <_dtoa_r+0x834>
 8006148:	4651      	mov	r1, sl
 800614a:	461a      	mov	r2, r3
 800614c:	4628      	mov	r0, r5
 800614e:	f000 fc0b 	bl	8006968 <__lshift>
 8006152:	4682      	mov	sl, r0
 8006154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006156:	2b00      	cmp	r3, #0
 8006158:	dd05      	ble.n	8006166 <_dtoa_r+0x846>
 800615a:	4621      	mov	r1, r4
 800615c:	461a      	mov	r2, r3
 800615e:	4628      	mov	r0, r5
 8006160:	f000 fc02 	bl	8006968 <__lshift>
 8006164:	4604      	mov	r4, r0
 8006166:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006168:	2b00      	cmp	r3, #0
 800616a:	d070      	beq.n	800624e <_dtoa_r+0x92e>
 800616c:	4621      	mov	r1, r4
 800616e:	4650      	mov	r0, sl
 8006170:	f000 fc66 	bl	8006a40 <__mcmp>
 8006174:	2800      	cmp	r0, #0
 8006176:	da6a      	bge.n	800624e <_dtoa_r+0x92e>
 8006178:	2300      	movs	r3, #0
 800617a:	4651      	mov	r1, sl
 800617c:	220a      	movs	r2, #10
 800617e:	4628      	mov	r0, r5
 8006180:	f000 fa46 	bl	8006610 <__multadd>
 8006184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006186:	4682      	mov	sl, r0
 8006188:	f109 39ff 	add.w	r9, r9, #4294967295
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 8193 	beq.w	80064b8 <_dtoa_r+0xb98>
 8006192:	4631      	mov	r1, r6
 8006194:	2300      	movs	r3, #0
 8006196:	220a      	movs	r2, #10
 8006198:	4628      	mov	r0, r5
 800619a:	f000 fa39 	bl	8006610 <__multadd>
 800619e:	f1bb 0f00 	cmp.w	fp, #0
 80061a2:	4606      	mov	r6, r0
 80061a4:	f300 8093 	bgt.w	80062ce <_dtoa_r+0x9ae>
 80061a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	dc57      	bgt.n	800625e <_dtoa_r+0x93e>
 80061ae:	e08e      	b.n	80062ce <_dtoa_r+0x9ae>
 80061b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80061b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80061b6:	e756      	b.n	8006066 <_dtoa_r+0x746>
 80061b8:	9b02      	ldr	r3, [sp, #8]
 80061ba:	1e5c      	subs	r4, r3, #1
 80061bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061be:	42a3      	cmp	r3, r4
 80061c0:	bfb7      	itett	lt
 80061c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80061c4:	1b1c      	subge	r4, r3, r4
 80061c6:	1ae2      	sublt	r2, r4, r3
 80061c8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80061ca:	bfbe      	ittt	lt
 80061cc:	940a      	strlt	r4, [sp, #40]	; 0x28
 80061ce:	189b      	addlt	r3, r3, r2
 80061d0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80061d2:	9b02      	ldr	r3, [sp, #8]
 80061d4:	bfb8      	it	lt
 80061d6:	2400      	movlt	r4, #0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	bfbb      	ittet	lt
 80061dc:	9b06      	ldrlt	r3, [sp, #24]
 80061de:	9a02      	ldrlt	r2, [sp, #8]
 80061e0:	9f06      	ldrge	r7, [sp, #24]
 80061e2:	1a9f      	sublt	r7, r3, r2
 80061e4:	bfac      	ite	ge
 80061e6:	9b02      	ldrge	r3, [sp, #8]
 80061e8:	2300      	movlt	r3, #0
 80061ea:	e73e      	b.n	800606a <_dtoa_r+0x74a>
 80061ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80061ee:	9f06      	ldr	r7, [sp, #24]
 80061f0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80061f2:	e745      	b.n	8006080 <_dtoa_r+0x760>
 80061f4:	3fe00000 	.word	0x3fe00000
 80061f8:	40240000 	.word	0x40240000
 80061fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061fe:	e76a      	b.n	80060d6 <_dtoa_r+0x7b6>
 8006200:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006202:	2b01      	cmp	r3, #1
 8006204:	dc19      	bgt.n	800623a <_dtoa_r+0x91a>
 8006206:	9b04      	ldr	r3, [sp, #16]
 8006208:	b9bb      	cbnz	r3, 800623a <_dtoa_r+0x91a>
 800620a:	9b05      	ldr	r3, [sp, #20]
 800620c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006210:	b99b      	cbnz	r3, 800623a <_dtoa_r+0x91a>
 8006212:	9b05      	ldr	r3, [sp, #20]
 8006214:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006218:	0d1b      	lsrs	r3, r3, #20
 800621a:	051b      	lsls	r3, r3, #20
 800621c:	b183      	cbz	r3, 8006240 <_dtoa_r+0x920>
 800621e:	f04f 0801 	mov.w	r8, #1
 8006222:	9b06      	ldr	r3, [sp, #24]
 8006224:	3301      	adds	r3, #1
 8006226:	9306      	str	r3, [sp, #24]
 8006228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800622a:	3301      	adds	r3, #1
 800622c:	9309      	str	r3, [sp, #36]	; 0x24
 800622e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006230:	2b00      	cmp	r3, #0
 8006232:	f47f af6a 	bne.w	800610a <_dtoa_r+0x7ea>
 8006236:	2001      	movs	r0, #1
 8006238:	e76f      	b.n	800611a <_dtoa_r+0x7fa>
 800623a:	f04f 0800 	mov.w	r8, #0
 800623e:	e7f6      	b.n	800622e <_dtoa_r+0x90e>
 8006240:	4698      	mov	r8, r3
 8006242:	e7f4      	b.n	800622e <_dtoa_r+0x90e>
 8006244:	f43f af7d 	beq.w	8006142 <_dtoa_r+0x822>
 8006248:	4618      	mov	r0, r3
 800624a:	301c      	adds	r0, #28
 800624c:	e772      	b.n	8006134 <_dtoa_r+0x814>
 800624e:	9b02      	ldr	r3, [sp, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	dc36      	bgt.n	80062c2 <_dtoa_r+0x9a2>
 8006254:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006256:	2b02      	cmp	r3, #2
 8006258:	dd33      	ble.n	80062c2 <_dtoa_r+0x9a2>
 800625a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800625e:	f1bb 0f00 	cmp.w	fp, #0
 8006262:	d10d      	bne.n	8006280 <_dtoa_r+0x960>
 8006264:	4621      	mov	r1, r4
 8006266:	465b      	mov	r3, fp
 8006268:	2205      	movs	r2, #5
 800626a:	4628      	mov	r0, r5
 800626c:	f000 f9d0 	bl	8006610 <__multadd>
 8006270:	4601      	mov	r1, r0
 8006272:	4604      	mov	r4, r0
 8006274:	4650      	mov	r0, sl
 8006276:	f000 fbe3 	bl	8006a40 <__mcmp>
 800627a:	2800      	cmp	r0, #0
 800627c:	f73f adb6 	bgt.w	8005dec <_dtoa_r+0x4cc>
 8006280:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006282:	9f08      	ldr	r7, [sp, #32]
 8006284:	ea6f 0903 	mvn.w	r9, r3
 8006288:	f04f 0800 	mov.w	r8, #0
 800628c:	4621      	mov	r1, r4
 800628e:	4628      	mov	r0, r5
 8006290:	f000 f99c 	bl	80065cc <_Bfree>
 8006294:	2e00      	cmp	r6, #0
 8006296:	f43f aea4 	beq.w	8005fe2 <_dtoa_r+0x6c2>
 800629a:	f1b8 0f00 	cmp.w	r8, #0
 800629e:	d005      	beq.n	80062ac <_dtoa_r+0x98c>
 80062a0:	45b0      	cmp	r8, r6
 80062a2:	d003      	beq.n	80062ac <_dtoa_r+0x98c>
 80062a4:	4641      	mov	r1, r8
 80062a6:	4628      	mov	r0, r5
 80062a8:	f000 f990 	bl	80065cc <_Bfree>
 80062ac:	4631      	mov	r1, r6
 80062ae:	4628      	mov	r0, r5
 80062b0:	f000 f98c 	bl	80065cc <_Bfree>
 80062b4:	e695      	b.n	8005fe2 <_dtoa_r+0x6c2>
 80062b6:	2400      	movs	r4, #0
 80062b8:	4626      	mov	r6, r4
 80062ba:	e7e1      	b.n	8006280 <_dtoa_r+0x960>
 80062bc:	46c1      	mov	r9, r8
 80062be:	4626      	mov	r6, r4
 80062c0:	e594      	b.n	8005dec <_dtoa_r+0x4cc>
 80062c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062c4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 80fc 	beq.w	80064c6 <_dtoa_r+0xba6>
 80062ce:	2f00      	cmp	r7, #0
 80062d0:	dd05      	ble.n	80062de <_dtoa_r+0x9be>
 80062d2:	4631      	mov	r1, r6
 80062d4:	463a      	mov	r2, r7
 80062d6:	4628      	mov	r0, r5
 80062d8:	f000 fb46 	bl	8006968 <__lshift>
 80062dc:	4606      	mov	r6, r0
 80062de:	f1b8 0f00 	cmp.w	r8, #0
 80062e2:	d05c      	beq.n	800639e <_dtoa_r+0xa7e>
 80062e4:	4628      	mov	r0, r5
 80062e6:	6871      	ldr	r1, [r6, #4]
 80062e8:	f000 f930 	bl	800654c <_Balloc>
 80062ec:	4607      	mov	r7, r0
 80062ee:	b928      	cbnz	r0, 80062fc <_dtoa_r+0x9dc>
 80062f0:	4602      	mov	r2, r0
 80062f2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80062f6:	4b7e      	ldr	r3, [pc, #504]	; (80064f0 <_dtoa_r+0xbd0>)
 80062f8:	f7ff bb26 	b.w	8005948 <_dtoa_r+0x28>
 80062fc:	6932      	ldr	r2, [r6, #16]
 80062fe:	f106 010c 	add.w	r1, r6, #12
 8006302:	3202      	adds	r2, #2
 8006304:	0092      	lsls	r2, r2, #2
 8006306:	300c      	adds	r0, #12
 8006308:	f000 f912 	bl	8006530 <memcpy>
 800630c:	2201      	movs	r2, #1
 800630e:	4639      	mov	r1, r7
 8006310:	4628      	mov	r0, r5
 8006312:	f000 fb29 	bl	8006968 <__lshift>
 8006316:	46b0      	mov	r8, r6
 8006318:	4606      	mov	r6, r0
 800631a:	9b08      	ldr	r3, [sp, #32]
 800631c:	3301      	adds	r3, #1
 800631e:	9302      	str	r3, [sp, #8]
 8006320:	9b08      	ldr	r3, [sp, #32]
 8006322:	445b      	add	r3, fp
 8006324:	930a      	str	r3, [sp, #40]	; 0x28
 8006326:	9b04      	ldr	r3, [sp, #16]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	9309      	str	r3, [sp, #36]	; 0x24
 800632e:	9b02      	ldr	r3, [sp, #8]
 8006330:	4621      	mov	r1, r4
 8006332:	4650      	mov	r0, sl
 8006334:	f103 3bff 	add.w	fp, r3, #4294967295
 8006338:	f7ff fa64 	bl	8005804 <quorem>
 800633c:	4603      	mov	r3, r0
 800633e:	4641      	mov	r1, r8
 8006340:	3330      	adds	r3, #48	; 0x30
 8006342:	9004      	str	r0, [sp, #16]
 8006344:	4650      	mov	r0, sl
 8006346:	930b      	str	r3, [sp, #44]	; 0x2c
 8006348:	f000 fb7a 	bl	8006a40 <__mcmp>
 800634c:	4632      	mov	r2, r6
 800634e:	9006      	str	r0, [sp, #24]
 8006350:	4621      	mov	r1, r4
 8006352:	4628      	mov	r0, r5
 8006354:	f000 fb90 	bl	8006a78 <__mdiff>
 8006358:	68c2      	ldr	r2, [r0, #12]
 800635a:	4607      	mov	r7, r0
 800635c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800635e:	bb02      	cbnz	r2, 80063a2 <_dtoa_r+0xa82>
 8006360:	4601      	mov	r1, r0
 8006362:	4650      	mov	r0, sl
 8006364:	f000 fb6c 	bl	8006a40 <__mcmp>
 8006368:	4602      	mov	r2, r0
 800636a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800636c:	4639      	mov	r1, r7
 800636e:	4628      	mov	r0, r5
 8006370:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006374:	f000 f92a 	bl	80065cc <_Bfree>
 8006378:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800637a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800637c:	9f02      	ldr	r7, [sp, #8]
 800637e:	ea43 0102 	orr.w	r1, r3, r2
 8006382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006384:	430b      	orrs	r3, r1
 8006386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006388:	d10d      	bne.n	80063a6 <_dtoa_r+0xa86>
 800638a:	2b39      	cmp	r3, #57	; 0x39
 800638c:	d027      	beq.n	80063de <_dtoa_r+0xabe>
 800638e:	9a06      	ldr	r2, [sp, #24]
 8006390:	2a00      	cmp	r2, #0
 8006392:	dd01      	ble.n	8006398 <_dtoa_r+0xa78>
 8006394:	9b04      	ldr	r3, [sp, #16]
 8006396:	3331      	adds	r3, #49	; 0x31
 8006398:	f88b 3000 	strb.w	r3, [fp]
 800639c:	e776      	b.n	800628c <_dtoa_r+0x96c>
 800639e:	4630      	mov	r0, r6
 80063a0:	e7b9      	b.n	8006316 <_dtoa_r+0x9f6>
 80063a2:	2201      	movs	r2, #1
 80063a4:	e7e2      	b.n	800636c <_dtoa_r+0xa4c>
 80063a6:	9906      	ldr	r1, [sp, #24]
 80063a8:	2900      	cmp	r1, #0
 80063aa:	db04      	blt.n	80063b6 <_dtoa_r+0xa96>
 80063ac:	9822      	ldr	r0, [sp, #136]	; 0x88
 80063ae:	4301      	orrs	r1, r0
 80063b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063b2:	4301      	orrs	r1, r0
 80063b4:	d120      	bne.n	80063f8 <_dtoa_r+0xad8>
 80063b6:	2a00      	cmp	r2, #0
 80063b8:	ddee      	ble.n	8006398 <_dtoa_r+0xa78>
 80063ba:	4651      	mov	r1, sl
 80063bc:	2201      	movs	r2, #1
 80063be:	4628      	mov	r0, r5
 80063c0:	9302      	str	r3, [sp, #8]
 80063c2:	f000 fad1 	bl	8006968 <__lshift>
 80063c6:	4621      	mov	r1, r4
 80063c8:	4682      	mov	sl, r0
 80063ca:	f000 fb39 	bl	8006a40 <__mcmp>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	9b02      	ldr	r3, [sp, #8]
 80063d2:	dc02      	bgt.n	80063da <_dtoa_r+0xaba>
 80063d4:	d1e0      	bne.n	8006398 <_dtoa_r+0xa78>
 80063d6:	07da      	lsls	r2, r3, #31
 80063d8:	d5de      	bpl.n	8006398 <_dtoa_r+0xa78>
 80063da:	2b39      	cmp	r3, #57	; 0x39
 80063dc:	d1da      	bne.n	8006394 <_dtoa_r+0xa74>
 80063de:	2339      	movs	r3, #57	; 0x39
 80063e0:	f88b 3000 	strb.w	r3, [fp]
 80063e4:	463b      	mov	r3, r7
 80063e6:	461f      	mov	r7, r3
 80063e8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80063ec:	3b01      	subs	r3, #1
 80063ee:	2a39      	cmp	r2, #57	; 0x39
 80063f0:	d050      	beq.n	8006494 <_dtoa_r+0xb74>
 80063f2:	3201      	adds	r2, #1
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	e749      	b.n	800628c <_dtoa_r+0x96c>
 80063f8:	2a00      	cmp	r2, #0
 80063fa:	dd03      	ble.n	8006404 <_dtoa_r+0xae4>
 80063fc:	2b39      	cmp	r3, #57	; 0x39
 80063fe:	d0ee      	beq.n	80063de <_dtoa_r+0xabe>
 8006400:	3301      	adds	r3, #1
 8006402:	e7c9      	b.n	8006398 <_dtoa_r+0xa78>
 8006404:	9a02      	ldr	r2, [sp, #8]
 8006406:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006408:	f802 3c01 	strb.w	r3, [r2, #-1]
 800640c:	428a      	cmp	r2, r1
 800640e:	d02a      	beq.n	8006466 <_dtoa_r+0xb46>
 8006410:	4651      	mov	r1, sl
 8006412:	2300      	movs	r3, #0
 8006414:	220a      	movs	r2, #10
 8006416:	4628      	mov	r0, r5
 8006418:	f000 f8fa 	bl	8006610 <__multadd>
 800641c:	45b0      	cmp	r8, r6
 800641e:	4682      	mov	sl, r0
 8006420:	f04f 0300 	mov.w	r3, #0
 8006424:	f04f 020a 	mov.w	r2, #10
 8006428:	4641      	mov	r1, r8
 800642a:	4628      	mov	r0, r5
 800642c:	d107      	bne.n	800643e <_dtoa_r+0xb1e>
 800642e:	f000 f8ef 	bl	8006610 <__multadd>
 8006432:	4680      	mov	r8, r0
 8006434:	4606      	mov	r6, r0
 8006436:	9b02      	ldr	r3, [sp, #8]
 8006438:	3301      	adds	r3, #1
 800643a:	9302      	str	r3, [sp, #8]
 800643c:	e777      	b.n	800632e <_dtoa_r+0xa0e>
 800643e:	f000 f8e7 	bl	8006610 <__multadd>
 8006442:	4631      	mov	r1, r6
 8006444:	4680      	mov	r8, r0
 8006446:	2300      	movs	r3, #0
 8006448:	220a      	movs	r2, #10
 800644a:	4628      	mov	r0, r5
 800644c:	f000 f8e0 	bl	8006610 <__multadd>
 8006450:	4606      	mov	r6, r0
 8006452:	e7f0      	b.n	8006436 <_dtoa_r+0xb16>
 8006454:	f1bb 0f00 	cmp.w	fp, #0
 8006458:	bfcc      	ite	gt
 800645a:	465f      	movgt	r7, fp
 800645c:	2701      	movle	r7, #1
 800645e:	f04f 0800 	mov.w	r8, #0
 8006462:	9a08      	ldr	r2, [sp, #32]
 8006464:	4417      	add	r7, r2
 8006466:	4651      	mov	r1, sl
 8006468:	2201      	movs	r2, #1
 800646a:	4628      	mov	r0, r5
 800646c:	9302      	str	r3, [sp, #8]
 800646e:	f000 fa7b 	bl	8006968 <__lshift>
 8006472:	4621      	mov	r1, r4
 8006474:	4682      	mov	sl, r0
 8006476:	f000 fae3 	bl	8006a40 <__mcmp>
 800647a:	2800      	cmp	r0, #0
 800647c:	dcb2      	bgt.n	80063e4 <_dtoa_r+0xac4>
 800647e:	d102      	bne.n	8006486 <_dtoa_r+0xb66>
 8006480:	9b02      	ldr	r3, [sp, #8]
 8006482:	07db      	lsls	r3, r3, #31
 8006484:	d4ae      	bmi.n	80063e4 <_dtoa_r+0xac4>
 8006486:	463b      	mov	r3, r7
 8006488:	461f      	mov	r7, r3
 800648a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800648e:	2a30      	cmp	r2, #48	; 0x30
 8006490:	d0fa      	beq.n	8006488 <_dtoa_r+0xb68>
 8006492:	e6fb      	b.n	800628c <_dtoa_r+0x96c>
 8006494:	9a08      	ldr	r2, [sp, #32]
 8006496:	429a      	cmp	r2, r3
 8006498:	d1a5      	bne.n	80063e6 <_dtoa_r+0xac6>
 800649a:	2331      	movs	r3, #49	; 0x31
 800649c:	f109 0901 	add.w	r9, r9, #1
 80064a0:	7013      	strb	r3, [r2, #0]
 80064a2:	e6f3      	b.n	800628c <_dtoa_r+0x96c>
 80064a4:	4b13      	ldr	r3, [pc, #76]	; (80064f4 <_dtoa_r+0xbd4>)
 80064a6:	f7ff baa7 	b.w	80059f8 <_dtoa_r+0xd8>
 80064aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f47f aa80 	bne.w	80059b2 <_dtoa_r+0x92>
 80064b2:	4b11      	ldr	r3, [pc, #68]	; (80064f8 <_dtoa_r+0xbd8>)
 80064b4:	f7ff baa0 	b.w	80059f8 <_dtoa_r+0xd8>
 80064b8:	f1bb 0f00 	cmp.w	fp, #0
 80064bc:	dc03      	bgt.n	80064c6 <_dtoa_r+0xba6>
 80064be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	f73f aecc 	bgt.w	800625e <_dtoa_r+0x93e>
 80064c6:	9f08      	ldr	r7, [sp, #32]
 80064c8:	4621      	mov	r1, r4
 80064ca:	4650      	mov	r0, sl
 80064cc:	f7ff f99a 	bl	8005804 <quorem>
 80064d0:	9a08      	ldr	r2, [sp, #32]
 80064d2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80064d6:	f807 3b01 	strb.w	r3, [r7], #1
 80064da:	1aba      	subs	r2, r7, r2
 80064dc:	4593      	cmp	fp, r2
 80064de:	ddb9      	ble.n	8006454 <_dtoa_r+0xb34>
 80064e0:	4651      	mov	r1, sl
 80064e2:	2300      	movs	r3, #0
 80064e4:	220a      	movs	r2, #10
 80064e6:	4628      	mov	r0, r5
 80064e8:	f000 f892 	bl	8006610 <__multadd>
 80064ec:	4682      	mov	sl, r0
 80064ee:	e7eb      	b.n	80064c8 <_dtoa_r+0xba8>
 80064f0:	080079ef 	.word	0x080079ef
 80064f4:	08007948 	.word	0x08007948
 80064f8:	0800796c 	.word	0x0800796c

080064fc <_localeconv_r>:
 80064fc:	4800      	ldr	r0, [pc, #0]	; (8006500 <_localeconv_r+0x4>)
 80064fe:	4770      	bx	lr
 8006500:	20000164 	.word	0x20000164

08006504 <malloc>:
 8006504:	4b02      	ldr	r3, [pc, #8]	; (8006510 <malloc+0xc>)
 8006506:	4601      	mov	r1, r0
 8006508:	6818      	ldr	r0, [r3, #0]
 800650a:	f000 bbfb 	b.w	8006d04 <_malloc_r>
 800650e:	bf00      	nop
 8006510:	20000010 	.word	0x20000010

08006514 <memchr>:
 8006514:	4603      	mov	r3, r0
 8006516:	b510      	push	{r4, lr}
 8006518:	b2c9      	uxtb	r1, r1
 800651a:	4402      	add	r2, r0
 800651c:	4293      	cmp	r3, r2
 800651e:	4618      	mov	r0, r3
 8006520:	d101      	bne.n	8006526 <memchr+0x12>
 8006522:	2000      	movs	r0, #0
 8006524:	e003      	b.n	800652e <memchr+0x1a>
 8006526:	7804      	ldrb	r4, [r0, #0]
 8006528:	3301      	adds	r3, #1
 800652a:	428c      	cmp	r4, r1
 800652c:	d1f6      	bne.n	800651c <memchr+0x8>
 800652e:	bd10      	pop	{r4, pc}

08006530 <memcpy>:
 8006530:	440a      	add	r2, r1
 8006532:	4291      	cmp	r1, r2
 8006534:	f100 33ff 	add.w	r3, r0, #4294967295
 8006538:	d100      	bne.n	800653c <memcpy+0xc>
 800653a:	4770      	bx	lr
 800653c:	b510      	push	{r4, lr}
 800653e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006542:	4291      	cmp	r1, r2
 8006544:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006548:	d1f9      	bne.n	800653e <memcpy+0xe>
 800654a:	bd10      	pop	{r4, pc}

0800654c <_Balloc>:
 800654c:	b570      	push	{r4, r5, r6, lr}
 800654e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006550:	4604      	mov	r4, r0
 8006552:	460d      	mov	r5, r1
 8006554:	b976      	cbnz	r6, 8006574 <_Balloc+0x28>
 8006556:	2010      	movs	r0, #16
 8006558:	f7ff ffd4 	bl	8006504 <malloc>
 800655c:	4602      	mov	r2, r0
 800655e:	6260      	str	r0, [r4, #36]	; 0x24
 8006560:	b920      	cbnz	r0, 800656c <_Balloc+0x20>
 8006562:	2166      	movs	r1, #102	; 0x66
 8006564:	4b17      	ldr	r3, [pc, #92]	; (80065c4 <_Balloc+0x78>)
 8006566:	4818      	ldr	r0, [pc, #96]	; (80065c8 <_Balloc+0x7c>)
 8006568:	f000 fc36 	bl	8006dd8 <__assert_func>
 800656c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006570:	6006      	str	r6, [r0, #0]
 8006572:	60c6      	str	r6, [r0, #12]
 8006574:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006576:	68f3      	ldr	r3, [r6, #12]
 8006578:	b183      	cbz	r3, 800659c <_Balloc+0x50>
 800657a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006582:	b9b8      	cbnz	r0, 80065b4 <_Balloc+0x68>
 8006584:	2101      	movs	r1, #1
 8006586:	fa01 f605 	lsl.w	r6, r1, r5
 800658a:	1d72      	adds	r2, r6, #5
 800658c:	4620      	mov	r0, r4
 800658e:	0092      	lsls	r2, r2, #2
 8006590:	f000 fb5e 	bl	8006c50 <_calloc_r>
 8006594:	b160      	cbz	r0, 80065b0 <_Balloc+0x64>
 8006596:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800659a:	e00e      	b.n	80065ba <_Balloc+0x6e>
 800659c:	2221      	movs	r2, #33	; 0x21
 800659e:	2104      	movs	r1, #4
 80065a0:	4620      	mov	r0, r4
 80065a2:	f000 fb55 	bl	8006c50 <_calloc_r>
 80065a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065a8:	60f0      	str	r0, [r6, #12]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e4      	bne.n	800657a <_Balloc+0x2e>
 80065b0:	2000      	movs	r0, #0
 80065b2:	bd70      	pop	{r4, r5, r6, pc}
 80065b4:	6802      	ldr	r2, [r0, #0]
 80065b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065ba:	2300      	movs	r3, #0
 80065bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065c0:	e7f7      	b.n	80065b2 <_Balloc+0x66>
 80065c2:	bf00      	nop
 80065c4:	08007979 	.word	0x08007979
 80065c8:	08007a00 	.word	0x08007a00

080065cc <_Bfree>:
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80065d0:	4605      	mov	r5, r0
 80065d2:	460c      	mov	r4, r1
 80065d4:	b976      	cbnz	r6, 80065f4 <_Bfree+0x28>
 80065d6:	2010      	movs	r0, #16
 80065d8:	f7ff ff94 	bl	8006504 <malloc>
 80065dc:	4602      	mov	r2, r0
 80065de:	6268      	str	r0, [r5, #36]	; 0x24
 80065e0:	b920      	cbnz	r0, 80065ec <_Bfree+0x20>
 80065e2:	218a      	movs	r1, #138	; 0x8a
 80065e4:	4b08      	ldr	r3, [pc, #32]	; (8006608 <_Bfree+0x3c>)
 80065e6:	4809      	ldr	r0, [pc, #36]	; (800660c <_Bfree+0x40>)
 80065e8:	f000 fbf6 	bl	8006dd8 <__assert_func>
 80065ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065f0:	6006      	str	r6, [r0, #0]
 80065f2:	60c6      	str	r6, [r0, #12]
 80065f4:	b13c      	cbz	r4, 8006606 <_Bfree+0x3a>
 80065f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065f8:	6862      	ldr	r2, [r4, #4]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006600:	6021      	str	r1, [r4, #0]
 8006602:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006606:	bd70      	pop	{r4, r5, r6, pc}
 8006608:	08007979 	.word	0x08007979
 800660c:	08007a00 	.word	0x08007a00

08006610 <__multadd>:
 8006610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006614:	4698      	mov	r8, r3
 8006616:	460c      	mov	r4, r1
 8006618:	2300      	movs	r3, #0
 800661a:	690e      	ldr	r6, [r1, #16]
 800661c:	4607      	mov	r7, r0
 800661e:	f101 0014 	add.w	r0, r1, #20
 8006622:	6805      	ldr	r5, [r0, #0]
 8006624:	3301      	adds	r3, #1
 8006626:	b2a9      	uxth	r1, r5
 8006628:	fb02 8101 	mla	r1, r2, r1, r8
 800662c:	0c2d      	lsrs	r5, r5, #16
 800662e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006632:	fb02 c505 	mla	r5, r2, r5, ip
 8006636:	b289      	uxth	r1, r1
 8006638:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800663c:	429e      	cmp	r6, r3
 800663e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006642:	f840 1b04 	str.w	r1, [r0], #4
 8006646:	dcec      	bgt.n	8006622 <__multadd+0x12>
 8006648:	f1b8 0f00 	cmp.w	r8, #0
 800664c:	d022      	beq.n	8006694 <__multadd+0x84>
 800664e:	68a3      	ldr	r3, [r4, #8]
 8006650:	42b3      	cmp	r3, r6
 8006652:	dc19      	bgt.n	8006688 <__multadd+0x78>
 8006654:	6861      	ldr	r1, [r4, #4]
 8006656:	4638      	mov	r0, r7
 8006658:	3101      	adds	r1, #1
 800665a:	f7ff ff77 	bl	800654c <_Balloc>
 800665e:	4605      	mov	r5, r0
 8006660:	b928      	cbnz	r0, 800666e <__multadd+0x5e>
 8006662:	4602      	mov	r2, r0
 8006664:	21b5      	movs	r1, #181	; 0xb5
 8006666:	4b0d      	ldr	r3, [pc, #52]	; (800669c <__multadd+0x8c>)
 8006668:	480d      	ldr	r0, [pc, #52]	; (80066a0 <__multadd+0x90>)
 800666a:	f000 fbb5 	bl	8006dd8 <__assert_func>
 800666e:	6922      	ldr	r2, [r4, #16]
 8006670:	f104 010c 	add.w	r1, r4, #12
 8006674:	3202      	adds	r2, #2
 8006676:	0092      	lsls	r2, r2, #2
 8006678:	300c      	adds	r0, #12
 800667a:	f7ff ff59 	bl	8006530 <memcpy>
 800667e:	4621      	mov	r1, r4
 8006680:	4638      	mov	r0, r7
 8006682:	f7ff ffa3 	bl	80065cc <_Bfree>
 8006686:	462c      	mov	r4, r5
 8006688:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800668c:	3601      	adds	r6, #1
 800668e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006692:	6126      	str	r6, [r4, #16]
 8006694:	4620      	mov	r0, r4
 8006696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800669a:	bf00      	nop
 800669c:	080079ef 	.word	0x080079ef
 80066a0:	08007a00 	.word	0x08007a00

080066a4 <__hi0bits>:
 80066a4:	0c02      	lsrs	r2, r0, #16
 80066a6:	0412      	lsls	r2, r2, #16
 80066a8:	4603      	mov	r3, r0
 80066aa:	b9ca      	cbnz	r2, 80066e0 <__hi0bits+0x3c>
 80066ac:	0403      	lsls	r3, r0, #16
 80066ae:	2010      	movs	r0, #16
 80066b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80066b4:	bf04      	itt	eq
 80066b6:	021b      	lsleq	r3, r3, #8
 80066b8:	3008      	addeq	r0, #8
 80066ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80066be:	bf04      	itt	eq
 80066c0:	011b      	lsleq	r3, r3, #4
 80066c2:	3004      	addeq	r0, #4
 80066c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80066c8:	bf04      	itt	eq
 80066ca:	009b      	lsleq	r3, r3, #2
 80066cc:	3002      	addeq	r0, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	db05      	blt.n	80066de <__hi0bits+0x3a>
 80066d2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80066d6:	f100 0001 	add.w	r0, r0, #1
 80066da:	bf08      	it	eq
 80066dc:	2020      	moveq	r0, #32
 80066de:	4770      	bx	lr
 80066e0:	2000      	movs	r0, #0
 80066e2:	e7e5      	b.n	80066b0 <__hi0bits+0xc>

080066e4 <__lo0bits>:
 80066e4:	6803      	ldr	r3, [r0, #0]
 80066e6:	4602      	mov	r2, r0
 80066e8:	f013 0007 	ands.w	r0, r3, #7
 80066ec:	d00b      	beq.n	8006706 <__lo0bits+0x22>
 80066ee:	07d9      	lsls	r1, r3, #31
 80066f0:	d422      	bmi.n	8006738 <__lo0bits+0x54>
 80066f2:	0798      	lsls	r0, r3, #30
 80066f4:	bf49      	itett	mi
 80066f6:	085b      	lsrmi	r3, r3, #1
 80066f8:	089b      	lsrpl	r3, r3, #2
 80066fa:	2001      	movmi	r0, #1
 80066fc:	6013      	strmi	r3, [r2, #0]
 80066fe:	bf5c      	itt	pl
 8006700:	2002      	movpl	r0, #2
 8006702:	6013      	strpl	r3, [r2, #0]
 8006704:	4770      	bx	lr
 8006706:	b299      	uxth	r1, r3
 8006708:	b909      	cbnz	r1, 800670e <__lo0bits+0x2a>
 800670a:	2010      	movs	r0, #16
 800670c:	0c1b      	lsrs	r3, r3, #16
 800670e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006712:	bf04      	itt	eq
 8006714:	0a1b      	lsreq	r3, r3, #8
 8006716:	3008      	addeq	r0, #8
 8006718:	0719      	lsls	r1, r3, #28
 800671a:	bf04      	itt	eq
 800671c:	091b      	lsreq	r3, r3, #4
 800671e:	3004      	addeq	r0, #4
 8006720:	0799      	lsls	r1, r3, #30
 8006722:	bf04      	itt	eq
 8006724:	089b      	lsreq	r3, r3, #2
 8006726:	3002      	addeq	r0, #2
 8006728:	07d9      	lsls	r1, r3, #31
 800672a:	d403      	bmi.n	8006734 <__lo0bits+0x50>
 800672c:	085b      	lsrs	r3, r3, #1
 800672e:	f100 0001 	add.w	r0, r0, #1
 8006732:	d003      	beq.n	800673c <__lo0bits+0x58>
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	4770      	bx	lr
 8006738:	2000      	movs	r0, #0
 800673a:	4770      	bx	lr
 800673c:	2020      	movs	r0, #32
 800673e:	4770      	bx	lr

08006740 <__i2b>:
 8006740:	b510      	push	{r4, lr}
 8006742:	460c      	mov	r4, r1
 8006744:	2101      	movs	r1, #1
 8006746:	f7ff ff01 	bl	800654c <_Balloc>
 800674a:	4602      	mov	r2, r0
 800674c:	b928      	cbnz	r0, 800675a <__i2b+0x1a>
 800674e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006752:	4b04      	ldr	r3, [pc, #16]	; (8006764 <__i2b+0x24>)
 8006754:	4804      	ldr	r0, [pc, #16]	; (8006768 <__i2b+0x28>)
 8006756:	f000 fb3f 	bl	8006dd8 <__assert_func>
 800675a:	2301      	movs	r3, #1
 800675c:	6144      	str	r4, [r0, #20]
 800675e:	6103      	str	r3, [r0, #16]
 8006760:	bd10      	pop	{r4, pc}
 8006762:	bf00      	nop
 8006764:	080079ef 	.word	0x080079ef
 8006768:	08007a00 	.word	0x08007a00

0800676c <__multiply>:
 800676c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006770:	4614      	mov	r4, r2
 8006772:	690a      	ldr	r2, [r1, #16]
 8006774:	6923      	ldr	r3, [r4, #16]
 8006776:	460d      	mov	r5, r1
 8006778:	429a      	cmp	r2, r3
 800677a:	bfbe      	ittt	lt
 800677c:	460b      	movlt	r3, r1
 800677e:	4625      	movlt	r5, r4
 8006780:	461c      	movlt	r4, r3
 8006782:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006786:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800678a:	68ab      	ldr	r3, [r5, #8]
 800678c:	6869      	ldr	r1, [r5, #4]
 800678e:	eb0a 0709 	add.w	r7, sl, r9
 8006792:	42bb      	cmp	r3, r7
 8006794:	b085      	sub	sp, #20
 8006796:	bfb8      	it	lt
 8006798:	3101      	addlt	r1, #1
 800679a:	f7ff fed7 	bl	800654c <_Balloc>
 800679e:	b930      	cbnz	r0, 80067ae <__multiply+0x42>
 80067a0:	4602      	mov	r2, r0
 80067a2:	f240 115d 	movw	r1, #349	; 0x15d
 80067a6:	4b41      	ldr	r3, [pc, #260]	; (80068ac <__multiply+0x140>)
 80067a8:	4841      	ldr	r0, [pc, #260]	; (80068b0 <__multiply+0x144>)
 80067aa:	f000 fb15 	bl	8006dd8 <__assert_func>
 80067ae:	f100 0614 	add.w	r6, r0, #20
 80067b2:	4633      	mov	r3, r6
 80067b4:	2200      	movs	r2, #0
 80067b6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80067ba:	4543      	cmp	r3, r8
 80067bc:	d31e      	bcc.n	80067fc <__multiply+0x90>
 80067be:	f105 0c14 	add.w	ip, r5, #20
 80067c2:	f104 0314 	add.w	r3, r4, #20
 80067c6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80067ca:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80067ce:	9202      	str	r2, [sp, #8]
 80067d0:	ebac 0205 	sub.w	r2, ip, r5
 80067d4:	3a15      	subs	r2, #21
 80067d6:	f022 0203 	bic.w	r2, r2, #3
 80067da:	3204      	adds	r2, #4
 80067dc:	f105 0115 	add.w	r1, r5, #21
 80067e0:	458c      	cmp	ip, r1
 80067e2:	bf38      	it	cc
 80067e4:	2204      	movcc	r2, #4
 80067e6:	9201      	str	r2, [sp, #4]
 80067e8:	9a02      	ldr	r2, [sp, #8]
 80067ea:	9303      	str	r3, [sp, #12]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d808      	bhi.n	8006802 <__multiply+0x96>
 80067f0:	2f00      	cmp	r7, #0
 80067f2:	dc55      	bgt.n	80068a0 <__multiply+0x134>
 80067f4:	6107      	str	r7, [r0, #16]
 80067f6:	b005      	add	sp, #20
 80067f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067fc:	f843 2b04 	str.w	r2, [r3], #4
 8006800:	e7db      	b.n	80067ba <__multiply+0x4e>
 8006802:	f8b3 a000 	ldrh.w	sl, [r3]
 8006806:	f1ba 0f00 	cmp.w	sl, #0
 800680a:	d020      	beq.n	800684e <__multiply+0xe2>
 800680c:	46b1      	mov	r9, r6
 800680e:	2200      	movs	r2, #0
 8006810:	f105 0e14 	add.w	lr, r5, #20
 8006814:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006818:	f8d9 b000 	ldr.w	fp, [r9]
 800681c:	b2a1      	uxth	r1, r4
 800681e:	fa1f fb8b 	uxth.w	fp, fp
 8006822:	fb0a b101 	mla	r1, sl, r1, fp
 8006826:	4411      	add	r1, r2
 8006828:	f8d9 2000 	ldr.w	r2, [r9]
 800682c:	0c24      	lsrs	r4, r4, #16
 800682e:	0c12      	lsrs	r2, r2, #16
 8006830:	fb0a 2404 	mla	r4, sl, r4, r2
 8006834:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006838:	b289      	uxth	r1, r1
 800683a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800683e:	45f4      	cmp	ip, lr
 8006840:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006844:	f849 1b04 	str.w	r1, [r9], #4
 8006848:	d8e4      	bhi.n	8006814 <__multiply+0xa8>
 800684a:	9901      	ldr	r1, [sp, #4]
 800684c:	5072      	str	r2, [r6, r1]
 800684e:	9a03      	ldr	r2, [sp, #12]
 8006850:	3304      	adds	r3, #4
 8006852:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006856:	f1b9 0f00 	cmp.w	r9, #0
 800685a:	d01f      	beq.n	800689c <__multiply+0x130>
 800685c:	46b6      	mov	lr, r6
 800685e:	f04f 0a00 	mov.w	sl, #0
 8006862:	6834      	ldr	r4, [r6, #0]
 8006864:	f105 0114 	add.w	r1, r5, #20
 8006868:	880a      	ldrh	r2, [r1, #0]
 800686a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800686e:	b2a4      	uxth	r4, r4
 8006870:	fb09 b202 	mla	r2, r9, r2, fp
 8006874:	4492      	add	sl, r2
 8006876:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800687a:	f84e 4b04 	str.w	r4, [lr], #4
 800687e:	f851 4b04 	ldr.w	r4, [r1], #4
 8006882:	f8be 2000 	ldrh.w	r2, [lr]
 8006886:	0c24      	lsrs	r4, r4, #16
 8006888:	fb09 2404 	mla	r4, r9, r4, r2
 800688c:	458c      	cmp	ip, r1
 800688e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006892:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006896:	d8e7      	bhi.n	8006868 <__multiply+0xfc>
 8006898:	9a01      	ldr	r2, [sp, #4]
 800689a:	50b4      	str	r4, [r6, r2]
 800689c:	3604      	adds	r6, #4
 800689e:	e7a3      	b.n	80067e8 <__multiply+0x7c>
 80068a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1a5      	bne.n	80067f4 <__multiply+0x88>
 80068a8:	3f01      	subs	r7, #1
 80068aa:	e7a1      	b.n	80067f0 <__multiply+0x84>
 80068ac:	080079ef 	.word	0x080079ef
 80068b0:	08007a00 	.word	0x08007a00

080068b4 <__pow5mult>:
 80068b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068b8:	4615      	mov	r5, r2
 80068ba:	f012 0203 	ands.w	r2, r2, #3
 80068be:	4606      	mov	r6, r0
 80068c0:	460f      	mov	r7, r1
 80068c2:	d007      	beq.n	80068d4 <__pow5mult+0x20>
 80068c4:	4c25      	ldr	r4, [pc, #148]	; (800695c <__pow5mult+0xa8>)
 80068c6:	3a01      	subs	r2, #1
 80068c8:	2300      	movs	r3, #0
 80068ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068ce:	f7ff fe9f 	bl	8006610 <__multadd>
 80068d2:	4607      	mov	r7, r0
 80068d4:	10ad      	asrs	r5, r5, #2
 80068d6:	d03d      	beq.n	8006954 <__pow5mult+0xa0>
 80068d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80068da:	b97c      	cbnz	r4, 80068fc <__pow5mult+0x48>
 80068dc:	2010      	movs	r0, #16
 80068de:	f7ff fe11 	bl	8006504 <malloc>
 80068e2:	4602      	mov	r2, r0
 80068e4:	6270      	str	r0, [r6, #36]	; 0x24
 80068e6:	b928      	cbnz	r0, 80068f4 <__pow5mult+0x40>
 80068e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80068ec:	4b1c      	ldr	r3, [pc, #112]	; (8006960 <__pow5mult+0xac>)
 80068ee:	481d      	ldr	r0, [pc, #116]	; (8006964 <__pow5mult+0xb0>)
 80068f0:	f000 fa72 	bl	8006dd8 <__assert_func>
 80068f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068f8:	6004      	str	r4, [r0, #0]
 80068fa:	60c4      	str	r4, [r0, #12]
 80068fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006900:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006904:	b94c      	cbnz	r4, 800691a <__pow5mult+0x66>
 8006906:	f240 2171 	movw	r1, #625	; 0x271
 800690a:	4630      	mov	r0, r6
 800690c:	f7ff ff18 	bl	8006740 <__i2b>
 8006910:	2300      	movs	r3, #0
 8006912:	4604      	mov	r4, r0
 8006914:	f8c8 0008 	str.w	r0, [r8, #8]
 8006918:	6003      	str	r3, [r0, #0]
 800691a:	f04f 0900 	mov.w	r9, #0
 800691e:	07eb      	lsls	r3, r5, #31
 8006920:	d50a      	bpl.n	8006938 <__pow5mult+0x84>
 8006922:	4639      	mov	r1, r7
 8006924:	4622      	mov	r2, r4
 8006926:	4630      	mov	r0, r6
 8006928:	f7ff ff20 	bl	800676c <__multiply>
 800692c:	4680      	mov	r8, r0
 800692e:	4639      	mov	r1, r7
 8006930:	4630      	mov	r0, r6
 8006932:	f7ff fe4b 	bl	80065cc <_Bfree>
 8006936:	4647      	mov	r7, r8
 8006938:	106d      	asrs	r5, r5, #1
 800693a:	d00b      	beq.n	8006954 <__pow5mult+0xa0>
 800693c:	6820      	ldr	r0, [r4, #0]
 800693e:	b938      	cbnz	r0, 8006950 <__pow5mult+0x9c>
 8006940:	4622      	mov	r2, r4
 8006942:	4621      	mov	r1, r4
 8006944:	4630      	mov	r0, r6
 8006946:	f7ff ff11 	bl	800676c <__multiply>
 800694a:	6020      	str	r0, [r4, #0]
 800694c:	f8c0 9000 	str.w	r9, [r0]
 8006950:	4604      	mov	r4, r0
 8006952:	e7e4      	b.n	800691e <__pow5mult+0x6a>
 8006954:	4638      	mov	r0, r7
 8006956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800695a:	bf00      	nop
 800695c:	08007b50 	.word	0x08007b50
 8006960:	08007979 	.word	0x08007979
 8006964:	08007a00 	.word	0x08007a00

08006968 <__lshift>:
 8006968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800696c:	460c      	mov	r4, r1
 800696e:	4607      	mov	r7, r0
 8006970:	4691      	mov	r9, r2
 8006972:	6923      	ldr	r3, [r4, #16]
 8006974:	6849      	ldr	r1, [r1, #4]
 8006976:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800697a:	68a3      	ldr	r3, [r4, #8]
 800697c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006980:	f108 0601 	add.w	r6, r8, #1
 8006984:	42b3      	cmp	r3, r6
 8006986:	db0b      	blt.n	80069a0 <__lshift+0x38>
 8006988:	4638      	mov	r0, r7
 800698a:	f7ff fddf 	bl	800654c <_Balloc>
 800698e:	4605      	mov	r5, r0
 8006990:	b948      	cbnz	r0, 80069a6 <__lshift+0x3e>
 8006992:	4602      	mov	r2, r0
 8006994:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006998:	4b27      	ldr	r3, [pc, #156]	; (8006a38 <__lshift+0xd0>)
 800699a:	4828      	ldr	r0, [pc, #160]	; (8006a3c <__lshift+0xd4>)
 800699c:	f000 fa1c 	bl	8006dd8 <__assert_func>
 80069a0:	3101      	adds	r1, #1
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	e7ee      	b.n	8006984 <__lshift+0x1c>
 80069a6:	2300      	movs	r3, #0
 80069a8:	f100 0114 	add.w	r1, r0, #20
 80069ac:	f100 0210 	add.w	r2, r0, #16
 80069b0:	4618      	mov	r0, r3
 80069b2:	4553      	cmp	r3, sl
 80069b4:	db33      	blt.n	8006a1e <__lshift+0xb6>
 80069b6:	6920      	ldr	r0, [r4, #16]
 80069b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069bc:	f104 0314 	add.w	r3, r4, #20
 80069c0:	f019 091f 	ands.w	r9, r9, #31
 80069c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80069cc:	d02b      	beq.n	8006a26 <__lshift+0xbe>
 80069ce:	468a      	mov	sl, r1
 80069d0:	2200      	movs	r2, #0
 80069d2:	f1c9 0e20 	rsb	lr, r9, #32
 80069d6:	6818      	ldr	r0, [r3, #0]
 80069d8:	fa00 f009 	lsl.w	r0, r0, r9
 80069dc:	4302      	orrs	r2, r0
 80069de:	f84a 2b04 	str.w	r2, [sl], #4
 80069e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80069e6:	459c      	cmp	ip, r3
 80069e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80069ec:	d8f3      	bhi.n	80069d6 <__lshift+0x6e>
 80069ee:	ebac 0304 	sub.w	r3, ip, r4
 80069f2:	3b15      	subs	r3, #21
 80069f4:	f023 0303 	bic.w	r3, r3, #3
 80069f8:	3304      	adds	r3, #4
 80069fa:	f104 0015 	add.w	r0, r4, #21
 80069fe:	4584      	cmp	ip, r0
 8006a00:	bf38      	it	cc
 8006a02:	2304      	movcc	r3, #4
 8006a04:	50ca      	str	r2, [r1, r3]
 8006a06:	b10a      	cbz	r2, 8006a0c <__lshift+0xa4>
 8006a08:	f108 0602 	add.w	r6, r8, #2
 8006a0c:	3e01      	subs	r6, #1
 8006a0e:	4638      	mov	r0, r7
 8006a10:	4621      	mov	r1, r4
 8006a12:	612e      	str	r6, [r5, #16]
 8006a14:	f7ff fdda 	bl	80065cc <_Bfree>
 8006a18:	4628      	mov	r0, r5
 8006a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a22:	3301      	adds	r3, #1
 8006a24:	e7c5      	b.n	80069b2 <__lshift+0x4a>
 8006a26:	3904      	subs	r1, #4
 8006a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a2c:	459c      	cmp	ip, r3
 8006a2e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a32:	d8f9      	bhi.n	8006a28 <__lshift+0xc0>
 8006a34:	e7ea      	b.n	8006a0c <__lshift+0xa4>
 8006a36:	bf00      	nop
 8006a38:	080079ef 	.word	0x080079ef
 8006a3c:	08007a00 	.word	0x08007a00

08006a40 <__mcmp>:
 8006a40:	4603      	mov	r3, r0
 8006a42:	690a      	ldr	r2, [r1, #16]
 8006a44:	6900      	ldr	r0, [r0, #16]
 8006a46:	b530      	push	{r4, r5, lr}
 8006a48:	1a80      	subs	r0, r0, r2
 8006a4a:	d10d      	bne.n	8006a68 <__mcmp+0x28>
 8006a4c:	3314      	adds	r3, #20
 8006a4e:	3114      	adds	r1, #20
 8006a50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a60:	4295      	cmp	r5, r2
 8006a62:	d002      	beq.n	8006a6a <__mcmp+0x2a>
 8006a64:	d304      	bcc.n	8006a70 <__mcmp+0x30>
 8006a66:	2001      	movs	r0, #1
 8006a68:	bd30      	pop	{r4, r5, pc}
 8006a6a:	42a3      	cmp	r3, r4
 8006a6c:	d3f4      	bcc.n	8006a58 <__mcmp+0x18>
 8006a6e:	e7fb      	b.n	8006a68 <__mcmp+0x28>
 8006a70:	f04f 30ff 	mov.w	r0, #4294967295
 8006a74:	e7f8      	b.n	8006a68 <__mcmp+0x28>
	...

08006a78 <__mdiff>:
 8006a78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7c:	460c      	mov	r4, r1
 8006a7e:	4606      	mov	r6, r0
 8006a80:	4611      	mov	r1, r2
 8006a82:	4620      	mov	r0, r4
 8006a84:	4692      	mov	sl, r2
 8006a86:	f7ff ffdb 	bl	8006a40 <__mcmp>
 8006a8a:	1e05      	subs	r5, r0, #0
 8006a8c:	d111      	bne.n	8006ab2 <__mdiff+0x3a>
 8006a8e:	4629      	mov	r1, r5
 8006a90:	4630      	mov	r0, r6
 8006a92:	f7ff fd5b 	bl	800654c <_Balloc>
 8006a96:	4602      	mov	r2, r0
 8006a98:	b928      	cbnz	r0, 8006aa6 <__mdiff+0x2e>
 8006a9a:	f240 2132 	movw	r1, #562	; 0x232
 8006a9e:	4b3c      	ldr	r3, [pc, #240]	; (8006b90 <__mdiff+0x118>)
 8006aa0:	483c      	ldr	r0, [pc, #240]	; (8006b94 <__mdiff+0x11c>)
 8006aa2:	f000 f999 	bl	8006dd8 <__assert_func>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006aac:	4610      	mov	r0, r2
 8006aae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab2:	bfa4      	itt	ge
 8006ab4:	4653      	movge	r3, sl
 8006ab6:	46a2      	movge	sl, r4
 8006ab8:	4630      	mov	r0, r6
 8006aba:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006abe:	bfa6      	itte	ge
 8006ac0:	461c      	movge	r4, r3
 8006ac2:	2500      	movge	r5, #0
 8006ac4:	2501      	movlt	r5, #1
 8006ac6:	f7ff fd41 	bl	800654c <_Balloc>
 8006aca:	4602      	mov	r2, r0
 8006acc:	b918      	cbnz	r0, 8006ad6 <__mdiff+0x5e>
 8006ace:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006ad2:	4b2f      	ldr	r3, [pc, #188]	; (8006b90 <__mdiff+0x118>)
 8006ad4:	e7e4      	b.n	8006aa0 <__mdiff+0x28>
 8006ad6:	f100 0814 	add.w	r8, r0, #20
 8006ada:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006ade:	60c5      	str	r5, [r0, #12]
 8006ae0:	f04f 0c00 	mov.w	ip, #0
 8006ae4:	f10a 0514 	add.w	r5, sl, #20
 8006ae8:	f10a 0010 	add.w	r0, sl, #16
 8006aec:	46c2      	mov	sl, r8
 8006aee:	6926      	ldr	r6, [r4, #16]
 8006af0:	f104 0914 	add.w	r9, r4, #20
 8006af4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006af8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006afc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006b00:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b04:	fa1f f18b 	uxth.w	r1, fp
 8006b08:	4461      	add	r1, ip
 8006b0a:	fa1f fc83 	uxth.w	ip, r3
 8006b0e:	0c1b      	lsrs	r3, r3, #16
 8006b10:	eba1 010c 	sub.w	r1, r1, ip
 8006b14:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006b18:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006b1c:	b289      	uxth	r1, r1
 8006b1e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006b22:	454e      	cmp	r6, r9
 8006b24:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006b28:	f84a 3b04 	str.w	r3, [sl], #4
 8006b2c:	d8e6      	bhi.n	8006afc <__mdiff+0x84>
 8006b2e:	1b33      	subs	r3, r6, r4
 8006b30:	3b15      	subs	r3, #21
 8006b32:	f023 0303 	bic.w	r3, r3, #3
 8006b36:	3415      	adds	r4, #21
 8006b38:	3304      	adds	r3, #4
 8006b3a:	42a6      	cmp	r6, r4
 8006b3c:	bf38      	it	cc
 8006b3e:	2304      	movcc	r3, #4
 8006b40:	441d      	add	r5, r3
 8006b42:	4443      	add	r3, r8
 8006b44:	461e      	mov	r6, r3
 8006b46:	462c      	mov	r4, r5
 8006b48:	4574      	cmp	r4, lr
 8006b4a:	d30e      	bcc.n	8006b6a <__mdiff+0xf2>
 8006b4c:	f10e 0103 	add.w	r1, lr, #3
 8006b50:	1b49      	subs	r1, r1, r5
 8006b52:	f021 0103 	bic.w	r1, r1, #3
 8006b56:	3d03      	subs	r5, #3
 8006b58:	45ae      	cmp	lr, r5
 8006b5a:	bf38      	it	cc
 8006b5c:	2100      	movcc	r1, #0
 8006b5e:	4419      	add	r1, r3
 8006b60:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006b64:	b18b      	cbz	r3, 8006b8a <__mdiff+0x112>
 8006b66:	6117      	str	r7, [r2, #16]
 8006b68:	e7a0      	b.n	8006aac <__mdiff+0x34>
 8006b6a:	f854 8b04 	ldr.w	r8, [r4], #4
 8006b6e:	fa1f f188 	uxth.w	r1, r8
 8006b72:	4461      	add	r1, ip
 8006b74:	1408      	asrs	r0, r1, #16
 8006b76:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006b7a:	b289      	uxth	r1, r1
 8006b7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006b80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b84:	f846 1b04 	str.w	r1, [r6], #4
 8006b88:	e7de      	b.n	8006b48 <__mdiff+0xd0>
 8006b8a:	3f01      	subs	r7, #1
 8006b8c:	e7e8      	b.n	8006b60 <__mdiff+0xe8>
 8006b8e:	bf00      	nop
 8006b90:	080079ef 	.word	0x080079ef
 8006b94:	08007a00 	.word	0x08007a00

08006b98 <__d2b>:
 8006b98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006ba2:	4690      	mov	r8, r2
 8006ba4:	461d      	mov	r5, r3
 8006ba6:	f7ff fcd1 	bl	800654c <_Balloc>
 8006baa:	4604      	mov	r4, r0
 8006bac:	b930      	cbnz	r0, 8006bbc <__d2b+0x24>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	f240 310a 	movw	r1, #778	; 0x30a
 8006bb4:	4b24      	ldr	r3, [pc, #144]	; (8006c48 <__d2b+0xb0>)
 8006bb6:	4825      	ldr	r0, [pc, #148]	; (8006c4c <__d2b+0xb4>)
 8006bb8:	f000 f90e 	bl	8006dd8 <__assert_func>
 8006bbc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006bc0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006bc4:	bb2d      	cbnz	r5, 8006c12 <__d2b+0x7a>
 8006bc6:	9301      	str	r3, [sp, #4]
 8006bc8:	f1b8 0300 	subs.w	r3, r8, #0
 8006bcc:	d026      	beq.n	8006c1c <__d2b+0x84>
 8006bce:	4668      	mov	r0, sp
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	f7ff fd87 	bl	80066e4 <__lo0bits>
 8006bd6:	9900      	ldr	r1, [sp, #0]
 8006bd8:	b1f0      	cbz	r0, 8006c18 <__d2b+0x80>
 8006bda:	9a01      	ldr	r2, [sp, #4]
 8006bdc:	f1c0 0320 	rsb	r3, r0, #32
 8006be0:	fa02 f303 	lsl.w	r3, r2, r3
 8006be4:	430b      	orrs	r3, r1
 8006be6:	40c2      	lsrs	r2, r0
 8006be8:	6163      	str	r3, [r4, #20]
 8006bea:	9201      	str	r2, [sp, #4]
 8006bec:	9b01      	ldr	r3, [sp, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	bf14      	ite	ne
 8006bf2:	2102      	movne	r1, #2
 8006bf4:	2101      	moveq	r1, #1
 8006bf6:	61a3      	str	r3, [r4, #24]
 8006bf8:	6121      	str	r1, [r4, #16]
 8006bfa:	b1c5      	cbz	r5, 8006c2e <__d2b+0x96>
 8006bfc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006c00:	4405      	add	r5, r0
 8006c02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c06:	603d      	str	r5, [r7, #0]
 8006c08:	6030      	str	r0, [r6, #0]
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	b002      	add	sp, #8
 8006c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c16:	e7d6      	b.n	8006bc6 <__d2b+0x2e>
 8006c18:	6161      	str	r1, [r4, #20]
 8006c1a:	e7e7      	b.n	8006bec <__d2b+0x54>
 8006c1c:	a801      	add	r0, sp, #4
 8006c1e:	f7ff fd61 	bl	80066e4 <__lo0bits>
 8006c22:	2101      	movs	r1, #1
 8006c24:	9b01      	ldr	r3, [sp, #4]
 8006c26:	6121      	str	r1, [r4, #16]
 8006c28:	6163      	str	r3, [r4, #20]
 8006c2a:	3020      	adds	r0, #32
 8006c2c:	e7e5      	b.n	8006bfa <__d2b+0x62>
 8006c2e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006c32:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c36:	6038      	str	r0, [r7, #0]
 8006c38:	6918      	ldr	r0, [r3, #16]
 8006c3a:	f7ff fd33 	bl	80066a4 <__hi0bits>
 8006c3e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006c42:	6031      	str	r1, [r6, #0]
 8006c44:	e7e1      	b.n	8006c0a <__d2b+0x72>
 8006c46:	bf00      	nop
 8006c48:	080079ef 	.word	0x080079ef
 8006c4c:	08007a00 	.word	0x08007a00

08006c50 <_calloc_r>:
 8006c50:	b538      	push	{r3, r4, r5, lr}
 8006c52:	fb02 f501 	mul.w	r5, r2, r1
 8006c56:	4629      	mov	r1, r5
 8006c58:	f000 f854 	bl	8006d04 <_malloc_r>
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	b118      	cbz	r0, 8006c68 <_calloc_r+0x18>
 8006c60:	462a      	mov	r2, r5
 8006c62:	2100      	movs	r1, #0
 8006c64:	f7fe f966 	bl	8004f34 <memset>
 8006c68:	4620      	mov	r0, r4
 8006c6a:	bd38      	pop	{r3, r4, r5, pc}

08006c6c <_free_r>:
 8006c6c:	b538      	push	{r3, r4, r5, lr}
 8006c6e:	4605      	mov	r5, r0
 8006c70:	2900      	cmp	r1, #0
 8006c72:	d043      	beq.n	8006cfc <_free_r+0x90>
 8006c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c78:	1f0c      	subs	r4, r1, #4
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	bfb8      	it	lt
 8006c7e:	18e4      	addlt	r4, r4, r3
 8006c80:	f000 f8ec 	bl	8006e5c <__malloc_lock>
 8006c84:	4a1e      	ldr	r2, [pc, #120]	; (8006d00 <_free_r+0x94>)
 8006c86:	6813      	ldr	r3, [r2, #0]
 8006c88:	4610      	mov	r0, r2
 8006c8a:	b933      	cbnz	r3, 8006c9a <_free_r+0x2e>
 8006c8c:	6063      	str	r3, [r4, #4]
 8006c8e:	6014      	str	r4, [r2, #0]
 8006c90:	4628      	mov	r0, r5
 8006c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c96:	f000 b8e7 	b.w	8006e68 <__malloc_unlock>
 8006c9a:	42a3      	cmp	r3, r4
 8006c9c:	d90a      	bls.n	8006cb4 <_free_r+0x48>
 8006c9e:	6821      	ldr	r1, [r4, #0]
 8006ca0:	1862      	adds	r2, r4, r1
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	bf01      	itttt	eq
 8006ca6:	681a      	ldreq	r2, [r3, #0]
 8006ca8:	685b      	ldreq	r3, [r3, #4]
 8006caa:	1852      	addeq	r2, r2, r1
 8006cac:	6022      	streq	r2, [r4, #0]
 8006cae:	6063      	str	r3, [r4, #4]
 8006cb0:	6004      	str	r4, [r0, #0]
 8006cb2:	e7ed      	b.n	8006c90 <_free_r+0x24>
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	b10b      	cbz	r3, 8006cbe <_free_r+0x52>
 8006cba:	42a3      	cmp	r3, r4
 8006cbc:	d9fa      	bls.n	8006cb4 <_free_r+0x48>
 8006cbe:	6811      	ldr	r1, [r2, #0]
 8006cc0:	1850      	adds	r0, r2, r1
 8006cc2:	42a0      	cmp	r0, r4
 8006cc4:	d10b      	bne.n	8006cde <_free_r+0x72>
 8006cc6:	6820      	ldr	r0, [r4, #0]
 8006cc8:	4401      	add	r1, r0
 8006cca:	1850      	adds	r0, r2, r1
 8006ccc:	4283      	cmp	r3, r0
 8006cce:	6011      	str	r1, [r2, #0]
 8006cd0:	d1de      	bne.n	8006c90 <_free_r+0x24>
 8006cd2:	6818      	ldr	r0, [r3, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	4401      	add	r1, r0
 8006cd8:	6011      	str	r1, [r2, #0]
 8006cda:	6053      	str	r3, [r2, #4]
 8006cdc:	e7d8      	b.n	8006c90 <_free_r+0x24>
 8006cde:	d902      	bls.n	8006ce6 <_free_r+0x7a>
 8006ce0:	230c      	movs	r3, #12
 8006ce2:	602b      	str	r3, [r5, #0]
 8006ce4:	e7d4      	b.n	8006c90 <_free_r+0x24>
 8006ce6:	6820      	ldr	r0, [r4, #0]
 8006ce8:	1821      	adds	r1, r4, r0
 8006cea:	428b      	cmp	r3, r1
 8006cec:	bf01      	itttt	eq
 8006cee:	6819      	ldreq	r1, [r3, #0]
 8006cf0:	685b      	ldreq	r3, [r3, #4]
 8006cf2:	1809      	addeq	r1, r1, r0
 8006cf4:	6021      	streq	r1, [r4, #0]
 8006cf6:	6063      	str	r3, [r4, #4]
 8006cf8:	6054      	str	r4, [r2, #4]
 8006cfa:	e7c9      	b.n	8006c90 <_free_r+0x24>
 8006cfc:	bd38      	pop	{r3, r4, r5, pc}
 8006cfe:	bf00      	nop
 8006d00:	20000250 	.word	0x20000250

08006d04 <_malloc_r>:
 8006d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d06:	1ccd      	adds	r5, r1, #3
 8006d08:	f025 0503 	bic.w	r5, r5, #3
 8006d0c:	3508      	adds	r5, #8
 8006d0e:	2d0c      	cmp	r5, #12
 8006d10:	bf38      	it	cc
 8006d12:	250c      	movcc	r5, #12
 8006d14:	2d00      	cmp	r5, #0
 8006d16:	4606      	mov	r6, r0
 8006d18:	db01      	blt.n	8006d1e <_malloc_r+0x1a>
 8006d1a:	42a9      	cmp	r1, r5
 8006d1c:	d903      	bls.n	8006d26 <_malloc_r+0x22>
 8006d1e:	230c      	movs	r3, #12
 8006d20:	6033      	str	r3, [r6, #0]
 8006d22:	2000      	movs	r0, #0
 8006d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d26:	f000 f899 	bl	8006e5c <__malloc_lock>
 8006d2a:	4921      	ldr	r1, [pc, #132]	; (8006db0 <_malloc_r+0xac>)
 8006d2c:	680a      	ldr	r2, [r1, #0]
 8006d2e:	4614      	mov	r4, r2
 8006d30:	b99c      	cbnz	r4, 8006d5a <_malloc_r+0x56>
 8006d32:	4f20      	ldr	r7, [pc, #128]	; (8006db4 <_malloc_r+0xb0>)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	b923      	cbnz	r3, 8006d42 <_malloc_r+0x3e>
 8006d38:	4621      	mov	r1, r4
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	f000 f83c 	bl	8006db8 <_sbrk_r>
 8006d40:	6038      	str	r0, [r7, #0]
 8006d42:	4629      	mov	r1, r5
 8006d44:	4630      	mov	r0, r6
 8006d46:	f000 f837 	bl	8006db8 <_sbrk_r>
 8006d4a:	1c43      	adds	r3, r0, #1
 8006d4c:	d123      	bne.n	8006d96 <_malloc_r+0x92>
 8006d4e:	230c      	movs	r3, #12
 8006d50:	4630      	mov	r0, r6
 8006d52:	6033      	str	r3, [r6, #0]
 8006d54:	f000 f888 	bl	8006e68 <__malloc_unlock>
 8006d58:	e7e3      	b.n	8006d22 <_malloc_r+0x1e>
 8006d5a:	6823      	ldr	r3, [r4, #0]
 8006d5c:	1b5b      	subs	r3, r3, r5
 8006d5e:	d417      	bmi.n	8006d90 <_malloc_r+0x8c>
 8006d60:	2b0b      	cmp	r3, #11
 8006d62:	d903      	bls.n	8006d6c <_malloc_r+0x68>
 8006d64:	6023      	str	r3, [r4, #0]
 8006d66:	441c      	add	r4, r3
 8006d68:	6025      	str	r5, [r4, #0]
 8006d6a:	e004      	b.n	8006d76 <_malloc_r+0x72>
 8006d6c:	6863      	ldr	r3, [r4, #4]
 8006d6e:	42a2      	cmp	r2, r4
 8006d70:	bf0c      	ite	eq
 8006d72:	600b      	streq	r3, [r1, #0]
 8006d74:	6053      	strne	r3, [r2, #4]
 8006d76:	4630      	mov	r0, r6
 8006d78:	f000 f876 	bl	8006e68 <__malloc_unlock>
 8006d7c:	f104 000b 	add.w	r0, r4, #11
 8006d80:	1d23      	adds	r3, r4, #4
 8006d82:	f020 0007 	bic.w	r0, r0, #7
 8006d86:	1ac2      	subs	r2, r0, r3
 8006d88:	d0cc      	beq.n	8006d24 <_malloc_r+0x20>
 8006d8a:	1a1b      	subs	r3, r3, r0
 8006d8c:	50a3      	str	r3, [r4, r2]
 8006d8e:	e7c9      	b.n	8006d24 <_malloc_r+0x20>
 8006d90:	4622      	mov	r2, r4
 8006d92:	6864      	ldr	r4, [r4, #4]
 8006d94:	e7cc      	b.n	8006d30 <_malloc_r+0x2c>
 8006d96:	1cc4      	adds	r4, r0, #3
 8006d98:	f024 0403 	bic.w	r4, r4, #3
 8006d9c:	42a0      	cmp	r0, r4
 8006d9e:	d0e3      	beq.n	8006d68 <_malloc_r+0x64>
 8006da0:	1a21      	subs	r1, r4, r0
 8006da2:	4630      	mov	r0, r6
 8006da4:	f000 f808 	bl	8006db8 <_sbrk_r>
 8006da8:	3001      	adds	r0, #1
 8006daa:	d1dd      	bne.n	8006d68 <_malloc_r+0x64>
 8006dac:	e7cf      	b.n	8006d4e <_malloc_r+0x4a>
 8006dae:	bf00      	nop
 8006db0:	20000250 	.word	0x20000250
 8006db4:	20000254 	.word	0x20000254

08006db8 <_sbrk_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	2300      	movs	r3, #0
 8006dbc:	4d05      	ldr	r5, [pc, #20]	; (8006dd4 <_sbrk_r+0x1c>)
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	4608      	mov	r0, r1
 8006dc2:	602b      	str	r3, [r5, #0]
 8006dc4:	f7fa fd36 	bl	8001834 <_sbrk>
 8006dc8:	1c43      	adds	r3, r0, #1
 8006dca:	d102      	bne.n	8006dd2 <_sbrk_r+0x1a>
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	b103      	cbz	r3, 8006dd2 <_sbrk_r+0x1a>
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	bd38      	pop	{r3, r4, r5, pc}
 8006dd4:	20000730 	.word	0x20000730

08006dd8 <__assert_func>:
 8006dd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006dda:	4614      	mov	r4, r2
 8006ddc:	461a      	mov	r2, r3
 8006dde:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <__assert_func+0x2c>)
 8006de0:	4605      	mov	r5, r0
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68d8      	ldr	r0, [r3, #12]
 8006de6:	b14c      	cbz	r4, 8006dfc <__assert_func+0x24>
 8006de8:	4b07      	ldr	r3, [pc, #28]	; (8006e08 <__assert_func+0x30>)
 8006dea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006dee:	9100      	str	r1, [sp, #0]
 8006df0:	462b      	mov	r3, r5
 8006df2:	4906      	ldr	r1, [pc, #24]	; (8006e0c <__assert_func+0x34>)
 8006df4:	f000 f80e 	bl	8006e14 <fiprintf>
 8006df8:	f000 fa62 	bl	80072c0 <abort>
 8006dfc:	4b04      	ldr	r3, [pc, #16]	; (8006e10 <__assert_func+0x38>)
 8006dfe:	461c      	mov	r4, r3
 8006e00:	e7f3      	b.n	8006dea <__assert_func+0x12>
 8006e02:	bf00      	nop
 8006e04:	20000010 	.word	0x20000010
 8006e08:	08007b5c 	.word	0x08007b5c
 8006e0c:	08007b69 	.word	0x08007b69
 8006e10:	08007b97 	.word	0x08007b97

08006e14 <fiprintf>:
 8006e14:	b40e      	push	{r1, r2, r3}
 8006e16:	b503      	push	{r0, r1, lr}
 8006e18:	4601      	mov	r1, r0
 8006e1a:	ab03      	add	r3, sp, #12
 8006e1c:	4805      	ldr	r0, [pc, #20]	; (8006e34 <fiprintf+0x20>)
 8006e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e22:	6800      	ldr	r0, [r0, #0]
 8006e24:	9301      	str	r3, [sp, #4]
 8006e26:	f000 f84d 	bl	8006ec4 <_vfiprintf_r>
 8006e2a:	b002      	add	sp, #8
 8006e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e30:	b003      	add	sp, #12
 8006e32:	4770      	bx	lr
 8006e34:	20000010 	.word	0x20000010

08006e38 <__ascii_mbtowc>:
 8006e38:	b082      	sub	sp, #8
 8006e3a:	b901      	cbnz	r1, 8006e3e <__ascii_mbtowc+0x6>
 8006e3c:	a901      	add	r1, sp, #4
 8006e3e:	b142      	cbz	r2, 8006e52 <__ascii_mbtowc+0x1a>
 8006e40:	b14b      	cbz	r3, 8006e56 <__ascii_mbtowc+0x1e>
 8006e42:	7813      	ldrb	r3, [r2, #0]
 8006e44:	600b      	str	r3, [r1, #0]
 8006e46:	7812      	ldrb	r2, [r2, #0]
 8006e48:	1e10      	subs	r0, r2, #0
 8006e4a:	bf18      	it	ne
 8006e4c:	2001      	movne	r0, #1
 8006e4e:	b002      	add	sp, #8
 8006e50:	4770      	bx	lr
 8006e52:	4610      	mov	r0, r2
 8006e54:	e7fb      	b.n	8006e4e <__ascii_mbtowc+0x16>
 8006e56:	f06f 0001 	mvn.w	r0, #1
 8006e5a:	e7f8      	b.n	8006e4e <__ascii_mbtowc+0x16>

08006e5c <__malloc_lock>:
 8006e5c:	4801      	ldr	r0, [pc, #4]	; (8006e64 <__malloc_lock+0x8>)
 8006e5e:	f000 bbef 	b.w	8007640 <__retarget_lock_acquire_recursive>
 8006e62:	bf00      	nop
 8006e64:	20000738 	.word	0x20000738

08006e68 <__malloc_unlock>:
 8006e68:	4801      	ldr	r0, [pc, #4]	; (8006e70 <__malloc_unlock+0x8>)
 8006e6a:	f000 bbea 	b.w	8007642 <__retarget_lock_release_recursive>
 8006e6e:	bf00      	nop
 8006e70:	20000738 	.word	0x20000738

08006e74 <__sfputc_r>:
 8006e74:	6893      	ldr	r3, [r2, #8]
 8006e76:	b410      	push	{r4}
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	6093      	str	r3, [r2, #8]
 8006e7e:	da07      	bge.n	8006e90 <__sfputc_r+0x1c>
 8006e80:	6994      	ldr	r4, [r2, #24]
 8006e82:	42a3      	cmp	r3, r4
 8006e84:	db01      	blt.n	8006e8a <__sfputc_r+0x16>
 8006e86:	290a      	cmp	r1, #10
 8006e88:	d102      	bne.n	8006e90 <__sfputc_r+0x1c>
 8006e8a:	bc10      	pop	{r4}
 8006e8c:	f000 b94a 	b.w	8007124 <__swbuf_r>
 8006e90:	6813      	ldr	r3, [r2, #0]
 8006e92:	1c58      	adds	r0, r3, #1
 8006e94:	6010      	str	r0, [r2, #0]
 8006e96:	7019      	strb	r1, [r3, #0]
 8006e98:	4608      	mov	r0, r1
 8006e9a:	bc10      	pop	{r4}
 8006e9c:	4770      	bx	lr

08006e9e <__sfputs_r>:
 8006e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	460f      	mov	r7, r1
 8006ea4:	4614      	mov	r4, r2
 8006ea6:	18d5      	adds	r5, r2, r3
 8006ea8:	42ac      	cmp	r4, r5
 8006eaa:	d101      	bne.n	8006eb0 <__sfputs_r+0x12>
 8006eac:	2000      	movs	r0, #0
 8006eae:	e007      	b.n	8006ec0 <__sfputs_r+0x22>
 8006eb0:	463a      	mov	r2, r7
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eb8:	f7ff ffdc 	bl	8006e74 <__sfputc_r>
 8006ebc:	1c43      	adds	r3, r0, #1
 8006ebe:	d1f3      	bne.n	8006ea8 <__sfputs_r+0xa>
 8006ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ec4 <_vfiprintf_r>:
 8006ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec8:	460d      	mov	r5, r1
 8006eca:	4614      	mov	r4, r2
 8006ecc:	4698      	mov	r8, r3
 8006ece:	4606      	mov	r6, r0
 8006ed0:	b09d      	sub	sp, #116	; 0x74
 8006ed2:	b118      	cbz	r0, 8006edc <_vfiprintf_r+0x18>
 8006ed4:	6983      	ldr	r3, [r0, #24]
 8006ed6:	b90b      	cbnz	r3, 8006edc <_vfiprintf_r+0x18>
 8006ed8:	f000 fb14 	bl	8007504 <__sinit>
 8006edc:	4b89      	ldr	r3, [pc, #548]	; (8007104 <_vfiprintf_r+0x240>)
 8006ede:	429d      	cmp	r5, r3
 8006ee0:	d11b      	bne.n	8006f1a <_vfiprintf_r+0x56>
 8006ee2:	6875      	ldr	r5, [r6, #4]
 8006ee4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ee6:	07d9      	lsls	r1, r3, #31
 8006ee8:	d405      	bmi.n	8006ef6 <_vfiprintf_r+0x32>
 8006eea:	89ab      	ldrh	r3, [r5, #12]
 8006eec:	059a      	lsls	r2, r3, #22
 8006eee:	d402      	bmi.n	8006ef6 <_vfiprintf_r+0x32>
 8006ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ef2:	f000 fba5 	bl	8007640 <__retarget_lock_acquire_recursive>
 8006ef6:	89ab      	ldrh	r3, [r5, #12]
 8006ef8:	071b      	lsls	r3, r3, #28
 8006efa:	d501      	bpl.n	8006f00 <_vfiprintf_r+0x3c>
 8006efc:	692b      	ldr	r3, [r5, #16]
 8006efe:	b9eb      	cbnz	r3, 8006f3c <_vfiprintf_r+0x78>
 8006f00:	4629      	mov	r1, r5
 8006f02:	4630      	mov	r0, r6
 8006f04:	f000 f96e 	bl	80071e4 <__swsetup_r>
 8006f08:	b1c0      	cbz	r0, 8006f3c <_vfiprintf_r+0x78>
 8006f0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f0c:	07dc      	lsls	r4, r3, #31
 8006f0e:	d50e      	bpl.n	8006f2e <_vfiprintf_r+0x6a>
 8006f10:	f04f 30ff 	mov.w	r0, #4294967295
 8006f14:	b01d      	add	sp, #116	; 0x74
 8006f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1a:	4b7b      	ldr	r3, [pc, #492]	; (8007108 <_vfiprintf_r+0x244>)
 8006f1c:	429d      	cmp	r5, r3
 8006f1e:	d101      	bne.n	8006f24 <_vfiprintf_r+0x60>
 8006f20:	68b5      	ldr	r5, [r6, #8]
 8006f22:	e7df      	b.n	8006ee4 <_vfiprintf_r+0x20>
 8006f24:	4b79      	ldr	r3, [pc, #484]	; (800710c <_vfiprintf_r+0x248>)
 8006f26:	429d      	cmp	r5, r3
 8006f28:	bf08      	it	eq
 8006f2a:	68f5      	ldreq	r5, [r6, #12]
 8006f2c:	e7da      	b.n	8006ee4 <_vfiprintf_r+0x20>
 8006f2e:	89ab      	ldrh	r3, [r5, #12]
 8006f30:	0598      	lsls	r0, r3, #22
 8006f32:	d4ed      	bmi.n	8006f10 <_vfiprintf_r+0x4c>
 8006f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f36:	f000 fb84 	bl	8007642 <__retarget_lock_release_recursive>
 8006f3a:	e7e9      	b.n	8006f10 <_vfiprintf_r+0x4c>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f40:	2320      	movs	r3, #32
 8006f42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f46:	2330      	movs	r3, #48	; 0x30
 8006f48:	f04f 0901 	mov.w	r9, #1
 8006f4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f50:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007110 <_vfiprintf_r+0x24c>
 8006f54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f58:	4623      	mov	r3, r4
 8006f5a:	469a      	mov	sl, r3
 8006f5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f60:	b10a      	cbz	r2, 8006f66 <_vfiprintf_r+0xa2>
 8006f62:	2a25      	cmp	r2, #37	; 0x25
 8006f64:	d1f9      	bne.n	8006f5a <_vfiprintf_r+0x96>
 8006f66:	ebba 0b04 	subs.w	fp, sl, r4
 8006f6a:	d00b      	beq.n	8006f84 <_vfiprintf_r+0xc0>
 8006f6c:	465b      	mov	r3, fp
 8006f6e:	4622      	mov	r2, r4
 8006f70:	4629      	mov	r1, r5
 8006f72:	4630      	mov	r0, r6
 8006f74:	f7ff ff93 	bl	8006e9e <__sfputs_r>
 8006f78:	3001      	adds	r0, #1
 8006f7a:	f000 80aa 	beq.w	80070d2 <_vfiprintf_r+0x20e>
 8006f7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f80:	445a      	add	r2, fp
 8006f82:	9209      	str	r2, [sp, #36]	; 0x24
 8006f84:	f89a 3000 	ldrb.w	r3, [sl]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 80a2 	beq.w	80070d2 <_vfiprintf_r+0x20e>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	f04f 32ff 	mov.w	r2, #4294967295
 8006f94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f98:	f10a 0a01 	add.w	sl, sl, #1
 8006f9c:	9304      	str	r3, [sp, #16]
 8006f9e:	9307      	str	r3, [sp, #28]
 8006fa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fa4:	931a      	str	r3, [sp, #104]	; 0x68
 8006fa6:	4654      	mov	r4, sl
 8006fa8:	2205      	movs	r2, #5
 8006faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fae:	4858      	ldr	r0, [pc, #352]	; (8007110 <_vfiprintf_r+0x24c>)
 8006fb0:	f7ff fab0 	bl	8006514 <memchr>
 8006fb4:	9a04      	ldr	r2, [sp, #16]
 8006fb6:	b9d8      	cbnz	r0, 8006ff0 <_vfiprintf_r+0x12c>
 8006fb8:	06d1      	lsls	r1, r2, #27
 8006fba:	bf44      	itt	mi
 8006fbc:	2320      	movmi	r3, #32
 8006fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fc2:	0713      	lsls	r3, r2, #28
 8006fc4:	bf44      	itt	mi
 8006fc6:	232b      	movmi	r3, #43	; 0x2b
 8006fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8006fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8006fd2:	d015      	beq.n	8007000 <_vfiprintf_r+0x13c>
 8006fd4:	4654      	mov	r4, sl
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	f04f 0c0a 	mov.w	ip, #10
 8006fdc:	9a07      	ldr	r2, [sp, #28]
 8006fde:	4621      	mov	r1, r4
 8006fe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fe4:	3b30      	subs	r3, #48	; 0x30
 8006fe6:	2b09      	cmp	r3, #9
 8006fe8:	d94e      	bls.n	8007088 <_vfiprintf_r+0x1c4>
 8006fea:	b1b0      	cbz	r0, 800701a <_vfiprintf_r+0x156>
 8006fec:	9207      	str	r2, [sp, #28]
 8006fee:	e014      	b.n	800701a <_vfiprintf_r+0x156>
 8006ff0:	eba0 0308 	sub.w	r3, r0, r8
 8006ff4:	fa09 f303 	lsl.w	r3, r9, r3
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	46a2      	mov	sl, r4
 8006ffc:	9304      	str	r3, [sp, #16]
 8006ffe:	e7d2      	b.n	8006fa6 <_vfiprintf_r+0xe2>
 8007000:	9b03      	ldr	r3, [sp, #12]
 8007002:	1d19      	adds	r1, r3, #4
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	9103      	str	r1, [sp, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	bfbb      	ittet	lt
 800700c:	425b      	neglt	r3, r3
 800700e:	f042 0202 	orrlt.w	r2, r2, #2
 8007012:	9307      	strge	r3, [sp, #28]
 8007014:	9307      	strlt	r3, [sp, #28]
 8007016:	bfb8      	it	lt
 8007018:	9204      	strlt	r2, [sp, #16]
 800701a:	7823      	ldrb	r3, [r4, #0]
 800701c:	2b2e      	cmp	r3, #46	; 0x2e
 800701e:	d10c      	bne.n	800703a <_vfiprintf_r+0x176>
 8007020:	7863      	ldrb	r3, [r4, #1]
 8007022:	2b2a      	cmp	r3, #42	; 0x2a
 8007024:	d135      	bne.n	8007092 <_vfiprintf_r+0x1ce>
 8007026:	9b03      	ldr	r3, [sp, #12]
 8007028:	3402      	adds	r4, #2
 800702a:	1d1a      	adds	r2, r3, #4
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	9203      	str	r2, [sp, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	bfb8      	it	lt
 8007034:	f04f 33ff 	movlt.w	r3, #4294967295
 8007038:	9305      	str	r3, [sp, #20]
 800703a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007120 <_vfiprintf_r+0x25c>
 800703e:	2203      	movs	r2, #3
 8007040:	4650      	mov	r0, sl
 8007042:	7821      	ldrb	r1, [r4, #0]
 8007044:	f7ff fa66 	bl	8006514 <memchr>
 8007048:	b140      	cbz	r0, 800705c <_vfiprintf_r+0x198>
 800704a:	2340      	movs	r3, #64	; 0x40
 800704c:	eba0 000a 	sub.w	r0, r0, sl
 8007050:	fa03 f000 	lsl.w	r0, r3, r0
 8007054:	9b04      	ldr	r3, [sp, #16]
 8007056:	3401      	adds	r4, #1
 8007058:	4303      	orrs	r3, r0
 800705a:	9304      	str	r3, [sp, #16]
 800705c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007060:	2206      	movs	r2, #6
 8007062:	482c      	ldr	r0, [pc, #176]	; (8007114 <_vfiprintf_r+0x250>)
 8007064:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007068:	f7ff fa54 	bl	8006514 <memchr>
 800706c:	2800      	cmp	r0, #0
 800706e:	d03f      	beq.n	80070f0 <_vfiprintf_r+0x22c>
 8007070:	4b29      	ldr	r3, [pc, #164]	; (8007118 <_vfiprintf_r+0x254>)
 8007072:	bb1b      	cbnz	r3, 80070bc <_vfiprintf_r+0x1f8>
 8007074:	9b03      	ldr	r3, [sp, #12]
 8007076:	3307      	adds	r3, #7
 8007078:	f023 0307 	bic.w	r3, r3, #7
 800707c:	3308      	adds	r3, #8
 800707e:	9303      	str	r3, [sp, #12]
 8007080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007082:	443b      	add	r3, r7
 8007084:	9309      	str	r3, [sp, #36]	; 0x24
 8007086:	e767      	b.n	8006f58 <_vfiprintf_r+0x94>
 8007088:	460c      	mov	r4, r1
 800708a:	2001      	movs	r0, #1
 800708c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007090:	e7a5      	b.n	8006fde <_vfiprintf_r+0x11a>
 8007092:	2300      	movs	r3, #0
 8007094:	f04f 0c0a 	mov.w	ip, #10
 8007098:	4619      	mov	r1, r3
 800709a:	3401      	adds	r4, #1
 800709c:	9305      	str	r3, [sp, #20]
 800709e:	4620      	mov	r0, r4
 80070a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070a4:	3a30      	subs	r2, #48	; 0x30
 80070a6:	2a09      	cmp	r2, #9
 80070a8:	d903      	bls.n	80070b2 <_vfiprintf_r+0x1ee>
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d0c5      	beq.n	800703a <_vfiprintf_r+0x176>
 80070ae:	9105      	str	r1, [sp, #20]
 80070b0:	e7c3      	b.n	800703a <_vfiprintf_r+0x176>
 80070b2:	4604      	mov	r4, r0
 80070b4:	2301      	movs	r3, #1
 80070b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80070ba:	e7f0      	b.n	800709e <_vfiprintf_r+0x1da>
 80070bc:	ab03      	add	r3, sp, #12
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	462a      	mov	r2, r5
 80070c2:	4630      	mov	r0, r6
 80070c4:	4b15      	ldr	r3, [pc, #84]	; (800711c <_vfiprintf_r+0x258>)
 80070c6:	a904      	add	r1, sp, #16
 80070c8:	f7fd ffda 	bl	8005080 <_printf_float>
 80070cc:	4607      	mov	r7, r0
 80070ce:	1c78      	adds	r0, r7, #1
 80070d0:	d1d6      	bne.n	8007080 <_vfiprintf_r+0x1bc>
 80070d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070d4:	07d9      	lsls	r1, r3, #31
 80070d6:	d405      	bmi.n	80070e4 <_vfiprintf_r+0x220>
 80070d8:	89ab      	ldrh	r3, [r5, #12]
 80070da:	059a      	lsls	r2, r3, #22
 80070dc:	d402      	bmi.n	80070e4 <_vfiprintf_r+0x220>
 80070de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070e0:	f000 faaf 	bl	8007642 <__retarget_lock_release_recursive>
 80070e4:	89ab      	ldrh	r3, [r5, #12]
 80070e6:	065b      	lsls	r3, r3, #25
 80070e8:	f53f af12 	bmi.w	8006f10 <_vfiprintf_r+0x4c>
 80070ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070ee:	e711      	b.n	8006f14 <_vfiprintf_r+0x50>
 80070f0:	ab03      	add	r3, sp, #12
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	462a      	mov	r2, r5
 80070f6:	4630      	mov	r0, r6
 80070f8:	4b08      	ldr	r3, [pc, #32]	; (800711c <_vfiprintf_r+0x258>)
 80070fa:	a904      	add	r1, sp, #16
 80070fc:	f7fe fa5c 	bl	80055b8 <_printf_i>
 8007100:	e7e4      	b.n	80070cc <_vfiprintf_r+0x208>
 8007102:	bf00      	nop
 8007104:	08007cd4 	.word	0x08007cd4
 8007108:	08007cf4 	.word	0x08007cf4
 800710c:	08007cb4 	.word	0x08007cb4
 8007110:	08007ba2 	.word	0x08007ba2
 8007114:	08007bac 	.word	0x08007bac
 8007118:	08005081 	.word	0x08005081
 800711c:	08006e9f 	.word	0x08006e9f
 8007120:	08007ba8 	.word	0x08007ba8

08007124 <__swbuf_r>:
 8007124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007126:	460e      	mov	r6, r1
 8007128:	4614      	mov	r4, r2
 800712a:	4605      	mov	r5, r0
 800712c:	b118      	cbz	r0, 8007136 <__swbuf_r+0x12>
 800712e:	6983      	ldr	r3, [r0, #24]
 8007130:	b90b      	cbnz	r3, 8007136 <__swbuf_r+0x12>
 8007132:	f000 f9e7 	bl	8007504 <__sinit>
 8007136:	4b21      	ldr	r3, [pc, #132]	; (80071bc <__swbuf_r+0x98>)
 8007138:	429c      	cmp	r4, r3
 800713a:	d12b      	bne.n	8007194 <__swbuf_r+0x70>
 800713c:	686c      	ldr	r4, [r5, #4]
 800713e:	69a3      	ldr	r3, [r4, #24]
 8007140:	60a3      	str	r3, [r4, #8]
 8007142:	89a3      	ldrh	r3, [r4, #12]
 8007144:	071a      	lsls	r2, r3, #28
 8007146:	d52f      	bpl.n	80071a8 <__swbuf_r+0x84>
 8007148:	6923      	ldr	r3, [r4, #16]
 800714a:	b36b      	cbz	r3, 80071a8 <__swbuf_r+0x84>
 800714c:	6923      	ldr	r3, [r4, #16]
 800714e:	6820      	ldr	r0, [r4, #0]
 8007150:	b2f6      	uxtb	r6, r6
 8007152:	1ac0      	subs	r0, r0, r3
 8007154:	6963      	ldr	r3, [r4, #20]
 8007156:	4637      	mov	r7, r6
 8007158:	4283      	cmp	r3, r0
 800715a:	dc04      	bgt.n	8007166 <__swbuf_r+0x42>
 800715c:	4621      	mov	r1, r4
 800715e:	4628      	mov	r0, r5
 8007160:	f000 f93c 	bl	80073dc <_fflush_r>
 8007164:	bb30      	cbnz	r0, 80071b4 <__swbuf_r+0x90>
 8007166:	68a3      	ldr	r3, [r4, #8]
 8007168:	3001      	adds	r0, #1
 800716a:	3b01      	subs	r3, #1
 800716c:	60a3      	str	r3, [r4, #8]
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	6022      	str	r2, [r4, #0]
 8007174:	701e      	strb	r6, [r3, #0]
 8007176:	6963      	ldr	r3, [r4, #20]
 8007178:	4283      	cmp	r3, r0
 800717a:	d004      	beq.n	8007186 <__swbuf_r+0x62>
 800717c:	89a3      	ldrh	r3, [r4, #12]
 800717e:	07db      	lsls	r3, r3, #31
 8007180:	d506      	bpl.n	8007190 <__swbuf_r+0x6c>
 8007182:	2e0a      	cmp	r6, #10
 8007184:	d104      	bne.n	8007190 <__swbuf_r+0x6c>
 8007186:	4621      	mov	r1, r4
 8007188:	4628      	mov	r0, r5
 800718a:	f000 f927 	bl	80073dc <_fflush_r>
 800718e:	b988      	cbnz	r0, 80071b4 <__swbuf_r+0x90>
 8007190:	4638      	mov	r0, r7
 8007192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007194:	4b0a      	ldr	r3, [pc, #40]	; (80071c0 <__swbuf_r+0x9c>)
 8007196:	429c      	cmp	r4, r3
 8007198:	d101      	bne.n	800719e <__swbuf_r+0x7a>
 800719a:	68ac      	ldr	r4, [r5, #8]
 800719c:	e7cf      	b.n	800713e <__swbuf_r+0x1a>
 800719e:	4b09      	ldr	r3, [pc, #36]	; (80071c4 <__swbuf_r+0xa0>)
 80071a0:	429c      	cmp	r4, r3
 80071a2:	bf08      	it	eq
 80071a4:	68ec      	ldreq	r4, [r5, #12]
 80071a6:	e7ca      	b.n	800713e <__swbuf_r+0x1a>
 80071a8:	4621      	mov	r1, r4
 80071aa:	4628      	mov	r0, r5
 80071ac:	f000 f81a 	bl	80071e4 <__swsetup_r>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d0cb      	beq.n	800714c <__swbuf_r+0x28>
 80071b4:	f04f 37ff 	mov.w	r7, #4294967295
 80071b8:	e7ea      	b.n	8007190 <__swbuf_r+0x6c>
 80071ba:	bf00      	nop
 80071bc:	08007cd4 	.word	0x08007cd4
 80071c0:	08007cf4 	.word	0x08007cf4
 80071c4:	08007cb4 	.word	0x08007cb4

080071c8 <__ascii_wctomb>:
 80071c8:	4603      	mov	r3, r0
 80071ca:	4608      	mov	r0, r1
 80071cc:	b141      	cbz	r1, 80071e0 <__ascii_wctomb+0x18>
 80071ce:	2aff      	cmp	r2, #255	; 0xff
 80071d0:	d904      	bls.n	80071dc <__ascii_wctomb+0x14>
 80071d2:	228a      	movs	r2, #138	; 0x8a
 80071d4:	f04f 30ff 	mov.w	r0, #4294967295
 80071d8:	601a      	str	r2, [r3, #0]
 80071da:	4770      	bx	lr
 80071dc:	2001      	movs	r0, #1
 80071de:	700a      	strb	r2, [r1, #0]
 80071e0:	4770      	bx	lr
	...

080071e4 <__swsetup_r>:
 80071e4:	4b32      	ldr	r3, [pc, #200]	; (80072b0 <__swsetup_r+0xcc>)
 80071e6:	b570      	push	{r4, r5, r6, lr}
 80071e8:	681d      	ldr	r5, [r3, #0]
 80071ea:	4606      	mov	r6, r0
 80071ec:	460c      	mov	r4, r1
 80071ee:	b125      	cbz	r5, 80071fa <__swsetup_r+0x16>
 80071f0:	69ab      	ldr	r3, [r5, #24]
 80071f2:	b913      	cbnz	r3, 80071fa <__swsetup_r+0x16>
 80071f4:	4628      	mov	r0, r5
 80071f6:	f000 f985 	bl	8007504 <__sinit>
 80071fa:	4b2e      	ldr	r3, [pc, #184]	; (80072b4 <__swsetup_r+0xd0>)
 80071fc:	429c      	cmp	r4, r3
 80071fe:	d10f      	bne.n	8007220 <__swsetup_r+0x3c>
 8007200:	686c      	ldr	r4, [r5, #4]
 8007202:	89a3      	ldrh	r3, [r4, #12]
 8007204:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007208:	0719      	lsls	r1, r3, #28
 800720a:	d42c      	bmi.n	8007266 <__swsetup_r+0x82>
 800720c:	06dd      	lsls	r5, r3, #27
 800720e:	d411      	bmi.n	8007234 <__swsetup_r+0x50>
 8007210:	2309      	movs	r3, #9
 8007212:	6033      	str	r3, [r6, #0]
 8007214:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007218:	f04f 30ff 	mov.w	r0, #4294967295
 800721c:	81a3      	strh	r3, [r4, #12]
 800721e:	e03e      	b.n	800729e <__swsetup_r+0xba>
 8007220:	4b25      	ldr	r3, [pc, #148]	; (80072b8 <__swsetup_r+0xd4>)
 8007222:	429c      	cmp	r4, r3
 8007224:	d101      	bne.n	800722a <__swsetup_r+0x46>
 8007226:	68ac      	ldr	r4, [r5, #8]
 8007228:	e7eb      	b.n	8007202 <__swsetup_r+0x1e>
 800722a:	4b24      	ldr	r3, [pc, #144]	; (80072bc <__swsetup_r+0xd8>)
 800722c:	429c      	cmp	r4, r3
 800722e:	bf08      	it	eq
 8007230:	68ec      	ldreq	r4, [r5, #12]
 8007232:	e7e6      	b.n	8007202 <__swsetup_r+0x1e>
 8007234:	0758      	lsls	r0, r3, #29
 8007236:	d512      	bpl.n	800725e <__swsetup_r+0x7a>
 8007238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800723a:	b141      	cbz	r1, 800724e <__swsetup_r+0x6a>
 800723c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007240:	4299      	cmp	r1, r3
 8007242:	d002      	beq.n	800724a <__swsetup_r+0x66>
 8007244:	4630      	mov	r0, r6
 8007246:	f7ff fd11 	bl	8006c6c <_free_r>
 800724a:	2300      	movs	r3, #0
 800724c:	6363      	str	r3, [r4, #52]	; 0x34
 800724e:	89a3      	ldrh	r3, [r4, #12]
 8007250:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007254:	81a3      	strh	r3, [r4, #12]
 8007256:	2300      	movs	r3, #0
 8007258:	6063      	str	r3, [r4, #4]
 800725a:	6923      	ldr	r3, [r4, #16]
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	89a3      	ldrh	r3, [r4, #12]
 8007260:	f043 0308 	orr.w	r3, r3, #8
 8007264:	81a3      	strh	r3, [r4, #12]
 8007266:	6923      	ldr	r3, [r4, #16]
 8007268:	b94b      	cbnz	r3, 800727e <__swsetup_r+0x9a>
 800726a:	89a3      	ldrh	r3, [r4, #12]
 800726c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007274:	d003      	beq.n	800727e <__swsetup_r+0x9a>
 8007276:	4621      	mov	r1, r4
 8007278:	4630      	mov	r0, r6
 800727a:	f000 fa07 	bl	800768c <__smakebuf_r>
 800727e:	89a0      	ldrh	r0, [r4, #12]
 8007280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007284:	f010 0301 	ands.w	r3, r0, #1
 8007288:	d00a      	beq.n	80072a0 <__swsetup_r+0xbc>
 800728a:	2300      	movs	r3, #0
 800728c:	60a3      	str	r3, [r4, #8]
 800728e:	6963      	ldr	r3, [r4, #20]
 8007290:	425b      	negs	r3, r3
 8007292:	61a3      	str	r3, [r4, #24]
 8007294:	6923      	ldr	r3, [r4, #16]
 8007296:	b943      	cbnz	r3, 80072aa <__swsetup_r+0xc6>
 8007298:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800729c:	d1ba      	bne.n	8007214 <__swsetup_r+0x30>
 800729e:	bd70      	pop	{r4, r5, r6, pc}
 80072a0:	0781      	lsls	r1, r0, #30
 80072a2:	bf58      	it	pl
 80072a4:	6963      	ldrpl	r3, [r4, #20]
 80072a6:	60a3      	str	r3, [r4, #8]
 80072a8:	e7f4      	b.n	8007294 <__swsetup_r+0xb0>
 80072aa:	2000      	movs	r0, #0
 80072ac:	e7f7      	b.n	800729e <__swsetup_r+0xba>
 80072ae:	bf00      	nop
 80072b0:	20000010 	.word	0x20000010
 80072b4:	08007cd4 	.word	0x08007cd4
 80072b8:	08007cf4 	.word	0x08007cf4
 80072bc:	08007cb4 	.word	0x08007cb4

080072c0 <abort>:
 80072c0:	2006      	movs	r0, #6
 80072c2:	b508      	push	{r3, lr}
 80072c4:	f000 fa4a 	bl	800775c <raise>
 80072c8:	2001      	movs	r0, #1
 80072ca:	f7fa fa40 	bl	800174e <_exit>
	...

080072d0 <__sflush_r>:
 80072d0:	898a      	ldrh	r2, [r1, #12]
 80072d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d6:	4605      	mov	r5, r0
 80072d8:	0710      	lsls	r0, r2, #28
 80072da:	460c      	mov	r4, r1
 80072dc:	d458      	bmi.n	8007390 <__sflush_r+0xc0>
 80072de:	684b      	ldr	r3, [r1, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	dc05      	bgt.n	80072f0 <__sflush_r+0x20>
 80072e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	dc02      	bgt.n	80072f0 <__sflush_r+0x20>
 80072ea:	2000      	movs	r0, #0
 80072ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072f2:	2e00      	cmp	r6, #0
 80072f4:	d0f9      	beq.n	80072ea <__sflush_r+0x1a>
 80072f6:	2300      	movs	r3, #0
 80072f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072fc:	682f      	ldr	r7, [r5, #0]
 80072fe:	602b      	str	r3, [r5, #0]
 8007300:	d032      	beq.n	8007368 <__sflush_r+0x98>
 8007302:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	075a      	lsls	r2, r3, #29
 8007308:	d505      	bpl.n	8007316 <__sflush_r+0x46>
 800730a:	6863      	ldr	r3, [r4, #4]
 800730c:	1ac0      	subs	r0, r0, r3
 800730e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007310:	b10b      	cbz	r3, 8007316 <__sflush_r+0x46>
 8007312:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007314:	1ac0      	subs	r0, r0, r3
 8007316:	2300      	movs	r3, #0
 8007318:	4602      	mov	r2, r0
 800731a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800731c:	4628      	mov	r0, r5
 800731e:	6a21      	ldr	r1, [r4, #32]
 8007320:	47b0      	blx	r6
 8007322:	1c43      	adds	r3, r0, #1
 8007324:	89a3      	ldrh	r3, [r4, #12]
 8007326:	d106      	bne.n	8007336 <__sflush_r+0x66>
 8007328:	6829      	ldr	r1, [r5, #0]
 800732a:	291d      	cmp	r1, #29
 800732c:	d82c      	bhi.n	8007388 <__sflush_r+0xb8>
 800732e:	4a2a      	ldr	r2, [pc, #168]	; (80073d8 <__sflush_r+0x108>)
 8007330:	40ca      	lsrs	r2, r1
 8007332:	07d6      	lsls	r6, r2, #31
 8007334:	d528      	bpl.n	8007388 <__sflush_r+0xb8>
 8007336:	2200      	movs	r2, #0
 8007338:	6062      	str	r2, [r4, #4]
 800733a:	6922      	ldr	r2, [r4, #16]
 800733c:	04d9      	lsls	r1, r3, #19
 800733e:	6022      	str	r2, [r4, #0]
 8007340:	d504      	bpl.n	800734c <__sflush_r+0x7c>
 8007342:	1c42      	adds	r2, r0, #1
 8007344:	d101      	bne.n	800734a <__sflush_r+0x7a>
 8007346:	682b      	ldr	r3, [r5, #0]
 8007348:	b903      	cbnz	r3, 800734c <__sflush_r+0x7c>
 800734a:	6560      	str	r0, [r4, #84]	; 0x54
 800734c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800734e:	602f      	str	r7, [r5, #0]
 8007350:	2900      	cmp	r1, #0
 8007352:	d0ca      	beq.n	80072ea <__sflush_r+0x1a>
 8007354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007358:	4299      	cmp	r1, r3
 800735a:	d002      	beq.n	8007362 <__sflush_r+0x92>
 800735c:	4628      	mov	r0, r5
 800735e:	f7ff fc85 	bl	8006c6c <_free_r>
 8007362:	2000      	movs	r0, #0
 8007364:	6360      	str	r0, [r4, #52]	; 0x34
 8007366:	e7c1      	b.n	80072ec <__sflush_r+0x1c>
 8007368:	6a21      	ldr	r1, [r4, #32]
 800736a:	2301      	movs	r3, #1
 800736c:	4628      	mov	r0, r5
 800736e:	47b0      	blx	r6
 8007370:	1c41      	adds	r1, r0, #1
 8007372:	d1c7      	bne.n	8007304 <__sflush_r+0x34>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0c4      	beq.n	8007304 <__sflush_r+0x34>
 800737a:	2b1d      	cmp	r3, #29
 800737c:	d001      	beq.n	8007382 <__sflush_r+0xb2>
 800737e:	2b16      	cmp	r3, #22
 8007380:	d101      	bne.n	8007386 <__sflush_r+0xb6>
 8007382:	602f      	str	r7, [r5, #0]
 8007384:	e7b1      	b.n	80072ea <__sflush_r+0x1a>
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800738c:	81a3      	strh	r3, [r4, #12]
 800738e:	e7ad      	b.n	80072ec <__sflush_r+0x1c>
 8007390:	690f      	ldr	r7, [r1, #16]
 8007392:	2f00      	cmp	r7, #0
 8007394:	d0a9      	beq.n	80072ea <__sflush_r+0x1a>
 8007396:	0793      	lsls	r3, r2, #30
 8007398:	bf18      	it	ne
 800739a:	2300      	movne	r3, #0
 800739c:	680e      	ldr	r6, [r1, #0]
 800739e:	bf08      	it	eq
 80073a0:	694b      	ldreq	r3, [r1, #20]
 80073a2:	eba6 0807 	sub.w	r8, r6, r7
 80073a6:	600f      	str	r7, [r1, #0]
 80073a8:	608b      	str	r3, [r1, #8]
 80073aa:	f1b8 0f00 	cmp.w	r8, #0
 80073ae:	dd9c      	ble.n	80072ea <__sflush_r+0x1a>
 80073b0:	4643      	mov	r3, r8
 80073b2:	463a      	mov	r2, r7
 80073b4:	4628      	mov	r0, r5
 80073b6:	6a21      	ldr	r1, [r4, #32]
 80073b8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073ba:	47b0      	blx	r6
 80073bc:	2800      	cmp	r0, #0
 80073be:	dc06      	bgt.n	80073ce <__sflush_r+0xfe>
 80073c0:	89a3      	ldrh	r3, [r4, #12]
 80073c2:	f04f 30ff 	mov.w	r0, #4294967295
 80073c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073ca:	81a3      	strh	r3, [r4, #12]
 80073cc:	e78e      	b.n	80072ec <__sflush_r+0x1c>
 80073ce:	4407      	add	r7, r0
 80073d0:	eba8 0800 	sub.w	r8, r8, r0
 80073d4:	e7e9      	b.n	80073aa <__sflush_r+0xda>
 80073d6:	bf00      	nop
 80073d8:	20400001 	.word	0x20400001

080073dc <_fflush_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	690b      	ldr	r3, [r1, #16]
 80073e0:	4605      	mov	r5, r0
 80073e2:	460c      	mov	r4, r1
 80073e4:	b913      	cbnz	r3, 80073ec <_fflush_r+0x10>
 80073e6:	2500      	movs	r5, #0
 80073e8:	4628      	mov	r0, r5
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	b118      	cbz	r0, 80073f6 <_fflush_r+0x1a>
 80073ee:	6983      	ldr	r3, [r0, #24]
 80073f0:	b90b      	cbnz	r3, 80073f6 <_fflush_r+0x1a>
 80073f2:	f000 f887 	bl	8007504 <__sinit>
 80073f6:	4b14      	ldr	r3, [pc, #80]	; (8007448 <_fflush_r+0x6c>)
 80073f8:	429c      	cmp	r4, r3
 80073fa:	d11b      	bne.n	8007434 <_fflush_r+0x58>
 80073fc:	686c      	ldr	r4, [r5, #4]
 80073fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d0ef      	beq.n	80073e6 <_fflush_r+0xa>
 8007406:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007408:	07d0      	lsls	r0, r2, #31
 800740a:	d404      	bmi.n	8007416 <_fflush_r+0x3a>
 800740c:	0599      	lsls	r1, r3, #22
 800740e:	d402      	bmi.n	8007416 <_fflush_r+0x3a>
 8007410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007412:	f000 f915 	bl	8007640 <__retarget_lock_acquire_recursive>
 8007416:	4628      	mov	r0, r5
 8007418:	4621      	mov	r1, r4
 800741a:	f7ff ff59 	bl	80072d0 <__sflush_r>
 800741e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007420:	4605      	mov	r5, r0
 8007422:	07da      	lsls	r2, r3, #31
 8007424:	d4e0      	bmi.n	80073e8 <_fflush_r+0xc>
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	059b      	lsls	r3, r3, #22
 800742a:	d4dd      	bmi.n	80073e8 <_fflush_r+0xc>
 800742c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800742e:	f000 f908 	bl	8007642 <__retarget_lock_release_recursive>
 8007432:	e7d9      	b.n	80073e8 <_fflush_r+0xc>
 8007434:	4b05      	ldr	r3, [pc, #20]	; (800744c <_fflush_r+0x70>)
 8007436:	429c      	cmp	r4, r3
 8007438:	d101      	bne.n	800743e <_fflush_r+0x62>
 800743a:	68ac      	ldr	r4, [r5, #8]
 800743c:	e7df      	b.n	80073fe <_fflush_r+0x22>
 800743e:	4b04      	ldr	r3, [pc, #16]	; (8007450 <_fflush_r+0x74>)
 8007440:	429c      	cmp	r4, r3
 8007442:	bf08      	it	eq
 8007444:	68ec      	ldreq	r4, [r5, #12]
 8007446:	e7da      	b.n	80073fe <_fflush_r+0x22>
 8007448:	08007cd4 	.word	0x08007cd4
 800744c:	08007cf4 	.word	0x08007cf4
 8007450:	08007cb4 	.word	0x08007cb4

08007454 <std>:
 8007454:	2300      	movs	r3, #0
 8007456:	b510      	push	{r4, lr}
 8007458:	4604      	mov	r4, r0
 800745a:	e9c0 3300 	strd	r3, r3, [r0]
 800745e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007462:	6083      	str	r3, [r0, #8]
 8007464:	8181      	strh	r1, [r0, #12]
 8007466:	6643      	str	r3, [r0, #100]	; 0x64
 8007468:	81c2      	strh	r2, [r0, #14]
 800746a:	6183      	str	r3, [r0, #24]
 800746c:	4619      	mov	r1, r3
 800746e:	2208      	movs	r2, #8
 8007470:	305c      	adds	r0, #92	; 0x5c
 8007472:	f7fd fd5f 	bl	8004f34 <memset>
 8007476:	4b05      	ldr	r3, [pc, #20]	; (800748c <std+0x38>)
 8007478:	6224      	str	r4, [r4, #32]
 800747a:	6263      	str	r3, [r4, #36]	; 0x24
 800747c:	4b04      	ldr	r3, [pc, #16]	; (8007490 <std+0x3c>)
 800747e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007480:	4b04      	ldr	r3, [pc, #16]	; (8007494 <std+0x40>)
 8007482:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007484:	4b04      	ldr	r3, [pc, #16]	; (8007498 <std+0x44>)
 8007486:	6323      	str	r3, [r4, #48]	; 0x30
 8007488:	bd10      	pop	{r4, pc}
 800748a:	bf00      	nop
 800748c:	08007795 	.word	0x08007795
 8007490:	080077b7 	.word	0x080077b7
 8007494:	080077ef 	.word	0x080077ef
 8007498:	08007813 	.word	0x08007813

0800749c <_cleanup_r>:
 800749c:	4901      	ldr	r1, [pc, #4]	; (80074a4 <_cleanup_r+0x8>)
 800749e:	f000 b8af 	b.w	8007600 <_fwalk_reent>
 80074a2:	bf00      	nop
 80074a4:	080073dd 	.word	0x080073dd

080074a8 <__sfmoreglue>:
 80074a8:	b570      	push	{r4, r5, r6, lr}
 80074aa:	2568      	movs	r5, #104	; 0x68
 80074ac:	1e4a      	subs	r2, r1, #1
 80074ae:	4355      	muls	r5, r2
 80074b0:	460e      	mov	r6, r1
 80074b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80074b6:	f7ff fc25 	bl	8006d04 <_malloc_r>
 80074ba:	4604      	mov	r4, r0
 80074bc:	b140      	cbz	r0, 80074d0 <__sfmoreglue+0x28>
 80074be:	2100      	movs	r1, #0
 80074c0:	e9c0 1600 	strd	r1, r6, [r0]
 80074c4:	300c      	adds	r0, #12
 80074c6:	60a0      	str	r0, [r4, #8]
 80074c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80074cc:	f7fd fd32 	bl	8004f34 <memset>
 80074d0:	4620      	mov	r0, r4
 80074d2:	bd70      	pop	{r4, r5, r6, pc}

080074d4 <__sfp_lock_acquire>:
 80074d4:	4801      	ldr	r0, [pc, #4]	; (80074dc <__sfp_lock_acquire+0x8>)
 80074d6:	f000 b8b3 	b.w	8007640 <__retarget_lock_acquire_recursive>
 80074da:	bf00      	nop
 80074dc:	2000073c 	.word	0x2000073c

080074e0 <__sfp_lock_release>:
 80074e0:	4801      	ldr	r0, [pc, #4]	; (80074e8 <__sfp_lock_release+0x8>)
 80074e2:	f000 b8ae 	b.w	8007642 <__retarget_lock_release_recursive>
 80074e6:	bf00      	nop
 80074e8:	2000073c 	.word	0x2000073c

080074ec <__sinit_lock_acquire>:
 80074ec:	4801      	ldr	r0, [pc, #4]	; (80074f4 <__sinit_lock_acquire+0x8>)
 80074ee:	f000 b8a7 	b.w	8007640 <__retarget_lock_acquire_recursive>
 80074f2:	bf00      	nop
 80074f4:	20000737 	.word	0x20000737

080074f8 <__sinit_lock_release>:
 80074f8:	4801      	ldr	r0, [pc, #4]	; (8007500 <__sinit_lock_release+0x8>)
 80074fa:	f000 b8a2 	b.w	8007642 <__retarget_lock_release_recursive>
 80074fe:	bf00      	nop
 8007500:	20000737 	.word	0x20000737

08007504 <__sinit>:
 8007504:	b510      	push	{r4, lr}
 8007506:	4604      	mov	r4, r0
 8007508:	f7ff fff0 	bl	80074ec <__sinit_lock_acquire>
 800750c:	69a3      	ldr	r3, [r4, #24]
 800750e:	b11b      	cbz	r3, 8007518 <__sinit+0x14>
 8007510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007514:	f7ff bff0 	b.w	80074f8 <__sinit_lock_release>
 8007518:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800751c:	6523      	str	r3, [r4, #80]	; 0x50
 800751e:	4b13      	ldr	r3, [pc, #76]	; (800756c <__sinit+0x68>)
 8007520:	4a13      	ldr	r2, [pc, #76]	; (8007570 <__sinit+0x6c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	62a2      	str	r2, [r4, #40]	; 0x28
 8007526:	42a3      	cmp	r3, r4
 8007528:	bf08      	it	eq
 800752a:	2301      	moveq	r3, #1
 800752c:	4620      	mov	r0, r4
 800752e:	bf08      	it	eq
 8007530:	61a3      	streq	r3, [r4, #24]
 8007532:	f000 f81f 	bl	8007574 <__sfp>
 8007536:	6060      	str	r0, [r4, #4]
 8007538:	4620      	mov	r0, r4
 800753a:	f000 f81b 	bl	8007574 <__sfp>
 800753e:	60a0      	str	r0, [r4, #8]
 8007540:	4620      	mov	r0, r4
 8007542:	f000 f817 	bl	8007574 <__sfp>
 8007546:	2200      	movs	r2, #0
 8007548:	2104      	movs	r1, #4
 800754a:	60e0      	str	r0, [r4, #12]
 800754c:	6860      	ldr	r0, [r4, #4]
 800754e:	f7ff ff81 	bl	8007454 <std>
 8007552:	2201      	movs	r2, #1
 8007554:	2109      	movs	r1, #9
 8007556:	68a0      	ldr	r0, [r4, #8]
 8007558:	f7ff ff7c 	bl	8007454 <std>
 800755c:	2202      	movs	r2, #2
 800755e:	2112      	movs	r1, #18
 8007560:	68e0      	ldr	r0, [r4, #12]
 8007562:	f7ff ff77 	bl	8007454 <std>
 8007566:	2301      	movs	r3, #1
 8007568:	61a3      	str	r3, [r4, #24]
 800756a:	e7d1      	b.n	8007510 <__sinit+0xc>
 800756c:	08007934 	.word	0x08007934
 8007570:	0800749d 	.word	0x0800749d

08007574 <__sfp>:
 8007574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007576:	4607      	mov	r7, r0
 8007578:	f7ff ffac 	bl	80074d4 <__sfp_lock_acquire>
 800757c:	4b1e      	ldr	r3, [pc, #120]	; (80075f8 <__sfp+0x84>)
 800757e:	681e      	ldr	r6, [r3, #0]
 8007580:	69b3      	ldr	r3, [r6, #24]
 8007582:	b913      	cbnz	r3, 800758a <__sfp+0x16>
 8007584:	4630      	mov	r0, r6
 8007586:	f7ff ffbd 	bl	8007504 <__sinit>
 800758a:	3648      	adds	r6, #72	; 0x48
 800758c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007590:	3b01      	subs	r3, #1
 8007592:	d503      	bpl.n	800759c <__sfp+0x28>
 8007594:	6833      	ldr	r3, [r6, #0]
 8007596:	b30b      	cbz	r3, 80075dc <__sfp+0x68>
 8007598:	6836      	ldr	r6, [r6, #0]
 800759a:	e7f7      	b.n	800758c <__sfp+0x18>
 800759c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80075a0:	b9d5      	cbnz	r5, 80075d8 <__sfp+0x64>
 80075a2:	4b16      	ldr	r3, [pc, #88]	; (80075fc <__sfp+0x88>)
 80075a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80075a8:	60e3      	str	r3, [r4, #12]
 80075aa:	6665      	str	r5, [r4, #100]	; 0x64
 80075ac:	f000 f847 	bl	800763e <__retarget_lock_init_recursive>
 80075b0:	f7ff ff96 	bl	80074e0 <__sfp_lock_release>
 80075b4:	2208      	movs	r2, #8
 80075b6:	4629      	mov	r1, r5
 80075b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80075bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80075c0:	6025      	str	r5, [r4, #0]
 80075c2:	61a5      	str	r5, [r4, #24]
 80075c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80075c8:	f7fd fcb4 	bl	8004f34 <memset>
 80075cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80075d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80075d4:	4620      	mov	r0, r4
 80075d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075d8:	3468      	adds	r4, #104	; 0x68
 80075da:	e7d9      	b.n	8007590 <__sfp+0x1c>
 80075dc:	2104      	movs	r1, #4
 80075de:	4638      	mov	r0, r7
 80075e0:	f7ff ff62 	bl	80074a8 <__sfmoreglue>
 80075e4:	4604      	mov	r4, r0
 80075e6:	6030      	str	r0, [r6, #0]
 80075e8:	2800      	cmp	r0, #0
 80075ea:	d1d5      	bne.n	8007598 <__sfp+0x24>
 80075ec:	f7ff ff78 	bl	80074e0 <__sfp_lock_release>
 80075f0:	230c      	movs	r3, #12
 80075f2:	603b      	str	r3, [r7, #0]
 80075f4:	e7ee      	b.n	80075d4 <__sfp+0x60>
 80075f6:	bf00      	nop
 80075f8:	08007934 	.word	0x08007934
 80075fc:	ffff0001 	.word	0xffff0001

08007600 <_fwalk_reent>:
 8007600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007604:	4606      	mov	r6, r0
 8007606:	4688      	mov	r8, r1
 8007608:	2700      	movs	r7, #0
 800760a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800760e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007612:	f1b9 0901 	subs.w	r9, r9, #1
 8007616:	d505      	bpl.n	8007624 <_fwalk_reent+0x24>
 8007618:	6824      	ldr	r4, [r4, #0]
 800761a:	2c00      	cmp	r4, #0
 800761c:	d1f7      	bne.n	800760e <_fwalk_reent+0xe>
 800761e:	4638      	mov	r0, r7
 8007620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007624:	89ab      	ldrh	r3, [r5, #12]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d907      	bls.n	800763a <_fwalk_reent+0x3a>
 800762a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800762e:	3301      	adds	r3, #1
 8007630:	d003      	beq.n	800763a <_fwalk_reent+0x3a>
 8007632:	4629      	mov	r1, r5
 8007634:	4630      	mov	r0, r6
 8007636:	47c0      	blx	r8
 8007638:	4307      	orrs	r7, r0
 800763a:	3568      	adds	r5, #104	; 0x68
 800763c:	e7e9      	b.n	8007612 <_fwalk_reent+0x12>

0800763e <__retarget_lock_init_recursive>:
 800763e:	4770      	bx	lr

08007640 <__retarget_lock_acquire_recursive>:
 8007640:	4770      	bx	lr

08007642 <__retarget_lock_release_recursive>:
 8007642:	4770      	bx	lr

08007644 <__swhatbuf_r>:
 8007644:	b570      	push	{r4, r5, r6, lr}
 8007646:	460e      	mov	r6, r1
 8007648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800764c:	4614      	mov	r4, r2
 800764e:	2900      	cmp	r1, #0
 8007650:	461d      	mov	r5, r3
 8007652:	b096      	sub	sp, #88	; 0x58
 8007654:	da07      	bge.n	8007666 <__swhatbuf_r+0x22>
 8007656:	2300      	movs	r3, #0
 8007658:	602b      	str	r3, [r5, #0]
 800765a:	89b3      	ldrh	r3, [r6, #12]
 800765c:	061a      	lsls	r2, r3, #24
 800765e:	d410      	bmi.n	8007682 <__swhatbuf_r+0x3e>
 8007660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007664:	e00e      	b.n	8007684 <__swhatbuf_r+0x40>
 8007666:	466a      	mov	r2, sp
 8007668:	f000 f8fa 	bl	8007860 <_fstat_r>
 800766c:	2800      	cmp	r0, #0
 800766e:	dbf2      	blt.n	8007656 <__swhatbuf_r+0x12>
 8007670:	9a01      	ldr	r2, [sp, #4]
 8007672:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007676:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800767a:	425a      	negs	r2, r3
 800767c:	415a      	adcs	r2, r3
 800767e:	602a      	str	r2, [r5, #0]
 8007680:	e7ee      	b.n	8007660 <__swhatbuf_r+0x1c>
 8007682:	2340      	movs	r3, #64	; 0x40
 8007684:	2000      	movs	r0, #0
 8007686:	6023      	str	r3, [r4, #0]
 8007688:	b016      	add	sp, #88	; 0x58
 800768a:	bd70      	pop	{r4, r5, r6, pc}

0800768c <__smakebuf_r>:
 800768c:	898b      	ldrh	r3, [r1, #12]
 800768e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007690:	079d      	lsls	r5, r3, #30
 8007692:	4606      	mov	r6, r0
 8007694:	460c      	mov	r4, r1
 8007696:	d507      	bpl.n	80076a8 <__smakebuf_r+0x1c>
 8007698:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800769c:	6023      	str	r3, [r4, #0]
 800769e:	6123      	str	r3, [r4, #16]
 80076a0:	2301      	movs	r3, #1
 80076a2:	6163      	str	r3, [r4, #20]
 80076a4:	b002      	add	sp, #8
 80076a6:	bd70      	pop	{r4, r5, r6, pc}
 80076a8:	466a      	mov	r2, sp
 80076aa:	ab01      	add	r3, sp, #4
 80076ac:	f7ff ffca 	bl	8007644 <__swhatbuf_r>
 80076b0:	9900      	ldr	r1, [sp, #0]
 80076b2:	4605      	mov	r5, r0
 80076b4:	4630      	mov	r0, r6
 80076b6:	f7ff fb25 	bl	8006d04 <_malloc_r>
 80076ba:	b948      	cbnz	r0, 80076d0 <__smakebuf_r+0x44>
 80076bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076c0:	059a      	lsls	r2, r3, #22
 80076c2:	d4ef      	bmi.n	80076a4 <__smakebuf_r+0x18>
 80076c4:	f023 0303 	bic.w	r3, r3, #3
 80076c8:	f043 0302 	orr.w	r3, r3, #2
 80076cc:	81a3      	strh	r3, [r4, #12]
 80076ce:	e7e3      	b.n	8007698 <__smakebuf_r+0xc>
 80076d0:	4b0d      	ldr	r3, [pc, #52]	; (8007708 <__smakebuf_r+0x7c>)
 80076d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80076d4:	89a3      	ldrh	r3, [r4, #12]
 80076d6:	6020      	str	r0, [r4, #0]
 80076d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076dc:	81a3      	strh	r3, [r4, #12]
 80076de:	9b00      	ldr	r3, [sp, #0]
 80076e0:	6120      	str	r0, [r4, #16]
 80076e2:	6163      	str	r3, [r4, #20]
 80076e4:	9b01      	ldr	r3, [sp, #4]
 80076e6:	b15b      	cbz	r3, 8007700 <__smakebuf_r+0x74>
 80076e8:	4630      	mov	r0, r6
 80076ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076ee:	f000 f8c9 	bl	8007884 <_isatty_r>
 80076f2:	b128      	cbz	r0, 8007700 <__smakebuf_r+0x74>
 80076f4:	89a3      	ldrh	r3, [r4, #12]
 80076f6:	f023 0303 	bic.w	r3, r3, #3
 80076fa:	f043 0301 	orr.w	r3, r3, #1
 80076fe:	81a3      	strh	r3, [r4, #12]
 8007700:	89a0      	ldrh	r0, [r4, #12]
 8007702:	4305      	orrs	r5, r0
 8007704:	81a5      	strh	r5, [r4, #12]
 8007706:	e7cd      	b.n	80076a4 <__smakebuf_r+0x18>
 8007708:	0800749d 	.word	0x0800749d

0800770c <_raise_r>:
 800770c:	291f      	cmp	r1, #31
 800770e:	b538      	push	{r3, r4, r5, lr}
 8007710:	4604      	mov	r4, r0
 8007712:	460d      	mov	r5, r1
 8007714:	d904      	bls.n	8007720 <_raise_r+0x14>
 8007716:	2316      	movs	r3, #22
 8007718:	6003      	str	r3, [r0, #0]
 800771a:	f04f 30ff 	mov.w	r0, #4294967295
 800771e:	bd38      	pop	{r3, r4, r5, pc}
 8007720:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007722:	b112      	cbz	r2, 800772a <_raise_r+0x1e>
 8007724:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007728:	b94b      	cbnz	r3, 800773e <_raise_r+0x32>
 800772a:	4620      	mov	r0, r4
 800772c:	f000 f830 	bl	8007790 <_getpid_r>
 8007730:	462a      	mov	r2, r5
 8007732:	4601      	mov	r1, r0
 8007734:	4620      	mov	r0, r4
 8007736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800773a:	f000 b817 	b.w	800776c <_kill_r>
 800773e:	2b01      	cmp	r3, #1
 8007740:	d00a      	beq.n	8007758 <_raise_r+0x4c>
 8007742:	1c59      	adds	r1, r3, #1
 8007744:	d103      	bne.n	800774e <_raise_r+0x42>
 8007746:	2316      	movs	r3, #22
 8007748:	6003      	str	r3, [r0, #0]
 800774a:	2001      	movs	r0, #1
 800774c:	e7e7      	b.n	800771e <_raise_r+0x12>
 800774e:	2400      	movs	r4, #0
 8007750:	4628      	mov	r0, r5
 8007752:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007756:	4798      	blx	r3
 8007758:	2000      	movs	r0, #0
 800775a:	e7e0      	b.n	800771e <_raise_r+0x12>

0800775c <raise>:
 800775c:	4b02      	ldr	r3, [pc, #8]	; (8007768 <raise+0xc>)
 800775e:	4601      	mov	r1, r0
 8007760:	6818      	ldr	r0, [r3, #0]
 8007762:	f7ff bfd3 	b.w	800770c <_raise_r>
 8007766:	bf00      	nop
 8007768:	20000010 	.word	0x20000010

0800776c <_kill_r>:
 800776c:	b538      	push	{r3, r4, r5, lr}
 800776e:	2300      	movs	r3, #0
 8007770:	4d06      	ldr	r5, [pc, #24]	; (800778c <_kill_r+0x20>)
 8007772:	4604      	mov	r4, r0
 8007774:	4608      	mov	r0, r1
 8007776:	4611      	mov	r1, r2
 8007778:	602b      	str	r3, [r5, #0]
 800777a:	f7f9 ffd8 	bl	800172e <_kill>
 800777e:	1c43      	adds	r3, r0, #1
 8007780:	d102      	bne.n	8007788 <_kill_r+0x1c>
 8007782:	682b      	ldr	r3, [r5, #0]
 8007784:	b103      	cbz	r3, 8007788 <_kill_r+0x1c>
 8007786:	6023      	str	r3, [r4, #0]
 8007788:	bd38      	pop	{r3, r4, r5, pc}
 800778a:	bf00      	nop
 800778c:	20000730 	.word	0x20000730

08007790 <_getpid_r>:
 8007790:	f7f9 bfc6 	b.w	8001720 <_getpid>

08007794 <__sread>:
 8007794:	b510      	push	{r4, lr}
 8007796:	460c      	mov	r4, r1
 8007798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800779c:	f000 f894 	bl	80078c8 <_read_r>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	bfab      	itete	ge
 80077a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077a6:	89a3      	ldrhlt	r3, [r4, #12]
 80077a8:	181b      	addge	r3, r3, r0
 80077aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077ae:	bfac      	ite	ge
 80077b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80077b2:	81a3      	strhlt	r3, [r4, #12]
 80077b4:	bd10      	pop	{r4, pc}

080077b6 <__swrite>:
 80077b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077ba:	461f      	mov	r7, r3
 80077bc:	898b      	ldrh	r3, [r1, #12]
 80077be:	4605      	mov	r5, r0
 80077c0:	05db      	lsls	r3, r3, #23
 80077c2:	460c      	mov	r4, r1
 80077c4:	4616      	mov	r6, r2
 80077c6:	d505      	bpl.n	80077d4 <__swrite+0x1e>
 80077c8:	2302      	movs	r3, #2
 80077ca:	2200      	movs	r2, #0
 80077cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077d0:	f000 f868 	bl	80078a4 <_lseek_r>
 80077d4:	89a3      	ldrh	r3, [r4, #12]
 80077d6:	4632      	mov	r2, r6
 80077d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077dc:	81a3      	strh	r3, [r4, #12]
 80077de:	4628      	mov	r0, r5
 80077e0:	463b      	mov	r3, r7
 80077e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077ea:	f000 b817 	b.w	800781c <_write_r>

080077ee <__sseek>:
 80077ee:	b510      	push	{r4, lr}
 80077f0:	460c      	mov	r4, r1
 80077f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077f6:	f000 f855 	bl	80078a4 <_lseek_r>
 80077fa:	1c43      	adds	r3, r0, #1
 80077fc:	89a3      	ldrh	r3, [r4, #12]
 80077fe:	bf15      	itete	ne
 8007800:	6560      	strne	r0, [r4, #84]	; 0x54
 8007802:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007806:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800780a:	81a3      	strheq	r3, [r4, #12]
 800780c:	bf18      	it	ne
 800780e:	81a3      	strhne	r3, [r4, #12]
 8007810:	bd10      	pop	{r4, pc}

08007812 <__sclose>:
 8007812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007816:	f000 b813 	b.w	8007840 <_close_r>
	...

0800781c <_write_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4604      	mov	r4, r0
 8007820:	4608      	mov	r0, r1
 8007822:	4611      	mov	r1, r2
 8007824:	2200      	movs	r2, #0
 8007826:	4d05      	ldr	r5, [pc, #20]	; (800783c <_write_r+0x20>)
 8007828:	602a      	str	r2, [r5, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	f7f9 ffb6 	bl	800179c <_write>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d102      	bne.n	800783a <_write_r+0x1e>
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	b103      	cbz	r3, 800783a <_write_r+0x1e>
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	bd38      	pop	{r3, r4, r5, pc}
 800783c:	20000730 	.word	0x20000730

08007840 <_close_r>:
 8007840:	b538      	push	{r3, r4, r5, lr}
 8007842:	2300      	movs	r3, #0
 8007844:	4d05      	ldr	r5, [pc, #20]	; (800785c <_close_r+0x1c>)
 8007846:	4604      	mov	r4, r0
 8007848:	4608      	mov	r0, r1
 800784a:	602b      	str	r3, [r5, #0]
 800784c:	f7f9 ffc2 	bl	80017d4 <_close>
 8007850:	1c43      	adds	r3, r0, #1
 8007852:	d102      	bne.n	800785a <_close_r+0x1a>
 8007854:	682b      	ldr	r3, [r5, #0]
 8007856:	b103      	cbz	r3, 800785a <_close_r+0x1a>
 8007858:	6023      	str	r3, [r4, #0]
 800785a:	bd38      	pop	{r3, r4, r5, pc}
 800785c:	20000730 	.word	0x20000730

08007860 <_fstat_r>:
 8007860:	b538      	push	{r3, r4, r5, lr}
 8007862:	2300      	movs	r3, #0
 8007864:	4d06      	ldr	r5, [pc, #24]	; (8007880 <_fstat_r+0x20>)
 8007866:	4604      	mov	r4, r0
 8007868:	4608      	mov	r0, r1
 800786a:	4611      	mov	r1, r2
 800786c:	602b      	str	r3, [r5, #0]
 800786e:	f7f9 ffbc 	bl	80017ea <_fstat>
 8007872:	1c43      	adds	r3, r0, #1
 8007874:	d102      	bne.n	800787c <_fstat_r+0x1c>
 8007876:	682b      	ldr	r3, [r5, #0]
 8007878:	b103      	cbz	r3, 800787c <_fstat_r+0x1c>
 800787a:	6023      	str	r3, [r4, #0]
 800787c:	bd38      	pop	{r3, r4, r5, pc}
 800787e:	bf00      	nop
 8007880:	20000730 	.word	0x20000730

08007884 <_isatty_r>:
 8007884:	b538      	push	{r3, r4, r5, lr}
 8007886:	2300      	movs	r3, #0
 8007888:	4d05      	ldr	r5, [pc, #20]	; (80078a0 <_isatty_r+0x1c>)
 800788a:	4604      	mov	r4, r0
 800788c:	4608      	mov	r0, r1
 800788e:	602b      	str	r3, [r5, #0]
 8007890:	f7f9 ffba 	bl	8001808 <_isatty>
 8007894:	1c43      	adds	r3, r0, #1
 8007896:	d102      	bne.n	800789e <_isatty_r+0x1a>
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	b103      	cbz	r3, 800789e <_isatty_r+0x1a>
 800789c:	6023      	str	r3, [r4, #0]
 800789e:	bd38      	pop	{r3, r4, r5, pc}
 80078a0:	20000730 	.word	0x20000730

080078a4 <_lseek_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	4604      	mov	r4, r0
 80078a8:	4608      	mov	r0, r1
 80078aa:	4611      	mov	r1, r2
 80078ac:	2200      	movs	r2, #0
 80078ae:	4d05      	ldr	r5, [pc, #20]	; (80078c4 <_lseek_r+0x20>)
 80078b0:	602a      	str	r2, [r5, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	f7f9 ffb2 	bl	800181c <_lseek>
 80078b8:	1c43      	adds	r3, r0, #1
 80078ba:	d102      	bne.n	80078c2 <_lseek_r+0x1e>
 80078bc:	682b      	ldr	r3, [r5, #0]
 80078be:	b103      	cbz	r3, 80078c2 <_lseek_r+0x1e>
 80078c0:	6023      	str	r3, [r4, #0]
 80078c2:	bd38      	pop	{r3, r4, r5, pc}
 80078c4:	20000730 	.word	0x20000730

080078c8 <_read_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4604      	mov	r4, r0
 80078cc:	4608      	mov	r0, r1
 80078ce:	4611      	mov	r1, r2
 80078d0:	2200      	movs	r2, #0
 80078d2:	4d05      	ldr	r5, [pc, #20]	; (80078e8 <_read_r+0x20>)
 80078d4:	602a      	str	r2, [r5, #0]
 80078d6:	461a      	mov	r2, r3
 80078d8:	f7f9 ff43 	bl	8001762 <_read>
 80078dc:	1c43      	adds	r3, r0, #1
 80078de:	d102      	bne.n	80078e6 <_read_r+0x1e>
 80078e0:	682b      	ldr	r3, [r5, #0]
 80078e2:	b103      	cbz	r3, 80078e6 <_read_r+0x1e>
 80078e4:	6023      	str	r3, [r4, #0]
 80078e6:	bd38      	pop	{r3, r4, r5, pc}
 80078e8:	20000730 	.word	0x20000730

080078ec <_init>:
 80078ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ee:	bf00      	nop
 80078f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078f2:	bc08      	pop	{r3}
 80078f4:	469e      	mov	lr, r3
 80078f6:	4770      	bx	lr

080078f8 <_fini>:
 80078f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fa:	bf00      	nop
 80078fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078fe:	bc08      	pop	{r3}
 8007900:	469e      	mov	lr, r3
 8007902:	4770      	bx	lr
